void sub_1D50A0488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(_QWORD **)(v19 + 184));
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::~deque[abi:ne180100](a14);
  std::deque<std::valarray<double>>::~deque[abi:ne180100](a15);
  nms::QuantizedScoreMap::~QuantizedScoreMap((nms::QuantizedScoreMap *)(v19 + 48));
  _Unwind_Resume(a1);
}

void sub_1D50A0894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<unsigned char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1D50A2484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a71;
  uint64_t v71;

  nms::RectForest<unsigned short,double>::~RectForest((uint64_t)&a71);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100]((_QWORD *)(v71 - 192));
  nms::RectForest<unsigned short,double>::~RectForest((uint64_t)&a40);
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)&a65);
  nms::RectForest<unsigned short,double>::~RectForest((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1D50A27BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::valarray<double>::resize(uint64_t a1, unint64_t a2, double a3)
{
  _BYTE *v6;
  _BYTE *v7;
  double *v8;

  v6 = *(_BYTE **)a1;
  if (v6)
  {
    v7 = *(_BYTE **)(a1 + 8);
    if (v7 != v6)
      *(_QWORD *)(a1 + 8) = &v7[(v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (double *)operator new(8 * a2);
    *(_QWORD *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(_QWORD *)(a1 + 8) = v8;
  }
}

void sub_1D50A350C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned short,unsigned short>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v3 = a1[5];
  v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      v12 = a1[4];
      v14 = a1[1];
      v13 = a1[2];
      v15 = (_QWORD *)(v14 + 8 * (v12 >> 10));
      if (v13 == v14)
      {
        v16 = (char *)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v15, 0, a2);
        v19 = 0;
        v18 = (char *)(v14 + 8 * ((v12 + v3) >> 10));
      }
      else
      {
        v16 = (char *)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v15, *v15 + 4 * (v12 & 0x3FF), a2);
        v18 = (char *)(v14 + 8 * ((v12 + v3) >> 10));
        v19 = *(_QWORD *)v18 + 4 * ((v12 + v3) & 0x3FF);
      }
      if (v19 != v17)
      {
        v28 = ((v19 - *(_QWORD *)v18) >> 2) + ((v18 - v16) << 7) - ((v17 - *(_QWORD *)v16) >> 2);
        if (v28 >= 1)
        {
          a1[5] = v3 - v28;
          while (std::deque<std::pair<unsigned short,unsigned short>>::__maybe_remove_back_spare[abi:ne180100](a1))
            ;
        }
      }
    }
  }
  else
  {
    v5 = a1[1];
    v6 = a1[2];
    if (v6 == v5)
      v7 = 0;
    else
      v7 = ((v6 - v5) << 7) - 1;
    v8 = a1[4] + v3;
    v9 = v7 - v8;
    if (v4 > v9)
    {
      std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1, v4 - v9);
      v3 = a1[5];
      v5 = a1[1];
      v6 = a1[2];
      v8 = a1[4] + v3;
    }
    v10 = (_QWORD *)(v5 + 8 * (v8 >> 10));
    if (v6 == v5)
      v11 = 0;
    else
      v11 = (char *)(*v10 + 4 * (v8 & 0x3FF));
    v20 = std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v10, (uint64_t)v11, v4);
    if (v11 != v21)
    {
      v22 = v20;
      v23 = (uint64_t)v21;
      do
      {
        if (v10 == v22)
          v24 = v23;
        else
          v24 = *v10 + 4096;
        if (v11 == (char *)v24)
        {
          v26 = v11;
        }
        else
        {
          v25 = (v24 - (_QWORD)v11) & 0xFFFFFFFFFFFFFFFCLL;
          bzero(v11, v25);
          v26 = &v11[v25];
        }
        v3 += (v26 - v11) >> 2;
        if (v10 == v22)
          break;
        v27 = (char *)v10[1];
        ++v10;
        v11 = v27;
      }
      while (v27 != (char *)v23);
      a1[5] = v3;
    }
  }
}

_QWORD *std::map<nms::ForestLevelType,nms::RepresentationDimType>::at(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

uint64_t std::valarray<double>::~valarray(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1D50A397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1D50A3A44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50A4584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{

  _Unwind_Resume(a1);
}

void sub_1D50A4838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D50A49EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D50A4BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nms::PyramidNMS<unsigned short,double,unsigned char>::~PyramidNMS(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void **v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void **v51;
  unint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  void **v64;
  unint64_t v65;
  void **v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  void **v75;
  unint64_t v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  void **v88;
  unint64_t v89;
  void **v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void **v97;
  void **v98;
  unint64_t v99;
  void **v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void **v109;
  void **v110;
  unint64_t v111;
  void **v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void **v119;
  void **v120;
  unint64_t v121;
  void **v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void **v131;
  void **v132;
  unint64_t v133;
  void **v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void **v141;
  void **v142;
  unint64_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  void **v153;
  void **v154;
  unint64_t v155;
  void **v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void **v163;
  void **v164;
  unint64_t v165;
  void **v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  void **v175;
  void **v176;
  unint64_t v177;
  void **v178;
  uint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  void **v185;
  void **v186;
  _QWORD *v187;
  unint64_t v188;
  void **v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void **v198;
  void **v199;
  _QWORD *v200;
  unint64_t v201;
  void **v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void **v211;
  void **v212;
  _QWORD *v213;
  unint64_t v214;
  void **v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void **v224;
  void **v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;

  *a1 = &off_1E98D92E0;
  v2 = (void **)a1[26];
  v3 = (void **)a1[27];
  if (v3 == v2)
  {
    v4 = a1 + 30;
    v3 = (void **)a1[26];
  }
  else
  {
    v4 = a1 + 30;
    v5 = a1[29];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 16 * v5;
    v9 = *(uint64_t *)((char *)v2 + (((a1[30] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 240) + v5);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          if (*(void **)(v8 + 8) != v10)
            *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[26];
      v3 = (void **)a1[27];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v13 = a1[27];
      v2 = (void **)(a1[26] + 8);
      a1[26] = v2;
      v12 = v13 - (_QWORD)v2;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 128;
  }
  else
  {
    if (v12 >> 3 != 2)
      goto LABEL_19;
    v14 = 256;
  }
  a1[29] = v14;
LABEL_19:
  v15 = (void **)a1[32];
  v16 = (void **)a1[33];
  if (v16 == v15)
  {
    v20 = a1 + 36;
    v16 = (void **)a1[32];
  }
  else
  {
    v17 = a1[35];
    v18 = &v15[v17 / 0x55];
    v19 = (uint64_t)*v18 + 48 * (v17 % 0x55);
    v20 = a1 + 36;
    v21 = (unint64_t)v15[(a1[36] + v17) / 0x55] + 48 * ((a1[36] + v17) % 0x55);
    if (v19 != v21)
    {
      do
      {
        v19 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v19) + 48;
        if (v19 - (_QWORD)*v18 == 4080)
        {
          v22 = (uint64_t)v18[1];
          ++v18;
          v19 = v22;
        }
      }
      while (v19 != v21);
      v15 = (void **)a1[32];
      v16 = (void **)a1[33];
    }
  }
  *v20 = 0;
  v23 = (char *)v16 - (char *)v15;
  if (v23 >= 0x11)
  {
    do
    {
      operator delete(*v15);
      v24 = a1[33];
      v15 = (void **)(a1[32] + 8);
      a1[32] = v15;
      v23 = v24 - (_QWORD)v15;
    }
    while (v23 > 0x10);
  }
  if (v23 >> 3 == 1)
  {
    v25 = 42;
  }
  else
  {
    if (v23 >> 3 != 2)
      goto LABEL_33;
    v25 = 85;
  }
  a1[35] = v25;
LABEL_33:
  v26 = (void **)a1[38];
  v27 = (void **)a1[39];
  if (v27 == v26)
  {
    v32 = a1 + 42;
    v27 = (void **)a1[38];
  }
  else
  {
    v28 = a1[41];
    v29 = &v26[v28 >> 8];
    v30 = (uint64_t)*v29;
    v31 = (uint64_t)*v29 + 16 * v28;
    v32 = a1 + 42;
    v33 = *(uint64_t *)((char *)v26 + (((a1[42] + v28) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 336) + v28);
    if (v31 != v33)
    {
      do
      {
        v34 = *(void **)v31;
        if (*(_QWORD *)v31)
        {
          if (*(void **)(v31 + 8) != v34)
            *(_QWORD *)(v31 + 8) = v34;
          operator delete(v34);
          *(_QWORD *)v31 = 0;
          *(_QWORD *)(v31 + 8) = 0;
          v30 = (uint64_t)*v29;
        }
        v31 += 16;
        if (v31 - v30 == 4096)
        {
          v35 = (uint64_t)v29[1];
          ++v29;
          v30 = v35;
          v31 = v35;
        }
      }
      while (v31 != v33);
      v26 = (void **)a1[38];
      v27 = (void **)a1[39];
    }
  }
  *v32 = 0;
  v36 = (char *)v27 - (char *)v26;
  if ((unint64_t)((char *)v27 - (char *)v26) >= 0x11)
  {
    do
    {
      operator delete(*v26);
      v37 = a1[39];
      v26 = (void **)(a1[38] + 8);
      a1[38] = v26;
      v36 = v37 - (_QWORD)v26;
    }
    while (v36 > 0x10);
  }
  if (v36 >> 3 == 1)
  {
    v38 = 128;
  }
  else
  {
    if (v36 >> 3 != 2)
      goto LABEL_51;
    v38 = 256;
  }
  a1[41] = v38;
LABEL_51:
  v39 = (void **)a1[44];
  v40 = (void **)a1[45];
  if (v40 == v39)
  {
    v44 = a1 + 48;
    v40 = (void **)a1[44];
  }
  else
  {
    v41 = a1[47];
    v42 = &v39[v41 / 0x55];
    v43 = (uint64_t)*v42 + 48 * (v41 % 0x55);
    v44 = a1 + 48;
    v45 = (unint64_t)v39[(a1[48] + v41) / 0x55] + 48 * ((a1[48] + v41) % 0x55);
    if (v43 != v45)
    {
      do
      {
        v43 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v43) + 48;
        if (v43 - (_QWORD)*v42 == 4080)
        {
          v46 = (uint64_t)v42[1];
          ++v42;
          v43 = v46;
        }
      }
      while (v43 != v45);
      v39 = (void **)a1[44];
      v40 = (void **)a1[45];
    }
  }
  *v44 = 0;
  v47 = (char *)v40 - (char *)v39;
  if (v47 >= 0x11)
  {
    do
    {
      operator delete(*v39);
      v48 = a1[45];
      v39 = (void **)(a1[44] + 8);
      a1[44] = v39;
      v47 = v48 - (_QWORD)v39;
    }
    while (v47 > 0x10);
  }
  if (v47 >> 3 == 1)
  {
    v49 = 42;
  }
  else
  {
    if (v47 >> 3 != 2)
      goto LABEL_65;
    v49 = 85;
  }
  a1[47] = v49;
LABEL_65:
  v50 = (void **)a1[50];
  v51 = (void **)a1[51];
  if (v51 == v50)
  {
    v56 = a1 + 54;
    v51 = (void **)a1[50];
  }
  else
  {
    v52 = a1[53];
    v53 = &v50[v52 >> 8];
    v54 = (uint64_t)*v53;
    v55 = (uint64_t)*v53 + 16 * v52;
    v56 = a1 + 54;
    v57 = *(uint64_t *)((char *)v50 + (((a1[54] + v52) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 432) + v52);
    if (v55 != v57)
    {
      do
      {
        v58 = *(void **)v55;
        if (*(_QWORD *)v55)
        {
          if (*(void **)(v55 + 8) != v58)
            *(_QWORD *)(v55 + 8) = v58;
          operator delete(v58);
          *(_QWORD *)v55 = 0;
          *(_QWORD *)(v55 + 8) = 0;
          v54 = (uint64_t)*v53;
        }
        v55 += 16;
        if (v55 - v54 == 4096)
        {
          v59 = (uint64_t)v53[1];
          ++v53;
          v54 = v59;
          v55 = v59;
        }
      }
      while (v55 != v57);
      v50 = (void **)a1[50];
      v51 = (void **)a1[51];
    }
  }
  *v56 = 0;
  v60 = (char *)v51 - (char *)v50;
  if ((unint64_t)((char *)v51 - (char *)v50) >= 0x11)
  {
    do
    {
      operator delete(*v50);
      v61 = a1[51];
      v50 = (void **)(a1[50] + 8);
      a1[50] = v50;
      v60 = v61 - (_QWORD)v50;
    }
    while (v60 > 0x10);
  }
  if (v60 >> 3 == 1)
  {
    v62 = 128;
  }
  else
  {
    if (v60 >> 3 != 2)
      goto LABEL_83;
    v62 = 256;
  }
  a1[53] = v62;
LABEL_83:
  v63 = (void **)a1[56];
  v64 = (void **)a1[57];
  if (v64 == v63)
  {
    v68 = a1 + 60;
    v64 = (void **)a1[56];
  }
  else
  {
    v65 = a1[59];
    v66 = &v63[v65 / 0x55];
    v67 = (uint64_t)*v66 + 48 * (v65 % 0x55);
    v68 = a1 + 60;
    v69 = (unint64_t)v63[(a1[60] + v65) / 0x55] + 48 * ((a1[60] + v65) % 0x55);
    if (v67 != v69)
    {
      do
      {
        v67 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v67) + 48;
        if (v67 - (_QWORD)*v66 == 4080)
        {
          v70 = (uint64_t)v66[1];
          ++v66;
          v67 = v70;
        }
      }
      while (v67 != v69);
      v63 = (void **)a1[56];
      v64 = (void **)a1[57];
    }
  }
  *v68 = 0;
  v71 = (char *)v64 - (char *)v63;
  if (v71 >= 0x11)
  {
    do
    {
      operator delete(*v63);
      v72 = a1[57];
      v63 = (void **)(a1[56] + 8);
      a1[56] = v63;
      v71 = v72 - (_QWORD)v63;
    }
    while (v71 > 0x10);
  }
  if (v71 >> 3 == 1)
  {
    v73 = 42;
  }
  else
  {
    if (v71 >> 3 != 2)
      goto LABEL_97;
    v73 = 85;
  }
  a1[59] = v73;
LABEL_97:
  v74 = (void **)a1[62];
  v75 = (void **)a1[63];
  if (v75 == v74)
  {
    v80 = a1 + 66;
    v75 = (void **)a1[62];
  }
  else
  {
    v76 = a1[65];
    v77 = &v74[v76 >> 8];
    v78 = (uint64_t)*v77;
    v79 = (uint64_t)*v77 + 16 * v76;
    v80 = a1 + 66;
    v81 = *(uint64_t *)((char *)v74 + (((a1[66] + v76) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 528) + v76);
    if (v79 != v81)
    {
      do
      {
        v82 = *(void **)v79;
        if (*(_QWORD *)v79)
        {
          if (*(void **)(v79 + 8) != v82)
            *(_QWORD *)(v79 + 8) = v82;
          operator delete(v82);
          *(_QWORD *)v79 = 0;
          *(_QWORD *)(v79 + 8) = 0;
          v78 = (uint64_t)*v77;
        }
        v79 += 16;
        if (v79 - v78 == 4096)
        {
          v83 = (uint64_t)v77[1];
          ++v77;
          v78 = v83;
          v79 = v83;
        }
      }
      while (v79 != v81);
      v74 = (void **)a1[62];
      v75 = (void **)a1[63];
    }
  }
  *v80 = 0;
  v84 = (char *)v75 - (char *)v74;
  if ((unint64_t)((char *)v75 - (char *)v74) >= 0x11)
  {
    do
    {
      operator delete(*v74);
      v85 = a1[63];
      v74 = (void **)(a1[62] + 8);
      a1[62] = v74;
      v84 = v85 - (_QWORD)v74;
    }
    while (v84 > 0x10);
  }
  if (v84 >> 3 == 1)
  {
    v86 = 128;
  }
  else
  {
    if (v84 >> 3 != 2)
      goto LABEL_115;
    v86 = 256;
  }
  a1[65] = v86;
LABEL_115:
  v87 = (void **)a1[68];
  v88 = (void **)a1[69];
  if (v88 == v87)
  {
    v92 = a1 + 72;
    v88 = (void **)a1[68];
  }
  else
  {
    v89 = a1[71];
    v90 = &v87[v89 / 0x55];
    v91 = (uint64_t)*v90 + 48 * (v89 % 0x55);
    v92 = a1 + 72;
    v93 = (unint64_t)v87[(a1[72] + v89) / 0x55] + 48 * ((a1[72] + v89) % 0x55);
    if (v91 != v93)
    {
      do
      {
        v91 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v91) + 48;
        if (v91 - (_QWORD)*v90 == 4080)
        {
          v94 = (uint64_t)v90[1];
          ++v90;
          v91 = v94;
        }
      }
      while (v91 != v93);
      v88 = (void **)a1[69];
      v87 = (void **)a1[68];
    }
  }
  *v92 = 0;
  v95 = (char *)v88 - (char *)v87;
  if (v95 >= 0x11)
  {
    do
    {
      operator delete(*v87);
      v87 = (void **)(a1[68] + 8);
      a1[68] = v87;
      v95 = a1[69] - (_QWORD)v87;
    }
    while (v95 > 0x10);
  }
  if (v95 >> 3 == 1)
  {
    v96 = 42;
  }
  else
  {
    if (v95 >> 3 != 2)
      goto LABEL_129;
    v96 = 85;
  }
  a1[71] = v96;
LABEL_129:
  v97 = (void **)a1[74];
  v98 = (void **)a1[75];
  if (v98 == v97)
  {
    v103 = a1 + 78;
    v98 = (void **)a1[74];
  }
  else
  {
    v99 = a1[77];
    v100 = &v97[v99 >> 8];
    v101 = (uint64_t)*v100;
    v102 = (uint64_t)*v100 + 16 * v99;
    v103 = a1 + 78;
    v104 = *(uint64_t *)((char *)v97 + (((a1[78] + v99) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((_BYTE *)a1 + 624) + v99);
    if (v102 != v104)
    {
      do
      {
        v105 = *(void **)v102;
        if (*(_QWORD *)v102)
        {
          if (*(void **)(v102 + 8) != v105)
            *(_QWORD *)(v102 + 8) = v105;
          operator delete(v105);
          *(_QWORD *)v102 = 0;
          *(_QWORD *)(v102 + 8) = 0;
          v101 = (uint64_t)*v100;
        }
        v102 += 16;
        if (v102 - v101 == 4096)
        {
          v106 = (uint64_t)v100[1];
          ++v100;
          v101 = v106;
          v102 = v106;
        }
      }
      while (v102 != v104);
      v98 = (void **)a1[75];
      v97 = (void **)a1[74];
    }
  }
  *v103 = 0;
  v107 = (char *)v98 - (char *)v97;
  if ((unint64_t)((char *)v98 - (char *)v97) >= 0x11)
  {
    do
    {
      operator delete(*v97);
      v97 = (void **)(a1[74] + 8);
      a1[74] = v97;
      v107 = a1[75] - (_QWORD)v97;
    }
    while (v107 > 0x10);
  }
  if (v107 >> 3 == 1)
  {
    v108 = 128;
  }
  else
  {
    if (v107 >> 3 != 2)
      goto LABEL_147;
    v108 = 256;
  }
  a1[77] = v108;
LABEL_147:
  v109 = (void **)a1[80];
  v110 = (void **)a1[81];
  if (v110 == v109)
  {
    v114 = a1 + 84;
    v110 = (void **)a1[80];
  }
  else
  {
    v111 = a1[83];
    v112 = &v109[v111 / 0x55];
    v113 = (uint64_t)*v112 + 48 * (v111 % 0x55);
    v114 = a1 + 84;
    v115 = (unint64_t)v109[(a1[84] + v111) / 0x55] + 48 * ((a1[84] + v111) % 0x55);
    if (v113 != v115)
    {
      do
      {
        v113 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v113) + 48;
        if (v113 - (_QWORD)*v112 == 4080)
        {
          v116 = (uint64_t)v112[1];
          ++v112;
          v113 = v116;
        }
      }
      while (v113 != v115);
      v110 = (void **)a1[81];
      v109 = (void **)a1[80];
    }
  }
  *v114 = 0;
  v117 = (char *)v110 - (char *)v109;
  if (v117 >= 0x11)
  {
    do
    {
      operator delete(*v109);
      v109 = (void **)(a1[80] + 8);
      a1[80] = v109;
      v117 = a1[81] - (_QWORD)v109;
    }
    while (v117 > 0x10);
  }
  if (v117 >> 3 == 1)
  {
    v118 = 42;
  }
  else
  {
    if (v117 >> 3 != 2)
      goto LABEL_161;
    v118 = 85;
  }
  a1[83] = v118;
LABEL_161:
  v119 = (void **)a1[86];
  v120 = (void **)a1[87];
  if (v120 == v119)
  {
    v125 = a1 + 90;
    v120 = (void **)a1[86];
  }
  else
  {
    v121 = a1[89];
    v122 = &v119[v121 >> 8];
    v123 = (uint64_t)*v122;
    v124 = (uint64_t)*v122 + 16 * v121;
    v125 = a1 + 90;
    v126 = *(uint64_t *)((char *)v119 + (((a1[90] + v121) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((_BYTE *)a1 + 720) + v121);
    if (v124 != v126)
    {
      do
      {
        v127 = *(void **)v124;
        if (*(_QWORD *)v124)
        {
          if (*(void **)(v124 + 8) != v127)
            *(_QWORD *)(v124 + 8) = v127;
          operator delete(v127);
          *(_QWORD *)v124 = 0;
          *(_QWORD *)(v124 + 8) = 0;
          v123 = (uint64_t)*v122;
        }
        v124 += 16;
        if (v124 - v123 == 4096)
        {
          v128 = (uint64_t)v122[1];
          ++v122;
          v123 = v128;
          v124 = v128;
        }
      }
      while (v124 != v126);
      v120 = (void **)a1[87];
      v119 = (void **)a1[86];
    }
  }
  *v125 = 0;
  v129 = (char *)v120 - (char *)v119;
  if ((unint64_t)((char *)v120 - (char *)v119) >= 0x11)
  {
    do
    {
      operator delete(*v119);
      v119 = (void **)(a1[86] + 8);
      a1[86] = v119;
      v129 = a1[87] - (_QWORD)v119;
    }
    while (v129 > 0x10);
  }
  if (v129 >> 3 == 1)
  {
    v130 = 128;
  }
  else
  {
    if (v129 >> 3 != 2)
      goto LABEL_179;
    v130 = 256;
  }
  a1[89] = v130;
LABEL_179:
  v131 = (void **)a1[92];
  v132 = (void **)a1[93];
  if (v132 == v131)
  {
    v136 = a1 + 96;
    v132 = (void **)a1[92];
  }
  else
  {
    v133 = a1[95];
    v134 = &v131[v133 / 0x55];
    v135 = (uint64_t)*v134 + 48 * (v133 % 0x55);
    v136 = a1 + 96;
    v137 = (unint64_t)v131[(a1[96] + v133) / 0x55] + 48 * ((a1[96] + v133) % 0x55);
    if (v135 != v137)
    {
      do
      {
        v135 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v135) + 48;
        if (v135 - (_QWORD)*v134 == 4080)
        {
          v138 = (uint64_t)v134[1];
          ++v134;
          v135 = v138;
        }
      }
      while (v135 != v137);
      v132 = (void **)a1[93];
      v131 = (void **)a1[92];
    }
  }
  *v136 = 0;
  v139 = (char *)v132 - (char *)v131;
  if (v139 >= 0x11)
  {
    do
    {
      operator delete(*v131);
      v131 = (void **)(a1[92] + 8);
      a1[92] = v131;
      v139 = a1[93] - (_QWORD)v131;
    }
    while (v139 > 0x10);
  }
  if (v139 >> 3 == 1)
  {
    v140 = 42;
  }
  else
  {
    if (v139 >> 3 != 2)
      goto LABEL_193;
    v140 = 85;
  }
  a1[95] = v140;
LABEL_193:
  v141 = (void **)a1[98];
  v142 = (void **)a1[99];
  if (v142 == v141)
  {
    v147 = a1 + 102;
    v142 = (void **)a1[98];
  }
  else
  {
    v143 = a1[101];
    v144 = &v141[v143 >> 8];
    v145 = (uint64_t)*v144;
    v146 = (uint64_t)*v144 + 16 * v143;
    v147 = a1 + 102;
    v148 = *(uint64_t *)((char *)v141 + (((a1[102] + v143) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((_BYTE *)a1 + 816) + v143);
    if (v146 != v148)
    {
      do
      {
        v149 = *(void **)v146;
        if (*(_QWORD *)v146)
        {
          if (*(void **)(v146 + 8) != v149)
            *(_QWORD *)(v146 + 8) = v149;
          operator delete(v149);
          *(_QWORD *)v146 = 0;
          *(_QWORD *)(v146 + 8) = 0;
          v145 = (uint64_t)*v144;
        }
        v146 += 16;
        if (v146 - v145 == 4096)
        {
          v150 = (uint64_t)v144[1];
          ++v144;
          v145 = v150;
          v146 = v150;
        }
      }
      while (v146 != v148);
      v142 = (void **)a1[99];
      v141 = (void **)a1[98];
    }
  }
  *v147 = 0;
  v151 = (char *)v142 - (char *)v141;
  if ((unint64_t)((char *)v142 - (char *)v141) >= 0x11)
  {
    do
    {
      operator delete(*v141);
      v141 = (void **)(a1[98] + 8);
      a1[98] = v141;
      v151 = a1[99] - (_QWORD)v141;
    }
    while (v151 > 0x10);
  }
  if (v151 >> 3 == 1)
  {
    v152 = 128;
  }
  else
  {
    if (v151 >> 3 != 2)
      goto LABEL_211;
    v152 = 256;
  }
  a1[101] = v152;
LABEL_211:
  v153 = (void **)a1[104];
  v154 = (void **)a1[105];
  if (v154 == v153)
  {
    v158 = a1 + 108;
    v154 = (void **)a1[104];
  }
  else
  {
    v155 = a1[107];
    v156 = &v153[v155 / 0x55];
    v157 = (uint64_t)*v156 + 48 * (v155 % 0x55);
    v158 = a1 + 108;
    v159 = (unint64_t)v153[(a1[108] + v155) / 0x55] + 48 * ((a1[108] + v155) % 0x55);
    if (v157 != v159)
    {
      do
      {
        v157 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v157) + 48;
        if (v157 - (_QWORD)*v156 == 4080)
        {
          v160 = (uint64_t)v156[1];
          ++v156;
          v157 = v160;
        }
      }
      while (v157 != v159);
      v154 = (void **)a1[105];
      v153 = (void **)a1[104];
    }
  }
  *v158 = 0;
  v161 = (char *)v154 - (char *)v153;
  if (v161 >= 0x11)
  {
    do
    {
      operator delete(*v153);
      v153 = (void **)(a1[104] + 8);
      a1[104] = v153;
      v161 = a1[105] - (_QWORD)v153;
    }
    while (v161 > 0x10);
  }
  if (v161 >> 3 == 1)
  {
    v162 = 42;
  }
  else
  {
    if (v161 >> 3 != 2)
      goto LABEL_225;
    v162 = 85;
  }
  a1[107] = v162;
LABEL_225:
  v163 = (void **)a1[110];
  v164 = (void **)a1[111];
  if (v164 == v163)
  {
    v169 = a1 + 114;
    v164 = (void **)a1[110];
  }
  else
  {
    v165 = a1[113];
    v166 = &v163[v165 >> 8];
    v167 = (uint64_t)*v166;
    v168 = (uint64_t)*v166 + 16 * v165;
    v169 = a1 + 114;
    v170 = *(uint64_t *)((char *)v163 + (((a1[114] + v165) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((_BYTE *)a1 + 912) + v165);
    if (v168 != v170)
    {
      do
      {
        v171 = *(void **)v168;
        if (*(_QWORD *)v168)
        {
          if (*(void **)(v168 + 8) != v171)
            *(_QWORD *)(v168 + 8) = v171;
          operator delete(v171);
          *(_QWORD *)v168 = 0;
          *(_QWORD *)(v168 + 8) = 0;
          v167 = (uint64_t)*v166;
        }
        v168 += 16;
        if (v168 - v167 == 4096)
        {
          v172 = (uint64_t)v166[1];
          ++v166;
          v167 = v172;
          v168 = v172;
        }
      }
      while (v168 != v170);
      v164 = (void **)a1[111];
      v163 = (void **)a1[110];
    }
  }
  *v169 = 0;
  v173 = (char *)v164 - (char *)v163;
  if ((unint64_t)((char *)v164 - (char *)v163) >= 0x11)
  {
    do
    {
      operator delete(*v163);
      v163 = (void **)(a1[110] + 8);
      a1[110] = v163;
      v173 = a1[111] - (_QWORD)v163;
    }
    while (v173 > 0x10);
  }
  if (v173 >> 3 == 1)
  {
    v174 = 128;
  }
  else
  {
    if (v173 >> 3 != 2)
      goto LABEL_243;
    v174 = 256;
  }
  a1[113] = v174;
LABEL_243:
  v175 = (void **)a1[116];
  v176 = (void **)a1[117];
  if (v176 == v175)
  {
    v180 = a1 + 120;
    v176 = (void **)a1[116];
  }
  else
  {
    v177 = a1[119];
    v178 = &v175[v177 / 0x55];
    v179 = (uint64_t)*v178 + 48 * (v177 % 0x55);
    v180 = a1 + 120;
    v181 = (unint64_t)v175[(a1[120] + v177) / 0x55] + 48 * ((a1[120] + v177) % 0x55);
    if (v179 != v181)
    {
      do
      {
        v179 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v179) + 48;
        if (v179 - (_QWORD)*v178 == 4080)
        {
          v182 = (uint64_t)v178[1];
          ++v178;
          v179 = v182;
        }
      }
      while (v179 != v181);
      v176 = (void **)a1[117];
      v175 = (void **)a1[116];
    }
  }
  *v180 = 0;
  v183 = (char *)v176 - (char *)v175;
  if (v183 >= 0x11)
  {
    do
    {
      operator delete(*v175);
      v175 = (void **)(a1[116] + 8);
      a1[116] = v175;
      v183 = a1[117] - (_QWORD)v175;
    }
    while (v183 > 0x10);
  }
  if (v183 >> 3 == 1)
  {
    v184 = 42;
  }
  else
  {
    if (v183 >> 3 != 2)
      goto LABEL_257;
    v184 = 85;
  }
  a1[119] = v184;
LABEL_257:
  v185 = (void **)a1[8];
  v186 = (void **)a1[9];
  if (v186 == v185)
  {
    v187 = a1 + 12;
    v186 = (void **)a1[8];
  }
  else
  {
    v187 = a1 + 12;
    v188 = a1[11];
    v189 = &v185[v188 >> 8];
    v190 = (uint64_t)*v189;
    v191 = (uint64_t)*v189 + 16 * v188;
    v192 = *(uint64_t *)((char *)v185 + (((a1[12] + v188) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((_BYTE *)a1 + 96) + v188);
    if (v191 != v192)
    {
      do
      {
        v193 = *(void **)v191;
        if (*(_QWORD *)v191)
        {
          if (*(void **)(v191 + 8) != v193)
            *(_QWORD *)(v191 + 8) = v193;
          operator delete(v193);
          *(_QWORD *)v191 = 0;
          *(_QWORD *)(v191 + 8) = 0;
          v190 = (uint64_t)*v189;
        }
        v191 += 16;
        if (v191 - v190 == 4096)
        {
          v194 = (uint64_t)v189[1];
          ++v189;
          v190 = v194;
          v191 = v194;
        }
      }
      while (v191 != v192);
      v185 = (void **)a1[8];
      v186 = (void **)a1[9];
    }
  }
  *v187 = 0;
  v195 = (char *)v186 - (char *)v185;
  if ((unint64_t)((char *)v186 - (char *)v185) >= 0x11)
  {
    do
    {
      operator delete(*v185);
      v196 = a1[9];
      v185 = (void **)(a1[8] + 8);
      a1[8] = v185;
      v195 = v196 - (_QWORD)v185;
    }
    while (v195 > 0x10);
  }
  if (v195 >> 3 == 1)
  {
    v197 = 128;
  }
  else
  {
    if (v195 >> 3 != 2)
      goto LABEL_275;
    v197 = 256;
  }
  a1[11] = v197;
LABEL_275:
  v198 = (void **)a1[14];
  v199 = (void **)a1[15];
  if (v199 == v198)
  {
    v200 = a1 + 18;
    v199 = (void **)a1[14];
  }
  else
  {
    v200 = a1 + 18;
    v201 = a1[17];
    v202 = &v198[v201 >> 8];
    v203 = (uint64_t)*v202;
    v204 = (uint64_t)*v202 + 16 * v201;
    v205 = *(uint64_t *)((char *)v198 + (((a1[18] + v201) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((_BYTE *)a1 + 144) + v201);
    if (v204 != v205)
    {
      do
      {
        v206 = *(void **)v204;
        if (*(_QWORD *)v204)
        {
          if (*(void **)(v204 + 8) != v206)
            *(_QWORD *)(v204 + 8) = v206;
          operator delete(v206);
          *(_QWORD *)v204 = 0;
          *(_QWORD *)(v204 + 8) = 0;
          v203 = (uint64_t)*v202;
        }
        v204 += 16;
        if (v204 - v203 == 4096)
        {
          v207 = (uint64_t)v202[1];
          ++v202;
          v203 = v207;
          v204 = v207;
        }
      }
      while (v204 != v205);
      v198 = (void **)a1[14];
      v199 = (void **)a1[15];
    }
  }
  *v200 = 0;
  v208 = (char *)v199 - (char *)v198;
  if ((unint64_t)((char *)v199 - (char *)v198) >= 0x11)
  {
    do
    {
      operator delete(*v198);
      v209 = a1[15];
      v198 = (void **)(a1[14] + 8);
      a1[14] = v198;
      v208 = v209 - (_QWORD)v198;
    }
    while (v208 > 0x10);
  }
  if (v208 >> 3 == 1)
  {
    v210 = 128;
  }
  else
  {
    if (v208 >> 3 != 2)
      goto LABEL_293;
    v210 = 256;
  }
  a1[17] = v210;
LABEL_293:
  v211 = (void **)a1[20];
  v212 = (void **)a1[21];
  if (v212 == v211)
  {
    v213 = a1 + 24;
    v212 = (void **)a1[20];
  }
  else
  {
    v213 = a1 + 24;
    v214 = a1[23];
    v215 = &v211[v214 >> 8];
    v216 = (uint64_t)*v215;
    v217 = (uint64_t)*v215 + 16 * v214;
    v218 = *(uint64_t *)((char *)v211 + (((a1[24] + v214) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*((_BYTE *)a1 + 192) + v214);
    if (v217 != v218)
    {
      do
      {
        v219 = *(void **)v217;
        if (*(_QWORD *)v217)
        {
          if (*(void **)(v217 + 8) != v219)
            *(_QWORD *)(v217 + 8) = v219;
          operator delete(v219);
          *(_QWORD *)v217 = 0;
          *(_QWORD *)(v217 + 8) = 0;
          v216 = (uint64_t)*v215;
        }
        v217 += 16;
        if (v217 - v216 == 4096)
        {
          v220 = (uint64_t)v215[1];
          ++v215;
          v216 = v220;
          v217 = v220;
        }
      }
      while (v217 != v218);
      v211 = (void **)a1[20];
      v212 = (void **)a1[21];
    }
  }
  *v213 = 0;
  v221 = (char *)v212 - (char *)v211;
  if ((unint64_t)((char *)v212 - (char *)v211) >= 0x11)
  {
    do
    {
      operator delete(*v211);
      v222 = a1[21];
      v211 = (void **)(a1[20] + 8);
      a1[20] = v211;
      v221 = v222 - (_QWORD)v211;
    }
    while (v221 > 0x10);
  }
  if (v221 >> 3 == 1)
  {
    v223 = 128;
  }
  else
  {
    if (v221 >> 3 != 2)
      goto LABEL_311;
    v223 = 256;
  }
  a1[23] = v223;
LABEL_311:
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 25));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 31));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 37));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 43));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 49));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 55));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 61));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 67));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 73));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 79));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 85));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 91));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 97));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 103));
  std::deque<std::valarray<unsigned char>>::shrink_to_fit((uint64_t)(a1 + 109));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit((uint64_t)(a1 + 115));
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)(a1 + 7));
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)(a1 + 13));
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)(a1 + 19));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 115));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 109));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 103));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 97));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 91));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 85));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 79));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 73));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 67));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 61));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 55));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 49));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 43));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 37));
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100]((uint64_t)(a1 + 31));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 25));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 19));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 13));
  std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100]((uint64_t)(a1 + 7));
  v224 = (void **)a1[2];
  v225 = (void **)a1[3];
  a1[6] = 0;
  v226 = (char *)v225 - (char *)v224;
  if ((unint64_t)((char *)v225 - (char *)v224) >= 0x11)
  {
    do
    {
      operator delete(*v224);
      v225 = (void **)a1[3];
      v224 = (void **)(a1[2] + 8);
      a1[2] = v224;
      v226 = (char *)v225 - (char *)v224;
    }
    while ((unint64_t)((char *)v225 - (char *)v224) > 0x10);
  }
  v227 = v226 >> 3;
  if (v227 == 1)
  {
    v228 = 2048;
    goto LABEL_317;
  }
  if (v227 == 2)
  {
    v228 = 4096;
LABEL_317:
    a1[5] = v228;
  }
  if (v224 != v225)
  {
    do
    {
      v229 = *v224++;
      operator delete(v229);
    }
    while (v224 != v225);
    v231 = a1[2];
    v230 = a1[3];
    if (v230 != v231)
      a1[3] = v230 + ((v231 - v230 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v232 = (void *)a1[1];
  if (v232)
    operator delete(v232);
  return a1;
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::~PyramidNMS(_QWORD *a1)
{
  nms::PyramidNMS<unsigned short,double,unsigned char>::~PyramidNMS(a1);
  JUMPOUT(0x1D826E294);
}

void std::deque<std::valarray<unsigned char>>::shrink_to_fit(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 32) >= 0x100uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(_QWORD *)(a1 + 8) += 8;
      *(_QWORD *)(a1 + 32) -= 256;
    }
    std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)a1, 0);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    for (i = *(_QWORD *)(a1 + 16); i != v3; *(_QWORD *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = *(_QWORD *)(a1 + 8);
      i = *(_QWORD *)(a1 + 16) - 8;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::valarray<unsigned char> *,std::allocator<std::valarray<unsigned char> *>>::shrink_to_fit((void **)a1);
}

void std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 32) >= 0x55uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(_QWORD *)(a1 + 8) += 8;
      *(_QWORD *)(a1 + 32) -= 85;
    }
    std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)a1, 0);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    for (i = *(_QWORD *)(a1 + 16); i != v3; *(_QWORD *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = *(_QWORD *)(a1 + 8);
      i = *(_QWORD *)(a1 + 16) - 8;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *,std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>>::shrink_to_fit((void **)a1);
}

void std::deque<std::valarray<BOOL>>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void ***)(a1 + 8);
    if (v3 >= 0x100)
    {
      operator delete(*v4);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v2 = *(_QWORD *)(a1 + 40);
      v3 = *(_QWORD *)(a1 + 32) - 256;
      *(_QWORD *)(a1 + 32) = v3;
    }
    v5 = *(void ***)(a1 + 16);
    if (v5 == v4)
      v6 = 0;
    else
      v6 = 32 * ((char *)v5 - (char *)v4) - 1;
    if (v6 - (v2 + v3) >= 0x100)
    {
      operator delete(*(v5 - 1));
      *(_QWORD *)(a1 + 16) -= 8;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    for (i = *(_QWORD *)(a1 + 16); i != v8; *(_QWORD *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      v8 = *(_QWORD *)(a1 + 8);
      i = *(_QWORD *)(a1 + 16) - 8;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::valarray<BOOL> *,std::allocator<std::valarray<BOOL> *>>::shrink_to_fit((void **)a1);
}

uint64_t std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x55];
    v7 = (uint64_t)*v6 + 48 * (v5 % 0x55);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        v7 = std::deque<std::deque<unsigned short>>::~deque[abi:ne180100](v7) + 48;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 85;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<std::deque<unsigned short>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x55];
    v7 = (char *)*v6 + 48 * (v5 % 0x55);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v5) % 0x55);
    if (v7 != (char *)v8)
    {
      do
      {
        v7 = (char *)(std::deque<unsigned short>::~deque[abi:ne180100](v7) + 48);
        if (v7 - (_BYTE *)*v6 == 4080)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 85;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<unsigned short>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 1024;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 2048;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::valarray<BOOL>::~valarray[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    if (*(void **)(a1 + 8) != v2)
      *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<std::valarray<unsigned char> *,std::allocator<std::valarray<unsigned char> *>>::shrink_to_fit(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

uint64_t std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 85 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55)
    a2 = 1;
  if (v5 < 0xAA)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *,std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>>::shrink_to_fit(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

void std::__split_buffer<std::valarray<BOOL> *,std::allocator<std::valarray<BOOL> *>>::shrink_to_fit(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

uint64_t std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x55];
    v7 = (uint64_t)*v6 + 48 * (v5 % 0x55);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        v7 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v7) + 48;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 85;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<std::valarray<unsigned char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 16 * v5;
    v9 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          if (*(void **)(v8 + 8) != v10)
            *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    v14 = 256;
LABEL_18:
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double std::deque<std::valarray<unsigned char>>::__move_assign(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  v4 = *(void ***)(a1 + 8);
  v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(void ***)(a1 + 8);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = &v4[v7 >> 8];
    v9 = (uint64_t)*v8;
    v10 = (uint64_t)*v8 + 16 * v7;
    v11 = *(uint64_t *)((char *)v4 + (((*(_QWORD *)(a1 + 40) + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 40) + v7);
    if (v10 != v11)
    {
      do
      {
        v12 = *(void **)v10;
        if (*(_QWORD *)v10)
        {
          if (*(void **)(v10 + 8) != v12)
            *(_QWORD *)(v10 + 8) = v12;
          operator delete(v12);
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          v9 = (uint64_t)*v8;
        }
        v10 += 16;
        if (v10 - v9 == 4096)
        {
          v13 = (uint64_t)v8[1];
          ++v8;
          v9 = v13;
          v10 = v13;
        }
      }
      while (v10 != v11);
      v4 = *(void ***)(a1 + 8);
      v5 = *(void ***)(a1 + 16);
    }
  }
  *v6 = 0;
  v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v15 = *(_QWORD *)(a1 + 16);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v14 = v15 - (_QWORD)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 128;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_19;
    v16 = 256;
  }
  *(_QWORD *)(a1 + 32) = v16;
LABEL_19:
  std::deque<std::valarray<unsigned char>>::shrink_to_fit(a1);
  v18 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 != v18)
    *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<std::valarray<unsigned char> *,std::allocator<std::valarray<unsigned char> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

double std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  v4 = *(void ***)(a1 + 8);
  v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(void ***)(a1 + 8);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = &v4[v7 / 0x55];
    v9 = (uint64_t)*v8 + 48 * (v7 % 0x55);
    v10 = (unint64_t)v4[(*(_QWORD *)(a1 + 40) + v7) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v7) % 0x55);
    if (v9 != v10)
    {
      do
      {
        v9 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v9) + 48;
        if (v9 - (_QWORD)*v8 == 4080)
        {
          v11 = (uint64_t)v8[1];
          ++v8;
          v9 = v11;
        }
      }
      while (v9 != v10);
      v4 = *(void ***)(a1 + 8);
      v5 = *(void ***)(a1 + 16);
    }
  }
  *v6 = 0;
  v12 = (char *)v5 - (char *)v4;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v13 = *(_QWORD *)(a1 + 16);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v12 = v13 - (_QWORD)v4;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 42;
  }
  else
  {
    if (v12 >> 3 != 2)
      goto LABEL_15;
    v14 = 85;
  }
  *(_QWORD *)(a1 + 32) = v14;
LABEL_15:
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::shrink_to_fit(a1);
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 != v16)
    *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *,std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

double std::deque<std::valarray<BOOL>>::__move_assign(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  v4 = *(void ***)(a1 + 8);
  v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(void ***)(a1 + 8);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = &v4[v7 >> 8];
    v9 = (uint64_t)*v8;
    v10 = (uint64_t)*v8 + 16 * v7;
    v11 = *(uint64_t *)((char *)v4 + (((*(_QWORD *)(a1 + 40) + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 40) + v7);
    if (v10 != v11)
    {
      do
      {
        v12 = *(void **)v10;
        if (*(_QWORD *)v10)
        {
          if (*(void **)(v10 + 8) != v12)
            *(_QWORD *)(v10 + 8) = v12;
          operator delete(v12);
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          v9 = (uint64_t)*v8;
        }
        v10 += 16;
        if (v10 - v9 == 4096)
        {
          v13 = (uint64_t)v8[1];
          ++v8;
          v9 = v13;
          v10 = v13;
        }
      }
      while (v10 != v11);
      v4 = *(void ***)(a1 + 8);
      v5 = *(void ***)(a1 + 16);
    }
  }
  *v6 = 0;
  v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v15 = *(_QWORD *)(a1 + 16);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v14 = v15 - (_QWORD)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 128;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_19;
    v16 = 256;
  }
  *(_QWORD *)(a1 + 32) = v16;
LABEL_19:
  std::deque<std::valarray<BOOL>>::shrink_to_fit(a1);
  v18 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 != v18)
    *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<std::valarray<BOOL> *,std::allocator<std::valarray<BOOL> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void nms::QuantizedScoreMap::~QuantizedScoreMap(nms::QuantizedScoreMap *this)
{
  void *v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    if ((void *)v3[1] != v2)
      *((_QWORD *)this + 3) = v2;
    operator delete(v2);
    *v3 = 0;
    v3[1] = 0;
  }
}

void nms::RectForest<unsigned short,double>::~RectForest(uint64_t a1)
{
  nms::RectForest<unsigned short,double>::~RectForest(a1);
  JUMPOUT(0x1D826E294);
}

_QWORD *std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 4);
    if (v3 < 1)
      result -= (unint64_t)(255 - v3) >> 8;
    else
      result += (unint64_t)v3 >> 8;
  }
  return result;
}

void std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::allocator<std::valarray<double>>::destroy[abi:ne180100](uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

_QWORD *std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      v5 = 84 - v3;
      v6 = &v2[-(v5 / 0x55)];
      *result = v6;
      v4 = *v6 + 48 * (85 * (v5 / 0x55) - v5) + 4032;
    }
    else
    {
      *result = &v2[v3 / 0x55];
      v4 = v2[v3 / 0x55] + 48 * (v3 % 0x55);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x55];
    v7 = (char *)*v6 + 48 * (v5 % 0x55);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v5) % 0x55);
    if (v7 != (char *)v8)
    {
      do
      {
        v7 = (char *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v7) + 48);
        if (v7 - (_BYTE *)*v6 == 4080)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 85;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<std::valarray<double>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 8];
    v6 = (uint64_t)*v5 + 16 * v4;
    v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v4);
    if (v6 != v7)
    {
      do
      {
        std::allocator<std::valarray<double>>::destroy[abi:ne180100](v6);
        v6 += 16;
        if (v6 - (_QWORD)*v5 == 4096)
        {
          v8 = (uint64_t)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 128;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t nms::RectForest<unsigned short,double>::~RectForest(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;

  *(_QWORD *)a1 = &off_1E98D9300;
  v2 = *(void ***)(a1 + 88);
  v3 = *(void ***)(a1 + 96);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 88);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 112);
    v5 = &v2[v4 >> 8];
    v6 = (uint64_t)*v5 + 16 * v4;
    v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 120) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 120) + v4);
    if (v6 != v7)
    {
      do
      {
        std::allocator<std::valarray<double>>::destroy[abi:ne180100](v6);
        v6 += 16;
        if (v6 - (_QWORD)*v5 == 4096)
        {
          v8 = (uint64_t)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != v7);
      v2 = *(void ***)(a1 + 88);
      v3 = *(void ***)(a1 + 96);
    }
  }
  *(_QWORD *)(a1 + 120) = 0;
  v9 = (char *)v3 - (char *)v2;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v10 = *(_QWORD *)(a1 + 96);
      v2 = (void **)(*(_QWORD *)(a1 + 88) + 8);
      *(_QWORD *)(a1 + 88) = v2;
      v9 = v10 - (_QWORD)v2;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 128;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 256;
  }
  *(_QWORD *)(a1 + 112) = v11;
LABEL_15:
  std::deque<std::valarray<double>>::shrink_to_fit(a1 + 80);
  v12 = *(void ***)(a1 + 136);
  v13 = *(void ***)(a1 + 144);
  if (v13 == v12)
  {
    v14 = (_QWORD *)(a1 + 168);
    v13 = *(void ***)(a1 + 136);
  }
  else
  {
    v14 = (_QWORD *)(a1 + 168);
    v15 = *(_QWORD *)(a1 + 160);
    v16 = &v12[v15 / 0x55];
    v17 = (char *)*v16 + 48 * (v15 % 0x55);
    v18 = (unint64_t)v12[(*(_QWORD *)(a1 + 168) + v15) / 0x55] + 48 * ((*(_QWORD *)(a1 + 168) + v15) % 0x55);
    if (v17 != (char *)v18)
    {
      do
      {
        v17 = (char *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v17) + 48);
        if (v17 - (_BYTE *)*v16 == 4080)
        {
          v19 = (char *)v16[1];
          ++v16;
          v17 = v19;
        }
      }
      while (v17 != (char *)v18);
      v12 = *(void ***)(a1 + 136);
      v13 = *(void ***)(a1 + 144);
    }
  }
  *v14 = 0;
  v20 = (char *)v13 - (char *)v12;
  if (v20 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v21 = *(_QWORD *)(a1 + 144);
      v12 = (void **)(*(_QWORD *)(a1 + 136) + 8);
      *(_QWORD *)(a1 + 136) = v12;
      v20 = v21 - (_QWORD)v12;
    }
    while (v20 > 0x10);
  }
  if (v20 >> 3 == 1)
  {
    v22 = 42;
  }
  else
  {
    if (v20 >> 3 != 2)
      goto LABEL_29;
    v22 = 85;
  }
  *(_QWORD *)(a1 + 160) = v22;
LABEL_29:
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::shrink_to_fit(a1 + 128);
  v23 = *(void **)(a1 + 16);
  if (v23)
  {
    free(v23);
    *(_QWORD *)(a1 + 16) = 0;
  }
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(_QWORD **)(a1 + 184));
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::~deque[abi:ne180100](a1 + 128);
  std::deque<std::valarray<double>>::~deque[abi:ne180100](a1 + 80);
  v24 = *(void **)(a1 + 64);
  if (v24)
  {
    if (*(void **)(a1 + 72) != v24)
      *(_QWORD *)(a1 + 72) = v24;
    operator delete(v24);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  return a1;
}

void std::deque<std::valarray<double>>::shrink_to_fit(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 32) >= 0x100uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(_QWORD *)(a1 + 8) += 8;
      *(_QWORD *)(a1 + 32) -= 256;
    }
    std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)a1, 0);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    for (i = *(_QWORD *)(a1 + 16); i != v3; *(_QWORD *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = *(_QWORD *)(a1 + 8);
      i = *(_QWORD *)(a1 + 16) - 8;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::shrink_to_fit((void **)a1);
}

void std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::shrink_to_fit(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a1 + 32) >= 0x55uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(_QWORD *)(a1 + 8) += 8;
      *(_QWORD *)(a1 + 32) -= 85;
    }
    std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)a1, 0);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    for (i = *(_QWORD *)(a1 + 16); i != v3; *(_QWORD *)(a1 + 16) = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = *(_QWORD *)(a1 + 8);
      i = *(_QWORD *)(a1 + 16) - 8;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  std::__split_buffer<std::deque<std::pair<unsigned short,unsigned short>> *,std::allocator<std::deque<std::pair<unsigned short,unsigned short>> *>>::shrink_to_fit((void **)a1);
}

void std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::shrink_to_fit(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

void std::__split_buffer<std::deque<std::pair<unsigned short,unsigned short>> *,std::allocator<std::deque<std::pair<unsigned short,unsigned short>> *>>::shrink_to_fit(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

double std::deque<std::valarray<double>>::__move_assign(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  v4 = *(void ***)(a1 + 8);
  v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    v5 = *(void ***)(a1 + 8);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = &v4[v6 >> 8];
    v8 = (uint64_t)*v7 + 16 * v6;
    v9 = *(uint64_t *)((char *)v4 + (((*(_QWORD *)(a1 + 40) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v6);
    if (v8 != v9)
    {
      do
      {
        std::allocator<std::valarray<double>>::destroy[abi:ne180100](v8);
        v8 += 16;
        if (v8 - (_QWORD)*v7 == 4096)
        {
          v10 = (uint64_t)v7[1];
          ++v7;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v4 = *(void ***)(a1 + 8);
      v5 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v11 = (char *)v5 - (char *)v4;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v12 = *(_QWORD *)(a1 + 16);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v11 = v12 - (_QWORD)v4;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 128;
  }
  else
  {
    if (v11 >> 3 != 2)
      goto LABEL_15;
    v13 = 256;
  }
  *(_QWORD *)(a1 + 32) = v13;
LABEL_15:
  std::deque<std::valarray<double>>::shrink_to_fit(a1);
  v15 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14 != v15)
    *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

double std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::__move_assign(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  v4 = *(void ***)(a1 + 8);
  v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(void ***)(a1 + 8);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = &v4[v7 / 0x55];
    v9 = (char *)*v8 + 48 * (v7 % 0x55);
    v10 = (unint64_t)v4[(*(_QWORD *)(a1 + 40) + v7) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v7) % 0x55);
    if (v9 != (char *)v10)
    {
      do
      {
        v9 = (char *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v9) + 48);
        if (v9 - (_BYTE *)*v8 == 4080)
        {
          v11 = (char *)v8[1];
          ++v8;
          v9 = v11;
        }
      }
      while (v9 != (char *)v10);
      v4 = *(void ***)(a1 + 8);
      v5 = *(void ***)(a1 + 16);
    }
  }
  *v6 = 0;
  v12 = (char *)v5 - (char *)v4;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v13 = *(_QWORD *)(a1 + 16);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v12 = v13 - (_QWORD)v4;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 42;
  }
  else
  {
    if (v12 >> 3 != 2)
      goto LABEL_15;
    v14 = 85;
  }
  *(_QWORD *)(a1 + 32) = v14;
LABEL_15:
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::shrink_to_fit(a1);
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 != v16)
    *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<std::deque<std::pair<unsigned short,unsigned short>> *,std::allocator<std::deque<std::pair<unsigned short,unsigned short>> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::__tree<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::__map_value_compare<nms::ForestLevelType,std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::less<nms::ForestLevelType>,true>,std::allocator<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>>>::__move_assign(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 1;
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((_QWORD *)a1[1]);
  *a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *a1 = v4;
  }
}

void std::valarray<unsigned char>::resize(uint64_t a1, size_t __sz)
{
  void *v4;
  _BYTE *v5;

  v4 = *(void **)a1;
  if (v4)
  {
    if (*(void **)(a1 + 8) != v4)
      *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (__sz)
  {
    v5 = operator new(__sz);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v5;
    do
    {
      *v5 = 0;
      v5 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 1);
      *(_QWORD *)(a1 + 8) = v5;
      --__sz;
    }
    while (__sz);
  }
}

_QWORD *std::__val_expr<std::_BinaryOp<std::less<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;

  *result = 0;
  result[1] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    v6 = a2;
    v7 = result;
    result = operator new(a3 - a2);
    *v7 = result;
    v7[1] = result;
    v8 = *a4;
    do
    {
      v9 = *v6++;
      *(_BYTE *)result = v9 < v8;
      result = (_QWORD *)((char *)result + 1);
      --v4;
    }
    while (v4);
    v7[1] = result;
  }
  return result;
}

void sub_1D50A8044(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::mask_array<unsigned char>::mask_array[abi:ne180100](_QWORD *a1, unsigned __int8 **a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = a3;
  v5 = a1 + 1;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v10 = 0;
    *v5 = 0;
    a1[2] = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 += v9;
    }
    while (v6 != v7);
    *v5 = 0;
    a1[2] = 0;
    if (v8)
    {
      if (v8 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(8 * v8);
      a1[1] = v10;
      bzero(v10, 8 * v8);
      a1[2] = &v10[8 * v8];
    }
    else
    {
      v10 = 0;
    }
  }
  v11 = *a2;
  v12 = a2[1];
  v13 = v12 - *a2;
  if (v12 != *a2)
  {
    v14 = 0;
    v15 = 0;
    if (v13 <= 1)
      v13 = 1;
    do
    {
      if (v11[v14])
        *(_QWORD *)&v10[8 * v15++] = v14;
      ++v14;
    }
    while (v13 != v14);
  }
  return a1;
}

uint64_t std::deque<unsigned char>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::computeRectRelationships(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  void *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *j;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  float64_t i;
  void *v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void *v122;
  char *v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  void *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  void *v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  size_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  size_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  size_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  size_t v187;
  uint64_t v188;
  unint64_t v189;
  double *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  double v199;
  double v200;
  double v201;
  unint64_t v202;
  int64_t v203;
  uint64_t v204;
  _BYTE *v205;
  double v206;
  _BYTE *v207;
  _BYTE *v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  double *v212;
  void *v213;
  uint64_t v214;
  unint64_t v215;
  double *v216;
  double *v217;
  double *v218;
  uint64_t *v219;
  double v220;
  double v221;
  double v222;
  double v223;
  uint64_t v224;
  double *v225;
  void *v226;
  uint64_t v227;
  unint64_t v228;
  double *v229;
  double *v230;
  double *v231;
  uint64_t *v232;
  double v233;
  double v234;
  double v235;
  double v236;
  uint64_t v237;
  _BYTE *v238;
  double v239;
  _BOOL4 v240;
  char *v241;
  _BYTE *v242;
  char v243;
  uint64_t v244;
  char *v245;
  void *v246;
  uint64_t v247;
  BOOL v248;
  char v249;
  unint64_t v250;
  uint64_t v251;
  float64_t v252;
  char *v253;
  uint64_t v254;
  unsigned __int16 *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  _WORD *v260;
  uint64_t *v261;
  _WORD *v262;
  void **v263;
  unint64_t v264;
  uint64_t v265;
  char *v266;
  void *v267;
  uint64_t v268;
  BOOL v270;
  unint64_t v271;
  uint64_t v272;
  float64_t v273;
  char *v274;
  uint64_t v275;
  unsigned __int16 *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  _WORD *v281;
  uint64_t *v282;
  _WORD *v283;
  void **v284;
  unint64_t v285;
  uint64_t v286;
  char *v287;
  void *v288;
  uint64_t v289;
  double v290;
  BOOL v291;
  double v293;
  unint64_t v294;
  uint64_t v295;
  float64_t v296;
  char *v297;
  uint64_t v298;
  unsigned __int16 *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  _WORD *v304;
  uint64_t *v305;
  _WORD *v306;
  void **v307;
  unint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  _WORD *v311;
  void *v312;
  uint64_t v313;
  _QWORD *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  uint64_t v329;
  BOOL v330;
  _QWORD *v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  uint64_t v343;
  unint64_t v344;
  float64_t v345;
  uint64_t v346;
  unsigned __int8 *v347;
  float64x2_t v348;
  float64x2_t v349;
  double v350;
  _QWORD *v351;
  _QWORD *v352;
  unint64_t v353;
  BOOL v354;
  _QWORD *v355;
  _BOOL4 v356;
  _QWORD *v357;
  uint64_t v358;
  double v359;
  uint64_t v360;
  BOOL v361;
  double *v362;
  unint64_t v363;
  _QWORD *v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  size_t *v377;
  uint64_t v378;
  size_t v379;
  unsigned __int16 *v380;
  unint64_t v381;
  unsigned __int16 v382;
  unsigned __int16 *v383;
  unint64_t v384;
  unsigned __int16 *v385;
  unsigned int v386;
  _QWORD *v387;
  _QWORD *v388;
  unint64_t v389;
  BOOL v390;
  _QWORD *v391;
  unint64_t v392;
  float64_t v393;
  unint64_t v394;
  unsigned __int16 v395;
  uint64_t v396;
  _QWORD *v397;
  unint64_t *v398;
  unsigned __int16 *v399;
  unint64_t v400;
  unsigned __int16 *v401;
  unsigned int v402;
  _QWORD *v403;
  _QWORD *v404;
  unint64_t v405;
  BOOL v406;
  _QWORD *v407;
  unint64_t v408;
  float64_t v409;
  _BYTE *v410;
  unsigned __int8 *v411;
  uint64_t v412;
  unsigned __int8 *v413;
  int v414;
  uint64_t v415;
  unsigned __int8 *v416;
  int v417;
  unint64_t v418;
  unsigned __int8 *v419;
  int v420;
  unint64_t v421;
  uint64_t v422;
  _QWORD *v424;
  unint64_t v425;
  BOOL v426;
  _QWORD *v427;
  unint64_t v428;
  uint64_t v429;
  BOOL v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unsigned __int16 *v434;
  unint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  _QWORD *v441;
  uint64_t v442;
  BOOL v443;
  _QWORD *v444;
  unint64_t v445;
  double v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  size_t v451;
  char *v452;
  char *v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  char *v458;
  uint64_t v459;
  unint64_t v460;
  char *v461;
  uint64_t v462;
  double v463;
  unint64_t v464;
  double v465;
  double *v466;
  unint64_t v467;
  unint64_t v468;
  double v469;
  uint64_t v470;
  void *v471;
  double v472;
  unint64_t v473;
  double v474;
  double *v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  _QWORD *v479;
  _QWORD *v480;
  unint64_t v481;
  BOOL v482;
  _QWORD *v483;
  uint64_t v484;
  unint64_t v485;
  float64_t v486;
  unint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  _QWORD *v490;
  unint64_t v491;
  BOOL v492;
  _QWORD *v493;
  unsigned __int16 *v494;
  unint64_t v495;
  float64_t v496;
  unint64_t v497;
  uint64_t v498;
  float64x2_t v499;
  int64x2_t v500;
  _BYTE *v501;
  _BYTE *v502;
  float64x2_t v503;
  int64x2_t v504;
  float64x2_t v505;
  double v506;
  double *v507;
  double v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  _QWORD *v516;
  double v517;
  double v518;
  _QWORD *v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  _QWORD *v525;
  _QWORD *v526;
  _QWORD *v527;
  unint64_t v528;
  double v529;
  BOOL v530;
  double v531;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  _QWORD *v540;
  _QWORD *v541;
  unint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  _QWORD *v547;
  _QWORD *v548;
  _QWORD *v549;
  unint64_t v550;
  double v551;
  _QWORD *v552;
  unint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  double v556;
  uint64_t v557;
  unint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unint64_t v563;
  _QWORD *v564;
  _QWORD *v565;
  unint64_t v566;
  uint64_t v567;
  _QWORD *v568;
  uint64_t v569;
  unint64_t v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t v574;
  unint64_t v575;
  _QWORD *v576;
  double v577;
  unint64_t v578;
  unsigned __int8 *v579;
  unsigned __int8 *v580;
  char *v581;
  char *v582;
  uint64_t v583;
  uint64_t v584;
  char *v585;
  double v586;
  uint64_t v587;
  char v588;
  unint64_t v589;
  unsigned __int8 *v590;
  unsigned int v591;
  size_t v592;
  char *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  char *v598;
  size_t v599;
  char *v600;
  uint64_t v601;
  char *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  double v606;
  double v607;
  double v608;
  unint64_t v609;
  void *v610;
  uint64_t v611;
  unint64_t v612;
  double *v613;
  double *v614;
  double *v615;
  double *v616;
  double *v617;
  uint64_t *v618;
  double v619;
  double v620;
  double v621;
  double v622;
  double v623;
  double v624;
  double v625;
  double v626;
  uint64_t v627;
  uint64_t k;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  unint64_t v632;
  unint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  unint64_t v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t *v643;
  uint64_t v644;
  _QWORD *v645;
  _QWORD *v646;
  uint64_t v647;
  _QWORD *v648;
  unsigned __int16 *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  unint64_t v654;
  unint64_t v655;
  uint64_t v656;
  unint64_t v657;
  int64x2_t *v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  _QWORD *v664;
  unsigned __int16 *v665;
  uint64_t v666;
  uint64_t v667;
  unsigned __int16 *v668;
  uint64_t v669;
  void **v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  _QWORD *v684;
  _QWORD *v685;
  uint64_t v686;
  _QWORD *v687;
  unsigned __int16 *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  unint64_t v696;
  int64x2_t *v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  _QWORD *v703;
  unsigned __int16 *v704;
  uint64_t v705;
  uint64_t v706;
  unsigned __int16 *v707;
  uint64_t v708;
  void **v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  unint64_t v715;
  unint64_t v716;
  uint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t *v721;
  uint64_t v722;
  uint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  _QWORD *v726;
  unsigned __int16 *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  uint64_t v734;
  unint64_t v735;
  int64x2_t *v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  _QWORD *v742;
  unsigned __int16 *v743;
  uint64_t v744;
  uint64_t v745;
  unsigned __int16 *v746;
  uint64_t v747;
  void **v748;
  uint64_t v749;
  unint64_t v750;
  uint64_t v751;
  unint64_t v752;
  uint64_t *v753;
  uint64_t v754;
  double *v755;
  uint64_t v758;
  uint64_t v760;
  unsigned __int16 *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  void *v765;
  unint64_t v766;
  _BOOL4 v767;
  double v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  unint64_t v773;
  unsigned __int16 *v774;
  uint64_t v775;
  void *v776;
  uint64_t v777;
  float64_t v778;
  double *v779;
  double v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  unint64_t v784;
  uint64_t v785;
  unint64_t v786;
  unsigned __int16 *v787;
  uint64_t v788;
  unint64_t v789;
  uint64_t v790;
  _WORD *v791;
  _QWORD *v792;
  unsigned __int8 *v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  _QWORD *v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t v802;
  unint64_t v803;
  _QWORD *v805;
  _QWORD *v806;
  uint64_t *v807;
  uint64_t *v808;
  uint64_t v809;
  _QWORD *v810;
  uint64_t v811;
  unint64_t v812;
  _QWORD *v813;
  _QWORD *v814;
  uint64_t *v815;
  uint64_t v816[2];
  void *v817;
  _BYTE *v818;
  double *v819;
  uint64_t v820;
  void *v821;
  double v822;
  void *v823[2];
  __int128 v824;
  __int128 v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  void *v829[2];
  float64x2_t v830;
  __int128 v831;
  void *__p[2];
  __int128 v833;
  __int128 v834;
  _OWORD v835[2];
  __int128 v836;
  double v837;
  double v838;
  void *v839;
  _BYTE *v840;
  void *v841;
  _BYTE *v842;
  double v843;
  double v844;
  double v845;
  double v846;
  void *v847;
  _BYTE *v848;
  void *v849;
  _BYTE *v850;
  void *v851;
  unsigned __int8 *v852;
  float64x2_t *v853;
  char *v854;
  __int128 v855;
  float64x2_t v856;
  float64x2_t v857;
  unint64_t v858;
  uint64_t v859;
  uint64_t v860;

  v3 = a1;
  v860 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 968);
  v6 = v4[4];
  v5 = v4[5];
  v7 = v4[1];
  v8 = *(_QWORD *)(v7 + 8 * ((v5 + v6 - 1) / 0x14)) + 200 * ((v5 + v6 - 1) % 0x14);
  v11 = *(_QWORD **)(v8 + 184);
  v9 = v8 + 184;
  v10 = v11;
  if (v11)
  {
    v12 = v10;
    do
    {
      v13 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    if (v13 == (_QWORD *)v9 || v13[4])
      v14 = 9;
    else
      v14 = v13[5];
    v794 = v14;
    do
    {
      v16 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    if (v16 == (_QWORD *)v9 || v16[4])
    {
LABEL_13:
      v15 = 0;
    }
    else
    {
      switch(v16[5])
      {
        case 0:
        case 1:
          v15 = 4;
          break;
        case 2:
          v15 = 8;
          break;
        case 3:
        case 4:
          v15 = 2;
          break;
        case 5:
          v15 = 5;
          break;
        case 6:
          v15 = 9;
          break;
        case 7:
          v15 = 3;
          break;
        case 8:
          v15 = 14;
          break;
        default:
          goto LABEL_13;
      }
    }
  }
  else
  {
    v15 = 0;
    v794 = 9;
  }
  v17 = *(double *)(a1 + 1232);
  v18 = *(double *)(a1 + 1240);
  v19 = *(double *)(a1 + 1248);
  v20 = *(double *)(a1 + 1256);
  v780 = *(double *)(a1 + 1264);
  v768 = *(double *)(a1 + 1272);
  v21 = *(double *)(a1 + 1280);
  v22 = *(double *)(a1 + 1288);
  v23 = *(double *)(a1 + 1296);
  v24 = *(double *)(a1 + 1304);
  if (v4)
    v25 = v4[5];
  else
    v25 = 0;
  v783 = v25;
  v836 = 0u;
  v834 = 0u;
  memset(v835, 0, sizeof(v835));
  *(_OWORD *)__p = 0u;
  v833 = 0u;
  v830 = 0u;
  v831 = 0u;
  *(_OWORD *)v829 = 0u;
  if (v4[2] != v7)
  {
    v26 = *(_QWORD *)(v7 + 8 * (v6 / 0x14)) + 200 * (v6 % 0x14);
    v27 = *(_QWORD *)(v7 + 8 * ((v5 + v6) / 0x14)) + 200 * ((v5 + v6) % 0x14);
    if (v26 != v27)
    {
      v28 = (_QWORD *)(v7 + 8 * (v6 / 0x14));
      if (v794 == 5)
        v29 = 5;
      else
        v29 = 0;
      if (v794)
        v30 = v29;
      else
        v30 = 4;
      v796 = v15;
      v799 = v27;
      v802 = v30;
      while (1)
      {
        v805 = v28;
        v31 = (char *)v833;
        v32 = (char *)__p[1];
        v812 = *(_QWORD *)(v26 + 112);
        v809 = *(_QWORD *)(*(_QWORD *)(v26 + 88) + ((v812 >> 5) & 0x7FFFFFFFFFFFFF8));
        v33 = v833 - (unint64_t)__p[1];
        v34 = (void *)v833 == __p[1] ? 0 : (((_QWORD)v833 - (unint64_t)__p[1]) << 6) - 1;
        v35 = *((_QWORD *)&v834 + 1) + v834;
        if (v34 == *((_QWORD *)&v834 + 1) + (_QWORD)v834)
          break;
LABEL_93:
        *(_QWORD *)(*(_QWORD *)&v32[(v35 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v35 & 0x1FF)) = v809
                                                                                           + 16
                                                                                           * v812;
        v90 = (*((_QWORD *)&v834 + 1))++;
        if (v802)
          v91 = ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)__p[1]
                                                             + (((unint64_t)(v834 + v90) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                 + 8 * ((v834 + v90) & 0x1FF))
                                     + 8)
                         - **(_QWORD **)(*(_QWORD *)((char *)__p[1]
                                                   + (((unint64_t)(v834 + v90) >> 6) & 0x3FFFFFFFFFFFFF8))
                                       + 8 * ((v834 + v90) & 0x1FF))) >> 3)
              / v802;
        else
          v91 = 0;
        v823[0] = (void *)v91;
        std::deque<unsigned long>::push_back(v835, v823);
        v92 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v836 + 1) + v836 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v836 + 1) + v836 - 1) & 0x1FF));
        v823[1] = *(void **)(*(_QWORD *)((char *)__p[1]
                                       + (((unint64_t)(*((_QWORD *)&v834 + 1) + v834 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((*((_QWORD *)&v834 + 1) + v834 - 1) & 0x1FF));
        *(_QWORD *)&v824 = 2;
        *((_QWORD *)&v824 + 1) = v92;
        *(_QWORD *)&v825 = v15;
        *((void **)&v825 + 1) = v823[1];
        v826 = 3;
        v827 = v92;
        v828 = v15;
        std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::operator std::valarray<double>((double *)&v855, (uint64_t)v823);
        v93 = *(char **)&v830.f64[0];
        v94 = (char *)v829[1];
        v95 = *(_QWORD *)&v830.f64[0] - (unint64_t)v829[1];
        if (*(void **)&v830.f64[0] == v829[1])
          v96 = 0;
        else
          v96 = 32 * (*(_QWORD *)&v830.f64[0] - (unint64_t)v829[1]) - 1;
        v97 = *((_QWORD *)&v831 + 1);
        v98 = *((_QWORD *)&v831 + 1) + v831;
        if (v96 != *((_QWORD *)&v831 + 1) + (_QWORD)v831)
          goto LABEL_132;
        if ((unint64_t)v831 >= 0x100)
        {
          *(_QWORD *)&v831 = v831 - 256;
          v99 = (char *)v829[1] + 8;
          v100 = *(_QWORD *)v829[1];
          v829[1] = (char *)v829[1] + 8;
          if (*(_QWORD *)&v830.f64[0] != *(_QWORD *)&v830.f64[1])
            goto LABEL_130;
          v101 = v99 - (char *)v829[0];
          if (v99 > v829[0])
          {
            v102 = v101 >> 3;
            v530 = v101 >> 3 < -1;
            v103 = (v101 >> 3) + 2;
            if (v530)
              v104 = v103;
            else
              v104 = v102 + 1;
            v105 = &v99[-8 * (v104 >> 1)];
            v106 = *(_QWORD *)&v830.f64[0] - (_QWORD)v99;
            if (*(char **)&v830.f64[0] != v99)
            {
              memmove(&v99[-8 * (v104 >> 1)], v99, *(_QWORD *)&v830.f64[0] - (_QWORD)v99);
              v93 = (char *)v829[1];
            }
            v107 = &v93[-8 * (v104 >> 1)];
            v93 = &v105[v106];
            goto LABEL_109;
          }
          if (*(void **)&v830.f64[0] == v829[0])
            v113 = 1;
          else
            v113 = (uint64_t)(*(_QWORD *)&v830.f64[0] - (unint64_t)v829[0]) >> 2;
          v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v113);
          v116 = &v114[8 * (v113 >> 2)];
          v117 = (uint64_t *)v829[1];
          v93 = v116;
          v118 = *(_QWORD *)&v830.f64[0] - (unint64_t)v829[1];
          if (*(void **)&v830.f64[0] != v829[1])
          {
            v93 = &v116[v118 & 0xFFFFFFFFFFFFFFF8];
            v119 = 8 * (v118 >> 3);
            v120 = &v114[8 * (v113 >> 2)];
            do
            {
              v121 = *v117++;
              *(_QWORD *)v120 = v121;
              v120 += 8;
              v119 -= 8;
            }
            while (v119);
          }
          goto LABEL_127;
        }
        v108 = v95 >> 3;
        if (v95 >> 3 >= (unint64_t)((uint64_t)(*(_QWORD *)&v830.f64[1] - (unint64_t)v829[0]) >> 3))
        {
          if (*(void **)&v830.f64[1] == v829[0])
            v109 = 1;
          else
            v109 = (uint64_t)(*(_QWORD *)&v830.f64[1] - (unint64_t)v829[0]) >> 2;
          v858 = (unint64_t)&v830.f64[1];
          *(_QWORD *)&v856.f64[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v109);
          *(_QWORD *)&v856.f64[1] = *(_QWORD *)&v856.f64[0] + 8 * v108;
          v857.f64[0] = v856.f64[1];
          *(_QWORD *)&v857.f64[1] = *(_QWORD *)&v856.f64[0] + 8 * v110;
          v853 = (float64x2_t *)operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v856, &v853);
          for (i = v830.f64[0];
                *(void **)&i != v829[1];
                std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v856, *(_QWORD **)&i))
          {
            *(_QWORD *)&i -= 8;
          }
          v112 = v829[0];
          *(float64x2_t *)v829 = v856;
          v830 = v857;
          if (v112)
            operator delete(v112);
          goto LABEL_131;
        }
        if (*(_QWORD *)&v830.f64[1] == *(_QWORD *)&v830.f64[0])
        {
          *(_QWORD *)&v856.f64[0] = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)v829, &v856);
          v93 = *(char **)&v830.f64[0];
          v123 = (char *)v829[1] + 8;
          v100 = *(_QWORD *)v829[1];
          v829[1] = (char *)v829[1] + 8;
          if (*(_QWORD *)&v830.f64[0] != *(_QWORD *)&v830.f64[1])
            goto LABEL_130;
          v143 = v123 - (char *)v829[0];
          if (v123 > v829[0])
          {
            v144 = v143 >> 3;
            v530 = v143 >> 3 < -1;
            v145 = (v143 >> 3) + 2;
            if (v530)
              v146 = v145;
            else
              v146 = v144 + 1;
            v147 = &v123[-8 * (v146 >> 1)];
            v148 = *(_QWORD *)&v830.f64[0] - (_QWORD)v123;
            if (*(char **)&v830.f64[0] != v123)
            {
              memmove(&v123[-8 * (v146 >> 1)], v123, *(_QWORD *)&v830.f64[0] - (_QWORD)v123);
              v123 = (char *)v829[1];
            }
            v93 = &v147[v148];
            v107 = &v123[-8 * (v146 >> 1)];
LABEL_109:
            v829[1] = v107;
            *(_QWORD *)&v830.f64[0] = v93;
            v3 = a1;
LABEL_130:
            *(_QWORD *)v93 = v100;
            *(_QWORD *)&v830.f64[0] += 8;
            goto LABEL_131;
          }
          if (*(void **)&v830.f64[0] == v829[0])
            v158 = 1;
          else
            v158 = (uint64_t)(*(_QWORD *)&v830.f64[0] - (unint64_t)v829[0]) >> 2;
          v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v158);
          v116 = &v114[8 * (v158 >> 2)];
          v159 = (uint64_t *)v829[1];
          v93 = v116;
          v160 = *(_QWORD *)&v830.f64[0] - (unint64_t)v829[1];
          if (*(void **)&v830.f64[0] != v829[1])
          {
            v93 = &v116[v160 & 0xFFFFFFFFFFFFFFF8];
            v161 = 8 * (v160 >> 3);
            v162 = &v114[8 * (v158 >> 2)];
            do
            {
              v163 = *v159++;
              *(_QWORD *)v162 = v163;
              v162 += 8;
              v161 -= 8;
            }
            while (v161);
          }
LABEL_127:
          v122 = v829[0];
          v829[0] = v114;
          v829[1] = v116;
          *(_QWORD *)&v830.f64[0] = v93;
          *(_QWORD *)&v830.f64[1] = &v114[8 * v115];
          if (v122)
          {
            operator delete(v122);
            v93 = *(char **)&v830.f64[0];
          }
          goto LABEL_130;
        }
        *(_QWORD *)&v856.f64[0] = operator new(0x1000uLL);
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(v829, &v856);
LABEL_131:
        v94 = (char *)v829[1];
        v97 = *((_QWORD *)&v831 + 1);
        v98 = *((_QWORD *)&v831 + 1) + v831;
LABEL_132:
        *(_OWORD *)(*(_QWORD *)&v94[(v98 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v98) = v855;
        *((_QWORD *)&v831 + 1) = v97 + 1;
        v26 += 200;
        v28 = v805;
        if (v26 - *v805 == 4000)
        {
          v28 = v805 + 1;
          v26 = v805[1];
        }
        if (v26 == v27)
          goto LABEL_175;
      }
      if ((unint64_t)v834 < 0x200)
      {
        v45 = v33 >> 3;
        v46 = (char *)*((_QWORD *)&v833 + 1);
        v47 = (char *)__p[0];
        if (v33 >> 3 >= (unint64_t)((uint64_t)(*((_QWORD *)&v833 + 1) - (unint64_t)__p[0]) >> 3))
        {
          if (*((void **)&v833 + 1) == __p[0])
            v50 = 1;
          else
            v50 = (uint64_t)(*((_QWORD *)&v833 + 1) - (unint64_t)__p[0]) >> 2;
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v50);
          v53 = v52;
          v54 = operator new(0x1000uLL);
          v55 = &v51[8 * v45];
          v56 = &v51[8 * v53];
          if (v45 == v53)
          {
            v57 = 8 * v45;
            v15 = v796;
            if (v33 < 1)
            {
              v69 = v57 >> 2;
              if (v31 == v32)
                v70 = 1;
              else
                v70 = v69;
              v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v70);
              v55 = &v71[8 * (v70 >> 2)];
              v56 = &v71[8 * v72];
              if (v51)
                operator delete(v51);
              v51 = v71;
            }
            else
            {
              v58 = v57 >> 3;
              if (v58 >= -1)
                v59 = v58 + 1;
              else
                v59 = v58 + 2;
              v55 -= 8 * (v59 >> 1);
            }
          }
          else
          {
            v15 = v796;
          }
          *(_QWORD *)v55 = v54;
          v73 = v55 + 8;
          for (j = (char *)v833; j != __p[1]; j -= 8)
          {
            if (v55 == v51)
            {
              if (v73 >= v56)
              {
                if (v56 == v51)
                  v79 = 1;
                else
                  v79 = (v56 - v51) >> 2;
                v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v79);
                v82 = v80;
                v55 = &v80[(2 * v79 + 6) & 0xFFFFFFFFFFFFFFF8];
                v83 = v73 - v51;
                v248 = v73 == v51;
                v73 = v55;
                if (!v248)
                {
                  v73 = &v55[v83 & 0xFFFFFFFFFFFFFFF8];
                  v84 = 8 * (v83 >> 3);
                  v85 = v55;
                  v86 = (uint64_t *)v51;
                  do
                  {
                    v87 = *v86++;
                    *(_QWORD *)v85 = v87;
                    v85 += 8;
                    v84 -= 8;
                  }
                  while (v84);
                }
                v56 = &v80[8 * v81];
                if (v51)
                  operator delete(v51);
                v51 = v82;
              }
              else
              {
                v75 = (v56 - v73) >> 3;
                if (v75 >= -1)
                  v76 = v75 + 1;
                else
                  v76 = v75 + 2;
                v77 = v76 >> 1;
                v55 = &v51[8 * (v76 >> 1)];
                v78 = v51;
                if (v73 != v51)
                {
                  memmove(v55, v51, v73 - v51);
                  v78 = v73;
                }
                v73 = &v78[8 * v77];
              }
            }
            v88 = *((_QWORD *)j - 1);
            *((_QWORD *)v55 - 1) = v88;
            v55 -= 8;
          }
          v89 = __p[0];
          __p[0] = v51;
          __p[1] = v55;
          *(_QWORD *)&v833 = v73;
          *((_QWORD *)&v833 + 1) = v56;
          v27 = v799;
          if (v89)
            operator delete(v89);
          goto LABEL_92;
        }
        v48 = operator new(0x1000uLL);
        v49 = v48;
        if (v46 != v31)
        {
          *(_QWORD *)v31 = v48;
          *(_QWORD *)&v833 = v833 + 8;
          v15 = v796;
          v27 = v799;
LABEL_92:
          v32 = (char *)__p[1];
          v35 = *((_QWORD *)&v834 + 1) + v834;
          v3 = a1;
          goto LABEL_93;
        }
        v15 = v796;
        if (v32 == v47)
        {
          if (v31 == v32)
            v124 = 1;
          else
            v124 = (v46 - v32) >> 2;
          v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v124);
          v32 = &v125[(2 * v124 + 6) & 0xFFFFFFFFFFFFFFF8];
          v127 = (uint64_t *)__p[1];
          v128 = v32;
          v129 = v833 - (unint64_t)__p[1];
          v15 = v796;
          v27 = v799;
          if ((void *)v833 != __p[1])
          {
            v128 = &v32[v129 & 0xFFFFFFFFFFFFFFF8];
            v130 = 8 * (v129 >> 3);
            v131 = v32;
            do
            {
              v132 = *v127++;
              *(_QWORD *)v131 = v132;
              v131 += 8;
              v130 -= 8;
            }
            while (v130);
          }
          v133 = __p[0];
          __p[0] = v125;
          __p[1] = v32;
          *(_QWORD *)&v833 = v128;
          *((_QWORD *)&v833 + 1) = &v125[8 * v126];
          if (v133)
          {
            operator delete(v133);
            v32 = (char *)__p[1];
          }
        }
        else
        {
          v27 = v799;
        }
        *((_QWORD *)v32 - 1) = v49;
        v134 = (char *)__p[1];
        v135 = (char *)v833;
        __p[1] = (char *)__p[1] - 8;
        v136 = *(_QWORD *)__p[1];
        __p[1] = v134;
        if ((_QWORD)v833 == *((_QWORD *)&v833 + 1))
        {
          v137 = v134 - (char *)__p[0];
          if (v134 <= __p[0])
          {
            if ((void *)v833 == __p[0])
              v149 = 1;
            else
              v149 = (uint64_t)(v833 - (unint64_t)__p[0]) >> 2;
            v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v149);
            v152 = (uint64_t *)__p[1];
            v135 = &v150[8 * (v149 >> 2)];
            v153 = v833 - (unint64_t)__p[1];
            v15 = v796;
            v27 = v799;
            if ((void *)v833 != __p[1])
            {
              v135 = &v150[8 * (v149 >> 2) + (v153 & 0xFFFFFFFFFFFFFFF8)];
              v154 = 8 * (v153 >> 3);
              v155 = &v150[8 * (v149 >> 2)];
              do
              {
                v156 = *v152++;
                *(_QWORD *)v155 = v156;
                v155 += 8;
                v154 -= 8;
              }
              while (v154);
            }
            v157 = __p[0];
            __p[0] = v150;
            __p[1] = &v150[8 * (v149 >> 2)];
            *(_QWORD *)&v833 = v135;
            *((_QWORD *)&v833 + 1) = &v150[8 * v151];
            if (v157)
            {
              operator delete(v157);
              v135 = (char *)v833;
            }
          }
          else
          {
            v138 = v137 >> 3;
            v530 = v137 >> 3 < -1;
            v139 = (v137 >> 3) + 2;
            if (v530)
              v140 = v139;
            else
              v140 = v138 + 1;
            v141 = &v134[-8 * (v140 >> 1)];
            v142 = v833 - (_QWORD)v134;
            if ((char *)v833 != v134)
            {
              memmove(&v134[-8 * (v140 >> 1)], v134, v833 - (_QWORD)v134);
              v134 = (char *)__p[1];
            }
            v135 = &v141[v142];
            *(_QWORD *)&v833 = &v141[v142];
            __p[1] = &v134[-8 * (v140 >> 1)];
          }
        }
        *(_QWORD *)v135 = v136;
      }
      else
      {
        *(_QWORD *)&v834 = v834 - 512;
        v37 = (char *)__p[1] + 8;
        v36 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v833 == *((_QWORD *)&v833 + 1))
        {
          v38 = v37 - (char *)__p[0];
          if (v37 <= __p[0])
          {
            if ((void *)v833 == __p[0])
              v60 = 1;
            else
              v60 = (uint64_t)(v833 - (unint64_t)__p[0]) >> 2;
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v60);
            v63 = (uint64_t *)__p[1];
            v31 = &v61[8 * (v60 >> 2)];
            v64 = v833 - (unint64_t)__p[1];
            v15 = v796;
            v27 = v799;
            if ((void *)v833 != __p[1])
            {
              v31 = &v61[8 * (v60 >> 2) + (v64 & 0xFFFFFFFFFFFFFFF8)];
              v65 = 8 * (v64 >> 3);
              v66 = &v61[8 * (v60 >> 2)];
              do
              {
                v67 = *v63++;
                *(_QWORD *)v66 = v67;
                v66 += 8;
                v65 -= 8;
              }
              while (v65);
            }
            v68 = __p[0];
            __p[0] = v61;
            __p[1] = &v61[8 * (v60 >> 2)];
            *(_QWORD *)&v833 = v31;
            *((_QWORD *)&v833 + 1) = &v61[8 * v62];
            if (v68)
            {
              operator delete(v68);
              v31 = (char *)v833;
            }
          }
          else
          {
            v39 = v38 >> 3;
            v530 = v38 >> 3 < -1;
            v40 = (v38 >> 3) + 2;
            if (v530)
              v41 = v40;
            else
              v41 = v39 + 1;
            v42 = &v37[-8 * (v41 >> 1)];
            v43 = v833 - (_QWORD)v37;
            if ((char *)v833 != v37)
            {
              memmove(&v37[-8 * (v41 >> 1)], v37, v833 - (_QWORD)v37);
              v31 = (char *)__p[1];
            }
            v44 = &v31[-8 * (v41 >> 1)];
            v31 = &v42[v43];
            *(_QWORD *)&v833 = &v42[v43];
            __p[1] = v44;
            v27 = v799;
          }
        }
        *(_QWORD *)v31 = v36;
      }
      *(_QWORD *)&v833 = v833 + 8;
      goto LABEL_92;
    }
  }
LABEL_175:
  v164 = v783;
  if (a2[5] == v783)
  {
    v165 = 0;
    if (v783)
    {
      while (1)
      {
        v166 = a2[4];
        if (*(_QWORD *)(*(_QWORD *)(a2[1] + (((v166 + v165) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v166 + v165)
                       + 8)
           - *(_QWORD *)(*(_QWORD *)(a2[1] + (((v166 + v165) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v166 + v165)) != *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                                                                         + ((((unint64_t)v836
                                                                                            + v165) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                             + 8 * ((v836 + v165) & 0x1FF)))
          break;
        if (v783 == ++v165)
        {
          v165 = v783;
          break;
        }
      }
    }
    v164 = v783;
    v767 = v165 == v783;
  }
  else
  {
    v767 = 0;
  }
  v167 = v164;
  std::deque<std::valarray<unsigned char>>::resize((_QWORD *)(v3 + 584), v164);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((_QWORD *)(v3 + 632), v167);
  v168 = v167;
  if (v167)
  {
    v169 = 0;
    do
    {
      v170 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v169) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v169) & 0x1FF));
      std::valarray<unsigned char>::resize(*(_QWORD *)(*(_QWORD *)(a1 + 592)+ (((unint64_t)(*(_QWORD *)(a1 + 616) + v169) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(_BYTE *)(a1 + 616) + v169), v170);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * ((*(_QWORD *)(a1 + 664) + v169) / 0x55uLL))+ 48 * ((*(_QWORD *)(a1 + 664) + v169) % 0x55uLL)), v783);
      v171 = 0;
      do
      {
        v172 = *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * ((*(_QWORD *)(a1 + 664) + v169) / 0x55uLL))
             + 48 * ((*(_QWORD *)(a1 + 664) + v169) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v172 + 8) + 8 * ((v171 + *(_QWORD *)(v172 + 32)) / 0x55uLL))+ 48 * ((v171 + *(_QWORD *)(v172 + 32)) % 0x55uLL)), v170);
        ++v171;
      }
      while (v783 != v171);
      ++v169;
      v168 = v783;
    }
    while (v169 != v783);
  }
  v173 = v168;
  std::deque<std::valarray<unsigned char>>::resize((_QWORD *)(a1 + 680), v168);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((_QWORD *)(a1 + 728), v173);
  v174 = v173;
  if (v173)
  {
    v175 = 0;
    do
    {
      v176 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v175) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v175) & 0x1FF));
      std::valarray<unsigned char>::resize(*(_QWORD *)(*(_QWORD *)(a1 + 688)+ (((unint64_t)(*(_QWORD *)(a1 + 712) + v175) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(_BYTE *)(a1 + 712) + v175), v176);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * ((*(_QWORD *)(a1 + 760) + v175) / 0x55uLL))+ 48 * ((*(_QWORD *)(a1 + 760) + v175) % 0x55uLL)), v783);
      v177 = 0;
      do
      {
        v178 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * ((*(_QWORD *)(a1 + 760) + v175) / 0x55uLL))
             + 48 * ((*(_QWORD *)(a1 + 760) + v175) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v178 + 8) + 8 * ((v177 + *(_QWORD *)(v178 + 32)) / 0x55uLL))+ 48 * ((v177 + *(_QWORD *)(v178 + 32)) % 0x55uLL)), v176);
        ++v177;
      }
      while (v783 != v177);
      ++v175;
      v174 = v783;
    }
    while (v175 != v783);
  }
  v179 = v174;
  std::deque<std::valarray<unsigned char>>::resize((_QWORD *)(a1 + 776), v174);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((_QWORD *)(a1 + 824), v179);
  v180 = v179;
  if (v179)
  {
    v181 = 0;
    do
    {
      v182 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v181) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v181) & 0x1FF));
      std::valarray<unsigned char>::resize(*(_QWORD *)(*(_QWORD *)(a1 + 784)+ (((unint64_t)(*(_QWORD *)(a1 + 808) + v181) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(_BYTE *)(a1 + 808) + v181), v182);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * ((*(_QWORD *)(a1 + 856) + v181) / 0x55uLL))+ 48 * ((*(_QWORD *)(a1 + 856) + v181) % 0x55uLL)), v783);
      v183 = 0;
      do
      {
        v184 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * ((*(_QWORD *)(a1 + 856) + v181) / 0x55uLL))
             + 48 * ((*(_QWORD *)(a1 + 856) + v181) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 8) + 8 * ((v183 + *(_QWORD *)(v184 + 32)) / 0x55uLL))+ 48 * ((v183 + *(_QWORD *)(v184 + 32)) % 0x55uLL)), v182);
        ++v183;
      }
      while (v783 != v183);
      ++v181;
      v180 = v783;
    }
    while (v181 != v783);
  }
  v185 = (void *)v180;
  std::deque<std::valarray<unsigned char>>::resize((_QWORD *)(a1 + 872), v180);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize((_QWORD *)(a1 + 920), (unint64_t)v185);
  if (v185)
  {
    v186 = 0;
    do
    {
      v187 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                   + (((unint64_t)(v836 + v186) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v836 + v186) & 0x1FF));
      std::valarray<unsigned char>::resize(*(_QWORD *)(*(_QWORD *)(a1 + 880)+ (((unint64_t)(*(_QWORD *)(a1 + 904) + v186) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(_BYTE *)(a1 + 904) + v186), v187);
      std::deque<std::deque<std::deque<unsigned short>>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 928) + 8 * ((*(_QWORD *)(a1 + 952) + v186) / 0x55uLL))+ 48 * ((*(_QWORD *)(a1 + 952) + v186) % 0x55uLL)), v783);
      v188 = 0;
      do
      {
        v189 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 8 * ((*(_QWORD *)(a1 + 952) + v186) / 0x55uLL))
             + 48 * ((*(_QWORD *)(a1 + 952) + v186) % 0x55uLL);
        std::deque<std::deque<unsigned short>>::resize((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v189 + 8) + 8 * ((v188 + *(_QWORD *)(v189 + 32)) / 0x55uLL))+ 48 * ((v188 + *(_QWORD *)(v189 + 32)) % 0x55uLL)), v187);
        ++v188;
      }
      while (v783 != v188);
      ++v186;
    }
    while (v186 != v783);
    v765 = 0;
    v190 = 0;
    v191 = 0;
    v758 = a3 ^ 1u;
    *(double *)&v821 = 0.0;
    v822 = 0.0;
    if (v794 == 5)
      v192 = 5;
    else
      v192 = 0;
    v819 = 0;
    v820 = 0;
    if (v794)
      v193 = v192;
    else
      v193 = 4;
    v817 = 0;
    v818 = 0;
    v194 = a1;
    v781 = v193;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v194 + 16) + (((*(_QWORD *)(v194 + 40) + v191) >> 9) & 0x7FFFFFFFFFFFF8))
                    + ((*(_QWORD *)(v194 + 40) + v191) & 0xFFF)))
      {
        v195 = v191 + v758;
        v196 = v783;
        if (v191 + v758 < v783)
        {
          v760 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                       + ((((unint64_t)v836 + v191) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v836 + v191) & 0x1FF));
          v782 = (unsigned __int16)v191;
          v786 = v191;
          while (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v194 + 16)
                                        + (((*(_QWORD *)(v194 + 40) + v195) >> 9) & 0x7FFFFFFFFFFFF8))
                            + ((*(_QWORD *)(v194 + 40) + v195) & 0xFFF))
               || !v760)
          {
LABEL_852:
            ++v195;
            v196 = v783;
            if (v195 >= v783)
              goto LABEL_855;
          }
          v803 = 0;
          v766 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                       + ((((unint64_t)v836 + v195) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v836 + v195) & 0x1FF));
          v784 = (unsigned __int16)v195;
          v789 = v195;
          while (1)
          {
            if (v767
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[1] + (((a2[4] + v191) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*((_BYTE *)a2 + 32) + v191))
                           + v803))
            {
              goto LABEL_721;
            }
            if (!v193)
              break;
            v823[0] = *(void **)(*(_QWORD *)((char *)__p[1]
                                           + ((((unint64_t)v834 + v191) >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * ((v834 + v191) & 0x1FF));
            v823[1] = (void *)(v803 * v193);
            *(_QWORD *)&v824 = v193;
            *((_QWORD *)&v824 + 1) = 1;
            std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v856, (uint64_t)v823);
            if (v190)
              goto LABEL_219;
LABEL_220:
            v190 = *(double **)&v856.f64[0];
            v197 = *(uint64_t **)(*(_QWORD *)((char *)__p[1]
                                           + ((((unint64_t)v834 + v195) >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * ((v834 + v195) & 0x1FF));
            v816[0] = 0;
            v816[1] = 0;
            v778 = v856.f64[0];
            if (v193)
            {
              v198 = v197[1] - *v197;
              if (v193 <= v198 >> 3 && ((uint64_t)(*(_QWORD *)&v856.f64[1] - *(_QWORD *)&v856.f64[0]) >> 3) / v193 == 1)
              {
                v199 = *(double *)(*(_QWORD *)&v856.f64[0] + 8);
                v846 = **(double **)&v856.f64[0];
                v200 = *(double *)(*(_QWORD *)&v856.f64[0] + 16);
                v201 = *(double *)(*(_QWORD *)&v856.f64[0] + 24);
                v838 = 0.0;
                v837 = 0.0;
                v845 = v199;
                v844 = v846 + v200;
                v843 = v199 + v201;
                v823[0] = v197;
                v823[1] = 0;
                v202 = (v198 >> 3) / v193;
                *(_QWORD *)&v824 = v202;
                *((_QWORD *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v856, (uint64_t)v823);
                v823[0] = v197;
                v823[1] = (void *)1;
                *(_QWORD *)&v824 = v202;
                *((_QWORD *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v855, (uint64_t)v823);
                v823[0] = v197;
                v823[1] = (void *)2;
                *(_QWORD *)&v824 = v202;
                *((_QWORD *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v851, (uint64_t)v823);
                std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v853, *(double **)&v856.f64[0], *(double **)&v856.f64[1], (double **)&v851);
                if (v851)
                {
                  if (v852 != v851)
                    v852 += ((_BYTE *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                  operator delete(v851);
                }
                v823[0] = v197;
                v823[1] = (void *)3;
                *(_QWORD *)&v824 = v202;
                *((_QWORD *)&v824 + 1) = v193;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)v823);
                std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v851, (double *)v855, *((double **)&v855 + 1), (double **)&v849);
                if (v849)
                {
                  if (v850 != v849)
                    v850 += ((_BYTE *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                  operator delete(v849);
                }
                v823[1] = &v846;
                *(_QWORD *)&v824 = (v854 - (char *)v853) >> 3;
                *((_QWORD *)&v824 + 1) = &v853;
                std::__val_expr<std::_BinaryOp<std::less<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v849, (uint64_t)v823);
                v823[1] = &v845;
                *(_QWORD *)&v824 = (v852 - (_BYTE *)v851) >> 3;
                *((_QWORD *)&v824 + 1) = &v851;
                std::__val_expr<std::_BinaryOp<std::less<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v847, (uint64_t)v823);
                v823[1] = &v844;
                *(_QWORD *)&v824 = (uint64_t)(*(_QWORD *)&v856.f64[1] - *(_QWORD *)&v856.f64[0]) >> 3;
                *((_QWORD *)&v824 + 1) = &v856;
                std::__val_expr<std::_BinaryOp<std::greater<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v841, (uint64_t)v823);
                v823[1] = &v843;
                *(_QWORD *)&v824 = (uint64_t)(*((_QWORD *)&v855 + 1) - v855) >> 3;
                *((_QWORD *)&v824 + 1) = &v855;
                std::__val_expr<std::_BinaryOp<std::greater<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(&v839, (uint64_t)v823);
                v203 = v850 - (_BYTE *)v849;
                if (v850 == v849)
                {
                  v206 = 0.0;
                  v205 = v839;
                  if (v839)
                    goto LABEL_724;
                }
                else
                {
                  std::valarray<BOOL>::resize((uint64_t)&v837, v850 - (_BYTE *)v849);
                  v204 = 0;
                  v205 = v839;
                  v206 = v837;
                  v207 = v849;
                  v208 = v847;
                  v209 = v841;
                  do
                  {
                    *(_BYTE *)(*(_QWORD *)&v206 + v204) = v208[v204] & v207[v204] & v209[v204] & v205[v204];
                    ++v204;
                  }
                  while (v203 != v204);
LABEL_724:
                  if (v840 != v205)
                    v840 = v205;
                  operator delete(v205);
                }
                if (v841)
                {
                  if (v842 != v841)
                    v842 = v841;
                  operator delete(v841);
                }
                if (v847)
                {
                  if (v848 != v847)
                    v848 = v847;
                  operator delete(v847);
                }
                if (v849)
                {
                  if (v850 != v849)
                    v850 = v849;
                  operator delete(v849);
                }
                if (v851)
                {
                  if (v852 != v851)
                    v852 += ((_BYTE *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                  operator delete(v851);
                }
                if (v853)
                {
                  if (v854 != (char *)v853)
                    v854 += ((char *)v853 - v854 + 7) & 0xFFFFFFFFFFFFFFF8;
                  operator delete(v853);
                }
                if ((_QWORD)v855)
                {
                  if (*((_QWORD *)&v855 + 1) != (_QWORD)v855)
                    *((_QWORD *)&v855 + 1) += (v855 - *((_QWORD *)&v855 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                  operator delete((void *)v855);
                }
                if (*(_QWORD *)&v856.f64[0])
                {
                  if (*(_QWORD *)&v856.f64[1] != *(_QWORD *)&v856.f64[0])
                    *(_QWORD *)&v856.f64[1] += (*(_QWORD *)&v856.f64[0] - *(_QWORD *)&v856.f64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
                  operator delete(*(void **)&v856.f64[0]);
                }
                if (*(double *)&v821 != 0.0)
                {
                  if (*(void **)&v822 != v821)
                    v822 = *(double *)&v821;
                  operator delete(v821);
                }
                v577 = v838;
                *(double *)&v821 = v206;
                v822 = v838;
                v578 = ((v197[1] - *v197) >> 3) / v193;
                if (v578 != *(_QWORD *)&v838 - *(_QWORD *)&v206)
                {
                  v581 = 0;
                  v582 = 0;
                  v190 = *(double **)&v778;
                  v191 = v786;
                  v195 = v789;
                  goto LABEL_802;
                }
                if (v578 * v193)
                {
                  v579 = (unsigned __int8 *)operator new(v578 * v193);
                  bzero(v579, v578 * v193);
                  v580 = &v579[v578 * v193];
                }
                else
                {
                  v579 = 0;
                  v580 = 0;
                }
                v583 = 0;
                if (v578 <= 1)
                  v584 = 1;
                else
                  v584 = v578;
                v190 = *(double **)&v778;
                do
                {
                  if (*(_QWORD *)&v577 != *(_QWORD *)&v206)
                  {
                    v585 = (char *)&v579[v583];
                    v586 = v206;
                    v587 = v584;
                    do
                    {
                      v588 = **(_BYTE **)&v586;
                      ++*(_QWORD *)&v586;
                      *v585 = v588;
                      v585 += v193;
                      --v587;
                    }
                    while (v587);
                  }
                  ++v583;
                }
                while (v583 != v193);
                if (v579 == v580)
                {
                  v581 = 0;
                  v582 = 0;
                  v194 = a1;
                  v191 = v786;
                  v195 = v789;
                  if (!v579)
                    goto LABEL_802;
                }
                else
                {
                  v589 = 0;
                  v590 = v579;
                  v191 = v786;
                  v195 = v789;
                  do
                  {
                    v591 = *v590++;
                    v589 += v591;
                  }
                  while (v590 != v580);
                  if (v589)
                  {
                    if (v589 >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v592 = 8 * v589;
                    v593 = (char *)operator new(8 * v589);
                    bzero(v593, v592);
                    v589 = (unint64_t)&v593[v592];
                  }
                  else
                  {
                    v593 = 0;
                  }
                  v594 = 0;
                  v595 = 0;
                  v596 = v580 - v579;
                  if ((unint64_t)(v580 - v579) <= 1)
                    v596 = 1;
                  do
                  {
                    if (v579[v594])
                      *(_QWORD *)&v593[8 * v595++] = v594;
                    ++v594;
                  }
                  while (v596 != v594);
                  v597 = v589 - (_QWORD)v593;
                  if ((char *)v589 == v593)
                  {
                    v598 = 0;
                    v600 = 0;
                    if (v593)
                      goto LABEL_789;
                  }
                  else
                  {
                    if ((v597 & 0x8000000000000000) != 0)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v598 = (char *)operator new(v589 - (_QWORD)v593);
                    v599 = ((v597 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
                    memcpy(v598, v593, v599);
                    v600 = &v598[v599];
                    if (v593)
LABEL_789:
                      operator delete(v593);
                  }
                  v601 = v600 - v598;
                  if (v600 == v598)
                  {
                    v194 = a1;
                    if (v598)
                      operator delete(v598);
                    v581 = 0;
                    v582 = 0;
                    v190 = *(double **)&v778;
                  }
                  else
                  {
                    if (v601 < 0)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v602 = (char *)operator new(v600 - v598);
                    v582 = v602;
                    v603 = 0;
                    v604 = v601 >> 3;
                    v605 = *v197;
                    do
                    {
                      *(_QWORD *)&v602[v603] = *(_QWORD *)(v605 + 8 * *(_QWORD *)&v598[v603]);
                      v603 += 8;
                      --v604;
                    }
                    while (v604);
                    operator delete(v598);
                    v581 = &v582[v603];
                    v194 = a1;
                    v190 = *(double **)&v778;
                    if (!v579)
                    {
LABEL_802:
                      v606 = v190[1];
                      v837 = *v190;
                      v607 = v190[2];
                      v608 = v190[3];
                      v846 = v606;
                      v845 = v837 + v607;
                      v844 = v606 + v608;
                      v609 = ((v581 - v582) >> 3) / v193;
                      v823[0] = v582;
                      v823[1] = (void *)v609;
                      *(_QWORD *)&v824 = v193;
                      std::valarray<double>::valarray(&v856, (uint64_t)v823);
                      v823[0] = v582 + 8;
                      v823[1] = (void *)v609;
                      *(_QWORD *)&v824 = v193;
                      std::valarray<double>::valarray(&v855, (uint64_t)v823);
                      v823[0] = v582 + 16;
                      v823[1] = (void *)v609;
                      *(_QWORD *)&v824 = v193;
                      std::valarray<double>::valarray(&v851, (uint64_t)v823);
                      std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v853, *(double **)&v856.f64[0], *(double **)&v856.f64[1], (double **)&v851);
                      if (v851)
                      {
                        if (v852 != v851)
                          v852 += ((_BYTE *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v851);
                      }
                      v823[0] = v582 + 24;
                      v823[1] = (void *)v609;
                      *(_QWORD *)&v824 = v193;
                      std::valarray<double>::valarray(&v849, (uint64_t)v823);
                      std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>((double *)&v851, (double *)v855, *((double **)&v855 + 1), (double **)&v849);
                      if (v849)
                      {
                        if (v850 != v849)
                          v850 += ((_BYTE *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v849);
                      }
                      nms::max<double>((uint64_t *)&v849, &v837, (uint64_t)&v856);
                      nms::max<double>((uint64_t *)&v847, &v846, (uint64_t)&v855);
                      nms::min<double>((uint64_t *)&v841, &v845, (uint64_t)&v853);
                      nms::min<double>((uint64_t *)&v839, &v844, (uint64_t)&v851);
                      std::valarray<double>::resize((uint64_t)v816, v202, 0.0);
                      std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, v816[0]);
                      v610 = v823[1];
                      v611 = v824;
                      if ((void *)v824 == v823[1])
                      {
                        if ((_QWORD)v824)
                          goto LABEL_817;
                      }
                      else
                      {
                        v612 = (uint64_t)(v824 - (unint64_t)v823[1]) >> 3;
                        v613 = (double *)v841;
                        v614 = (double *)v849;
                        v615 = (double *)v839;
                        v616 = (double *)v847;
                        v617 = (double *)v823[0];
                        if (v612 <= 1)
                          v612 = 1;
                        v618 = (uint64_t *)v823[1];
                        do
                        {
                          v619 = *v613++;
                          v620 = v619;
                          v621 = *v614++;
                          v622 = v620 - v621;
                          v623 = *v615++;
                          v624 = v623;
                          v625 = *v616++;
                          v626 = v622 * (v624 - v625);
                          v627 = *v618++;
                          v617[v627] = v626;
                          --v612;
                        }
                        while (v612);
                        *(_QWORD *)&v824 = v611 + (((unint64_t)v610 - v611 + 7) & 0xFFFFFFFFFFFFFFF8);
LABEL_817:
                        operator delete(v610);
                      }
                      if (v582)
                        operator delete(v582);
                      if (v839)
                      {
                        if (v840 != v839)
                          v840 += ((_BYTE *)v839 - v840 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v839);
                      }
                      if (v841)
                      {
                        if (v842 != v841)
                          v842 += ((_BYTE *)v841 - v842 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v841);
                      }
                      if (v847)
                      {
                        if (v848 != v847)
                          v848 += ((_BYTE *)v847 - v848 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v847);
                      }
                      if (v849)
                      {
                        if (v850 != v849)
                          v850 += ((_BYTE *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v849);
                      }
                      if (v851)
                      {
                        if (v852 != v851)
                          v852 += ((_BYTE *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v851);
                      }
                      if (v853)
                      {
                        if (v854 != (char *)v853)
                          v854 += ((char *)v853 - v854 + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(v853);
                      }
                      if ((_QWORD)v855)
                      {
                        if (*((_QWORD *)&v855 + 1) != (_QWORD)v855)
                          *((_QWORD *)&v855 + 1) += (v855 - *((_QWORD *)&v855 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete((void *)v855);
                      }
                      if (*(_QWORD *)&v856.f64[0])
                      {
                        if (*(_QWORD *)&v856.f64[1] != *(_QWORD *)&v856.f64[0])
                          *(_QWORD *)&v856.f64[1] += (*(_QWORD *)&v856.f64[0] - *(_QWORD *)&v856.f64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
                        operator delete(*(void **)&v856.f64[0]);
                      }
                      goto LABEL_237;
                    }
                  }
                }
                operator delete(v579);
                goto LABEL_802;
              }
            }
            if (*(double *)&v821 != 0.0)
            {
              operator delete(v821);
              *(double *)&v821 = 0.0;
              v822 = 0.0;
            }
LABEL_237:
            if (v765)
              operator delete(v765);
            v210 = v816[0];
            v765 = (void *)v816[0];
            std::valarray<double>::resize((uint64_t)&v819, v766, 0.0);
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, v210);
            std::valarray<double>::valarray(&v841, (uint64_t *)v823);
            if (v823[1])
            {
              if ((void *)v824 != v823[1])
                *(_QWORD *)&v824 = v824 + (((unint64_t)v823[1] - v824 + 7) & 0xFFFFFFFFFFFFFFF8);
              operator delete(v823[1]);
            }
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, *(_QWORD *)(*(_QWORD *)((char *)v829[1] + ((((unint64_t)v831 + v195) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (v831 + v195)));
            std::valarray<double>::valarray(&v839, (uint64_t *)v823);
            if (v823[1])
            {
              if ((void *)v824 != v823[1])
                *(_QWORD *)&v824 = v824 + (((unint64_t)v823[1] - v824 + 7) & 0xFFFFFFFFFFFFFFF8);
              operator delete(v823[1]);
            }
            v211 = *(_QWORD *)(*(_QWORD *)((char *)v829[1]
                                         + ((((unint64_t)v831 + v191) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v831 + v191));
            v212 = v819;
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, (uint64_t)v819);
            v213 = v823[1];
            v214 = v824;
            if ((void *)v824 == v823[1])
            {
              if (!(_QWORD)v824)
                goto LABEL_257;
            }
            else
            {
              v215 = (uint64_t)(v824 - (unint64_t)v823[1]) >> 3;
              v216 = (double *)v841;
              v217 = (double *)v839;
              v218 = (double *)v823[0];
              if (v215 <= 1)
                v215 = 1;
              v219 = (uint64_t *)v823[1];
              do
              {
                v220 = *v217++;
                v221 = *(double *)(v211 + 8 * v803) + v220;
                v222 = *v216++;
                v223 = v222 / (v221 - v222);
                v224 = *v219++;
                v218[v224] = v223;
                --v215;
              }
              while (v215);
              *(_QWORD *)&v824 = v214 + (((unint64_t)v213 - v214 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            operator delete(v213);
LABEL_257:
            std::valarray<double>::resize((uint64_t)&v817, v766, 0.0);
            nms::min<double>((uint64_t *)&v856, (double *)(*(_QWORD *)(*(_QWORD *)((char *)v829[1]+ ((((unint64_t)v831 + v191) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (v831 + v191))+ 8 * v803), (uint64_t)&v839);
            v225 = (double *)v817;
            std::mask_array<unsigned char>::mask_array[abi:ne180100](v823, (unsigned __int8 **)&v821, (uint64_t)v817);
            v226 = v823[1];
            v227 = v824;
            if ((void *)v824 == v823[1])
            {
              if (!(_QWORD)v824)
                goto LABEL_265;
            }
            else
            {
              v228 = (uint64_t)(v824 - (unint64_t)v823[1]) >> 3;
              v229 = (double *)v841;
              v230 = *(double **)&v856.f64[0];
              v231 = (double *)v823[0];
              if (v228 <= 1)
                v228 = 1;
              v232 = (uint64_t *)v823[1];
              do
              {
                v233 = *v229++;
                v234 = v233;
                v235 = *v230++;
                v236 = v234 / v235;
                v237 = *v232++;
                v231[v237] = v236;
                --v228;
              }
              while (v228);
              *(_QWORD *)&v824 = v227 + (((unint64_t)v226 - v227 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            operator delete(v226);
LABEL_265:
            if (*(_QWORD *)&v856.f64[0])
            {
              if (*(_QWORD *)&v856.f64[1] != *(_QWORD *)&v856.f64[0])
                *(_QWORD *)&v856.f64[1] += (*(_QWORD *)&v856.f64[0] - *(_QWORD *)&v856.f64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
              operator delete(*(void **)&v856.f64[0]);
            }
            v238 = v821;
            v239 = v822;
            v240 = v767;
            if (v821 == *(void **)&v822)
              v240 = 0;
            if (v240)
            {
              v241 = *(char **)(*(_QWORD *)(a2[1] + (((a2[4] + v195) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*((_BYTE *)a2 + 32) + v195));
              v242 = v821;
              do
              {
                v243 = *v241++;
                *v242++ &= v243;
              }
              while (v242 != *(_BYTE **)&v239);
            }
            v824 = 0u;
            v825 = 0u;
            *(_OWORD *)v823 = 0u;
            v855 = 0uLL;
            v244 = *(_QWORD *)&v239 - (_QWORD)v238;
            if (*(_BYTE **)&v239 == v238)
            {
              v246 = 0;
            }
            else
            {
              v245 = (char *)operator new(*(_QWORD *)&v239 - (_QWORD)v238);
              v246 = v245;
              v247 = 0;
              *(_QWORD *)&v855 = v245;
              do
              {
                v248 = v212[v247] <= v17 || v238[v247] == 0;
                v249 = !v248;
                if (v225[v247] <= v18)
                  v249 = 0;
                v245[v247++] = v249;
              }
              while (v244 != v247);
              *((_QWORD *)&v855 + 1) = &v245[v247];
            }
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&v856, (uint64_t)&v855);
            v250 = v858;
            v251 = *(_QWORD *)&v856.f64[1];
            v252 = v857.f64[0];
            if (v786 == v195)
            {
              v253 = (char *)(*(_QWORD *)&v856.f64[1] + 8 * (v858 >> 11));
              if (*(_QWORD *)&v857.f64[0] == *(_QWORD *)&v856.f64[1])
                v254 = 0;
              else
                v254 = *(_QWORD *)v253 + 2 * (v858 & 0x7FF);
LABEL_291:
              v255 = (unsigned __int16 *)v254;
              while (1)
              {
                v256 = *(_QWORD *)&v252 == v251
                     ? 0
                     : *(_QWORD *)(v251 + 8 * ((v859 + v858) >> 11)) + 2 * ((v859 + v858) & 0x7FF);
                if (v255 == (unsigned __int16 *)v256)
                  break;
                if (v803 >= *v255)
                {
                  v253 = (char *)std::deque<unsigned short>::erase((int64x2_t *)&v856, v253, v254);
                  v254 = v258;
                  v251 = *(_QWORD *)&v856.f64[1];
                  v252 = v857.f64[0];
                  goto LABEL_291;
                }
                ++v255;
                v254 += 2;
                if (*(_QWORD *)v253 + 4096 == v254)
                {
                  v257 = *((_QWORD *)v253 + 1);
                  v253 += 8;
                  v254 = v257;
                  goto LABEL_291;
                }
              }
              v250 = v858;
            }
            v259 = (uint64_t *)(v251 + 8 * (v250 >> 11));
            if (*(_QWORD *)&v252 == v251)
            {
              v260 = 0;
              v262 = 0;
              v261 = (uint64_t *)(*(_QWORD *)&v252 + 8 * ((v859 + v250) >> 11));
            }
            else
            {
              v260 = (_WORD *)(*v259 + 2 * (v250 & 0x7FF));
              v261 = (uint64_t *)(v251 + 8 * ((v859 + v250) >> 11));
              v262 = (_WORD *)(*v261 + 2 * ((v859 + v250) & 0x7FF));
            }
            v853 = (float64x2_t *)v823;
            std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(v259, v260, v261, v262, (_QWORD **)&v853);
            v263 = *(void ***)&v856.f64[1];
            v859 = 0;
            v264 = *(_QWORD *)&v857.f64[0] - *(_QWORD *)&v856.f64[1];
            if (*(_QWORD *)&v857.f64[0] - *(_QWORD *)&v856.f64[1] >= 0x11uLL)
            {
              do
              {
                operator delete(*v263);
                v263 = (void **)(*(_QWORD *)&v856.f64[1] + 8);
                *(_QWORD *)&v856.f64[1] = v263;
                v264 = *(_QWORD *)&v857.f64[0] - (_QWORD)v263;
              }
              while (*(_QWORD *)&v857.f64[0] - (_QWORD)v263 > 0x10uLL);
            }
            if (v264 >> 3 == 1)
            {
              v265 = 1024;
            }
            else
            {
              if (v264 >> 3 != 2)
                goto LABEL_311;
              v265 = 2048;
            }
            v858 = v265;
LABEL_311:
            std::deque<unsigned short>::~deque[abi:ne180100](&v856);
            if (v246)
              operator delete(v246);
            v855 = 0uLL;
            if (*(_BYTE **)&v239 == v238)
            {
              v267 = 0;
            }
            else
            {
              v266 = (char *)operator new(*(_QWORD *)&v239 - (_QWORD)v238);
              v267 = v266;
              v268 = 0;
              *(_QWORD *)&v855 = v266;
              do
              {
                v270 = v212[v268] <= v19 && v238[v268] != 0;
                if (v225[v268] <= v20)
                  v270 = 0;
                v266[v268++] = v270;
              }
              while (v244 != v268);
              *((_QWORD *)&v855 + 1) = &v266[v268];
            }
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&v856, (uint64_t)&v855);
            v271 = v858;
            v272 = *(_QWORD *)&v856.f64[1];
            v273 = v857.f64[0];
            if (v786 == v195)
            {
              v274 = (char *)(*(_QWORD *)&v856.f64[1] + 8 * (v858 >> 11));
              if (*(_QWORD *)&v857.f64[0] == *(_QWORD *)&v856.f64[1])
                v275 = 0;
              else
                v275 = *(_QWORD *)v274 + 2 * (v858 & 0x7FF);
LABEL_330:
              v276 = (unsigned __int16 *)v275;
              while (1)
              {
                v277 = *(_QWORD *)&v273 == v272
                     ? 0
                     : *(_QWORD *)(v272 + 8 * ((v859 + v858) >> 11)) + 2 * ((v859 + v858) & 0x7FF);
                if (v276 == (unsigned __int16 *)v277)
                  break;
                if (v803 >= *v276)
                {
                  v274 = (char *)std::deque<unsigned short>::erase((int64x2_t *)&v856, v274, v275);
                  v275 = v279;
                  v272 = *(_QWORD *)&v856.f64[1];
                  v273 = v857.f64[0];
                  goto LABEL_330;
                }
                ++v276;
                v275 += 2;
                if (*(_QWORD *)v274 + 4096 == v275)
                {
                  v278 = *((_QWORD *)v274 + 1);
                  v274 += 8;
                  v275 = v278;
                  goto LABEL_330;
                }
              }
              v271 = v858;
            }
            v280 = (uint64_t *)(v272 + 8 * (v271 >> 11));
            if (*(_QWORD *)&v273 == v272)
            {
              v281 = 0;
              v283 = 0;
              v282 = (uint64_t *)(*(_QWORD *)&v273 + 8 * ((v859 + v271) >> 11));
            }
            else
            {
              v281 = (_WORD *)(*v280 + 2 * (v271 & 0x7FF));
              v282 = (uint64_t *)(v272 + 8 * ((v859 + v271) >> 11));
              v283 = (_WORD *)(*v282 + 2 * ((v859 + v271) & 0x7FF));
            }
            v853 = (float64x2_t *)v823;
            std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(v280, v281, v282, v283, (_QWORD **)&v853);
            v284 = *(void ***)&v856.f64[1];
            v859 = 0;
            v285 = *(_QWORD *)&v857.f64[0] - *(_QWORD *)&v856.f64[1];
            if (*(_QWORD *)&v857.f64[0] - *(_QWORD *)&v856.f64[1] >= 0x11uLL)
            {
              do
              {
                operator delete(*v284);
                v284 = (void **)(*(_QWORD *)&v856.f64[1] + 8);
                *(_QWORD *)&v856.f64[1] = v284;
                v285 = *(_QWORD *)&v857.f64[0] - (_QWORD)v284;
              }
              while (*(_QWORD *)&v857.f64[0] - (_QWORD)v284 > 0x10uLL);
            }
            if (v285 >> 3 == 1)
            {
              v286 = 1024;
            }
            else
            {
              if (v285 >> 3 != 2)
                goto LABEL_350;
              v286 = 2048;
            }
            v858 = v286;
LABEL_350:
            std::deque<unsigned short>::~deque[abi:ne180100](&v856);
            if (v267)
              operator delete(v267);
            v855 = 0uLL;
            if (*(_BYTE **)&v239 == v238)
            {
              v288 = 0;
              v191 = v786;
            }
            else
            {
              v287 = (char *)operator new(*(_QWORD *)&v239 - (_QWORD)v238);
              v288 = v287;
              v289 = 0;
              *(_QWORD *)&v855 = v287;
              v191 = v786;
              do
              {
                v290 = v212[v289];
                v291 = v290 <= v22;
                if (v290 <= v21 || v238[v289] == 0)
                  v291 = 0;
                v293 = v225[v289];
                if (v293 <= v23)
                  v291 = 0;
                if (v293 > v24)
                  v291 = 0;
                v287[v289++] = v291;
              }
              while (v244 != v289);
              *((_QWORD *)&v855 + 1) = &v287[v289];
            }
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&v856, (uint64_t)&v855);
            v294 = v858;
            v295 = *(_QWORD *)&v856.f64[1];
            v296 = v857.f64[0];
            if (v191 == v195)
            {
              v297 = (char *)(*(_QWORD *)&v856.f64[1] + 8 * (v858 >> 11));
              if (*(_QWORD *)&v857.f64[0] == *(_QWORD *)&v856.f64[1])
                v298 = 0;
              else
                v298 = *(_QWORD *)v297 + 2 * (v858 & 0x7FF);
LABEL_370:
              v299 = (unsigned __int16 *)v298;
              while (1)
              {
                v300 = *(_QWORD *)&v296 == v295
                     ? 0
                     : *(_QWORD *)(v295 + 8 * ((v859 + v858) >> 11)) + 2 * ((v859 + v858) & 0x7FF);
                if (v299 == (unsigned __int16 *)v300)
                  break;
                if (v803 >= *v299)
                {
                  v297 = (char *)std::deque<unsigned short>::erase((int64x2_t *)&v856, v297, v298);
                  v298 = v302;
                  v295 = *(_QWORD *)&v856.f64[1];
                  v296 = v857.f64[0];
                  goto LABEL_370;
                }
                ++v299;
                v298 += 2;
                if (*(_QWORD *)v297 + 4096 == v298)
                {
                  v301 = *((_QWORD *)v297 + 1);
                  v297 += 8;
                  v298 = v301;
                  goto LABEL_370;
                }
              }
              v294 = v858;
            }
            v303 = (uint64_t *)(v295 + 8 * (v294 >> 11));
            if (*(_QWORD *)&v296 == v295)
            {
              v304 = 0;
              v306 = 0;
              v305 = (uint64_t *)(*(_QWORD *)&v296 + 8 * ((v859 + v294) >> 11));
            }
            else
            {
              v304 = (_WORD *)(*v303 + 2 * (v294 & 0x7FF));
              v305 = (uint64_t *)(v295 + 8 * ((v859 + v294) >> 11));
              v306 = (_WORD *)(*v305 + 2 * ((v859 + v294) & 0x7FF));
            }
            v853 = (float64x2_t *)v823;
            std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(v303, v304, v305, v306, (_QWORD **)&v853);
            v307 = *(void ***)&v856.f64[1];
            v859 = 0;
            v308 = *(_QWORD *)&v857.f64[0] - *(_QWORD *)&v856.f64[1];
            if (*(_QWORD *)&v857.f64[0] - *(_QWORD *)&v856.f64[1] >= 0x11uLL)
            {
              do
              {
                operator delete(*v307);
                v307 = (void **)(*(_QWORD *)&v856.f64[1] + 8);
                *(_QWORD *)&v856.f64[1] = v307;
                v308 = *(_QWORD *)&v857.f64[0] - (_QWORD)v307;
              }
              while (*(_QWORD *)&v857.f64[0] - (_QWORD)v307 > 0x10uLL);
            }
            if (v308 >> 3 == 1)
            {
              v309 = 1024;
              goto LABEL_389;
            }
            if (v308 >> 3 == 2)
            {
              v309 = 2048;
LABEL_389:
              v858 = v309;
            }
            std::deque<unsigned short>::~deque[abi:ne180100](&v856);
            if (v288)
              operator delete(v288);
            if (*((_QWORD *)&v825 + 1))
            {
              v838 = 0.0;
              v837 = 0.0;
              if ((void *)v824 != v823[1])
              {
                v310 = (char *)v823[1] + 8 * ((unint64_t)v825 >> 11);
                v311 = (_WORD *)(*v310 + 2 * (v825 & 0x7FF));
                v785 = *(_QWORD *)((char *)v823[1]
                                 + ((((_QWORD)v825 + *((_QWORD *)&v825 + 1)) >> 8) & 0xFFFFFFFFFFFFF8))
                     + 2 * ((v825 + *((_QWORD *)&v825 + 1)) & 0x7FF);
                if (v311 != (_WORD *)v785)
                {
                  v312 = 0;
                  v793 = 0;
                  while (1)
                  {
                    v791 = v311;
                    v792 = v310;
                    LOWORD(v816[0]) = 0;
                    v313 = (unsigned __int16)*v311;
                    LOWORD(v816[0]) = *v311;
                    if (v312)
                    {
                      operator delete(v312);
                      v793 = 0;
                      v313 = LOWORD(v816[0]);
                    }
                    std::valarray<double>::resize((uint64_t)&v837, 5uLL, 0.0);
                    v314 = *(_QWORD **)(a1 + 968);
                    v315 = v314[5];
                    if (v315 <= v782 || v315 <= v784)
                      std::__throw_out_of_range[abi:ne180100]("deque");
                    v316 = v314[4];
                    v317 = v314[1];
                    v318 = *(_QWORD *)(v317 + 8 * ((v316 + v782) / 0x14));
                    v319 = v316 + v784;
                    v320 = (v316 + v784) / 0x14;
                    v321 = *(_QWORD *)(v317 + 8 * v320);
                    v322 = (v316 + v782) % 0x14;
                    v323 = v318 + 200 * v322;
                    v326 = *(_QWORD *)(v323 + 184);
                    v325 = (_QWORD *)(v323 + 184);
                    v324 = v326;
                    v327 = v325;
                    v328 = (_QWORD *)v326;
                    if (v326)
                    {
                      do
                      {
                        v329 = v328[4];
                        v330 = v329 == 0;
                        if (v329)
                          v331 = v328;
                        else
                          v331 = v328 + 1;
                        if (!v330)
                          v327 = v328;
                        v328 = (_QWORD *)*v331;
                      }
                      while (*v331);
                      v332 = v327 == v325 || v327[4] > 1uLL ? 9 : v327[5];
                      do
                      {
                        v333 = (_QWORD *)v324;
                        v324 = *(_QWORD *)v324;
                      }
                      while (v324);
                      if (v333 == v325 || v333[4])
                      {
LABEL_415:
                        v324 = 0;
                      }
                      else
                      {
                        switch(v333[5])
                        {
                          case 0:
                          case 1:
                            v324 = 4;
                            break;
                          case 2:
                            v324 = 8;
                            break;
                          case 3:
                          case 4:
                            v324 = 2;
                            break;
                          case 5:
                            v324 = 5;
                            break;
                          case 6:
                            v324 = 9;
                            break;
                          case 7:
                            v324 = 3;
                            break;
                          case 8:
                            v324 = 14;
                            break;
                          default:
                            goto LABEL_415;
                        }
                      }
                    }
                    else
                    {
                      v332 = 9;
                    }
                    v795 = v322;
                    v334 = v318 + 200 * v322;
                    v336 = *(_QWORD *)(v334 + 88);
                    v335 = (_QWORD *)(v334 + 88);
                    v813 = v335 + 3;
                    *(_QWORD *)&v856.f64[0] = *(_QWORD *)(v336 + ((v335[3] >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * v335[3];
                    *(_QWORD *)&v856.f64[1] = v324 * (unint64_t)(unsigned __int16)v803;
                    *(_QWORD *)&v857.f64[0] = v324;
                    *(_QWORD *)&v857.f64[1] = 1;
                    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v855, (uint64_t)&v856);
                    v790 = v318;
                    v337 = v319 - 20 * v320;
                    v338 = v321 + 200 * v337;
                    v341 = *(_QWORD **)(v338 + 184);
                    v340 = (_QWORD *)(v338 + 184);
                    v339 = v341;
                    if (v341)
                    {
                      do
                      {
                        v342 = v339;
                        v339 = (_QWORD *)*v339;
                      }
                      while (v339);
                      v343 = a1;
                      if (v342 == v340 || v342[4] || (v344 = v342[5], v344 > 8))
                        v345 = 0.0;
                      else
                        v345 = dbl_1D513B3B8[v344];
                    }
                    else
                    {
                      v345 = 0.0;
                      v343 = a1;
                    }
                    v346 = v321 + 200 * v337;
                    v810 = (_QWORD *)(v346 + 88);
                    v806 = (_QWORD *)(v346 + 112);
                    *(_QWORD *)&v856.f64[0] = *(_QWORD *)(*(_QWORD *)(v346 + 88)
                                                        + ((*(_QWORD *)(v346 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * *(_QWORD *)(v346 + 112);
                    *(_QWORD *)&v856.f64[1] = *(_QWORD *)&v345 * v313;
                    v857.f64[0] = v345;
                    *(_QWORD *)&v857.f64[1] = 1;
                    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v853, (uint64_t)&v856);
                    v347 = v793;
                    if (v793 == (unsigned __int8 *)32)
                    {
                      v312 = 0;
                    }
                    else
                    {
                      v348 = vaddq_f64(*(float64x2_t *)v855, *(float64x2_t *)(v855 + 16));
                      v349 = vaddq_f64(*v853, v853[1]);
                      v856 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)v855, *v853), *(int8x16_t *)v853, *(int8x16_t *)v855);
                      v857 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v349, v348), (int8x16_t)v349, (int8x16_t)v348), v856);
                      std::valarray<double>::valarray(&v851, (uint64_t *)&v856, 4uLL);
                      v312 = v851;
                      v347 = v852;
                    }
                    v793 = v347;
                    v350 = *(double *)v325;
                    if (!*v325)
                      break;
                    v351 = v325;
                    v352 = (_QWORD *)*v325;
                    do
                    {
                      v353 = v352[4];
                      v354 = v353 >= 4;
                      if (v353 >= 4)
                        v355 = v352;
                      else
                        v355 = v352 + 1;
                      if (v354)
                        v351 = v352;
                      v352 = (_QWORD *)*v355;
                    }
                    while (*v355);
                    if (v351 == v325 || v351[4] > 4uLL)
                      break;
                    v421 = v351[5];
                    v530 = v421 > 8;
                    v422 = (1 << v421) & 0x144;
                    if (v530 || v422 == 0)
                      break;
                    v357 = (_QWORD *)*v340;
                    if (!*v340)
                    {
                      v356 = 0;
                      goto LABEL_439;
                    }
                    v424 = v340;
                    do
                    {
                      v425 = v357[4];
                      v426 = v425 >= 4;
                      if (v425 >= 4)
                        v427 = v357;
                      else
                        v427 = v357 + 1;
                      if (v426)
                        v424 = v357;
                      v357 = (_QWORD *)*v427;
                    }
                    while (*v427);
                    if (v424 == v340
                      || v424[4] > 4uLL
                      || ((v428 = v424[5], v530 = v428 > 8, v429 = (1 << v428) & 0x144, !v530)
                        ? (v430 = v429 == 0)
                        : (v430 = 1),
                          v430 || *(_QWORD *)(v790 + 200 * v795 + 72) == *(_QWORD *)(v790 + 200 * v795 + 64)))
                    {
                      v356 = 0;
                      LODWORD(v357) = 0;
                      goto LABEL_439;
                    }
                    LODWORD(v357) = 0;
                    v431 = *(_QWORD *)(v321 + 200 * v337 + 64);
                    v432 = *(_QWORD *)(v321 + 200 * v337 + 72);
                    v248 = v432 == v431;
                    v356 = v432 != v431;
                    v358 = 5;
                    if (v248)
                      v358 = 6;
LABEL_440:
                    if (v332 == 5 || !v332)
                    {
                      if ((_DWORD)v357)
                      {
                        if (v350 != 0.0)
                        {
                          v359 = v325;
                          do
                          {
                            v360 = *(_QWORD *)(*(_QWORD *)&v350 + 32);
                            v361 = v360 == 0;
                            if (v360)
                              v362 = *(double **)&v350;
                            else
                              v362 = (double *)(*(_QWORD *)&v350 + 8);
                            if (!v361)
                              v359 = *(_QWORD **)&v350;
                            v350 = *v362;
                          }
                          while (*(_QWORD *)v362);
                          if (v359 == v325 || v359[4] > 1uLL || (v363 = v359[5], v363 > 8))
                            v350 = 0.0;
                          else
                            v350 = dbl_1D513B3B8[v363];
                        }
                        v433 = *(_QWORD *)(*(_QWORD *)(v790 + 200 * v795 + 136)
                                         + 8 * (*(_QWORD *)(v790 + 200 * v795 + 160) / 0x55uLL))
                             + 48 * (*(_QWORD *)(v790 + 200 * v795 + 160) % 0x55uLL);
                        v434 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v433 + 8)
                                                              + (((*(_QWORD *)(v433 + 32)
                                                                 + (unint64_t)(unsigned __int16)v803) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                  + 4 * ((*(_QWORD *)(v433 + 32) + (unsigned __int16)v803) & 0x3FFLL));
                        v435 = *(_QWORD *)(*(_QWORD *)(v321 + 200 * v337 + 136)
                                         + 8 * (*(_QWORD *)(v321 + 200 * v337 + 160) / 0x55uLL))
                             + 48 * (*(_QWORD *)(v321 + 200 * v337 + 160) % 0x55uLL);
                        v436 = *(_QWORD *)(v435 + 32) + v313;
                        v437 = *(_QWORD *)(*(_QWORD *)(v435 + 8) + ((v436 >> 7) & 0x1FFFFFFFFFFFFF8));
                        v438 = *v434;
                        v439 = v434[1] - v438 + 1;
                        *(_QWORD *)&v856.f64[0] = *(_QWORD *)(*v335
                                                            + (((unint64_t)(*v813 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                + 16 * (*(_BYTE *)v813 + 1);
                        *(_QWORD *)&v856.f64[1] = *(_QWORD *)&v350 * v438;
                        *(_QWORD *)&v857.f64[0] = *(_QWORD *)&v350 * v439;
                        *(_QWORD *)&v857.f64[1] = 1;
                        std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v851, (uint64_t)&v856);
                        v440 = (_QWORD *)*v340;
                        if (!*v340)
                          goto LABEL_563;
                        v441 = v340;
                        do
                        {
                          v442 = v440[4];
                          v443 = v442 == 0;
                          if (v442)
                            v444 = v440;
                          else
                            v444 = v440 + 1;
                          if (!v443)
                            v441 = v440;
                          v440 = (_QWORD *)*v444;
                        }
                        while (*v444);
                        if (v441 == v340 || v441[4] > 1uLL || (v445 = v441[5], v445 > 8))
LABEL_563:
                          v446 = 0.0;
                        else
                          v446 = dbl_1D513B3B8[v445];
                        v447 = *(unsigned __int16 *)(v437 + 4 * (v436 & 0x3FF));
                        v448 = *(unsigned __int16 *)(v437 + 4 * (v436 & 0x3FF) + 2) - v447 + 1;
                        *(_QWORD *)&v856.f64[0] = *(_QWORD *)(*v810
                                                            + (((unint64_t)(*v806 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                + 16 * (*(_BYTE *)v806 + 1);
                        *(_QWORD *)&v856.f64[1] = *(_QWORD *)&v446 * v447;
                        *(_QWORD *)&v857.f64[0] = *(_QWORD *)&v446 * v448;
                        *(_QWORD *)&v857.f64[1] = 1;
                        std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                        v343 = a1;
                        v449 = *(_QWORD *)(a1 + 1072);
                        v450 = v449 * v449;
                        v856 = 0uLL;
                        if (v449 * v449)
                        {
                          if (v450 >> 61)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v451 = 8 * v450;
                          v452 = (char *)operator new(8 * v450);
                          *(_QWORD *)&v856.f64[0] = v452;
                          bzero(v452, v451);
                          v453 = &v452[v451];
                          *(_QWORD *)&v856.f64[1] = &v452[v451];
                          v190 = *(double **)&v778;
                        }
                        else
                        {
                          v452 = 0;
                          v453 = 0;
                        }
                        nms::rasterizeRects<double>((double **)&v851, (double *)v312, &v856, v449, 1, v332);
                        nms::rasterizeRects<double>((double **)&v849, (double *)v312, &v856, v449, 2, v332);
                        if (v452 == v453)
                        {
                          v457 = 0;
                          v454 = 0;
                          v460 = 0;
                        }
                        else
                        {
                          v454 = 0;
                          v455 = v452;
                          do
                          {
                            v456 = *(_QWORD *)v455;
                            v455 += 8;
                            if (v456 == 1)
                              ++v454;
                          }
                          while (v455 != v453);
                          v457 = 0;
                          v458 = v452;
                          do
                          {
                            v459 = *(_QWORD *)v458;
                            v458 += 8;
                            if (v459 == 2)
                              ++v457;
                          }
                          while (v458 != v453);
                          v460 = 0;
                          v461 = v452;
                          do
                          {
                            v462 = *(_QWORD *)v461;
                            v461 += 8;
                            if (v462 == 3)
                              ++v460;
                          }
                          while (v461 != v453);
                        }
                        v463 = (double)v460;
                        v464 = v460 + v457;
                        v465 = (double)v460 / (double)(v464 + v454);
                        v466 = *(double **)&v837;
                        v467 = v460 + v454;
                        if (v464 >= v467)
                          v468 = v467;
                        else
                          v468 = v464;
                        **(double **)&v837 = v465;
                        v466[1] = v463 / (double)v468;
                        v469 = (double)v467;
                        v470 = (v453 - v452) >> 3;
                        v466[2] = v469 / (double)(unint64_t)v470;
                        v466[3] = (double)v464 / (double)(unint64_t)v470;
                        if (v452)
                          operator delete(v452);
                        if (v849)
                        {
                          if (v850 != v849)
                            v850 += ((_BYTE *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                          operator delete(v849);
                        }
                        v471 = v851;
                        if (!v851)
                          goto LABEL_647;
                        if (v852 != v851)
                          v852 += ((_BYTE *)v851 - v852 + 7) & 0xFFFFFFFFFFFFFFF8;
                      }
                      else
                      {
                        if (!v356)
                          goto LABEL_647;
                        v776 = v312;
                        v364 = (_QWORD *)(v790 + 200 * v795);
                        v365 = v364[20];
                        v366 = v364[17];
                        v367 = *(_QWORD *)(v366 + 8 * (v365 / 0x55)) + 48 * (v365 % 0x55);
                        v368 = *(_QWORD *)(v367 + 32) + (unsigned __int16)v803;
                        v800 = *(_QWORD *)(*(_QWORD *)(v367 + 8) + ((v368 >> 7) & 0x1FFFFFFFFFFFFF8));
                        v763 = v337;
                        v764 = v321;
                        v369 = v321 + 200 * v337;
                        v370 = *(_QWORD *)(v369 + 160);
                        v762 = v369;
                        v371 = *(_QWORD *)(v369 + 136);
                        v372 = *(_QWORD *)(v371 + 8 * (v370 / 0x55)) + 48 * (v370 % 0x55);
                        v773 = *(_QWORD *)(v372 + 32) + v313;
                        v775 = *(_QWORD *)(*(_QWORD *)(v372 + 8) + ((v773 >> 7) & 0x1FFFFFFFFFFFFF8));
                        if (v358 == 5)
                          v373 = 4;
                        else
                          v373 = 5;
                        v374 = v365 + v358;
                        v375 = (v365 + v358) / 0x55;
                        v376 = *(_QWORD *)(v366 + 8 * v375);
                        v772 = v370 + v358;
                        v771 = (v370 + v358) / 0x55;
                        v777 = *(_QWORD *)(v371 + 8 * v771);
                        v378 = v364[6];
                        v377 = v364 + 6;
                        v379 = v377[1] * v378;
                        v852 = 0;
                        v851 = 0;
                        std::valarray<unsigned char>::resize((uint64_t)&v851, v379);
                        v380 = (unsigned __int16 *)(v800 + 4 * (v368 & 0x3FF));
                        v769 = v374 - 85 * v375;
                        v770 = v376;
                        v801 = v376 + 48 * v769;
                        v381 = *v380;
                        v761 = v380;
                        v382 = v380[1];
                        v787 = v380 + 1;
                        if (v381 <= v382)
                        {
                          v797 = (_QWORD *)(v376 + 48 * v769 + 32);
                          do
                          {
                            v383 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v801 + 8)
                                                                  + (((*v797 + v381) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((*v797 + v381) & 0x3FF));
                            v384 = *v383;
                            v386 = v383[1];
                            v385 = v383 + 1;
                            if (v384 <= v386)
                            {
                              do
                              {
                                v387 = (_QWORD *)*v325;
                                if (!*v325)
                                  goto LABEL_475;
                                v388 = v325;
                                do
                                {
                                  v389 = v387[4];
                                  v390 = v389 >= v373;
                                  if (v389 >= v373)
                                    v391 = v387;
                                  else
                                    v391 = v387 + 1;
                                  if (v390)
                                    v388 = v387;
                                  v387 = (_QWORD *)*v391;
                                }
                                while (*v391);
                                if (v388 == v325 || v388[4] > v373 || (v392 = v388[5], v392 > 8))
LABEL_475:
                                  v393 = 0.0;
                                else
                                  v393 = dbl_1D513B3B8[v392];
                                *(_QWORD *)&v856.f64[0] = *(_QWORD *)(*v335
                                                                    + (((*v813 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                        + 16 * (*(_BYTE *)v813 + v373);
                                *(_QWORD *)&v856.f64[1] = *(_QWORD *)&v393 * v384;
                                v857.f64[0] = v393;
                                *(_QWORD *)&v857.f64[1] = 1;
                                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                                nms::rasterizeQuadByQuantizedScoreMap<double>((double **)&v849, &v851, (_QWORD *)(v790 + 200 * v795 + 64), *v377, v377[1], 1u, 0);
                                if (v849)
                                {
                                  if (v850 != v849)
                                    v850 += ((_BYTE *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                                  operator delete(v849);
                                }
                                v354 = v384++ >= *v385;
                              }
                              while (!v354);
                              v382 = *v787;
                            }
                            v354 = v381++ >= v382;
                          }
                          while (!v354);
                        }
                        v788 = v772 - 85 * v771;
                        v798 = v777 + 48 * v788;
                        v774 = (unsigned __int16 *)(v775 + 4 * (v773 & 0x3FF));
                        v394 = *v774;
                        v395 = v774[1];
                        if (v394 <= v395)
                        {
                          v396 = v764 + 200 * v763;
                          v397 = (_QWORD *)(v396 + 64);
                          v398 = (unint64_t *)(v396 + 56);
                          do
                          {
                            v399 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v798 + 8)
                                                                  + (((*(_QWORD *)(v777 + 48 * v788 + 32) + v394) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((*(_QWORD *)(v777 + 48 * v788 + 32) + v394) & 0x3FF));
                            v400 = *v399;
                            v402 = v399[1];
                            v401 = v399 + 1;
                            if (v400 <= v402)
                            {
                              do
                              {
                                v403 = (_QWORD *)*v340;
                                if (!*v340)
                                  goto LABEL_501;
                                v404 = v340;
                                do
                                {
                                  v405 = v403[4];
                                  v406 = v405 >= v373;
                                  if (v405 >= v373)
                                    v407 = v403;
                                  else
                                    v407 = v403 + 1;
                                  if (v406)
                                    v404 = v403;
                                  v403 = (_QWORD *)*v407;
                                }
                                while (*v407);
                                if (v404 == v340 || v404[4] > v373 || (v408 = v404[5], v408 > 8))
LABEL_501:
                                  v409 = 0.0;
                                else
                                  v409 = dbl_1D513B3B8[v408];
                                *(_QWORD *)&v856.f64[0] = *(_QWORD *)(*v810
                                                                    + (((*v806 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                        + 16 * (*(_BYTE *)v806 + v373);
                                *(_QWORD *)&v856.f64[1] = *(_QWORD *)&v409 * v400;
                                v857.f64[0] = v409;
                                *(_QWORD *)&v857.f64[1] = 1;
                                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                                nms::rasterizeQuadByQuantizedScoreMap<double>((double **)&v849, &v851, v397, *(_QWORD *)(v762 + 48), *v398, 2u, 0);
                                if (v849)
                                {
                                  if (v850 != v849)
                                    v850 += ((_BYTE *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                                  operator delete(v849);
                                }
                                v354 = v400++ >= *v401;
                              }
                              while (!v354);
                              v395 = v774[1];
                            }
                            v354 = v394++ >= v395;
                          }
                          while (!v354);
                        }
                        v410 = v851;
                        v411 = v852;
                        if (v851 == v852)
                        {
                          v415 = 0;
                          v412 = 0;
                          v418 = 0;
                          v343 = a1;
                          v190 = *(double **)&v778;
                          v312 = v776;
                        }
                        else
                        {
                          v412 = 0;
                          v413 = (unsigned __int8 *)v851;
                          v343 = a1;
                          v190 = *(double **)&v778;
                          v312 = v776;
                          do
                          {
                            v414 = *v413++;
                            if (v414 == 1)
                              ++v412;
                          }
                          while (v413 != v852);
                          v415 = 0;
                          v416 = (unsigned __int8 *)v851;
                          do
                          {
                            v417 = *v416++;
                            if (v417 == 2)
                              ++v415;
                          }
                          while (v416 != v852);
                          v418 = 0;
                          v419 = (unsigned __int8 *)v851;
                          do
                          {
                            v420 = *v419++;
                            if (v420 == 3)
                              ++v418;
                          }
                          while (v419 != v852);
                        }
                        v472 = (double)v418;
                        v473 = v418 + v415;
                        v474 = (double)v418 / (double)(v473 + v412);
                        v475 = *(double **)&v837;
                        v476 = v418 + v412;
                        if (v473 >= v476)
                          v477 = v476;
                        else
                          v477 = v473;
                        **(double **)&v837 = v474;
                        v475[1] = v472 / (double)v477;
                        v478 = v411 - v410;
                        v475[2] = (double)v476 / (double)v478;
                        v475[3] = (double)v473 / (double)v478;
                        if (*(double *)(v343 + 1056) > 0.0)
                        {
                          v479 = (_QWORD *)*v325;
                          if (!*v325)
                            goto LABEL_615;
                          v480 = v325;
                          do
                          {
                            v481 = v479[4];
                            v482 = v481 >= v373;
                            if (v481 >= v373)
                              v483 = v479;
                            else
                              v483 = v479 + 1;
                            if (v482)
                              v480 = v479;
                            v479 = (_QWORD *)*v483;
                          }
                          while (*v483);
                          if (v480 == v325)
                          {
LABEL_615:
                            v486 = 0.0;
                            v484 = v770;
                          }
                          else
                          {
                            v484 = v770;
                            if (v480[4] > v373 || (v485 = v480[5], v485 > 8))
                              v486 = 0.0;
                            else
                              v486 = dbl_1D513B3B8[v485];
                          }
                          v487 = *(_QWORD *)(v484 + 48 * v769 + 32) + *v761;
                          v488 = *(_QWORD *)&v486
                               * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v801 + 8)
                                                                 + ((v487 >> 7) & 0x1FFFFFFFFFFFFF8))
                                                     + 4 * (v487 & 0x3FF));
                          *(_QWORD *)&v856.f64[0] = *(_QWORD *)(*v335 + (((*v813 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (*(_BYTE *)v813 + v373);
                          *(_QWORD *)&v856.f64[1] = v488;
                          v857.f64[0] = v486;
                          *(_QWORD *)&v857.f64[1] = 1;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v849, (uint64_t)&v856);
                          v489 = (_QWORD *)*v340;
                          if (!*v340)
                            goto LABEL_631;
                          v490 = v340;
                          do
                          {
                            v491 = v489[4];
                            v492 = v491 >= v373;
                            if (v491 >= v373)
                              v493 = v489;
                            else
                              v493 = v489 + 1;
                            if (v492)
                              v490 = v489;
                            v489 = (_QWORD *)*v493;
                          }
                          while (*v493);
                          if (v490 == v340)
                          {
LABEL_631:
                            v496 = 0.0;
                            v494 = v774;
                          }
                          else
                          {
                            v494 = v774;
                            if (v490[4] > v373 || (v495 = v490[5], v495 > 8))
                              v496 = 0.0;
                            else
                              v496 = dbl_1D513B3B8[v495];
                          }
                          v497 = *(_QWORD *)(v777 + 48 * v788 + 32) + *v494;
                          v498 = *(_QWORD *)&v496
                               * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v798 + 8)
                                                                 + ((v497 >> 7) & 0x1FFFFFFFFFFFFF8))
                                                     + 4 * (v497 & 0x3FF));
                          *(_QWORD *)&v856.f64[0] = *(_QWORD *)(*v810 + (((*v806 + v373) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (*(_BYTE *)v806 + v373);
                          *(_QWORD *)&v856.f64[1] = v498;
                          v857.f64[0] = v496;
                          *(_QWORD *)&v857.f64[1] = 1;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v847, (uint64_t)&v856);
                          v499 = vsubq_f64(*(float64x2_t *)v849, *((float64x2_t *)v849 + 3));
                          v500 = (int64x2_t)vmulq_f64(v499, v499);
                          v501 = v847;
                          v502 = v848;
                          v503 = vsubq_f64(*(float64x2_t *)v847, *((float64x2_t *)v847 + 3));
                          v504 = (int64x2_t)vmulq_f64(v503, v503);
                          v505 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v500, v504), (float64x2_t)vzip2q_s64(v500, v504)));
                          if (v505.f64[1] >= v505.f64[0])
                            v506 = v505.f64[0];
                          else
                            v506 = v505.f64[1];
                          if (v505.f64[0] < v505.f64[1])
                            v505.f64[0] = v505.f64[1];
                          v475[4] = v506 / v505.f64[0];
                          if (v502 != v501)
                            v848 = &v502[(v501 - v502 + 7) & 0xFFFFFFFFFFFFFFF8];
                          operator delete(v501);
                          if (v849)
                          {
                            if (v850 != v849)
                              v850 += ((_BYTE *)v849 - v850 + 7) & 0xFFFFFFFFFFFFFFF8;
                            operator delete(v849);
                          }
                        }
                        if (!v410)
                          goto LABEL_647;
                        v471 = v410;
                      }
                      operator delete(v471);
                    }
LABEL_647:
                    v191 = v786;
                    if (v853)
                    {
                      if (v854 != (char *)v853)
                        v854 += ((char *)v853 - v854 + 7) & 0xFFFFFFFFFFFFFFF8;
                      operator delete(v853);
                    }
                    if ((_QWORD)v855)
                    {
                      if (*((_QWORD *)&v855 + 1) != (_QWORD)v855)
                        *((_QWORD *)&v855 + 1) += (v855 - *((_QWORD *)&v855 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                      operator delete((void *)v855);
                    }
                    v507 = *(double **)&v837;
                    v508 = **(double **)&v837;
                    if (**(double **)&v837 <= v17 || *(double *)(*(_QWORD *)&v837 + 8) <= v18)
                    {
                      if (v508 <= v19
                        && *(double *)(*(_QWORD *)&v837 + 8) > v20
                        && (v517 = *(double *)(*(_QWORD *)&v837 + 24), *(double *)(*(_QWORD *)&v837 + 16) >= v517))
                      {
                        if (v508 < *(double *)(v343 + 1080) && v517 < *(double *)(v343 + 1088))
                        {
                          v541 = *(_QWORD **)(v343 + 968);
                          if (v541[5] <= v786)
LABEL_974:
                            std::__throw_out_of_range[abi:ne180100]("deque");
                          v542 = v541[4] + v786;
                          v543 = *(_QWORD *)(v541[1] + 8 * (v542 / 0x14));
                          v544 = v542 % 0x14;
                          v545 = v543 + 200 * v544;
                          v548 = *(_QWORD **)(v545 + 184);
                          v546 = (_QWORD *)(v545 + 184);
                          v547 = v548;
                          if (!v548)
                            goto LABEL_691;
                          do
                          {
                            v549 = v547;
                            v547 = (_QWORD *)*v547;
                          }
                          while (v547);
                          if (v549 == v546 || v549[4] || (v550 = v549[5], v550 > 8))
LABEL_691:
                            v551 = 0.0;
                          else
                            v551 = dbl_1D513B3B8[v550];
                          v552 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v543 + 200 * v544 + 88)
                                                      + ((*(_QWORD *)(v543 + 200 * v544 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(_QWORD *)(v543 + 200 * v544 + 112));
                          v553 = *(_QWORD *)&v551 * v803 + 4;
                          v555 = v552;
                          v554 = *v552;
                          if (v553 < (v555[1] - v554) >> 3)
                            *(_QWORD *)(v554 + 8 * v553) = 0;
                        }
                        v556 = *(double *)(v343 + 1056);
                        if (v556 <= 0.0 || v507[4] <= v556)
                        {
                          v557 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v343 + 688)
                                                       + (((*(_QWORD *)(v343 + 712) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(_BYTE *)(v343 + 712) + v786));
                          ++*(_BYTE *)(v557 + v803);
                          v558 = *(_QWORD *)(*(_QWORD *)(v343 + 736) + 8 * ((*(_QWORD *)(v343 + 760) + v786) / 0x55))
                               + 48 * ((*(_QWORD *)(v343 + 760) + v786) % 0x55);
                          v559 = *(_QWORD *)(*(_QWORD *)(v558 + 8) + 8 * ((*(_QWORD *)(v558 + 32) + v789) / 0x55))
                               + 48 * ((*(_QWORD *)(v558 + 32) + v789) % 0x55);
                          std::deque<unsigned short>::push_back((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v559 + 8) + 8 * ((*(_QWORD *)(v559 + 32) + v803) / 0x55))+ 48 * ((*(_QWORD *)(v559 + 32) + v803) % 0x55)), v816);
                          v560 = LOWORD(v816[0]);
                          v561 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 784)
                                                       + (((*(_QWORD *)(a1 + 808) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(_BYTE *)(a1 + 808) + v789));
                          ++*(_BYTE *)(v561 + LOWORD(v816[0]));
                          v562 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * ((*(_QWORD *)(a1 + 856) + v789) / 0x55))
                               + 48 * ((*(_QWORD *)(a1 + 856) + v789) % 0x55);
                          v563 = *(_QWORD *)(*(_QWORD *)(v562 + 8) + 8 * ((*(_QWORD *)(v562 + 32) + v786) / 0x55))
                               + 48 * ((*(_QWORD *)(v562 + 32) + v786) % 0x55);
                          v564 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v563 + 8)
                                                      + 8 * ((*(_QWORD *)(v563 + 32) + v560) / 0x55uLL))
                                          + 48 * ((*(_QWORD *)(v563 + 32) + v560) % 0x55uLL));
                          LOWORD(v856.f64[0]) = v803;
                          std::deque<unsigned short>::push_back(v564, &v856);
                        }
                      }
                      else if (v508 > v780
                             || *(double *)(*(_QWORD *)&v837 + 8) <= v768
                             || (v518 = *(double *)(*(_QWORD *)&v837 + 16),
                                 v518 >= *(double *)(*(_QWORD *)&v837 + 24)))
                      {
                        v530 = v508 <= v21 || v508 > v22;
                        if (!v530)
                        {
                          v531 = *(double *)(*(_QWORD *)&v837 + 8);
                          if (v531 > v23 && v531 <= v24)
                          {
                            v533 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v343 + 880)
                                                         + (((*(_QWORD *)(v343 + 904) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(_BYTE *)(v343 + 904) + v786));
                            ++*(_BYTE *)(v533 + v803);
                            v534 = *(_QWORD *)(*(_QWORD *)(v343 + 928) + 8 * ((*(_QWORD *)(v343 + 952) + v786) / 0x55))
                                 + 48 * ((*(_QWORD *)(v343 + 952) + v786) % 0x55);
                            v535 = *(_QWORD *)(*(_QWORD *)(v534 + 8) + 8 * ((*(_QWORD *)(v534 + 32) + v789) / 0x55))
                                 + 48 * ((*(_QWORD *)(v534 + 32) + v789) % 0x55);
                            std::deque<unsigned short>::push_back((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v535 + 8) + 8* ((*(_QWORD *)(v535 + 32) + v803)/ 0x55))+ 48 * ((*(_QWORD *)(v535 + 32) + v803) % 0x55)), v816);
                            v536 = LOWORD(v816[0]);
                            v537 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880)
                                                         + (((*(_QWORD *)(a1 + 904) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(_BYTE *)(a1 + 904) + v789));
                            ++*(_BYTE *)(v537 + LOWORD(v816[0]));
                            v538 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 8 * ((*(_QWORD *)(a1 + 952) + v789) / 0x55))
                                 + 48 * ((*(_QWORD *)(a1 + 952) + v789) % 0x55);
                            v539 = *(_QWORD *)(*(_QWORD *)(v538 + 8) + 8 * ((*(_QWORD *)(v538 + 32) + v786) / 0x55))
                                 + 48 * ((*(_QWORD *)(v538 + 32) + v786) % 0x55);
                            v540 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v539 + 8)
                                                        + 8 * ((*(_QWORD *)(v539 + 32) + v536) / 0x55uLL))
                                            + 48 * ((*(_QWORD *)(v539 + 32) + v536) % 0x55uLL));
                            LOWORD(v856.f64[0]) = v803;
                            std::deque<unsigned short>::push_back(v540, &v856);
                          }
                        }
                      }
                      else
                      {
                        if (v508 < *(double *)(v343 + 1080) && v518 < *(double *)(v343 + 1088))
                        {
                          v519 = *(_QWORD **)(v343 + 968);
                          if (v519[5] <= v786)
                            goto LABEL_974;
                          v520 = v519[4] + v786;
                          v521 = *(_QWORD *)(v519[1] + 8 * (v520 / 0x14));
                          v522 = v520 % 0x14;
                          v523 = v521 + 200 * v522;
                          v526 = *(_QWORD **)(v523 + 184);
                          v524 = (_QWORD *)(v523 + 184);
                          v525 = v526;
                          if (!v526)
                            goto LABEL_697;
                          do
                          {
                            v527 = v525;
                            v525 = (_QWORD *)*v525;
                          }
                          while (v525);
                          if (v527 == v524 || v527[4] || (v528 = v527[5], v528 > 8))
LABEL_697:
                            v529 = 0.0;
                          else
                            v529 = dbl_1D513B3B8[v528];
                          v565 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v521 + 200 * v522 + 88)
                                                      + ((*(_QWORD *)(v521 + 200 * v522 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * *(_QWORD *)(v521 + 200 * v522 + 112));
                          v566 = *(_QWORD *)&v529 * v803 + 4;
                          v568 = v565;
                          v567 = *v565;
                          if (v566 < (v568[1] - v567) >> 3)
                            *(_QWORD *)(v567 + 8 * v566) = 0;
                        }
                        v569 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v343 + 784)
                                                     + (((*(_QWORD *)(v343 + 808) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(_BYTE *)(v343 + 808) + v786));
                        ++*(_BYTE *)(v569 + v803);
                        v570 = *(_QWORD *)(*(_QWORD *)(v343 + 832) + 8 * ((*(_QWORD *)(v343 + 856) + v786) / 0x55))
                             + 48 * ((*(_QWORD *)(v343 + 856) + v786) % 0x55);
                        v571 = *(_QWORD *)(*(_QWORD *)(v570 + 8) + 8 * ((*(_QWORD *)(v570 + 32) + v789) / 0x55))
                             + 48 * ((*(_QWORD *)(v570 + 32) + v789) % 0x55);
                        std::deque<unsigned short>::push_back((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v571 + 8) + 8 * ((*(_QWORD *)(v571 + 32) + v803) / 0x55))+ 48 * ((*(_QWORD *)(v571 + 32) + v803) % 0x55)), v816);
                        v572 = LOWORD(v816[0]);
                        v573 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 688)
                                                     + (((*(_QWORD *)(a1 + 712) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(_BYTE *)(a1 + 712) + v789));
                        ++*(_BYTE *)(v573 + LOWORD(v816[0]));
                        v574 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * ((*(_QWORD *)(a1 + 760) + v789) / 0x55))
                             + 48 * ((*(_QWORD *)(a1 + 760) + v789) % 0x55);
                        v575 = *(_QWORD *)(*(_QWORD *)(v574 + 8) + 8 * ((*(_QWORD *)(v574 + 32) + v786) / 0x55))
                             + 48 * ((*(_QWORD *)(v574 + 32) + v786) % 0x55);
                        v576 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v575 + 8)
                                                    + 8 * ((*(_QWORD *)(v575 + 32) + v572) / 0x55uLL))
                                        + 48 * ((*(_QWORD *)(v575 + 32) + v572) % 0x55uLL));
                        LOWORD(v856.f64[0]) = v803;
                        std::deque<unsigned short>::push_back(v576, &v856);
                      }
                    }
                    else
                    {
                      v509 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v343 + 592)
                                                   + (((*(_QWORD *)(v343 + 616) + v786) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(v343 + 616) + v786));
                      ++*(_BYTE *)(v509 + v803);
                      v510 = *(_QWORD *)(*(_QWORD *)(v343 + 640) + 8 * ((*(_QWORD *)(v343 + 664) + v786) / 0x55))
                           + 48 * ((*(_QWORD *)(v343 + 664) + v786) % 0x55);
                      v511 = *(_QWORD *)(*(_QWORD *)(v510 + 8) + 8 * ((*(_QWORD *)(v510 + 32) + v789) / 0x55))
                           + 48 * ((*(_QWORD *)(v510 + 32) + v789) % 0x55);
                      std::deque<unsigned short>::push_back((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v511 + 8) + 8 * ((*(_QWORD *)(v511 + 32) + v803) / 0x55))+ 48 * ((*(_QWORD *)(v511 + 32) + v803) % 0x55)), v816);
                      v512 = LOWORD(v816[0]);
                      v513 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 592)
                                                   + (((*(_QWORD *)(a1 + 616) + v789) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 616) + v789));
                      ++*(_BYTE *)(v513 + LOWORD(v816[0]));
                      v514 = *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * ((*(_QWORD *)(a1 + 664) + v789) / 0x55))
                           + 48 * ((*(_QWORD *)(a1 + 664) + v789) % 0x55);
                      v515 = *(_QWORD *)(*(_QWORD *)(v514 + 8) + 8 * ((*(_QWORD *)(v514 + 32) + v786) / 0x55))
                           + 48 * ((*(_QWORD *)(v514 + 32) + v786) % 0x55);
                      v516 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v515 + 8)
                                                  + 8 * ((*(_QWORD *)(v515 + 32) + v512) / 0x55uLL))
                                      + 48 * ((*(_QWORD *)(v515 + 32) + v512) % 0x55uLL));
                      LOWORD(v856.f64[0]) = v803;
                      std::deque<unsigned short>::push_back(v516, &v856);
                    }
                    v310 = v792;
                    v311 = v791 + 1;
                    if ((_WORD *)((char *)v791 - *v792 + 2) == (_WORD *)4096)
                    {
                      v310 = v792 + 1;
                      v311 = (_WORD *)v792[1];
                    }
                    v193 = v781;
                    if (v311 == (_WORD *)v785)
                    {
                      if (v312)
                        operator delete(v312);
                      operator delete(v507);
                      v194 = a1;
                      v195 = v789;
                      goto LABEL_713;
                    }
                  }
                  v356 = 0;
                  LODWORD(v357) = 1;
LABEL_439:
                  v358 = 6;
                  goto LABEL_440;
                }
              }
            }
LABEL_713:
            std::deque<unsigned short>::~deque[abi:ne180100](v823);
            if (v839)
            {
              if (v840 != v839)
                v840 += ((_BYTE *)v839 - v840 + 7) & 0xFFFFFFFFFFFFFFF8;
              operator delete(v839);
            }
            if (v841)
            {
              if (v842 != v841)
                v842 += ((_BYTE *)v841 - v842 + 7) & 0xFFFFFFFFFFFFFFF8;
              operator delete(v841);
            }
LABEL_721:
            if (++v803 == v760)
              goto LABEL_852;
          }
          v856 = 0uLL;
          if (!v190)
            goto LABEL_220;
LABEL_219:
          operator delete(v190);
          goto LABEL_220;
        }
      }
      else
      {
        v196 = v783;
      }
LABEL_855:
      ++v191;
    }
    while (v191 != v196);
    v779 = v190;
    if (v783 >= 2 && (a3 & 1) == 0)
    {
      for (k = 1; k != v783; ++k)
      {
        v629 = 0;
        v811 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v835[0] + 1)
                                     + (((unint64_t)(v836 + k) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v836 + k) & 0x1FF));
        do
        {
          if (v811)
          {
            v630 = 0;
            while (2)
            {
              v631 = *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * ((*(_QWORD *)(a1 + 664) + k) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(a1 + 664) + k) % 0x55uLL);
              v632 = *(_QWORD *)(*(_QWORD *)(v631 + 8) + 8 * ((*(_QWORD *)(v631 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(v631 + 32) + v629) % 0x55uLL);
              v633 = *(_QWORD *)(*(_QWORD *)(v632 + 8) + 8 * ((*(_QWORD *)(v632 + 32) + v630) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(v632 + 32) + v630) % 0x55uLL);
              v635 = *(_QWORD *)(v633 + 40);
              v634 = (_QWORD *)(v633 + 40);
              if (!v635)
                goto LABEL_946;
              v636 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * ((*(_QWORD *)(a1 + 760) + k) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(a1 + 760) + k) % 0x55uLL);
              v637 = *(_QWORD *)(*(_QWORD *)(v636 + 8) + 8 * ((*(_QWORD *)(v636 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(v636 + 32) + v629) % 0x55uLL);
              v638 = *(_QWORD *)(v637 + 32) + v630;
              v639 = *(_QWORD *)(*(_QWORD *)(v637 + 8) + 8 * (v638 / 0x55));
              v640 = v638 % 0x55;
              v641 = v639 + 48 * v640;
              v644 = *(_QWORD *)(v641 + 40);
              v643 = (uint64_t *)(v641 + 40);
              v642 = v644;
              v814 = v634;
              if (v644)
              {
                v807 = v643;
                v645 = (_QWORD *)(v639 + 48 * v640);
                v646 = v645 + 4;
                v647 = v645[1];
                if (v645[2] != v647)
                {
                  v648 = (_QWORD *)(v647 + 8 * (*v646 >> 11));
                  v649 = (unsigned __int16 *)(*v648 + 2 * (*v646 & 0x7FFLL));
                  v650 = *(_QWORD *)(v647 + (((unint64_t)(*v646 + v642) >> 8) & 0xFFFFFFFFFFFFF8))
                       + 2 * ((*v646 + v642) & 0x7FF);
                  if (v649 != (unsigned __int16 *)v650)
                  {
                    do
                    {
                      v651 = *v649;
                      v652 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 784)
                                                   + (((unint64_t)(*(_QWORD *)(a1 + 808) + v629) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 808) + v629));
                      --*(_BYTE *)(v652 + v651);
                      v653 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * ((*(_QWORD *)(a1 + 856) + v629) / 0x55uLL))
                           + 48 * ((*(_QWORD *)(a1 + 856) + v629) % 0x55uLL);
                      v654 = *(_QWORD *)(*(_QWORD *)(v653 + 8) + 8 * ((*(_QWORD *)(v653 + 32) + k) / 0x55uLL))
                           + 48 * ((*(_QWORD *)(v653 + 32) + k) % 0x55uLL);
                      v655 = *(_QWORD *)(v654 + 32) + v651;
                      v656 = *(_QWORD *)(*(_QWORD *)(v654 + 8) + 8 * (v655 / 0x55));
                      v657 = v655 % 0x55;
                      v658 = (int64x2_t *)(v656 + 48 * (v655 % 0x55));
                      v659 = v658[2].u64[0];
                      v660 = v658->i64[1];
                      v661 = v658[1].i64[0];
                      v662 = v660 + 8 * (v659 >> 11);
                      if (v661 == v660)
                        v663 = 0;
                      else
                        v663 = *(_QWORD *)v662 + 2 * (v658[2].i64[0] & 0x7FF);
                      v664 = (_QWORD *)(v656 + 48 * v657 + 40);
LABEL_870:
                      v665 = (unsigned __int16 *)v663;
                      while (1)
                      {
                        v666 = v661 == v660
                             ? 0
                             : *(_QWORD *)(v660 + (((*v664 + v659) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*v664 + v659) & 0x7FF);
                        if (v665 == (unsigned __int16 *)v666)
                          break;
                        if (v630 == *v665)
                        {
                          std::deque<unsigned short>::erase(v658, (char *)v662, v663);
                          break;
                        }
                        ++v665;
                        v663 += 2;
                        if (*(_QWORD *)v662 + 4096 == v663)
                        {
                          v667 = *(_QWORD *)(v662 + 8);
                          v662 += 8;
                          v663 = v667;
                          goto LABEL_870;
                        }
                      }
                      if ((unsigned __int16 *)((char *)++v649 - *v648) == (unsigned __int16 *)4096)
                      {
                        v668 = (unsigned __int16 *)v648[1];
                        ++v648;
                        v649 = v668;
                      }
                    }
                    while (v649 != (unsigned __int16 *)v650);
                    v642 = *v807;
                  }
                }
                v669 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 688)
                                             + (((unint64_t)(*(_QWORD *)(a1 + 712) + k) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 712) + k));
                *(_BYTE *)(v669 + v630) -= v642;
                v670 = (void **)v645[1];
                v671 = v645[2];
                *v807 = 0;
                v672 = v671 - (_QWORD)v670;
                if (v672 >= 0x11)
                {
                  do
                  {
                    operator delete(*v670);
                    v673 = v645[2];
                    v670 = (void **)(v645[1] + 8);
                    v645[1] = v670;
                    v672 = v673 - (_QWORD)v670;
                  }
                  while (v672 > 0x10);
                }
                if (v672 >> 3 == 1)
                {
                  v674 = 1024;
                  v634 = v814;
LABEL_889:
                  v645[4] = v674;
                }
                else
                {
                  v634 = v814;
                  if (v672 >> 3 == 2)
                  {
                    v674 = 2048;
                    goto LABEL_889;
                  }
                }
              }
              if (!*v634)
                goto LABEL_946;
              v675 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * ((*(_QWORD *)(a1 + 856) + k) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(a1 + 856) + k) % 0x55uLL);
              v676 = *(_QWORD *)(*(_QWORD *)(v675 + 8) + 8 * ((*(_QWORD *)(v675 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(v675 + 32) + v629) % 0x55uLL);
              v677 = *(_QWORD *)(v676 + 32) + v630;
              v678 = *(_QWORD *)(*(_QWORD *)(v676 + 8) + 8 * (v677 / 0x55));
              v679 = v677 % 0x55;
              v680 = v678 + 48 * v679;
              v683 = *(_QWORD *)(v680 + 40);
              v682 = (uint64_t *)(v680 + 40);
              v681 = v683;
              if (v683)
              {
                v808 = v682;
                v684 = (_QWORD *)(v678 + 48 * v679);
                v685 = v684 + 4;
                v686 = v684[1];
                if (v684[2] != v686)
                {
                  v687 = (_QWORD *)(v686 + 8 * (*v685 >> 11));
                  v688 = (unsigned __int16 *)(*v687 + 2 * (*v685 & 0x7FFLL));
                  v689 = *(_QWORD *)(v686 + (((unint64_t)(*v685 + v681) >> 8) & 0xFFFFFFFFFFFFF8))
                       + 2 * ((*v685 + v681) & 0x7FF);
                  if (v688 != (unsigned __int16 *)v689)
                  {
                    do
                    {
                      v690 = *v688;
                      v691 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 688)
                                                   + (((unint64_t)(*(_QWORD *)(a1 + 712) + v629) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 712) + v629));
                      --*(_BYTE *)(v691 + v690);
                      v692 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * ((*(_QWORD *)(a1 + 760) + v629) / 0x55uLL))
                           + 48 * ((*(_QWORD *)(a1 + 760) + v629) % 0x55uLL);
                      v693 = *(_QWORD *)(*(_QWORD *)(v692 + 8) + 8 * ((*(_QWORD *)(v692 + 32) + k) / 0x55uLL))
                           + 48 * ((*(_QWORD *)(v692 + 32) + k) % 0x55uLL);
                      v694 = *(_QWORD *)(v693 + 32) + v690;
                      v695 = *(_QWORD *)(*(_QWORD *)(v693 + 8) + 8 * (v694 / 0x55));
                      v696 = v694 % 0x55;
                      v697 = (int64x2_t *)(v695 + 48 * (v694 % 0x55));
                      v698 = v697[2].u64[0];
                      v699 = v697->i64[1];
                      v700 = v697[1].i64[0];
                      v701 = v699 + 8 * (v698 >> 11);
                      if (v700 == v699)
                        v702 = 0;
                      else
                        v702 = *(_QWORD *)v701 + 2 * (v697[2].i64[0] & 0x7FF);
                      v703 = (_QWORD *)(v695 + 48 * v696 + 40);
LABEL_898:
                      v704 = (unsigned __int16 *)v702;
                      while (1)
                      {
                        v705 = v700 == v699
                             ? 0
                             : *(_QWORD *)(v699 + (((*v703 + v698) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*v703 + v698) & 0x7FF);
                        if (v704 == (unsigned __int16 *)v705)
                          break;
                        if (v630 == *v704)
                        {
                          std::deque<unsigned short>::erase(v697, (char *)v701, v702);
                          break;
                        }
                        ++v704;
                        v702 += 2;
                        if (*(_QWORD *)v701 + 4096 == v702)
                        {
                          v706 = *(_QWORD *)(v701 + 8);
                          v701 += 8;
                          v702 = v706;
                          goto LABEL_898;
                        }
                      }
                      if ((unsigned __int16 *)((char *)++v688 - *v687) == (unsigned __int16 *)4096)
                      {
                        v707 = (unsigned __int16 *)v687[1];
                        ++v687;
                        v688 = v707;
                      }
                    }
                    while (v688 != (unsigned __int16 *)v689);
                    v681 = *v808;
                  }
                }
                v708 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 784)
                                             + (((unint64_t)(*(_QWORD *)(a1 + 808) + k) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 808) + k));
                *(_BYTE *)(v708 + v630) -= v681;
                v709 = (void **)v684[1];
                v710 = v684[2];
                *v808 = 0;
                v711 = v710 - (_QWORD)v709;
                if (v711 >= 0x11)
                {
                  do
                  {
                    operator delete(*v709);
                    v712 = v684[2];
                    v709 = (void **)(v684[1] + 8);
                    v684[1] = v709;
                    v711 = v712 - (_QWORD)v709;
                  }
                  while (v711 > 0x10);
                }
                if (v711 >> 3 == 1)
                {
                  v713 = 1024;
                  v634 = v814;
LABEL_917:
                  v684[4] = v713;
                }
                else
                {
                  v634 = v814;
                  if (v711 >> 3 == 2)
                  {
                    v713 = 2048;
                    goto LABEL_917;
                  }
                }
              }
              if (!*v634)
                goto LABEL_946;
              v714 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 8 * ((*(_QWORD *)(a1 + 952) + k) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(a1 + 952) + k) % 0x55uLL);
              v715 = *(_QWORD *)(*(_QWORD *)(v714 + 8) + 8 * ((*(_QWORD *)(v714 + 32) + v629) / 0x55uLL))
                   + 48 * ((*(_QWORD *)(v714 + 32) + v629) % 0x55uLL);
              v716 = *(_QWORD *)(v715 + 32) + v630;
              v717 = *(_QWORD *)(*(_QWORD *)(v715 + 8) + 8 * (v716 / 0x55));
              v718 = v716 % 0x55;
              v719 = v717 + 48 * v718;
              v722 = *(_QWORD *)(v719 + 40);
              v721 = (uint64_t *)(v719 + 40);
              v720 = v722;
              if (!v722)
                goto LABEL_946;
              v815 = v721;
              v723 = v717 + 48 * v718;
              v724 = (_QWORD *)(v723 + 32);
              v725 = *(_QWORD *)(v723 + 8);
              if (*(_QWORD *)(v723 + 16) != v725)
              {
                v726 = (_QWORD *)(v725 + 8 * (*v724 >> 11));
                v727 = (unsigned __int16 *)(*v726 + 2 * (*v724 & 0x7FFLL));
                v728 = *(_QWORD *)(v725 + (((unint64_t)(*v724 + v720) >> 8) & 0xFFFFFFFFFFFFF8))
                     + 2 * ((*v724 + v720) & 0x7FF);
                if (v727 != (unsigned __int16 *)v728)
                {
                  do
                  {
                    v729 = *v727;
                    v730 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 688)
                                                 + (((unint64_t)(*(_QWORD *)(a1 + 712) + v629) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(_BYTE *)(a1 + 712) + v629));
                    --*(_BYTE *)(v730 + v729);
                    v731 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 8 * ((*(_QWORD *)(a1 + 952) + v629) / 0x55uLL))
                         + 48 * ((*(_QWORD *)(a1 + 952) + v629) % 0x55uLL);
                    v732 = *(_QWORD *)(*(_QWORD *)(v731 + 8) + 8 * ((*(_QWORD *)(v731 + 32) + k) / 0x55uLL))
                         + 48 * ((*(_QWORD *)(v731 + 32) + k) % 0x55uLL);
                    v733 = *(_QWORD *)(v732 + 32) + v729;
                    v734 = *(_QWORD *)(*(_QWORD *)(v732 + 8) + 8 * (v733 / 0x55));
                    v735 = v733 % 0x55;
                    v736 = (int64x2_t *)(v734 + 48 * (v733 % 0x55));
                    v737 = v736[2].u64[0];
                    v738 = v736->i64[1];
                    v739 = v736[1].i64[0];
                    v740 = v738 + 8 * (v737 >> 11);
                    if (v739 == v738)
                      v741 = 0;
                    else
                      v741 = *(_QWORD *)v740 + 2 * (v736[2].i64[0] & 0x7FF);
                    v742 = (_QWORD *)(v734 + 48 * v735 + 40);
LABEL_926:
                    v743 = (unsigned __int16 *)v741;
                    while (1)
                    {
                      v744 = v739 == v738
                           ? 0
                           : *(_QWORD *)(v738 + (((*v742 + v737) >> 8) & 0xFFFFFFFFFFFFF8))
                           + 2 * ((*v742 + v737) & 0x7FF);
                      if (v743 == (unsigned __int16 *)v744)
                        break;
                      if (v630 == *v743)
                      {
                        std::deque<unsigned short>::erase(v736, (char *)v740, v741);
                        break;
                      }
                      ++v743;
                      v741 += 2;
                      if (*(_QWORD *)v740 + 4096 == v741)
                      {
                        v745 = *(_QWORD *)(v740 + 8);
                        v740 += 8;
                        v741 = v745;
                        goto LABEL_926;
                      }
                    }
                    if ((unsigned __int16 *)((char *)++v727 - *v726) == (unsigned __int16 *)4096)
                    {
                      v746 = (unsigned __int16 *)v726[1];
                      ++v726;
                      v727 = v746;
                    }
                  }
                  while (v727 != (unsigned __int16 *)v728);
                  v720 = *v815;
                }
              }
              v747 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880)
                                           + (((unint64_t)(*(_QWORD *)(a1 + 904) + k) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(a1 + 904) + k));
              *(_BYTE *)(v747 + v630) -= v720;
              v748 = *(void ***)(v723 + 8);
              v749 = *(_QWORD *)(v723 + 16);
              *v815 = 0;
              v750 = v749 - (_QWORD)v748;
              if (v750 >= 0x11)
              {
                do
                {
                  operator delete(*v748);
                  v751 = *(_QWORD *)(v723 + 16);
                  v748 = (void **)(*(_QWORD *)(v723 + 8) + 8);
                  *(_QWORD *)(v723 + 8) = v748;
                  v750 = v751 - (_QWORD)v748;
                }
                while (v750 > 0x10);
              }
              v752 = v750 >> 3;
              if (v750 >> 3 == 1)
              {
                v754 = 1024;
                v753 = (uint64_t *)(v723 + 32);
                goto LABEL_945;
              }
              v753 = (uint64_t *)(v723 + 32);
              if (v752 == 2)
              {
                v754 = 2048;
LABEL_945:
                *v753 = v754;
              }
LABEL_946:
              if (++v630 == v811)
                break;
              continue;
            }
          }
          ++v629;
        }
        while (v629 != k);
      }
    }
    v755 = v779;
    v185 = v765;
    if (v817)
    {
      if (v818 != v817)
        v818 += ((_BYTE *)v817 - v818 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(v817);
    }
    if (v819)
      operator delete(v819);
  }
  else
  {
    v755 = 0;
    *(double *)&v821 = 0.0;
    v822 = 0.0;
    v819 = 0;
    v820 = 0;
  }
  if (v185)
    operator delete(v185);
  if (*(double *)&v821 != 0.0)
    operator delete(v821);
  if (v755)
    operator delete(v755);
  std::deque<std::valarray<double>>::~deque[abi:ne180100]((uint64_t)v829);
  std::deque<std::reference_wrapper<std::valarray<double> const>>::~deque[abi:ne180100]((uint64_t)__p);
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v835);
}

void sub_1D50AC904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,void *a55,uint64_t a56,void *a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v71;
  void *v72;

  operator delete(v72);
  if (v71)
    operator delete(v71);
  std::deque<std::valarray<double>>::~deque[abi:ne180100]((uint64_t)&a71);
  std::deque<std::reference_wrapper<std::valarray<double> const>>::~deque[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&STACK[0x250]);
  _Unwind_Resume(a1);
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::performNMSAtOneLevel(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  _QWORD *v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void **v29;
  _QWORD *v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t i;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  double v56;
  size_t v57;
  void *v58;
  char v59;
  void *v60;
  void *v61;
  unsigned __int8 **v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL **v71;
  uint64_t v72;
  BOOL *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  unsigned __int16 *v103;
  uint64_t v104;
  unint64_t v105;
  double v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  BOOL v118;
  _QWORD *v119;
  unint64_t v120;
  double v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  float64x2_t v125;
  double v126;
  float64x2_t v127;
  double v128;
  uint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int16 *v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  BOOL v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  unint64_t v167;
  double v168;
  double *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  BOOL v183;
  _QWORD *v184;
  uint64_t v185;
  unsigned __int16 *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  BOOL v192;
  _QWORD *v193;
  unint64_t v194;
  double v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  _QWORD *v202;
  _QWORD *v203;
  unint64_t v204;
  BOOL v205;
  _QWORD *v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  size_t *v212;
  uint64_t v213;
  size_t v214;
  unint64_t v215;
  unsigned int v216;
  unint64_t v217;
  double v218;
  double *v219;
  double v220;
  double *v221;
  double v222;
  int v223;
  _QWORD *v224;
  uint64_t v225;
  BOOL v226;
  _QWORD *v227;
  uint64_t v228;
  unsigned __int16 *v229;
  unint64_t v230;
  double *v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  double *v238;
  double *v239;
  uint64_t v240;
  double *v241;
  uint64_t v242;
  uint64_t v243;
  double *v244;
  double *v245;
  double *v246;
  int64_t v247;
  uint64_t v248;
  unsigned __int8 *v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD **v256;
  void *v257;
  int v258;
  _QWORD *v259;
  _QWORD *v260;
  unint64_t v261;
  double v262;
  uint64_t *v263;
  uint64_t *v264;
  unint64_t v265;
  double *v266;
  double *v267;
  unint64_t v268;
  double v269;
  unint64_t v270;
  uint64_t v271;
  BOOL v272;
  uint64_t v273;
  _QWORD *v274;
  unsigned __int16 *v275;
  unint64_t v276;
  unsigned __int16 *v277;
  unsigned int v278;
  _QWORD *v279;
  _QWORD *v280;
  unint64_t v281;
  BOOL v282;
  _QWORD *v283;
  unint64_t v284;
  double v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  double v289;
  uint64_t v290;
  double v291;
  double v292;
  uint64_t v293;
  uint64_t v294;
  double *v295;
  double v296;
  unint64_t v297;
  double *v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  BOOL v304;
  double v305;
  double v306;
  double *v307;
  size_t v308;
  unint64_t v309;
  double *v310;
  uint64_t v311;
  double *v312;
  unint64_t v313;
  double *v314;
  double *v315;
  double *v316;
  unint64_t v317;
  _BYTE *v318;
  double *v319;
  double *v320;
  double *v321;
  unint64_t v322;
  double v323;
  _BYTE *v324;
  double *v325;
  double *v326;
  double *v327;
  unint64_t v328;
  double v329;
  double *v330;
  char *v331;
  int64_t v332;
  double *v333;
  char *v334;
  void *v335;
  uint64_t v336;
  unint64_t v337;
  char *v338;
  unint64_t v339;
  size_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  double *v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  double v348;
  double v349;
  unint64_t v350;
  void *v351;
  char *v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  double v365;
  double *v366;
  double v367;
  int v368;
  unint64_t v369;
  double v370;
  unint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  unint64_t v374;
  double v375;
  _QWORD *v376;
  _QWORD *v377;
  unint64_t v378;
  double v379;
  uint64_t v380;
  uint64_t v381;
  unsigned __int16 *v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  _QWORD *v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  unint64_t v395;
  uint64_t v396;
  unsigned __int8 **v397;
  unint64_t v398;
  _QWORD *v399;
  unsigned __int16 *v400;
  _QWORD *v401;
  double v402;
  double v403;
  void **v404;
  void **v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  _QWORD *v410;
  unint64_t v411;
  double v412;
  unint64_t v413;
  uint64_t v414;
  unsigned __int16 v415;
  unsigned __int16 v416;
  unint64_t v417;
  _QWORD *v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  _QWORD **v424;
  _QWORD *v425;
  _QWORD *v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  unint64_t v439;
  _QWORD *v440;
  _WORD *v441;
  uint64_t v442;
  _QWORD *v443;
  _QWORD *v444;
  _QWORD *v445;
  unsigned __int16 v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unsigned __int16 *v450;
  unint64_t v451;
  unint64_t v452;
  unsigned __int16 *v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  double v457;
  BOOL v458;
  _QWORD *v459;
  _QWORD *v460;
  unint64_t v461;
  double v462;
  _QWORD *v463;
  _QWORD *v464;
  unint64_t v465;
  double v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  _QWORD *v471;
  unint64_t v472;
  double v473;
  unint64_t v474;
  uint64_t v475;
  _QWORD *v476;
  _QWORD *v477;
  unint64_t v478;
  double v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  _WORD *v484;
  void **v485;
  char *v486;
  unsigned __int16 *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unsigned __int16 *v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int16 v498;
  uint64_t v499;
  unsigned __int8 **v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  _BYTE *v505;
  _BYTE *v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  _BYTE *v510;
  int64_t v511;
  char *v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  _QWORD *v516;
  _WORD *v517;
  uint64_t v518;
  _WORD *v519;
  uint64_t v520;
  unsigned __int16 *v521;
  uint64_t v522;
  uint64_t v523;
  char *v524;
  int *v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  _QWORD *v534;
  uint64_t v535;
  _DWORD *v536;
  _DWORD *v537;
  int v538;
  int *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  void **v547;
  unint64_t v548;
  uint64_t v549;
  _QWORD *v550;
  unsigned __int16 *v551;
  uint64_t v552;
  unsigned __int16 *v553;
  void **v554;
  void **v555;
  unint64_t v556;
  unint64_t v557;
  uint64_t v558;
  unint64_t v559;
  char *v560;
  uint64_t v561;
  uint64_t *v562;
  int *v563;
  uint64_t *v564;
  int *v565;
  char *v566;
  uint64_t v567;
  uint64_t *v568;
  int *v569;
  uint64_t *v570;
  int *v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unsigned __int16 **v577;
  unsigned __int16 *v578;
  unsigned __int16 *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  unsigned __int16 **v583;
  unsigned __int16 *v584;
  unsigned __int16 *v585;
  uint64_t v586;
  unsigned __int16 *v587;
  unint64_t v588;
  char v589;
  uint64_t v590;
  uint64_t v591;
  unsigned __int16 *v592;
  _QWORD *v593;
  unsigned __int16 *v594;
  uint64_t v595;
  unsigned __int16 *v596;
  unint64_t v597;
  int v598;
  uint64_t v599;
  uint64_t *v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  char *v608;
  void *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  BOOL v613;
  char v614;
  _QWORD *v615;
  _WORD *v616;
  uint64_t v617;
  _WORD *v618;
  unint64_t v619;
  uint64_t v620;
  unint64_t v621;
  _QWORD *v622;
  unsigned __int16 *v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  _QWORD *v627;
  unint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  _QWORD *v632;
  _QWORD *v633;
  _QWORD *v634;
  _QWORD *v635;
  _QWORD *v636;
  unint64_t v637;
  uint64_t v638;
  _QWORD *v639;
  unint64_t v640;
  double v641;
  _QWORD *v642;
  unint64_t v643;
  uint64_t v644;
  _QWORD *v645;
  double v646;
  void **v647;
  unint64_t v648;
  uint64_t v649;
  void **v650;
  unint64_t v651;
  uint64_t v652;
  void **v653;
  unint64_t v654;
  uint64_t v655;
  int ContainedDatums;
  char *v657;
  uint64_t v658;
  uint64_t *v659;
  int *v660;
  uint64_t *v661;
  int *v662;
  char *v663;
  uint64_t v664;
  uint64_t *v665;
  int *v666;
  uint64_t *v667;
  int *v668;
  uint64_t v669;
  uint64_t v670;
  unsigned __int16 **v671;
  unsigned __int16 *v672;
  unsigned __int16 *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unsigned __int16 *v681;
  unsigned __int16 *v682;
  unsigned __int16 **v683;
  unsigned __int16 *v684;
  unsigned __int16 *v685;
  unint64_t v686;
  uint64_t v687;
  unsigned __int16 *v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  _QWORD *v693;
  unint64_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  _QWORD *v698;
  _QWORD *v699;
  _QWORD *v700;
  _QWORD *v701;
  _QWORD *v702;
  unint64_t v703;
  uint64_t v704;
  _QWORD *v705;
  unint64_t v706;
  double v707;
  _QWORD *v708;
  unint64_t v709;
  uint64_t v710;
  _QWORD *v711;
  double v712;
  uint64_t v713;
  unsigned __int16 v714;
  uint64_t v715;
  unint64_t v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  uint64_t *v727;
  unint64_t v728;
  uint64_t v729;
  unsigned __int16 **v730;
  unsigned __int16 *v731;
  unsigned __int16 *v732;
  uint64_t v733;
  _QWORD *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unsigned __int16 *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  char **v744;
  char *v745;
  char *v746;
  uint64_t v747;
  int v748;
  unsigned __int16 **v749;
  unsigned __int16 *v750;
  unsigned __int16 *v751;
  uint64_t v752;
  unsigned __int16 *v753;
  char *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  BOOL v758;
  _QWORD *v759;
  unsigned __int16 *v760;
  unsigned __int16 v761;
  unsigned __int16 v762;
  unint64_t v763;
  _QWORD *v764;
  unint64_t v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  _QWORD *v769;
  _QWORD *v770;
  _QWORD *v771;
  _QWORD *v772;
  unint64_t v773;
  double v774;
  uint64_t v775;
  _QWORD *v776;
  unint64_t v777;
  uint64_t v778;
  _QWORD *v779;
  double v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unsigned __int16 *v791;
  unsigned __int16 *v792;
  unint64_t v793;
  unint64_t v794;
  _QWORD *v795;
  unint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t v799;
  _QWORD *v800;
  _QWORD *v801;
  unint64_t v802;
  uint64_t v803;
  char **v804;
  _QWORD *v805;
  unsigned __int16 *v806;
  uint64_t v807;
  _QWORD *v808;
  _QWORD *v809;
  unint64_t v810;
  double v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  double v816;
  unint64_t v817;
  int v818;
  unint64_t v819;
  unint64_t v820;
  unint64_t v821;
  uint64_t v822;
  unint64_t v823;
  _QWORD *v824;
  uint64_t v825;
  unint64_t v826;
  unsigned __int16 **v827;
  unsigned __int16 *v828;
  unint64_t v829;
  unsigned __int16 *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  _QWORD *v837;
  unint64_t v838;
  uint64_t v839;
  unint64_t v840;
  uint64_t v841;
  _QWORD *v842;
  _QWORD *v843;
  _QWORD *v844;
  _QWORD *v845;
  unint64_t v846;
  double v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t *v850;
  double v851;
  unsigned __int16 *v852;
  uint64_t v853;
  uint64_t v854;
  unsigned __int16 **v855;
  unsigned __int16 *v856;
  unsigned __int16 *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unsigned __int16 *v864;
  unint64_t v865;
  unint64_t v866;
  unint64_t v867;
  uint64_t v868;
  unint64_t v869;
  _QWORD *v870;
  uint64_t v871;
  unint64_t v872;
  unsigned __int16 **v873;
  unsigned __int16 *v874;
  unint64_t v875;
  unsigned __int16 *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  _QWORD *v881;
  unint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  _QWORD *v886;
  _QWORD *v887;
  _QWORD *v888;
  _QWORD *v889;
  unint64_t v890;
  double v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t *v894;
  double v895;
  unsigned __int16 *v896;
  uint64_t v897;
  uint64_t v898;
  unsigned __int16 **v899;
  unsigned __int16 *v900;
  unsigned __int16 *v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  unsigned __int16 *v908;
  unint64_t v909;
  unint64_t v910;
  unint64_t v911;
  uint64_t v912;
  unint64_t v913;
  _QWORD *v914;
  uint64_t v915;
  unint64_t v916;
  unsigned __int16 **v917;
  unsigned __int16 *v918;
  unint64_t v919;
  unsigned __int16 *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  _QWORD *v925;
  unint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  _QWORD *v930;
  _QWORD *v931;
  _QWORD *v932;
  _QWORD *v933;
  unint64_t v934;
  double v935;
  unint64_t v936;
  uint64_t v937;
  uint64_t *v938;
  double v939;
  unsigned __int16 *v940;
  uint64_t v941;
  uint64_t v942;
  unsigned __int16 **v943;
  unsigned __int16 *v944;
  unsigned __int16 *v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unsigned __int16 *v952;
  unint64_t v953;
  unint64_t v954;
  unint64_t v955;
  uint64_t v956;
  unint64_t v957;
  _QWORD *v958;
  uint64_t v959;
  unint64_t v960;
  unsigned __int16 **v961;
  unsigned __int16 *v962;
  unsigned __int16 *v963;
  unint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  _QWORD *v971;
  _QWORD *v972;
  _QWORD *v973;
  unint64_t v974;
  double v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  double v979;
  unint64_t v980;
  uint64_t v981;
  unint64_t v982;
  uint64_t v983;
  _QWORD *v984;
  _QWORD *v985;
  _QWORD *v986;
  _QWORD *v987;
  unint64_t v988;
  double v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t *v992;
  double v993;
  unsigned __int16 *v994;
  uint64_t v995;
  uint64_t v996;
  unsigned __int16 **v997;
  unsigned __int16 *v998;
  unsigned __int16 *v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unsigned __int16 *v1006;
  BOOL v1007;
  uint64_t v1008;
  unint64_t v1009;
  uint64_t v1010;
  int v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  char *v1018;
  void *v1019;
  uint64_t v1020;
  uint64_t v1021;
  unsigned __int16 **v1022;
  unsigned __int16 *v1023;
  unsigned __int16 *v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unsigned int v1029;
  unsigned __int16 *v1030;
  _QWORD *v1031;
  uint64_t v1032;
  unsigned __int16 v1033;
  unsigned __int16 *v1034;
  _QWORD *v1035;
  uint64_t v1036;
  unint64_t v1037;
  unint64_t v1038;
  _QWORD *v1039;
  _QWORD *v1040;
  _QWORD *v1041;
  _QWORD *v1042;
  uint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  _BYTE *v1046;
  _QWORD *v1047;
  uint64_t v1048;
  int v1049;
  _QWORD *v1050;
  unint64_t v1051;
  double *v1052;
  uint64_t v1053;
  unsigned __int16 *v1054;
  unsigned __int16 *v1055;
  _QWORD *v1056;
  _QWORD *v1057;
  _WORD *v1058;
  unint64_t v1059;
  _QWORD *v1060;
  uint64_t v1061;
  _QWORD *v1062;
  _QWORD *v1063;
  uint64_t v1064;
  unsigned __int16 *v1065;
  uint64_t v1066;
  unsigned __int16 v1067;
  _QWORD *v1068;
  unint64_t v1069;
  _QWORD *v1070;
  unint64_t v1071;
  unsigned __int16 v1072;
  unsigned __int16 *v1073;
  unsigned __int16 v1074;
  _QWORD *v1075;
  _QWORD *v1076;
  _QWORD *v1077;
  char v1078;
  unint64_t v1079;
  _QWORD *v1080;
  _QWORD *v1081;
  _QWORD *v1082;
  uint64_t v1083;
  _QWORD *v1084;
  uint64_t v1085;
  uint64_t v1086;
  unsigned __int16 v1087;
  unint64_t v1088;
  _QWORD *v1089;
  _QWORD *v1090;
  char v1091;
  _QWORD *v1092;
  unint64_t v1093;
  void *v1094;
  unsigned __int16 v1095;
  uint64_t v1096;
  _QWORD *v1097;
  void *v1098;
  uint64_t v1099;
  uint64_t *v1100;
  uint64_t *v1101;
  double v1102;
  uint64_t v1103;
  void *v1104[2];
  __int128 v1105;
  __int128 v1106;
  void *v1107[2];
  __int128 v1108;
  __int128 v1109;
  void *v1110[2];
  __int128 v1111;
  __int128 v1112;
  void *__p[2];
  __int128 v1114;
  __int128 v1115;
  void *v1116[2];
  __int128 v1117;
  __int128 v1118;
  void *v1119[2];
  __int128 v1120;
  __int128 v1121;
  void *v1122[2];
  __int128 v1123;
  __int128 v1124;
  __n128 __src;
  __int128 v1126;
  __int128 v1127;
  uint64_t v1128;
  unint64_t v1129;
  unint64_t v1130;
  uint64_t v1131;

  v1131 = *MEMORY[0x1E0C80C00];
  v2 = *(void ***)(a1 + 64);
  v3 = *(void ***)(a1 + 72);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 96);
    v3 = *(void ***)(a1 + 64);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 96);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 16 * v5;
    v9 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 96) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 96) + v5);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          if (*(void **)(v8 + 8) != v10)
            *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 64);
      v3 = *(void ***)(a1 + 72);
    }
  }
  v1090 = (_QWORD *)(a1 + 56);
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v13 = *(_QWORD *)(a1 + 72);
      v2 = (void **)(*(_QWORD *)(a1 + 64) + 8);
      *(_QWORD *)(a1 + 64) = v2;
      v12 = v13 - (_QWORD)v2;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 128;
  }
  else
  {
    if (v12 >> 3 != 2)
      goto LABEL_19;
    v14 = 256;
  }
  *(_QWORD *)(a1 + 88) = v14;
LABEL_19:
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)v1090);
  v15 = *(void ***)(a1 + 112);
  v16 = *(void ***)(a1 + 120);
  if (v16 == v15)
  {
    v17 = (_QWORD *)(a1 + 144);
    v16 = *(void ***)(a1 + 112);
  }
  else
  {
    v17 = (_QWORD *)(a1 + 144);
    v18 = *(_QWORD *)(a1 + 136);
    v19 = &v15[v18 >> 8];
    v20 = (uint64_t)*v19;
    v21 = (uint64_t)*v19 + 16 * v18;
    v22 = *(uint64_t *)((char *)v15 + (((*(_QWORD *)(a1 + 144) + v18) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 144) + v18);
    if (v21 != v22)
    {
      do
      {
        v23 = *(void **)v21;
        if (*(_QWORD *)v21)
        {
          if (*(void **)(v21 + 8) != v23)
            *(_QWORD *)(v21 + 8) = v23;
          operator delete(v23);
          *(_QWORD *)v21 = 0;
          *(_QWORD *)(v21 + 8) = 0;
          v20 = (uint64_t)*v19;
        }
        v21 += 16;
        if (v21 - v20 == 4096)
        {
          v24 = (uint64_t)v19[1];
          ++v19;
          v20 = v24;
          v21 = v24;
        }
      }
      while (v21 != v22);
      v15 = *(void ***)(a1 + 112);
      v16 = *(void ***)(a1 + 120);
    }
  }
  v1031 = (_QWORD *)(a1 + 104);
  *v17 = 0;
  v25 = (char *)v16 - (char *)v15;
  if ((unint64_t)((char *)v16 - (char *)v15) >= 0x11)
  {
    do
    {
      operator delete(*v15);
      v26 = *(_QWORD *)(a1 + 120);
      v15 = (void **)(*(_QWORD *)(a1 + 112) + 8);
      *(_QWORD *)(a1 + 112) = v15;
      v25 = v26 - (_QWORD)v15;
    }
    while (v25 > 0x10);
  }
  if (v25 >> 3 == 1)
  {
    v27 = 128;
  }
  else
  {
    if (v25 >> 3 != 2)
      goto LABEL_37;
    v27 = 256;
  }
  *(_QWORD *)(a1 + 136) = v27;
LABEL_37:
  std::deque<std::valarray<BOOL>>::shrink_to_fit((uint64_t)v1031);
  v28 = *(void ***)(a1 + 160);
  v29 = *(void ***)(a1 + 168);
  if (v29 == v28)
  {
    v30 = (_QWORD *)(a1 + 192);
    v29 = *(void ***)(a1 + 160);
  }
  else
  {
    v30 = (_QWORD *)(a1 + 192);
    v31 = *(_QWORD *)(a1 + 184);
    v32 = &v28[v31 >> 8];
    v33 = (uint64_t)*v32;
    v34 = (uint64_t)*v32 + 16 * v31;
    v35 = *(uint64_t *)((char *)v28 + (((*(_QWORD *)(a1 + 192) + v31) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 192) + v31);
    if (v34 != v35)
    {
      do
      {
        v36 = *(void **)v34;
        if (*(_QWORD *)v34)
        {
          if (*(void **)(v34 + 8) != v36)
            *(_QWORD *)(v34 + 8) = v36;
          operator delete(v36);
          *(_QWORD *)v34 = 0;
          *(_QWORD *)(v34 + 8) = 0;
          v33 = (uint64_t)*v32;
        }
        v34 += 16;
        if (v34 - v33 == 4096)
        {
          v37 = (uint64_t)v32[1];
          ++v32;
          v33 = v37;
          v34 = v37;
        }
      }
      while (v34 != v35);
      v28 = *(void ***)(a1 + 160);
      v29 = *(void ***)(a1 + 168);
    }
  }
  *v30 = 0;
  v38 = (char *)v29 - (char *)v28;
  if ((unint64_t)((char *)v29 - (char *)v28) >= 0x11)
  {
    do
    {
      operator delete(*v28);
      v39 = *(_QWORD *)(a1 + 168);
      v28 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v28;
      v38 = v39 - (_QWORD)v28;
    }
    while (v38 > 0x10);
  }
  if (v38 >> 3 == 1)
  {
    v40 = 128;
    goto LABEL_54;
  }
  if (v38 >> 3 == 2)
  {
    v40 = 256;
LABEL_54:
    *(_QWORD *)(a1 + 184) = v40;
  }
  std::deque<std::valarray<BOOL>>::shrink_to_fit(a1 + 152);
  v41 = *(_QWORD *)(a1 + 968);
  if (!v41)
    goto LABEL_90;
  v42 = *(_QWORD *)(v41 + 40);
  if (!v42)
    goto LABEL_89;
  for (i = 0; i != v42; ++i)
  {
    v44 = *(_QWORD **)(a1 + 968);
    if (v44[5] <= i)
      std::__throw_out_of_range[abi:ne180100]("deque");
    v45 = v44[4] + i;
    v46 = *(_QWORD *)(v44[1] + 8 * (v45 / 0x14));
    v47 = v45 % 0x14;
    if (*(_QWORD *)(v46 + 200 * v47 + 120))
    {
      v48 = v46 + 200 * v47;
      v51 = *(_QWORD **)(v48 + 184);
      v49 = (_QWORD *)(v48 + 184);
      v50 = v51;
      v52 = *(v49 - 9);
      v53 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(v49 - 12) + ((v52 >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * v52
                                + 8)
                    - *(_QWORD *)(*(_QWORD *)(*(v49 - 12) + ((v52 >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * v52)) >> 3;
      if (!v51)
        goto LABEL_67;
      do
      {
        v54 = v50;
        v50 = (_QWORD *)*v50;
      }
      while (v50);
      if (v54 == v49 || v54[4] || (v55 = v54[5], v55 >= 9))
      {
LABEL_67:
        v56 = 0.0;
LABEL_68:
        v57 = v53 / *(_QWORD *)&v56;
        v58 = operator new(v53 / *(_QWORD *)&v56);
        __src.n128_u64[0] = (unint64_t)v58;
        bzero(v58, v57);
        v59 = 0;
        __src.n128_u64[1] = (unint64_t)v58 + v57;
        goto LABEL_71;
      }
      v56 = dbl_1D513B3B8[v55];
      __src = 0uLL;
      if (*(_QWORD *)&v56 <= v53)
        goto LABEL_68;
      v57 = 0;
    }
    else
    {
      v57 = 0;
      __src = 0uLL;
    }
    v59 = 1;
LABEL_71:
    std::deque<std::valarray<BOOL>>::push_back(v1090, &__src);
    if (__src.n128_u64[0])
      operator delete((void *)__src.n128_u64[0]);
    __src = 0uLL;
    if ((v59 & 1) == 0)
    {
      v60 = operator new(v57);
      __src.n128_u64[0] = (unint64_t)v60;
      bzero(v60, v57);
      __src.n128_u64[1] = (unint64_t)v60 + v57;
    }
    std::deque<std::valarray<BOOL>>::push_back(v1031, &__src);
    if (__src.n128_u64[0])
      operator delete((void *)__src.n128_u64[0]);
    __src = 0uLL;
    if ((v59 & 1) == 0)
    {
      v61 = operator new(v57);
      __src.n128_u64[0] = (unint64_t)v61;
      bzero(v61, v57);
      __src.n128_u64[1] = (unint64_t)v61 + v57;
    }
    std::deque<std::valarray<BOOL>>::push_back((_QWORD *)(a1 + 152), &__src);
    if (__src.n128_u64[0])
      operator delete((void *)__src.n128_u64[0]);
  }
  if (v42 == 2 && *(_BYTE *)(a1 + 1048))
  {
    v62 = (unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 592)
                                         + (((unint64_t)(*(_QWORD *)(a1 + 616) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(a1 + 616) + 1));
    v64 = *v62;
    v63 = v62[1];
    v65 = *(_QWORD *)(a1 + 712) + 1;
    v66 = *(_QWORD *)(*(_QWORD *)(a1 + 688) + ((v65 >> 5) & 0x7FFFFFFFFFFFFF8));
    v67 = *(_QWORD *)(a1 + 808) + 1;
    v68 = *(_QWORD *)(*(_QWORD *)(a1 + 784) + ((v67 >> 5) & 0x7FFFFFFFFFFFFF8));
    v69 = *(_QWORD *)(a1 + 904) + 1;
    v70 = *(_QWORD *)(*(_QWORD *)(a1 + 880) + ((v69 >> 5) & 0x7FFFFFFFFFFFFF8));
    v71 = (BOOL **)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                              + (((unint64_t)(*(_QWORD *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (*(_BYTE *)(a1 + 136) + 1));
    v72 = v63 - *v62;
    v73 = *v71;
    if (v71[1] - *v71 != v72)
    {
      v1085 = *(_QWORD *)(a1 + 712) + 1;
      v1091 = *(_BYTE *)(a1 + 904) + 1;
      std::valarray<BOOL>::resize(*(_QWORD *)(*(_QWORD *)(a1 + 112)+ (((unint64_t)(*(_QWORD *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(_BYTE *)(a1 + 136) + 1), v63 - *v62);
      LOBYTE(v65) = v1085;
      LOBYTE(v69) = v1091;
      v73 = *v71;
    }
    if (v63 != v64)
    {
      v74 = *v62;
      v75 = *(unsigned __int8 **)(v66 + 16 * v65);
      v76 = *(unsigned __int8 **)(v68 + 16 * v67);
      v77 = *(unsigned __int8 **)(v70 + 16 * v69);
      do
      {
        v79 = *v74++;
        v78 = v79;
        v80 = *v75++;
        v81 = v80 | v78;
        v83 = *v76++;
        v82 = v83;
        v84 = *v77++;
        *v73++ = (v81 | v82 | v84) == 0;
        --v72;
      }
      while (v72);
    }
  }
LABEL_89:
  v41 = *(_QWORD *)(a1 + 968);
LABEL_90:
  if (!*(_BYTE *)(a1 + 1097))
    goto LABEL_524;
  if (v41)
  {
    v1036 = *(_QWORD *)(v41 + 40);
    if (v1036)
    {
      v85 = 0;
      while (1)
      {
        v86 = *(_QWORD **)(a1 + 968);
        if (v86[5] <= v85)
          std::__throw_out_of_range[abi:ne180100]("deque");
        v87 = v86[4] + v85;
        v88 = *(_QWORD *)(v86[1] + 8 * (v87 / 0x14));
        v89 = v87 % 0x14;
        v90 = v88 + 200 * (v87 % 0x14);
        v91 = *(_QWORD **)(v90 + 184);
        v1047 = (_QWORD *)(v90 + 184);
        if (!v91)
          goto LABEL_99;
        do
        {
          v92 = v91;
          v91 = (_QWORD *)*v91;
        }
        while (v91);
        if (v92 == v1047 || v92[4])
          goto LABEL_99;
        v386 = v92[5];
        if (v386 == 5)
        {
          v1049 = 1;
          v93 = 4;
          goto LABEL_100;
        }
        if (v386 == 8 || v386 == 6)
        {
          v1049 = 1;
          v93 = 8;
        }
        else
        {
LABEL_99:
          v1049 = 0;
          v93 = -1;
        }
LABEL_100:
        v1043 = v93;
        v1051 = v85;
        v94 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                    + (((*(_QWORD *)(a1 + 136) + v85) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*(_QWORD *)(a1 + 136) + v85));
        v96 = *v94;
        v95 = v94[1];
        __src = 0uLL;
        v97 = v95 - v96;
        if (v95 == v96)
        {
          v99 = 0;
        }
        else
        {
          v98 = operator new(v95 - v96);
          v99 = v98;
          v100 = 0;
          __src.n128_u64[0] = (unint64_t)v98;
          do
          {
            *((_BYTE *)v98 + v100) = *(_BYTE *)(v96 + v100) ^ 1;
            ++v100;
          }
          while (v97 != v100);
          __src.n128_u64[1] = (unint64_t)v98 + v100;
        }
        nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)v1122, (uint64_t)&__src);
        v101 = v1051;
        if (v99)
          operator delete(v99);
        if ((void *)v1123 != v1122[1])
        {
          v102 = (char *)v1122[1] + 8 * ((unint64_t)v1124 >> 11);
          v103 = (unsigned __int16 *)(*v102 + 2 * (v1124 & 0x7FF));
          v1066 = *(_QWORD *)((char *)v1122[1] + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 8) & 0xFFFFFFFFFFFFF8))
                + 2 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x7FF);
          if (v103 != (unsigned __int16 *)v1066)
          {
            v104 = v88 + 200 * v89;
            v105 = (unsigned __int16)v1051;
            v1039 = (_QWORD *)(v104 + 88);
            v1041 = (_QWORD *)(v104 + 112);
            v106 = (double)(unsigned __int16)v1051;
            while (1)
            {
              v107 = *v103;
              if (v101 == 1)
              {
                v108 = *(_QWORD **)(a1 + 968);
                if (v108[5] <= 1uLL)
                  std::__throw_out_of_range[abi:ne180100]("deque");
                v109 = v108[4] + 1;
                v110 = *(_QWORD *)(v108[1] + 8 * (v109 / 0x14));
                v111 = v109 % 0x14;
                v112 = v110 + 200 * v111;
                v115 = *(_QWORD **)(v112 + 184);
                v113 = (_QWORD *)(v112 + 184);
                v114 = v115;
                if (!v115)
                  goto LABEL_125;
                v116 = v113;
                do
                {
                  v117 = v114[4];
                  v118 = v117 >= 3;
                  if (v117 >= 3)
                    v119 = v114;
                  else
                    v119 = v114 + 1;
                  if (v118)
                    v116 = v114;
                  v114 = (_QWORD *)*v119;
                }
                while (*v119);
                if (v116 == v113 || v116[4] > 3uLL || (v120 = v116[5], v120 > 8))
LABEL_125:
                  v121 = 0.0;
                else
                  v121 = dbl_1D513B3B8[v120];
                v122 = *(_QWORD *)(*(_QWORD *)(v110 + 200 * v111 + 136)
                                 + 8 * ((*(_QWORD *)(v110 + 200 * v111 + 160) + 4) / 0x55uLL))
                     + 48 * ((*(_QWORD *)(v110 + 200 * v111 + 160) + 4) % 0x55uLL);
                v123 = *(_QWORD *)(*(_QWORD *)(v110 + 200 * v111 + 88)
                                 + (((unint64_t)(*(_QWORD *)(v110 + 200 * v111 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*(_BYTE *)(v110 + 200 * v111 + 112) + 3);
                v124 = *(_QWORD *)&v121
                     * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v122 + 8)
                                                       + (((unint64_t)(*(_QWORD *)(v122 + 32) + v107) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((*(_QWORD *)(v122 + 32) + v107) & 0x3FF));
                __src.n128_u64[0] = v123;
                __src.n128_u64[1] = v124;
                *(double *)&v1126 = v121;
                *((_QWORD *)&v1126 + 1) = 1;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1119, (uint64_t)&__src);
                v125 = *(float64x2_t *)v1119[0];
                if (v1119[1] != v1119[0])
                  v1119[1] = (char *)v1119[1] + (((char *)v1119[0] - (char *)v1119[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                v126 = *(double *)(a1 + 1120);
                v127 = vsubq_f64(v125, *((float64x2_t *)v1119[0] + 3));
                v128 = sqrt(vaddvq_f64(vmulq_f64(v127, v127)));
                operator delete(v1119[0]);
                if (v128 <= v126)
                {
                  v162 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                               + (((unint64_t)(*(_QWORD *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(_BYTE *)(a1 + 136) + 1));
                  if (!*(_BYTE *)(v162 + v107)
                    || (v163 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                     + (((unint64_t)(*(_QWORD *)(a1 + 88) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(_BYTE *)(a1 + 88) + 1)),
                        *(_BYTE *)(v163 + v107)))
                  {
                    nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, 1u, v107);
                    v163 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                 + (((unint64_t)(*(_QWORD *)(a1 + 88) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(_BYTE *)(a1 + 88) + 1));
                    v162 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                                 + (((unint64_t)(*(_QWORD *)(a1 + 136) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(_BYTE *)(a1 + 136) + 1));
                  }
                  *(_BYTE *)(v163 + v107) = 0;
                  *(_BYTE *)(v162 + v107) = 1;
                  v164 = *(_QWORD *)(a1 + 184) + 1;
                  goto LABEL_500;
                }
              }
              v129 = *(_QWORD *)(a1 + 992);
              v1086 = v107;
              if (v129 == 1)
              {
                v1054 = v103;
                v1062 = v102;
                v1110[0] = 0;
                v1110[1] = 0;
                std::valarray<double>::resize((uint64_t)v1110, 5uLL, 0.0);
                v149 = *(_QWORD **)(a1 + 968);
                if (v149[5] <= (unint64_t)(unsigned __int16)v1051)
                  std::__throw_out_of_range[abi:ne180100]("deque");
                v150 = v149[4] + (unsigned __int16)v1051;
                v151 = *(_QWORD *)(v149[1] + 8 * (v150 / 0x14));
                v152 = v150 % 0x14;
                v153 = v151 + 200 * (v150 % 0x14);
                v156 = *(_QWORD **)(v153 + 184);
                v155 = (_QWORD *)(v153 + 184);
                v154 = v156;
                if (!v156)
                  goto LABEL_156;
                v157 = v154;
                do
                {
                  v158 = v157;
                  v157 = (_QWORD *)*v157;
                }
                while (v157);
                if (v158 == v155 || v158[4] || (v159 = v158[5] - 5, v159 > 3))
                {
LABEL_156:
                  v160 = -1;
                  if (!v154)
                    goto LABEL_163;
                }
                else
                {
                  v160 = qword_1D513B398[v159];
                  if (!v154)
                    goto LABEL_163;
                }
                v165 = v154;
                do
                {
                  v166 = v165;
                  v165 = (_QWORD *)*v165;
                }
                while (v165);
                if (v166 == v155 || v166[4] || (v167 = v166[5], v167 > 8))
LABEL_163:
                  v168 = 0.0;
                else
                  v168 = dbl_1D513B3B8[v167];
                v169 = (double *)v1110[0];
                v170 = v151 + 200 * v152;
                v172 = *(_QWORD *)(v170 + 88);
                v171 = (_QWORD *)(v170 + 88);
                v1092 = v171 + 3;
                v173 = (_QWORD *)(*(_QWORD *)(v172 + ((v171[3] >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * v171[3]);
                v174 = v160 + *(_QWORD *)&v168 * v107;
                if (v174 < (uint64_t)(v173[1] - *v173) >> 3)
                  *(_QWORD *)v1110[0] = *(_QWORD *)(*v173 + 8 * v174);
                v1052 = v169;
                v1045 = v151;
                v175 = v151 + 200 * v152;
                v177 = *(_QWORD *)(v175 + 136);
                v176 = (_QWORD *)(v175 + 136);
                v178 = *(_QWORD *)(v177 + 8 * (v176[3] / 0x55uLL)) + 48 * (v176[3] % 0x55uLL);
                v179 = *(_QWORD *)(v178 + 32) + v107;
                v180 = *(_QWORD *)(*(_QWORD *)(v178 + 8) + ((v179 >> 7) & 0x1FFFFFFFFFFFFF8));
                v1069 = v152;
                if (!v154)
                  goto LABEL_176;
                v181 = v155;
                do
                {
                  v182 = v154[4];
                  v183 = v182 == 0;
                  if (v182)
                    v184 = v154;
                  else
                    v184 = v154 + 1;
                  if (!v183)
                    v181 = v154;
                  v154 = (_QWORD *)*v184;
                }
                while (*v184);
                if (v181 != v155 && v181[4] <= 1uLL)
                  v185 = v181[5];
                else
LABEL_176:
                  v185 = 9;
                v186 = (unsigned __int16 *)(v180 + 4 * (v179 & 0x3FF));
                v187 = *v186;
                v188 = v186[1];
                v1058 = v186 + 1;
                v189 = (_QWORD *)*v155;
                if (!*v155)
                  goto LABEL_189;
                v190 = v155;
                do
                {
                  v191 = v189[4];
                  v192 = v191 == 0;
                  if (v191)
                    v193 = v189;
                  else
                    v193 = v189 + 1;
                  if (!v192)
                    v190 = v189;
                  v189 = (_QWORD *)*v193;
                }
                while (*v193);
                if (v190 == v155 || v190[4] > 1uLL || (v194 = v190[5], v194 > 8))
LABEL_189:
                  v195 = 0.0;
                else
                  v195 = dbl_1D513B3B8[v194];
                __src.n128_u64[0] = *(_QWORD *)(*v171 + (((unint64_t)(*v1092 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * (*(_BYTE *)v1092 + 1);
                __src.n128_u64[1] = *(_QWORD *)&v195 * v187;
                *(_QWORD *)&v1126 = *(_QWORD *)&v195 * (v188 - v187 + 1);
                *((_QWORD *)&v1126 + 1) = 1;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1119, (uint64_t)&__src);
                if (v185 == 5)
                  v197 = 5;
                else
                  v197 = 0;
                if (!v185)
                  v197 = 4;
                if (v197)
                  v198 = (((char *)v1119[1] - (char *)v1119[0]) >> 3) / v197;
                else
                  v198 = 0;
                v202 = (_QWORD *)*v155;
                if (!*v155)
                  goto LABEL_210;
                v203 = v155;
                do
                {
                  v204 = v202[4];
                  v205 = v204 >= 4;
                  if (v204 >= 4)
                    v206 = v202;
                  else
                    v206 = v202 + 1;
                  if (v205)
                    v203 = v202;
                  v202 = (_QWORD *)*v206;
                }
                while (*v206);
                if (v203 == v155
                  || v203[4] > 4uLL
                  || ((v270 = v203[5], v304 = v270 > 8, v271 = (1 << v270) & 0x144, !v304)
                    ? (v272 = v271 == 0)
                    : (v272 = 1),
                      v272))
                {
LABEL_210:
                  v207 = 0;
                  v208 = 6;
                }
                else
                {
                  v207 = 1;
                  v208 = 5;
                }
                if ((v185 == 5 || !v185) && v207)
                {
                  v1037 = v198;
                  v209 = v176[3] + v208;
                  v210 = *(_QWORD *)(*v176 + 8 * (v209 / 0x55));
                  v211 = v1045 + 200 * v1069;
                  v213 = *(_QWORD *)(v211 + 48);
                  v212 = (size_t *)(v211 + 48);
                  v214 = v212[1] * v213;
                  v1116[0] = 0;
                  v1116[1] = 0;
                  std::valarray<unsigned char>::resize((uint64_t)v1116, v214);
                  v215 = *v186;
                  v216 = (unsigned __int16)*v1058;
                  if (v215 <= v216)
                  {
                    v217 = 0;
                    v273 = v210 + 48 * (v209 % 0x55);
                    v1076 = (_QWORD *)(v273 + 8);
                    v1081 = (_QWORD *)(v273 + 32);
                    v274 = (_QWORD *)(v1045 + 200 * v1069 + 64);
                    v218 = 0.0;
                    do
                    {
                      v275 = (unsigned __int16 *)(*(_QWORD *)(*v1076 + (((*v1081 + v215) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                + 4 * ((*v1081 + v215) & 0x3FF));
                      v276 = *v275;
                      v278 = v275[1];
                      v277 = v275 + 1;
                      if (v276 <= v278)
                      {
                        v1071 = v215;
                        do
                        {
                          v279 = (_QWORD *)*v155;
                          if (!*v155)
                            goto LABEL_297;
                          v280 = v155;
                          do
                          {
                            v281 = v279[4];
                            v282 = v281 >= 4;
                            if (v281 >= 4)
                              v283 = v279;
                            else
                              v283 = v279 + 1;
                            if (v282)
                              v280 = v279;
                            v279 = (_QWORD *)*v283;
                          }
                          while (*v283);
                          if (v280 == v155 || v280[4] > 4uLL || (v284 = v280[5], v284 > 8))
LABEL_297:
                            v285 = 0.0;
                          else
                            v285 = dbl_1D513B3B8[v284];
                          __src.n128_u64[0] = *(_QWORD *)(*v171
                                                        + (((unint64_t)(*v1092 + 4) >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * (*(_BYTE *)v1092 + 4);
                          __src.n128_u64[1] = *(_QWORD *)&v285 * v276;
                          *(double *)&v1126 = v285;
                          *((_QWORD *)&v1126 + 1) = 1;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(__p, (uint64_t)&__src);
                          *(double *)&v286 = COERCE_DOUBLE(nms::rasterizeQuadByQuantizedScoreMap<double>((double **)__p, v1116, v274, *v212, v212[1], 0, *(_BYTE *)(a1 + 1008)));
                          v217 = v287;
                          if (__p[0])
                          {
                            if (__p[1] != __p[0])
                              __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                            operator delete(__p[0]);
                          }
                          v118 = v276++ >= *v277;
                        }
                        while (!v118);
                        v218 = *(double *)&v286;
                        LOWORD(v216) = *v1058;
                        v107 = v1086;
                        v215 = v1071;
                      }
                      v118 = v215++ >= (unsigned __int16)v216;
                    }
                    while (!v118);
                  }
                  else
                  {
                    v217 = 0;
                    v218 = 0.0;
                  }
                  if (v1116[0])
                    operator delete(v1116[0]);
                  v101 = v1051;
                  v219 = v1052;
                  v220 = *v1052;
                  v1052[1] = *v1052;
                  v221 = v1052 + 1;
                  v103 = v1054;
                  v105 = (unsigned __int16)v1051;
                  if (v217)
                  {
                    v222 = v218 / (double)v217 / 255.0 * v220;
                    *v221 = v222;
                    v198 = v1037;
                    goto LABEL_311;
                  }
                  v198 = v1037;
                }
                else
                {
                  v219 = v1052;
                  v103 = v1054;
                  v220 = *v1052;
                  v1052[1] = *v1052;
                  v221 = v1052 + 1;
                  v105 = (unsigned __int16)v1051;
                }
                v217 = 0;
                LOBYTE(v196) = *(_BYTE *)(a1 + 1008);
                v222 = v220 * ((double)v196 / 255.0);
                *v221 = v222;
LABEL_311:
                v219[2] = v222;
                if (*(_BYTE *)(a1 + 1024))
                {
                  v288 = *(_QWORD *)(a1 + 1040);
                  if (v288)
                  {
                    v289 = (double)v288;
                    if ((double)v288 < (double)v198)
                      v289 = (double)v198;
                  }
                  else
                  {
                    v289 = (double)v198;
                  }
                  v222 = v222 * v289;
                  v219[2] = v222;
                }
                v219[3] = v222;
                if (*(_BYTE *)(a1 + 1009))
                {
                  v290 = *(_QWORD *)(a1 + 968);
                  if (v290)
                    v291 = (double)*(unint64_t *)(v290 + 40);
                  else
                    v291 = 0.0;
                  v222 = v222 * (1.0 - v106 / v291);
                  v219[3] = v222;
                }
                v219[4] = v222;
                if (*(_BYTE *)(a1 + 1010) && v217)
                  v219[4] = v222 * (double)v217;
                v102 = v1062;
                if (v1119[0])
                {
                  if (v1119[1] != v1119[0])
                    v1119[1] = (char *)v1119[1] + (((char *)v1119[0] - (char *)v1119[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                  operator delete(v1119[0]);
                }
                v161 = *((double *)v1110[1] - 1);
                operator delete(v219);
                goto LABEL_488;
              }
              if (!v129)
                break;
              v161 = 2.22507386e-308;
LABEL_488:
              if (v161 > *(double *)(a1 + 1000))
              {
                if (v1049)
                {
                  v376 = (_QWORD *)*v1047;
                  if (!*v1047)
                    goto LABEL_505;
                  do
                  {
                    v377 = v376;
                    v376 = (_QWORD *)*v376;
                  }
                  while (v376);
                  if (v377 == v1047 || v377[4] || (v378 = v377[5], v378 > 8))
LABEL_505:
                    v379 = 0.0;
                  else
                    v379 = dbl_1D513B3B8[v378];
                  v383 = (*v1041 >> 5) & 0x7FFFFFFFFFFFFF8;
                  v384 = v1043 + *(_QWORD *)&v379 * v107;
                  v385 = *(_QWORD *)(*(_QWORD *)(*v1039 + v383) + 16 * *v1041);
                  if (v384 < (*(_QWORD *)(*(_QWORD *)(*v1039 + v383) + 16 * *v1041 + 8) - v385) >> 3)
                    *(double *)(v385 + 8 * v384) = v161;
                }
                goto LABEL_501;
              }
              v380 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                           + (((*(_QWORD *)(a1 + 136) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(a1 + 136) + v105));
              if (!*(_BYTE *)(v380 + v107)
                || (v381 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                 + (((*(_QWORD *)(a1 + 88) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(_BYTE *)(a1 + 88) + v105)),
                    *(_BYTE *)(v381 + v107)))
              {
                nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, (unsigned __int16)v101, v107);
                v381 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                             + (((*(_QWORD *)(a1 + 88) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 88) + v105));
                v380 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                             + (((*(_QWORD *)(a1 + 136) + v105) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 136) + v105));
              }
              *(_BYTE *)(v381 + v107) = 0;
              *(_BYTE *)(v380 + v107) = 1;
              v164 = *(_QWORD *)(a1 + 184) + v105;
LABEL_500:
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + ((v164 >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * v164)
                       + v107) = 0;
LABEL_501:
              if ((unsigned __int16 *)((char *)++v103 - *v102) == (unsigned __int16 *)4096)
              {
                v382 = (unsigned __int16 *)v102[1];
                ++v102;
                v103 = v382;
              }
              if (v103 == (unsigned __int16 *)v1066)
                goto LABEL_517;
            }
            v1098 = 0;
            v1099 = 0;
            v130 = *(_QWORD **)(a1 + 968);
            if (v130[5] <= v105)
              std::__throw_out_of_range[abi:ne180100]("deque");
            v131 = v130[4] + v105;
            v132 = *(_QWORD *)(v130[1] + 8 * (v131 / 0x14));
            v133 = v131 % 0x14;
            v134 = v132 + 200 * v133;
            v137 = *(_QWORD **)(v134 + 184);
            v136 = (_QWORD *)(v134 + 184);
            v135 = v137;
            v138 = *(_QWORD *)(*(v136 - 6) + 8 * (*(v136 - 3) / 0x55uLL)) + 48 * (*(v136 - 3) % 0x55uLL);
            v139 = *(_QWORD *)(v138 + 32) + v107;
            v140 = *(_QWORD *)(*(_QWORD *)(v138 + 8) + ((v139 >> 7) & 0x1FFFFFFFFFFFFF8));
            v141 = v139 & 0x3FF;
            v142 = (unsigned __int16 *)(v140 + 4 * v141);
            v143 = v136;
            v144 = v137;
            if (v137)
            {
              do
              {
                v145 = v144[4];
                v146 = v145 == 0;
                if (v145)
                  v147 = v144;
                else
                  v147 = v144 + 1;
                if (!v146)
                  v143 = v144;
                v144 = (_QWORD *)*v147;
              }
              while (*v147);
              if (v143 == v136 || v143[4] > 1uLL)
                v148 = 9;
              else
                v148 = v143[5];
              v200 = *v142;
              v223 = *(unsigned __int16 *)(v140 + 4 * v141 + 2);
              v224 = v136;
              do
              {
                v225 = v135[4];
                v226 = v225 == 0;
                if (v225)
                  v227 = v135;
                else
                  v227 = v135 + 1;
                if (!v226)
                  v224 = v135;
                v135 = (_QWORD *)*v227;
              }
              while (*v227);
              v201 = v223 - v200;
              if (v224 == v136 || v224[4] > 1uLL)
              {
LABEL_228:
                v199 = 0;
              }
              else
              {
                switch(v224[5])
                {
                  case 0:
                  case 1:
                    v199 = 4;
                    break;
                  case 2:
                    v199 = 8;
                    break;
                  case 3:
                  case 4:
                    v199 = 2;
                    break;
                  case 5:
                    v199 = 5;
                    break;
                  case 6:
                    v199 = 9;
                    break;
                  case 7:
                    v199 = 3;
                    break;
                  case 8:
                    v199 = 14;
                    break;
                  default:
                    goto LABEL_228;
                }
              }
            }
            else
            {
              v199 = 0;
              v200 = *v142;
              v201 = v142[1] - v200;
              v148 = 9;
            }
            v228 = v132 + 200 * v133;
            v1075 = (_QWORD *)(v228 + 88);
            v1070 = (_QWORD *)(v228 + 112);
            __src.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v228 + 88)
                                          + (((unint64_t)(*(_QWORD *)(v228 + 112) + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*(_QWORD *)(v228 + 112) + 1);
            __src.n128_u64[1] = v199 * (unint64_t)v200;
            *(_QWORD *)&v1126 = v199 + (int)v199 * (uint64_t)(int)v201;
            *((_QWORD *)&v1126 + 1) = 1;
            std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1110, (uint64_t)&__src);
            v1080 = v136;
            v229 = v103;
            if (v148)
            {
              if (v148 == 5)
              {
                v230 = 5;
                goto LABEL_233;
              }
              v230 = 0;
              v232 = 0;
              v231 = (double *)v1110[0];
            }
            else
            {
              v230 = 4;
LABEL_233:
              v231 = (double *)v1110[0];
              v232 = (((char *)v1110[1] - (char *)v1110[0]) >> 3) / v230;
            }
            v1107[0] = 0;
            v1107[1] = 0;
            if (v148 == 5)
              v233 = 5;
            else
              v233 = 0;
            if (v148)
              v234 = v233;
            else
              v234 = 4;
            if (v234)
            {
              v235 = (((char *)v1110[1] - (char *)v231) >> 3) / v234;
              if (v235 >= 2)
              {
                v236 = v102;
                v237 = v235 - 1;
                if ((v235 - 1) >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v238 = (double *)operator new(8 * v237);
                v239 = v238;
                v240 = 0;
                v241 = v231 + 2;
                v1093 = v234;
                v242 = 8 * v234;
                do
                {
                  v238[v240++] = *(v241 - 2) + *v241;
                  v241 = (double *)((char *)v241 + v242);
                }
                while (v237 != v240);
                std::valarray<double>::resize((uint64_t)v1107, v237, 0.0);
                v243 = 0;
                v244 = (double *)v1107[0];
                v245 = (double *)((char *)v1110[0] + v242);
                do
                {
                  v244[v243] = *v245 - v239[v243];
                  v245 = (double *)((char *)v245 + v242);
                  ++v243;
                }
                while (v237 != v243);
                operator delete(v239);
                v231 = (double *)v1110[0];
                v102 = v236;
                v234 = v1093;
              }
            }
            __src.n128_u64[0] = (unint64_t)(v231 + 2);
            __src.n128_u64[1] = v232;
            v1059 = v232;
            *(_QWORD *)&v1126 = v230;
            std::valarray<double>::valarray(v1104, (uint64_t)&__src);
            v1063 = v102;
            v246 = (double *)v1104[0];
            v247 = (char *)v1104[1] - (char *)v1104[0];
            v103 = v229;
            if (v1104[1] == v1104[0])
            {
              v250 = 0;
              v107 = v1086;
            }
            else
            {
              v248 = v247 >> 3;
              v249 = (unsigned __int8 *)operator new(v247 >> 3);
              v107 = v1086;
              v250 = v249;
              v251 = 0;
              do
              {
                v252 = v251;
                v249[v251] = fabs(v246[v251]) <= 2.22044605e-16;
                ++v251;
              }
              while (v248 != v251);
              if (v252 != -1)
              {
                v253 = 0;
                v254 = 0;
                v255 = v252 + 1;
                v256 = (_QWORD **)v1080;
                do
                  v254 += v249[v253++];
                while (v255 != v253);
                if (v254)
                {
                  v257 = 0;
                  v258 = 0;
                  goto LABEL_470;
                }
LABEL_259:
                std::valarray<double>::resize((uint64_t)&v1098, 4uLL, 0.0);
                v259 = *v256;
                if (!*v256)
                  goto LABEL_265;
                do
                {
                  v260 = v259;
                  v259 = (_QWORD *)*v259;
                }
                while (v259);
                if (v260 == v256 || v260[4] || (v261 = v260[5], v261 > 8))
LABEL_265:
                  v262 = 0.0;
                else
                  v262 = dbl_1D513B3B8[v261];
                __src.n128_u64[0] = *(_QWORD *)(*v1075 + ((*v1070 >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * *v1070;
                __src.n128_u64[1] = *(_QWORD *)&v262 * v107;
                *(double *)&v1126 = v262;
                *((_QWORD *)&v1126 + 1) = 1;
                std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v1100, (uint64_t)&__src);
                v263 = v1100;
                v264 = v1101;
                if ((((char *)v1101 - (char *)v1100) & 0xFFFFFFFFFFFFFFF0) != 0x20)
                {
                  v269 = 2.22507386e-308;
                  goto LABEL_446;
                }
                v1055 = v103;
                v265 = *(_QWORD *)(a1 + 1072);
                std::valarray<double>::valarray(__p, &v1100);
                v266 = (double *)__p[0];
                v267 = (double *)__p[1];
                v1094 = v250;
                if ((((char *)__p[1] - (char *)__p[0]) & 0xFFFFFFFFFFFFFFF0) != 0x20)
                {
                  v1119[0] = 0;
                  v1119[1] = 0;
                  if (v234)
                  {
                    v268 = (((char *)v1110[1] - (char *)v1110[0]) >> 3) / v234;
                    if (v268)
                    {
                      if (v268 == 1)
                      {
                        std::valarray<double>::__assign_range((uint64_t)v1119, (_BYTE *)v1110[0], (_BYTE *)v1110[1]);
                      }
                      else
                      {
                        v292 = *(double *)v1110[0];
                        v293 = 8 * v234;
                        v294 = 1;
                        v295 = (double *)((char *)v1110[0] + 8 * v234);
                        do
                        {
                          if (*v295 < v292)
                            v292 = *v295;
                          ++v294;
                          v295 = (double *)((char *)v295 + v293);
                        }
                        while (v268 != v294);
                        v296 = *((double *)v1110[0] + 1);
                        v297 = v268 - 1;
                        v298 = (double *)((char *)v1110[0] + v293 + 8);
                        do
                        {
                          if (*v298 < v296)
                            v296 = *v298;
                          v298 = (double *)((char *)v298 + v293);
                          --v297;
                        }
                        while (v297);
                        __src.n128_u64[1] = (unint64_t)v1110;
                        *(_QWORD *)&v1126 = 0;
                        *((_QWORD *)&v1126 + 1) = (((char *)v1110[1] - (char *)v1110[0]) >> 3) / v234;
                        *(_QWORD *)&v1127 = v234;
                        *((_QWORD *)&v1127 + 1) = v1110;
                        v1128 = 2;
                        v1129 = *((_QWORD *)&v1126 + 1);
                        v1130 = v234;
                        v299 = std::__val_expr<std::_BinaryOp<std::plus<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::max[abi:ne180100]((uint64_t)&__src);
                        __src.n128_u64[1] = (unint64_t)v1110;
                        *(_QWORD *)&v1126 = 1;
                        *((_QWORD *)&v1126 + 1) = v268;
                        *(_QWORD *)&v1127 = v234;
                        *((_QWORD *)&v1127 + 1) = v1110;
                        v1128 = 3;
                        v1129 = v268;
                        v1130 = v234;
                        v300 = std::__val_expr<std::_BinaryOp<std::plus<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::max[abi:ne180100]((uint64_t)&__src);
                        __src.n128_f64[0] = v292;
                        __src.n128_f64[1] = v296;
                        *(double *)&v1126 = v299 - v292;
                        *((double *)&v1126 + 1) = v300 - v296;
                        std::valarray<double>::__assign_range((uint64_t)v1119, &__src, &v1127);
                      }
                    }
                  }
                  if (__p[0])
                  {
                    if (__p[1] != __p[0])
                      __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                    operator delete(__p[0]);
                  }
                  v266 = (double *)v1119[0];
                  v267 = (double *)v1119[1];
                  __p[0] = v1119[0];
                  __p[1] = v1119[1];
                }
                v302 = v266[2];
                v301 = v266[3];
                v303 = fabs(v301);
                v304 = fabs(v302) > 2.22044605e-16 && v303 > 2.22044605e-16;
                if (!v304)
                {
                  v269 = 2.22507386e-308;
                  goto LABEL_442;
                }
                v306 = *v266;
                v305 = v266[1];
                v307 = (double *)v1110[0];
                v308 = (char *)v1110[1] - (char *)v1110[0];
                if (v234)
                  v309 = (((char *)v1110[1] - (char *)v1110[0]) >> 3) / v234;
                else
                  v309 = 0;
                v1119[0] = 0;
                v1119[1] = 0;
                if (v1110[1] == v1110[0])
                {
                  v310 = 0;
                  if (!v309)
                    goto LABEL_363;
                }
                else
                {
                  if ((v308 & 0x8000000000000000) != 0)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v310 = (double *)operator new((char *)v1110[1] - (char *)v1110[0]);
                  v1119[0] = v310;
                  bzero(v310, v308);
                  v1119[1] = (char *)v310 + v308;
                  if (!v309)
                  {
LABEL_363:
                    __src.n128_u64[0] = (unint64_t)v310;
                    __src.n128_u64[1] = v309;
                    *(_QWORD *)&v1126 = 4;
                    std::valarray<double>::valarray(v1116, (uint64_t)&__src);
                    v318 = v1116[0];
                    if (v309)
                    {
                      v319 = (double *)((char *)v1119[0] + 16);
                      v320 = (double *)((char *)v1110[0] + 16);
                      v321 = (double *)v1116[0];
                      v322 = v309;
                      do
                      {
                        v323 = *v321++;
                        *v319 = v323 + *v320 / v302;
                        v319 += 4;
                        v320 += v234;
                        --v322;
                      }
                      while (v322);
LABEL_368:
                      if (v1116[1] != v318)
                        v1116[1] = (char *)v1116[1] + ((v318 - (char *)v1116[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      operator delete(v318);
                    }
                    else if (v1116[0])
                    {
                      goto LABEL_368;
                    }
                    __src.n128_u64[0] = (unint64_t)v1119[0] + 8;
                    __src.n128_u64[1] = v309;
                    *(_QWORD *)&v1126 = 4;
                    std::valarray<double>::valarray(v1116, (uint64_t)&__src);
                    v324 = v1116[0];
                    if (v309)
                    {
                      v325 = (double *)((char *)v1119[0] + 24);
                      v326 = (double *)((char *)v1110[0] + 24);
                      v327 = (double *)v1116[0];
                      v328 = v309;
                      do
                      {
                        v329 = *v327++;
                        *v325 = v329 + *v326 / v301;
                        v325 += 4;
                        v326 += v234;
                        --v328;
                      }
                      while (v328);
LABEL_376:
                      if (v1116[1] != v324)
                        v1116[1] = (char *)v1116[1] + ((v324 - (char *)v1116[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      operator delete(v324);
                    }
                    else if (v1116[0])
                    {
                      goto LABEL_376;
                    }
                    v331 = (char *)v1119[0];
                    v330 = (double *)v1119[1];
                    v332 = (char *)v1119[0] - (char *)v1119[1];
                    if (v1119[0] == v1119[1])
                    {
                      v338 = 0;
                      v335 = 0;
                      if (v1119[0])
LABEL_388:
                        operator delete(v331);
                    }
                    else
                    {
                      v333 = (double *)v1119[0];
                      do
                      {
                        *v333 = *v333 * (double)v265;
                        ++v333;
                      }
                      while (v333 != v330);
                      if ((char *)v330 - v331 < 0)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v334 = (char *)operator new((char *)v330 - v331);
                      v335 = v334;
                      v336 = 0;
                      v337 = (unint64_t)((char *)v330 - v331) >> 3;
                      do
                      {
                        *(double *)&v334[v336] = round(*(double *)&v331[v336]);
                        v336 += 8;
                        --v337;
                      }
                      while (v337);
                      v338 = &v334[v336];
                      if (v331)
                      {
                        v1119[1] = (char *)v330 + ((v332 + 7) & 0xFFFFFFFFFFFFFFF8);
                        goto LABEL_388;
                      }
                    }
                    v1119[0] = v335;
                    v1119[1] = v338;
                    v1103 = 0;
                    nms::max<double>((uint64_t *)v1116, (double *)&v1103, (uint64_t)v1119);
                    v1102 = (double)v265;
                    nms::min<double>((uint64_t *)&__src, &v1102, (uint64_t)v1116);
                    if (v1119[0])
                      operator delete(v1119[0]);
                    *(__n128 *)v1119 = __src;
                    __src = 0uLL;
                    if (v1116[0])
                    {
                      if (v1116[1] != v1116[0])
                        v1116[1] = (char *)v1116[1] + (((char *)v1116[0] - (char *)v1116[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      operator delete(v1116[0]);
                    }
                    v339 = v265 * v265;
                    if (v265 * v265)
                    {
                      if (v339 >> 61)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v340 = 8 * v339;
                      v341 = (char *)operator new(8 * v339);
                      bzero(v341, v340);
                      v342 = &v341[v340];
                      if (v309)
                      {
LABEL_398:
                        v343 = 0;
                        v344 = 0;
                        while (1)
                        {
                          __src.n128_u64[0] = (unint64_t)v1119;
                          __src.n128_u64[1] = 4 * v343;
                          v1126 = xmmword_1D513B270;
                          std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1116, (uint64_t)&__src);
                          v345 = v309;
                          if (v344)
                            operator delete(v344);
                          v344 = (double *)v1116[0];
                          v346 = (unint64_t)*((double *)v1116[0] + 1);
                          v347 = (unint64_t)*((double *)v1116[0] + 3);
                          if (v346 < v347)
                            break;
LABEL_414:
                          ++v343;
                          v309 = v345;
                          v146 = v343 == v345;
                          v250 = v1094;
                          if (v146)
                            goto LABEL_419;
                        }
                        while (2)
                        {
                          v348 = *v344;
                          v349 = v344[2] - *v344;
                          if ((unint64_t)v349 >= v265)
                            v350 = v265;
                          else
                            v350 = (unint64_t)v349;
                          __src = 0uLL;
                          std::valarray<unsigned long>::resize();
                          v351 = (void *)__src.n128_u64[0];
                          if (v350)
                          {
                            v352 = &v341[8 * (unint64_t)(v348 + (double)(v346 * v265))];
                            v353 = (uint64_t *)__src.n128_u64[0];
                            do
                            {
                              v354 = *v353++;
                              *(_QWORD *)v352 += v354;
                              v352 += 8;
                              --v350;
                            }
                            while (v350);
LABEL_410:
                            if ((void *)__src.n128_u64[1] != v351)
                              __src.n128_u64[1] += ((unint64_t)v351 - __src.n128_u64[1] + 7) & 0xFFFFFFFFFFFFFFF8;
                            operator delete(v351);
                          }
                          else if (__src.n128_u64[0])
                          {
                            goto LABEL_410;
                          }
                          if (++v346 == v347)
                            goto LABEL_414;
                          continue;
                        }
                      }
                    }
                    else
                    {
                      v342 = 0;
                      v341 = 0;
                      if (v309)
                        goto LABEL_398;
                    }
                    v344 = 0;
LABEL_419:
                    if (v341 == v342)
                    {
                      v365 = 0.0;
                      if (v344)
                        goto LABEL_433;
                    }
                    else
                    {
                      v355 = 0;
                      v356 = v341;
                      do
                      {
                        v357 = *(_QWORD *)v356;
                        v356 += 8;
                        if (v357)
                          ++v355;
                      }
                      while (v356 != v342);
                      v358 = 0;
                      v359 = v341;
                      do
                      {
                        v360 = *(_QWORD *)v359;
                        v359 += 8;
                        if (v360 == 1)
                          ++v358;
                      }
                      while (v359 != v342);
                      v361 = 0;
                      v362 = (unint64_t *)v341;
                      do
                      {
                        v364 = *v362++;
                        v363 = v364;
                        if (v364 <= 1)
                          v363 = 0;
                        v361 += v363;
                      }
                      while (v362 != (unint64_t *)v342);
                      v365 = (double)(unint64_t)(2 * v355 - v358 - v361);
                      if (v344)
LABEL_433:
                        operator delete(v344);
                    }
                    if (v341)
                      operator delete(v341);
                    v107 = v1086;
                    if (v1119[0])
                    {
                      if (v1119[1] != v1119[0])
                        v1119[1] = (char *)v1119[1] + (((char *)v1119[0] - (char *)v1119[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      operator delete(v1119[0]);
                    }
                    v269 = v365 / (double)(unint64_t)((v342 - v341) >> 3);
                    v266 = (double *)__p[0];
                    if (__p[0])
                    {
                      v267 = (double *)__p[1];
LABEL_442:
                      v103 = v1055;
                      if (v267 != v266)
                        __p[1] = (char *)v267 + (((char *)v266 - (char *)v267 + 7) & 0xFFFFFFFFFFFFFFF8);
                      operator delete(v266);
                    }
                    else
                    {
                      v103 = v1055;
                    }
                    v263 = v1100;
                    v264 = v1101;
LABEL_446:
                    v366 = (double *)v1098;
                    *(double *)v1098 = v269;
                    if (v263)
                    {
                      if (v264 != v263)
                        v1101 = (uint64_t *)((char *)v264 + (((char *)v263 - (char *)v264 + 7) & 0xFFFFFFFFFFFFFFF8));
                      operator delete(v263);
                    }
                    v367 = *v366;
                    v368 = *(unsigned __int8 *)(a1 + 1024);
                    v366[1] = *v366;
                    if (v368)
                    {
                      v369 = *(_QWORD *)(a1 + 1032);
                      v370 = (double)v1059;
                      if (v369 && v370 >= (double)v369)
                        v370 = (double)v369;
                      v367 = v367 * v370;
                      v366[1] = v367;
                    }
                    v366[2] = v367;
                    if (*(_BYTE *)(a1 + 1009))
                    {
                      v371 = *(_QWORD *)(a1 + 968);
                      if (v371)
                        v371 = *(_QWORD *)(v371 + 40);
                      v367 = v367 * (1.0 - v106 / (double)v371);
                      v366[2] = v367;
                    }
                    v366[3] = v367;
                    if (*(_BYTE *)(a1 + 1010))
                    {
                      v372 = (_QWORD *)*v1080;
                      if (!*v1080)
                        goto LABEL_466;
                      do
                      {
                        v373 = v372;
                        v372 = (_QWORD *)*v372;
                      }
                      while (v372);
                      if (v373 == v1080 || v373[4] || (v374 = v373[5], v374 > 8))
LABEL_466:
                        v375 = 0.0;
                      else
                        v375 = dbl_1D513B3B8[v374];
                      __src.n128_u64[0] = *(_QWORD *)(*v1075 + ((*v1070 >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *v1070;
                      __src.n128_u64[1] = *(_QWORD *)&v375 * v107;
                      *(double *)&v1126 = v375;
                      *((_QWORD *)&v1126 + 1) = 1;
                      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v1119, (uint64_t)&__src);
                      v257 = v1119[0];
                      v366[3] = v366[3] * (*((double *)v1119[0] + 2) * *((double *)v1119[0] + 3));
                    }
                    else
                    {
                      v257 = 0;
                    }
                    v258 = 1;
                    if (v250)
LABEL_470:
                      operator delete(v250);
                    v102 = v1063;
                    if (v1104[0])
                    {
                      if (v1104[1] != v1104[0])
                        v1104[1] = (char *)v1104[1] + (((char *)v1104[0] - (char *)v1104[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      operator delete(v1104[0]);
                    }
                    if (v1107[0])
                      operator delete(v1107[0]);
                    if (v1110[0])
                    {
                      if (v1110[1] != v1110[0])
                        v1110[1] = (char *)v1110[1] + (((char *)v1110[0] - (char *)v1110[1] + 7) & 0xFFFFFFFFFFFFFFF8);
                      operator delete(v1110[0]);
                    }
                    if (v258)
                    {
                      v161 = *(double *)(v1099 - 8);
                      goto LABEL_484;
                    }
                    v161 = 2.22507386e-308;
                    if (v1098)
LABEL_484:
                      operator delete(v1098);
                    v105 = (unsigned __int16)v1051;
                    if (v257)
                      operator delete(v257);
                    v101 = v1051;
                    goto LABEL_488;
                  }
                }
                v311 = 8 * v234;
                v312 = v307;
                v313 = v309;
                v314 = v310;
                do
                {
                  *v314 = (*v312 - v306) / v302;
                  v314 += 4;
                  v312 = (double *)((char *)v312 + v311);
                  --v313;
                }
                while (v313);
                v315 = v310 + 1;
                v316 = v307 + 1;
                v317 = v309;
                do
                {
                  *v315 = (*v316 - v305) / v301;
                  v315 += 4;
                  v316 = (double *)((char *)v316 + v311);
                  --v317;
                }
                while (v317);
                goto LABEL_363;
              }
            }
            v256 = (_QWORD **)v1080;
            goto LABEL_259;
          }
        }
LABEL_517:
        std::deque<unsigned short>::~deque[abi:ne180100](v1122);
        v85 = v101 + 1;
        if (v85 == v1036)
        {
          v41 = *(_QWORD *)(a1 + 968);
          break;
        }
      }
    }
LABEL_524:
    v1046 = (_BYTE *)(a1 + 1098);
    if (*(_BYTE *)(a1 + 1098))
    {
      if (v41)
      {
        v1044 = *(_QWORD *)(v41 + 40);
        if (v1044)
        {
          v387 = 0;
          v1033 = 0;
          while (1)
          {
            v388 = *(_QWORD **)(a1 + 968);
            if (v388[5] <= v387)
              std::__throw_out_of_range[abi:ne180100]("deque");
            v389 = v388[4] + v387;
            v390 = *(_QWORD *)(v388[1] + 8 * (v389 / 0x14));
            v391 = v389 % 0x14;
            v392 = v390 + 200 * (v389 % 0x14);
            v393 = *(_QWORD **)(v392 + 184);
            v1050 = (_QWORD *)(v392 + 184);
            if (!v393)
              goto LABEL_535;
            do
            {
              v394 = v393;
              v393 = (_QWORD *)*v393;
            }
            while (v393);
            if (v394 == v1050 || v394[4] || (v395 = v394[5] - 5, v395 > 3))
LABEL_535:
              v396 = -1;
            else
              v396 = qword_1D513B398[v395];
            v1048 = v396;
            v397 = (unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 592)
                                                  + (((*(_QWORD *)(a1 + 616) + v387) >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * (*(_BYTE *)(a1 + 616) + v387));
            LOBYTE(v1116[0]) = 0;
            v398 = v387;
            std::__val_expr<std::_BinaryOp<std::greater<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(v1119, *v397, v397[1], (unsigned __int8 *)v1116);
            v1038 = v398;
            std::__val_expr<std::_BinaryOp<std::bit_and<BOOL>,std::valarray<BOOL>,std::__val_expr<std::_UnaryOp<std::logical_not<BOOL>,std::valarray<BOOL> const&>>>>::operator std::valarray<BOOL>(v1122, (char *)v1119[0], (_BYTE *)v1119[1], (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + (((*(_QWORD *)(a1 + 136) + v398) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(_BYTE *)(a1 + 136) + v398)));
            nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&__src, (uint64_t)v1122);
            if (v1122[0])
            {
              if (v1122[1] != v1122[0])
                v1122[1] = v1122[0];
              operator delete(v1122[0]);
              v1122[1] = 0;
              v1122[0] = 0;
            }
            if (v1119[0])
            {
              if (v1119[1] != v1119[0])
                v1119[1] = v1119[0];
              operator delete(v1119[0]);
            }
            v1123 = 0u;
            v1124 = 0u;
            *(_OWORD *)v1122 = 0u;
            LODWORD(v1119[0]) = 0;
            if ((_QWORD)v1126 != __src.n128_u64[1])
            {
              v399 = (_QWORD *)(__src.n128_u64[1] + 8 * ((unint64_t)v1127 >> 11));
              v400 = (unsigned __int16 *)(*v399 + 2 * (v1127 & 0x7FF));
              v1032 = *(_QWORD *)(__src.n128_u64[1]
                                + (((*((_QWORD *)&v1127 + 1) + (_QWORD)v1127) >> 8) & 0xFFFFFFFFFFFFF8))
                    + 2 * ((*((_QWORD *)&v1127 + 1) + v1127) & 0x7FF);
              if (v400 != (unsigned __int16 *)v1032)
                break;
            }
LABEL_655:
            std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1122);
            std::deque<unsigned short>::~deque[abi:ne180100](&__src);
            v387 = ++v1033;
            if (v1044 <= v1033)
            {
              v41 = *(_QWORD *)(a1 + 968);
              goto LABEL_658;
            }
          }
          v401 = (_QWORD *)(v390 + 200 * v391);
          v1040 = v401 + 11;
          v1042 = v401 + 14;
          v1077 = v401 + 17;
          v1082 = v401 + 20;
          v402 = 0.0;
          v403 = 0.0;
          while (2)
          {
            v1053 = *v400;
            v404 = (void **)v1122[1];
            v405 = (void **)v1123;
            *((_QWORD *)&v1124 + 1) = 0;
            v406 = v1123 - (unint64_t)v1122[1];
            if ((unint64_t)v1123 - (unint64_t)v1122[1] >= 0x11)
            {
              do
              {
                operator delete(*v404);
                v405 = (void **)v1123;
                v404 = (void **)((char *)v1122[1] + 8);
                v1122[1] = v404;
                v406 = v1123 - (_QWORD)v404;
              }
              while ((_QWORD)v1123 - (_QWORD)v404 > 0x10uLL);
            }
            v407 = v406 >> 3;
            if (v407 == 1)
            {
              v408 = 512;
LABEL_553:
              *(_QWORD *)&v1124 = v408;
            }
            else if (v407 == 2)
            {
              v408 = 1024;
              goto LABEL_553;
            }
            v409 = (_QWORD *)*v1050;
            if (!*v1050)
              goto LABEL_560;
            do
            {
              v410 = v409;
              v409 = (_QWORD *)*v409;
            }
            while (v409);
            if (v410 == v1050 || v410[4] || (v411 = v410[5], v411 > 8))
LABEL_560:
              v412 = 0.0;
            else
              v412 = dbl_1D513B3B8[v411];
            v1034 = v400;
            v1035 = v399;
            v413 = v1048 + *(_QWORD *)&v412 * v1053;
            v414 = *(_QWORD *)(*(_QWORD *)(*v1040 + ((*v1042 >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * *v1042);
            if (v413 < (*(_QWORD *)(*(_QWORD *)(*v1040 + ((*v1042 >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * *v1042
                                   + 8)
                       - v414) >> 3)
              v402 = *(double *)(v414 + 8 * v413);
            LOWORD(v1119[0]) = v1033;
            v1072 = v1053;
            v415 = v1033;
            v1067 = v1033;
            v416 = v1033;
            WORD1(v1119[0]) = v1053;
            v1095 = v1033;
            LOWORD(v1116[0]) = v1033;
            v1087 = v1053;
            v417 = v1033;
            if (v1044 > v1033)
            {
              while (1)
              {
                v418 = *(_QWORD **)(a1 + 968);
                if (v418[5] <= v417)
                  std::__throw_out_of_range[abi:ne180100]("deque");
                v419 = v418[4] + v417;
                v420 = *(_QWORD *)(v418[1] + 8 * (v419 / 0x14));
                v421 = v419 % 0x14;
                v422 = v420 + 200 * v421;
                v425 = *(_QWORD **)(v422 + 184);
                v424 = (_QWORD **)(v422 + 184);
                v423 = v425;
                if (v425)
                {
                  do
                  {
                    v426 = v423;
                    v423 = (_QWORD *)*v423;
                  }
                  while (v423);
                  if (v426 == v424 || v426[4] || (v427 = v426[5] - 5, v427 > 3))
                    v428 = -1;
                  else
                    v428 = qword_1D513B398[v427];
                  v1064 = v428;
                  v429 = v1038;
                }
                else
                {
                  v1064 = -1;
                  v429 = v1038;
                }
                v430 = *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * ((*(_QWORD *)(a1 + 664) + v429) / 0x55))
                     + 48 * ((*(_QWORD *)(a1 + 664) + v429) % 0x55);
                v431 = *(_QWORD *)(v430 + 32) + v417;
                v432 = *(_QWORD *)(*(_QWORD *)(v430 + 8) + 8 * (v431 / 0x55));
                if (*(_QWORD *)(v432 + 48 * (v431 % 0x55) + 40))
                {
                  v433 = v432 + 48 * (v431 % 0x55);
                  v434 = *(_QWORD *)(v433 + 32) + v1053;
                  v435 = *(_QWORD *)(*(_QWORD *)(v433 + 8) + 8 * (v434 / 0x55));
                  v436 = v434 % 0x55;
                  v437 = (_QWORD *)(v435 + 48 * v436);
                  v438 = v437[1];
                  if (v437[2] != v438)
                  {
                    v439 = v437[4];
                    v440 = (_QWORD *)(v438 + 8 * (v439 >> 11));
                    v441 = (_WORD *)(*v440 + 2 * (v439 & 0x7FF));
                    v1056 = (_QWORD *)(v435 + 48 * v436 + 40);
                    v442 = *(_QWORD *)(v438 + (((*v1056 + v439) >> 8) & 0xFFFFFFFFFFFFF8))
                         + 2 * ((*v1056 + v439) & 0x7FF);
                    if (v441 != (_WORD *)v442)
                      break;
                  }
                }
LABEL_639:
                LOWORD(v1116[0]) = ++v416;
                v417 = v416;
                if (v1044 <= v416)
                {
                  v404 = (void **)v1122[1];
                  v405 = (void **)v1123;
                  v415 = v1067;
                  goto LABEL_641;
                }
              }
              v443 = (_QWORD *)(v420 + 200 * v421);
              v444 = v443 + 20;
              v445 = v443 + 17;
              v1057 = v443 + 11;
              v1060 = v443 + 14;
              v446 = v1087;
              while (2)
              {
                LOWORD(__p[0]) = 0;
                v447 = (unsigned __int16)*v441;
                LOWORD(__p[0]) = *v441;
                v448 = *(_QWORD *)(a1 + 1104);
                if (v448 < 2)
                  goto LABEL_583;
                v449 = *(_QWORD *)(*v1077 + 8 * (*v1082 / 0x55uLL));
                v450 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v449 + 48 * (*v1082 % 0x55uLL) + 8)
                                                      + (((*(_QWORD *)(v449 + 48 * (*v1082 % 0x55uLL) + 32)
                                                         + (unint64_t)v446) >> 7) & 0x1FFFFFFFFFFFFF8))
                                          + 4 * ((*(_QWORD *)(v449 + 48 * (*v1082 % 0x55uLL) + 32) + v446) & 0x3FFLL));
                v451 = v450[1] - (unint64_t)*v450 + 1;
                v452 = *(_QWORD *)(*v445 + 8 * (*v444 / 0x55uLL)) + 48 * (*v444 % 0x55uLL);
                v453 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v452 + 8)
                                                      + (((unint64_t)(*(_QWORD *)(v452 + 32) + v447) >> 7) & 0x1FFFFFFFFFFFFF8))
                                          + 4 * ((*(_QWORD *)(v452 + 32) + v447) & 0x3FF));
                v454 = v453[1] - (unint64_t)*v453;
                v455 = v454 + 1;
                v456 = v451 <= v454 + 1 ? v454 + 1 : v451;
                if (v456 <= v448)
                {
                  if (v451 >= v455)
                  {
                    if (v451 <= v455)
                      goto LABEL_583;
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(v1122, v1119);
                    if (v402 < v403)
                      v402 = v403;
                    v470 = *v424;
                    if (!*v424)
                      goto LABEL_627;
                    do
                    {
                      v471 = v470;
                      v470 = (_QWORD *)*v470;
                    }
                    while (v470);
                    if (v471 == v424 || v471[4] || (v472 = v471[5], v472 > 8))
LABEL_627:
                      v473 = 0.0;
                    else
                      v473 = dbl_1D513B3B8[v472];
                    v480 = (*v1060 >> 5) & 0x7FFFFFFFFFFFFF8;
                    v481 = v1048 + *(_QWORD *)&v473 * v447;
                    v482 = *(_QWORD *)(*(_QWORD *)(*v1057 + v480) + 16 * *v1060);
                    if (v481 < (*(_QWORD *)(*(_QWORD *)(*v1057 + v480) + 16 * *v1060 + 8) - v482) >> 3)
                      *(double *)(v482 + 8 * v481) = v402;
                    v1072 = v447;
                    LOWORD(v1119[0]) = v416;
                    WORD1(v1119[0]) = v447;
                    v1067 = v416;
                    v1095 = v416;
                    v1087 = v447;
                    v446 = v447;
                  }
                  else
                  {
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v1122, v1116, __p);
                    if (v402 < v403)
                      v402 = v403;
                    v463 = (_QWORD *)*v1050;
                    if (!*v1050)
                      goto LABEL_616;
                    do
                    {
                      v464 = v463;
                      v463 = (_QWORD *)*v463;
                    }
                    while (v463);
                    if (v464 == v1050 || v464[4] || (v465 = v464[5], v465 > 8))
LABEL_616:
                      v466 = 0.0;
                    else
                      v466 = dbl_1D513B3B8[v465];
                    v474 = v1048 + *(_QWORD *)&v466 * v1053;
                    v475 = *(_QWORD *)(*(_QWORD *)(*v1040 + ((*v1042 >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * *v1042);
                    if (v474 < (*(_QWORD *)(*(_QWORD *)(*v1040 + ((*v1042 >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * *v1042
                                           + 8)
                               - v475) >> 3)
                      *(double *)(v475 + 8 * v474) = v402;
                  }
                }
                else
                {
LABEL_583:
                  v457 = 0.0;
                  if (!*(_BYTE *)(a1 + 1113))
                  {
                    if (*(_BYTE *)(a1 + 1112) && (*v1056 == 1 ? (v458 = v1033 + v416 == 1) : (v458 = 0), v458))
                    {
                      if (!nms::PyramidNMS<unsigned short,double,unsigned char>::isQuadSizeEqualOrLarger(*(_QWORD **)(a1 + 968), v1095, v446, v416, v447))
                      {
                        v476 = *v424;
                        if (!*v424)
                          goto LABEL_631;
                        do
                        {
                          v477 = v476;
                          v476 = (_QWORD *)*v476;
                        }
                        while (v476);
                        if (v477 == v424 || v477[4] || (v478 = v477[5], v478 > 8))
LABEL_631:
                          v479 = 0.0;
                        else
                          v479 = dbl_1D513B3B8[v478];
                        v483 = (*v1060 >> 5) & 0x7FFFFFFFFFFFFF8;
                        v468 = v1064 + *(_QWORD *)&v479 * v447;
                        v469 = *(_QWORD *)(*(_QWORD *)(*v1057 + v483) + 16 * *v1060);
                        v402 = 0.0;
                        v457 = v403;
                        if (v468 < (*(_QWORD *)(*(_QWORD *)(*v1057 + v483) + 16 * *v1060 + 8) - v469) >> 3)
LABEL_606:
                          v457 = *(double *)(v469 + 8 * v468);
                      }
                    }
                    else
                    {
                      v459 = *v424;
                      if (!*v424)
                        goto LABEL_604;
                      do
                      {
                        v460 = v459;
                        v459 = (_QWORD *)*v459;
                      }
                      while (v459);
                      if (v460 == v424 || v460[4] || (v461 = v460[5], v461 > 8))
LABEL_604:
                        v462 = 0.0;
                      else
                        v462 = dbl_1D513B3B8[v461];
                      v467 = (*v1060 >> 5) & 0x7FFFFFFFFFFFFF8;
                      v468 = v1064 + *(_QWORD *)&v462 * v447;
                      v469 = *(_QWORD *)(*(_QWORD *)(*v1057 + v467) + 16 * *v1060);
                      if (v468 < (*(_QWORD *)(*(_QWORD *)(*v1057 + v467) + 16 * *v1060 + 8) - v469) >> 3)
                        goto LABEL_606;
                      v457 = v403;
                    }
                  }
                  if (v457 <= v402)
                  {
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v1122, v1116, __p);
                    v403 = v457;
                  }
                  else
                  {
                    std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(v1122, v1119);
                    LOWORD(v1119[0]) = v416;
                    v1072 = v447;
                    v1067 = v416;
                    v1095 = v416;
                    WORD1(v1119[0]) = v447;
                    v1087 = v447;
                    v446 = v447;
                    v403 = v457;
                    v402 = v457;
                  }
                }
                if ((_WORD *)((char *)++v441 - *v440) == (_WORD *)4096)
                {
                  v484 = (_WORD *)v440[1];
                  ++v440;
                  v441 = v484;
                }
                if (v441 == (_WORD *)v442)
                  goto LABEL_639;
                continue;
              }
            }
LABEL_641:
            if (v405 == v404)
            {
              v489 = *(_QWORD *)(a1 + 136);
              v490 = *(_QWORD *)(a1 + 112);
            }
            else
            {
              v485 = &v404[(unint64_t)v1124 >> 10];
              v486 = (char *)*v485;
              v487 = (unsigned __int16 *)((char *)*v485 + 4 * (v1124 & 0x3FF));
              v488 = *(uint64_t *)((char *)v404 + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x3FF);
              v489 = *(_QWORD *)(a1 + 136);
              v490 = *(_QWORD *)(a1 + 112);
              while (v487 != (unsigned __int16 *)v488)
              {
                v491 = *v487;
                v492 = v487[1];
                v493 = *(_QWORD *)(*(_QWORD *)(v490 + (((unint64_t)(v489 + v491) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v489 + v491));
                if (!*(_BYTE *)(v493 + v492)
                  || (v494 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                   + (((unint64_t)(*(_QWORD *)(a1 + 88) + v491) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 88) + v491)),
                      *(_BYTE *)(v494 + v492)))
                {
                  nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, *v487, v487[1]);
                  v489 = *(_QWORD *)(a1 + 136);
                  v490 = *(_QWORD *)(a1 + 112);
                  v494 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                               + (((unint64_t)(*(_QWORD *)(a1 + 88) + v491) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(_BYTE *)(a1 + 88) + v491));
                  v493 = *(_QWORD *)(*(_QWORD *)(v490 + (((unint64_t)(v489 + v491) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v489 + v491));
                  v486 = (char *)*v485;
                }
                *(_BYTE *)(v494 + v492) = 0;
                *(_BYTE *)(v493 + v492) = 1;
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                 + (((unint64_t)(*(_QWORD *)(a1 + 184) + v491) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(_BYTE *)(a1 + 184) + v491))
                         + v492) = 0;
                v487 += 2;
                if ((char *)v487 - v486 == 4096)
                {
                  v495 = (unsigned __int16 *)v485[1];
                  ++v485;
                  v486 = (char *)v495;
                  v487 = v495;
                }
              }
            }
            v496 = *(_QWORD *)(*(_QWORD *)(v490 + (((v489 + (unint64_t)v415) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v489 + v415));
            if (!(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 688)
                                                              + (((*(_QWORD *)(a1 + 712) + (unint64_t)v415) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (*(_BYTE *)(a1 + 712) + v415))
                                      + v1072) | *(unsigned __int8 *)(v496 + v1072) | *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 784) + (((*(_QWORD *)(a1 + 808) + (unint64_t)v415) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (*(_BYTE *)(a1 + 808) + v415)) + v1072) | *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880) + (((*(_QWORD *)(a1 + 904) + (unint64_t)v415) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (*(_BYTE *)(a1 + 904) + v415)) + v1072)))
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                               + (((*(_QWORD *)(a1 + 88) + (unint64_t)v415) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(_BYTE *)(a1 + 88) + v415))
                       + v1072) = 1;
              *(_BYTE *)(v496 + v1072) = 0;
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                               + (((*(_QWORD *)(a1 + 184) + (unint64_t)v415) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(_BYTE *)(a1 + 184) + v415))
                       + v1072) = 0;
            }
            v399 = v1035;
            v400 = v1034 + 1;
            if ((unsigned __int16 *)((char *)v1034 - *v1035 + 2) == (unsigned __int16 *)4096)
            {
              v399 = v1035 + 1;
              v400 = (unsigned __int16 *)v1035[1];
            }
            if (v400 == (unsigned __int16 *)v1032)
              goto LABEL_655;
            continue;
          }
        }
      }
    }
  }
  else
  {
    v1046 = (_BYTE *)(a1 + 1098);
  }
LABEL_658:
  if (*(_BYTE *)(a1 + 1099))
  {
    v1126 = 0u;
    v1127 = 0u;
    __src = 0u;
    if (v41)
    {
      v497 = *(_QWORD *)(v41 + 40);
      LOWORD(__p[0]) = 0;
      if (v497)
      {
        v498 = 0;
        v499 = 0;
        do
        {
          v500 = (unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 688)
                                                + (((unint64_t)(*(_QWORD *)(a1 + 712) + v499) >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * (*(_BYTE *)(a1 + 712) + v499));
          LOBYTE(v1110[0]) = 0;
          std::__val_expr<std::_BinaryOp<std::greater<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(v1116, *v500, v500[1], (unsigned __int8 *)v1110);
          v501 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 784)
                                       + (((*(_QWORD *)(a1 + 808) + (unint64_t)v498) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(_BYTE *)(a1 + 808) + v498));
          v503 = *v501;
          v502 = v501[1];
          v504 = v502 - v503;
          if (v502 == v503)
          {
            v506 = 0;
          }
          else
          {
            v505 = operator new(v502 - v503);
            v506 = v505;
            v507 = 0;
            do
            {
              v505[v507] = *(_BYTE *)(v503 + v507) == 0;
              ++v507;
            }
            while (v504 != v507);
          }
          v508 = *(_QWORD *)(a1 + 136) + v498;
          v509 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + ((v508 >> 5) & 0x7FFFFFFFFFFFFF8));
          v1119[0] = 0;
          v1119[1] = 0;
          v510 = v1116[0];
          v511 = (char *)v1116[1] - (char *)v1116[0];
          if (v1116[1] == v1116[0])
          {
            v513 = 0;
          }
          else
          {
            v512 = (char *)operator new((char *)v1116[1] - (char *)v1116[0]);
            v513 = v512;
            v514 = 0;
            v1119[0] = v512;
            v515 = *(_QWORD *)(v509 + 16 * v508);
            do
            {
              v512[v514] = v506[v514] & v510[v514] & ~*(_BYTE *)(v515 + v514);
              ++v514;
            }
            while (v511 != v514);
            v1119[1] = &v512[v514];
          }
          nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)v1122, (uint64_t)v1119);
          if (v513)
            operator delete(v513);
          if (v506)
            operator delete(v506);
          if (v1116[0])
          {
            if (v1116[1] != v1116[0])
              v1116[1] = v1116[0];
            operator delete(v1116[0]);
          }
          if ((void *)v1123 != v1122[1])
          {
            v516 = (char *)v1122[1] + 8 * ((unint64_t)v1124 >> 11);
            v517 = (_WORD *)(*v516 + 2 * (v1124 & 0x7FF));
            v518 = *(_QWORD *)((char *)v1122[1] + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 8) & 0xFFFFFFFFFFFFF8))
                 + 2 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x7FF);
            while (v517 != (_WORD *)v518)
            {
              LOWORD(v1119[0]) = 0;
              LOWORD(v1119[0]) = *v517;
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(&__src, __p, v1119);
              if ((_WORD *)((char *)++v517 - *v516) == (_WORD *)4096)
              {
                v519 = (_WORD *)v516[1];
                ++v516;
                v517 = v519;
              }
            }
          }
          std::deque<unsigned short>::~deque[abi:ne180100](v1122);
          LOWORD(__p[0]) = ++v498;
          v499 = v498;
        }
        while (v497 > v498);
        v520 = *((_QWORD *)&v1127 + 1);
        if (*((_QWORD *)&v1127 + 1))
        {
          while (1)
          {
            v521 = (unsigned __int16 *)(*(_QWORD *)(__src.n128_u64[1]
                                                  + (((unint64_t)v1127 >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * (v1127 & 0x3FF));
            v522 = *v521;
            v523 = v521[1];
            *(_QWORD *)&v1127 = v1127 + 1;
            *((_QWORD *)&v1127 + 1) = v520 - 1;
            if ((unint64_t)v1127 >= 0x800)
            {
              operator delete(*(void **)__src.n128_u64[1]);
              __src.n128_u64[1] += 8;
              *(_QWORD *)&v1127 = v1127 - 1024;
            }
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                                   + (((unint64_t)(*(_QWORD *)(a1 + 136) + v522) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 136) + v522))
                           + v523))
              break;
LABEL_782:
            v520 = *((_QWORD *)&v1127 + 1);
            if (!*((_QWORD *)&v1127 + 1))
              goto LABEL_783;
          }
          v1123 = 0u;
          v1124 = 0u;
          *(_OWORD *)v1122 = 0u;
          nms::PyramidNMS<unsigned short,double,unsigned char>::getContainedDatums((_QWORD *)a1, v522, v523, v1122);
          v524 = (char *)v1122[1] + 8 * ((unint64_t)v1124 >> 10);
          if ((void *)v1123 == v1122[1])
          {
            v525 = 0;
            v527 = 0;
            v526 = (char *)v1122[1] + 8 * ((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 10);
          }
          else
          {
            v525 = (int *)(*(_QWORD *)v524 + 4 * (v1124 & 0x3FF));
            v526 = (char *)v1122[1] + 8 * ((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 10);
            v527 = *(_QWORD *)v526 + 4 * ((WORD4(v1124) + (_WORD)v1124) & 0x3FF);
          }
          v1120 = 0u;
          v1121 = 0u;
          *(_OWORD *)v1119 = 0u;
          if ((int *)v527 == v525)
          {
            v532 = 0;
            v531 = 0;
            v530 = 0;
          }
          else
          {
            v528 = ((v527 - *(_QWORD *)v526) >> 2) + ((v526 - v524) << 7);
            v529 = (uint64_t)v525 - *(_QWORD *)v524;
            v530 = v528 - (v529 >> 2);
            if (v528 == v529 >> 2)
            {
              v532 = 0;
              v531 = 0;
            }
            else
            {
              std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(v1119, v528 - (v529 >> 2));
              v531 = *((_QWORD *)&v1121 + 1);
              v532 = (char *)v1119[1] + 8 * (((_QWORD)v1121 + *((_QWORD *)&v1121 + 1)) >> 10);
              if ((void *)v1120 != v1119[1])
              {
                v533 = *v532 + 4 * (((_WORD)v1121 + WORD4(v1121)) & 0x3FF);
LABEL_700:
                v534 = std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v532, v533, v530);
                while (v533 != v535)
                {
                  v536 = (_DWORD *)(v532 == v534 ? v535 : *v532 + 4096);
                  if ((_DWORD *)v533 == v536)
                  {
                    v536 = (_DWORD *)v533;
                  }
                  else
                  {
                    v537 = (_DWORD *)v533;
                    do
                    {
                      v538 = *v525++;
                      *v537++ = v538;
                      if ((int *)((char *)v525 - *(_QWORD *)v524) == (int *)4096)
                      {
                        v539 = (int *)*((_QWORD *)v524 + 1);
                        v524 += 8;
                        v525 = v539;
                      }
                    }
                    while (v537 != v536);
                    v531 = *((_QWORD *)&v1121 + 1);
                  }
                  v531 += ((uint64_t)v536 - v533) >> 2;
                  *((_QWORD *)&v1121 + 1) = v531;
                  if (v532 == v534)
                    break;
                  v540 = v532[1];
                  ++v532;
                  v533 = v540;
                }
                v1117 = 0u;
                v1118 = 0u;
                v1115 = 0u;
                *(_OWORD *)v1116 = 0u;
                *(_OWORD *)__p = 0u;
                v1114 = 0u;
                nms::PyramidNMS<unsigned short,double,unsigned char>::processContainmentOfOneDatum(a1, v522, v523, v1119, __p, v1116);
                v541 = *(_QWORD *)(a1 + 136);
                v542 = *(_QWORD *)(a1 + 112);
                v543 = *(_QWORD *)(*(_QWORD *)(v542 + (((unint64_t)(v541 + v522) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v541 + v522));
                v544 = *(_QWORD *)(a1 + 184);
                v545 = *(_QWORD *)(a1 + 160);
                if (*(_BYTE *)(v543 + v523))
                {
                  v546 = 1;
LABEL_754:
                  v572 = *(_QWORD *)(*(_QWORD *)(v545 + (((unint64_t)(v544 + v522) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v544 + v522));
                  v573 = *(unsigned __int8 *)(v572 + v523) | v546;
                  v574 = *(_QWORD *)(a1 + 88);
                  v575 = *(_QWORD *)(a1 + 64);
                  v576 = *(_QWORD *)(*(_QWORD *)(v575 + (((unint64_t)(v574 + v522) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v574 + v522));
                  v573 ^= 1u;
                  *(_BYTE *)(v576 + v523) = v573;
                  if (v573)
                  {
                    *(_BYTE *)(v576 + v523) = 1;
                    *(_BYTE *)(v543 + v523) = 0;
                    *(_BYTE *)(v572 + v523) = 0;
                    if ((void *)v1123 != v1122[1])
                    {
                      v577 = (unsigned __int16 **)((char *)v1122[1] + 8 * ((unint64_t)v1124 >> 10));
                      v578 = *v577;
                      v579 = &(*v577)[2 * (v1124 & 0x3FF)];
                      v580 = *(_QWORD *)((char *)v1122[1]
                                       + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x3FF);
                      while (v579 != (unsigned __int16 *)v580)
                      {
                        v581 = *v579;
                        v582 = v579[1];
                        if ((void *)v1117 == v1116[1])
                          goto LABEL_767;
                        v583 = (unsigned __int16 **)((char *)v1116[1] + 8 * ((unint64_t)v1118 >> 10));
                        v584 = *v583;
                        v585 = &(*v583)[2 * (v1118 & 0x3FF)];
                        v586 = *(_QWORD *)((char *)v1116[1]
                                         + (((*((_QWORD *)&v1118 + 1) + (_QWORD)v1118) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((*((_QWORD *)&v1118 + 1) + v1118) & 0x3FF);
                        if (v585 != (unsigned __int16 *)v586)
                        {
                          while (__PAIR64__(v585[1], *v585) != __PAIR64__(v582, v581))
                          {
                            v585 += 2;
                            if ((char *)v585 - (char *)v584 == 4096)
                            {
                              v587 = v583[1];
                              ++v583;
                              v584 = v587;
                              v585 = v587;
                            }
                            if (v585 == (unsigned __int16 *)v586)
                              goto LABEL_767;
                          }
                        }
                        if (v585 == (unsigned __int16 *)v586)
                        {
LABEL_767:
                          v590 = *(_QWORD *)(*(_QWORD *)(v542
                                                       + (((unint64_t)(v541 + v581) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (v541 + v581));
                          if (!*(_BYTE *)(v590 + v582)
                            || (v591 = *(_QWORD *)(*(_QWORD *)(v575
                                                             + (((unint64_t)(v574 + v581) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v574 + v581)),
                                *(_BYTE *)(v591 + v582)))
                          {
                            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, *v579, v579[1]);
                            v574 = *(_QWORD *)(a1 + 88);
                            v575 = *(_QWORD *)(a1 + 64);
                            v541 = *(_QWORD *)(a1 + 136);
                            v542 = *(_QWORD *)(a1 + 112);
                            v591 = *(_QWORD *)(*(_QWORD *)(v575
                                                         + (((unint64_t)(v574 + v581) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v574 + v581));
                            v590 = *(_QWORD *)(*(_QWORD *)(v542
                                                         + (((unint64_t)(v541 + v581) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v541 + v581));
                            v544 = *(_QWORD *)(a1 + 184);
                            v545 = *(_QWORD *)(a1 + 160);
                            v578 = *v577;
                          }
                          v589 = 0;
                          *(_BYTE *)(v591 + v582) = 0;
                          *(_BYTE *)(v590 + v582) = 1;
                          v588 = v544 + v581;
                        }
                        else
                        {
                          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v575
                                                           + (((unint64_t)(v574 + v581) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v574 + v581))
                                   + v582) = 0;
                          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v542
                                                           + (((unint64_t)(v541 + v581) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v541 + v581))
                                   + v582) = 0;
                          v588 = v544 + v581;
                          v589 = 1;
                        }
                        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v545 + ((v588 >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * v588)
                                 + v582) = v589;
                        v579 += 2;
                        if ((char *)v579 - (char *)v578 == 4096)
                        {
                          v592 = v577[1];
                          ++v577;
                          v578 = v592;
                          v579 = v592;
                        }
                      }
                    }
                  }
                  else if (*(_BYTE *)(v543 + v523) && (void *)v1123 != v1122[1])
                  {
                    v593 = (char *)v1122[1] + 8 * ((unint64_t)v1124 >> 10);
                    v594 = (unsigned __int16 *)(*v593 + 4 * (v1124 & 0x3FF));
                    v595 = *(_QWORD *)((char *)v1122[1]
                                     + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x3FF);
                    while (v594 != (unsigned __int16 *)v595)
                    {
                      nms::PyramidNMS<unsigned short,double,unsigned char>::computeConstitutedIndices((uint64_t)v1110, (_QWORD *)a1, *v594, v594[1], v1031);
                      if (!*((_QWORD *)&v1112 + 1))
                        std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(&__src, v594);
                      std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1110);
                      v594 += 2;
                      if ((unsigned __int16 *)((char *)v594 - *v593) == (unsigned __int16 *)4096)
                      {
                        v596 = (unsigned __int16 *)v593[1];
                        ++v593;
                        v594 = v596;
                      }
                    }
                  }
                  std::deque<std::pair<int,int>>::~deque[abi:ne180100](__p);
                  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1116);
                  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1119);
                  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1122);
                  goto LABEL_782;
                }
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v545
                                                      + (((unint64_t)(v544 + v522) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (v544 + v522))
                              + v523))
                {
                  v546 = 0;
                  goto LABEL_754;
                }
                v546 = *(unsigned __int8 *)(a1 + 1128);
                if (!*(_BYTE *)(a1 + 1128))
                  goto LABEL_754;
                v1111 = 0u;
                v1112 = 0u;
                *(_OWORD *)v1110 = 0u;
                if (nms::PyramidNMS<unsigned short,double,unsigned char>::getOverlappingDatums((_QWORD *)a1, v522, v523, v1110, 0))
                {
                  v547 = (void **)__p[1];
                  *((_QWORD *)&v1115 + 1) = 0;
                  v548 = v1114 - (unint64_t)__p[1];
                  if ((unint64_t)v1114 - (unint64_t)__p[1] >= 0x11)
                  {
                    do
                    {
                      operator delete(*v547);
                      v547 = (void **)((char *)__p[1] + 8);
                      __p[1] = v547;
                      v548 = v1114 - (_QWORD)v547;
                    }
                    while ((_QWORD)v1114 - (_QWORD)v547 > 0x10uLL);
                  }
                  if (v548 >> 3 == 1)
                  {
                    v549 = 256;
LABEL_726:
                    *(_QWORD *)&v1115 = v549;
                  }
                  else if (v548 >> 3 == 2)
                  {
                    v549 = 512;
                    goto LABEL_726;
                  }
                  if ((void *)v1111 != v1110[1])
                  {
                    v550 = (char *)v1110[1] + 8 * ((unint64_t)v1112 >> 10);
                    v551 = (unsigned __int16 *)(*v550 + 4 * (v1112 & 0x3FF));
                    v552 = *(_QWORD *)((char *)v1110[1]
                                     + (((*((_QWORD *)&v1112 + 1) + (_QWORD)v1112) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((*((_QWORD *)&v1112 + 1) + v1112) & 0x3FF);
                    while (v551 != (unsigned __int16 *)v552)
                    {
                      v1107[0] = (void *)(*v551 ^ (16 * v551[1]));
                      std::deque<unsigned long>::push_back(__p, v1107);
                      v551 += 2;
                      if ((unsigned __int16 *)((char *)v551 - *v550) == (unsigned __int16 *)4096)
                      {
                        v553 = (unsigned __int16 *)v550[1];
                        ++v550;
                        v551 = v553;
                      }
                    }
                  }
                  v554 = (void **)v1119[1];
                  v555 = (void **)v1120;
                  *((_QWORD *)&v1121 + 1) = 0;
                  v556 = v1120 - (unint64_t)v1119[1];
                  if ((unint64_t)v1120 - (unint64_t)v1119[1] >= 0x11)
                  {
                    do
                    {
                      operator delete(*v554);
                      v555 = (void **)v1120;
                      v554 = (void **)((char *)v1119[1] + 8);
                      v1119[1] = v554;
                      v556 = v1120 - (_QWORD)v554;
                    }
                    while ((_QWORD)v1120 - (_QWORD)v554 > 0x10uLL);
                  }
                  v557 = v556 >> 3;
                  if (v557 == 1)
                  {
                    v558 = 512;
LABEL_738:
                    *(_QWORD *)&v1121 = v558;
                  }
                  else
                  {
                    if (v557 == 2)
                    {
                      v558 = 1024;
                      goto LABEL_738;
                    }
                    v558 = v1121;
                  }
                  v559 = *((_QWORD *)&v1121 + 1) + v558;
                  v560 = (char *)&v554[v559 >> 10];
                  if (v555 == v554)
                    v561 = 0;
                  else
                    v561 = *(_QWORD *)v560 + 4 * (v559 & 0x3FF);
                  v562 = (uint64_t *)((char *)v1122[1] + 8 * ((unint64_t)v1124 >> 10));
                  if ((void *)v1123 == v1122[1])
                  {
                    v563 = 0;
                    v565 = 0;
                    v564 = (uint64_t *)((char *)v1122[1] + 8 * ((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 10));
                  }
                  else
                  {
                    v563 = (int *)(*v562 + 4 * (v1124 & 0x3FF));
                    v564 = (uint64_t *)((char *)v1122[1] + 8 * ((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 10));
                    v565 = (int *)(*v564 + 4 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x3FF));
                  }
                  std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1119, v560, v561, v562, v563, v564, v565);
                  v566 = (char *)v1119[1] + 8 * (((_QWORD)v1121 + *((_QWORD *)&v1121 + 1)) >> 10);
                  if ((void *)v1120 == v1119[1])
                    v567 = 0;
                  else
                    v567 = *(_QWORD *)v566 + 4 * (((_WORD)v1121 + WORD4(v1121)) & 0x3FF);
                  v568 = (uint64_t *)((char *)v1110[1] + 8 * ((unint64_t)v1112 >> 10));
                  if ((void *)v1111 == v1110[1])
                  {
                    v569 = 0;
                    v571 = 0;
                    v570 = (uint64_t *)((char *)v1110[1] + 8 * ((*((_QWORD *)&v1112 + 1) + (_QWORD)v1112) >> 10));
                  }
                  else
                  {
                    v569 = (int *)(*v568 + 4 * (v1112 & 0x3FF));
                    v570 = (uint64_t *)((char *)v1110[1] + 8 * ((*((_QWORD *)&v1112 + 1) + (_QWORD)v1112) >> 10));
                    v571 = (int *)(*v570 + 4 * ((*((_QWORD *)&v1112 + 1) + v1112) & 0x3FF));
                  }
                  std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1119, v566, v567, v568, v569, v570, v571);
                  nms::PyramidNMS<unsigned short,double,unsigned char>::processContainmentOfOneDatum(a1, v522, v523, v1119, __p, v1116);
                }
                std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1110);
                v541 = *(_QWORD *)(a1 + 136);
                v542 = *(_QWORD *)(a1 + 112);
                v544 = *(_QWORD *)(a1 + 184);
                v545 = *(_QWORD *)(a1 + 160);
                v543 = *(_QWORD *)(*(_QWORD *)(v542 + (((unint64_t)(v541 + v522) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v541 + v522));
                v546 = *(unsigned __int8 *)(v543 + v523);
                goto LABEL_754;
              }
            }
          }
          v533 = 0;
          goto LABEL_700;
        }
      }
    }
LABEL_783:
    std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&__src);
    v41 = *(_QWORD *)(a1 + 968);
  }
  if (!*(_BYTE *)(a1 + 1100))
    goto LABEL_1000;
  if (!v41)
  {
    v597 = 0;
    v620 = 0;
    v619 = 0;
    v1126 = 0u;
    v1127 = 0u;
    __src = 0u;
LABEL_810:
    v1078 = 1;
    goto LABEL_811;
  }
  v597 = *(_QWORD *)(v41 + 40);
  v1126 = 0u;
  v1127 = 0u;
  __src = 0u;
  LOWORD(v1116[0]) = 0;
  if (!v597)
  {
    v620 = 0;
    v619 = 0;
    v41 = 0;
    goto LABEL_810;
  }
  v598 = 0;
  v599 = 0;
  do
  {
    v600 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 880)
                                 + (((unint64_t)(*(_QWORD *)(a1 + 904) + v599) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*(_BYTE *)(a1 + 904) + v599));
    v601 = *(_QWORD *)(a1 + 136) + v599;
    v602 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + ((v601 >> 5) & 0x7FFFFFFFFFFFFF8));
    v603 = *v600;
    v604 = *(_QWORD *)(a1 + 88) + v599;
    v605 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + ((v604 >> 5) & 0x7FFFFFFFFFFFFF8));
    v1119[0] = 0;
    v1119[1] = 0;
    v606 = v600[1];
    v607 = v606 - v603;
    if (v606 == v603)
    {
      v609 = 0;
    }
    else
    {
      v608 = (char *)operator new(v606 - v603);
      v609 = v608;
      v610 = 0;
      v1119[0] = v608;
      v611 = *(_QWORD *)(v602 + 16 * v601);
      v612 = *(_QWORD *)(v605 + 16 * v604);
      do
      {
        if (*(_BYTE *)(v603 + v610))
          v613 = (*(unsigned __int8 *)(v612 + v610) | *(unsigned __int8 *)(v611 + v610)) == 0;
        else
          v613 = 0;
        v614 = v613;
        v608[v610++] = v614;
      }
      while (v607 != v610);
      v1119[1] = &v608[v610];
    }
    nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)v1122, (uint64_t)v1119);
    if (v609)
      operator delete(v609);
    if ((void *)v1123 != v1122[1])
    {
      v615 = (char *)v1122[1] + 8 * ((unint64_t)v1124 >> 11);
      v616 = (_WORD *)(*v615 + 2 * (v1124 & 0x7FF));
      v617 = *(_QWORD *)((char *)v1122[1] + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 8) & 0xFFFFFFFFFFFFF8))
           + 2 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x7FF);
      while (v616 != (_WORD *)v617)
      {
        LOWORD(v1119[0]) = 0;
        LOWORD(v1119[0]) = *v616;
        std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(&__src, v1116, v1119);
        if ((_WORD *)((char *)++v616 - *v615) == (_WORD *)4096)
        {
          v618 = (_WORD *)v615[1];
          ++v615;
          v616 = v618;
        }
      }
    }
    std::deque<unsigned short>::~deque[abi:ne180100](v1122);
    LOWORD(v1116[0]) = ++v598;
    v599 = (unsigned __int16)v598;
  }
  while (v597 > (unsigned __int16)v598);
  v1078 = 0;
  v619 = v1127;
  v41 = __src.n128_u64[1];
  v620 = v1126;
LABEL_811:
  v1123 = 0u;
  v1124 = 0u;
  v1121 = 0u;
  *(_OWORD *)v1122 = 0u;
  *(_OWORD *)v1119 = 0u;
  v1120 = 0u;
  v1117 = 0u;
  v1118 = 0u;
  v1115 = 0u;
  *(_OWORD *)v1116 = 0u;
  *(_OWORD *)__p = 0u;
  v1114 = 0u;
  if (v620 == v41)
  {
    v1111 = 0uLL;
    v1112 = 0uLL;
    v1109 = 0uLL;
    *(_OWORD *)v1110 = 0uLL;
    *(_OWORD *)v1107 = 0uLL;
    v1108 = 0uLL;
    goto LABEL_999;
  }
  v621 = v619 >> 10;
  v622 = (_QWORD *)(v41 + 8 * (v619 >> 10));
  v623 = (unsigned __int16 *)(*v622 + 4 * (v619 & 0x3FF));
  v624 = *(_QWORD *)(v41 + (((*((_QWORD *)&v1127 + 1) + v619) >> 7) & 0x1FFFFFFFFFFFFF8))
       + 4 * ((*((_QWORD *)&v1127 + 1) + v619) & 0x3FF);
  v1088 = v597;
  if (v623 != (unsigned __int16 *)v624)
  {
    while (2)
    {
      v625 = *v623;
      v626 = v623[1];
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                            + (((*(_QWORD *)(a1 + 184) + v625) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(_BYTE *)(a1 + 184) + v625))
                    + v626))
      {
        v627 = *(_QWORD **)(a1 + 968);
        if (v627[5] <= v625)
          std::__throw_out_of_range[abi:ne180100]("deque");
        v628 = v627[4] + v625;
        v629 = *(_QWORD *)(v627[1] + 8 * (v628 / 0x14));
        v630 = v628 % 0x14;
        v631 = v629 + 200 * v630;
        v634 = *(_QWORD **)(v631 + 184);
        v632 = (_QWORD *)(v631 + 184);
        v633 = v634;
        if (!v634)
          goto LABEL_823;
        v635 = v633;
        do
        {
          v636 = v635;
          v635 = (_QWORD *)*v635;
        }
        while (v635);
        if (v636 == v632 || v636[4] || (v637 = v636[5] - 5, v637 > 3))
        {
LABEL_823:
          v638 = -1;
          if (!v633)
            goto LABEL_829;
        }
        else
        {
          v638 = qword_1D513B398[v637];
          if (!v633)
            goto LABEL_829;
        }
        do
        {
          v639 = v633;
          v633 = (_QWORD *)*v633;
        }
        while (v633);
        if (v639 == v632 || v639[4] || (v640 = v639[5], v640 > 8))
LABEL_829:
          v641 = 0.0;
        else
          v641 = dbl_1D513B3B8[v640];
        v642 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v629 + 200 * v630 + 88)
                                    + ((*(_QWORD *)(v629 + 200 * v630 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(v629 + 200 * v630 + 112));
        v643 = v638 + *(_QWORD *)&v641 * v626;
        v645 = v642;
        v644 = *v642;
        v646 = 0.0;
        if (v643 < (v645[1] - v644) >> 3)
          v646 = *(double *)(v644 + 8 * v643);
        v647 = (void **)v1119[1];
        *((_QWORD *)&v1121 + 1) = 0;
        v648 = v1120 - (unint64_t)v1119[1];
        if ((unint64_t)v1120 - (unint64_t)v1119[1] >= 0x11)
        {
          do
          {
            operator delete(*v647);
            v647 = (void **)((char *)v1119[1] + 8);
            v1119[1] = v647;
            v648 = v1120 - (_QWORD)v647;
          }
          while ((_QWORD)v1120 - (_QWORD)v647 > 0x10uLL);
        }
        if (v648 >> 3 == 1)
        {
          v649 = 512;
LABEL_838:
          *(_QWORD *)&v1121 = v649;
        }
        else if (v648 >> 3 == 2)
        {
          v649 = 1024;
          goto LABEL_838;
        }
        v650 = (void **)v1116[1];
        *((_QWORD *)&v1118 + 1) = 0;
        v651 = v1117 - (unint64_t)v1116[1];
        if ((unint64_t)v1117 - (unint64_t)v1116[1] >= 0x11)
        {
          do
          {
            operator delete(*v650);
            v650 = (void **)((char *)v1116[1] + 8);
            v1116[1] = v650;
            v651 = v1117 - (_QWORD)v650;
          }
          while ((_QWORD)v1117 - (_QWORD)v650 > 0x10uLL);
        }
        if (v651 >> 3 == 1)
        {
          v652 = 512;
LABEL_845:
          *(_QWORD *)&v1118 = v652;
        }
        else if (v651 >> 3 == 2)
        {
          v652 = 1024;
          goto LABEL_845;
        }
        v653 = (void **)__p[1];
        *((_QWORD *)&v1115 + 1) = 0;
        v654 = v1114 - (unint64_t)__p[1];
        if ((unint64_t)v1114 - (unint64_t)__p[1] >= 0x11)
        {
          do
          {
            operator delete(*v653);
            v653 = (void **)((char *)__p[1] + 8);
            __p[1] = v653;
            v654 = v1114 - (_QWORD)v653;
          }
          while ((_QWORD)v1114 - (_QWORD)v653 > 0x10uLL);
        }
        if (v654 >> 3 == 1)
        {
          v655 = 512;
LABEL_852:
          *(_QWORD *)&v1115 = v655;
        }
        else if (v654 >> 3 == 2)
        {
          v655 = 1024;
          goto LABEL_852;
        }
        ContainedDatums = nms::PyramidNMS<unsigned short,double,unsigned char>::getContainedDatums((_QWORD *)a1, v625, v626, v1116);
        if (ContainedDatums | nms::PyramidNMS<unsigned short,double,unsigned char>::getOverlappingDatums((_QWORD *)a1, v625, v626, __p, 1))
        {
          v657 = (char *)v1119[1] + 8 * (((_QWORD)v1121 + *((_QWORD *)&v1121 + 1)) >> 10);
          if ((void *)v1120 == v1119[1])
            v658 = 0;
          else
            v658 = *(_QWORD *)v657 + 4 * (((_WORD)v1121 + WORD4(v1121)) & 0x3FF);
          v659 = (uint64_t *)((char *)v1116[1] + 8 * ((unint64_t)v1118 >> 10));
          if ((void *)v1117 == v1116[1])
          {
            v660 = 0;
            v662 = 0;
            v661 = (uint64_t *)((char *)v1116[1] + 8 * ((*((_QWORD *)&v1118 + 1) + (_QWORD)v1118) >> 10));
          }
          else
          {
            v660 = (int *)(*v659 + 4 * (v1118 & 0x3FF));
            v661 = (uint64_t *)((char *)v1116[1] + 8 * ((*((_QWORD *)&v1118 + 1) + (_QWORD)v1118) >> 10));
            v662 = (int *)(*v661 + 4 * ((*((_QWORD *)&v1118 + 1) + v1118) & 0x3FF));
          }
          std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1119, v657, v658, v659, v660, v661, v662);
          v663 = (char *)v1119[1] + 8 * (((_QWORD)v1121 + *((_QWORD *)&v1121 + 1)) >> 10);
          if ((void *)v1120 == v1119[1])
            v664 = 0;
          else
            v664 = *(_QWORD *)v663 + 4 * (((_WORD)v1121 + WORD4(v1121)) & 0x3FF);
          v665 = (uint64_t *)((char *)__p[1] + 8 * ((unint64_t)v1115 >> 10));
          if ((void *)v1114 == __p[1])
          {
            v666 = 0;
            v668 = 0;
            v667 = (uint64_t *)((char *)__p[1] + 8 * ((*((_QWORD *)&v1115 + 1) + (_QWORD)v1115) >> 10));
          }
          else
          {
            v666 = (int *)(*v665 + 4 * (v1115 & 0x3FF));
            v667 = (uint64_t *)((char *)__p[1] + 8 * ((*((_QWORD *)&v1115 + 1) + (_QWORD)v1115) >> 10));
            v668 = (int *)(*v667 + 4 * ((*((_QWORD *)&v1115 + 1) + v1115) & 0x3FF));
          }
          std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((int64x2_t *)v1119, v663, v664, v665, v666, v667, v668);
          if (nms::PyramidNMS<unsigned short,double,unsigned char>::computeAggregatedScore(a1, v1119) <= v646)
          {
            if ((void *)v1120 != v1119[1])
            {
              v671 = (unsigned __int16 **)((char *)v1119[1] + 8 * ((unint64_t)v1121 >> 10));
              v672 = *v671;
              v673 = &(*v671)[2 * (v1121 & 0x3FF)];
              v674 = *(_QWORD *)((char *)v1119[1]
                               + (((*((_QWORD *)&v1121 + 1) + (_QWORD)v1121) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((*((_QWORD *)&v1121 + 1) + v1121) & 0x3FF);
              if (v673 != (unsigned __int16 *)v674)
              {
                v675 = *(_QWORD *)(a1 + 136);
                v676 = *(_QWORD *)(a1 + 112);
                do
                {
                  v677 = *v673;
                  v678 = v673[1];
                  v679 = *(_QWORD *)(*(_QWORD *)(v676 + (((unint64_t)(v675 + v677) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v675 + v677));
                  if (!*(_BYTE *)(v679 + v678)
                    || (v680 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                     + (((unint64_t)(*(_QWORD *)(a1 + 88) + v677) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*(_BYTE *)(a1 + 88) + v677)),
                        *(_BYTE *)(v680 + v678)))
                  {
                    nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, *v673, v673[1]);
                    v675 = *(_QWORD *)(a1 + 136);
                    v676 = *(_QWORD *)(a1 + 112);
                    v680 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                 + (((unint64_t)(*(_QWORD *)(a1 + 88) + v677) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (*(_BYTE *)(a1 + 88) + v677));
                    v679 = *(_QWORD *)(*(_QWORD *)(v676 + (((unint64_t)(v675 + v677) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (v675 + v677));
                    v672 = *v671;
                  }
                  *(_BYTE *)(v680 + v678) = 0;
                  *(_BYTE *)(v679 + v678) = 1;
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                   + (((unint64_t)(*(_QWORD *)(a1 + 184) + v677) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 184) + v677))
                           + v678) = 0;
                  v673 += 2;
                  if ((char *)v673 - (char *)v672 == 4096)
                  {
                    v681 = v671[1];
                    ++v671;
                    v672 = v681;
                    v673 = v681;
                  }
                }
                while (v673 != (unsigned __int16 *)v674);
              }
            }
          }
          else
          {
            v669 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                         + (((*(_QWORD *)(a1 + 136) + v625) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(a1 + 136) + v625));
            if (!*(_BYTE *)(v669 + v626)
              || (v670 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                               + (((*(_QWORD *)(a1 + 88) + v625) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(_BYTE *)(a1 + 88) + v625)),
                  *(_BYTE *)(v670 + v626)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, v625, v626);
              v670 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                           + (((*(_QWORD *)(a1 + 88) + v625) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(a1 + 88) + v625));
              v669 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                           + (((*(_QWORD *)(a1 + 136) + v625) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(a1 + 136) + v625));
            }
            *(_BYTE *)(v670 + v626) = 0;
            *(_BYTE *)(v669 + v626) = 1;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                             + (((*(_QWORD *)(a1 + 184) + v625) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 184) + v625))
                     + v626) = 0;
          }
        }
      }
      v623 += 2;
      if ((unsigned __int16 *)((char *)v623 - *v622) == (unsigned __int16 *)4096)
      {
        v682 = (unsigned __int16 *)v622[1];
        ++v622;
        v623 = v682;
      }
      if (v623 == (unsigned __int16 *)v624)
      {
        v619 = v1127;
        v41 = __src.n128_u64[1];
        v620 = v1126;
        v621 = (unint64_t)v1127 >> 10;
        break;
      }
      continue;
    }
  }
  v1111 = 0u;
  v1112 = 0u;
  v1109 = 0u;
  *(_OWORD *)v1110 = 0u;
  *(_OWORD *)v1107 = 0u;
  v1108 = 0u;
  if (v620 == v41)
    goto LABEL_999;
  v683 = (unsigned __int16 **)(v41 + 8 * v621);
  v684 = *v683;
  v685 = &(*v683)[2 * (v619 & 0x3FF)];
  v686 = *((_QWORD *)&v1127 + 1) + v619;
  v687 = *(_QWORD *)(v41 + ((v686 >> 7) & 0x1FFFFFFFFFFFFF8));
  v688 = (unsigned __int16 *)(v687 + 4 * (v686 & 0x3FF));
  if (v685 == v688)
    goto LABEL_999;
  v1073 = (unsigned __int16 *)(v687 + 4 * (v686 & 0x3FF));
  while (2)
  {
    v689 = *v685;
    v690 = v685[1];
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                          + (((*(_QWORD *)(a1 + 88) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*(_BYTE *)(a1 + 88) + v689))
                  + v690))
      goto LABEL_994;
    v691 = *(_QWORD *)(a1 + 136);
    v692 = *(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v692 + (((v691 + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (v691 + v689))
                  + v690))
      goto LABEL_994;
    v693 = *(_QWORD **)(a1 + 968);
    if (v693[5] <= v689)
      std::__throw_out_of_range[abi:ne180100]("deque");
    v694 = v693[4] + v689;
    v695 = *(_QWORD *)(v693[1] + 8 * (v694 / 0x14));
    v696 = v694 % 0x14;
    v697 = v695 + 200 * v696;
    v700 = *(_QWORD **)(v697 + 184);
    v698 = (_QWORD *)(v697 + 184);
    v699 = v700;
    if (!v700)
      goto LABEL_897;
    v701 = v699;
    do
    {
      v702 = v701;
      v701 = (_QWORD *)*v701;
    }
    while (v701);
    if (v702 == v698 || v702[4] || (v703 = v702[5] - 5, v703 > 3))
LABEL_897:
      v704 = -1;
    else
      v704 = qword_1D513B398[v703];
    v1096 = v704;
    if (!v699)
      goto LABEL_904;
    do
    {
      v705 = v699;
      v699 = (_QWORD *)*v699;
    }
    while (v699);
    if (v705 == v698 || v705[4] || (v706 = v705[5], v706 > 8))
LABEL_904:
      v707 = 0.0;
    else
      v707 = dbl_1D513B3B8[v706];
    v708 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v695 + 200 * v696 + 88)
                                + ((*(_QWORD *)(v695 + 200 * v696 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * *(_QWORD *)(v695 + 200 * v696 + 112));
    v709 = v1096 + *(_QWORD *)&v707 * v690;
    v711 = v708;
    v710 = *v708;
    v712 = 0.0;
    if (v709 < (v711[1] - v710) >> 3)
      v712 = *(double *)(v710 + 8 * v709);
    v1105 = 0u;
    v1106 = 0u;
    *(_OWORD *)v1104 = 0u;
    LOWORD(v1100) = 0;
    if ((v1078 & 1) != 0)
    {
      v713 = 0;
      goto LABEL_960;
    }
    v714 = 0;
    v715 = 0;
    v713 = 0;
    while (2)
    {
      v716 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 8 * ((*(_QWORD *)(a1 + 952) + v689) / 0x55))
           + 48 * ((*(_QWORD *)(a1 + 952) + v689) % 0x55);
      v717 = *(_QWORD *)(*(_QWORD *)(v716 + 8) + 8 * ((*(_QWORD *)(v716 + 32) + v715) / 0x55uLL))
           + 48 * ((*(_QWORD *)(v716 + 32) + v715) % 0x55uLL);
      v718 = *(_QWORD *)(v717 + 32) + v690;
      v719 = *(_QWORD *)(*(_QWORD *)(v717 + 8) + 8 * (v718 / 0x55));
      v720 = v718 % 0x55;
      v721 = v719 + 48 * (v718 % 0x55);
      if (*(double *)(a1 + 1224) == 0.0)
        goto LABEL_922;
      if ((_DWORD)v689 || v714 != 1)
      {
        if ((_DWORD)v689 == 1 && !v714 && *(_QWORD *)(v719 + 48 * v720 + 40) == 1)
        {
          v722 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v721 + 8)
                                                 + ((*(_QWORD *)(v719 + 48 * v720 + 32) >> 8) & 0xFFFFFFFFFFFFF8))
                                     + 2 * (*(_QWORD *)(v719 + 48 * v720 + 32) & 0x7FFLL));
          v723 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                       + (((unint64_t)(*(_QWORD *)(a1 + 136) + v715) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(_BYTE *)(a1 + 136) + v715));
          if (!*(_BYTE *)(v723 + v722)
            || (v724 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                             + (((unint64_t)(*(_QWORD *)(a1 + 88) + v715) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 88) + v715)),
                *(_BYTE *)(v724 + v722)))
          {
            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, 0, v722);
            v724 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                         + (((unint64_t)(*(_QWORD *)(a1 + 88) + v715) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(a1 + 88) + v715));
            v723 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                         + (((unint64_t)(*(_QWORD *)(a1 + 136) + v715) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(a1 + 136) + v715));
          }
          *(_BYTE *)(v724 + v722) = 0;
          *(_BYTE *)(v723 + v722) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                           + (((unint64_t)(*(_QWORD *)(a1 + 184) + v715) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(a1 + 184) + v715))
                   + v722) = 0;
LABEL_952:
          LOWORD(v1100) = ++v714;
          v715 = v714;
          if (v1088 <= v714)
          {
            v691 = *(_QWORD *)(a1 + 136);
            v692 = *(_QWORD *)(a1 + 112);
            v688 = v1073;
            goto LABEL_960;
          }
          continue;
        }
LABEL_922:
        v725 = v719 + 48 * v720;
        v728 = *(_QWORD *)(v725 + 32);
        v727 = (uint64_t *)(v725 + 32);
        v726 = v728;
        v729 = *(_QWORD *)(v721 + 8);
        if (*(_QWORD *)(v721 + 16) == v729)
        {
          v734 = (_QWORD *)(v719 + 48 * v720 + 40);
        }
        else
        {
          v730 = (unsigned __int16 **)(v729 + 8 * (v726 >> 11));
          v731 = *v730;
          v732 = &(*v730)[v726 & 0x7FF];
          v733 = v719 + 48 * v720;
          v735 = *(_QWORD *)(v733 + 40);
          v734 = (_QWORD *)(v733 + 40);
          v736 = *(_QWORD *)(v729 + (((v735 + v726) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v735 + v726) & 0x7FF);
          if (v732 != (unsigned __int16 *)v736)
          {
            v737 = *(_QWORD *)(a1 + 88);
            v738 = *(_QWORD *)(a1 + 64);
            while (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v738
                                                      + (((v737 + (unint64_t)v714) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (v737 + v714))
                              + *v732))
            {
              if ((char *)++v732 - (char *)v731 == 4096)
              {
                v739 = v730[1];
                ++v730;
                v731 = v739;
                v732 = v739;
              }
              if (v732 == (unsigned __int16 *)v736)
                goto LABEL_935;
            }
            v740 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                         + (((*(_QWORD *)(a1 + 136) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(a1 + 136) + v689));
            if (!*(_BYTE *)(v740 + v690)
              || (v741 = *(_QWORD *)(*(_QWORD *)(v738 + (((v737 + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v737 + v689)),
                  *(_BYTE *)(v741 + v690)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, v689, v690);
              v741 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                           + (((*(_QWORD *)(a1 + 88) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(a1 + 88) + v689));
              v740 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                           + (((*(_QWORD *)(a1 + 136) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(a1 + 136) + v689));
            }
            *(_BYTE *)(v741 + v690) = 0;
            *(_BYTE *)(v740 + v690) = 1;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                             + (((*(_QWORD *)(a1 + 184) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 184) + v689))
                     + v690) = 0;
          }
        }
LABEL_935:
        v691 = *(_QWORD *)(a1 + 136);
        v692 = *(_QWORD *)(a1 + 112);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v692 + (((v691 + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * (v691 + v689))
                      + v690))
        {
          v688 = v1073;
          goto LABEL_960;
        }
        v742 = *(_QWORD *)(v721 + 8);
        if (*(_QWORD *)(v721 + 16) != v742)
        {
          v743 = *v727;
          v744 = (char **)(v742 + 8 * ((unint64_t)*v727 >> 11));
          v745 = *v744;
          v746 = &(*v744)[2 * (*v727 & 0x7FF)];
          v747 = *(_QWORD *)(v742 + (((unint64_t)(*v734 + v743) >> 8) & 0xFFFFFFFFFFFFF8))
               + 2 * ((*v734 + v743) & 0x7FF);
          while (v746 != (char *)v747)
          {
            LOWORD(v1098) = 0;
            v748 = *(unsigned __int16 *)v746;
            LOWORD(v1098) = *(_WORD *)v746;
            if ((_QWORD)v1126 == __src.n128_u64[1])
              goto LABEL_949;
            v749 = (unsigned __int16 **)(__src.n128_u64[1] + 8 * ((unint64_t)v1127 >> 10));
            v750 = *v749;
            v751 = &(*v749)[2 * (v1127 & 0x3FF)];
            v752 = *(_QWORD *)(__src.n128_u64[1]
                             + (((*((_QWORD *)&v1127 + 1) + (_QWORD)v1127) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((*((_QWORD *)&v1127 + 1) + v1127) & 0x3FF);
            if (v751 != (unsigned __int16 *)v752)
            {
              while (*v751 != v714 || v751[1] != v748)
              {
                v751 += 2;
                if ((char *)v751 - (char *)v750 == 4096)
                {
                  v753 = v749[1];
                  ++v749;
                  v750 = v753;
                  v751 = v753;
                }
                if (v751 == (unsigned __int16 *)v752)
                  goto LABEL_949;
              }
            }
            if (v751 == (unsigned __int16 *)v752)
            {
LABEL_949:
              ++v713;
            }
            else
            {
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v1104, &v1100, &v1098);
              v745 = *v744;
            }
            v746 += 2;
            if (v746 - v745 == 4096)
            {
              v754 = v744[1];
              ++v744;
              v745 = v754;
              v746 = v754;
            }
          }
        }
        goto LABEL_952;
      }
      break;
    }
    if (*(_QWORD *)(v719 + 48 * v720 + 40) != 1)
      goto LABEL_922;
    v691 = *(_QWORD *)(a1 + 136);
    v692 = *(_QWORD *)(a1 + 112);
    v755 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + v689) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v691);
    if (*(_BYTE *)(v755 + v690)
      && (v756 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                       + (((*(_QWORD *)(a1 + 88) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * *(unsigned __int8 *)(a1 + 88)),
          !*(_BYTE *)(v756 + v690)))
    {
      v688 = v1073;
    }
    else
    {
      nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, 0, v690);
      v688 = v1073;
      v691 = *(_QWORD *)(a1 + 136);
      v692 = *(_QWORD *)(a1 + 112);
      v756 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + (((*(_QWORD *)(a1 + 88) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(unsigned __int8 *)(a1 + 88));
      v755 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + v689) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v691);
    }
    *(_BYTE *)(v756 + v690) = 0;
    *(_BYTE *)(v755 + v690) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                     + (((*(_QWORD *)(a1 + 184) + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * *(unsigned __int8 *)(a1 + 184))
             + v690) = 0;
LABEL_960:
    v757 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v691 + v689));
    if (*(_BYTE *)(v757 + v690))
      v758 = 0;
    else
      v758 = v713 == 0;
    if (v758)
    {
      if ((void *)v1105 == v1104[1]
        || (v759 = (char *)v1104[1] + 8 * ((unint64_t)v1106 >> 10),
            v760 = (unsigned __int16 *)(*v759 + 4 * (v1106 & 0x3FF)),
            v1083 = *(_QWORD *)((char *)v1104[1]
                              + (((*((_QWORD *)&v1106 + 1) + (_QWORD)v1106) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((*((_QWORD *)&v1106 + 1) + v1106) & 0x3FF),
            v760 == (unsigned __int16 *)v1083))
      {
        v782 = *(_QWORD *)(a1 + 88);
        v783 = *(_QWORD *)(a1 + 64);
        v785 = *(_QWORD *)(a1 + 184);
        v790 = *(_QWORD *)(a1 + 160);
      }
      else
      {
        v761 = v689;
        v762 = v690;
        do
        {
          v763 = *v760;
          v764 = *(_QWORD **)(a1 + 968);
          if (v764[5] <= v763)
            std::__throw_out_of_range[abi:ne180100]("deque");
          v765 = v764[4] + v763;
          v766 = *(_QWORD *)(v764[1] + 8 * (v765 / 0x14));
          v767 = v765 % 0x14;
          v768 = v766 + 200 * v767;
          v771 = *(_QWORD **)(v768 + 184);
          v769 = (_QWORD *)(v768 + 184);
          v770 = v771;
          if (!v771)
            goto LABEL_975;
          do
          {
            v772 = v770;
            v770 = (_QWORD *)*v770;
          }
          while (v770);
          if (v772 == v769 || v772[4] || (v773 = v772[5], v773 > 8))
LABEL_975:
            v774 = 0.0;
          else
            v774 = dbl_1D513B3B8[v773];
          v775 = v760[1];
          v776 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v766 + 200 * v767 + 88)
                                      + ((*(_QWORD *)(v766 + 200 * v767 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * *(_QWORD *)(v766 + 200 * v767 + 112));
          v777 = v1096 + *(_QWORD *)&v774 * v775;
          v779 = v776;
          v778 = *v776;
          v780 = 0.0;
          if (v777 < (v779[1] - v778) >> 3)
            v780 = *(double *)(v778 + 8 * v777);
          if (v780 >= v712)
          {
            v787 = v762;
            v788 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + (unint64_t)v761) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v691 + v761));
            if (!*(_BYTE *)(v788 + v762)
              || (v782 = *(_QWORD *)(a1 + 88),
                  v783 = *(_QWORD *)(a1 + 64),
                  v789 = *(_QWORD *)(*(_QWORD *)(v783 + (((v782 + (unint64_t)v761) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v782 + v761)),
                  *(_BYTE *)(v789 + v762)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, v761, v762);
              v782 = *(_QWORD *)(a1 + 88);
              v783 = *(_QWORD *)(a1 + 64);
              v691 = *(_QWORD *)(a1 + 136);
              v692 = *(_QWORD *)(a1 + 112);
              v789 = *(_QWORD *)(*(_QWORD *)(v783 + (((v782 + (unint64_t)v761) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v782 + v761));
              v788 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + (unint64_t)v761) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v691 + v761));
              LOWORD(v763) = *v760;
              LOWORD(v775) = v760[1];
            }
            *(_BYTE *)(v789 + v762) = 0;
            *(_BYTE *)(v788 + v762) = 1;
            v762 = v775;
            v785 = *(_QWORD *)(a1 + 184);
            v786 = v785 + v761;
            v775 = v787;
            v761 = v763;
            v712 = v780;
          }
          else
          {
            v781 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + v763) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v691 + v763));
            if (!*(_BYTE *)(v781 + v775)
              || (v782 = *(_QWORD *)(a1 + 88),
                  v783 = *(_QWORD *)(a1 + 64),
                  v784 = *(_QWORD *)(*(_QWORD *)(v783 + (((v782 + v763) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (v782 + v763)),
                  *(_BYTE *)(v784 + v775)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, *v760, v760[1]);
              v782 = *(_QWORD *)(a1 + 88);
              v783 = *(_QWORD *)(a1 + 64);
              v691 = *(_QWORD *)(a1 + 136);
              v692 = *(_QWORD *)(a1 + 112);
              v784 = *(_QWORD *)(*(_QWORD *)(v783 + (((v782 + v763) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v782 + v763));
              v781 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + v763) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v691 + v763));
            }
            *(_BYTE *)(v784 + v775) = 0;
            *(_BYTE *)(v781 + v775) = 1;
            v785 = *(_QWORD *)(a1 + 184);
            v786 = v785 + v763;
          }
          v790 = *(_QWORD *)(a1 + 160);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v790 + ((v786 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v786)
                   + v775) = 0;
          v760 += 2;
          if ((unsigned __int16 *)((char *)v760 - *v759) == (unsigned __int16 *)4096)
          {
            v791 = (unsigned __int16 *)v759[1];
            ++v759;
            v760 = v791;
          }
        }
        while (v760 != (unsigned __int16 *)v1083);
        v689 = v761;
        v690 = v762;
        v757 = *(_QWORD *)(*(_QWORD *)(v692 + (((v691 + (unint64_t)v761) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v691 + v761));
        v688 = v1073;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v783 + (((v782 + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (v782 + v689))
               + v690) = 1;
      *(_BYTE *)(v757 + v690) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v790 + (((v785 + v689) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (v785 + v689))
               + v690) = 0;
    }
    std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1104);
    v684 = *v683;
LABEL_994:
    v685 += 2;
    if ((char *)v685 - (char *)v684 == 4096)
    {
      v792 = v683[1];
      ++v683;
      v684 = v792;
      v685 = v792;
    }
    if (v685 != v688)
      continue;
    break;
  }
LABEL_999:
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1107);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v1110);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](__p);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1116);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1119);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v1122);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&__src);
  v41 = *(_QWORD *)(a1 + 968);
LABEL_1000:
  if (*(_BYTE *)(a1 + 1101))
  {
    if (v41)
    {
      v793 = *(_QWORD *)(v41 + 40);
      if (v793)
      {
        v794 = 0;
        v1074 = 0;
        v1079 = *(_QWORD *)(v41 + 40);
        do
        {
          v795 = *(_QWORD **)(a1 + 968);
          if (v795[5] <= v794)
            std::__throw_out_of_range[abi:ne180100]("deque");
          v796 = v795[4] + v794;
          v797 = *(_QWORD *)(v795[1] + 8 * (v796 / 0x14));
          v798 = v796 % 0x14;
          v799 = v797 + 200 * (v796 % 0x14);
          v800 = *(_QWORD **)(v799 + 184);
          v1097 = (_QWORD *)(v799 + 184);
          if (!v800)
            goto LABEL_1011;
          do
          {
            v801 = v800;
            v800 = (_QWORD *)*v800;
          }
          while (v800);
          if (v801 == v1097 || v801[4] || (v802 = v801[5] - 5, v802 > 3))
LABEL_1011:
            v803 = -1;
          else
            v803 = qword_1D513B398[v802];
          v804 = (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                     + (((*(_QWORD *)(a1 + 184) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*(_BYTE *)(a1 + 184) + v794));
          std::__val_expr<std::_BinaryOp<std::bit_and<BOOL>,std::valarray<BOOL>,std::__val_expr<std::_UnaryOp<std::logical_not<BOOL>,std::valarray<BOOL> const&>>>>::operator std::valarray<BOOL>(v1122, *v804, v804[1], (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + (((*(_QWORD *)(a1 + 88) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*(_BYTE *)(a1 + 88) + v794)));
          nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&__src, (uint64_t)v1122);
          if (v1122[0])
          {
            if (v1122[1] != v1122[0])
              v1122[1] = v1122[0];
            operator delete(v1122[0]);
          }
          if ((_QWORD)v1126 != __src.n128_u64[1])
          {
            v805 = (_QWORD *)(__src.n128_u64[1] + 8 * ((unint64_t)v1127 >> 11));
            v806 = (unsigned __int16 *)(*v805 + 2 * (v1127 & 0x7FF));
            v1061 = *(_QWORD *)(__src.n128_u64[1]
                              + (((*((_QWORD *)&v1127 + 1) + (_QWORD)v1127) >> 8) & 0xFFFFFFFFFFFFF8))
                  + 2 * ((*((_QWORD *)&v1127 + 1) + v1127) & 0x7FF);
            if (v806 != (unsigned __int16 *)v1061)
            {
              v807 = v797 + 200 * v798;
              v1084 = (_QWORD *)(v807 + 88);
              v1089 = (_QWORD *)(v807 + 112);
              do
              {
                v808 = (_QWORD *)*v1097;
                if (!*v1097)
                  goto LABEL_1025;
                do
                {
                  v809 = v808;
                  v808 = (_QWORD *)*v808;
                }
                while (v808);
                if (v809 == v1097 || v809[4] || (v810 = v809[5], v810 > 8))
LABEL_1025:
                  v811 = 0.0;
                else
                  v811 = dbl_1D513B3B8[v810];
                v1065 = v806;
                v1068 = v805;
                v812 = *v806;
                v813 = (*v1089 >> 5) & 0x7FFFFFFFFFFFFF8;
                v814 = v803 + *(_QWORD *)&v811 * v812;
                v815 = *(_QWORD *)(*(_QWORD *)(*v1084 + v813) + 16 * *v1089);
                v816 = 0.0;
                if (v814 < (*(_QWORD *)(*(_QWORD *)(*v1084 + v813) + 16 * *v1089 + 8) - v815) >> 3)
                  v816 = *(double *)(v815 + 8 * v814);
                v817 = 0;
                v818 = 0;
                while (1)
                {
                  if (*v1046 && *(_QWORD *)(a1 + 672))
                  {
                    v819 = *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * ((*(_QWORD *)(a1 + 664) + v794) / 0x55))
                         + 48 * ((*(_QWORD *)(a1 + 664) + v794) % 0x55);
                    v820 = *(_QWORD *)(*(_QWORD *)(v819 + 8) + 8 * ((*(_QWORD *)(v819 + 32) + v817) / 0x55))
                         + 48 * ((*(_QWORD *)(v819 + 32) + v817) % 0x55);
                    v821 = *(_QWORD *)(v820 + 32) + v812;
                    v822 = *(_QWORD *)(*(_QWORD *)(v820 + 8) + 8 * (v821 / 0x55));
                    v823 = v821 % 0x55;
                    v824 = (_QWORD *)(v822 + 48 * v823);
                    v825 = v824[1];
                    if (v824[2] == v825)
                    {
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                    }
                    else
                    {
                      v826 = v824[4];
                      v827 = (unsigned __int16 **)(v825 + 8 * (v826 >> 11));
                      v828 = *v827;
                      v829 = *(_QWORD *)(v822 + 48 * v823 + 40) + v826;
                      v830 = &(*v827)[v826 & 0x7FF];
                      v831 = *(_QWORD *)(v825 + ((v829 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v829 & 0x7FF);
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                      if (v830 != (unsigned __int16 *)v831)
                      {
                        v834 = *(_QWORD *)(a1 + 88);
                        v835 = *(_QWORD *)(a1 + 64);
                        while (1)
                        {
                          v836 = *v830;
                          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v835 + (((v834 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                    + 16 * (v834 + v817))
                                        + v836))
                          {
                            v853 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v832 + v794));
                            if (!*(_BYTE *)(v853 + v812))
                              goto LABEL_1057;
                            v854 = *(_QWORD *)(*(_QWORD *)(v835 + (((v834 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v834 + v794));
                            if (*(_BYTE *)(v854 + v812))
                              goto LABEL_1057;
                            goto LABEL_1058;
                          }
                          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + 8 * ((v832 + v817) >> 8))
                                                     + 16 * (v832 + v817))
                                         + v836))
                          {
                            v837 = *(_QWORD **)(a1 + 968);
                            if (v837[5] <= v817)
                              std::__throw_out_of_range[abi:ne180100]("deque");
                            v838 = v837[4] + v817;
                            v839 = *(_QWORD *)(v837[1] + 8 * (v838 / 0x14));
                            v840 = v838 % 0x14;
                            v841 = v839 + 200 * v840;
                            v844 = *(_QWORD **)(v841 + 184);
                            v842 = (_QWORD *)(v841 + 184);
                            v843 = v844;
                            if (!v844)
                              goto LABEL_1043;
                            do
                            {
                              v845 = v843;
                              v843 = (_QWORD *)*v843;
                            }
                            while (v843);
                            if (v845 == v842 || v845[4] || (v846 = v845[5], v846 > 8))
LABEL_1043:
                              v847 = 0.0;
                            else
                              v847 = dbl_1D513B3B8[v846];
                            v848 = v803 + *(_QWORD *)&v847 * v836;
                            v850 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v839 + 200 * v840 + 88)
                                                         + ((*(_QWORD *)(v839 + 200 * v840 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * *(_QWORD *)(v839 + 200 * v840 + 112));
                            v849 = *v850;
                            v851 = 0.0;
                            if (v848 < (v850[1] - *v850) >> 3)
                              v851 = *(double *)(v849 + 8 * v848);
                            if (v851 >= v816)
                              break;
                          }
                          if ((char *)++v830 - (char *)v828 == 4096)
                          {
                            v852 = v827[1];
                            ++v827;
                            v828 = v852;
                            v830 = v852;
                          }
                          if (v830 == (unsigned __int16 *)v831)
                            goto LABEL_1059;
                        }
                        v853 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (v832 + v794));
                        if (!*(_BYTE *)(v853 + v812)
                          || (v854 = *(_QWORD *)(*(_QWORD *)(v835 + (((v834 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v834 + v794)),
                              *(_BYTE *)(v854 + v812)))
                        {
LABEL_1057:
                          nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, v1074, v812);
                          v832 = *(_QWORD *)(a1 + 136);
                          v833 = *(_QWORD *)(a1 + 112);
                          v854 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                       + (((*(_QWORD *)(a1 + 88) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(_BYTE *)(a1 + 88) + v794));
                          v853 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (v832 + v794));
                        }
LABEL_1058:
                        *(_BYTE *)(v854 + v812) = 0;
                        *(_BYTE *)(v853 + v812) = 1;
                        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                         + (((*(_QWORD *)(a1 + 184) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(_BYTE *)(a1 + 184) + v794))
                                 + v812) = 0;
                      }
                    }
LABEL_1059:
                    if (*(_BYTE *)(a1 + 1096)
                      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v832 + v794))
                                   + v812))
                    {
                      std::deque<unsigned short>::deque((uint64_t)v1122, v824);
                      if ((void *)v1123 != v1122[1])
                      {
                        v855 = (unsigned __int16 **)((char *)v1122[1] + 8 * ((unint64_t)v1124 >> 11));
                        v856 = *v855;
                        v857 = &(*v855)[v1124 & 0x7FF];
                        v858 = *(_QWORD *)((char *)v1122[1]
                                         + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x7FF);
                        if (v857 != (unsigned __int16 *)v858)
                        {
                          v859 = *(_QWORD *)(a1 + 136);
                          v860 = *(_QWORD *)(a1 + 112);
                          do
                          {
                            v861 = *v857;
                            v862 = *(_QWORD *)(*(_QWORD *)(v860 + (((v859 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v859 + v817));
                            if (!*(_BYTE *)(v862 + v861)
                              || (v863 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                               + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (*(_BYTE *)(a1 + 88) + v817)),
                                  *(_BYTE *)(v863 + v861)))
                            {
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, (unsigned __int16)v818, *v857);
                              v859 = *(_QWORD *)(a1 + 136);
                              v860 = *(_QWORD *)(a1 + 112);
                              v863 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                           + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(_BYTE *)(a1 + 88) + v817));
                              v862 = *(_QWORD *)(*(_QWORD *)(v860 + (((v859 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v859 + v817));
                              v856 = *v855;
                            }
                            *(_BYTE *)(v863 + v861) = 0;
                            *(_BYTE *)(v862 + v861) = 1;
                            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                             + (((*(_QWORD *)(a1 + 184) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(_BYTE *)(a1 + 184) + v817))
                                     + v861) = 0;
                            if ((char *)++v857 - (char *)v856 == 4096)
                            {
                              v864 = v855[1];
                              ++v855;
                              v856 = v864;
                              v857 = v864;
                            }
                          }
                          while (v857 != (unsigned __int16 *)v858);
                        }
                      }
                      std::deque<unsigned short>::~deque[abi:ne180100](v1122);
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                      v793 = v1079;
                    }
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * (v832 + v794))
                                  + v812))
                      break;
                  }
                  if (*(_BYTE *)(a1 + 1099))
                  {
                    if (!*(_QWORD *)(a1 + 768))
                      goto LABEL_1260;
                    v865 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * ((*(_QWORD *)(a1 + 760) + v794) / 0x55))
                         + 48 * ((*(_QWORD *)(a1 + 760) + v794) % 0x55);
                    v866 = *(_QWORD *)(*(_QWORD *)(v865 + 8) + 8 * ((*(_QWORD *)(v865 + 32) + v817) / 0x55))
                         + 48 * ((*(_QWORD *)(v865 + 32) + v817) % 0x55);
                    v867 = *(_QWORD *)(v866 + 32) + v812;
                    v868 = *(_QWORD *)(*(_QWORD *)(v866 + 8) + 8 * (v867 / 0x55));
                    v869 = v867 % 0x55;
                    v870 = (_QWORD *)(v868 + 48 * v869);
                    v871 = v870[1];
                    if (v870[2] == v871)
                    {
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                    }
                    else
                    {
                      v872 = v870[4];
                      v873 = (unsigned __int16 **)(v871 + 8 * (v872 >> 11));
                      v874 = *v873;
                      v875 = *(_QWORD *)(v868 + 48 * v869 + 40) + v872;
                      v876 = &(*v873)[v872 & 0x7FF];
                      v877 = *(_QWORD *)(v871 + ((v875 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v875 & 0x7FF);
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                      if (v876 != (unsigned __int16 *)v877)
                      {
                        v878 = *(_QWORD *)(a1 + 88);
                        v879 = *(_QWORD *)(a1 + 64);
                        while (1)
                        {
                          v880 = *v876;
                          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v879 + (((v878 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                    + 16 * (v878 + v817))
                                        + v880))
                          {
                            v897 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v832 + v794));
                            if (!*(_BYTE *)(v897 + v812))
                              goto LABEL_1100;
                            v898 = *(_QWORD *)(*(_QWORD *)(v879 + (((v878 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v878 + v794));
                            if (*(_BYTE *)(v898 + v812))
                              goto LABEL_1100;
                            goto LABEL_1101;
                          }
                          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + 8 * ((v832 + v817) >> 8))
                                                     + 16 * (v832 + v817))
                                         + v880))
                          {
                            v881 = *(_QWORD **)(a1 + 968);
                            if (v881[5] <= v817)
                              std::__throw_out_of_range[abi:ne180100]("deque");
                            v882 = v881[4] + v817;
                            v883 = *(_QWORD *)(v881[1] + 8 * (v882 / 0x14));
                            v884 = v882 % 0x14;
                            v885 = v883 + 200 * v884;
                            v888 = *(_QWORD **)(v885 + 184);
                            v886 = (_QWORD *)(v885 + 184);
                            v887 = v888;
                            if (!v888)
                              goto LABEL_1086;
                            do
                            {
                              v889 = v887;
                              v887 = (_QWORD *)*v887;
                            }
                            while (v887);
                            if (v889 == v886 || v889[4] || (v890 = v889[5], v890 > 8))
LABEL_1086:
                              v891 = 0.0;
                            else
                              v891 = dbl_1D513B3B8[v890];
                            v892 = v803 + *(_QWORD *)&v891 * v880;
                            v894 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v883 + 200 * v884 + 88)
                                                         + ((*(_QWORD *)(v883 + 200 * v884 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * *(_QWORD *)(v883 + 200 * v884 + 112));
                            v893 = *v894;
                            v895 = 0.0;
                            if (v892 < (v894[1] - *v894) >> 3)
                              v895 = *(double *)(v893 + 8 * v892);
                            if (v895 >= v816)
                              break;
                          }
                          if ((char *)++v876 - (char *)v874 == 4096)
                          {
                            v896 = v873[1];
                            ++v873;
                            v874 = v896;
                            v876 = v896;
                          }
                          if (v876 == (unsigned __int16 *)v877)
                            goto LABEL_1102;
                        }
                        v897 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (v832 + v794));
                        if (!*(_BYTE *)(v897 + v812)
                          || (v898 = *(_QWORD *)(*(_QWORD *)(v879 + (((v878 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v878 + v794)),
                              *(_BYTE *)(v898 + v812)))
                        {
LABEL_1100:
                          nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, v1074, v812);
                          v832 = *(_QWORD *)(a1 + 136);
                          v833 = *(_QWORD *)(a1 + 112);
                          v898 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                       + (((*(_QWORD *)(a1 + 88) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(_BYTE *)(a1 + 88) + v794));
                          v897 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (v832 + v794));
                        }
LABEL_1101:
                        *(_BYTE *)(v898 + v812) = 0;
                        *(_BYTE *)(v897 + v812) = 1;
                        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                         + (((*(_QWORD *)(a1 + 184) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(_BYTE *)(a1 + 184) + v794))
                                 + v812) = 0;
                      }
                    }
LABEL_1102:
                    if (*(_BYTE *)(a1 + 1096)
                      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v832 + v794))
                                   + v812))
                    {
                      std::deque<unsigned short>::deque((uint64_t)v1122, v870);
                      if ((void *)v1123 != v1122[1])
                      {
                        v899 = (unsigned __int16 **)((char *)v1122[1] + 8 * ((unint64_t)v1124 >> 11));
                        v900 = *v899;
                        v901 = &(*v899)[v1124 & 0x7FF];
                        v902 = *(_QWORD *)((char *)v1122[1]
                                         + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 8) & 0xFFFFFFFFFFFFF8))
                             + 2 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x7FF);
                        if (v901 != (unsigned __int16 *)v902)
                        {
                          v903 = *(_QWORD *)(a1 + 136);
                          v904 = *(_QWORD *)(a1 + 112);
                          do
                          {
                            v905 = *v901;
                            v906 = *(_QWORD *)(*(_QWORD *)(v904 + (((v903 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v903 + v817));
                            if (!*(_BYTE *)(v906 + v905)
                              || (v907 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                               + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (*(_BYTE *)(a1 + 88) + v817)),
                                  *(_BYTE *)(v907 + v905)))
                            {
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, (unsigned __int16)v818, *v901);
                              v903 = *(_QWORD *)(a1 + 136);
                              v904 = *(_QWORD *)(a1 + 112);
                              v907 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                           + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(_BYTE *)(a1 + 88) + v817));
                              v906 = *(_QWORD *)(*(_QWORD *)(v904 + (((v903 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v903 + v817));
                              v900 = *v899;
                            }
                            *(_BYTE *)(v907 + v905) = 0;
                            *(_BYTE *)(v906 + v905) = 1;
                            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                             + (((*(_QWORD *)(a1 + 184) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(_BYTE *)(a1 + 184) + v817))
                                     + v905) = 0;
                            if ((char *)++v901 - (char *)v900 == 4096)
                            {
                              v908 = v899[1];
                              ++v899;
                              v900 = v908;
                              v901 = v908;
                            }
                          }
                          while (v901 != (unsigned __int16 *)v902);
                        }
                      }
                      std::deque<unsigned short>::~deque[abi:ne180100](v1122);
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                      v793 = v1079;
                    }
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * (v832 + v794))
                                  + v812))
                      break;
                    if (*(_BYTE *)(a1 + 1099))
                    {
LABEL_1260:
                      if (*(_QWORD *)(a1 + 864))
                      {
                        v909 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * ((*(_QWORD *)(a1 + 856) + v794) / 0x55))
                             + 48 * ((*(_QWORD *)(a1 + 856) + v794) % 0x55);
                        v910 = *(_QWORD *)(*(_QWORD *)(v909 + 8) + 8 * ((*(_QWORD *)(v909 + 32) + v817) / 0x55))
                             + 48 * ((*(_QWORD *)(v909 + 32) + v817) % 0x55);
                        v911 = *(_QWORD *)(v910 + 32) + v812;
                        v912 = *(_QWORD *)(*(_QWORD *)(v910 + 8) + 8 * (v911 / 0x55));
                        v913 = v911 % 0x55;
                        v914 = (_QWORD *)(v912 + 48 * v913);
                        v915 = v914[1];
                        if (v914[2] == v915)
                        {
                          v832 = *(_QWORD *)(a1 + 136);
                          v833 = *(_QWORD *)(a1 + 112);
                        }
                        else
                        {
                          v916 = v914[4];
                          v917 = (unsigned __int16 **)(v915 + 8 * (v916 >> 11));
                          v918 = *v917;
                          v919 = *(_QWORD *)(v912 + 48 * v913 + 40) + v916;
                          v920 = &(*v917)[v916 & 0x7FF];
                          v921 = *(_QWORD *)(v915 + ((v919 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v919 & 0x7FF);
                          v832 = *(_QWORD *)(a1 + 136);
                          v833 = *(_QWORD *)(a1 + 112);
                          if (v920 != (unsigned __int16 *)v921)
                          {
                            v922 = *(_QWORD *)(a1 + 88);
                            v923 = *(_QWORD *)(a1 + 64);
                            while (1)
                            {
                              v924 = *v920;
                              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v923 + (((v922 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                        + 16 * (v922 + v817))
                                            + v924))
                              {
                                v941 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v832 + v794));
                                if (!*(_BYTE *)(v941 + v812))
                                  goto LABEL_1143;
                                v942 = *(_QWORD *)(*(_QWORD *)(v923 + (((v922 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v922 + v794));
                                if (*(_BYTE *)(v942 + v812))
                                  goto LABEL_1143;
                                goto LABEL_1144;
                              }
                              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + 8 * ((v832 + v817) >> 8))
                                                         + 16 * (v832 + v817))
                                             + v924))
                              {
                                v925 = *(_QWORD **)(a1 + 968);
                                if (v925[5] <= v817)
                                  std::__throw_out_of_range[abi:ne180100]("deque");
                                v926 = v925[4] + v817;
                                v927 = *(_QWORD *)(v925[1] + 8 * (v926 / 0x14));
                                v928 = v926 % 0x14;
                                v929 = v927 + 200 * v928;
                                v932 = *(_QWORD **)(v929 + 184);
                                v930 = (_QWORD *)(v929 + 184);
                                v931 = v932;
                                if (!v932)
                                  goto LABEL_1129;
                                do
                                {
                                  v933 = v931;
                                  v931 = (_QWORD *)*v931;
                                }
                                while (v931);
                                if (v933 == v930 || v933[4] || (v934 = v933[5], v934 > 8))
LABEL_1129:
                                  v935 = 0.0;
                                else
                                  v935 = dbl_1D513B3B8[v934];
                                v936 = v803 + *(_QWORD *)&v935 * v924;
                                v938 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v927 + 200 * v928 + 88)
                                                             + ((*(_QWORD *)(v927 + 200 * v928 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * *(_QWORD *)(v927 + 200 * v928 + 112));
                                v937 = *v938;
                                v939 = 0.0;
                                if (v936 < (v938[1] - *v938) >> 3)
                                  v939 = *(double *)(v937 + 8 * v936);
                                if (v939 >= v816)
                                  break;
                              }
                              if ((char *)++v920 - (char *)v918 == 4096)
                              {
                                v940 = v917[1];
                                ++v917;
                                v918 = v940;
                                v920 = v940;
                              }
                              if (v920 == (unsigned __int16 *)v921)
                                goto LABEL_1145;
                            }
                            v941 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v832 + v794));
                            if (!*(_BYTE *)(v941 + v812)
                              || (v942 = *(_QWORD *)(*(_QWORD *)(v923 + (((v922 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (v922 + v794)),
                                  *(_BYTE *)(v942 + v812)))
                            {
LABEL_1143:
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, v1074, v812);
                              v832 = *(_QWORD *)(a1 + 136);
                              v833 = *(_QWORD *)(a1 + 112);
                              v942 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                           + (((*(_QWORD *)(a1 + 88) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(_BYTE *)(a1 + 88) + v794));
                              v941 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v832 + v794));
                            }
LABEL_1144:
                            *(_BYTE *)(v942 + v812) = 0;
                            *(_BYTE *)(v941 + v812) = 1;
                            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                             + (((*(_QWORD *)(a1 + 184) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(_BYTE *)(a1 + 184) + v794))
                                     + v812) = 0;
                          }
                        }
LABEL_1145:
                        if (*(_BYTE *)(a1 + 1096)
                          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (v832 + v794))
                                       + v812))
                        {
                          std::deque<unsigned short>::deque((uint64_t)v1122, v914);
                          if ((void *)v1123 != v1122[1])
                          {
                            v943 = (unsigned __int16 **)((char *)v1122[1] + 8 * ((unint64_t)v1124 >> 11));
                            v944 = *v943;
                            v945 = &(*v943)[v1124 & 0x7FF];
                            v946 = *(_QWORD *)((char *)v1122[1]
                                             + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 8) & 0xFFFFFFFFFFFFF8))
                                 + 2 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x7FF);
                            if (v945 != (unsigned __int16 *)v946)
                            {
                              v947 = *(_QWORD *)(a1 + 136);
                              v948 = *(_QWORD *)(a1 + 112);
                              do
                              {
                                v949 = *v945;
                                v950 = *(_QWORD *)(*(_QWORD *)(v948 + (((v947 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (v947 + v817));
                                if (!*(_BYTE *)(v950 + v949)
                                  || (v951 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                                   + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                       + 16 * (*(_BYTE *)(a1 + 88) + v817)),
                                      *(_BYTE *)(v951 + v949)))
                                {
                                  nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, (unsigned __int16)v818, *v945);
                                  v947 = *(_QWORD *)(a1 + 136);
                                  v948 = *(_QWORD *)(a1 + 112);
                                  v951 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                               + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (*(_BYTE *)(a1 + 88) + v817));
                                  v950 = *(_QWORD *)(*(_QWORD *)(v948 + (((v947 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                   + 16 * (v947 + v817));
                                  v944 = *v943;
                                }
                                *(_BYTE *)(v951 + v949) = 0;
                                *(_BYTE *)(v950 + v949) = 1;
                                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                                 + (((*(_QWORD *)(a1 + 184) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                     + 16 * (*(_BYTE *)(a1 + 184) + v817))
                                         + v949) = 0;
                                if ((char *)++v945 - (char *)v944 == 4096)
                                {
                                  v952 = v943[1];
                                  ++v943;
                                  v944 = v952;
                                  v945 = v952;
                                }
                              }
                              while (v945 != (unsigned __int16 *)v946);
                            }
                          }
                          std::deque<unsigned short>::~deque[abi:ne180100](v1122);
                          v832 = *(_QWORD *)(a1 + 136);
                          v833 = *(_QWORD *)(a1 + 112);
                          v793 = v1079;
                        }
                        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                  + 16 * (v832 + v794))
                                      + v812))
                          break;
                      }
                    }
                  }
                  if (*(_BYTE *)(a1 + 1100) && *(_QWORD *)(a1 + 960))
                  {
                    v953 = *(_QWORD *)(*(_QWORD *)(a1 + 928) + 8 * ((*(_QWORD *)(a1 + 952) + v794) / 0x55))
                         + 48 * ((*(_QWORD *)(a1 + 952) + v794) % 0x55);
                    v954 = *(_QWORD *)(*(_QWORD *)(v953 + 8) + 8 * ((*(_QWORD *)(v953 + 32) + v817) / 0x55))
                         + 48 * ((*(_QWORD *)(v953 + 32) + v817) % 0x55);
                    v955 = *(_QWORD *)(v954 + 32) + v812;
                    v956 = *(_QWORD *)(*(_QWORD *)(v954 + 8) + 8 * (v955 / 0x55));
                    v957 = v955 % 0x55;
                    v958 = (_QWORD *)(v956 + 48 * (v955 % 0x55));
                    v959 = v958[1];
                    if (v958[2] != v959)
                    {
                      v960 = v958[4];
                      v961 = (unsigned __int16 **)(v959 + 8 * (v960 >> 11));
                      v962 = *v961;
                      v963 = &(*v961)[v960 & 0x7FF];
                      v964 = *(_QWORD *)(v956 + 48 * v957 + 40) + v960;
                      v965 = *(_QWORD *)(v959 + ((v964 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v964 & 0x7FF);
                      if (v963 != (unsigned __int16 *)v965)
                      {
                        v966 = *(_QWORD *)(a1 + 88);
                        v967 = *(_QWORD *)(a1 + 64);
                        v968 = *(_QWORD *)(a1 + 136);
                        v969 = *(_QWORD *)(a1 + 112);
                        while (1)
                        {
                          v970 = *v963;
                          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v967 + (((v966 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                    + 16 * (v966 + v817))
                                        + v970))
                          {
                            v995 = *(_QWORD *)(*(_QWORD *)(v969 + (((v968 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v968 + v794));
                            if (!*(_BYTE *)(v995 + v812))
                              goto LABEL_1196;
                            v996 = *(_QWORD *)(*(_QWORD *)(v967 + (((v966 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (v966 + v794));
                            if (*(_BYTE *)(v996 + v812))
                              goto LABEL_1196;
                            goto LABEL_1197;
                          }
                          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v969 + 8 * ((v968 + v817) >> 8))
                                                     + 16 * (v968 + v817))
                                         + v970))
                          {
                            v971 = *(_QWORD **)(a1 + 968);
                            if (v971[5] <= v817)
                              std::__throw_out_of_range[abi:ne180100]("deque");
                            v972 = (_QWORD *)*v1097;
                            if (!*v1097)
                              goto LABEL_1172;
                            do
                            {
                              v973 = v972;
                              v972 = (_QWORD *)*v972;
                            }
                            while (v972);
                            if (v973 == v1097 || v973[4] || (v974 = v973[5], v974 > 8))
LABEL_1172:
                              v975 = 0.0;
                            else
                              v975 = dbl_1D513B3B8[v974];
                            v976 = (*v1089 >> 5) & 0x7FFFFFFFFFFFFF8;
                            v977 = v803 + *(_QWORD *)&v975 * v812;
                            v978 = *(_QWORD *)(*(_QWORD *)(*v1084 + v976) + 16 * *v1089);
                            v979 = 0.0;
                            if (v977 < (*(_QWORD *)(*(_QWORD *)(*v1084 + v976) + 16 * *v1089 + 8)
                                       - v978) >> 3)
                              v979 = *(double *)(v978 + 8 * v977);
                            v980 = v971[4] + v817;
                            v981 = *(_QWORD *)(v971[1] + 8 * (v980 / 0x14));
                            v982 = v980 % 0x14;
                            v983 = v981 + 200 * v982;
                            v986 = *(_QWORD **)(v983 + 184);
                            v984 = (_QWORD *)(v983 + 184);
                            v985 = v986;
                            if (!v986)
                              goto LABEL_1181;
                            do
                            {
                              v987 = v985;
                              v985 = (_QWORD *)*v985;
                            }
                            while (v985);
                            if (v987 == v984 || v987[4] || (v988 = v987[5], v988 > 8))
LABEL_1181:
                              v989 = 0.0;
                            else
                              v989 = dbl_1D513B3B8[v988];
                            v990 = v803 + *(_QWORD *)&v989 * v970;
                            v992 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v981 + 200 * v982 + 88)
                                                         + ((*(_QWORD *)(v981 + 200 * v982 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * *(_QWORD *)(v981 + 200 * v982 + 112));
                            v991 = *v992;
                            v993 = 0.0;
                            if (v990 < (v992[1] - *v992) >> 3)
                              v993 = *(double *)(v991 + 8 * v990);
                            if (v993 >= v979)
                              break;
                          }
                          if ((char *)++v963 - (char *)v962 == 4096)
                          {
                            v994 = v961[1];
                            ++v961;
                            v962 = v994;
                            v963 = v994;
                          }
                          if (v963 == (unsigned __int16 *)v965)
                            goto LABEL_1198;
                        }
                        v995 = *(_QWORD *)(*(_QWORD *)(v969 + (((v968 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (v968 + v794));
                        if (!*(_BYTE *)(v995 + v812)
                          || (v996 = *(_QWORD *)(*(_QWORD *)(v967 + (((v966 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v966 + v794)),
                              *(_BYTE *)(v996 + v812)))
                        {
LABEL_1196:
                          nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, v1074, v812);
                          v996 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                       + (((*(_QWORD *)(a1 + 88) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*(_BYTE *)(a1 + 88) + v794));
                          v995 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                                       + 8 * ((*(_QWORD *)(a1 + 136) + v794) >> 8))
                                           + 16 * (*(_BYTE *)(a1 + 136) + v794));
                        }
LABEL_1197:
                        *(_BYTE *)(v996 + v812) = 0;
                        *(_BYTE *)(v995 + v812) = 1;
                        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                         + (((*(_QWORD *)(a1 + 184) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * (*(_BYTE *)(a1 + 184) + v794))
                                 + v812) = 0;
                      }
                    }
LABEL_1198:
                    v832 = *(_QWORD *)(a1 + 136);
                    v833 = *(_QWORD *)(a1 + 112);
                    if (*(_BYTE *)(a1 + 1096)
                      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v832 + v794))
                                   + v812))
                    {
                      std::deque<unsigned short>::deque((uint64_t)v1122, v958);
                      if ((void *)v1123 != v1122[1])
                      {
                        v997 = (unsigned __int16 **)((char *)v1122[1] + 8 * ((unint64_t)v1124 >> 11));
                        v998 = *v997;
                        v999 = &(*v997)[v1124 & 0x7FF];
                        v1000 = *(_QWORD *)((char *)v1122[1]
                                          + (((*((_QWORD *)&v1124 + 1) + (_QWORD)v1124) >> 8) & 0xFFFFFFFFFFFFF8))
                              + 2 * ((*((_QWORD *)&v1124 + 1) + v1124) & 0x7FF);
                        if (v999 != (unsigned __int16 *)v1000)
                        {
                          v1001 = *(_QWORD *)(a1 + 136);
                          v1002 = *(_QWORD *)(a1 + 112);
                          do
                          {
                            v1003 = *v999;
                            v1004 = *(_QWORD *)(*(_QWORD *)(v1002 + (((v1001 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * (v1001 + v817));
                            if (!*(_BYTE *)(v1004 + v1003)
                              || (v1005 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                                + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                    + 16 * (*(_BYTE *)(a1 + 88) + v817)),
                                  *(_BYTE *)(v1005 + v1003)))
                            {
                              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)a1, (unsigned __int16)v818, *v999);
                              v1001 = *(_QWORD *)(a1 + 136);
                              v1002 = *(_QWORD *)(a1 + 112);
                              v1005 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                            + (((*(_QWORD *)(a1 + 88) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                + 16 * (*(_BYTE *)(a1 + 88) + v817));
                              v1004 = *(_QWORD *)(*(_QWORD *)(v1002 + (((v1001 + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                + 16 * (v1001 + v817));
                              v998 = *v997;
                            }
                            *(_BYTE *)(v1005 + v1003) = 0;
                            *(_BYTE *)(v1004 + v1003) = 1;
                            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                             + (((*(_QWORD *)(a1 + 184) + v817) >> 5) & 0x7FFFFFFFFFFFFF8))
                                                 + 16 * (*(_BYTE *)(a1 + 184) + v817))
                                     + v1003) = 0;
                            if ((char *)++v999 - (char *)v998 == 4096)
                            {
                              v1006 = v997[1];
                              ++v997;
                              v998 = v1006;
                              v999 = v1006;
                            }
                          }
                          while (v999 != (unsigned __int16 *)v1000);
                        }
                      }
                      std::deque<unsigned short>::~deque[abi:ne180100](v1122);
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                      v793 = v1079;
                    }
                    v817 = (unsigned __int16)++v818;
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * (v832 + v794))
                                  + v812))
                      v1007 = 0;
                    else
                      v1007 = v793 > (unsigned __int16)v818;
                    if (!v1007)
                      break;
                  }
                  else
                  {
                    v817 = (unsigned __int16)++v818;
                    if (v793 <= (unsigned __int16)v818)
                    {
                      v832 = *(_QWORD *)(a1 + 136);
                      v833 = *(_QWORD *)(a1 + 112);
                      break;
                    }
                  }
                }
                v1008 = *(_QWORD *)(*(_QWORD *)(v833 + (((v832 + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * (v832 + v794));
                if (!*(_BYTE *)(v1008 + v812))
                {
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                                   + (((*(_QWORD *)(a1 + 88) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 88) + v794))
                           + v812) = 1;
                  *(_BYTE *)(v1008 + v812) = 0;
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                                   + (((*(_QWORD *)(a1 + 184) + v794) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 184) + v794))
                           + v812) = 0;
                }
                v805 = v1068;
                v806 = v1065 + 1;
                if ((unsigned __int16 *)((char *)v1065 - *v1068 + 2) == (unsigned __int16 *)4096)
                {
                  v805 = v1068 + 1;
                  v806 = (unsigned __int16 *)v1068[1];
                }
              }
              while (v806 != (unsigned __int16 *)v1061);
            }
          }
          std::deque<unsigned short>::~deque[abi:ne180100](&__src);
          v794 = ++v1074;
        }
        while (v793 > v1074);
        v41 = *(_QWORD *)(a1 + 968);
        goto LABEL_1221;
      }
LABEL_1222:
      v1009 = *(_QWORD *)(v41 + 40);
      if (v1009)
      {
        v1010 = 0;
        v1011 = 0;
        do
        {
          v1012 = *(_QWORD *)(a1 + 136) + v1010;
          v1013 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + ((v1012 >> 5) & 0x7FFFFFFFFFFFFF8));
          v1014 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                        + (((unint64_t)(*(_QWORD *)(a1 + 88) + v1010) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (*(_BYTE *)(a1 + 88) + v1010));
          v1016 = *v1014;
          v1015 = v1014[1];
          v1122[1] = 0;
          v1122[0] = 0;
          v1017 = v1015 - v1016;
          if (v1015 == v1016)
          {
            v1019 = 0;
          }
          else
          {
            v1018 = (char *)operator new(v1015 - v1016);
            v1019 = v1018;
            v1020 = 0;
            v1122[0] = v1018;
            v1021 = *(_QWORD *)(v1013 + 16 * v1012);
            do
            {
              v1018[v1020] = (*(_BYTE *)(v1016 + v1020) ^ 1) & ~*(_BYTE *)(v1021 + v1020);
              ++v1020;
            }
            while (v1017 != v1020);
            v1122[1] = &v1018[v1020];
          }
          nms::BOOLeanMaskToIndices<unsigned short>((uint64_t)&__src, (uint64_t)v1122);
          if (v1019)
            operator delete(v1019);
          if ((_QWORD)v1126 != __src.n128_u64[1])
          {
            v1022 = (unsigned __int16 **)(__src.n128_u64[1] + 8 * ((unint64_t)v1127 >> 11));
            v1023 = *v1022;
            v1024 = &(*v1022)[v1127 & 0x7FF];
            v1025 = *(_QWORD *)(__src.n128_u64[1]
                              + (((*((_QWORD *)&v1127 + 1) + (_QWORD)v1127) >> 8) & 0xFFFFFFFFFFFFF8))
                  + 2 * ((*((_QWORD *)&v1127 + 1) + v1127) & 0x7FF);
            if (v1024 != (unsigned __int16 *)v1025)
            {
              v1026 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64)
                                            + (((unint64_t)(*(_QWORD *)(a1 + 88) + v1010) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(_BYTE *)(a1 + 88) + v1010));
              v1027 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                            + (((unint64_t)(*(_QWORD *)(a1 + 136) + v1010) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(_BYTE *)(a1 + 136) + v1010));
              v1028 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                                            + (((unint64_t)(*(_QWORD *)(a1 + 184) + v1010) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(_BYTE *)(a1 + 184) + v1010));
              do
              {
                v1029 = *v1024++;
                *(_BYTE *)(v1026 + v1029) = 1;
                *(_BYTE *)(v1027 + v1029) = 0;
                *(_BYTE *)(v1028 + v1029) = 0;
                if ((char *)v1024 - (char *)v1023 == 4096)
                {
                  v1030 = v1022[1];
                  ++v1022;
                  v1023 = v1030;
                  v1024 = v1030;
                }
              }
              while (v1024 != (unsigned __int16 *)v1025);
            }
          }
          std::deque<unsigned short>::~deque[abi:ne180100](&__src);
          v1010 = (unsigned __int16)++v1011;
        }
        while (v1009 > (unsigned __int16)v1011);
      }
    }
  }
  else
  {
LABEL_1221:
    if (v41)
      goto LABEL_1222;
  }
}

void sub_1D50B37D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *__p;
  uint64_t v71;

  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a41);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a47);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a53);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a59);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a65);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&__p);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&STACK[0x220]);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100]((_QWORD *)(v71 - 240));
  _Unwind_Resume(a1);
}

uint64_t nms::RectForest<unsigned short,double>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  std::deque<std::valarray<double>>::__move_assign(a1 + 80, a2 + 80);
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::__move_assign(a1 + 128, a2 + 128);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  std::__tree<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::__map_value_compare<nms::ForestLevelType,std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::less<nms::ForestLevelType>,true>,std::allocator<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>>>::__move_assign((_QWORD *)(a1 + 176), (_QWORD *)(a2 + 176));
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

double *std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::operator std::valarray<double>(double *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  double *v8;

  *result = 0.0;
  result[1] = 0.0;
  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
  {
    v3 = result;
    if (v2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    result = (double *)operator new(8 * v2);
    *v3 = result;
    v3[1] = result;
    v5 = *(_QWORD *)(a2 + 32);
    v6 = (double *)(**(_QWORD **)(a2 + 40) + 8 * *(_QWORD *)(a2 + 48));
    v7 = 8 * *(_QWORD *)(a2 + 64);
    v8 = (double *)(**(_QWORD **)(a2 + 8) + 8 * *(_QWORD *)(a2 + 16));
    do
    {
      *result++ = *v8 * *v6;
      v6 = (double *)((char *)v6 + v7);
      v8 += v5;
      --v2;
    }
    while (v2);
    v3[1] = result;
  }
  return result;
}

void sub_1D50B3E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::valarray<unsigned char>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  int64_t v147;
  char *v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  size_t v166;
  char *v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;

  v3 = a1[5];
  v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      v25 = a1[4];
      v26 = a1[1];
      v27 = a1[2];
      v28 = (char *)(v26 + 8 * (v25 >> 8));
      if (v27 == v26)
      {
        v29 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100]((_QWORD *)(v26 + 8 * (v25 >> 8)), 0, a2);
        v32 = 0;
        v31 = (char *)(v26 + 8 * ((v25 + v3) >> 8));
      }
      else
      {
        v29 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100]((_QWORD *)(v26 + 8 * (v25 >> 8)), *(_QWORD *)v28 + 16 * v25, a2);
        v31 = (char *)(v26 + 8 * ((v25 + v3) >> 8));
        v32 = *(_QWORD *)v31 + 16 * (v25 + v3);
      }
      if (v32 != v30)
      {
        v55 = v30 - *(_QWORD *)v29;
        v56 = ((v32 - *(_QWORD *)v31) >> 4) + 32 * (v31 - v29) - (v55 >> 4);
        if (v56 >= 1)
        {
          if (v27 == v26)
            v57 = 0;
          else
            v57 = *(_QWORD *)v28 + 16 * v25;
          if (v57 == v30)
            v58 = 0;
          else
            v58 = (v55 >> 4) + 32 * (v29 - v28) - ((v57 - *(_QWORD *)v28) >> 4);
          v59 = std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100]((_QWORD *)(v26 + 8 * (v25 >> 8)), v57, v58);
          if (v60 != v32)
          {
            v61 = v59;
            v62 = v60;
            do
            {
              v63 = *(void **)v62;
              if (*(_QWORD *)v62)
              {
                if (*(void **)(v62 + 8) != v63)
                  *(_QWORD *)(v62 + 8) = v63;
                operator delete(v63);
                *(_QWORD *)v62 = 0;
                *(_QWORD *)(v62 + 8) = 0;
              }
              v62 += 16;
              if (v62 - *v61 == 4096)
              {
                v64 = v61[1];
                ++v61;
                v62 = v64;
              }
            }
            while (v62 != v32);
            v3 = a1[5];
          }
          a1[5] = v3 - v56;
          while ((std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0)
            ;
        }
      }
    }
  }
  else
  {
    v5 = (char *)a1[1];
    v6 = (char *)a1[2];
    v7 = v6 - v5;
    if (v6 == v5)
      v8 = 0;
    else
      v8 = 32 * (v6 - v5) - 1;
    v9 = a1[4];
    v10 = v9 + v3;
    v11 = v8 - (v9 + v3);
    v12 = v4 >= v11;
    v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5)
        v14 = v13 + 1;
      else
        v14 = v13;
      if ((_BYTE)v14)
        v15 = (v14 >> 8) + 1;
      else
        v15 = v14 >> 8;
      if (v15 >= v9 >> 8)
        v16 = v9 >> 8;
      else
        v16 = v15;
      if (v15 <= v9 >> 8)
      {
        for (a1[4] = v9 - (v16 << 8); v16; --v16)
        {
          v33 = (_QWORD *)a1[1];
          v36 = *v33;
          v34 = (char *)(v33 + 1);
          v35 = v36;
          a1[1] = v34;
          if (v6 == (char *)a1[3])
          {
            v37 = (uint64_t)&v34[-*a1];
            if ((unint64_t)v34 <= *a1)
            {
              if (v6 == (char *)*a1)
                v45 = 1;
              else
                v45 = (uint64_t)&v6[-*a1] >> 2;
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v45);
              v48 = &v46[8 * (v45 >> 2)];
              v49 = (uint64_t *)a1[1];
              v6 = v48;
              v50 = a1[2] - (_QWORD)v49;
              if (v50)
              {
                v6 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
                v51 = 8 * (v50 >> 3);
                v52 = &v46[8 * (v45 >> 2)];
                do
                {
                  v53 = *v49++;
                  *(_QWORD *)v52 = v53;
                  v52 += 8;
                  v51 -= 8;
                }
                while (v51);
              }
              v54 = (char *)*a1;
              *a1 = v46;
              a1[1] = v48;
              a1[2] = v6;
              a1[3] = &v46[8 * v47];
              if (v54)
              {
                operator delete(v54);
                v6 = (char *)a1[2];
              }
            }
            else
            {
              v38 = v37 >> 3;
              v39 = v37 >> 3 < -1;
              v40 = (v37 >> 3) + 2;
              if (v39)
                v41 = v40;
              else
                v41 = v38 + 1;
              v42 = &v34[-8 * (v41 >> 1)];
              v43 = v6 - v34;
              if (v6 != v34)
              {
                memmove(&v34[-8 * (v41 >> 1)], v34, v6 - v34);
                v6 = (char *)a1[1];
              }
              v44 = &v6[-8 * (v41 >> 1)];
              v6 = &v42[v43];
              a1[1] = v44;
              a1[2] = &v42[v43];
            }
          }
          *(_QWORD *)v6 = v35;
          v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        v17 = v15 - v16;
        v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - (v7 >> 3))
        {
          while (1)
          {
            if (!v17)
            {
              v15 = v16;
              goto LABEL_157;
            }
            if ((char *)a1[3] == v6)
              break;
            *(_QWORD *)v6 = operator new(0x1000uLL);
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            v115 = operator new(0x1000uLL);
            v116 = (char *)a1[1];
            if (v116 == (char *)*a1)
            {
              v118 = a1[3];
              if ((unint64_t)v6 >= v118)
              {
                v123 = v118 - (_QWORD)v116;
                v107 = v123 == 0;
                v124 = v123 >> 2;
                if (v107)
                  v125 = 1;
                else
                  v125 = v124;
                v126 = 2 * v125;
                v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v125);
                v117 = &v127[(v126 + 6) & 0xFFFFFFFFFFFFFFF8];
                v129 = (uint64_t *)a1[1];
                v130 = v117;
                v131 = a1[2] - (_QWORD)v129;
                if (v131)
                {
                  v130 = &v117[v131 & 0xFFFFFFFFFFFFFFF8];
                  v132 = 8 * (v131 >> 3);
                  v133 = v117;
                  do
                  {
                    v134 = *v129++;
                    *(_QWORD *)v133 = v134;
                    v133 += 8;
                    v132 -= 8;
                  }
                  while (v132);
                }
                v135 = (char *)*a1;
                *a1 = v127;
                a1[1] = v117;
                a1[2] = v130;
                a1[3] = &v127[8 * v128];
                if (v135)
                {
                  operator delete(v135);
                  v117 = (char *)a1[1];
                }
              }
              else
              {
                v119 = (uint64_t)(v118 - (_QWORD)v6) >> 3;
                if (v119 >= -1)
                  v120 = v119 + 1;
                else
                  v120 = v119 + 2;
                v121 = v120 >> 1;
                v122 = &v6[8 * (v120 >> 1)];
                v117 = &v122[-(v6 - v116)];
                if (v6 != v116)
                {
                  memmove(&v122[-(v6 - v116)], v116, v6 - v116);
                  v6 = (char *)a1[2];
                }
                a1[1] = v117;
                a1[2] = &v6[8 * v121];
              }
            }
            else
            {
              v117 = (char *)a1[1];
            }
            *((_QWORD *)v117 - 1) = v115;
            v6 = (char *)a1[2];
            v136 = a1[1] - 8;
            a1[1] = v136;
            if (&v6[-v136] == (char *)8)
              v137 = 255;
            else
              v137 = 256;
            v9 = v137 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_157:
          for (a1[4] = v9 - (v15 << 8); v15; --v15)
          {
            v138 = (_QWORD *)a1[1];
            v141 = *v138;
            v139 = (char *)(v138 + 1);
            v140 = v141;
            a1[1] = v139;
            if (v6 == (char *)a1[3])
            {
              v142 = (uint64_t)&v139[-*a1];
              if ((unint64_t)v139 <= *a1)
              {
                if (v6 == (char *)*a1)
                  v149 = 1;
                else
                  v149 = (uint64_t)&v6[-*a1] >> 2;
                v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v149);
                v152 = &v150[8 * (v149 >> 2)];
                v153 = (uint64_t *)a1[1];
                v6 = v152;
                v154 = a1[2] - (_QWORD)v153;
                if (v154)
                {
                  v6 = &v152[v154 & 0xFFFFFFFFFFFFFFF8];
                  v155 = 8 * (v154 >> 3);
                  v156 = &v150[8 * (v149 >> 2)];
                  do
                  {
                    v157 = *v153++;
                    *(_QWORD *)v156 = v157;
                    v156 += 8;
                    v155 -= 8;
                  }
                  while (v155);
                }
                v158 = (char *)*a1;
                *a1 = v150;
                a1[1] = v152;
                a1[2] = v6;
                a1[3] = &v150[8 * v151];
                if (v158)
                {
                  operator delete(v158);
                  v6 = (char *)a1[2];
                }
              }
              else
              {
                v143 = v142 >> 3;
                v39 = v142 >> 3 < -1;
                v144 = (v142 >> 3) + 2;
                if (v39)
                  v145 = v144;
                else
                  v145 = v143 + 1;
                v146 = &v139[-8 * (v145 >> 1)];
                v147 = v6 - v139;
                if (v6 != v139)
                {
                  memmove(&v139[-8 * (v145 >> 1)], v139, v6 - v139);
                  v6 = (char *)a1[1];
                }
                v148 = &v6[-8 * (v145 >> 1)];
                v6 = &v146[v147];
                a1[1] = v148;
                a1[2] = &v146[v147];
              }
            }
            *(_QWORD *)v6 = v140;
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          v19 = v7 >> 3;
          v20 = v18 >> 2;
          if (v20 <= v17 + v19)
            v21 = v17 + v19;
          else
            v21 = v20;
          v22 = v19 - v16;
          v170 = v4;
          if (v21)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v21);
          }
          else
          {
            v24 = 0;
            v23 = 0;
          }
          v169 = v16 << 8;
          v65 = &v24[8 * v22];
          v66 = &v24[8 * v23];
          v67 = v65;
          do
          {
            v68 = operator new(0x1000uLL);
            if (v65 == v66)
            {
              if (v67 <= v24)
              {
                if (v65 == v24)
                  v74 = 1;
                else
                  v74 = (v65 - v24) >> 2;
                v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v74);
                v77 = v24;
                v78 = &v76[8 * (v74 >> 2)];
                v69 = v78;
                v79 = v65 - v67;
                if (v65 != v67)
                {
                  v69 = &v78[v79 & 0xFFFFFFFFFFFFFFF8];
                  v80 = 8 * (v79 >> 3);
                  v81 = &v76[8 * (v74 >> 2)];
                  do
                  {
                    v82 = *(_QWORD *)v67;
                    v67 += 8;
                    *(_QWORD *)v81 = v82;
                    v81 += 8;
                    v80 -= 8;
                  }
                  while (v80);
                }
                v66 = &v76[8 * v75];
                if (v77)
                  operator delete(v77);
                v67 = v78;
                v24 = v76;
              }
              else
              {
                v70 = (v67 - v24) >> 3;
                if (v70 >= -1)
                  v71 = v70 + 1;
                else
                  v71 = v70 + 2;
                v72 = v65;
                if (v65 != v67)
                {
                  memmove(&v67[-8 * (v71 >> 1)], v67, v65 - v67);
                  v72 = v67;
                }
                v73 = -(v71 >> 1);
                v69 = &v65[-8 * (v71 >> 1)];
                v67 = &v72[8 * v73];
                v66 = v65;
              }
            }
            else
            {
              v69 = v65;
            }
            *(_QWORD *)v69 = v68;
            v65 = v69 + 8;
            --v17;
          }
          while (v17);
          v83 = (_QWORD *)a1[1];
          if (v16)
          {
            do
            {
              if (v65 == v66)
              {
                if (v67 <= v24)
                {
                  if (v65 == v24)
                    v90 = 1;
                  else
                    v90 = (v65 - v24) >> 2;
                  v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v90);
                  v93 = v91;
                  v85 = &v91[8 * (v90 >> 2)];
                  v84 = v85;
                  v94 = v65 - v67;
                  if (v65 != v67)
                  {
                    v84 = &v85[v94 & 0xFFFFFFFFFFFFFFF8];
                    v95 = 8 * (v94 >> 3);
                    v96 = v85;
                    do
                    {
                      v97 = *(_QWORD *)v67;
                      v67 += 8;
                      *(_QWORD *)v96 = v97;
                      v96 += 8;
                      v95 -= 8;
                    }
                    while (v95);
                  }
                  v65 = &v91[8 * v92];
                  if (v24)
                    operator delete(v24);
                  v24 = v93;
                }
                else
                {
                  v86 = v24;
                  v87 = (v67 - v24) >> 3;
                  if (v87 >= -1)
                    v88 = v87 + 1;
                  else
                    v88 = v87 + 2;
                  v89 = v65;
                  if (v65 != v67)
                  {
                    memmove(&v67[-8 * (v88 >> 1)], v67, v65 - v67);
                    v89 = v67;
                  }
                  v84 = &v65[-8 * (v88 >> 1)];
                  v85 = &v89[-8 * (v88 >> 1)];
                  v24 = v86;
                }
              }
              else
              {
                v84 = v65;
                v85 = v67;
                v65 = v66;
              }
              v66 = v65;
              *(_QWORD *)v84 = *v83;
              v6 = v84 + 8;
              v83 = (_QWORD *)(a1[1] + 8);
              a1[1] = v83;
              v65 = v6;
              v67 = v85;
              --v16;
            }
            while (v16);
          }
          else
          {
            v6 = v65;
            v85 = v67;
          }
          v98 = (_QWORD *)a1[2];
          if (v98 != v83)
          {
            do
            {
              if (v85 == v24)
              {
                if (v6 >= v66)
                {
                  if (v66 == v24)
                    v103 = 1;
                  else
                    v103 = (v66 - v24) >> 2;
                  v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v103);
                  v106 = v104;
                  v85 = &v104[(2 * v103 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v108 = v6 - v24;
                  v107 = v6 == v24;
                  v6 = v85;
                  if (!v107)
                  {
                    v6 = &v85[v108 & 0xFFFFFFFFFFFFFFF8];
                    v109 = 8 * (v108 >> 3);
                    v110 = &v104[(2 * v103 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v111 = v24;
                    do
                    {
                      v112 = *(_QWORD *)v111;
                      v111 += 8;
                      *(_QWORD *)v110 = v112;
                      v110 += 8;
                      v109 -= 8;
                    }
                    while (v109);
                  }
                  v66 = &v104[8 * v105];
                  if (v24)
                    operator delete(v24);
                  v24 = v106;
                }
                else
                {
                  v99 = (v66 - v6) >> 3;
                  if (v99 >= -1)
                    v100 = v99 + 1;
                  else
                    v100 = v99 + 2;
                  v101 = v100 >> 1;
                  v85 = &v24[8 * (v100 >> 1)];
                  v102 = v24;
                  if (v6 != v24)
                  {
                    memmove(v85, v24, v6 - v24);
                    v102 = v6;
                  }
                  v6 = &v102[8 * v101];
                }
              }
              v113 = *--v98;
              *((_QWORD *)v85 - 1) = v113;
              v85 -= 8;
            }
            while (v98 != (_QWORD *)a1[1]);
          }
          v114 = (char *)*a1;
          *a1 = v24;
          a1[1] = v85;
          a1[2] = v6;
          a1[3] = v66;
          v4 = v170;
          a1[4] -= v169;
          if (v114)
          {
            operator delete(v114);
            v6 = (char *)a1[2];
          }
        }
      }
      v3 = a1[5];
      v5 = (char *)a1[1];
      v10 = a1[4] + v3;
    }
    v159 = &v5[8 * (v10 >> 8)];
    if (v6 == v5)
      v160 = 0;
    else
      v160 = (char *)(*(_QWORD *)v159 + 16 * v10);
    v161 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](v159, (uint64_t)v160, v4);
    if (v160 != v162)
    {
      v163 = v161;
      v164 = (uint64_t)v162;
      do
      {
        if (v159 == v163)
          v165 = v164;
        else
          v165 = *(_QWORD *)v159 + 4096;
        if (v160 == (char *)v165)
        {
          v167 = v160;
        }
        else
        {
          v166 = (v165 - (_QWORD)v160) & 0xFFFFFFFFFFFFFFF0;
          bzero(v160, v166);
          v167 = &v160[v166];
          v3 = a1[5];
        }
        v3 += (v167 - v160) >> 4;
        a1[5] = v3;
        if (v159 == v163)
          break;
        v168 = (char *)*((_QWORD *)v159 + 1);
        v159 += 8;
        v160 = v168;
      }
      while (v168 != (char *)v164);
    }
  }
}

void sub_1D50B4808(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  int64_t v143;
  char *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  size_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;

  v3 = a1[5];
  v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      v23 = a1[4];
      v24 = a1[1];
      v25 = a1[2];
      v26 = (char *)(v24 + 8 * (v23 / 0x55));
      v27 = v25 == v24 ? 0 : *(_QWORD *)v26 + 48 * (v23 % 0x55);
      v165 = (char *)(v24 + 8 * (v23 / 0x55));
      v166 = (char *)v27;
      std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v165, a2);
      v50 = (char *)(v24 + 8 * ((v23 + v3) / 0x55));
      v51 = v25 == v24 ? 0 : *(_QWORD *)v50 + 48 * ((v23 + v3) % 0x55);
      if ((char *)v51 != v166)
      {
        v52 = 85 * ((v50 - v165) >> 3) - 0x5555555555555555 * ((uint64_t)(v51 - *(_QWORD *)v50) >> 4);
        v53 = (uint64_t)&v166[-*(_QWORD *)v165] >> 4;
        v54 = v52 + 0x5555555555555555 * v53;
        if (v54 >= 1)
        {
          if (v25 == v24)
            v55 = 0;
          else
            v55 = *(_QWORD *)v26 + 48 * (v23 % 0x55);
          if (v166 == (char *)v55)
            v56 = 0;
          else
            v56 = 85 * ((v165 - v26) >> 3)
                - 0x5555555555555555 * v53
                + 0x5555555555555555 * ((uint64_t)(v55 - *(_QWORD *)v26) >> 4);
          v165 = (char *)(v24 + 8 * (v23 / 0x55));
          v166 = (char *)v55;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v165, v56);
          v57 = (uint64_t)v166;
          if (v166 != (char *)v51)
          {
            v58 = v165;
            do
            {
              v57 = std::deque<std::deque<std::deque<unsigned short>>>::~deque[abi:ne180100](v57) + 48;
              if (v57 - *(_QWORD *)v58 == 4080)
              {
                v59 = *((_QWORD *)v58 + 1);
                v58 += 8;
                v57 = v59;
              }
            }
            while (v57 != v51);
            v3 = a1[5];
          }
          a1[5] = v3 - v54;
          while ((std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0);
        }
      }
    }
  }
  else
  {
    v5 = (char *)a1[1];
    v6 = (char *)a1[2];
    v7 = (v6 - v5) >> 3;
    if (v6 == v5)
      v8 = 0;
    else
      v8 = 85 * v7 - 1;
    v9 = a1[4];
    v10 = v9 + v3;
    v11 = v8 - (v9 + v3);
    v12 = v4 >= v11;
    v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5)
        v14 = v13 + 1;
      else
        v14 = v13;
      if (v14 % 0x55)
        v15 = v14 / 0x55 + 1;
      else
        v15 = v14 / 0x55;
      if (v15 >= v9 / 0x55)
        v16 = v9 / 0x55;
      else
        v16 = v15;
      if (v15 <= v9 / 0x55)
      {
        for (a1[4] = v9 - 85 * v16; v16; --v16)
        {
          v28 = (_QWORD *)a1[1];
          v31 = *v28;
          v29 = (char *)(v28 + 1);
          v30 = v31;
          a1[1] = v29;
          if (v6 == (char *)a1[3])
          {
            v32 = (uint64_t)&v29[-*a1];
            if ((unint64_t)v29 <= *a1)
            {
              if (v6 == (char *)*a1)
                v40 = 1;
              else
                v40 = (uint64_t)&v6[-*a1] >> 2;
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
              v43 = &v41[8 * (v40 >> 2)];
              v44 = (uint64_t *)a1[1];
              v6 = v43;
              v45 = a1[2] - (_QWORD)v44;
              if (v45)
              {
                v6 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
                v46 = 8 * (v45 >> 3);
                v47 = &v41[8 * (v40 >> 2)];
                do
                {
                  v48 = *v44++;
                  *(_QWORD *)v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              v49 = (char *)*a1;
              *a1 = v41;
              a1[1] = v43;
              a1[2] = v6;
              a1[3] = &v41[8 * v42];
              if (v49)
              {
                operator delete(v49);
                v6 = (char *)a1[2];
              }
            }
            else
            {
              v33 = v32 >> 3;
              v34 = v32 >> 3 < -1;
              v35 = (v32 >> 3) + 2;
              if (v34)
                v36 = v35;
              else
                v36 = v33 + 1;
              v37 = &v29[-8 * (v36 >> 1)];
              v38 = v6 - v29;
              if (v6 != v29)
              {
                memmove(&v29[-8 * (v36 >> 1)], v29, v6 - v29);
                v6 = (char *)a1[1];
              }
              v39 = &v6[-8 * (v36 >> 1)];
              v6 = &v37[v38];
              a1[1] = v39;
              a1[2] = &v37[v38];
            }
          }
          *(_QWORD *)v6 = v30;
          v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        v17 = v15 - v16;
        v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - v7)
        {
          while (1)
          {
            if (!v17)
            {
              v15 = v16;
              goto LABEL_156;
            }
            if ((char *)a1[3] == v6)
              break;
            *(_QWORD *)v6 = operator new(0xFF0uLL);
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            v111 = operator new(0xFF0uLL);
            v112 = (char *)a1[1];
            if (v112 == (char *)*a1)
            {
              v114 = a1[3];
              if ((unint64_t)v6 >= v114)
              {
                v119 = v114 - (_QWORD)v112;
                v103 = v119 == 0;
                v120 = v119 >> 2;
                if (v103)
                  v121 = 1;
                else
                  v121 = v120;
                v122 = 2 * v121;
                v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v121);
                v113 = &v123[(v122 + 6) & 0xFFFFFFFFFFFFFFF8];
                v125 = (uint64_t *)a1[1];
                v126 = v113;
                v127 = a1[2] - (_QWORD)v125;
                if (v127)
                {
                  v126 = &v113[v127 & 0xFFFFFFFFFFFFFFF8];
                  v128 = 8 * (v127 >> 3);
                  v129 = v113;
                  do
                  {
                    v130 = *v125++;
                    *(_QWORD *)v129 = v130;
                    v129 += 8;
                    v128 -= 8;
                  }
                  while (v128);
                }
                v131 = (char *)*a1;
                *a1 = v123;
                a1[1] = v113;
                a1[2] = v126;
                a1[3] = &v123[8 * v124];
                if (v131)
                {
                  operator delete(v131);
                  v113 = (char *)a1[1];
                }
              }
              else
              {
                v115 = (uint64_t)(v114 - (_QWORD)v6) >> 3;
                if (v115 >= -1)
                  v116 = v115 + 1;
                else
                  v116 = v115 + 2;
                v117 = v116 >> 1;
                v118 = &v6[8 * (v116 >> 1)];
                v113 = &v118[-(v6 - v112)];
                if (v6 != v112)
                {
                  memmove(&v118[-(v6 - v112)], v112, v6 - v112);
                  v6 = (char *)a1[2];
                }
                a1[1] = v113;
                a1[2] = &v6[8 * v117];
              }
            }
            else
            {
              v113 = (char *)a1[1];
            }
            *((_QWORD *)v113 - 1) = v111;
            v6 = (char *)a1[2];
            v132 = a1[1] - 8;
            a1[1] = v132;
            if (&v6[-v132] == (char *)8)
              v133 = 84;
            else
              v133 = 85;
            v9 = v133 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_156:
          for (a1[4] = v9 - 85 * v15; v15; --v15)
          {
            v134 = (_QWORD *)a1[1];
            v137 = *v134;
            v135 = (char *)(v134 + 1);
            v136 = v137;
            a1[1] = v135;
            if (v6 == (char *)a1[3])
            {
              v138 = (uint64_t)&v135[-*a1];
              if ((unint64_t)v135 <= *a1)
              {
                if (v6 == (char *)*a1)
                  v145 = 1;
                else
                  v145 = (uint64_t)&v6[-*a1] >> 2;
                v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v145);
                v148 = &v146[8 * (v145 >> 2)];
                v149 = (uint64_t *)a1[1];
                v6 = v148;
                v150 = a1[2] - (_QWORD)v149;
                if (v150)
                {
                  v6 = &v148[v150 & 0xFFFFFFFFFFFFFFF8];
                  v151 = 8 * (v150 >> 3);
                  v152 = &v146[8 * (v145 >> 2)];
                  do
                  {
                    v153 = *v149++;
                    *(_QWORD *)v152 = v153;
                    v152 += 8;
                    v151 -= 8;
                  }
                  while (v151);
                }
                v154 = (char *)*a1;
                *a1 = v146;
                a1[1] = v148;
                a1[2] = v6;
                a1[3] = &v146[8 * v147];
                if (v154)
                {
                  operator delete(v154);
                  v6 = (char *)a1[2];
                }
              }
              else
              {
                v139 = v138 >> 3;
                v34 = v138 >> 3 < -1;
                v140 = (v138 >> 3) + 2;
                if (v34)
                  v141 = v140;
                else
                  v141 = v139 + 1;
                v142 = &v135[-8 * (v141 >> 1)];
                v143 = v6 - v135;
                if (v6 != v135)
                {
                  memmove(&v135[-8 * (v141 >> 1)], v135, v6 - v135);
                  v6 = (char *)a1[1];
                }
                v144 = &v6[-8 * (v141 >> 1)];
                v6 = &v142[v143];
                a1[1] = v144;
                a1[2] = &v142[v143];
              }
            }
            *(_QWORD *)v6 = v136;
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          v19 = v18 >> 2;
          if (v19 <= v17 + v7)
            v20 = (char *)(v17 + v7);
          else
            v20 = (char *)v19;
          v21 = v7 - v16;
          v164 = a2 - v3;
          if (v20)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v20);
          else
            v22 = 0;
          v163 = -85 * v16;
          v60 = &v20[8 * v21];
          v61 = &v20[8 * v22];
          v62 = v60;
          v63 = v20;
          do
          {
            v64 = operator new(0xFF0uLL);
            if (v60 == v61)
            {
              if (v62 <= v63)
              {
                if (v60 == v63)
                  v70 = 1;
                else
                  v70 = (v60 - v63) >> 2;
                v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v70);
                v73 = v63;
                v74 = &v72[8 * (v70 >> 2)];
                v65 = v74;
                v75 = v60 - v62;
                if (v60 != v62)
                {
                  v65 = &v74[v75 & 0xFFFFFFFFFFFFFFF8];
                  v76 = 8 * (v75 >> 3);
                  v77 = &v72[8 * (v70 >> 2)];
                  do
                  {
                    v78 = *(_QWORD *)v62;
                    v62 += 8;
                    *(_QWORD *)v77 = v78;
                    v77 += 8;
                    v76 -= 8;
                  }
                  while (v76);
                }
                v61 = &v72[8 * v71];
                if (v73)
                  operator delete(v73);
                v62 = v74;
                v63 = v72;
              }
              else
              {
                v66 = (v62 - v63) >> 3;
                if (v66 >= -1)
                  v67 = v66 + 1;
                else
                  v67 = v66 + 2;
                v68 = v60;
                if (v60 != v62)
                {
                  memmove(&v62[-8 * (v67 >> 1)], v62, v60 - v62);
                  v68 = v62;
                }
                v69 = -(v67 >> 1);
                v65 = &v60[-8 * (v67 >> 1)];
                v62 = &v68[8 * v69];
                v61 = v60;
              }
            }
            else
            {
              v65 = v60;
            }
            *(_QWORD *)v65 = v64;
            v60 = v65 + 8;
            --v17;
          }
          while (v17);
          v79 = (_QWORD *)a1[1];
          if (v16)
          {
            do
            {
              if (v60 == v61)
              {
                if (v62 <= v63)
                {
                  if (v60 == v63)
                    v86 = 1;
                  else
                    v86 = (v60 - v63) >> 2;
                  v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v86);
                  v89 = v87;
                  v81 = &v87[8 * (v86 >> 2)];
                  v80 = v81;
                  v90 = v60 - v62;
                  if (v60 != v62)
                  {
                    v80 = &v81[v90 & 0xFFFFFFFFFFFFFFF8];
                    v91 = 8 * (v90 >> 3);
                    v92 = v81;
                    do
                    {
                      v93 = *(_QWORD *)v62;
                      v62 += 8;
                      *(_QWORD *)v92 = v93;
                      v92 += 8;
                      v91 -= 8;
                    }
                    while (v91);
                  }
                  v60 = &v87[8 * v88];
                  if (v63)
                    operator delete(v63);
                  v63 = v89;
                }
                else
                {
                  v82 = v63;
                  v83 = (v62 - v63) >> 3;
                  if (v83 >= -1)
                    v84 = v83 + 1;
                  else
                    v84 = v83 + 2;
                  v85 = v60;
                  if (v60 != v62)
                  {
                    memmove(&v62[-8 * (v84 >> 1)], v62, v60 - v62);
                    v85 = v62;
                  }
                  v80 = &v60[-8 * (v84 >> 1)];
                  v81 = &v85[-8 * (v84 >> 1)];
                  v63 = v82;
                }
              }
              else
              {
                v80 = v60;
                v81 = v62;
                v60 = v61;
              }
              v61 = v60;
              *(_QWORD *)v80 = *v79;
              v6 = v80 + 8;
              v79 = (_QWORD *)(a1[1] + 8);
              a1[1] = v79;
              v60 = v6;
              v62 = v81;
              --v16;
            }
            while (v16);
          }
          else
          {
            v6 = v60;
            v81 = v62;
          }
          v94 = (_QWORD *)a1[2];
          if (v94 != v79)
          {
            do
            {
              if (v81 == v63)
              {
                if (v6 >= v61)
                {
                  if (v61 == v63)
                    v99 = 1;
                  else
                    v99 = (v61 - v63) >> 2;
                  v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v99);
                  v102 = v100;
                  v81 = &v100[(2 * v99 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v104 = v6 - v63;
                  v103 = v6 == v63;
                  v6 = v81;
                  if (!v103)
                  {
                    v6 = &v81[v104 & 0xFFFFFFFFFFFFFFF8];
                    v105 = 8 * (v104 >> 3);
                    v106 = &v100[(2 * v99 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v107 = v63;
                    do
                    {
                      v108 = *(_QWORD *)v107;
                      v107 += 8;
                      *(_QWORD *)v106 = v108;
                      v106 += 8;
                      v105 -= 8;
                    }
                    while (v105);
                  }
                  v61 = &v100[8 * v101];
                  if (v63)
                    operator delete(v63);
                  v63 = v102;
                }
                else
                {
                  v95 = (v61 - v6) >> 3;
                  if (v95 >= -1)
                    v96 = v95 + 1;
                  else
                    v96 = v95 + 2;
                  v97 = v96 >> 1;
                  v81 = &v63[8 * (v96 >> 1)];
                  v98 = v63;
                  if (v6 != v63)
                  {
                    memmove(v81, v63, v6 - v63);
                    v98 = v6;
                  }
                  v6 = &v98[8 * v97];
                }
              }
              v109 = *--v94;
              *((_QWORD *)v81 - 1) = v109;
              v81 -= 8;
            }
            while (v94 != (_QWORD *)a1[1]);
          }
          v110 = (char *)*a1;
          *a1 = v63;
          a1[1] = v81;
          a1[2] = v6;
          a1[3] = v61;
          v4 = v164;
          a1[4] += v163;
          if (v110)
          {
            operator delete(v110);
            v6 = (char *)a1[2];
          }
        }
      }
      v3 = a1[5];
      v5 = (char *)a1[1];
      v10 = a1[4] + v3;
    }
    v155 = &v5[8 * (v10 / 0x55)];
    if (v6 == v5)
      v156 = 0;
    else
      v156 = (char *)(*(_QWORD *)v155 + 48 * (v10 % 0x55));
    v165 = &v5[8 * (v10 / 0x55)];
    v166 = v156;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v165, v4);
    v157 = (uint64_t)v166;
    if (v156 != v166)
    {
      v158 = v165;
      do
      {
        if (v155 == v158)
          v159 = v157;
        else
          v159 = *(_QWORD *)v155 + 4080;
        if (v156 == (char *)v159)
        {
          v161 = v156;
        }
        else
        {
          v160 = 48 * ((v159 - (uint64_t)v156 - 48) / 0x30uLL) + 48;
          bzero(v156, v160);
          v161 = &v156[v160];
          v3 = a1[5];
        }
        v3 -= 0x5555555555555555 * ((v161 - v156) >> 4);
        a1[5] = v3;
        if (v155 == v158)
          break;
        v162 = (char *)*((_QWORD *)v155 + 1);
        v155 += 8;
        v156 = v162;
      }
      while (v162 != (char *)v157);
    }
  }
}

void sub_1D50B5268(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::deque<std::deque<std::deque<unsigned short>>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  int64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  size_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;

  v3 = a1[5];
  v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      v23 = a1[4];
      v25 = a1[1];
      v24 = a1[2];
      v26 = (char *)(v25 + 8 * (v23 / 0x55));
      v27 = v24 == v25 ? 0 : *(_QWORD *)v26 + 48 * (v23 % 0x55);
      v168 = (char *)(v25 + 8 * (v23 / 0x55));
      v169 = (char *)v27;
      std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, a2);
      v50 = (char *)(v25 + 8 * ((v23 + v3) / 0x55));
      v51 = v24 == v25 ? 0 : *(_QWORD *)v50 + 48 * ((v23 + v3) % 0x55);
      if ((char *)v51 != v169)
      {
        v52 = 85 * ((v50 - v168) >> 3) - 0x5555555555555555 * ((uint64_t)(v51 - *(_QWORD *)v50) >> 4);
        v53 = (uint64_t)&v169[-*(_QWORD *)v168] >> 4;
        v54 = v52 + 0x5555555555555555 * v53;
        if (v54 >= 1)
        {
          if (v24 == v25)
            v55 = 0;
          else
            v55 = *(_QWORD *)v26 + 48 * (v23 % 0x55);
          if (v169 == (char *)v55)
            v56 = 0;
          else
            v56 = 85 * ((v168 - v26) >> 3)
                - 0x5555555555555555 * v53
                + 0x5555555555555555 * ((uint64_t)(v55 - *(_QWORD *)v26) >> 4);
          v168 = (char *)(v25 + 8 * (v23 / 0x55));
          v169 = (char *)v55;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v56);
          v57 = (uint64_t)v169;
          if (v169 != (char *)v51)
          {
            v58 = v168;
            do
            {
              v57 = std::deque<std::deque<unsigned short>>::~deque[abi:ne180100](v57) + 48;
              if (v57 - *(_QWORD *)v58 == 4080)
              {
                v59 = *((_QWORD *)v58 + 1);
                v58 += 8;
                v57 = v59;
              }
            }
            while (v57 != v51);
            v25 = a1[1];
            v24 = a1[2];
            v23 = a1[4];
            v3 = a1[5];
          }
          v60 = 85 * ((v24 - v25) >> 3) - 1;
          if (v24 == v25)
            v60 = 0;
          a1[5] = v3 - v54;
          if (v60 - (v3 - v54 + v23) >= 0xAA)
          {
            do
            {
              operator delete(*(void **)(v24 - 8));
              v61 = a1[1];
              v24 = a1[2] - 8;
              v62 = 85 * ((v24 - v61) >> 3) - 1;
              a1[2] = v24;
              if (v24 == v61)
                v62 = 0;
            }
            while ((unint64_t)(v62 - (a1[5] + a1[4])) > 0xA9);
          }
        }
      }
    }
  }
  else
  {
    v5 = (char *)a1[1];
    v6 = (char *)a1[2];
    v7 = (v6 - v5) >> 3;
    if (v6 == v5)
      v8 = 0;
    else
      v8 = 85 * v7 - 1;
    v9 = a1[4];
    v10 = v9 + v3;
    v11 = v8 - (v9 + v3);
    v12 = v4 >= v11;
    v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5)
        v14 = v13 + 1;
      else
        v14 = v13;
      if (v14 % 0x55)
        v15 = v14 / 0x55 + 1;
      else
        v15 = v14 / 0x55;
      if (v15 >= v9 / 0x55)
        v16 = v9 / 0x55;
      else
        v16 = v15;
      if (v15 <= v9 / 0x55)
      {
        for (a1[4] = v9 - 85 * v16; v16; --v16)
        {
          v28 = (_QWORD *)a1[1];
          v31 = *v28;
          v29 = (char *)(v28 + 1);
          v30 = v31;
          a1[1] = v29;
          if (v6 == (char *)a1[3])
          {
            v32 = (uint64_t)&v29[-*a1];
            if ((unint64_t)v29 <= *a1)
            {
              if (v6 == (char *)*a1)
                v40 = 1;
              else
                v40 = (uint64_t)&v6[-*a1] >> 2;
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
              v43 = &v41[8 * (v40 >> 2)];
              v44 = (uint64_t *)a1[1];
              v6 = v43;
              v45 = a1[2] - (_QWORD)v44;
              if (v45)
              {
                v6 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
                v46 = 8 * (v45 >> 3);
                v47 = &v41[8 * (v40 >> 2)];
                do
                {
                  v48 = *v44++;
                  *(_QWORD *)v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              v49 = (char *)*a1;
              *a1 = v41;
              a1[1] = v43;
              a1[2] = v6;
              a1[3] = &v41[8 * v42];
              if (v49)
              {
                operator delete(v49);
                v6 = (char *)a1[2];
              }
            }
            else
            {
              v33 = v32 >> 3;
              v34 = v32 >> 3 < -1;
              v35 = (v32 >> 3) + 2;
              if (v34)
                v36 = v35;
              else
                v36 = v33 + 1;
              v37 = &v29[-8 * (v36 >> 1)];
              v38 = v6 - v29;
              if (v6 != v29)
              {
                memmove(&v29[-8 * (v36 >> 1)], v29, v6 - v29);
                v6 = (char *)a1[1];
              }
              v39 = &v6[-8 * (v36 >> 1)];
              v6 = &v37[v38];
              a1[1] = v39;
              a1[2] = &v37[v38];
            }
          }
          *(_QWORD *)v6 = v30;
          v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        v17 = v15 - v16;
        v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - v7)
        {
          while (1)
          {
            if (!v17)
            {
              v15 = v16;
              goto LABEL_160;
            }
            if ((char *)a1[3] == v6)
              break;
            *(_QWORD *)v6 = operator new(0xFF0uLL);
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            v114 = operator new(0xFF0uLL);
            v115 = (char *)a1[1];
            if (v115 == (char *)*a1)
            {
              v117 = a1[3];
              if ((unint64_t)v6 >= v117)
              {
                v122 = v117 - (_QWORD)v115;
                v106 = v122 == 0;
                v123 = v122 >> 2;
                if (v106)
                  v124 = 1;
                else
                  v124 = v123;
                v125 = 2 * v124;
                v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v124);
                v116 = &v126[(v125 + 6) & 0xFFFFFFFFFFFFFFF8];
                v128 = (uint64_t *)a1[1];
                v129 = v116;
                v130 = a1[2] - (_QWORD)v128;
                if (v130)
                {
                  v129 = &v116[v130 & 0xFFFFFFFFFFFFFFF8];
                  v131 = 8 * (v130 >> 3);
                  v132 = v116;
                  do
                  {
                    v133 = *v128++;
                    *(_QWORD *)v132 = v133;
                    v132 += 8;
                    v131 -= 8;
                  }
                  while (v131);
                }
                v134 = (char *)*a1;
                *a1 = v126;
                a1[1] = v116;
                a1[2] = v129;
                a1[3] = &v126[8 * v127];
                if (v134)
                {
                  operator delete(v134);
                  v116 = (char *)a1[1];
                }
              }
              else
              {
                v118 = (uint64_t)(v117 - (_QWORD)v6) >> 3;
                if (v118 >= -1)
                  v119 = v118 + 1;
                else
                  v119 = v118 + 2;
                v120 = v119 >> 1;
                v121 = &v6[8 * (v119 >> 1)];
                v116 = &v121[-(v6 - v115)];
                if (v6 != v115)
                {
                  memmove(&v121[-(v6 - v115)], v115, v6 - v115);
                  v6 = (char *)a1[2];
                }
                a1[1] = v116;
                a1[2] = &v6[8 * v120];
              }
            }
            else
            {
              v116 = (char *)a1[1];
            }
            *((_QWORD *)v116 - 1) = v114;
            v6 = (char *)a1[2];
            v135 = a1[1] - 8;
            a1[1] = v135;
            if (&v6[-v135] == (char *)8)
              v136 = 84;
            else
              v136 = 85;
            v9 = v136 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_160:
          for (a1[4] = v9 - 85 * v15; v15; --v15)
          {
            v137 = (_QWORD *)a1[1];
            v140 = *v137;
            v138 = (char *)(v137 + 1);
            v139 = v140;
            a1[1] = v138;
            if (v6 == (char *)a1[3])
            {
              v141 = (uint64_t)&v138[-*a1];
              if ((unint64_t)v138 <= *a1)
              {
                if (v6 == (char *)*a1)
                  v148 = 1;
                else
                  v148 = (uint64_t)&v6[-*a1] >> 2;
                v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v148);
                v151 = &v149[8 * (v148 >> 2)];
                v152 = (uint64_t *)a1[1];
                v6 = v151;
                v153 = a1[2] - (_QWORD)v152;
                if (v153)
                {
                  v6 = &v151[v153 & 0xFFFFFFFFFFFFFFF8];
                  v154 = 8 * (v153 >> 3);
                  v155 = &v149[8 * (v148 >> 2)];
                  do
                  {
                    v156 = *v152++;
                    *(_QWORD *)v155 = v156;
                    v155 += 8;
                    v154 -= 8;
                  }
                  while (v154);
                }
                v157 = (char *)*a1;
                *a1 = v149;
                a1[1] = v151;
                a1[2] = v6;
                a1[3] = &v149[8 * v150];
                if (v157)
                {
                  operator delete(v157);
                  v6 = (char *)a1[2];
                }
              }
              else
              {
                v142 = v141 >> 3;
                v34 = v141 >> 3 < -1;
                v143 = (v141 >> 3) + 2;
                if (v34)
                  v144 = v143;
                else
                  v144 = v142 + 1;
                v145 = &v138[-8 * (v144 >> 1)];
                v146 = v6 - v138;
                if (v6 != v138)
                {
                  memmove(&v138[-8 * (v144 >> 1)], v138, v6 - v138);
                  v6 = (char *)a1[1];
                }
                v147 = &v6[-8 * (v144 >> 1)];
                v6 = &v145[v146];
                a1[1] = v147;
                a1[2] = &v145[v146];
              }
            }
            *(_QWORD *)v6 = v139;
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          v19 = v18 >> 2;
          if (v19 <= v17 + v7)
            v20 = (char *)(v17 + v7);
          else
            v20 = (char *)v19;
          v21 = v7 - v16;
          v167 = a2 - v3;
          if (v20)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v20);
          else
            v22 = 0;
          v166 = -85 * v16;
          v63 = &v20[8 * v21];
          v64 = &v20[8 * v22];
          v65 = v63;
          v66 = v20;
          do
          {
            v67 = operator new(0xFF0uLL);
            if (v63 == v64)
            {
              if (v65 <= v66)
              {
                if (v63 == v66)
                  v73 = 1;
                else
                  v73 = (v63 - v66) >> 2;
                v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v73);
                v76 = v66;
                v77 = &v75[8 * (v73 >> 2)];
                v68 = v77;
                v78 = v63 - v65;
                if (v63 != v65)
                {
                  v68 = &v77[v78 & 0xFFFFFFFFFFFFFFF8];
                  v79 = 8 * (v78 >> 3);
                  v80 = &v75[8 * (v73 >> 2)];
                  do
                  {
                    v81 = *(_QWORD *)v65;
                    v65 += 8;
                    *(_QWORD *)v80 = v81;
                    v80 += 8;
                    v79 -= 8;
                  }
                  while (v79);
                }
                v64 = &v75[8 * v74];
                if (v76)
                  operator delete(v76);
                v65 = v77;
                v66 = v75;
              }
              else
              {
                v69 = (v65 - v66) >> 3;
                if (v69 >= -1)
                  v70 = v69 + 1;
                else
                  v70 = v69 + 2;
                v71 = v63;
                if (v63 != v65)
                {
                  memmove(&v65[-8 * (v70 >> 1)], v65, v63 - v65);
                  v71 = v65;
                }
                v72 = -(v70 >> 1);
                v68 = &v63[-8 * (v70 >> 1)];
                v65 = &v71[8 * v72];
                v64 = v63;
              }
            }
            else
            {
              v68 = v63;
            }
            *(_QWORD *)v68 = v67;
            v63 = v68 + 8;
            --v17;
          }
          while (v17);
          v82 = (_QWORD *)a1[1];
          if (v16)
          {
            do
            {
              if (v63 == v64)
              {
                if (v65 <= v66)
                {
                  if (v63 == v66)
                    v89 = 1;
                  else
                    v89 = (v63 - v66) >> 2;
                  v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v89);
                  v92 = v90;
                  v84 = &v90[8 * (v89 >> 2)];
                  v83 = v84;
                  v93 = v63 - v65;
                  if (v63 != v65)
                  {
                    v83 = &v84[v93 & 0xFFFFFFFFFFFFFFF8];
                    v94 = 8 * (v93 >> 3);
                    v95 = v84;
                    do
                    {
                      v96 = *(_QWORD *)v65;
                      v65 += 8;
                      *(_QWORD *)v95 = v96;
                      v95 += 8;
                      v94 -= 8;
                    }
                    while (v94);
                  }
                  v63 = &v90[8 * v91];
                  if (v66)
                    operator delete(v66);
                  v66 = v92;
                }
                else
                {
                  v85 = v66;
                  v86 = (v65 - v66) >> 3;
                  if (v86 >= -1)
                    v87 = v86 + 1;
                  else
                    v87 = v86 + 2;
                  v88 = v63;
                  if (v63 != v65)
                  {
                    memmove(&v65[-8 * (v87 >> 1)], v65, v63 - v65);
                    v88 = v65;
                  }
                  v83 = &v63[-8 * (v87 >> 1)];
                  v84 = &v88[-8 * (v87 >> 1)];
                  v66 = v85;
                }
              }
              else
              {
                v83 = v63;
                v84 = v65;
                v63 = v64;
              }
              v64 = v63;
              *(_QWORD *)v83 = *v82;
              v6 = v83 + 8;
              v82 = (_QWORD *)(a1[1] + 8);
              a1[1] = v82;
              v63 = v6;
              v65 = v84;
              --v16;
            }
            while (v16);
          }
          else
          {
            v6 = v63;
            v84 = v65;
          }
          v97 = (_QWORD *)a1[2];
          if (v97 != v82)
          {
            do
            {
              if (v84 == v66)
              {
                if (v6 >= v64)
                {
                  if (v64 == v66)
                    v102 = 1;
                  else
                    v102 = (v64 - v66) >> 2;
                  v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v102);
                  v105 = v103;
                  v84 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v107 = v6 - v66;
                  v106 = v6 == v66;
                  v6 = v84;
                  if (!v106)
                  {
                    v6 = &v84[v107 & 0xFFFFFFFFFFFFFFF8];
                    v108 = 8 * (v107 >> 3);
                    v109 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v110 = v66;
                    do
                    {
                      v111 = *(_QWORD *)v110;
                      v110 += 8;
                      *(_QWORD *)v109 = v111;
                      v109 += 8;
                      v108 -= 8;
                    }
                    while (v108);
                  }
                  v64 = &v103[8 * v104];
                  if (v66)
                    operator delete(v66);
                  v66 = v105;
                }
                else
                {
                  v98 = (v64 - v6) >> 3;
                  if (v98 >= -1)
                    v99 = v98 + 1;
                  else
                    v99 = v98 + 2;
                  v100 = v99 >> 1;
                  v84 = &v66[8 * (v99 >> 1)];
                  v101 = v66;
                  if (v6 != v66)
                  {
                    memmove(v84, v66, v6 - v66);
                    v101 = v6;
                  }
                  v6 = &v101[8 * v100];
                }
              }
              v112 = *--v97;
              *((_QWORD *)v84 - 1) = v112;
              v84 -= 8;
            }
            while (v97 != (_QWORD *)a1[1]);
          }
          v113 = (char *)*a1;
          *a1 = v66;
          a1[1] = v84;
          a1[2] = v6;
          a1[3] = v64;
          v4 = v167;
          a1[4] += v166;
          if (v113)
          {
            operator delete(v113);
            v6 = (char *)a1[2];
          }
        }
      }
      v3 = a1[5];
      v5 = (char *)a1[1];
      v10 = a1[4] + v3;
    }
    v158 = &v5[8 * (v10 / 0x55)];
    if (v6 == v5)
      v159 = 0;
    else
      v159 = (char *)(*(_QWORD *)v158 + 48 * (v10 % 0x55));
    v168 = &v5[8 * (v10 / 0x55)];
    v169 = v159;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v4);
    v160 = (uint64_t)v169;
    if (v159 != v169)
    {
      v161 = v168;
      do
      {
        if (v158 == v161)
          v162 = v160;
        else
          v162 = *(_QWORD *)v158 + 4080;
        if (v159 == (char *)v162)
        {
          v164 = v159;
        }
        else
        {
          v163 = 48 * ((v162 - (uint64_t)v159 - 48) / 0x30uLL) + 48;
          bzero(v159, v163);
          v164 = &v159[v163];
          v3 = a1[5];
        }
        v3 -= 0x5555555555555555 * ((v164 - v159) >> 4);
        a1[5] = v3;
        if (v158 == v161)
          break;
        v165 = (char *)*((_QWORD *)v158 + 1);
        v158 += 8;
        v159 = v165;
      }
      while (v165 != (char *)v160);
    }
  }
}

void sub_1D50B5D24(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::deque<std::deque<unsigned short>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  int64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  size_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;

  v3 = a1[5];
  v4 = a2 - v3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      v23 = a1[4];
      v25 = a1[1];
      v24 = a1[2];
      v26 = (char *)(v25 + 8 * (v23 / 0x55));
      v27 = v24 == v25 ? 0 : *(_QWORD *)v26 + 48 * (v23 % 0x55);
      v168 = (char *)(v25 + 8 * (v23 / 0x55));
      v169 = (char *)v27;
      std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, a2);
      v50 = (char *)(v25 + 8 * ((v23 + v3) / 0x55));
      v51 = v24 == v25 ? 0 : *(_QWORD *)v50 + 48 * ((v23 + v3) % 0x55);
      if ((char *)v51 != v169)
      {
        v52 = 85 * ((v50 - v168) >> 3) - 0x5555555555555555 * ((uint64_t)(v51 - *(_QWORD *)v50) >> 4);
        v53 = (uint64_t)&v169[-*(_QWORD *)v168] >> 4;
        v54 = v52 + 0x5555555555555555 * v53;
        if (v54 >= 1)
        {
          if (v24 == v25)
            v55 = 0;
          else
            v55 = *(_QWORD *)v26 + 48 * (v23 % 0x55);
          if (v169 == (char *)v55)
            v56 = 0;
          else
            v56 = 85 * ((v168 - v26) >> 3)
                - 0x5555555555555555 * v53
                + 0x5555555555555555 * ((uint64_t)(v55 - *(_QWORD *)v26) >> 4);
          v168 = (char *)(v25 + 8 * (v23 / 0x55));
          v169 = (char *)v55;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v56);
          v57 = v169;
          if (v169 != (char *)v51)
          {
            v58 = v168;
            do
            {
              v57 = (_QWORD *)(std::deque<unsigned short>::~deque[abi:ne180100](v57) + 48);
              if ((_QWORD *)((char *)v57 - *(_QWORD *)v58) == (_QWORD *)4080)
              {
                v59 = (_QWORD *)*((_QWORD *)v58 + 1);
                v58 += 8;
                v57 = v59;
              }
            }
            while (v57 != (_QWORD *)v51);
            v25 = a1[1];
            v24 = a1[2];
            v23 = a1[4];
            v3 = a1[5];
          }
          v60 = 85 * ((v24 - v25) >> 3) - 1;
          if (v24 == v25)
            v60 = 0;
          a1[5] = v3 - v54;
          if (v60 - (v3 - v54 + v23) >= 0xAA)
          {
            do
            {
              operator delete(*(void **)(v24 - 8));
              v61 = a1[1];
              v24 = a1[2] - 8;
              v62 = 85 * ((v24 - v61) >> 3) - 1;
              a1[2] = v24;
              if (v24 == v61)
                v62 = 0;
            }
            while ((unint64_t)(v62 - (a1[5] + a1[4])) > 0xA9);
          }
        }
      }
    }
  }
  else
  {
    v5 = (char *)a1[1];
    v6 = (char *)a1[2];
    v7 = (v6 - v5) >> 3;
    if (v6 == v5)
      v8 = 0;
    else
      v8 = 85 * v7 - 1;
    v9 = a1[4];
    v10 = v9 + v3;
    v11 = v8 - (v9 + v3);
    v12 = v4 >= v11;
    v13 = v4 - v11;
    if (v13 != 0 && v12)
    {
      if (v6 == v5)
        v14 = v13 + 1;
      else
        v14 = v13;
      if (v14 % 0x55)
        v15 = v14 / 0x55 + 1;
      else
        v15 = v14 / 0x55;
      if (v15 >= v9 / 0x55)
        v16 = v9 / 0x55;
      else
        v16 = v15;
      if (v15 <= v9 / 0x55)
      {
        for (a1[4] = v9 - 85 * v16; v16; --v16)
        {
          v28 = (_QWORD *)a1[1];
          v31 = *v28;
          v29 = (char *)(v28 + 1);
          v30 = v31;
          a1[1] = v29;
          if (v6 == (char *)a1[3])
          {
            v32 = (uint64_t)&v29[-*a1];
            if ((unint64_t)v29 <= *a1)
            {
              if (v6 == (char *)*a1)
                v40 = 1;
              else
                v40 = (uint64_t)&v6[-*a1] >> 2;
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
              v43 = &v41[8 * (v40 >> 2)];
              v44 = (uint64_t *)a1[1];
              v6 = v43;
              v45 = a1[2] - (_QWORD)v44;
              if (v45)
              {
                v6 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
                v46 = 8 * (v45 >> 3);
                v47 = &v41[8 * (v40 >> 2)];
                do
                {
                  v48 = *v44++;
                  *(_QWORD *)v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              v49 = (char *)*a1;
              *a1 = v41;
              a1[1] = v43;
              a1[2] = v6;
              a1[3] = &v41[8 * v42];
              if (v49)
              {
                operator delete(v49);
                v6 = (char *)a1[2];
              }
            }
            else
            {
              v33 = v32 >> 3;
              v34 = v32 >> 3 < -1;
              v35 = (v32 >> 3) + 2;
              if (v34)
                v36 = v35;
              else
                v36 = v33 + 1;
              v37 = &v29[-8 * (v36 >> 1)];
              v38 = v6 - v29;
              if (v6 != v29)
              {
                memmove(&v29[-8 * (v36 >> 1)], v29, v6 - v29);
                v6 = (char *)a1[1];
              }
              v39 = &v6[-8 * (v36 >> 1)];
              v6 = &v37[v38];
              a1[1] = v39;
              a1[2] = &v37[v38];
            }
          }
          *(_QWORD *)v6 = v30;
          v6 = (char *)(a1[2] + 8);
          a1[2] = v6;
        }
      }
      else
      {
        v17 = v15 - v16;
        v18 = a1[3] - *a1;
        if (v15 - v16 <= (v18 >> 3) - v7)
        {
          while (1)
          {
            if (!v17)
            {
              v15 = v16;
              goto LABEL_160;
            }
            if ((char *)a1[3] == v6)
              break;
            *(_QWORD *)v6 = operator new(0xFF0uLL);
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
            --v15;
            --v17;
          }
          do
          {
            v114 = operator new(0xFF0uLL);
            v115 = (char *)a1[1];
            if (v115 == (char *)*a1)
            {
              v117 = a1[3];
              if ((unint64_t)v6 >= v117)
              {
                v122 = v117 - (_QWORD)v115;
                v106 = v122 == 0;
                v123 = v122 >> 2;
                if (v106)
                  v124 = 1;
                else
                  v124 = v123;
                v125 = 2 * v124;
                v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v124);
                v116 = &v126[(v125 + 6) & 0xFFFFFFFFFFFFFFF8];
                v128 = (uint64_t *)a1[1];
                v129 = v116;
                v130 = a1[2] - (_QWORD)v128;
                if (v130)
                {
                  v129 = &v116[v130 & 0xFFFFFFFFFFFFFFF8];
                  v131 = 8 * (v130 >> 3);
                  v132 = v116;
                  do
                  {
                    v133 = *v128++;
                    *(_QWORD *)v132 = v133;
                    v132 += 8;
                    v131 -= 8;
                  }
                  while (v131);
                }
                v134 = (char *)*a1;
                *a1 = v126;
                a1[1] = v116;
                a1[2] = v129;
                a1[3] = &v126[8 * v127];
                if (v134)
                {
                  operator delete(v134);
                  v116 = (char *)a1[1];
                }
              }
              else
              {
                v118 = (uint64_t)(v117 - (_QWORD)v6) >> 3;
                if (v118 >= -1)
                  v119 = v118 + 1;
                else
                  v119 = v118 + 2;
                v120 = v119 >> 1;
                v121 = &v6[8 * (v119 >> 1)];
                v116 = &v121[-(v6 - v115)];
                if (v6 != v115)
                {
                  memmove(&v121[-(v6 - v115)], v115, v6 - v115);
                  v6 = (char *)a1[2];
                }
                a1[1] = v116;
                a1[2] = &v6[8 * v120];
              }
            }
            else
            {
              v116 = (char *)a1[1];
            }
            *((_QWORD *)v116 - 1) = v114;
            v6 = (char *)a1[2];
            v135 = a1[1] - 8;
            a1[1] = v135;
            if (&v6[-v135] == (char *)8)
              v136 = 84;
            else
              v136 = 85;
            v9 = v136 + a1[4];
            a1[4] = v9;
            --v17;
          }
          while (v17);
LABEL_160:
          for (a1[4] = v9 - 85 * v15; v15; --v15)
          {
            v137 = (_QWORD *)a1[1];
            v140 = *v137;
            v138 = (char *)(v137 + 1);
            v139 = v140;
            a1[1] = v138;
            if (v6 == (char *)a1[3])
            {
              v141 = (uint64_t)&v138[-*a1];
              if ((unint64_t)v138 <= *a1)
              {
                if (v6 == (char *)*a1)
                  v148 = 1;
                else
                  v148 = (uint64_t)&v6[-*a1] >> 2;
                v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v148);
                v151 = &v149[8 * (v148 >> 2)];
                v152 = (uint64_t *)a1[1];
                v6 = v151;
                v153 = a1[2] - (_QWORD)v152;
                if (v153)
                {
                  v6 = &v151[v153 & 0xFFFFFFFFFFFFFFF8];
                  v154 = 8 * (v153 >> 3);
                  v155 = &v149[8 * (v148 >> 2)];
                  do
                  {
                    v156 = *v152++;
                    *(_QWORD *)v155 = v156;
                    v155 += 8;
                    v154 -= 8;
                  }
                  while (v154);
                }
                v157 = (char *)*a1;
                *a1 = v149;
                a1[1] = v151;
                a1[2] = v6;
                a1[3] = &v149[8 * v150];
                if (v157)
                {
                  operator delete(v157);
                  v6 = (char *)a1[2];
                }
              }
              else
              {
                v142 = v141 >> 3;
                v34 = v141 >> 3 < -1;
                v143 = (v141 >> 3) + 2;
                if (v34)
                  v144 = v143;
                else
                  v144 = v142 + 1;
                v145 = &v138[-8 * (v144 >> 1)];
                v146 = v6 - v138;
                if (v6 != v138)
                {
                  memmove(&v138[-8 * (v144 >> 1)], v138, v6 - v138);
                  v6 = (char *)a1[1];
                }
                v147 = &v6[-8 * (v144 >> 1)];
                v6 = &v145[v146];
                a1[1] = v147;
                a1[2] = &v145[v146];
              }
            }
            *(_QWORD *)v6 = v139;
            v6 = (char *)(a1[2] + 8);
            a1[2] = v6;
          }
        }
        else
        {
          v19 = v18 >> 2;
          if (v19 <= v17 + v7)
            v20 = (char *)(v17 + v7);
          else
            v20 = (char *)v19;
          v21 = v7 - v16;
          v167 = a2 - v3;
          if (v20)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v20);
          else
            v22 = 0;
          v166 = -85 * v16;
          v63 = &v20[8 * v21];
          v64 = &v20[8 * v22];
          v65 = v63;
          v66 = v20;
          do
          {
            v67 = operator new(0xFF0uLL);
            if (v63 == v64)
            {
              if (v65 <= v66)
              {
                if (v63 == v66)
                  v73 = 1;
                else
                  v73 = (v63 - v66) >> 2;
                v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v73);
                v76 = v66;
                v77 = &v75[8 * (v73 >> 2)];
                v68 = v77;
                v78 = v63 - v65;
                if (v63 != v65)
                {
                  v68 = &v77[v78 & 0xFFFFFFFFFFFFFFF8];
                  v79 = 8 * (v78 >> 3);
                  v80 = &v75[8 * (v73 >> 2)];
                  do
                  {
                    v81 = *(_QWORD *)v65;
                    v65 += 8;
                    *(_QWORD *)v80 = v81;
                    v80 += 8;
                    v79 -= 8;
                  }
                  while (v79);
                }
                v64 = &v75[8 * v74];
                if (v76)
                  operator delete(v76);
                v65 = v77;
                v66 = v75;
              }
              else
              {
                v69 = (v65 - v66) >> 3;
                if (v69 >= -1)
                  v70 = v69 + 1;
                else
                  v70 = v69 + 2;
                v71 = v63;
                if (v63 != v65)
                {
                  memmove(&v65[-8 * (v70 >> 1)], v65, v63 - v65);
                  v71 = v65;
                }
                v72 = -(v70 >> 1);
                v68 = &v63[-8 * (v70 >> 1)];
                v65 = &v71[8 * v72];
                v64 = v63;
              }
            }
            else
            {
              v68 = v63;
            }
            *(_QWORD *)v68 = v67;
            v63 = v68 + 8;
            --v17;
          }
          while (v17);
          v82 = (_QWORD *)a1[1];
          if (v16)
          {
            do
            {
              if (v63 == v64)
              {
                if (v65 <= v66)
                {
                  if (v63 == v66)
                    v89 = 1;
                  else
                    v89 = (v63 - v66) >> 2;
                  v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v89);
                  v92 = v90;
                  v84 = &v90[8 * (v89 >> 2)];
                  v83 = v84;
                  v93 = v63 - v65;
                  if (v63 != v65)
                  {
                    v83 = &v84[v93 & 0xFFFFFFFFFFFFFFF8];
                    v94 = 8 * (v93 >> 3);
                    v95 = v84;
                    do
                    {
                      v96 = *(_QWORD *)v65;
                      v65 += 8;
                      *(_QWORD *)v95 = v96;
                      v95 += 8;
                      v94 -= 8;
                    }
                    while (v94);
                  }
                  v63 = &v90[8 * v91];
                  if (v66)
                    operator delete(v66);
                  v66 = v92;
                }
                else
                {
                  v85 = v66;
                  v86 = (v65 - v66) >> 3;
                  if (v86 >= -1)
                    v87 = v86 + 1;
                  else
                    v87 = v86 + 2;
                  v88 = v63;
                  if (v63 != v65)
                  {
                    memmove(&v65[-8 * (v87 >> 1)], v65, v63 - v65);
                    v88 = v65;
                  }
                  v83 = &v63[-8 * (v87 >> 1)];
                  v84 = &v88[-8 * (v87 >> 1)];
                  v66 = v85;
                }
              }
              else
              {
                v83 = v63;
                v84 = v65;
                v63 = v64;
              }
              v64 = v63;
              *(_QWORD *)v83 = *v82;
              v6 = v83 + 8;
              v82 = (_QWORD *)(a1[1] + 8);
              a1[1] = v82;
              v63 = v6;
              v65 = v84;
              --v16;
            }
            while (v16);
          }
          else
          {
            v6 = v63;
            v84 = v65;
          }
          v97 = (_QWORD *)a1[2];
          if (v97 != v82)
          {
            do
            {
              if (v84 == v66)
              {
                if (v6 >= v64)
                {
                  if (v64 == v66)
                    v102 = 1;
                  else
                    v102 = (v64 - v66) >> 2;
                  v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v102);
                  v105 = v103;
                  v84 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v107 = v6 - v66;
                  v106 = v6 == v66;
                  v6 = v84;
                  if (!v106)
                  {
                    v6 = &v84[v107 & 0xFFFFFFFFFFFFFFF8];
                    v108 = 8 * (v107 >> 3);
                    v109 = &v103[(2 * v102 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v110 = v66;
                    do
                    {
                      v111 = *(_QWORD *)v110;
                      v110 += 8;
                      *(_QWORD *)v109 = v111;
                      v109 += 8;
                      v108 -= 8;
                    }
                    while (v108);
                  }
                  v64 = &v103[8 * v104];
                  if (v66)
                    operator delete(v66);
                  v66 = v105;
                }
                else
                {
                  v98 = (v64 - v6) >> 3;
                  if (v98 >= -1)
                    v99 = v98 + 1;
                  else
                    v99 = v98 + 2;
                  v100 = v99 >> 1;
                  v84 = &v66[8 * (v99 >> 1)];
                  v101 = v66;
                  if (v6 != v66)
                  {
                    memmove(v84, v66, v6 - v66);
                    v101 = v6;
                  }
                  v6 = &v101[8 * v100];
                }
              }
              v112 = *--v97;
              *((_QWORD *)v84 - 1) = v112;
              v84 -= 8;
            }
            while (v97 != (_QWORD *)a1[1]);
          }
          v113 = (char *)*a1;
          *a1 = v66;
          a1[1] = v84;
          a1[2] = v6;
          a1[3] = v64;
          v4 = v167;
          a1[4] += v166;
          if (v113)
          {
            operator delete(v113);
            v6 = (char *)a1[2];
          }
        }
      }
      v3 = a1[5];
      v5 = (char *)a1[1];
      v10 = a1[4] + v3;
    }
    v158 = &v5[8 * (v10 / 0x55)];
    if (v6 == v5)
      v159 = 0;
    else
      v159 = (char *)(*(_QWORD *)v158 + 48 * (v10 % 0x55));
    v168 = &v5[8 * (v10 / 0x55)];
    v169 = v159;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v168, v4);
    v160 = (uint64_t)v169;
    if (v159 != v169)
    {
      v161 = v168;
      do
      {
        if (v158 == v161)
          v162 = v160;
        else
          v162 = *(_QWORD *)v158 + 4080;
        if (v159 == (char *)v162)
        {
          v164 = v159;
        }
        else
        {
          v163 = 48 * ((v162 - (uint64_t)v159 - 48) / 0x30uLL) + 48;
          bzero(v159, v163);
          v164 = &v159[v163];
          v3 = a1[5];
        }
        v3 -= 0x5555555555555555 * ((v164 - v159) >> 4);
        a1[5] = v3;
        if (v158 == v161)
          break;
        v165 = (char *)*((_QWORD *)v158 + 1);
        v158 += 8;
        v159 = v165;
      }
      while (v165 != (char *)v160);
    }
  }
}

void sub_1D50B67E0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void nms::min<double>(uint64_t *a1, double *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  double v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  std::valarray<double>::valarray(a1, (uint64_t **)a3);
  v7 = *(uint64_t **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v20 = 0;
  v21 = 0;
  v8 = v6 - (_QWORD)v7;
  if (v8)
  {
    v9 = v8 >> 3;
    v10 = (unsigned __int8 *)operator new(v8 >> 3);
    v11 = v10;
    v12 = 0;
    v20 = v10;
    v13 = *a2;
    do
    {
      v10[v12] = *(double *)&v7[v12] > v13;
      ++v12;
    }
    while (v9 != v12);
    v21 = &v10[v12];
  }
  else
  {
    v11 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v22, &v20, *a1);
  v14 = v23;
  v15 = v24;
  if (v24 == v23)
  {
    if (!v24)
      goto LABEL_14;
  }
  else
  {
    v16 = (v24 - v23) >> 3;
    v17 = v22;
    if (v16 <= 1)
      v16 = 1;
    v18 = (uint64_t *)v23;
    do
    {
      v19 = *v18++;
      *(double *)(v17 + 8 * v19) = *a2;
      --v16;
    }
    while (v16);
    v24 = &v15[(v14 - v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  operator delete(v14);
  v23 = 0;
  v24 = 0;
LABEL_14:
  if (v11)
    operator delete(v11);
}

void sub_1D50B6944(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void nms::BOOLeanMaskToIndices<unsigned short>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  _BYTE *v10;
  void *v11;
  _WORD *v12;

  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4)
  {
    if (v4 < 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = 2 * v4;
    v6 = operator new(2 * v4);
    bzero(v6, v5);
    v7 = 0;
    do
    {
      *((_WORD *)v6 + v7) = v7;
      ++v7;
      v5 -= 2;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v8, (unsigned __int8 **)a2, (uint64_t)v6);
  std::valarray<unsigned short>::valarray(&v11, &v8);
  if (__p)
  {
    if (v10 != __p)
      v10 += ((_BYTE *)__p - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    operator delete(__p);
  }
  std::deque<unsigned short>::deque<unsigned short *,0>(a1, (__int16 *)v11, v12);
  if (v11)
  {
    if (v12 != v11)
      v12 = (_WORD *)((char *)v12 + (((_BYTE *)v11 - (_BYTE *)v12 + 1) & 0xFFFFFFFFFFFFFFFELL));
    operator delete(v11);
  }
  if (v6)
    operator delete(v6);
}

{
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  _BYTE *v10;
  void *v11;
  _WORD *v12;

  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4)
  {
    if (v4 < 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = 2 * v4;
    v6 = operator new(2 * v4);
    bzero(v6, v5);
    v7 = 0;
    do
    {
      *((_WORD *)v6 + v7) = v7;
      ++v7;
      v5 -= 2;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v8, (unsigned __int8 **)a2, (uint64_t)v6);
  std::valarray<unsigned short>::valarray(&v11, &v8);
  if (__p)
  {
    if (v10 != __p)
      v10 += ((_BYTE *)__p - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    operator delete(__p);
  }
  std::deque<unsigned short>::deque<unsigned short *,0>(a1, (__int16 *)v11, v12);
  if (v11)
  {
    if (v12 != v11)
      v12 = (_WORD *)((char *)v12 + (((_BYTE *)v11 - (_BYTE *)v12 + 1) & 0xFFFFFFFFFFFFFFFELL));
    operator delete(v11);
  }
  if (v6)
    operator delete(v6);
}

void sub_1D50B6A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

_QWORD *std::deque<unsigned short>::erase(int64x2_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char **v10;
  char *v11;
  char **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char **v18;
  char **v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char **v24;
  uint64_t v25;
  char **v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  void **v38;
  char *v39;
  char **v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _BYTE *v47;
  void **v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char **v56;
  char *v57;

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = a1[1].i64[0];
  v7 = (char *)(v5 + 8 * (v4 >> 11));
  if (v6 == v5)
    v8 = 0;
  else
    v8 = *(_QWORD *)v7 + 2 * (a1[2].i64[0] & 0x7FF);
  if (v8 == a3)
    v9 = 0;
  else
    v9 = ((a3 - *(_QWORD *)a2) >> 1) + ((a2 - v7) << 8) - ((v8 - *(_QWORD *)v7) >> 1);
  v10 = (char **)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((_QWORD *)(v5 + 8 * (v4 >> 11)), v8, v9);
  v12 = v10;
  v13 = v11;
  v14 = a1[2].i64[1];
  v15 = v11 - *v10;
  v16 = v15 >> 1;
  if (v9 <= (unint64_t)(v14 - 1) >> 1)
  {
    if (v15 < -1)
    {
      v19 = &v10[-((unint64_t)(2046 - v16) >> 11)];
      v20 = &(*v19)[2 * (~(2046 - (_WORD)v16) & 0x7FF)];
    }
    else
    {
      v19 = &v10[(unint64_t)(v16 + 1) >> 11];
      v20 = &(*v19)[2 * (((_WORD)v16 + 1) & 0x7FF)];
    }
    if (v7 == (char *)v10)
    {
      v37 = (char *)v8;
      v36 = v13;
    }
    else
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, *v10, v11, v19, v20);
      v26 = v56;
      v27 = v57;
      v28 = (char *)(v12 - 1);
      if (v12 - 1 != (char **)v7)
      {
        v29 = *v56;
        do
        {
          v30 = *(_BYTE **)v28;
          v31 = (char *)(*(_QWORD *)v28 + 4096);
          while (1)
          {
            v32 = v27 - v29;
            if ((v31 - v30) >> 1 >= v32 >> 1)
              v33 = v32 >> 1;
            else
              v33 = (v31 - v30) >> 1;
            v31 -= 2 * v33;
            v27 -= 2 * v33;
            if (v33)
              memmove(v27, v31, 2 * v33);
            if (v31 == v30)
              break;
            v34 = *--v26;
            v29 = v34;
            v27 = v34 + 4096;
          }
          v29 = *v26;
          if (*v26 + 4096 == v27)
          {
            v35 = v26[1];
            ++v26;
            v29 = v35;
            v27 = v35;
          }
          v28 -= 8;
        }
        while (v28 != v7);
      }
      v36 = (char *)(*(_QWORD *)v7 + 4096);
      v37 = (char *)v8;
      v19 = v26;
      v20 = v27;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, v37, v36, v19, v20);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1D513B280);
    std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    if (v15 < -1)
    {
      v21 = 2046 - v16;
      v17 = ~(_WORD)v21;
      v18 = &v10[-(v21 >> 11)];
    }
    else
    {
      v17 = v16 + 1;
      v18 = &v10[(unint64_t)(v16 + 1) >> 11];
    }
    v22 = &(*v18)[2 * (v17 & 0x7FF)];
    v23 = v14 + v4;
    v24 = (char **)(v5 + 8 * (v23 >> 11));
    if (v6 == v5)
      v25 = 0;
    else
      v25 = (uint64_t)&(*v24)[2 * (v23 & 0x7FF)];
    if (v18 == v24)
    {
      v47 = (_BYTE *)v25;
      v48 = (void **)v10;
      v49 = v13;
    }
    else
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, v22, *v18 + 4096, (void **)v10, v13);
      v38 = (void **)v56;
      v39 = v57;
      v40 = v18 + 1;
      if (v18 + 1 != v24)
      {
        v54 = v25;
        v41 = *v56;
        do
        {
          v42 = 0;
          v43 = *v40;
          for (++v38; ; ++v38)
          {
            v44 = v41 - v39 + 4096;
            if ((4096 - 2 * v42) >> 1 >= v44 >> 1)
              v45 = v44 >> 1;
            else
              v45 = (4096 - 2 * v42) >> 1;
            if (v45)
              memmove(v39, &v43[2 * v42], 2 * v45);
            v42 += v45;
            if (v42 == 2048)
              break;
            v46 = (char *)*v38;
            v41 = v46;
            v39 = v46;
          }
          v39 += 2 * v45;
          v41 = (char *)*(v38 - 1);
          if (v41 + 4096 == v39)
          {
            v41 = (char *)*v38;
            v39 = (char *)*v38;
          }
          else
          {
            --v38;
          }
          ++v40;
        }
        while (v40 != v24);
        v25 = v54;
      }
      v22 = *v24;
      v47 = (_BYTE *)v25;
      v48 = v38;
      v49 = v39;
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v55, v22, v47, v48, v49);
    --a1[2].i64[1];
    std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  v50 = a1->i64[1];
  v51 = (_QWORD *)(v50 + 8 * ((unint64_t)a1[2].i64[0] >> 11));
  if (a1[1].i64[0] == v50)
    v52 = 0;
  else
    v52 = *v51 + 2 * (a1[2].i64[0] & 0x7FF);
  return std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v51, v52, v9);
}

void std::deque<unsigned short>::push_back(_QWORD *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 8) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned short>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_WORD *)(*(_QWORD *)(v5 + ((v8 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v8 & 0x7FF)) = *a2;
  a1[5] = v7 + 1;
}

_QWORD *std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  *result = 0;
  result[1] = 0;
  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = result;
    if (v2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    result = operator new(8 * v2);
    *v3 = result;
    v3[1] = result;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = (_QWORD *)(**(_QWORD **)a2 + 8 * *(_QWORD *)(a2 + 8));
    do
    {
      *result++ = *v6;
      v6 += v5;
      --v2;
    }
    while (v2);
    v3[1] = result;
  }
  return result;
}

void sub_1D50B6F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void std::valarray<BOOL>::resize(uint64_t a1, size_t __sz)
{
  void *v4;
  char *v5;

  v4 = *(void **)a1;
  if (v4)
  {
    if (*(void **)(a1 + 8) != v4)
      *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (__sz)
  {
    v5 = (char *)operator new(__sz);
    *(_QWORD *)a1 = v5;
    bzero(v5, __sz);
    *(_QWORD *)(a1 + 8) = &v5[__sz];
  }
}

double *std::__val_expr<std::_BinaryOp<std::plus<double>,std::valarray<double>,std::valarray<double>>>::operator std::valarray<double>(double *result, double *a2, double *a3, double **a4)
{
  uint64_t v4;
  _QWORD *v5;
  double *v7;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;

  *result = 0.0;
  result[1] = 0.0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    v5 = result;
    if (v4 < 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = a2;
    result = (double *)operator new((char *)a3 - (char *)a2);
    v8 = v4 >> 3;
    *v5 = result;
    v5[1] = result;
    v9 = *a4;
    do
    {
      v10 = *v7++;
      v11 = v10;
      v12 = *v9++;
      *result++ = v11 + v12;
      --v8;
    }
    while (v8);
    v5[1] = result;
  }
  return result;
}

void sub_1D50B7078(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

void nms::max<double>(uint64_t *a1, double *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  double v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;

  std::valarray<double>::valarray(a1, (uint64_t **)a3);
  v7 = *(uint64_t **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v20 = 0;
  v21 = 0;
  v8 = v6 - (_QWORD)v7;
  if (v8)
  {
    v9 = v8 >> 3;
    v10 = (unsigned __int8 *)operator new(v8 >> 3);
    v11 = v10;
    v12 = 0;
    v20 = v10;
    v13 = *a2;
    do
    {
      v10[v12] = *(double *)&v7[v12] < v13;
      ++v12;
    }
    while (v9 != v12);
    v21 = &v10[v12];
  }
  else
  {
    v11 = 0;
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v22, &v20, *a1);
  v14 = v23;
  v15 = v24;
  if (v24 == v23)
  {
    if (!v24)
      goto LABEL_14;
  }
  else
  {
    v16 = (v24 - v23) >> 3;
    v17 = v22;
    if (v16 <= 1)
      v16 = 1;
    v18 = (uint64_t *)v23;
    do
    {
      v19 = *v18++;
      *(double *)(v17 + 8 * v19) = *a2;
      --v16;
    }
    while (v16);
    v24 = &v15[(v14 - v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  operator delete(v14);
  v23 = 0;
  v24 = 0;
LABEL_14:
  if (v11)
    operator delete(v11);
}

void sub_1D50B71A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<double>::~valarray(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__val_expr<std::_BinaryOp<std::less<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  double *v5;
  double v6;
  double v7;

  *result = 0;
  result[1] = 0;
  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v4 = result;
    result = operator new(*(_QWORD *)(a2 + 16));
    *v4 = result;
    v4[1] = result;
    v5 = **(double ***)(a2 + 24);
    v6 = **(double **)(a2 + 8);
    do
    {
      v7 = *v5++;
      *(_BYTE *)result = v6 < v7;
      result = (_QWORD *)((char *)result + 1);
      --v2;
    }
    while (v2);
    v4[1] = result;
  }
  return result;
}

void sub_1D50B7238(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__val_expr<std::_BinaryOp<std::greater<double>,std::__scalar_expr<double>,std::valarray<double>>>::operator std::valarray<BOOL>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  double *v5;
  double v6;
  double v7;

  *result = 0;
  result[1] = 0;
  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v4 = result;
    result = operator new(*(_QWORD *)(a2 + 16));
    *v4 = result;
    v4[1] = result;
    v5 = **(double ***)(a2 + 24);
    v6 = **(double **)(a2 + 8);
    do
    {
      v7 = *v5++;
      *(_BYTE *)result = v6 > v7;
      result = (_QWORD *)((char *)result + 1);
      --v2;
    }
    while (v2);
    v4[1] = result;
  }
  return result;
}

void sub_1D50B72B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::valarray<double>::valarray(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v3;
  size_t v4;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v3 = a2[1];
  v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    v7 = *a2;
    if (*a2 != a2[1])
    {
      v8 = v6 + 8;
      do
      {
        v9 = *v7++;
        *((_QWORD *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 8;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

_QWORD *std::valarray<double>::valarray(_QWORD *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v4 = (char *)a2[1];
  v3 = (char *)a2[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = operator new(v5);
    *a1 = v7;
    v8 = *a2;
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v7++ = *(_QWORD *)(v8 + 8 * v9);
    }
    while (v4 != v3);
    a1[1] = v7;
  }
  return a1;
}

_QWORD *std::valarray<unsigned short>::valarray(_QWORD *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v4 = (char *)a2[1];
  v3 = (char *)a2[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = operator new(v5 >> 2);
    *a1 = v7;
    v8 = *a2;
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v7++ = *(_WORD *)(v8 + 2 * v9);
    }
    while (v4 != v3);
    a1[1] = v7;
  }
  return a1;
}

uint64_t std::deque<unsigned short>::deque<unsigned short *,0>(uint64_t a1, __int16 *a2, _WORD *a3)
{
  __int16 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  __int16 v15;
  uint64_t v16;

  v3 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v5 = a3 - a2;
  if (a3 == a2)
  {
    v9 = 0;
    v6 = 0;
  }
  else
  {
    std::deque<unsigned short>::__add_back_capacity((_QWORD *)a1, a3 - a2);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 32) + v6;
    v9 = (_QWORD *)(v7 + 8 * (v8 >> 11));
    if (*(_QWORD *)(a1 + 16) != v7)
    {
      v10 = *v9 + 2 * (v8 & 0x7FF);
      goto LABEL_6;
    }
  }
  v10 = 0;
LABEL_6:
  v11 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v9, v10, v5);
  if (v10 != v12)
  {
    do
    {
      if (v9 == v11)
        v13 = v12;
      else
        v13 = *v9 + 4096;
      if (v10 == v13)
      {
        v13 = v10;
      }
      else
      {
        v14 = (_WORD *)v10;
        do
        {
          v15 = *v3++;
          *v14++ = v15;
        }
        while (v14 != (_WORD *)v13);
      }
      v6 += (v13 - v10) >> 1;
      if (v9 == v11)
        break;
      v16 = v9[1];
      ++v9;
      v10 = v16;
    }
    while (v16 != v12);
    *(_QWORD *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_1D50B7514(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void std::deque<unsigned short>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *j;
  char *v57;
  __int128 v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x7FF) != 0)
    v6 = (v5 >> 11) + 1;
  else
    v6 = v5 >> 11;
  v7 = a1[4];
  if (v6 >= v7 >> 11)
    v8 = v7 >> 11;
  else
    v8 = v6;
  if (v6 <= v7 >> 11)
  {
    for (a1[4] = v7 - (v8 << 11); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(_QWORD *)&v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v85);
          --v6;
          if (!--v9)
            goto LABEL_73;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8)
            v60 = 2047;
          else
            v60 = 2048;
          v61 = v60 + a1[4];
          a1[4] = v61;
        }
        v8 = v6;
      }
      else
      {
LABEL_73:
        v61 = a1[4];
      }
      a1[4] = v61 - (v8 << 11);
      if (v8)
      {
        v62 = (char *)a1[2];
        do
        {
          v63 = (_QWORD *)a1[1];
          v66 = *v63;
          v64 = (char *)(v63 + 1);
          v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1)
                v74 = 1;
              else
                v74 = (uint64_t)&v62[-*a1] >> 2;
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v74);
              v77 = &v75[8 * (v74 >> 2)];
              v78 = (uint64_t *)a1[1];
              v62 = v77;
              v79 = a1[2] - (_QWORD)v78;
              if (v79)
              {
                v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                v80 = 8 * (v79 >> 3);
                v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  v82 = *v78++;
                  *(_QWORD *)v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                v62 = (char *)a1[2];
              }
            }
            else
            {
              v68 = v67 >> 3;
              v22 = v67 >> 3 < -1;
              v69 = (v67 >> 3) + 2;
              if (v22)
                v70 = v69;
              else
                v70 = v68 + 1;
              v71 = &v64[-8 * (v70 >> 1)];
              v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                v62 = (char *)a1[1];
              }
              v73 = &v62[-8 * (v70 >> 1)];
              v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(_QWORD *)v62 = v65;
          v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = (char *)(v9 + v11);
      else
        v13 = (char *)v12;
      v14 = v11 - v8;
      v87 = a1 + 3;
      if (v13)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v13);
      else
        v15 = 0;
      v38 = v8 << 11;
      *(_QWORD *)&v85 = v13;
      *((_QWORD *)&v85 + 1) = &v13[8 * v14];
      *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
      *((_QWORD *)&v86 + 1) = &v13[8 * v15];
      do
      {
        v84 = operator new(0x1000uLL);
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            v41 = (char *)*((_QWORD *)&v85 + 1);
            v42 = (void *)v85;
            if (*((_QWORD *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85)
                v48 = 1;
              else
                v48 = (uint64_t)&v40[-v85] >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v48);
              v52 = v40 - v41;
              v51 = v40 == v41;
              v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *(_QWORD *)v41;
                  v41 += 8;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(_QWORD *)&v85 = v49;
              *((_QWORD *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v86 = v40;
              *((_QWORD *)&v86 + 1) = &v49[8 * v50];
              if (v42)
                operator delete(v42);
            }
            else
            {
              v43 = (uint64_t)(*((_QWORD *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1)
                v44 = v43 + 1;
              else
                v44 = v43 + 2;
              v45 = *((_QWORD *)&v85 + 1) - 8 * (v44 >> 1);
              v46 = &v40[-*((_QWORD *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((_QWORD *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((_QWORD *)&v85 + 1)]);
                v40 = v41;
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v46[v45];
              *((_QWORD *)&v85 + 1) = v47;
              *(_QWORD *)&v86 = &v46[v45];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v86 + 8);
          *(_QWORD *)&v86 = v86 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (j = (_QWORD *)a1[2];
            j != (_QWORD *)a1[1];
            std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v85, j))
      {
        --j;
      }
      v57 = (char *)*a1;
      v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] -= v38;
      if (v57)
        operator delete(v57);
    }
  }
}

void sub_1D50B79F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 1);
    if (v3 < 1)
      result -= (unint64_t)(2047 - v3) >> 11;
    else
      result += (unint64_t)v3 >> 11;
  }
  return result;
}

void std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, char a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 < 0x800)
    a2 = 1;
  if (v3 > 0xFFF || (a2 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 2048;
  }
}

uint64_t std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 8) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x800)
    a2 = 1;
  if (v5 < 0x1000)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 1 >= v12 >> 1)
        v13 = v12 >> 1;
      else
        v13 = (v11 - a2) >> 1;
      v11 -= 2 * v13;
      a5 -= 2 * v13;
      if (v13)
        result = memmove(a5, v11, 2 * v13);
      if (v11 == a2)
        break;
      v14 = *--v6;
      v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(_QWORD *result, _BYTE *__src, _BYTE *a3, void **a4, char *__dst)
{
  void **v6;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  v8 = result;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 1 >= v11 >> 1 ? v11 >> 1 : (a3 - v9) >> 1;
      if (v12)
        result = memmove(__dst, v9, 2 * v12);
      v9 += 2 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 2 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::back_insert_iterator<std::deque<unsigned short>>>>(uint64_t *a1, _WORD *a2, uint64_t *a3, _WORD *a4, _QWORD **a5)
{
  _WORD *v7;
  _QWORD *v8;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  _WORD *j;

  v7 = a2;
  v8 = *a5;
  if (a1 == a3)
  {
    while (v7 != a4)
      std::deque<unsigned short>::push_back(v8, v7++);
  }
  else
  {
    v11 = *a1 + 4096;
    if ((_WORD *)v11 != a2)
    {
      do
        std::deque<unsigned short>::push_back(v8, v7++);
      while (v7 != (_WORD *)v11);
    }
    *a5 = v8;
    for (i = a1 + 1; i != a3; ++i)
    {
      v13 = 0;
      v14 = *i;
      do
      {
        std::deque<unsigned short>::push_back(v8, (_WORD *)(v14 + v13));
        v13 += 2;
      }
      while (v13 != 4096);
      *a5 = v8;
    }
    for (j = (_WORD *)*a3; j != a4; ++j)
      std::deque<unsigned short>::push_back(v8, j);
  }
  *a5 = v8;
}

void nms::rasterizeRects<double>(double **a1, double *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v15;
  double v16;
  double *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  double *v24;
  unint64_t v25;
  double *v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  double *v31;
  double *v32;
  double *v33;
  unint64_t v34;
  double v35;
  _BYTE *v36;
  double *v37;
  double *v38;
  double *v39;
  unint64_t v40;
  double v41;
  char *v42;
  double *v43;
  char *v44;
  double *v45;
  char *v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  double *v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  unint64_t v57;
  void *v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  void *__p;
  _BYTE *v65;
  void *v66;
  double *v67;
  void *v68;
  uint64_t v69;
  __int128 v70;

  v7 = a2[2];
  v6 = a2[3];
  if (a6 == 5)
    v8 = 5;
  else
    v8 = 0;
  if (a6)
    v9 = v8;
  else
    v9 = 4;
  v10 = fabs(v6);
  if (fabs(v7) <= 2.22044605e-16 || v10 <= 2.22044605e-16)
    return;
  if (!v9)
  {
    v19 = 0;
    v21 = 0;
    v66 = 0;
    v67 = 0;
LABEL_20:
    v22 = 1;
    goto LABEL_26;
  }
  v16 = *a2;
  v15 = a2[1];
  v17 = *a1;
  v18 = a1[1] - *a1;
  v19 = v18 / v9;
  v20 = 4 * (v18 / v9);
  v66 = 0;
  v67 = 0;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = (char *)operator new(32 * v19);
    v66 = v21;
    bzero(v21, 32 * v19);
    v67 = (double *)&v21[32 * v19];
  }
  else
  {
    v21 = 0;
  }
  if (v9 > v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v23 = 8 * v9;
  v24 = v17;
  v25 = v18 / v9;
  v26 = (double *)v21;
  do
  {
    *v26 = (*v24 - v16) / v7;
    v26 += 4;
    v24 = (double *)((char *)v24 + v23);
    --v25;
  }
  while (v25);
  v27 = v17 + 1;
  v28 = 8;
  v29 = v18 / v9;
  do
  {
    *(double *)&v21[v28] = (*v27 - v15) / v6;
    v27 = (double *)((char *)v27 + v23);
    v28 += 32;
    --v29;
  }
  while (v29);
  v22 = 0;
LABEL_26:
  v68 = v21;
  v69 = v19;
  *(_QWORD *)&v70 = 4;
  std::valarray<double>::valarray(&__p, (uint64_t)&v68);
  v30 = __p;
  if ((v22 & 1) != 0)
  {
    if (!__p)
      goto LABEL_34;
  }
  else
  {
    v31 = (double *)((char *)v66 + 16);
    v32 = *a1 + 2;
    v33 = (double *)__p;
    v34 = v19;
    do
    {
      v35 = *v33++;
      *v31 = v35 + *v32 / v7;
      v31 += 4;
      v32 += v9;
      --v34;
    }
    while (v34);
  }
  if (v65 != v30)
    v65 += (v30 - v65 + 7) & 0xFFFFFFFFFFFFFFF8;
  operator delete(v30);
LABEL_34:
  v68 = (char *)v66 + 8;
  v69 = v19;
  *(_QWORD *)&v70 = 4;
  std::valarray<double>::valarray(&__p, (uint64_t)&v68);
  v36 = __p;
  if ((v22 & 1) != 0)
  {
    if (!__p)
      goto LABEL_42;
  }
  else
  {
    v37 = (double *)((char *)v66 + 24);
    v38 = *a1 + 3;
    v39 = (double *)__p;
    v40 = v19;
    do
    {
      v41 = *v39++;
      *v37 = v41 + *v38 / v6;
      v37 += 4;
      v38 += v9;
      --v40;
    }
    while (v40);
  }
  if (v65 != v36)
    v65 += (v36 - v65 + 7) & 0xFFFFFFFFFFFFFFF8;
  operator delete(v36);
LABEL_42:
  v42 = (char *)v66;
  v43 = v67;
  v44 = (char *)((_BYTE *)v66 - (_BYTE *)v67);
  if (v66 == v67)
  {
    v50 = 0;
    v47 = 0;
    if (!v66)
      goto LABEL_52;
    goto LABEL_51;
  }
  v45 = (double *)v66;
  do
  {
    *v45 = *v45 * (double)a4;
    ++v45;
  }
  while (v45 != v43);
  if ((char *)v43 - v42 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v46 = (char *)operator new((char *)v43 - v42);
  v47 = v46;
  v48 = 0;
  v49 = (unint64_t)((char *)v43 - v42) >> 3;
  do
  {
    *(double *)&v46[v48] = round(*(double *)&v42[v48]);
    v48 += 8;
    --v49;
  }
  while (v49);
  v50 = &v46[v48];
  if (v42)
  {
    v67 = (double *)((char *)v43 + ((unint64_t)(v44 + 7) & 0xFFFFFFFFFFFFFFF8));
LABEL_51:
    operator delete(v42);
    v67 = 0;
  }
LABEL_52:
  v66 = v47;
  v67 = (double *)v50;
  v63 = 0;
  nms::max<double>((uint64_t *)&__p, (double *)&v63, (uint64_t)&v66);
  v62 = (double)a4;
  nms::min<double>((uint64_t *)&v68, &v62, (uint64_t)&__p);
  if (v66)
  {
    if (v67 != v66)
      v67 = (double *)((char *)v67 + (((_BYTE *)v66 - (_BYTE *)v67 + 7) & 0xFFFFFFFFFFFFFFF8));
    operator delete(v66);
    v67 = 0;
  }
  v66 = v68;
  v67 = (double *)v69;
  v68 = 0;
  v69 = 0;
  if (__p)
  {
    if (v65 != __p)
      v65 += ((_BYTE *)__p - v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    operator delete(__p);
  }
  if (v19)
  {
    v51 = 0;
    v52 = 0;
    do
    {
      v68 = &v66;
      v69 = 4 * v51;
      v70 = xmmword_1D513B270;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&__p, (uint64_t)&v68);
      if (v52)
        operator delete(v52);
      v52 = (double *)__p;
      v53 = (unint64_t)*((double *)__p + 1);
      v54 = (unint64_t)*((double *)__p + 3);
      if (v53 < v54)
      {
        while (1)
        {
          v55 = *v52;
          v56 = v52[2] - *v52;
          v57 = (unint64_t)v56 >= a4 ? a4 : (unint64_t)v56;
          v68 = 0;
          v69 = 0;
          std::valarray<unsigned long>::resize();
          v58 = v68;
          if (v57)
            break;
          if (v68)
            goto LABEL_73;
LABEL_76:
          if (++v53 == v54)
            goto LABEL_77;
        }
        v59 = (_QWORD *)(*a3 + 8 * (unint64_t)(v55 + (double)(v53 * a4)));
        v60 = (uint64_t *)v68;
        do
        {
          v61 = *v60++;
          *v59++ += v61;
          --v57;
        }
        while (v57);
LABEL_73:
        if ((void *)v69 != v58)
          v69 += ((unint64_t)v58 - v69 + 7) & 0xFFFFFFFFFFFFFFF8;
        operator delete(v58);
        goto LABEL_76;
      }
LABEL_77:
      ++v51;
    }
    while (v51 != v19);
    if (v52)
      operator delete(v52);
  }
  if (v66)
  {
    if (v67 != v66)
      v67 = (double *)((char *)v67 + (((_BYTE *)v66 - (_BYTE *)v67 + 7) & 0xFFFFFFFFFFFFFFF8));
    operator delete(v66);
  }
}

void sub_1D50B82B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t nms::rasterizeQuadByQuantizedScoreMap<double>(double **a1, _QWORD *a2, _QWORD *a3, size_t __sz, unint64_t a5, unsigned int a6, unsigned __int8 a7)
{
  double *v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  double *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  BOOL *v24;
  double v25;
  double *v26;
  uint64_t v27;
  double v28;
  BOOL *v29;
  double v30;
  double *v31;
  double v32;
  unsigned __int8 *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  double v40;
  double v41;
  _BYTE *v42;
  _BYTE *v43;
  double v44;
  double v45;
  unint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t *v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  BOOL *v57;
  double v58;
  double *v59;
  uint64_t v60;
  double v61;
  BOOL *v62;
  double v63;
  double *v64;
  double v65;
  _BYTE *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  double v73;
  double v74;
  _BYTE *v75;
  _BYTE *v76;
  double v77;
  double v78;
  unint64_t v79;
  double *v80;
  uint64_t v81;
  uint64_t *v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  uint64_t v89;
  BOOL *v90;
  double v91;
  double *v92;
  uint64_t v93;
  double v94;
  BOOL *v95;
  double v96;
  double *v97;
  double v98;
  _BYTE *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  double v106;
  double v107;
  _BYTE *v108;
  _BYTE *v109;
  double v110;
  double v111;
  unint64_t v112;
  double *v113;
  uint64_t v114;
  uint64_t *v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  uint64_t v122;
  BOOL *v123;
  double v124;
  double *v125;
  uint64_t v126;
  double v127;
  BOOL *v128;
  double v129;
  double *v130;
  double v131;
  char *v132;
  char *v133;
  uint64_t v134;
  _BYTE *v135;
  char *v136;
  char v137;
  char v138;
  char v139;
  double v140;
  double v141;
  _BYTE *v142;
  _BYTE *v143;
  double v144;
  double v145;
  unint64_t v146;
  double *v147;
  uint64_t v148;
  uint64_t *v149;
  double v150;
  double v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  char *v157;
  char *v158;
  char v159;
  char v160;
  char v161;
  char v162;
  char v163;
  double *v164;
  double *v165;
  double *v166;
  unint64_t v167;
  uint64_t v168;
  double v169;
  double v170;
  double *v171;
  double v172;
  unint64_t v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  unint64_t v179;
  double v180;
  unint64_t v181;
  size_t v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  uint64_t v185;
  unint64_t v186;
  unsigned __int8 *v187;
  _BYTE *v188;
  uint64_t v189;
  unint64_t v190;
  _BYTE *v191;
  _BYTE *v192;
  uint64_t v193;
  unint64_t v194;
  _BYTE *v195;
  char *v196;
  void *v197;
  uint64_t v198;
  unsigned int v199;
  _BYTE *v200;
  uint64_t v201;
  unint64_t v202;
  _BYTE *v203;
  _BYTE *v204;
  unsigned __int8 *v205;
  char v206;
  uint64_t v207;
  unsigned __int8 *v208;
  double v210;
  _BYTE *v211;
  unsigned __int8 *v212;
  char v213;
  unint64_t v214;
  unsigned __int8 *v215;
  unsigned int v216;
  unsigned __int8 *v217;
  double v219;
  unint64_t v223;
  void *v224;
  char *v225;
  uint64_t v226;
  void *__p;
  _BYTE *v228;
  void *v229;
  double *v230;
  void *v231[2];
  void *v232[2];
  void *v233[2];
  void *v234[2];
  void *v235;
  double *v236;
  void *v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  void *v245;
  uint64_t v246;
  char *v247;
  _BYTE *v248;
  unsigned __int8 *v249;
  uint64_t v250;
  unsigned __int8 v251[9];

  v251[0] = a7;
  v249 = 0;
  v250 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v249, __sz);
  v247 = 0;
  v248 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v247, __sz);
  v245 = 0;
  v246 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v245, __sz);
  v243 = 0;
  v244 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v243, __sz);
  v241 = 0;
  v242 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v241, __sz);
  v239 = 0;
  v240 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v239, __sz);
  v237 = 0;
  v238 = 0;
  std::valarray<BOOL>::resize((uint64_t)&v237, __sz);
  v223 = a5;
  v235 = 0;
  v236 = 0;
  std::valarray<double>::resize((uint64_t)&v235, __sz, 0.0);
  v11 = (double *)v235;
  v12 = v236;
  v13 = (double)__sz;
  if (v235 != v236)
  {
    v14 = 0.0;
    v15 = (double *)v235;
    do
    {
      *v15++ = v14;
      v14 = v14 + 1.0;
    }
    while (v15 != v12);
    v16 = v11;
    do
    {
      *v16 = *v16 / v13;
      ++v16;
    }
    while (v16 != v12);
  }
  v234[0] = 0;
  v234[1] = 0;
  std::valarray<double>::resize((uint64_t)v234, __sz, -1.0);
  v233[0] = 0;
  v233[1] = 0;
  std::valarray<double>::resize((uint64_t)v233, __sz, -1.0);
  v232[0] = 0;
  v232[1] = 0;
  std::valarray<double>::resize((uint64_t)v232, __sz, -1.0);
  v231[0] = 0;
  v231[1] = 0;
  std::valarray<double>::resize((uint64_t)v231, __sz, -1.0);
  v18 = v247;
  v17 = v248;
  v19 = v248 - v247;
  if (v248 - v247 >= 1)
    bzero(v247, v248 - v247);
  v20 = v246 - (_QWORD)v245;
  if (v246 - (uint64_t)v245 >= 1)
    bzero(v245, v246 - (_QWORD)v245);
  v21 = (*a1)[1];
  v22 = (*a1)[7];
  if (v21 != v22)
  {
    v23 = v12 - v11;
    if (v19 != v23)
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    if (v11 != v12)
    {
      v24 = (BOOL *)v247;
      if (v22 >= v21)
        v25 = v21;
      else
        v25 = v22;
      v26 = v11;
      v27 = v12 - v11;
      do
      {
        v28 = *v26++;
        *v24++ = v28 >= v25;
        --v27;
      }
      while (v27);
    }
    if (v20 != v23)
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    if (v11 != v12)
    {
      v29 = (BOOL *)v245;
      if (v21 >= v22)
        v30 = v21;
      else
        v30 = v22;
      v31 = v11;
      do
      {
        v32 = *v31++;
        *v29++ = v32 < v30;
        --v23;
      }
      while (v23);
    }
    v18 = v247;
    v17 = v248;
    v19 = v248 - v247;
    if (v244 - v243 != v248 - v247)
      std::valarray<BOOL>::resize((uint64_t)&v243, v248 - v247);
    if (v17 != v18)
    {
      v33 = v243;
      v34 = (char *)v245;
      v35 = v18;
      v36 = v17 - v18;
      do
      {
        v38 = *v35++;
        v37 = v38;
        v39 = *v34++;
        *v33++ = v39 & v37;
        --v36;
      }
      while (v36);
    }
    v40 = **a1;
    v41 = (*a1)[6];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, &v243, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p)
        v228 += ((_BYTE *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, &v243, (uint64_t)v234[0]);
    v42 = __p;
    v43 = v228;
    if (v228 == __p)
    {
      if (!v228)
        goto LABEL_44;
    }
    else
    {
      v44 = fmax(v40, 0.0);
      v45 = fmax(v41, 0.0) - v44;
      v46 = (v228 - (_BYTE *)__p) >> 3;
      v47 = (double *)v229;
      v48 = v226;
      if (v46 <= 1)
        v46 = 1;
      v49 = (uint64_t *)__p;
      do
      {
        v50 = *v47++;
        v51 = v44 + v45 * (v50 - v21) / (v22 - v21);
        v52 = *v49++;
        *(double *)(v48 + 8 * v52) = v51;
        --v46;
      }
      while (v46);
      v228 = &v43[(v42 - v43 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v42);
LABEL_44:
    if (v229)
    {
      if (v230 != v229)
        v230 = (double *)((char *)v230 + (((_BYTE *)v229 - (_BYTE *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      operator delete(v229);
    }
  }
  if (v19 >= 1)
    bzero(v18, v17 - v18);
  v53 = v246 - (_QWORD)v245;
  if (v246 - (uint64_t)v245 >= 1)
    bzero(v245, v246 - (_QWORD)v245);
  v54 = (*a1)[1];
  v55 = (*a1)[3];
  if (v54 != v55)
  {
    v56 = v12 - v11;
    if (v19 != v56)
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    if (v11 != v12)
    {
      v57 = (BOOL *)v247;
      if (v55 >= v54)
        v58 = v54;
      else
        v58 = v55;
      v59 = v11;
      v60 = v12 - v11;
      do
      {
        v61 = *v59++;
        *v57++ = v61 >= v58;
        --v60;
      }
      while (v60);
    }
    if (v53 != v56)
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    if (v11 != v12)
    {
      v62 = (BOOL *)v245;
      if (v54 >= v55)
        v63 = v54;
      else
        v63 = v55;
      v64 = v11;
      do
      {
        v65 = *v64++;
        *v62++ = v65 < v63;
        --v56;
      }
      while (v56);
    }
    v18 = v247;
    v17 = v248;
    v19 = v248 - v247;
    if (v242 - (_QWORD)v241 != v248 - v247)
      std::valarray<BOOL>::resize((uint64_t)&v241, v248 - v247);
    if (v17 != v18)
    {
      v66 = v241;
      v67 = (char *)v245;
      v68 = v18;
      v69 = v17 - v18;
      do
      {
        v71 = *v68++;
        v70 = v71;
        v72 = *v67++;
        *v66++ = v72 & v70;
        --v69;
      }
      while (v69);
    }
    v73 = **a1;
    v74 = (*a1)[2];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v241, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p)
        v228 += ((_BYTE *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v241, (uint64_t)v233[0]);
    v75 = __p;
    v76 = v228;
    if (v228 == __p)
    {
      if (!v228)
        goto LABEL_86;
    }
    else
    {
      v77 = fmax(v73, 0.0);
      v78 = fmax(v74, 0.0) - v77;
      v79 = (v228 - (_BYTE *)__p) >> 3;
      v80 = (double *)v229;
      v81 = v226;
      if (v79 <= 1)
        v79 = 1;
      v82 = (uint64_t *)__p;
      do
      {
        v83 = *v80++;
        v84 = v77 + v78 * (v83 - v54) / (v55 - v54);
        v85 = *v82++;
        *(double *)(v81 + 8 * v85) = v84;
        --v79;
      }
      while (v79);
      v228 = &v76[(v75 - v76 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v75);
LABEL_86:
    if (v229)
    {
      if (v230 != v229)
        v230 = (double *)((char *)v230 + (((_BYTE *)v229 - (_BYTE *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      operator delete(v229);
    }
  }
  if (v19 >= 1)
    bzero(v18, v17 - v18);
  v86 = v246 - (_QWORD)v245;
  if (v246 - (uint64_t)v245 >= 1)
    bzero(v245, v246 - (_QWORD)v245);
  v87 = (*a1)[3];
  v88 = (*a1)[5];
  if (v87 != v88)
  {
    v89 = v12 - v11;
    if (v19 != v89)
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    if (v11 != v12)
    {
      v90 = (BOOL *)v247;
      if (v88 >= v87)
        v91 = v87;
      else
        v91 = v88;
      v92 = v11;
      v93 = v12 - v11;
      do
      {
        v94 = *v92++;
        *v90++ = v94 >= v91;
        --v93;
      }
      while (v93);
    }
    if (v86 != v89)
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    if (v11 != v12)
    {
      v95 = (BOOL *)v245;
      if (v87 >= v88)
        v96 = v87;
      else
        v96 = v88;
      v97 = v11;
      do
      {
        v98 = *v97++;
        *v95++ = v98 < v96;
        --v89;
      }
      while (v89);
    }
    v18 = v247;
    v17 = v248;
    v19 = v248 - v247;
    if (v240 - (_QWORD)v239 != v248 - v247)
      std::valarray<BOOL>::resize((uint64_t)&v239, v248 - v247);
    if (v17 != v18)
    {
      v99 = v239;
      v100 = (char *)v245;
      v101 = v18;
      v102 = v17 - v18;
      do
      {
        v104 = *v101++;
        v103 = v104;
        v105 = *v100++;
        *v99++ = v105 & v103;
        --v102;
      }
      while (v102);
    }
    v106 = (*a1)[2];
    v107 = (*a1)[4];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v239, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p)
        v228 += ((_BYTE *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v239, (uint64_t)v232[0]);
    v108 = __p;
    v109 = v228;
    if (v228 == __p)
    {
      if (!v228)
        goto LABEL_128;
    }
    else
    {
      v110 = fmax(v106, 0.0);
      v111 = fmax(v107, 0.0) - v110;
      v112 = (v228 - (_BYTE *)__p) >> 3;
      v113 = (double *)v229;
      v114 = v226;
      if (v112 <= 1)
        v112 = 1;
      v115 = (uint64_t *)__p;
      do
      {
        v116 = *v113++;
        v117 = v110 + v111 * (v116 - v87) / (v88 - v87);
        v118 = *v115++;
        *(double *)(v114 + 8 * v118) = v117;
        --v112;
      }
      while (v112);
      v228 = &v109[(v108 - v109 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v108);
LABEL_128:
    if (v229)
    {
      if (v230 != v229)
        v230 = (double *)((char *)v230 + (((_BYTE *)v229 - (_BYTE *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      operator delete(v229);
    }
  }
  if (v19 >= 1)
    bzero(v18, v17 - v18);
  v119 = v246 - (_QWORD)v245;
  if (v246 - (uint64_t)v245 >= 1)
    bzero(v245, v246 - (_QWORD)v245);
  v120 = (*a1)[5];
  v121 = (*a1)[7];
  if (v120 != v121)
  {
    v122 = v12 - v11;
    if (v19 != v122)
      std::valarray<BOOL>::resize((uint64_t)&v247, v12 - v11);
    if (v11 != v12)
    {
      v123 = (BOOL *)v247;
      if (v121 >= v120)
        v124 = v120;
      else
        v124 = v121;
      v125 = v11;
      v126 = v12 - v11;
      do
      {
        v127 = *v125++;
        *v123++ = v127 >= v124;
        --v126;
      }
      while (v126);
    }
    if (v119 != v122)
      std::valarray<BOOL>::resize((uint64_t)&v245, v12 - v11);
    if (v11 != v12)
    {
      v128 = (BOOL *)v245;
      if (v120 >= v121)
        v129 = v120;
      else
        v129 = v121;
      v130 = v11;
      do
      {
        v131 = *v130++;
        *v128++ = v131 < v129;
        --v122;
      }
      while (v122);
    }
    v132 = v247;
    v133 = v248;
    v134 = v248 - v247;
    if (v238 - (_QWORD)v237 != v248 - v247)
      std::valarray<BOOL>::resize((uint64_t)&v237, v248 - v247);
    if (v133 != v132)
    {
      v135 = v237;
      v136 = (char *)v245;
      do
      {
        v138 = *v132++;
        v137 = v138;
        v139 = *v136++;
        *v135++ = v139 & v137;
        --v134;
      }
      while (v134);
    }
    v140 = (*a1)[4];
    v141 = (*a1)[6];
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v237, (uint64_t)v11);
    std::valarray<double>::valarray(&v229, &v226);
    if (__p)
    {
      if (v228 != __p)
        v228 += ((_BYTE *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(__p);
    }
    std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v237, (uint64_t)v231[0]);
    v142 = __p;
    v143 = v228;
    if (v228 == __p)
    {
      if (!v228)
        goto LABEL_170;
    }
    else
    {
      v144 = fmax(v140, 0.0);
      v145 = fmax(v141, 0.0) - v144;
      v146 = (v228 - (_BYTE *)__p) >> 3;
      v147 = (double *)v229;
      v148 = v226;
      if (v146 <= 1)
        v146 = 1;
      v149 = (uint64_t *)__p;
      do
      {
        v150 = *v147++;
        v151 = v144 + v145 * (v150 - v120) / (v121 - v120);
        v152 = *v149++;
        *(double *)(v148 + 8 * v152) = v151;
        --v146;
      }
      while (v146);
      v228 = &v143[(v142 - v143 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    operator delete(v142);
LABEL_170:
    if (v229)
    {
      if (v230 != v229)
        v230 = (double *)((char *)v230 + (((_BYTE *)v229 - (_BYTE *)v230 + 7) & 0xFFFFFFFFFFFFFFF8));
      operator delete(v229);
    }
  }
  v153 = v243;
  v154 = v244;
  v155 = v244 - v243;
  if (v250 - (_QWORD)v249 != v244 - v243)
    std::valarray<BOOL>::resize((uint64_t)&v249, v244 - v243);
  if (v154 != v153)
  {
    v156 = v249;
    v157 = (char *)v237;
    v158 = (char *)v239;
    do
    {
      v160 = *v153++;
      v159 = v160;
      v161 = *v157++;
      v162 = v161 | v159;
      v163 = *v158++;
      *v156++ = v162 | v163;
      --v155;
    }
    while (v155);
  }
  std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, &v249, (uint64_t)v11);
  std::valarray<double>::valarray(&v229, &v226);
  if (__p)
  {
    if (v228 != __p)
      v228 += ((_BYTE *)__p - v228 + 7) & 0xFFFFFFFFFFFFFFF8;
    operator delete(__p);
  }
  v164 = (double *)v229;
  v165 = v230;
  if (v229 != v230)
  {
    v166 = (double *)v229;
    do
    {
      *v166 = v13 * *v166;
      ++v166;
    }
    while (v166 != v165);
    v167 = 0;
    v168 = 0;
    v169 = (double)v223;
    v170 = 0.0;
    v171 = v164;
    while (1)
    {
      v172 = v171[v167];
      v173 = vcvtad_u64_f64(v172);
      v174 = *((double *)v234[0] + v173);
      v175 = 1.79769313e308;
      if (v174 < 0.0 || (v175 = fmin(v174, 1.79769313e308), v174 <= 0.0))
        v174 = 0.0;
      v176 = *((double *)v233[0] + v173);
      if (v176 < 0.0)
        goto LABEL_194;
      if (v176 < v175)
        v175 = *((double *)v233[0] + v173);
      if (v176 <= v174)
LABEL_194:
        v176 = v174;
      v177 = *((double *)v232[0] + v173);
      if (v177 < 0.0)
        goto LABEL_199;
      if (v177 < v175)
        v175 = *((double *)v232[0] + v173);
      if (v177 <= v176)
LABEL_199:
        v177 = v176;
      v178 = *((double *)v231[0] + v173);
      if (v178 < 0.0)
        goto LABEL_204;
      if (v178 < v175)
        v175 = *((double *)v231[0] + v173);
      if (v178 <= v177)
LABEL_204:
        v178 = v177;
      v179 = vcvtad_u64_f64(v175 * v169);
      v180 = (double)(unint64_t)round(v175 * v169) + v169 * ((double)(unint64_t)round(v172) + -1.0);
      v181 = v173 ? (unint64_t)v180 : v179;
      v182 = vcvtad_u64_f64((v178 - v175) * v169);
      if (v182)
      {
        v183 = (unsigned __int8 *)operator new(v182);
        v184 = v183;
        v185 = 0;
        v186 = *a3 + v181;
        do
        {
          v183[v185] = *(_BYTE *)(v186 + v185);
          ++v185;
        }
        while (v182 != v185);
        v187 = &v183[v185];
        if (a6)
        {
LABEL_212:
          std::__val_expr<std::_BinaryOp<std::less<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(&v224, v184, v187, v251);
          std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v224, (uint64_t)v184);
          v188 = v228;
          if (v228 == __p)
          {
            v191 = v228;
            if (!v228)
              goto LABEL_229;
          }
          else
          {
            v189 = 0;
            v190 = (v228 - (_BYTE *)__p) >> 3;
            if (v190 <= 1)
              v190 = 1;
            do
              *(_BYTE *)(v226 + *((_QWORD *)__p + v189++)) = 0;
            while (v190 != v189);
            v191 = __p;
            v188 = v228;
            if (!__p)
            {
LABEL_229:
              if (v224)
              {
                if (v225 != v224)
                  v225 = (char *)v224;
                operator delete(v224);
              }
              v224 = 0;
              v225 = 0;
              if (v187 == v184)
              {
                v197 = 0;
              }
              else
              {
                v196 = (char *)operator new(v187 - v184);
                v197 = v196;
                v198 = 0;
                v224 = v196;
                v199 = v251[0];
                do
                {
                  v196[v198] = v184[v198] >= v199;
                  ++v198;
                }
                while (v187 - v184 != v198);
                v225 = &v196[v198];
              }
              std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v224, (uint64_t)v184);
              v200 = v228;
              if (v228 == __p)
              {
                v203 = v228;
                if (!v228)
                  goto LABEL_248;
              }
              else
              {
                v201 = 0;
                v202 = (v228 - (_BYTE *)__p) >> 3;
                if (v202 <= 1)
                  v202 = 1;
                do
                  *(_BYTE *)(v226 + *((_QWORD *)__p + v201++)) = 1;
                while (v202 != v201);
                v203 = __p;
                v200 = v228;
                if (!__p)
                {
LABEL_248:
                  if (v197)
                    operator delete(v197);
                  if (v182)
                  {
                    v204 = (_BYTE *)(*a2 + v181);
                    v205 = v184;
                    do
                    {
                      v206 = *v205++;
                      *v204++ += v206 * a6;
                      --v182;
                    }
                    while (v182);
                  }
                  if (v187 == v184)
                  {
                    v207 = 0;
                  }
                  else
                  {
                    v207 = 0;
                    v208 = v184;
                    do
                    {
                      if (*v208++)
                        ++v207;
                    }
                    while (v208 != v187);
                  }
                  v210 = (double)(v207 * (unint64_t)a6);
                  if (!v184)
                    goto LABEL_284;
                  goto LABEL_283;
                }
              }
              if (v200 != v203)
                v228 = &v200[(v203 - v200 + 7) & 0xFFFFFFFFFFFFFFF8];
              operator delete(v203);
              __p = 0;
              v228 = 0;
              goto LABEL_248;
            }
          }
          if (v188 != v191)
            v228 = &v188[(v191 - v188 + 7) & 0xFFFFFFFFFFFFFFF8];
          operator delete(v191);
          __p = 0;
          v228 = 0;
          goto LABEL_229;
        }
      }
      else
      {
        v184 = 0;
        v187 = 0;
        if (a6)
          goto LABEL_212;
      }
      std::__val_expr<std::_BinaryOp<std::less<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(&v224, v184, v187, v251);
      std::mask_array<unsigned char>::mask_array[abi:ne180100](&v226, (unsigned __int8 **)&v224, (uint64_t)v184);
      v192 = v228;
      if (v228 == __p)
        break;
      v193 = 0;
      v194 = (v228 - (_BYTE *)__p) >> 3;
      if (v194 <= 1)
        v194 = 1;
      do
        *(_BYTE *)(v226 + *((_QWORD *)__p + v193++)) = 0;
      while (v194 != v193);
      v195 = __p;
      v192 = v228;
      if (__p)
        goto LABEL_263;
LABEL_266:
      if (v224)
      {
        if (v225 != v224)
          v225 = (char *)v224;
        operator delete(v224);
      }
      if (v182)
      {
        v211 = (_BYTE *)(*a2 + v181);
        v212 = v184;
        do
        {
          v213 = *v212++;
          *v211++ += v213;
          --v182;
        }
        while (v182);
      }
      v214 = v187 - v184;
      if (v187 == v184)
      {
        v207 = 0;
        v210 = 0.0;
        if (!v184)
          goto LABEL_284;
      }
      else
      {
        if (v214 <= 1)
          v214 = 1;
        v210 = 0.0;
        v215 = v184;
        do
        {
          v216 = *v215++;
          v210 = v210 + (double)v216;
          --v214;
        }
        while (v214);
        v207 = 0;
        v217 = v184;
        do
        {
          if (*v217++)
            ++v207;
        }
        while (v217 != v187);
        if (!v184)
          goto LABEL_284;
      }
LABEL_283:
      operator delete(v184);
LABEL_284:
      v168 += v207;
      v170 = v170 + v210;
      ++v167;
      v171 = (double *)v229;
      v164 = v230;
      if (v167 >= ((char *)v230 - (_BYTE *)v229) >> 3)
      {
        v219 = v170;
        if (!v229)
          goto LABEL_294;
        goto LABEL_291;
      }
    }
    v195 = v228;
    if (!v228)
      goto LABEL_266;
LABEL_263:
    if (v192 != v195)
      v228 = &v192[(v195 - v192 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v195);
    __p = 0;
    v228 = 0;
    goto LABEL_266;
  }
  v219 = 0.0;
  v171 = (double *)v229;
  if (!v229)
    goto LABEL_294;
LABEL_291:
  if (v164 != v171)
    v230 = (double *)((char *)v164 + (((char *)v171 - (char *)v164 + 7) & 0xFFFFFFFFFFFFFFF8));
  operator delete(v171);
LABEL_294:
  if (v231[0])
    operator delete(v231[0]);
  if (v232[0])
    operator delete(v232[0]);
  if (v233[0])
    operator delete(v233[0]);
  if (v234[0])
    operator delete(v234[0]);
  if (v235)
    operator delete(v235);
  if (v237)
    operator delete(v237);
  if (v239)
    operator delete(v239);
  if (v241)
    operator delete(v241);
  if (v243)
    operator delete(v243);
  if (v245)
    operator delete(v245);
  if (v247)
    operator delete(v247);
  if (v249)
    operator delete(v249);
  return *(_QWORD *)&v219;
}

void sub_1D50B93E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35)
{
  uint64_t v35;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a25)
    operator delete(a25);
  if (a27)
    operator delete(a27);
  if (a29)
    operator delete(a29);
  if (a31)
    operator delete(a31);
  if (a33)
    operator delete(a33);
  if (a35)
    operator delete(a35);
  v37 = *(void **)(v35 - 208);
  if (v37)
    operator delete(v37);
  v38 = *(void **)(v35 - 192);
  if (v38)
    operator delete(v38);
  v39 = *(void **)(v35 - 176);
  if (v39)
    operator delete(v39);
  v40 = *(void **)(v35 - 160);
  if (v40)
    operator delete(v40);
  _Unwind_Resume(exception_object);
}

_QWORD *std::valarray<double>::valarray(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    v4 = a3;
    if (a3 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v6 = operator new(8 * a3);
    *a1 = v6;
    do
    {
      v7 = *a2++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
    a1[1] = v6;
  }
  return a1;
}

void std::deque<unsigned short>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *i;
  char *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;

  v2 = a1[4];
  v3 = v2 >= 0x800;
  v4 = v2 - 2048;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(_QWORD *)v6 = v8;
      a1[2] += 8;
      return;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v28 = 1;
      else
        v28 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
      v30 = &v29[8 * (v28 >> 2)];
      v32 = &v29[8 * v31];
      v33 = (uint64_t *)a1[1];
      v6 = v30;
      v34 = a1[2] - (_QWORD)v33;
      if (v34)
      {
        v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        v35 = 8 * (v34 >> 3);
        v36 = &v29[8 * (v28 >> 2)];
        do
        {
          v37 = *v33++;
          *(_QWORD *)v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  v19 = a1[2];
  v20 = (v19 - a1[1]) >> 3;
  v21 = a1[3];
  v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(_QWORD *)&v49 = operator new(0x1000uLL);
      std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v49);
      return;
    }
    *(_QWORD *)&v49 = operator new(0x1000uLL);
    std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v49);
    v39 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v40 = *v39;
    v7 = (char *)(v39 + 1);
    v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_31;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v41 = 1;
      else
        v41 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v41);
      v30 = &v29[8 * (v41 >> 2)];
      v32 = &v29[8 * v42];
      v43 = (uint64_t *)a1[1];
      v6 = v30;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v29[8 * (v41 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1)
    v23 = 1;
  else
    v23 = v22 >> 2;
  v51 = a1 + 3;
  *(_QWORD *)&v49 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v23);
  *((_QWORD *)&v49 + 1) = v49 + 8 * v20;
  *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
  *((_QWORD *)&v50 + 1) = v49 + 8 * v24;
  v48 = operator new(0x1000uLL);
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v49, &v48);
  for (i = (_QWORD *)a1[2];
        i != (_QWORD *)a1[1];
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  v26 = (char *)*a1;
  v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26)
    operator delete(v26);
}

void sub_1D50B98E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::reference_wrapper<std::valarray<double> const>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::deque<std::valarray<BOOL>>::push_back(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  __n128 result;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 32 * (v5 - v4) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x100)
    {
      v23 = v6 >> 3;
      v24 = (char *)a1[3];
      v25 = (char *)*a1;
      v26 = (uint64_t)&v24[-*a1];
      if (v6 >> 3 >= (unint64_t)(v26 >> 3))
      {
        v29 = v26 >> 2;
        if (v24 == v25)
          v30 = 1;
        else
          v30 = v29;
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v30);
        v33 = v32;
        v34 = operator new(0x1000uLL);
        v35 = &v31[8 * v23];
        v36 = &v31[8 * v33];
        if (v23 == v33)
        {
          v37 = 8 * v23;
          if (v6 < 1)
          {
            v73 = v34;
            v74 = v37 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v75);
            v35 = &v76[8 * (v75 >> 2)];
            v36 = &v76[8 * v77];
            if (v31)
              operator delete(v31);
            v31 = v76;
            v34 = v73;
          }
          else
          {
            v38 = v37 >> 3;
            if (v38 >= -1)
              v39 = v38 + 1;
            else
              v39 = v38 + 2;
            v35 -= 8 * (v39 >> 1);
          }
        }
        *(_QWORD *)v35 = v34;
        v78 = v35 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v35 == v31)
          {
            if (v78 >= v36)
            {
              if (v36 == v31)
                v84 = 1;
              else
                v84 = (v36 - v31) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v84);
              v87 = v85;
              v35 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v31;
              v88 = v78 == v31;
              v78 = v35;
              if (!v88)
              {
                v78 = &v35[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v35;
                v92 = (uint64_t *)v31;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v36 = &v85[8 * v86];
              if (v31)
                operator delete(v31);
              v31 = v87;
            }
            else
            {
              v80 = (v36 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v35 = &v31[8 * (v81 >> 1)];
              v83 = v31;
              if (v78 != v31)
              {
                memmove(v35, v31, v78 - v31);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v35 - 1) = v94;
          v35 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v31;
        a1[1] = v35;
        a1[2] = v78;
        a1[3] = v36;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v5)
      {
        if (v4 == v25)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v24 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v27;
      }
    }
    else
    {
      a1[4] = v8 - 256;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1)
            v40 = 1;
          else
            v40 = (uint64_t)&v5[-*a1] >> 2;
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
          v43 = &v41[8 * (v40 >> 2)];
          v44 = (uint64_t *)a1[1];
          v5 = v43;
          v45 = a1[2] - (_QWORD)v44;
          if (v45)
          {
            v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
            v46 = 8 * (v45 >> 3);
            v47 = &v41[8 * (v40 >> 2)];
            do
            {
              v48 = *v44++;
              *(_QWORD *)v47 = v48;
              v47 += 8;
              v46 -= 8;
            }
            while (v46);
          }
          v49 = (char *)*a1;
          *a1 = v41;
          a1[1] = v43;
          a1[2] = v5;
          a1[3] = &v41[8 * v42];
          if (v49)
          {
            operator delete(v49);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v9 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)&v4[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void sub_1D50B9E98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D50B9FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void **v18;
  void **v19;
  void **v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  void **v51;
  void **v52;
  void **v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  void **v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int16 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  void **v84;
  void **v85;
  void **v86;
  unsigned __int16 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void **v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  void **v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int16 *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  void **v117;
  void **v118;
  uint64_t v119;
  void **v120;
  unsigned __int16 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void **v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  void **v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned __int16 *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int16 *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v3 = a1[121];
  if (!v3)
    return;
  v151 = *(_QWORD *)(v3 + 40);
  if (!v151)
    return;
  v6 = 0;
  v7 = a2;
  v8 = a3;
  do
  {
    v9 = *(_QWORD *)(a1[80] + 8 * ((a1[83] + v7) / 0x55uLL)) + 48 * ((a1[83] + v7) % 0x55uLL);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * ((*(_QWORD *)(v9 + 32) + v6) / 0x55uLL))
        + 48 * ((*(_QWORD *)(v9 + 32) + v6) % 0x55uLL);
    v11 = *(_QWORD *)(v10 + 32) + v8;
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * (v11 / 0x55));
    v13 = v11 % 0x55;
    v14 = v12 + 48 * (v11 % 0x55);
    v16 = (_QWORD *)(v14 + 40);
    v15 = *(_QWORD *)(v14 + 40);
    v153 = v12;
    v152 = v11 % 0x55;
    if (!v15)
      goto LABEL_43;
    v17 = (uint64_t *)(v12 + 48 * v13 + 32);
    v18 = *(void ***)(v14 + 8);
    v19 = *(void ***)(v14 + 16);
    v148 = v17;
    if (v19 == v18)
    {
      v19 = *(void ***)(v14 + 8);
      goto LABEL_35;
    }
    v20 = &v18[(unint64_t)*v17 >> 11];
    v21 = (unsigned __int16 *)((char *)*v20 + 2 * (*v17 & 0x7FF));
    v155 = *(uint64_t *)((char *)v18 + (((unint64_t)(*v17 + v15) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((*v17 + v15) & 0x7FF);
    if (v21 == (unsigned __int16 *)v155)
      goto LABEL_33;
    do
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1[74] + (((unint64_t)(a1[77] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a1 + 616) + v7));
      v23 = *v21;
      --*(_BYTE *)(v22 + v8);
      v24 = *(_QWORD *)(*(_QWORD *)(a1[74] + (((unint64_t)(a1[77] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a1 + 616) + v6));
      --*(_BYTE *)(v24 + v23);
      v25 = *(_QWORD *)(a1[80] + 8 * ((a1[83] + v6) / 0x55uLL)) + 48 * ((a1[83] + v6) % 0x55uLL);
      v26 = *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * ((*(_QWORD *)(v25 + 32) + v7) / 0x55uLL))
          + 48 * ((*(_QWORD *)(v25 + 32) + v7) % 0x55uLL);
      v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * ((*(_QWORD *)(v26 + 32) + v23) / 0x55uLL))
          + 48 * ((*(_QWORD *)(v26 + 32) + v23) % 0x55uLL);
      v28 = *(_QWORD *)(v27 + 40);
      v29 = *(void ***)(v27 + 8);
      v30 = (uint64_t *)(v27 + 32);
      if (v28 == 1)
      {
        v31 = *(_QWORD *)(v27 + 16);
        *(_QWORD *)(v27 + 40) = 0;
        v32 = v31 - (_QWORD)v29;
        if ((unint64_t)(v31 - (_QWORD)v29) >= 0x11)
        {
          do
          {
            operator delete(*v29);
            v33 = *(_QWORD *)(v27 + 16);
            v29 = (void **)(*(_QWORD *)(v27 + 8) + 8);
            *(_QWORD *)(v27 + 8) = v29;
            v32 = v33 - (_QWORD)v29;
          }
          while (v32 > 0x10);
        }
        if (v32 >> 3 == 1)
        {
          v34 = 1024;
        }
        else
        {
          if (v32 >> 3 != 2)
          {
LABEL_28:
            std::deque<unsigned short>::shrink_to_fit((void **)v27);
            goto LABEL_29;
          }
          v34 = 2048;
        }
        *v30 = v34;
        goto LABEL_28;
      }
      v35 = &v29[(unint64_t)*v30 >> 11];
      v36 = *(void ***)(v27 + 16);
      if (v36 == v29)
        v37 = 0;
      else
        v37 = (uint64_t)*v35 + 2 * (*v30 & 0x7FF);
      v38 = *v30 + v28;
      v39 = v38 >> 11;
      v40 = v38 & 0x7FF;
LABEL_17:
      v41 = (unsigned __int16 *)v37;
      while (1)
      {
        v42 = v36 == v29 ? 0 : (uint64_t)v29[v39] + 2 * v40;
        if (v41 == (unsigned __int16 *)v42)
          break;
        if (*v41 == a3)
        {
          std::deque<unsigned short>::erase((int64x2_t *)v27, (char *)v35, v37);
          break;
        }
        ++v41;
        v37 += 2;
        if ((char *)*v35 + 4096 == (void *)v37)
        {
          v43 = (uint64_t)v35[1];
          ++v35;
          v37 = v43;
          goto LABEL_17;
        }
      }
LABEL_29:
      if ((char *)++v21 - (_BYTE *)*v20 == 4096)
      {
        v44 = (unsigned __int16 *)v20[1];
        ++v20;
        v21 = v44;
      }
    }
    while (v21 != (unsigned __int16 *)v155);
    v18 = *(void ***)(v14 + 8);
    v19 = *(void ***)(v14 + 16);
LABEL_33:
    v12 = v153;
    v16 = (_QWORD *)(v14 + 40);
    v13 = v152;
LABEL_35:
    *v16 = 0;
    v45 = (char *)v19 - (char *)v18;
    if (v45 >= 0x11)
    {
      do
      {
        operator delete(*v18);
        v46 = *(_QWORD *)(v14 + 16);
        v18 = (void **)(*(_QWORD *)(v14 + 8) + 8);
        *(_QWORD *)(v14 + 8) = v18;
        v45 = v46 - (_QWORD)v18;
      }
      while (v45 > 0x10);
    }
    if (v45 >> 3 == 1)
    {
      v47 = 1024;
LABEL_41:
      *v148 = v47;
    }
    else if (v45 >> 3 == 2)
    {
      v47 = 2048;
      goto LABEL_41;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_43:
    v48 = *(_QWORD *)(a1[92] + 8 * ((a1[95] + v7) / 0x55uLL)) + 48 * ((a1[95] + v7) % 0x55uLL);
    v49 = *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8 * ((*(_QWORD *)(v48 + 32) + v6) / 0x55uLL))
        + 48 * ((*(_QWORD *)(v48 + 32) + v6) % 0x55uLL);
    std::deque<unsigned short>::operator=((_QWORD *)v14, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * ((*(_QWORD *)(v49 + 32) + v8) / 0x55uLL))+ 48 * ((*(_QWORD *)(v49 + 32) + v8) % 0x55uLL)));
    if (!*v16)
      goto LABEL_82;
    v50 = (uint64_t *)(v12 + 48 * v13 + 32);
    v51 = *(void ***)(v14 + 8);
    v52 = *(void ***)(v14 + 16);
    v149 = v50;
    if (v52 == v51)
    {
      v52 = *(void ***)(v14 + 8);
      goto LABEL_74;
    }
    v53 = &v51[(unint64_t)*v50 >> 11];
    v54 = (unsigned __int16 *)((char *)*v53 + 2 * (*v50 & 0x7FF));
    v156 = *(uint64_t *)((char *)v51 + (((unint64_t)(*v50 + *v16) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((*v50 + *v16) & 0x7FF);
    if (v54 == (unsigned __int16 *)v156)
      goto LABEL_72;
    while (2)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(a1[86] + (((unint64_t)(a1[89] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a1 + 712) + v7));
      v56 = *v54;
      --*(_BYTE *)(v55 + v8);
      v57 = *(_QWORD *)(*(_QWORD *)(a1[98] + (((unint64_t)(a1[101] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a1 + 808) + v6));
      --*(_BYTE *)(v57 + v56);
      v58 = *(_QWORD *)(a1[104] + 8 * ((a1[107] + v6) / 0x55uLL)) + 48 * ((a1[107] + v6) % 0x55uLL);
      v59 = *(_QWORD *)(*(_QWORD *)(v58 + 8) + 8 * ((*(_QWORD *)(v58 + 32) + v7) / 0x55uLL))
          + 48 * ((*(_QWORD *)(v58 + 32) + v7) % 0x55uLL);
      v60 = *(_QWORD *)(*(_QWORD *)(v59 + 8) + 8 * ((*(_QWORD *)(v59 + 32) + v56) / 0x55uLL))
          + 48 * ((*(_QWORD *)(v59 + 32) + v56) % 0x55uLL);
      v61 = *(_QWORD *)(v60 + 40);
      v62 = *(void ***)(v60 + 8);
      v63 = (uint64_t *)(v60 + 32);
      if (v61 == 1)
      {
        v64 = *(_QWORD *)(v60 + 16);
        *(_QWORD *)(v60 + 40) = 0;
        v65 = v64 - (_QWORD)v62;
        if ((unint64_t)(v64 - (_QWORD)v62) >= 0x11)
        {
          do
          {
            operator delete(*v62);
            v66 = *(_QWORD *)(v60 + 16);
            v62 = (void **)(*(_QWORD *)(v60 + 8) + 8);
            *(_QWORD *)(v60 + 8) = v62;
            v65 = v66 - (_QWORD)v62;
          }
          while (v65 > 0x10);
        }
        if (v65 >> 3 == 1)
        {
          v67 = 1024;
LABEL_66:
          *v63 = v67;
        }
        else if (v65 >> 3 == 2)
        {
          v67 = 2048;
          goto LABEL_66;
        }
        std::deque<unsigned short>::shrink_to_fit((void **)v60);
      }
      else
      {
        v68 = &v62[(unint64_t)*v63 >> 11];
        v69 = *(void ***)(v60 + 16);
        if (v69 == v62)
          v70 = 0;
        else
          v70 = (uint64_t)*v68 + 2 * (*v63 & 0x7FF);
        v71 = *v63 + v61;
        v72 = v71 >> 11;
        v73 = v71 & 0x7FF;
LABEL_56:
        v74 = (unsigned __int16 *)v70;
        while (1)
        {
          v75 = v69 == v62 ? 0 : (uint64_t)v62[v72] + 2 * v73;
          if (v74 == (unsigned __int16 *)v75)
            break;
          if (*v74 == a3)
          {
            std::deque<unsigned short>::erase((int64x2_t *)v60, (char *)v68, v70);
            break;
          }
          ++v74;
          v70 += 2;
          if ((char *)*v68 + 4096 == (void *)v70)
          {
            v76 = (uint64_t)v68[1];
            ++v68;
            v70 = v76;
            goto LABEL_56;
          }
        }
      }
      if ((char *)++v54 - (_BYTE *)*v53 == 4096)
      {
        v77 = (unsigned __int16 *)v53[1];
        ++v53;
        v54 = v77;
      }
      if (v54 != (unsigned __int16 *)v156)
        continue;
      break;
    }
    v51 = *(void ***)(v14 + 8);
    v52 = *(void ***)(v14 + 16);
LABEL_72:
    v12 = v153;
    v16 = (_QWORD *)(v14 + 40);
    v13 = v152;
LABEL_74:
    *v16 = 0;
    v78 = (char *)v52 - (char *)v51;
    if (v78 >= 0x11)
    {
      do
      {
        operator delete(*v51);
        v79 = *(_QWORD *)(v14 + 16);
        v51 = (void **)(*(_QWORD *)(v14 + 8) + 8);
        *(_QWORD *)(v14 + 8) = v51;
        v78 = v79 - (_QWORD)v51;
      }
      while (v78 > 0x10);
    }
    if (v78 >> 3 == 1)
    {
      v80 = 1024;
LABEL_80:
      *v149 = v80;
    }
    else if (v78 >> 3 == 2)
    {
      v80 = 2048;
      goto LABEL_80;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_82:
    v81 = *(_QWORD *)(a1[104] + 8 * ((a1[107] + v7) / 0x55uLL)) + 48 * ((a1[107] + v7) % 0x55uLL);
    v82 = *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * ((*(_QWORD *)(v81 + 32) + v6) / 0x55uLL))
        + 48 * ((*(_QWORD *)(v81 + 32) + v6) % 0x55uLL);
    std::deque<unsigned short>::operator=((_QWORD *)v14, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) + 8 * ((*(_QWORD *)(v82 + 32) + v8) / 0x55uLL))+ 48 * ((*(_QWORD *)(v82 + 32) + v8) % 0x55uLL)));
    if (!*v16)
      goto LABEL_121;
    v83 = (uint64_t *)(v12 + 48 * v13 + 32);
    v84 = *(void ***)(v14 + 8);
    v85 = *(void ***)(v14 + 16);
    v150 = v83;
    if (v85 == v84)
    {
      v85 = *(void ***)(v14 + 8);
      goto LABEL_113;
    }
    v86 = &v84[(unint64_t)*v83 >> 11];
    v87 = (unsigned __int16 *)((char *)*v86 + 2 * (*v83 & 0x7FF));
    v157 = *(uint64_t *)((char *)v84 + (((unint64_t)(*v83 + *v16) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((*v83 + *v16) & 0x7FF);
    if (v87 == (unsigned __int16 *)v157)
      goto LABEL_111;
    while (2)
    {
      v88 = *(_QWORD *)(*(_QWORD *)(a1[98] + (((unint64_t)(a1[101] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a1 + 808) + v7));
      v89 = *v87;
      --*(_BYTE *)(v88 + v8);
      v90 = *(_QWORD *)(*(_QWORD *)(a1[86] + (((unint64_t)(a1[89] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a1 + 712) + v6));
      --*(_BYTE *)(v90 + v89);
      v91 = *(_QWORD *)(a1[92] + 8 * ((a1[95] + v6) / 0x55uLL)) + 48 * ((a1[95] + v6) % 0x55uLL);
      v92 = *(_QWORD *)(*(_QWORD *)(v91 + 8) + 8 * ((*(_QWORD *)(v91 + 32) + v7) / 0x55uLL))
          + 48 * ((*(_QWORD *)(v91 + 32) + v7) % 0x55uLL);
      v93 = *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * ((*(_QWORD *)(v92 + 32) + v89) / 0x55uLL))
          + 48 * ((*(_QWORD *)(v92 + 32) + v89) % 0x55uLL);
      v94 = *(_QWORD *)(v93 + 40);
      v95 = *(void ***)(v93 + 8);
      v96 = (uint64_t *)(v93 + 32);
      if (v94 == 1)
      {
        v97 = *(_QWORD *)(v93 + 16);
        *(_QWORD *)(v93 + 40) = 0;
        v98 = v97 - (_QWORD)v95;
        if ((unint64_t)(v97 - (_QWORD)v95) >= 0x11)
        {
          do
          {
            operator delete(*v95);
            v99 = *(_QWORD *)(v93 + 16);
            v95 = (void **)(*(_QWORD *)(v93 + 8) + 8);
            *(_QWORD *)(v93 + 8) = v95;
            v98 = v99 - (_QWORD)v95;
          }
          while (v98 > 0x10);
        }
        if (v98 >> 3 == 1)
        {
          v100 = 1024;
LABEL_105:
          *v96 = v100;
        }
        else if (v98 >> 3 == 2)
        {
          v100 = 2048;
          goto LABEL_105;
        }
        std::deque<unsigned short>::shrink_to_fit((void **)v93);
      }
      else
      {
        v101 = &v95[(unint64_t)*v96 >> 11];
        v102 = *(void ***)(v93 + 16);
        if (v102 == v95)
          v103 = 0;
        else
          v103 = (uint64_t)*v101 + 2 * (*v96 & 0x7FF);
        v104 = *v96 + v94;
        v105 = v104 >> 11;
        v106 = v104 & 0x7FF;
LABEL_95:
        v107 = (unsigned __int16 *)v103;
        while (1)
        {
          v108 = v102 == v95 ? 0 : (uint64_t)v95[v105] + 2 * v106;
          if (v107 == (unsigned __int16 *)v108)
            break;
          if (*v107 == a3)
          {
            std::deque<unsigned short>::erase((int64x2_t *)v93, (char *)v101, v103);
            break;
          }
          ++v107;
          v103 += 2;
          if ((char *)*v101 + 4096 == (void *)v103)
          {
            v109 = (uint64_t)v101[1];
            ++v101;
            v103 = v109;
            goto LABEL_95;
          }
        }
      }
      if ((char *)++v87 - (_BYTE *)*v86 == 4096)
      {
        v110 = (unsigned __int16 *)v86[1];
        ++v86;
        v87 = v110;
      }
      if (v87 != (unsigned __int16 *)v157)
        continue;
      break;
    }
    v84 = *(void ***)(v14 + 8);
    v85 = *(void ***)(v14 + 16);
LABEL_111:
    v12 = v153;
    v16 = (_QWORD *)(v14 + 40);
    v13 = v152;
LABEL_113:
    *v16 = 0;
    v111 = (char *)v85 - (char *)v84;
    if (v111 >= 0x11)
    {
      do
      {
        operator delete(*v84);
        v112 = *(_QWORD *)(v14 + 16);
        v84 = (void **)(*(_QWORD *)(v14 + 8) + 8);
        *(_QWORD *)(v14 + 8) = v84;
        v111 = v112 - (_QWORD)v84;
      }
      while (v111 > 0x10);
    }
    if (v111 >> 3 == 1)
    {
      v113 = 1024;
LABEL_119:
      *v150 = v113;
    }
    else if (v111 >> 3 == 2)
    {
      v113 = 2048;
      goto LABEL_119;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_121:
    v114 = *(_QWORD *)(a1[116] + 8 * ((a1[119] + v7) / 0x55uLL)) + 48 * ((a1[119] + v7) % 0x55uLL);
    v115 = *(_QWORD *)(*(_QWORD *)(v114 + 8) + 8 * ((*(_QWORD *)(v114 + 32) + v6) / 0x55uLL))
         + 48 * ((*(_QWORD *)(v114 + 32) + v6) % 0x55uLL);
    std::deque<unsigned short>::operator=((_QWORD *)v14, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 8) + 8 * ((*(_QWORD *)(v115 + 32) + v8) / 0x55uLL))+ 48 * ((*(_QWORD *)(v115 + 32) + v8) % 0x55uLL)));
    if (!*v16)
      goto LABEL_160;
    v116 = (uint64_t *)(v12 + 48 * v13 + 32);
    v117 = *(void ***)(v14 + 8);
    v118 = *(void ***)(v14 + 16);
    if (v118 == v117)
    {
      v118 = *(void ***)(v14 + 8);
      goto LABEL_152;
    }
    v154 = v116;
    v119 = *v116;
    v120 = &v117[(unint64_t)*v116 >> 11];
    v121 = (unsigned __int16 *)((char *)*v120 + 2 * (v119 & 0x7FF));
    v158 = *(uint64_t *)((char *)v117 + (((unint64_t)(v119 + *v16) >> 8) & 0xFFFFFFFFFFFFF8))
         + 2 * ((v119 + *v16) & 0x7FF);
    if (v121 == (unsigned __int16 *)v158)
      goto LABEL_150;
    while (2)
    {
      v122 = *(_QWORD *)(*(_QWORD *)(a1[110] + (((unint64_t)(a1[113] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((_BYTE *)a1 + 904) + v7));
      v123 = *v121;
      --*(_BYTE *)(v122 + v8);
      v124 = *(_QWORD *)(*(_QWORD *)(a1[110] + (((unint64_t)(a1[113] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((_BYTE *)a1 + 904) + v6));
      --*(_BYTE *)(v124 + v123);
      v125 = *(_QWORD *)(a1[116] + 8 * ((a1[119] + v6) / 0x55uLL)) + 48 * ((a1[119] + v6) % 0x55uLL);
      v126 = *(_QWORD *)(*(_QWORD *)(v125 + 8) + 8 * ((*(_QWORD *)(v125 + 32) + v7) / 0x55uLL))
           + 48 * ((*(_QWORD *)(v125 + 32) + v7) % 0x55uLL);
      v127 = *(_QWORD *)(*(_QWORD *)(v126 + 8) + 8 * ((*(_QWORD *)(v126 + 32) + v123) / 0x55uLL))
           + 48 * ((*(_QWORD *)(v126 + 32) + v123) % 0x55uLL);
      v128 = *(_QWORD *)(v127 + 40);
      v129 = *(void ***)(v127 + 8);
      v130 = (uint64_t *)(v127 + 32);
      if (v128 == 1)
      {
        v131 = *(_QWORD *)(v127 + 16);
        *(_QWORD *)(v127 + 40) = 0;
        v132 = v131 - (_QWORD)v129;
        if ((unint64_t)(v131 - (_QWORD)v129) >= 0x11)
        {
          do
          {
            operator delete(*v129);
            v133 = *(_QWORD *)(v127 + 16);
            v129 = (void **)(*(_QWORD *)(v127 + 8) + 8);
            *(_QWORD *)(v127 + 8) = v129;
            v132 = v133 - (_QWORD)v129;
          }
          while (v132 > 0x10);
        }
        if (v132 >> 3 == 1)
        {
          v134 = 1024;
LABEL_144:
          *v130 = v134;
        }
        else if (v132 >> 3 == 2)
        {
          v134 = 2048;
          goto LABEL_144;
        }
        std::deque<unsigned short>::shrink_to_fit((void **)v127);
      }
      else
      {
        v135 = &v129[(unint64_t)*v130 >> 11];
        v136 = *(void ***)(v127 + 16);
        if (v136 == v129)
          v137 = 0;
        else
          v137 = (uint64_t)*v135 + 2 * (*v130 & 0x7FF);
        v138 = *v130 + v128;
        v139 = v138 >> 11;
        v140 = v138 & 0x7FF;
LABEL_134:
        v141 = (unsigned __int16 *)v137;
        while (1)
        {
          v142 = v136 == v129 ? 0 : (uint64_t)v129[v139] + 2 * v140;
          if (v141 == (unsigned __int16 *)v142)
            break;
          if (*v141 == a3)
          {
            std::deque<unsigned short>::erase((int64x2_t *)v127, (char *)v135, v137);
            break;
          }
          ++v141;
          v137 += 2;
          if ((char *)*v135 + 4096 == (void *)v137)
          {
            v143 = (uint64_t)v135[1];
            ++v135;
            v137 = v143;
            goto LABEL_134;
          }
        }
      }
      if ((char *)++v121 - (_BYTE *)*v120 == 4096)
      {
        v144 = (unsigned __int16 *)v120[1];
        ++v120;
        v121 = v144;
      }
      if (v121 != (unsigned __int16 *)v158)
        continue;
      break;
    }
    v117 = *(void ***)(v14 + 8);
    v118 = *(void ***)(v14 + 16);
LABEL_150:
    v116 = v154;
    v16 = (_QWORD *)(v14 + 40);
LABEL_152:
    *v16 = 0;
    v145 = (char *)v118 - (char *)v117;
    if (v145 >= 0x11)
    {
      do
      {
        operator delete(*v117);
        v146 = *(_QWORD *)(v14 + 16);
        v117 = (void **)(*(_QWORD *)(v14 + 8) + 8);
        *(_QWORD *)(v14 + 8) = v117;
        v145 = v146 - (_QWORD)v117;
      }
      while (v145 > 0x10);
    }
    if (v145 >> 3 == 1)
    {
      v147 = 1024;
LABEL_158:
      *v116 = v147;
    }
    else if (v145 >> 3 == 2)
    {
      v147 = 2048;
      goto LABEL_158;
    }
    std::deque<unsigned short>::shrink_to_fit((void **)v14);
LABEL_160:
    ++v6;
  }
  while (v6 != v151);
}

void std::deque<unsigned short>::shrink_to_fit(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  if (a1[5])
  {
    std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
    v3 = (uint64_t)a1[1];
    v2 = (uint64_t)a1[2];
  }
  else
  {
    v3 = (uint64_t)a1[2];
    if ((void *)v3 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v3 - 8));
        v4 = a1[1];
        v3 = (uint64_t)a1[2] - 8;
        a1[2] = (void *)v3;
      }
      while ((void *)v3 != v4);
    }
    a1[4] = 0;
    v2 = v3;
  }
  v5 = (v2 - v3) >> 3;
  if (v5 < ((_BYTE *)a1[3] - (_BYTE *)*a1) >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v5);
      v7 = (char *)a1[1];
      v2 = (uint64_t)a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - (_QWORD)v7;
      if ((char *)v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = (uint64_t)a1[1];
        v13 = a1[2];
        goto LABEL_14;
      }
    }
    v13 = (void *)v2;
LABEL_14:
    v14 = (uint64_t)v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

_QWORD *std::deque<unsigned short>::operator=(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;

  if (a1 == a2)
    return a1;
  v3 = a2[4];
  v4 = a2[1];
  v5 = (char *)(v4 + 8 * (v3 >> 11));
  if (a2[2] == v4)
  {
    v6 = 0;
    v9 = 0;
    v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 11));
  }
  else
  {
    v6 = (_BYTE *)(*(_QWORD *)v5 + 2 * (a2[4] & 0x7FFLL));
    v7 = a2[5] + v3;
    v8 = (char *)(v4 + 8 * (v7 >> 11));
    v9 = *(_QWORD *)v8 + 2 * (v7 & 0x7FF);
  }
  if ((_BYTE *)v9 == v6)
  {
    v10 = 0;
    v12 = a1 + 5;
  }
  else
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 1) + ((v8 - v5) << 8) - ((uint64_t)&v6[-*(_QWORD *)v5] >> 1);
    v12 = a1 + 5;
    v11 = a1[5];
    if (v11 < v10)
    {
      v14 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v5, (uint64_t)v6, v11);
      v15 = v13;
      v16 = a1[1];
      if (a1[2] == v16)
        v17 = 0;
      else
        v17 = *(_QWORD *)(v16 + 8 * (a1[4] >> 11)) + 2 * (a1[4] & 0x7FFLL);
      v30 = (char *)(v16 + 8 * (a1[4] >> 11));
      v31 = v17;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>>((uint64_t *)v5, v6, v14, v13, (uint64_t)&v30);
      std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(a1, (char **)v14, v15, v10 - a1[5]);
      return a1;
    }
  }
  v18 = a1[1];
  v19 = (char *)(v18 + 8 * (a1[4] >> 11));
  if (a1[2] == v18)
    v20 = 0;
  else
    v20 = *(_QWORD *)v19 + 2 * (a1[4] & 0x7FFLL);
  v21 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v5, (uint64_t)v6, v10);
  v30 = v19;
  v31 = v20;
  std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>>((uint64_t *)v5, v6, v21, v22, (uint64_t)&v30);
  v23 = a1[5];
  v24 = a1[4] + v23;
  v25 = a1[1];
  v26 = (char *)(v25 + 8 * (v24 >> 11));
  if (a1[2] == v25)
    v27 = 0;
  else
    v27 = *(_QWORD *)v26 + 2 * (v24 & 0x7FF);
  if (v27 != v31)
  {
    v28 = ((v27 - *(_QWORD *)v26) >> 1) + ((v26 - v30) << 8) - ((v31 - *(_QWORD *)v30) >> 1);
    if (v28 >= 1)
    {
      *v12 = v23 - v28;
      while ((std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0)
        ;
    }
  }
  return a1;
}

_QWORD *std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _WORD *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 8) - 1;
  v11 = a1[5];
  v12 = v11 + a1[4];
  v13 = v10 - v12;
  if (a4 > v13)
  {
    std::deque<unsigned short>::__add_back_capacity(a1, a4 - v13);
    v11 = a1[5];
    v8 = a1[1];
    v9 = a1[2];
    v12 = a1[4] + v11;
  }
  v14 = (_QWORD *)(v8 + 8 * (v12 >> 11));
  if (v9 == v8)
    v15 = 0;
  else
    v15 = *v14 + 2 * (v12 & 0x7FF);
  result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](v14, v15, a4);
  if (v15 != v17)
  {
    do
    {
      if (v14 == result)
        v18 = v17;
      else
        v18 = *v14 + 4096;
      if (v15 == v18)
      {
        v18 = v15;
      }
      else
      {
        v19 = *a2;
        v20 = (_WORD *)v15;
        do
        {
          v21 = *(_WORD *)a3;
          a3 += 2;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_WORD *)v18);
      }
      v11 += (v18 - v15) >> 1;
      if (v14 == result)
        break;
      v23 = v14[1];
      ++v14;
      v15 = v23;
    }
    while (v23 != v17);
    a1[5] = v11;
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>>(uint64_t *a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t *v8;
  void **v9;
  char *i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  void **v19;
  char *v20;
  double result;
  uint64_t v22;
  __int128 v23;

  if (a1 == a3)
  {
    v19 = *(void ***)a5;
    v20 = *(char **)(a5 + 8);
    v18 = a4;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v22, a2, (_BYTE *)(*a1 + 4096), *(void ***)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    v9 = *(void ***)a5;
    for (i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      v11 = 0;
      v12 = *v8;
      v14 = (char *)*v9++;
      v13 = v14;
      while (1)
      {
        v15 = v13 - i + 4096;
        if ((4096 - 2 * v11) >> 1 >= v15 >> 1)
          v16 = v15 >> 1;
        else
          v16 = (4096 - 2 * v11) >> 1;
        if (v16)
          memmove(i, (const void *)(v12 + 2 * v11), 2 * v16);
        v11 += v16;
        if (v11 == 2048)
          break;
        v17 = (char *)*v9++;
        v13 = v17;
        i = v17;
      }
      i += 2 * v16;
      if ((char *)*(v9 - 1) + 4096 == i)
        i = (char *)*v9;
      else
        --v9;
      *(_QWORD *)a5 = v9;
      *(_QWORD *)(a5 + 8) = i;
    }
    a2 = (_BYTE *)*a3;
    v18 = a4;
    v19 = v9;
    v20 = i;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned short *,unsigned short *,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,0>(&v22, a2, v18, v19, v20);
  result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

double std::__val_expr<std::_BinaryOp<std::plus<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::max[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = **(_QWORD **)(a1 + 40);
  result = *(double *)(v3 + 8 * v2) + *(double *)(v5 + 8 * v4);
  v7 = v1 - 1;
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = (double *)(v5 + 8 * (v9 + v4));
    v11 = (double *)(v3 + 8 * (v8 + v2));
    do
    {
      if (result < *v11 + *v10)
        result = *v11 + *v10;
      v10 += v9;
      v11 += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t std::valarray<double>::__assign_range(uint64_t a1, _BYTE *__src, _BYTE *a3)
{
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v11;

  v6 = a3 - __src;
  v7 = (a3 - __src) >> 3;
  v8 = *(_BYTE **)a1;
  v9 = *(_BYTE **)(a1 + 8);
  if (v7 == (v9 - v8) >> 3)
  {
    if (a3 != __src)
      memmove(v8, __src, a3 - __src);
  }
  else
  {
    if (v8)
    {
      if (v9 != v8)
        *(_QWORD *)(a1 + 8) = &v9[(v8 - v9 + 7) & 0xFFFFFFFFFFFFFFF8];
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    if ((v6 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(v6);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v11[8 * v7];
    if (__src != a3)
      memcpy(v11, __src, v6 & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

_QWORD *std::__val_expr<std::_BinaryOp<std::greater<unsigned char>,std::valarray<unsigned char>,std::__scalar_expr<unsigned char>>>::operator std::valarray<BOOL>(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;

  *result = 0;
  result[1] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    v6 = a2;
    v7 = result;
    result = operator new(a3 - a2);
    *v7 = result;
    v7[1] = result;
    v8 = *a4;
    do
    {
      v9 = *v6++;
      *(_BYTE *)result = v9 > v8;
      result = (_QWORD *)((char *)result + 1);
      --v4;
    }
    while (v4);
    v7[1] = result;
  }
  return result;
}

void sub_1D50BB53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__val_expr<std::_BinaryOp<std::bit_and<BOOL>,std::valarray<BOOL>,std::__val_expr<std::_UnaryOp<std::logical_not<BOOL>,std::valarray<BOOL> const&>>>>::operator std::valarray<BOOL>(_QWORD *result, char *a2, _BYTE *a3, char **a4)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  char *v8;
  char v9;
  char v10;
  char v11;

  *result = 0;
  result[1] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    v6 = a2;
    v7 = result;
    result = operator new(a3 - a2);
    *v7 = result;
    v7[1] = result;
    v8 = *a4;
    do
    {
      v10 = *v8++;
      v9 = v10;
      v11 = *v6++;
      *(_BYTE *)result = v11 & ~v9;
      result = (_QWORD *)((char *)result + 1);
      --v4;
    }
    while (v4);
    v7[1] = result;
  }
  return result;
}

void sub_1D50BB5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<BOOL>::~valarray[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(_QWORD *a1, _WORD *a2, _WORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _WORD *v11;

  v6 = a1[2];
  v7 = a1[1];
  if (v6 == v7)
    v8 = 0;
  else
    v8 = ((v6 - v7) << 7) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  if (v8 == v10)
  {
    std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1);
    v9 = a1[5];
    v7 = a1[1];
    v10 = a1[4] + v9;
  }
  v11 = (_WORD *)(*(_QWORD *)(v7 + ((v10 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v10 & 0x3FF));
  *v11 = *a2;
  v11[1] = *a3;
  a1[5] = v9 + 1;
}

void std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 7) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7 & 0x3FF)) = *a2;
  ++a1[5];
}

BOOL nms::PyramidNMS<unsigned short,double,unsigned char>::isQuadSizeEqualOrLarger(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  double v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  unint64_t v37;
  double v38;
  double v39;
  double v40;
  void *__p;
  _BYTE *v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;

  v5 = a1[5];
  if (v5 <= a2 || v5 <= a4)
    std::__throw_out_of_range[abi:ne180100]("deque");
  v7 = a1[4];
  v8 = v7 + a2;
  v9 = a1[1];
  v10 = *(_QWORD *)(v9 + 8 * (v8 / 0x14));
  v11 = v7 + a4;
  v12 = *(_QWORD *)(v9 + 8 * (v11 / 0x14));
  v13 = v8 % 0x14;
  v14 = (_QWORD *)(v10 + 200 * (v8 % 0x14));
  v15 = v11 % 0x14;
  v16 = *(_QWORD *)(v14[17] + 8 * ((v14[20] + 4) / 0x55uLL)) + 48 * ((v14[20] + 4) % 0x55uLL);
  v17 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v16 + 8)
                                        + (((*(_QWORD *)(v16 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((*(_QWORD *)(v16 + 32) + a3) & 0x3FFLL));
  v20 = (_QWORD *)v14[23];
  v18 = v14 + 23;
  v19 = v20;
  if (!v20)
    goto LABEL_16;
  v21 = v18;
  do
  {
    v22 = v19[4];
    v23 = v22 >= 3;
    if (v22 >= 3)
      v24 = v19;
    else
      v24 = v19 + 1;
    if (v23)
      v21 = v19;
    v19 = (_QWORD *)*v24;
  }
  while (*v24);
  if (v21 == v18 || v21[4] > 3uLL || (v25 = v21[5], v25 > 8))
LABEL_16:
    v26 = 0.0;
  else
    v26 = dbl_1D513B3B8[v25];
  v46 = *(_QWORD *)(*(_QWORD *)(v10 + 200 * v13 + 88)
                  + (((unint64_t)(*(_QWORD *)(v10 + 200 * v13 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * (*(_BYTE *)(v10 + 200 * v13 + 112) + 3);
  v47 = *(_QWORD *)&v26 * v17;
  v48 = v26;
  v49 = 1;
  std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v44, (uint64_t)&v46);
  v27 = (_QWORD *)(v12 + 200 * v15);
  v28 = *(_QWORD *)(v27[17] + 8 * ((v27[20] + 4) / 0x55uLL)) + 48 * ((v27[20] + 4) % 0x55uLL);
  v29 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v28 + 8)
                                        + (((*(_QWORD *)(v28 + 32) + (unint64_t)a5) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((*(_QWORD *)(v28 + 32) + a5) & 0x3FFLL));
  v32 = (_QWORD *)v27[23];
  v30 = v27 + 23;
  v31 = v32;
  if (!v32)
    goto LABEL_30;
  v33 = v30;
  do
  {
    v34 = v31[4];
    v35 = v34 >= 3;
    if (v34 >= 3)
      v36 = v31;
    else
      v36 = v31 + 1;
    if (v35)
      v33 = v31;
    v31 = (_QWORD *)*v36;
  }
  while (*v36);
  if (v33 == v30 || v33[4] > 3uLL || (v37 = v33[5], v37 > 8))
LABEL_30:
    v38 = 0.0;
  else
    v38 = dbl_1D513B3B8[v37];
  v46 = *(_QWORD *)(*(_QWORD *)(v12 + 200 * v15 + 88)
                  + (((unint64_t)(*(_QWORD *)(v12 + 200 * v15 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * (*(_BYTE *)(v12 + 200 * v15 + 112) + 3);
  v47 = *(_QWORD *)&v38 * v29;
  v48 = v38;
  v49 = 1;
  std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&__p, (uint64_t)&v46);
  v39 = nms::areaOfQuad<double>((double **)&v44);
  v40 = nms::areaOfQuad<double>((double **)&__p);
  if (__p)
  {
    if (v43 != __p)
      v43 += ((_BYTE *)__p - v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    operator delete(__p);
  }
  if (v44)
  {
    if (v45 != v44)
      v45 += ((_BYTE *)v44 - v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    operator delete(v44);
  }
  return v39 >= v40;
}

void sub_1D50BB9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, void *a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *i;
  char *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(_QWORD *)v6 = v8;
      a1[2] += 8;
      return;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v28 = 1;
      else
        v28 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
      v30 = &v29[8 * (v28 >> 2)];
      v32 = &v29[8 * v31];
      v33 = (uint64_t *)a1[1];
      v6 = v30;
      v34 = a1[2] - (_QWORD)v33;
      if (v34)
      {
        v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        v35 = 8 * (v34 >> 3);
        v36 = &v29[8 * (v28 >> 2)];
        do
        {
          v37 = *v33++;
          *(_QWORD *)v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  v19 = a1[2];
  v20 = (v19 - a1[1]) >> 3;
  v21 = a1[3];
  v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(_QWORD *)&v49 = operator new(0x1000uLL);
      std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v49);
      return;
    }
    *(_QWORD *)&v49 = operator new(0x1000uLL);
    std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v49);
    v39 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v40 = *v39;
    v7 = (char *)(v39 + 1);
    v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_31;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v41 = 1;
      else
        v41 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v41);
      v30 = &v29[8 * (v41 >> 2)];
      v32 = &v29[8 * v42];
      v43 = (uint64_t *)a1[1];
      v6 = v30;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v29[8 * (v41 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1)
    v23 = 1;
  else
    v23 = v22 >> 2;
  v51 = a1 + 3;
  *(_QWORD *)&v49 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v23);
  *((_QWORD *)&v49 + 1) = v49 + 8 * v20;
  *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
  *((_QWORD *)&v50 + 1) = v49 + 8 * v24;
  v48 = operator new(0x1000uLL);
  std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v49, &v48);
  for (i = (_QWORD *)a1[2];
        i != (_QWORD *)a1[1];
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  v26 = (char *)*a1;
  v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26)
    operator delete(v26);
}

void sub_1D50BBCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double nms::areaOfQuad<double>(double **a1)
{
  double *v2;
  double v3;
  double *v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *__p[2];
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  std::valarray<double>::resize((uint64_t)v16, 2uLL, 0.0);
  __p[0] = 0;
  __p[1] = 0;
  std::valarray<double>::resize((uint64_t)__p, 2uLL, 0.0);
  v2 = *a1;
  v3 = (*a1)[2] - **a1;
  v4 = (double *)v16[0];
  *(double *)v16[0] = v3;
  v4[1] = v2[3] - v2[1];
  v5 = v2[6] - *v2;
  v6 = (double *)__p[0];
  *(double *)__p[0] = v5;
  v7 = v2[7] - v2[1];
  v6[1] = v7;
  v8 = *v4;
  v9 = v4[1];
  *v4 = v2[2] - v2[4];
  v4[1] = v2[3] - v2[5];
  v10 = v2[6] - v2[4];
  *v6 = v10;
  v11 = v2[7] - v2[5];
  v6[1] = v11;
  v12 = *v4;
  v13 = v4[1];
  operator delete(v6);
  operator delete(v4);
  return fabs(v8 * v7 - v5 * v9) * 0.5 + fabs(v12 * v11 - v10 * v13) * 0.5;
}

void sub_1D50BBE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::getContainedDatums(_QWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char **v32;
  char *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned __int16 v44;
  __int16 v45;

  v8 = (void **)a4[1];
  v9 = a4[2];
  a4[5] = 0;
  v10 = v9 - (_QWORD)v8;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      v11 = a4[2];
      v8 = (void **)(a4[1] + 8);
      a4[1] = v8;
      v10 = v11 - (_QWORD)v8;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    v12 = 512;
  }
  else
  {
    if (v10 >> 3 != 2)
      goto LABEL_8;
    v12 = 1024;
  }
  a4[4] = v12;
LABEL_8:
  v13 = a1[121];
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 40);
    if ((_BYTE)v14)
    {
      v15 = operator new(*(_QWORD *)(v13 + 40));
      bzero(v15, v14);
    }
    else
    {
      v15 = 0;
    }
    v45 = 0;
    v41 = v14;
    if (!(_BYTE)v14)
    {
      LOBYTE(v16) = 0;
      if (!v15)
        return v16;
      goto LABEL_31;
    }
    v17 = 0;
    v16 = 0;
    v18 = a2;
    v42 = a3;
    v19 = v14;
    v39 = a2;
    v40 = v15;
    do
    {
      v20 = v17;
      v21 = *(_QWORD *)(a1[92] + 8 * ((a1[95] + v18) / 0x55uLL)) + 48 * ((a1[95] + v18) % 0x55uLL);
      v22 = *(_QWORD *)(v21 + 32) + v17;
      v23 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * (v22 / 0x55));
      if (*(_QWORD *)(v23 + 48 * (v22 % 0x55) + 40))
      {
        v24 = v23 + 48 * (v22 % 0x55);
        v25 = *(_QWORD *)(v24 + 32) + v42;
        v26 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * (v25 / 0x55));
        v27 = v25 % 0x55;
        v28 = *(_QWORD *)(v26 + 48 * (v25 % 0x55) + 40);
        if (v28)
        {
          v43 = v16;
          v29 = v26 + 48 * v27;
          v30 = *(_QWORD *)(v29 + 8);
          if (*(_QWORD *)(v29 + 16) == v30
            || (v31 = *(_QWORD *)(v26 + 48 * v27 + 32),
                v32 = (char **)(v30 + 8 * (v31 >> 11)),
                v33 = *v32,
                v34 = (unsigned __int16 *)&(*v32)[2 * (v31 & 0x7FF)],
                v35 = *(_QWORD *)(v30 + (((v31 + v28) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v31 + v28) & 0x7FF),
                v34 == (unsigned __int16 *)v35))
          {
            v36 = 0;
          }
          else
          {
            v36 = 0;
            do
            {
              v44 = 0;
              v44 = *v34;
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[14]
                                                     + (((unint64_t)(a1[17] + v20) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*((_BYTE *)a1 + 136) + v20))
                             + v44)
                && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[20]
                                                     + (((unint64_t)(a1[23] + v20) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*((_BYTE *)a1 + 184) + v20))
                             + v44))
              {
                std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(a4, &v45, &v44);
                ++v36;
                v33 = *v32;
              }
              if ((char *)++v34 - v33 == 4096)
              {
                v37 = v32[1];
                ++v32;
                v33 = v37;
                v34 = (unsigned __int16 *)v37;
              }
            }
            while (v34 != (unsigned __int16 *)v35);
          }
          v18 = v39;
          v15 = v40;
          *((_BYTE *)v40 + v20) = v36;
          v16 = v36 + v43;
          v19 = v41;
        }
      }
      v17 = v20 + 1;
      v45 = v20 + 1;
    }
    while (v19 > (unsigned __int16)(v20 + 1));
    if (v15)
LABEL_31:
      operator delete(v15);
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  return v16;
}

void sub_1D50BC128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::processContainmentOfOneDatum(uint64_t result, unsigned int a2, unsigned int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t *v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 **v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int16 **v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unint64_t *v53;
  char *v54;
  unint64_t *v55;
  uint64_t *v56;
  _BYTE *v57;
  uint64_t *v58;
  _BYTE *v59;
  _QWORD *v60;
  unint64_t *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  _BYTE *v66;
  char *v67;
  _BYTE *v68;
  unint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  void **v72;
  char *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  float64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t *v87;
  _QWORD *v88;
  unint64_t *v89;
  _QWORD *v90;
  unint64_t *v91;
  _QWORD *v92;
  unint64_t *v93;
  unint64_t *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int16 *v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  unint64_t v109;
  BOOL v110;
  _QWORD *v111;
  unint64_t v112;
  double v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  BOOL v123;
  _QWORD *v124;
  unint64_t v125;
  double v126;
  unint64_t v127;
  uint64_t v128;
  float64_t v129;
  _BYTE *v130;
  double v131;
  double v132;
  double *v133;
  double *v134;
  double *v135;
  double *v136;
  _QWORD *v137;
  unsigned __int16 *v138;
  uint64_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  char v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  BOOL v154;
  _QWORD *v155;
  unint64_t v156;
  double v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  float64_t v161;
  _BYTE *v162;
  double v163;
  double v164;
  _BOOL4 v165;
  _BOOL4 v166;
  unsigned __int16 *v167;
  unint64_t v168;
  uint64_t v169;
  float64_t v170;
  _BYTE *v171;
  _QWORD *v172;
  unsigned __int16 *v173;
  uint64_t v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  _QWORD *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  BOOL v191;
  _QWORD *v192;
  unint64_t v193;
  double v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  float64_t v198;
  double v199;
  double v200;
  double v201;
  double v202;
  int v203;
  unsigned __int16 *v204;
  int v205;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  double v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  double v248;
  unint64_t v249;
  size_t v250;
  char *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  unint64_t v265;
  double v266;
  uint64_t v267;
  _BYTE *v268;
  _BYTE *v269;
  _QWORD *v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  double v274;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  double *v280;
  double *v281;
  unint64_t v282;
  double *v283;
  double *v284;
  double v285;
  double *v286;
  BOOL v287;
  BOOL v288;
  void **v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  unint64_t *v297;
  _QWORD *v298;
  unint64_t *v299;
  _QWORD *v300;
  unint64_t v301;
  double v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  double v306;
  uint64_t v307;
  uint64_t v308;
  unsigned __int16 *v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unsigned __int16 *v318;
  unint64_t v319;
  uint64_t v320;
  unsigned __int16 *v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  int v325;
  _BOOL4 isQuadSizeEqualOrLarger;
  unint64_t v327;
  _QWORD *v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  unint64_t v337;
  double v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  unint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  double v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  unint64_t *v350;
  _QWORD *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unsigned __int16 *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  int v369;
  int v370;
  double v371;
  double v372;
  unsigned __int16 *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned __int16 v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  char **v391;
  char *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  _QWORD *v397;
  unsigned __int16 *v398;
  uint64_t v399;
  unsigned __int16 *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  unint64_t *v405;
  char *v406;
  unint64_t *v407;
  uint64_t v408;
  _QWORD *v409;
  unint64_t *v410;
  _QWORD *v411;
  unint64_t *v412;
  _QWORD *v413;
  unint64_t *v414;
  _QWORD *v415;
  unint64_t *v416;
  unint64_t *v417;
  char *v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unsigned __int16 *v430;
  uint64_t v431;
  uint64_t v432;
  void **v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  unint64_t *v439;
  unint64_t v440;
  _QWORD *v441;
  unint64_t *v442;
  unint64_t *v443;
  char *v444;
  uint64_t v445;
  unint64_t v446;
  char v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  char v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  _QWORD *v455;
  unint64_t *v456;
  unint64_t v457;
  _QWORD *v458;
  unint64_t *v459;
  unint64_t *v460;
  char *v461;
  uint64_t v462;
  unint64_t v463;
  char v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  char v468;
  uint64_t v469;
  double *v470;
  double *v471;
  double *v472;
  double *v473;
  double *v474;
  double *v475;
  int v476;
  double *v477;
  double *v478;
  _QWORD *v481;
  uint64_t i;
  int v486;
  unsigned __int16 *v487;
  double *v488;
  unsigned __int16 **v489;
  char v490;
  uint64_t v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  void *v498;
  double *v499;
  double *v500;
  unint64_t v501;
  uint64_t v502;
  void *v503;
  char *v504;
  char *v505;
  unint64_t v506;
  unint64_t v507;
  void *__p[2];
  __int128 v509;
  __int128 v510;
  void *v511;
  char *v512;
  void *v513;
  _BYTE *v514;
  double *v515[2];
  double *v516[2];
  void *v517[2];
  __int128 v518;
  __int128 v519;
  float64x2_t v520;
  uint64_t v521;
  unint64_t v522;
  char *v523;
  void **v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;

  v528 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 112)
                                        + (((*(_QWORD *)(result + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (*(_QWORD *)(result + 136) + a2))
                + a3))
    return result;
  v6 = a5;
  v7 = a4;
  v8 = result;
  v481 = (_QWORD *)(result + 104);
  v478 = (double *)(result + 1160);
  v477 = (double *)(result + 1168);
  v474 = (double *)(result + 1184);
  v475 = (double *)(result + 1176);
  v472 = (double *)(result + 1200);
  v473 = (double *)(result + 1192);
  v470 = (double *)(result + 1216);
  v471 = (double *)(result + 1208);
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 160)
                                          + (((*(_QWORD *)(v8 + 184) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*(_BYTE *)(v8 + 184) + a2))
                  + a3))
      return result;
    v9 = v7[5];
    if (!v9)
      return result;
    v496 = 0u;
    v497 = 0u;
    v495 = 0u;
    v10 = v7[1];
    if (v7[2] == v10
      || (v11 = v7[4],
          v12 = (_QWORD *)(v10 + 8 * (v11 >> 10)),
          v13 = (unsigned __int16 *)(*v12 + 4 * (v11 & 0x3FF)),
          v14 = *(_QWORD *)(v10 + (((v11 + v9) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v11 + v9) & 0x3FF),
          v13 == (unsigned __int16 *)v14))
    {
      v17 = 0;
      v19 = 0;
      v18 = 0;
      v16 = 0;
LABEL_14:
      v20 = 0;
      v22 = 0;
      v21 = (char *)(v16 + 8 * ((unint64_t)(v17 + v18) >> 9));
      goto LABEL_15;
    }
    do
    {
      *(_QWORD *)&v520.f64[0] = *v13 ^ (16 * v13[1]);
      std::deque<unsigned long>::push_back(&v495, &v520);
      v13 += 2;
      if ((unsigned __int16 *)((char *)v13 - *v12) == (unsigned __int16 *)4096)
      {
        v15 = (unsigned __int16 *)v12[1];
        ++v12;
        v13 = v15;
      }
    }
    while (v13 != (unsigned __int16 *)v14);
    v16 = *((_QWORD *)&v495 + 1);
    v17 = *((_QWORD *)&v497 + 1);
    v18 = v497;
    v19 = (char *)(*((_QWORD *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
    if ((_QWORD)v496 == *((_QWORD *)&v495 + 1))
      goto LABEL_14;
    v20 = (unint64_t *)(*(_QWORD *)v19 + 8 * (v497 & 0x1FF));
    v21 = (char *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
    v22 = (unint64_t *)(*(_QWORD *)v21 + 8 * ((*((_QWORD *)&v497 + 1) + v497) & 0x1FF));
LABEL_15:
    std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(v19, v20, v21, v22);
    v493 = 0u;
    v494 = 0u;
    v492 = 0u;
    v23 = v7[1];
    if (v7[2] != v23)
    {
      v24 = v7[4];
      v25 = (unsigned __int16 **)(v23 + 8 * (v24 >> 10));
      v26 = *v25;
      v27 = &(*v25)[2 * (v24 & 0x3FF)];
      v28 = *(_QWORD *)(v23 + (((v7[5] + v24) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v7[5] + v24) & 0x3FF);
      for (i = v28; ; v28 = i)
      {
        if (v27 == (unsigned __int16 *)v28)
          goto LABEL_117;
        v29 = *v27;
        v30 = v27[1];
        if ((_QWORD)v493 == *((_QWORD *)&v492 + 1))
          break;
        v31 = (unsigned __int16 **)(*((_QWORD *)&v492 + 1) + 8 * ((unint64_t)v494 >> 10));
        v32 = *v31;
        v33 = &(*v31)[2 * (v494 & 0x3FF)];
        v34 = *(_QWORD *)(*((_QWORD *)&v492 + 1) + (((*((_QWORD *)&v494 + 1) + (_QWORD)v494) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((*((_QWORD *)&v494 + 1) + v494) & 0x3FF);
        if (v33 != (unsigned __int16 *)v34)
        {
          while (*v33 != v29 || v33[1] != v30)
          {
            v33 += 2;
            if ((char *)v33 - (char *)v32 == 4096)
            {
              v35 = v31[1];
              ++v31;
              v32 = v35;
              v33 = v35;
            }
            if (v33 == (unsigned __int16 *)v34)
              goto LABEL_27;
          }
        }
        if (v33 == (unsigned __int16 *)v34)
          break;
LABEL_114:
        v27 += 2;
        if ((char *)v27 - (char *)v26 == 4096)
        {
          v98 = v25[1];
          ++v25;
          v26 = v98;
          v27 = v98;
        }
      }
LABEL_27:
      nms::PyramidNMS<unsigned short,double,unsigned char>::computeConstitutedIndices((uint64_t)v517, (_QWORD *)v8, v29, v30, v481);
      v36 = (char *)v517[1];
      v37 = (char *)v518;
      if ((void *)v518 == v517[1])
      {
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v509 = 0u;
        v510 = 0u;
        *(_OWORD *)__p = 0u;
      }
      else
      {
        v38 = v519;
        v39 = (unint64_t)v519 >> 10;
        v40 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 10);
        v41 = *(unsigned __int16 **)v40;
        v42 = (unsigned __int16 *)(*(_QWORD *)v40 + 4 * (v519 & 0x3FF));
        v43 = *(_QWORD *)((char *)v517[1] + (((*((_QWORD *)&v519 + 1) + (_QWORD)v519) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((*((_QWORD *)&v519 + 1) + v519) & 0x3FF);
        if (v42 != (unsigned __int16 *)v43)
        {
          while (*v42 != a2 || v42[1] != a3)
          {
            v42 += 2;
            if ((char *)v42 - (char *)v41 == 4096)
            {
              v44 = (unsigned __int16 *)*((_QWORD *)v40 + 1);
              v40 += 8;
              v41 = v44;
              v42 = v44;
            }
            if (v42 == (unsigned __int16 *)v43)
              goto LABEL_38;
          }
        }
        if (v42 != (unsigned __int16 *)v43)
        {
          std::deque<std::pair<unsigned short,unsigned short>>::erase((uint64_t)v517, v40, (uint64_t)v42);
          v38 = v519;
          v36 = (char *)v517[1];
          v37 = (char *)v518;
          v39 = (unint64_t)v519 >> 10;
        }
LABEL_38:
        v509 = 0u;
        v510 = 0u;
        *(_OWORD *)__p = 0u;
        if (v37 == v36
          || (v49 = &v36[8 * v39],
              v50 = (unsigned __int16 *)(*(_QWORD *)v49 + 4 * (v38 & 0x3FF)),
              v51 = *(_QWORD *)&v36[((unint64_t)(*((_QWORD *)&v519 + 1) + v38) >> 7) & 0x1FFFFFFFFFFFFF8]
                  + 4 * ((*((_QWORD *)&v519 + 1) + v38) & 0x3FF),
              v50 == (unsigned __int16 *)v51))
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
        }
        else
        {
          do
          {
            *(_QWORD *)&v520.f64[0] = *v50 ^ (16 * v50[1]);
            std::deque<unsigned long>::push_back(__p, &v520);
            v50 += 2;
            if ((unsigned __int16 *)((char *)v50 - *(_QWORD *)v49) == (unsigned __int16 *)4096)
            {
              v52 = (unsigned __int16 *)*((_QWORD *)v49 + 1);
              v49 += 8;
              v50 = v52;
            }
          }
          while (v50 != (unsigned __int16 *)v51);
          v48 = (char *)__p[1];
          v45 = *((_QWORD *)&v510 + 1);
          v47 = v510;
          v46 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
          if ((void *)v509 != __p[1])
          {
            v53 = (unint64_t *)(*(_QWORD *)v46 + 8 * (v510 & 0x1FF));
            v54 = (char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9);
            v55 = (unint64_t *)(*(_QWORD *)v54 + 8 * ((*((_QWORD *)&v510 + 1) + v510) & 0x1FF));
LABEL_47:
            v487 = v27;
            v489 = v25;
            std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(v46, v53, v54, v55);
            std::deque<unsigned long>::deque((uint64_t)&v503, *((_QWORD *)&v510 + 1) + *((_QWORD *)&v497 + 1));
            v56 = (uint64_t *)((char *)__p[1] + 8 * ((unint64_t)v510 >> 9));
            if ((void *)v509 == __p[1])
            {
              v57 = 0;
              v59 = 0;
              v58 = (uint64_t *)((char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9));
            }
            else
            {
              v57 = (_BYTE *)(*v56 + 8 * (v510 & 0x1FF));
              v58 = (uint64_t *)((char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9));
              v59 = (_BYTE *)(*v58 + 8 * ((*((_QWORD *)&v510 + 1) + v510) & 0x1FF));
            }
            v60 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
            if ((_QWORD)v496 == *((_QWORD *)&v495 + 1))
            {
              v61 = 0;
              v62 = 0;
            }
            else
            {
              v61 = (unint64_t *)(*v60 + 8 * (v497 & 0x1FF));
              v62 = *(_QWORD *)(*((_QWORD *)&v495 + 1)
                              + (((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*((_QWORD *)&v497 + 1) + v497) & 0x1FF);
            }
            v63 = &v504[8 * (v506 >> 9)];
            if (v505 == v504)
              v64 = 0;
            else
              v64 = (char *)(*(_QWORD *)v63 + 8 * (v506 & 0x1FF));
            if (v57 == v59)
            {
              v59 = v57;
            }
            else
            {
              while (v61 != (unint64_t *)v62)
              {
                v65 = *(_QWORD *)v57;
                if (*(_QWORD *)v57 >= *v61)
                {
                  if (*v61 >= v65)
                  {
                    v57 += 8;
                    if (&v57[-*v56] == (_BYTE *)4096)
                    {
                      v68 = (_BYTE *)v56[1];
                      ++v56;
                      v57 = v68;
                    }
                  }
                  if ((unint64_t *)((char *)++v61 - *v60) == (unint64_t *)4096)
                  {
                    v69 = (unint64_t *)v60[1];
                    ++v60;
                    v61 = v69;
                  }
                }
                else
                {
                  *(_QWORD *)v64 = v65;
                  v57 += 8;
                  if (&v57[-*v56] == (_BYTE *)4096)
                  {
                    v66 = (_BYTE *)v56[1];
                    ++v56;
                    v57 = v66;
                  }
                  v64 += 8;
                  if (&v64[-*(_QWORD *)v63] == (char *)4096)
                  {
                    v67 = (char *)*((_QWORD *)v63 + 1);
                    v63 += 8;
                    v64 = v67;
                  }
                }
                if (v57 == v59)
                {
                  v57 = v59;
                  break;
                }
              }
            }
            if (v56 == v58)
            {
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v520, v57, v59, (void **)v63, v64);
              v80 = v520.f64[1];
              v81 = v521;
            }
            else
            {
              v71 = *v56;
              v70 = v56 + 1;
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v520, v57, (_BYTE *)(v71 + 4096), (void **)v63, v64);
              v72 = *(void ***)&v520.f64[1];
              v73 = (char *)v521;
              if (v70 != v58)
              {
                v74 = **(_BYTE ***)&v520.f64[1];
                do
                {
                  v75 = 0;
                  v76 = *v70;
                  for (++v72; ; ++v72)
                  {
                    v77 = v74 - v73 + 4096;
                    if ((4096 - 8 * v75) >> 3 >= v77 >> 3)
                      v78 = v77 >> 3;
                    else
                      v78 = (4096 - 8 * v75) >> 3;
                    if (v78)
                      memmove(v73, (const void *)(v76 + 8 * v75), 8 * v78);
                    v75 += v78;
                    if (v75 == 512)
                      break;
                    v79 = (char *)*v72;
                    v74 = v79;
                    v73 = v79;
                  }
                  v73 += 8 * v78;
                  v74 = *(v72 - 1);
                  if (v74 + 4096 == v73)
                  {
                    v74 = *v72;
                    v73 = (char *)*v72;
                  }
                  else
                  {
                    --v72;
                  }
                  ++v70;
                }
                while (v70 != v58);
              }
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v520, (_BYTE *)*v58, v59, v72, v73);
              v80 = v520.f64[1];
              v81 = v521;
              v6 = a5;
            }
            v27 = v487;
            v25 = v489;
            v82 = &v504[8 * (v506 >> 9)];
            v7 = a4;
            if (v505 == v504)
              v83 = 0;
            else
              v83 = *(_QWORD *)v82 + 8 * (v506 & 0x1FF);
            if (v81 == v83)
              v84 = 0;
            else
              v84 = ((v81 - **(_QWORD **)&v80) >> 3)
                  + ((*(_QWORD *)&v80 - (_QWORD)v82) << 6)
                  - ((v83 - *(_QWORD *)v82) >> 3);
            std::deque<unsigned long>::resize(&v503, v84);
            if (v507)
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(a6, v487);
            std::deque<unsigned long>::deque((uint64_t)&v498, *((_QWORD *)&v510 + 1) + *((_QWORD *)&v497 + 1));
            v86 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
            if ((_QWORD)v496 == *((_QWORD *)&v495 + 1))
            {
              v87 = 0;
              v89 = 0;
              v88 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
            }
            else
            {
              v87 = (unint64_t *)(*v86 + 8 * (v497 & 0x1FF));
              v88 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
              v89 = (unint64_t *)(*v88 + 8 * ((*((_QWORD *)&v497 + 1) + v497) & 0x1FF));
            }
            v90 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
            if ((void *)v509 == __p[1])
            {
              v91 = 0;
              v93 = 0;
              v92 = (char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9);
            }
            else
            {
              v91 = (unint64_t *)(*v90 + 8 * (v510 & 0x1FF));
              v92 = (char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9);
              v93 = (unint64_t *)(*v92 + 8 * ((WORD4(v510) + (_WORD)v510) & 0x1FF));
            }
            if (v500 == v499)
              v94 = 0;
            else
              v94 = (unint64_t *)(*(_QWORD *)&v499[v501 >> 9] + 8 * (v501 & 0x1FF));
            std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v86, v87, (uint64_t)v88, v89, v90, v91, v85, (uint64_t)v92, v93, &v499[v501 >> 9], v94);
            v95 = (char *)&v499[v501 >> 9];
            if (v500 == v499)
              v96 = 0;
            else
              v96 = *(_QWORD *)v95 + 8 * (v501 & 0x1FF);
            if (v524 == (void **)v96)
              v97 = 0;
            else
              v97 = (((uint64_t)v524 - *(_QWORD *)v523) >> 3) + ((v523 - v95) << 6) - ((v96 - *(_QWORD *)v95) >> 3);
            std::deque<unsigned long>::resize(&v498, v97);
            if (!v502)
              std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<std::pair<unsigned short,unsigned short>&>(&v492, v487);
            std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v498);
            std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v503);
            std::deque<std::pair<int,int>>::~deque[abi:ne180100](__p);
            std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v517);
            v26 = *v489;
            goto LABEL_114;
          }
        }
      }
      v53 = 0;
      v55 = 0;
      v54 = &v48[8 * ((unint64_t)(v47 + v45) >> 9)];
      goto LABEL_47;
    }
LABEL_117:
    v99 = *(_QWORD **)(v8 + 968);
    v100 = v99[5];
    if (*(_QWORD *)(v8 + 984) != 1)
    {
      if (v100 > a2)
      {
        v114 = v99[4] + a2;
        v115 = *(_QWORD *)(v99[1] + 8 * (v114 / 0x14));
        v116 = v114 % 0x14;
        v117 = v115 + 200 * v116;
        v120 = *(_QWORD **)(v117 + 184);
        v118 = (_QWORD *)(v117 + 184);
        v119 = v120;
        if (!v120)
          goto LABEL_196;
        v121 = v118;
        do
        {
          v122 = v119[4];
          v123 = v122 >= 3;
          if (v122 >= 3)
            v124 = v119;
          else
            v124 = v119 + 1;
          if (v123)
            v121 = v119;
          v119 = (_QWORD *)*v124;
        }
        while (*v124);
        if (v121 == v118 || v121[4] > 3uLL || (v125 = v121[5], v125 > 8))
LABEL_196:
          v126 = 0.0;
        else
          v126 = dbl_1D513B3B8[v125];
        v168 = *(_QWORD *)(*(_QWORD *)(v115 + 200 * v116 + 136)
                         + 8 * ((*(_QWORD *)(v115 + 200 * v116 + 160) + 4) / 0x55uLL))
             + 48 * ((*(_QWORD *)(v115 + 200 * v116 + 160) + 4) % 0x55uLL);
        v169 = *(_QWORD *)(*(_QWORD *)(v115 + 200 * v116 + 88)
                         + (((unint64_t)(*(_QWORD *)(v115 + 200 * v116 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
             + 16 * (*(_BYTE *)(v115 + 200 * v116 + 112) + 3);
        *(_QWORD *)&v170 = *(_QWORD *)&v126
                         * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v168 + 8)
                                                           + (((*(_QWORD *)(v168 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                                               + 4 * ((*(_QWORD *)(v168 + 32) + a3) & 0x3FFLL));
        *(_QWORD *)&v520.f64[0] = v169;
        v520.f64[1] = v170;
        v521 = *(_QWORD *)&v126;
        v522 = 1;
        std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
        v171 = v517[0];
        if ((_QWORD)v493 == *((_QWORD *)&v492 + 1)
          || (v172 = (_QWORD *)(*((_QWORD *)&v492 + 1) + 8 * ((unint64_t)v494 >> 10)),
              v173 = (unsigned __int16 *)(*v172 + 4 * (v494 & 0x3FF)),
              v174 = *(_QWORD *)(*((_QWORD *)&v492 + 1)
                               + (((*((_QWORD *)&v494 + 1) + (_QWORD)v494) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((*((_QWORD *)&v494 + 1) + v494) & 0x3FF),
              v173 == (unsigned __int16 *)v174))
        {
          v144 = 1;
        }
        else
        {
          v175 = *((double *)v517[0] + 1);
          v176 = sqrt((*(double *)v517[0] - *((double *)v517[0] + 6)) * (*(double *)v517[0] - *((double *)v517[0] + 6))+ (v175 - *((double *)v517[0] + 7)) * (v175 - *((double *)v517[0] + 7)));
          v177 = sqrt((*((double *)v517[0] + 2) - *(double *)v517[0]) * (*((double *)v517[0] + 2) - *(double *)v517[0])+ (*((double *)v517[0] + 3) - v175) * (*((double *)v517[0] + 3) - v175));
          v178 = fabs(v176);
          v179 = fabs(v177);
          v144 = 1;
          do
          {
            v180 = *(_QWORD **)(v8 + 968);
            v181 = *v173;
            if (v180[5] <= v181)
              std::__throw_out_of_range[abi:ne180100]("deque");
            v182 = v180[4] + v181;
            v183 = *(_QWORD *)(v180[1] + 8 * (v182 / 0x14));
            v184 = v182 % 0x14;
            v185 = v183 + 200 * v184;
            v188 = *(_QWORD **)(v185 + 184);
            v186 = (_QWORD *)(v185 + 184);
            v187 = v188;
            if (!v188)
              goto LABEL_214;
            v189 = v186;
            do
            {
              v190 = v187[4];
              v191 = v190 >= 3;
              if (v190 >= 3)
                v192 = v187;
              else
                v192 = v187 + 1;
              if (v191)
                v189 = v187;
              v187 = (_QWORD *)*v192;
            }
            while (*v192);
            if (v189 == v186 || v189[4] > 3uLL || (v193 = v189[5], v193 > 8))
LABEL_214:
              v194 = 0.0;
            else
              v194 = dbl_1D513B3B8[v193];
            v195 = *(_QWORD *)(*(_QWORD *)(v183 + 200 * v184 + 136)
                             + 8 * ((*(_QWORD *)(v183 + 200 * v184 + 160) + 4) / 0x55uLL))
                 + 48 * ((*(_QWORD *)(v183 + 200 * v184 + 160) + 4) % 0x55uLL);
            v196 = *(_QWORD *)(v195 + 32) + v173[1];
            v197 = *(_QWORD *)(*(_QWORD *)(v183 + 200 * v184 + 88)
                             + (((unint64_t)(*(_QWORD *)(v183 + 200 * v184 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (*(_BYTE *)(v183 + 200 * v184 + 112) + 3);
            *(_QWORD *)&v198 = *(_QWORD *)&v194
                             * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v195 + 8)
                                                               + ((v196 >> 7) & 0x1FFFFFFFFFFFFF8))
                                                   + 4 * (v196 & 0x3FF));
            *(_QWORD *)&v520.f64[0] = v197;
            v520.f64[1] = v198;
            v521 = *(_QWORD *)&v194;
            v522 = 1;
            std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(__p, (uint64_t)&v520);
            v199 = *(double *)__p[0];
            v200 = *((double *)__p[0] + 1);
            v201 = -1.0;
            if (v178 > 2.22044605e-16)
              v201 = sqrt((v200 - *((double *)__p[0] + 7)) * (v200 - *((double *)__p[0] + 7))+ (v199 - *((double *)__p[0] + 6)) * (v199 - *((double *)__p[0] + 6)))/ v176;
            if (v201 < *v478 || v201 > *v477)
              goto LABEL_223;
            v202 = -1.0;
            if (v179 > 2.22044605e-16)
              v202 = sqrt((*((double *)__p[0] + 3) - v200) * (*((double *)__p[0] + 3) - v200)+ (*((double *)__p[0] + 2) - v199) * (*((double *)__p[0] + 2) - v199))/ v177;
            if (v202 >= *v475 && v202 <= *v474)
            {
              v203 = 1;
            }
            else
            {
LABEL_223:
              v203 = 0;
              v144 = 0;
            }
            if (__p[1] != __p[0])
              __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
            operator delete(__p[0]);
            if (!v203)
              break;
            v173 += 2;
            if ((unsigned __int16 *)((char *)v173 - *v172) == (unsigned __int16 *)4096)
            {
              v204 = (unsigned __int16 *)v172[1];
              ++v172;
              v173 = v204;
            }
          }
          while (v173 != (unsigned __int16 *)v174);
          v171 = v517[0];
          if (!v517[0])
            goto LABEL_241;
        }
        if (v517[1] != v171)
          v517[1] = (char *)v517[1] + ((v171 - (char *)v517[1] + 7) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_240;
      }
LABEL_541:
      std::__throw_out_of_range[abi:ne180100]("deque");
    }
    if (v100 <= a2)
      goto LABEL_541;
    v101 = v99[4] + a2;
    v102 = *(_QWORD *)(v99[1] + 8 * (v101 / 0x14));
    v103 = v101 % 0x14;
    v104 = v102 + 200 * v103;
    v107 = *(_QWORD **)(v104 + 184);
    v105 = (_QWORD *)(v104 + 184);
    v106 = v107;
    if (!v107)
      goto LABEL_146;
    v108 = v105;
    do
    {
      v109 = v106[4];
      v110 = v109 >= 3;
      if (v109 >= 3)
        v111 = v106;
      else
        v111 = v106 + 1;
      if (v110)
        v108 = v106;
      v106 = (_QWORD *)*v111;
    }
    while (*v111);
    if (v108 == v105 || v108[4] > 3uLL || (v112 = v108[5], v112 > 8))
LABEL_146:
      v113 = 0.0;
    else
      v113 = dbl_1D513B3B8[v112];
    v127 = *(_QWORD *)(*(_QWORD *)(v102 + 200 * v103 + 136)
                     + 8 * ((*(_QWORD *)(v102 + 200 * v103 + 160) + 4) / 0x55uLL))
         + 48 * ((*(_QWORD *)(v102 + 200 * v103 + 160) + 4) % 0x55uLL);
    v128 = *(_QWORD *)(*(_QWORD *)(v102 + 200 * v103 + 88)
                     + (((unint64_t)(*(_QWORD *)(v102 + 200 * v103 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(_BYTE *)(v102 + 200 * v103 + 112) + 3);
    *(_QWORD *)&v129 = *(_QWORD *)&v113
                     * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v127 + 8)
                                                       + (((*(_QWORD *)(v127 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((*(_QWORD *)(v127 + 32) + a3) & 0x3FFLL));
    *(_QWORD *)&v520.f64[0] = v128;
    v520.f64[1] = v129;
    v521 = *(_QWORD *)&v113;
    v522 = 1;
    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
    v130 = v517[0];
    v131 = nms::minMaxEdgeOfQuad<double>((uint64_t)v517[0]);
    if (*((_QWORD *)&v494 + 1) == 1)
      v133 = v473;
    else
      v133 = v478;
    if (*((_QWORD *)&v494 + 1) == 1)
      v134 = v472;
    else
      v134 = v477;
    v135 = v471;
    if (*((_QWORD *)&v494 + 1) != 1)
      v135 = v475;
    v136 = v474;
    if (*((_QWORD *)&v494 + 1) == 1)
      v136 = v470;
    if ((_QWORD)v493 == *((_QWORD *)&v492 + 1)
      || (v137 = (_QWORD *)(*((_QWORD *)&v492 + 1) + 8 * ((unint64_t)v494 >> 10)),
          v138 = (unsigned __int16 *)(*v137 + 4 * (v494 & 0x3FF)),
          v139 = *(_QWORD *)(*((_QWORD *)&v492 + 1)
                           + ((((_QWORD)v494 + *((_QWORD *)&v494 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
               + 4 * ((v494 + *((_QWORD *)&v494 + 1)) & 0x3FF),
          v138 == (unsigned __int16 *)v139))
    {
      v144 = 1;
      if (v130)
        goto LABEL_233;
      goto LABEL_241;
    }
    v140 = v131 * *v133;
    v141 = v131 * *v134;
    v142 = v132 * *v135;
    v143 = v132 * *v136;
    v144 = 1;
    do
    {
      v145 = *v138;
      v146 = *(_QWORD **)(v8 + 968);
      if (v146[5] <= v145)
        std::__throw_out_of_range[abi:ne180100]("deque");
      v147 = v146[4] + v145;
      v148 = *(_QWORD *)(v146[1] + 8 * (v147 / 0x14));
      v149 = v147 % 0x14;
      v150 = (_QWORD *)(v148 + 200 * (v147 % 0x14));
      v151 = (_QWORD *)v150[23];
      if (!v151)
        goto LABEL_174;
      v152 = v150 + 23;
      do
      {
        v153 = v151[4];
        v154 = v153 >= 3;
        if (v153 >= 3)
          v155 = v151;
        else
          v155 = v151 + 1;
        if (v154)
          v152 = v151;
        v151 = (_QWORD *)*v155;
      }
      while (*v155);
      if (v152 == v150 + 23 || v152[4] > 3uLL || (v156 = v152[5], v156 > 8))
LABEL_174:
        v157 = 0.0;
      else
        v157 = dbl_1D513B3B8[v156];
      v158 = *(_QWORD *)(v150[17] + 8 * ((v150[20] + 4) / 0x55uLL)) + 48 * ((v150[20] + 4) % 0x55uLL);
      v159 = *(_QWORD *)(v158 + 32) + v138[1];
      v160 = *(_QWORD *)(*(_QWORD *)(v148 + 200 * v149 + 88)
                       + (((unint64_t)(*(_QWORD *)(v148 + 200 * v149 + 112) + 3) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*(_BYTE *)(v148 + 200 * v149 + 112) + 3);
      *(_QWORD *)&v161 = *(_QWORD *)&v157
                       * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v158 + 8) + ((v159 >> 7) & 0x1FFFFFFFFFFFFF8))
                                             + 4 * (v159 & 0x3FF));
      *(_QWORD *)&v520.f64[0] = v160;
      v520.f64[1] = v161;
      v521 = *(_QWORD *)&v157;
      v522 = 1;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(__p, (uint64_t)&v520);
      v162 = __p[0];
      v163 = nms::minMaxEdgeOfQuad<double>((uint64_t)__p[0]);
      if (v163 < v140)
      {
        v144 = 0;
        v166 = 0;
        if (!v162)
          goto LABEL_190;
LABEL_187:
        if (__p[1] != v162)
          __p[1] = (char *)__p[1] + ((v162 - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
        operator delete(v162);
        goto LABEL_190;
      }
      v165 = v164 >= v142;
      if (v164 > v143)
        v165 = 0;
      if (v163 <= v141)
        v144 &= v165;
      else
        v144 = 0;
      v166 = v163 <= v141 && v165;
      if (v162)
        goto LABEL_187;
LABEL_190:
      if (!v166)
        break;
      v138 += 2;
      if ((unsigned __int16 *)((char *)v138 - *v137) == (unsigned __int16 *)4096)
      {
        v167 = (unsigned __int16 *)v137[1];
        ++v137;
        v138 = v167;
      }
    }
    while (v138 != (unsigned __int16 *)v139);
    v130 = v517[0];
    if (!v517[0])
      goto LABEL_241;
LABEL_233:
    if (v517[1] != v130)
      v517[1] = (char *)v517[1] + ((v130 - (char *)v517[1] + 7) & 0xFFFFFFFFFFFFFFF8);
    v171 = v130;
LABEL_240:
    operator delete(v171);
LABEL_241:
    v205 = 0;
    if (a2 == 1 && *(_BYTE *)(v8 + 1153))
      v205 = (v6[5] == 0) & v144;
    if (*((_QWORD *)&v494 + 1) < 2uLL)
    {
      if (*((_QWORD *)&v494 + 1) != 1)
        goto LABEL_516;
      v227 = *(_QWORD **)(v8 + 968);
      v228 = v227[5];
      if (v228 <= a2)
        goto LABEL_542;
      v229 = v227[4];
      v230 = v227[1];
      v231 = *(_QWORD *)(v230 + 8 * ((v229 + (unint64_t)a2) / 0x14));
      v232 = (v229 + (unint64_t)a2) % 0x14;
      v233 = v231 + 200 * v232;
      v236 = *(_QWORD **)(v233 + 184);
      v234 = (_QWORD *)(v233 + 184);
      v235 = v236;
      if (!v236)
        goto LABEL_346;
      v237 = v235;
      do
      {
        v238 = v237;
        v237 = (_QWORD *)*v237;
      }
      while (v237);
      if (v238 == v234 || v238[4] || (v239 = v238[5] - 5, v239 > 3))
      {
LABEL_346:
        v240 = -1;
        if (!v235)
          goto LABEL_352;
      }
      else
      {
        v240 = qword_1D513B398[v239];
        if (!v235)
          goto LABEL_352;
      }
      do
      {
        v300 = v235;
        v235 = (_QWORD *)*v235;
      }
      while (v235);
      if (v300 != v234 && !v300[4])
      {
        v301 = v300[5];
        if (v301 <= 8)
        {
          v302 = dbl_1D513B3B8[v301];
          goto LABEL_353;
        }
      }
LABEL_352:
      v302 = 0.0;
LABEL_353:
      v303 = v240 + *(_QWORD *)&v302 * a3;
      v305 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v231 + 200 * v232 + 88)
                                   + ((*(_QWORD *)(v231 + 200 * v232 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *(_QWORD *)(v231 + 200 * v232 + 112));
      v304 = *v305;
      v306 = 0.0;
      if (v303 < (v305[1] - *v305) >> 3)
        v306 = *(double *)(v304 + 8 * v303);
      v307 = *(_QWORD *)(*((_QWORD *)&v492 + 1) + (((unint64_t)v494 >> 7) & 0x1FFFFFFFFFFFFF8));
      v308 = v494 & 0x3FF;
      v309 = (unsigned __int16 *)(v307 + 4 * v308);
      v310 = *(_QWORD *)(v8 + 1144);
      if (v310 < 2)
        goto LABEL_361;
      v311 = *v309;
      if (v228 <= v311)
        goto LABEL_542;
      v312 = v231 + 200 * v232;
      v313 = *(_QWORD *)(v230 + 8 * ((v229 + v311) / 0x14)) + 200 * ((v229 + v311) % 0x14);
      v314 = *(_QWORD *)(v313 + 160);
      v315 = *(_QWORD *)(*(_QWORD *)(v313 + 136) + 8 * (v314 / 0x55));
      v316 = v314 % 0x55;
      v317 = *(_QWORD *)(*(_QWORD *)(v312 + 136) + 8 * (*(_QWORD *)(v312 + 160) / 0x55uLL))
           + 48 * (*(_QWORD *)(v312 + 160) % 0x55uLL);
      v318 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v317 + 8)
                                            + (((*(_QWORD *)(v317 + 32) + (unint64_t)a3) >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * ((*(_QWORD *)(v317 + 32) + a3) & 0x3FFLL));
      v319 = v318[1] - (unint64_t)*v318 + 1;
      v320 = *(unsigned __int16 *)(v307 + 4 * v308 + 2);
      v321 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v315 + 48 * v316 + 8)
                                            + (((unint64_t)(*(_QWORD *)(v315 + 48 * v316 + 32) + v320) >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * ((*(_QWORD *)(v315 + 48 * v316 + 32) + v320) & 0x3FF));
      v322 = v321[1] - (unint64_t)*v321;
      v323 = v322 + 1;
      v324 = v319 <= v322 + 1 ? v322 + 1 : v319;
      if (v324 <= v310)
      {
        v6 = a5;
        if (v319 < v323)
          goto LABEL_402;
        v325 = v319 > v323;
      }
      else
      {
LABEL_361:
        v325 = 0;
      }
      isQuadSizeEqualOrLarger = 0;
      if ((v325 & 1) == 0 && *(_BYTE *)(v8 + 1152))
      {
        isQuadSizeEqualOrLarger = nms::PyramidNMS<unsigned short,double,unsigned char>::isQuadSizeEqualOrLarger(v227, a2, a3, *v309, *(unsigned __int16 *)(v307 + 4 * v308 + 2));
        v325 = !isQuadSizeEqualOrLarger;
      }
      if (((v205 | v325 | isQuadSizeEqualOrLarger) & 1) != 0)
      {
        v6 = a5;
        if ((v325 & 1) == 0)
        {
          LODWORD(v311) = *v309;
          LODWORD(v320) = *(unsigned __int16 *)(v307 + 4 * v308 + 2);
LABEL_402:
          v353 = v7[4];
          v354 = v7[1];
          v355 = v7[2];
          v356 = v354 + 8 * (v353 >> 10);
          if (v355 == v354)
            v357 = 0;
          else
            v357 = *(_QWORD *)v356 + 4 * (v7[4] & 0x3FFLL);
          v358 = v7[5] + v353;
          v359 = v358 >> 10;
          v360 = v358 & 0x3FF;
          while (1)
          {
            v361 = (unsigned __int16 *)v357;
            do
            {
              if (v355 == v354)
                v362 = 0;
              else
                v362 = *(_QWORD *)(v354 + 8 * v359) + 4 * v360;
              if (v361 == (unsigned __int16 *)v362)
                goto LABEL_516;
              if (*v361 == (_DWORD)v311 && v361[1] == (_DWORD)v320)
              {
                std::deque<std::pair<unsigned short,unsigned short>>::erase((uint64_t)v7, (char *)v356, v357);
                goto LABEL_516;
              }
              v361 += 2;
              v357 += 4;
            }
            while (*(_QWORD *)v356 + 4096 != v357);
            v363 = *(_QWORD *)(v356 + 8);
            v356 += 8;
            v357 = v363;
          }
        }
LABEL_398:
        v347 = v6[5];
        if (v347)
        {
          std::deque<unsigned long>::deque((uint64_t)v517, *((_QWORD *)&v497 + 1) + v347);
          v349 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
          if ((_QWORD)v496 == *((_QWORD *)&v495 + 1))
          {
            v350 = 0;
            v352 = 0;
            v351 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
          }
          else
          {
            v350 = (unint64_t *)(*v349 + 8 * (v497 & 0x1FF));
            v351 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
            v352 = (unint64_t *)(*v351 + 8 * ((*((_QWORD *)&v497 + 1) + v497) & 0x1FF));
          }
          v6 = a5;
          v453 = a5[4];
          v454 = a5[1];
          v455 = (_QWORD *)(v454 + 8 * (v453 >> 9));
          if (a5[2] == v454)
          {
            v456 = 0;
            v459 = 0;
            v458 = (_QWORD *)(v454 + 8 * ((a5[5] + v453) >> 9));
          }
          else
          {
            v456 = (unint64_t *)(*v455 + 8 * (a5[4] & 0x1FFLL));
            v457 = a5[5] + v453;
            v458 = (_QWORD *)(v454 + 8 * (v457 >> 9));
            v459 = (unint64_t *)(*v458 + 8 * (v457 & 0x1FF));
          }
          if ((void *)v518 == v517[1])
            v460 = 0;
          else
            v460 = (unint64_t *)(*((_QWORD *)v517[1] + ((unint64_t)v519 >> 9)) + 8 * (v519 & 0x1FF));
          std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v349, v350, (uint64_t)v351, v352, v455, v456, v348, (uint64_t)v458, v459, (_QWORD *)v517[1] + ((unint64_t)v519 >> 9), v460);
          v461 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 9);
          if ((void *)v518 == v517[1])
            v462 = 0;
          else
            v462 = *(_QWORD *)v461 + 8 * (v519 & 0x1FF);
          if (v524 == (void **)v462)
            v463 = 0;
          else
            v463 = (((uint64_t)v524 - *(_QWORD *)v523) >> 3) + ((v523 - v461) << 6) - ((v462 - *(_QWORD *)v461) >> 3);
          std::deque<unsigned long>::resize(v517, v463);
          if (*((_QWORD *)&v519 + 1))
          {
            v464 = 0;
            v465 = a2;
            v466 = a3;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                             + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(v8 + 88) + a2))
                     + a3) = 0;
            v467 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                         + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 136) + a2));
            v468 = 1;
          }
          else
          {
            v467 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                         + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 136) + a2));
            if (!*(_BYTE *)(v467 + a3)
              || (v469 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                               + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(_BYTE *)(v8 + 88) + a2)),
                  *(_BYTE *)(v469 + a3)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)v8, a2, a3);
              v469 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                           + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 88) + a2));
              v467 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                           + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 136) + a2));
            }
            v468 = 0;
            v465 = a2;
            v466 = a3;
            *(_BYTE *)(v469 + a3) = 0;
            v464 = 1;
          }
          *(_BYTE *)(v467 + v466) = v464;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 160)
                                           + (((unint64_t)(*(_QWORD *)(v8 + 184) + v465) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 184) + v465))
                   + v466) = v468;
          std::deque<std::pair<int,int>>::~deque[abi:ne180100](v517);
        }
        else
        {
          v364 = a2;
          v365 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                       + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(_BYTE *)(v8 + 136) + a2));
          if (!*(_BYTE *)(v365 + a3)
            || (v366 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                             + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(v8 + 88) + a2)),
                *(_BYTE *)(v366 + a3)))
          {
            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)v8, a2, a3);
            v364 = a2;
            v366 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                         + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 88) + a2));
            v365 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                         + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 136) + a2));
            v6 = a5;
          }
          *(_BYTE *)(v366 + a3) = 0;
          *(_BYTE *)(v365 + a3) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 160)
                                           + (((unint64_t)(*(_QWORD *)(v8 + 184) + v364) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 184) + v364))
                   + a3) = 0;
        }
        goto LABEL_516;
      }
      v328 = *(_QWORD **)(v8 + 968);
      v311 = *v309;
      if (v328[5] > v311)
      {
        v329 = v328[4] + v311;
        v330 = *(_QWORD *)(v328[1] + 8 * (v329 / 0x14));
        v331 = v329 % 0x14;
        v332 = v330 + 200 * v331;
        v335 = *(_QWORD **)(v332 + 184);
        v333 = (_QWORD *)(v332 + 184);
        v334 = v335;
        if (v335)
        {
          do
          {
            v336 = v334;
            v334 = (_QWORD *)*v334;
          }
          while (v334);
          v6 = a5;
          if (v336 == v333 || v336[4] || (v337 = v336[5], v337 > 8))
            v338 = 0.0;
          else
            v338 = dbl_1D513B3B8[v337];
        }
        else
        {
          v338 = 0.0;
          v6 = a5;
        }
        v342 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v330 + 200 * v331 + 88)
                                    + ((*(_QWORD *)(v330 + 200 * v331 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(v330 + 200 * v331 + 112));
        v343 = v240 + *(_QWORD *)&v338 * *(unsigned __int16 *)(v307 + 4 * v308 + 2);
        v345 = v342;
        v344 = *v342;
        v346 = 0.0;
        if (v343 < (v345[1] - v344) >> 3)
          v346 = *(double *)(v344 + 8 * v343);
        if (v346 <= v306)
        {
          LODWORD(v320) = *(unsigned __int16 *)(v307 + 4 * v308 + 2);
          goto LABEL_402;
        }
        goto LABEL_398;
      }
LABEL_542:
      std::__throw_out_of_range[abi:ne180100]("deque");
    }
    v206 = *(_QWORD **)(v8 + 968);
    v207 = v206[4];
    v208 = v206[5];
    v209 = v206[1];
    v210 = *(_QWORD *)(v209 + 8 * ((v208 + v207 - 1) / 0x14)) + 200 * ((v208 + v207 - 1) % 0x14);
    v213 = *(_QWORD **)(v210 + 184);
    v211 = v210 + 184;
    v212 = v213;
    if (!v213)
      goto LABEL_249;
    do
    {
      v214 = v212;
      v212 = (_QWORD *)*v212;
    }
    while (v212);
    if (v214 == (_QWORD *)v211 || v214[4])
    {
LABEL_249:
      v215 = 0;
      v216 = 9;
    }
    else
    {
      v216 = v214[5];
      if (v216 > 8)
        v215 = 0;
      else
        v215 = *(_QWORD *)&dbl_1D513B3B8[v216];
    }
    if (v208 <= a2)
      goto LABEL_542;
    v217 = v207 + a2;
    v218 = *(_QWORD *)(v209 + 8 * (v217 / 0x14));
    v219 = v218 + 200 * (v217 % 0x14);
    v222 = *(_QWORD **)(v219 + 184);
    v220 = (_QWORD *)(v219 + 184);
    v221 = v222;
    if (!v222)
      goto LABEL_269;
    v223 = v221;
    do
    {
      v224 = v223;
      v223 = (_QWORD *)*v223;
    }
    while (v223);
    if (v224 == v220 || v224[4] || (v225 = v224[5] - 5, v225 > 3))
    {
LABEL_269:
      v226 = -1;
      if (!v221)
        goto LABEL_275;
    }
    else
    {
      v226 = qword_1D513B398[v225];
      if (!v221)
        goto LABEL_275;
    }
    do
    {
      v241 = v221;
      v221 = (_QWORD *)*v221;
    }
    while (v221);
    if (v241 == v220 || v241[4] || (v242 = v241[5], v242 > 8))
LABEL_275:
      v243 = 0.0;
    else
      v243 = dbl_1D513B3B8[v242];
    v244 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 200 * (v217 % 0x14) + 88)
                                + ((*(_QWORD *)(v218 + 200 * (v217 % 0x14) + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * *(_QWORD *)(v218 + 200 * (v217 % 0x14) + 112));
    v245 = v226 + *(_QWORD *)&v243 * a3;
    v247 = v244;
    v246 = *v244;
    v248 = 0.0;
    if (v245 < (v247[1] - v246) >> 3)
      v248 = *(double *)(v246 + 8 * v245);
    v249 = v215 * *((_QWORD *)&v494 + 1);
    v511 = 0;
    v512 = 0;
    if (v215 * *((_QWORD *)&v494 + 1))
    {
      if (v249 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v250 = 8 * v249;
      v251 = (char *)operator new(8 * v249);
      v511 = v251;
      bzero(v251, v250);
      v512 = &v251[v250];
    }
    v252 = 0;
    while (2)
    {
      v253 = *(_QWORD **)(v8 + 968);
      v254 = *(_QWORD *)(*((_QWORD *)&v492 + 1) + (((unint64_t)(v494 + v252) >> 7) & 0x1FFFFFFFFFFFFF8));
      v255 = (v494 + v252) & 0x3FF;
      v256 = *(unsigned __int16 *)(v254 + 4 * v255);
      if (v253[5] <= v256)
        std::__throw_out_of_range[abi:ne180100]("deque");
      v257 = v253[4] + v256;
      v258 = *(_QWORD *)(v253[1] + 8 * (v257 / 0x14));
      v259 = v257 % 0x14;
      v260 = v258 + 200 * v259;
      v263 = *(_QWORD **)(v260 + 184);
      v261 = (_QWORD *)(v260 + 184);
      v262 = v263;
      if (!v263)
        goto LABEL_289;
      do
      {
        v264 = v262;
        v262 = (_QWORD *)*v262;
      }
      while (v262);
      if (v264 == v261 || v264[4] || (v265 = v264[5], v265 > 8))
LABEL_289:
        v266 = 0.0;
      else
        v266 = dbl_1D513B3B8[v265];
      v267 = *(unsigned __int16 *)(v254 + 4 * v255 + 2);
      *(_QWORD *)&v520.f64[0] = *(_QWORD *)(*(_QWORD *)(v258 + 200 * v259 + 88)
                                          + ((*(_QWORD *)(v258 + 200 * v259 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * *(_QWORD *)(v258 + 200 * v259 + 112);
      *(_QWORD *)&v520.f64[1] = *(_QWORD *)&v266 * v267;
      v521 = *(_QWORD *)&v266;
      v522 = 1;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
      v268 = v517[0];
      v269 = v517[1];
      if (v517[1] == v517[0])
      {
        if (v517[1])
          goto LABEL_297;
      }
      else
      {
        v270 = (char *)v511 + 8 * v252 * v215;
        v271 = ((char *)v517[1] - (char *)v517[0]) >> 3;
        if (v271 <= 1)
          v271 = 1;
        v272 = (uint64_t *)v517[0];
        do
        {
          v273 = *v272++;
          *v270++ = v273;
          --v271;
        }
        while (v271);
        v517[1] = &v269[(v268 - v269 + 7) & 0xFFFFFFFFFFFFFFF8];
LABEL_297:
        operator delete(v268);
      }
      if ((unint64_t)++v252 < *((_QWORD *)&v494 + 1))
        continue;
      break;
    }
    if ((v205 & 1) == 0)
    {
      v6 = a5;
      if (nms::PyramidNMS<unsigned short,double,unsigned char>::computeAggregatedScore(v8, &v492) > v248)
      {
        v294 = a5[5];
        if (v294)
        {
          std::deque<unsigned long>::deque((uint64_t)v517, *((_QWORD *)&v497 + 1) + v294);
          v296 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
          if ((_QWORD)v496 == *((_QWORD *)&v495 + 1))
          {
            v297 = 0;
            v299 = 0;
            v298 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
          }
          else
          {
            v297 = (unint64_t *)(*v296 + 8 * (v497 & 0x1FF));
            v298 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
            v299 = (unint64_t *)(*v298 + 8 * ((*((_QWORD *)&v497 + 1) + v497) & 0x1FF));
          }
          v436 = a5[4];
          v437 = a5[1];
          v438 = (_QWORD *)(v437 + 8 * (v436 >> 9));
          if (a5[2] == v437)
          {
            v439 = 0;
            v442 = 0;
            v441 = (_QWORD *)(v437 + 8 * ((a5[5] + v436) >> 9));
          }
          else
          {
            v439 = (unint64_t *)(*v438 + 8 * (a5[4] & 0x1FFLL));
            v440 = a5[5] + v436;
            v441 = (_QWORD *)(v437 + 8 * (v440 >> 9));
            v442 = (unint64_t *)(*v441 + 8 * (v440 & 0x1FF));
          }
          if ((void *)v518 == v517[1])
            v443 = 0;
          else
            v443 = (unint64_t *)(*((_QWORD *)v517[1] + ((unint64_t)v519 >> 9)) + 8 * (v519 & 0x1FF));
          std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v296, v297, (uint64_t)v298, v299, v438, v439, v295, (uint64_t)v441, v442, (_QWORD *)v517[1] + ((unint64_t)v519 >> 9), v443);
          v444 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 9);
          if ((void *)v518 == v517[1])
            v445 = 0;
          else
            v445 = *(_QWORD *)v444 + 8 * (v519 & 0x1FF);
          if (v524 == (void **)v445)
            v446 = 0;
          else
            v446 = (((uint64_t)v524 - *(_QWORD *)v523) >> 3) + ((v523 - v444) << 6) - ((v445 - *(_QWORD *)v444) >> 3);
          std::deque<unsigned long>::resize(v517, v446);
          if (*((_QWORD *)&v519 + 1))
          {
            v447 = 0;
            v448 = a2;
            v449 = a3;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                             + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(v8 + 88) + a2))
                     + a3) = 0;
            v450 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                         + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 136) + a2));
            v451 = 1;
          }
          else
          {
            v450 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                         + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 136) + a2));
            if (!*(_BYTE *)(v450 + a3)
              || (v452 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                               + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*(_BYTE *)(v8 + 88) + a2)),
                  *(_BYTE *)(v452 + a3)))
            {
              nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)v8, a2, a3);
              v452 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                           + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 88) + a2));
              v450 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                           + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 136) + a2));
            }
            v451 = 0;
            v448 = a2;
            v449 = a3;
            *(_BYTE *)(v452 + a3) = 0;
            v447 = 1;
          }
          *(_BYTE *)(v450 + v449) = v447;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 160)
                                           + (((unint64_t)(*(_QWORD *)(v8 + 184) + v448) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 184) + v448))
                   + v449) = v451;
          std::deque<std::pair<int,int>>::~deque[abi:ne180100](v517);
        }
        else
        {
          v339 = a2;
          v340 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                       + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (*(_BYTE *)(v8 + 136) + a2));
          if (!*(_BYTE *)(v340 + a3)
            || (v341 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                             + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(v8 + 88) + a2)),
                *(_BYTE *)(v341 + a3)))
          {
            nms::PyramidNMS<unsigned short,double,unsigned char>::isolateDatum((_QWORD *)v8, a2, a3);
            v339 = a2;
            v341 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 64)
                                         + (((*(_QWORD *)(v8 + 88) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 88) + a2));
            v340 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                         + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (*(_BYTE *)(v8 + 136) + a2));
          }
          *(_BYTE *)(v341 + a3) = 0;
          *(_BYTE *)(v340 + a3) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 160)
                                           + (((unint64_t)(*(_QWORD *)(v8 + 184) + v339) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (*(_BYTE *)(v8 + 184) + v339))
                   + a3) = 0;
        }
        goto LABEL_512;
      }
      if (v216 == 5)
        v327 = 5;
      else
        v327 = 0;
      if (!v216)
        v327 = 4;
      if (v327 && v327 <= (v512 - (_BYTE *)v511) >> 3)
      {
        *(_QWORD *)&v520.f64[1] = &v511;
        v521 = 2;
        v522 = ((v512 - (_BYTE *)v511) >> 3) / v327;
        v523 = (char *)v327;
        v524 = &v511;
        v525 = 3;
        v526 = v522;
        v527 = v327;
        std::__val_expr<std::_BinaryOp<std::multiplies<double>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>,std::__val_expr<std::__slice_expr<std::valarray<double> const&>>>>::operator std::valarray<double>((double *)&v498, (uint64_t)&v520);
      }
      else
      {
        v498 = 0;
        v499 = 0;
      }
      if (!*((_QWORD *)&v494 + 1))
      {
        LOWORD(v370) = 0;
        LOWORD(v369) = 0;
LABEL_470:
        v7 = a4;
        v422 = a4[4];
        v423 = a4[1];
        v424 = a4[2];
        v425 = v423 + 8 * (v422 >> 10);
        if (v424 == v423)
          v426 = 0;
        else
          v426 = *(_QWORD *)v425 + 4 * (a4[4] & 0x3FFLL);
        v6 = a5;
        v427 = a4[5] + v422;
        v428 = v427 >> 10;
        v429 = v427 & 0x3FF;
LABEL_474:
        v430 = (unsigned __int16 *)v426;
        while (1)
        {
          v431 = v424 == v423 ? 0 : *(_QWORD *)(v423 + 8 * v428) + 4 * v429;
          if (v430 == (unsigned __int16 *)v431)
            break;
          if (*v430 == (unsigned __int16)v370 && v430[1] == (unsigned __int16)v369)
          {
            std::deque<std::pair<unsigned short,unsigned short>>::erase((uint64_t)a4, (char *)v425, v426);
            break;
          }
          v430 += 2;
          v426 += 4;
          if (*(_QWORD *)v425 + 4096 == v426)
          {
            v432 = *(_QWORD *)(v425 + 8);
            v425 += 8;
            v426 = v432;
            goto LABEL_474;
          }
        }
        if (v498)
        {
          if (v499 != v498)
            v499 = (double *)((char *)v499 + (((_BYTE *)v498 - (_BYTE *)v499 + 7) & 0xFFFFFFFFFFFFFFF8));
          operator delete(v498);
        }
        goto LABEL_512;
      }
      v367 = 0;
      v368 = 0;
      v369 = 0;
      v370 = 0;
      v371 = 0.0;
      while (2)
      {
        v372 = *((double *)v498 + v368);
        v373 = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)&v492 + 1)
                                              + (((unint64_t)(v494 + v368) >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * ((v494 + v368) & 0x3FF));
        v374 = *v373;
        v375 = v373[1];
        v518 = 0u;
        v519 = 0u;
        *(_OWORD *)v517 = 0u;
        v376 = *(_QWORD *)(v8 + 968);
        if (v376 && (v377 = *(_QWORD *)(v376 + 40), LOWORD(v520.f64[0]) = 0, v377))
        {
          v491 = v368;
          v476 = v369;
          v486 = v370;
          v378 = 0;
          v379 = 0;
          do
          {
            v380 = *(_QWORD *)(*(_QWORD *)(v8 + 736) + 8 * ((*(_QWORD *)(v8 + 760) + v374) / 0x55uLL))
                 + 48 * ((*(_QWORD *)(v8 + 760) + v374) % 0x55uLL);
            v381 = *(_QWORD *)(v380 + 32) + v379;
            v382 = *(_QWORD *)(*(_QWORD *)(v380 + 8) + 8 * (v381 / 0x55));
            if (*(_QWORD *)(v382 + 48 * (v381 % 0x55) + 40))
            {
              v383 = v382 + 48 * (v381 % 0x55);
              v384 = *(_QWORD *)(v383 + 32) + v375;
              v385 = *(_QWORD *)(*(_QWORD *)(v383 + 8) + 8 * (v384 / 0x55));
              v386 = v384 % 0x55;
              v387 = *(_QWORD *)(v385 + 48 * (v384 % 0x55) + 40);
              if (v387)
              {
                v388 = v385 + 48 * v386;
                v389 = *(_QWORD *)(v388 + 8);
                if (*(_QWORD *)(v388 + 16) != v389)
                {
                  v390 = *(_QWORD *)(v385 + 48 * v386 + 32);
                  v391 = (char **)(v389 + 8 * (v390 >> 11));
                  v392 = *v391;
                  v393 = &(*v391)[2 * (v390 & 0x7FF)];
                  v394 = *(_QWORD *)(v389 + (((v390 + v387) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v390 + v387) & 0x7FF);
                  while (v393 != (char *)v394)
                  {
                    LOWORD(__p[0]) = 0;
                    v395 = *(unsigned __int16 *)v393;
                    LOWORD(__p[0]) = *(_WORD *)v393;
                    if (!*(_QWORD *)(v8 + 144)
                      || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                                           + (((*(_QWORD *)(v8 + 136) + (unint64_t)v378) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (*(_BYTE *)(v8 + 136) + v378))
                                   + v395))
                    {
                      std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(v517, &v520, __p);
                      v392 = *v391;
                    }
                    v393 += 2;
                    if (v393 - v392 == 4096)
                    {
                      v396 = v391[1];
                      ++v391;
                      v392 = v396;
                      v393 = v396;
                    }
                  }
                }
              }
            }
            LOWORD(v520.f64[0]) = ++v378;
            v379 = v378;
          }
          while (v377 > v378);
          v509 = 0u;
          v510 = 0u;
          *(_OWORD *)__p = 0u;
          if ((void *)v518 == v517[1])
          {
            v402 = 0;
            v404 = 0;
            v403 = 0;
            v401 = 0;
            v370 = v486;
            v369 = v476;
            v368 = v491;
          }
          else
          {
            v397 = (char *)v517[1] + 8 * ((unint64_t)v519 >> 10);
            v398 = (unsigned __int16 *)(*v397 + 4 * (v519 & 0x3FF));
            v399 = *(_QWORD *)((char *)v517[1] + (((*((_QWORD *)&v519 + 1) + (_QWORD)v519) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((*((_QWORD *)&v519 + 1) + v519) & 0x3FF);
            v368 = v491;
            if (v398 == (unsigned __int16 *)v399)
            {
              v402 = 0;
              v404 = 0;
              v403 = 0;
              v401 = 0;
              v370 = v486;
              v369 = v476;
            }
            else
            {
              do
              {
                *(_QWORD *)&v520.f64[0] = *v398 ^ (16 * v398[1]);
                std::deque<unsigned long>::push_back(__p, &v520);
                v398 += 2;
                if ((unsigned __int16 *)((char *)v398 - *v397) == (unsigned __int16 *)4096)
                {
                  v400 = (unsigned __int16 *)v397[1];
                  ++v397;
                  v398 = v400;
                }
              }
              while (v398 != (unsigned __int16 *)v399);
              v401 = (char *)__p[1];
              v402 = *((_QWORD *)&v510 + 1);
              v403 = v510;
              v404 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
              v370 = v486;
              v369 = v476;
              if ((void *)v509 != __p[1])
              {
                v405 = (unint64_t *)(*(_QWORD *)v404 + 8 * (v510 & 0x1FF));
                v406 = (char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9);
                v407 = (unint64_t *)(*(_QWORD *)v406 + 8 * ((*((_QWORD *)&v510 + 1) + v510) & 0x1FF));
                goto LABEL_446;
              }
            }
          }
        }
        else
        {
          v402 = 0;
          v404 = 0;
          v403 = 0;
          v401 = 0;
          v509 = 0uLL;
          v510 = 0uLL;
          *(_OWORD *)__p = 0uLL;
        }
        v405 = 0;
        v407 = 0;
        v406 = &v401[8 * ((unint64_t)(v403 + v402) >> 9)];
LABEL_446:
        std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(v404, v405, v406, v407);
        std::deque<unsigned long>::deque((uint64_t)&v503, *((_QWORD *)&v510 + 1) + *((_QWORD *)&v497 + 1));
        v409 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((unint64_t)v497 >> 9));
        if ((_QWORD)v496 == *((_QWORD *)&v495 + 1))
        {
          v410 = 0;
          v412 = 0;
          v411 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
        }
        else
        {
          v410 = (unint64_t *)(*v409 + 8 * (v497 & 0x1FF));
          v411 = (_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * ((*((_QWORD *)&v497 + 1) + (_QWORD)v497) >> 9));
          v412 = (unint64_t *)(*v411 + 8 * ((*((_QWORD *)&v497 + 1) + v497) & 0x1FF));
        }
        v413 = (char *)__p[1] + 8 * ((unint64_t)v510 >> 9);
        if ((void *)v509 == __p[1])
        {
          v414 = 0;
          v416 = 0;
          v415 = (char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9);
        }
        else
        {
          v414 = (unint64_t *)(*v413 + 8 * (v510 & 0x1FF));
          v415 = (char *)__p[1] + 8 * ((*((_QWORD *)&v510 + 1) + (_QWORD)v510) >> 9);
          v416 = (unint64_t *)(*v415 + 8 * ((WORD4(v510) + (_WORD)v510) & 0x1FF));
        }
        if (v505 == v504)
          v417 = 0;
        else
          v417 = (unint64_t *)(*(_QWORD *)&v504[8 * (v506 >> 9)] + 8 * (v506 & 0x1FF));
        std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(&v520, v409, v410, (uint64_t)v411, v412, v413, v414, v408, (uint64_t)v415, v416, &v504[8 * (v506 >> 9)], v417);
        v418 = &v504[8 * (v506 >> 9)];
        if (v505 == v504)
          v419 = 0;
        else
          v419 = *(_QWORD *)v418 + 8 * (v506 & 0x1FF);
        if (v524 == (void **)v419)
          v420 = 0;
        else
          v420 = (((uint64_t)v524 - *(_QWORD *)v523) >> 3) + ((v523 - v418) << 6) - ((v419 - *(_QWORD *)v418) >> 3);
        std::deque<unsigned long>::resize(&v503, v420);
        v421 = v507;
        if (v507 <= 1)
          v421 = 1;
        if (v372 * (double)v421 > v371 * (double)v367)
        {
          v370 = v374;
          v369 = v375;
          v367 = v421;
          v371 = v372;
        }
        std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v503);
        std::deque<std::pair<int,int>>::~deque[abi:ne180100](__p);
        std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v517);
        if ((unint64_t)++v368 >= *((_QWORD *)&v494 + 1))
          goto LABEL_470;
        continue;
      }
    }
    v274 = *(double *)(v8 + 1136);
    if (v274 < 0.0 || v274 > 1.0)
      goto LABEL_337;
    v276 = v215 <= 1 ? 1 : v215;
    v277 = ((v512 - (_BYTE *)v511) >> 3) / v276;
    v278 = v277 - 2;
    if (v277 < 2)
      goto LABEL_337;
    *(_QWORD *)&v520.f64[0] = &v511;
    v520.f64[1] = 0.0;
    v521 = v215;
    v522 = 1;
    std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(v517, (uint64_t)&v520);
    v520 = *(float64x2_t *)v517[0];
    std::valarray<double>::valarray(__p, (uint64_t *)&v520, 2uLL);
    v520 = vaddq_f64(*(float64x2_t *)__p[0], *((float64x2_t *)v517[0] + 1));
    std::valarray<double>::valarray(&v503, (uint64_t *)&v520, 2uLL);
    v498 = 0;
    v499 = 0;
    std::valarray<double>::resize((uint64_t)&v498, 2uLL, 0.0);
    v516[0] = 0;
    v516[1] = 0;
    std::valarray<double>::resize((uint64_t)v516, 2uLL, 0.0);
    v515[0] = 0;
    v515[1] = 0;
    std::valarray<double>::resize((uint64_t)v515, 2uLL, 0.0);
    v279 = 0;
    v280 = v516[0];
    v281 = v515[0];
    v490 = 1;
    v282 = v215;
    v283 = (double *)v498;
    v488 = v499;
    do
    {
      *(_QWORD *)&v520.f64[0] = &v511;
      *(_QWORD *)&v520.f64[1] = v282;
      v521 = v215;
      v522 = 1;
      std::__val_expr<std::__slice_expr<std::valarray<double> const&>>::operator std::valarray<double>(&v513, (uint64_t)&v520);
      v284 = (double *)v513;
      v285 = *(double *)v513;
      *v280 = *(double *)v513;
      v280[1] = v284[1];
      *v281 = v285 + v284[2];
      v281[1] = v280[1] + v284[3];
      if (!v279)
      {
        v286 = (double *)__p[0];
        *v283 = *((double *)__p[0] + 1) - v280[1];
        v283[1] = *v280 - *v286;
        nms::normalizeL2<double>(v283, v488);
      }
      if (nms::PyramidNMS<unsigned short,double,unsigned char>::checkValidityOfCosAngleInDistributionCheckInProcessingContainment(v8, (double **)__p, v516, (uint64_t)&v498))
      {
        v287 = nms::PyramidNMS<unsigned short,double,unsigned char>::checkValidityOfCosAngleInDistributionCheckInProcessingContainment(v8, (double **)&v503, v515, (uint64_t)&v498);
        v490 &= v287;
      }
      else
      {
        v287 = 0;
        v490 = 0;
      }
      if (v513)
      {
        if (v514 != v513)
          v514 += ((_BYTE *)v513 - v514 + 7) & 0xFFFFFFFFFFFFFFF8;
        operator delete(v513);
      }
      v288 = v278 != v279++ && v287;
      v282 += v215;
    }
    while (v288);
    operator delete(v281);
    operator delete(v280);
    if (v283)
      operator delete(v283);
    v7 = a4;
    if (v503)
    {
      if (v504 != v503)
        v504 += ((_BYTE *)v503 - v504 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(v503);
    }
    if (__p[0])
    {
      if (__p[1] != __p[0])
        __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 7) & 0xFFFFFFFFFFFFFFF8);
      operator delete(__p[0]);
    }
    if (v517[0])
    {
      if (v517[1] != v517[0])
        v517[1] = (char *)v517[1] + (((char *)v517[0] - (char *)v517[1] + 7) & 0xFFFFFFFFFFFFFFF8);
      operator delete(v517[0]);
    }
    if ((v490 & 1) != 0)
    {
LABEL_337:
      v289 = (void **)v7[1];
      v290 = v7[2];
      v7[5] = 0;
      v291 = v290 - (_QWORD)v289;
      v6 = a5;
      if (v291 >= 0x11)
      {
        do
        {
          operator delete(*v289);
          v292 = v7[2];
          v289 = (void **)(v7[1] + 8);
          v7[1] = v289;
          v291 = v292 - (_QWORD)v289;
        }
        while (v291 > 0x10);
      }
    }
    else
    {
      v433 = (void **)a4[1];
      v434 = a4[2];
      a4[5] = 0;
      v291 = v434 - (_QWORD)v433;
      v6 = a5;
      if (v291 >= 0x11)
      {
        do
        {
          operator delete(*v433);
          v435 = a4[2];
          v433 = (void **)(a4[1] + 8);
          a4[1] = v433;
          v291 = v435 - (_QWORD)v433;
        }
        while (v291 > 0x10);
      }
    }
    if (v291 >> 3 == 1)
    {
      v293 = 512;
LABEL_384:
      v7[4] = v293;
    }
    else if (v291 >> 3 == 2)
    {
      v293 = 1024;
      goto LABEL_384;
    }
LABEL_512:
    if (v511)
    {
      if (v512 != v511)
        v512 += ((_BYTE *)v511 - v512 + 7) & 0xFFFFFFFFFFFFFFF8;
      operator delete(v511);
    }
LABEL_516:
    std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&v492);
    result = std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v495);
  }
  while (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112)
                                            + (((*(_QWORD *)(v8 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (*(_BYTE *)(v8 + 136) + a2))
                    + a3));
  return result;
}

void sub_1D50BECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  void *a71;

  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a71);
  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](&a33);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::getOverlappingDatums(_QWORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4, char a5)
{
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  unsigned int v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char **v34;
  char *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  int v45;
  unsigned __int16 v46;
  __int16 v47;

  v10 = (void **)a4[1];
  v11 = a4[2];
  a4[5] = 0;
  v12 = v11 - (_QWORD)v10;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v10);
      v13 = a4[2];
      v10 = (void **)(a4[1] + 8);
      a4[1] = v10;
      v12 = v13 - (_QWORD)v10;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 512;
  }
  else
  {
    if (v12 >> 3 != 2)
      goto LABEL_8;
    v14 = 1024;
  }
  a4[4] = v14;
LABEL_8:
  v15 = a1[121];
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 40);
    if ((_BYTE)v16)
    {
      v17 = operator new(*(_QWORD *)(v15 + 40));
      bzero(v17, v16);
    }
    else
    {
      v17 = 0;
    }
    v47 = 0;
    v19 = v16;
    if (!(_BYTE)v16)
    {
      LOBYTE(v18) = 0;
      if (!v17)
        return v18;
      goto LABEL_32;
    }
    v20 = 0;
    v18 = 0;
    v21 = a2;
    v43 = v17;
    v44 = a3;
    v42 = v16;
    v41 = a2;
    do
    {
      v22 = v20;
      v23 = *(_QWORD *)(a1[116] + 8 * ((a1[119] + v21) / 0x55uLL)) + 48 * ((a1[119] + v21) % 0x55uLL);
      v24 = *(_QWORD *)(v23 + 32) + v20;
      v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * (v24 / 0x55));
      if (*(_QWORD *)(v25 + 48 * (v24 % 0x55) + 40))
      {
        v26 = v25 + 48 * (v24 % 0x55);
        v27 = *(_QWORD *)(v26 + 32) + v44;
        v28 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * (v27 / 0x55));
        v29 = v27 % 0x55;
        v30 = *(_QWORD *)(v28 + 48 * (v27 % 0x55) + 40);
        if (v30)
        {
          v45 = v18;
          v31 = v28 + 48 * v29;
          v32 = *(_QWORD *)(v31 + 8);
          if (*(_QWORD *)(v31 + 16) == v32
            || (v33 = *(_QWORD *)(v28 + 48 * v29 + 32),
                v34 = (char **)(v32 + 8 * (v33 >> 11)),
                v35 = *v34,
                v36 = (unsigned __int16 *)&(*v34)[2 * (v33 & 0x7FF)],
                v37 = *(_QWORD *)(v32 + (((v33 + v30) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v33 + v30) & 0x7FF),
                v36 == (unsigned __int16 *)v37))
          {
            v38 = 0;
          }
          else
          {
            v38 = 0;
            do
            {
              v46 = 0;
              v46 = *v36;
              if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[14]
                                                     + (((unint64_t)(a1[17] + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (*((_BYTE *)a1 + 136) + v22))
                             + v46)
                && ((a5 & 1) != 0
                 || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[20]
                                                      + (((unint64_t)(a1[23] + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (*((_BYTE *)a1 + 184) + v22))
                              + v46)))
              {
                std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>(a4, &v47, &v46);
                ++v38;
                v35 = *v34;
              }
              if ((char *)++v36 - v35 == 4096)
              {
                v39 = v34[1];
                ++v34;
                v35 = v39;
                v36 = (unsigned __int16 *)v39;
              }
            }
            while (v36 != (unsigned __int16 *)v37);
          }
          v17 = v43;
          *((_BYTE *)v43 + v22) += v38;
          v18 = v38 + v45;
          v19 = v42;
          v21 = v41;
        }
      }
      v20 = v22 + 1;
      v47 = v22 + 1;
    }
    while (v19 > (unsigned __int16)(v22 + 1));
    if (v17)
LABEL_32:
      operator delete(v17);
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  return v18;
}

void sub_1D50BF264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<std::pair<unsigned short,unsigned short>>::insert<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>(int64x2_t *a1, char *a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t *a6, int *a7)
{
  int *i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  uint64_t *v55;
  int *v56;
  int *v57;
  int *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  int *v64;
  int *v65;
  int *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  __int16 v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  char **v131;
  char *v132;
  unint64_t v133;
  char **v134;
  char *v135;
  char **v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char **v141;
  char *v142;
  int *v143;
  int **v144;
  uint64_t v145;
  int *v146;
  int *v147;
  int *v148;
  int *v149;
  int *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  int *v155;
  void *v157;
  int64x2_t v158;
  uint64_t *v159;
  char *v160;
  __int8 *v161;

  i = a7;
  v8 = a6;
  v9 = (uint64_t)a5;
  v10 = a4;
  if (a7 == a5)
    v12 = 0;
  else
    v12 = (((uint64_t)a7 - *a6) >> 2) + (((char *)a6 - (char *)a4) << 7) - (((uint64_t)a5 - *a4) >> 2);
  v13 = a1[2].u64[0];
  v14 = v13 >> 10;
  v15 = a1->i64[1];
  v16 = a1[1].i64[0];
  v17 = (char *)(v15 + 8 * (v13 >> 10));
  v18 = v16 - v15;
  if (v16 == v15)
    v19 = 0;
  else
    v19 = *(_QWORD *)v17 + 4 * (a1[2].i64[0] & 0x3FF);
  if (a3 == v19)
    v20 = 0;
  else
    v20 = ((a3 - *(_QWORD *)a2) >> 2) + ((a2 - v17) << 7) - ((v19 - *(_QWORD *)v17) >> 2);
  v21 = a1[2].i64[1];
  if (v20 >= v21 - v20)
  {
    v35 = (v18 << 7) - 1;
    if (v16 == v15)
      v35 = 0;
    v36 = v21 + v13;
    v37 = v35 - v36;
    if (v12 > v37)
    {
      v38 = v12;
      v39 = v20;
      std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(a1, v12 - v37);
      v20 = v39;
      v12 = v38;
      v21 = a1[2].i64[1];
      v15 = a1->i64[1];
      v16 = a1[1].i64[0];
      v36 = a1[2].i64[0] + v21;
    }
    v40 = (uint64_t *)(v15 + 8 * (v36 >> 10));
    if (v16 == v15)
      v41 = 0;
    else
      v41 = *v40 + 4 * (v36 & 0x3FF);
    v42 = v21 - v20;
    if (v21 - v20 >= v12)
    {
      v44 = (int *)v41;
      v45 = v40;
      v46 = (uint64_t)i;
      if (!v12)
        return;
      goto LABEL_78;
    }
    if (v42 >= v12 >> 1)
    {
      v43 = v21 - v20 - v12 + (((uint64_t)i - *v8) >> 2);
      if (v43 >= 1)
      {
        v8 += (unint64_t)v43 >> 10;
        goto LABEL_50;
      }
      v52 = 1023 - v43;
      v53 = ~(_WORD)v52;
      v8 -= v52 >> 10;
    }
    else
    {
      if (!v42)
      {
        v8 = v10;
        v46 = v9;
        goto LABEL_68;
      }
      v43 = v42 + ((v9 - *v10) >> 2);
      if (v43 >= 1)
      {
        v8 = &v10[(unint64_t)v43 >> 10];
LABEL_50:
        v46 = *v8 + 4 * (v43 & 0x3FF);
        goto LABEL_68;
      }
      v54 = 1023 - v43;
      v53 = ~(_WORD)v54;
      v8 = &v10[-(v54 >> 10)];
    }
    v46 = *v8 + 4 * (v53 & 0x3FF);
LABEL_68:
    if ((int *)v46 == i)
    {
      v44 = (int *)v41;
      v45 = v40;
    }
    else
    {
      v55 = v8;
      v56 = (int *)v46;
      v45 = v40;
      v44 = (int *)v41;
      do
      {
        *v44++ = *v56;
        if ((int *)((char *)v44 - *v45) == (int *)4096)
        {
          v57 = (int *)v45[1];
          ++v45;
          v44 = v57;
        }
        if ((int *)((char *)++v56 - *v55) == (int *)4096)
        {
          v58 = (int *)v55[1];
          ++v55;
          v56 = v58;
        }
        ++a1[2].i64[1];
      }
      while (v56 != i);
    }
    v12 = v42;
    if (!v42)
      return;
LABEL_78:
    v59 = ((v41 - *v40) >> 2) - v12;
    if (v59 < 1)
    {
      v62 = 1023 - v59;
      v60 = &v40[-(v62 >> 10)];
      v61 = *v60 + 4 * (~(_WORD)v62 & 0x3FF);
    }
    else
    {
      v60 = &v40[(unint64_t)v59 >> 10];
      v61 = *v60 + 4 * (v59 & 0x3FF);
    }
    if (v61 != v41)
    {
      v63 = v60;
      v64 = (int *)v61;
      do
      {
        *v44++ = *v64;
        if ((int *)((char *)v44 - *v45) == (int *)4096)
        {
          v65 = (int *)v45[1];
          ++v45;
          v44 = v65;
        }
        if ((int *)((char *)++v64 - *v63) == (int *)4096)
        {
          v66 = (int *)v63[1];
          ++v63;
          v64 = v66;
        }
        ++a1[2].i64[1];
      }
      while (v64 != (int *)v41);
    }
    if (v12 < v42)
    {
      v67 = ((v41 - *v40) >> 2) - v42;
      if (v67 < 1)
      {
        v70 = 1023 - v67;
        v68 = &v40[-(v70 >> 10)];
        v69 = *v68 + 4 * (~(_WORD)v70 & 0x3FF);
      }
      else
      {
        v68 = &v40[(unint64_t)v67 >> 10];
        v69 = *v68 + 4 * (v67 & 0x3FF);
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>((__n128 *)&v158, v68, v69, v60, v61, v40, v41);
      v40 = v159;
      v41 = (uint64_t)v160;
    }
    if (v10 == v8)
    {
      v79 = v9;
      v78 = v46;
      v75 = v40;
      v76 = v41;
    }
    else
    {
      v73 = *v8;
      v72 = v8 - 1;
      v71 = v73;
      v74 = v46;
      v75 = v40;
      v76 = v41;
      while (1)
      {
        std::__copy_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v158, v71, v74, v75, v76);
        v75 = (uint64_t *)v158.i64[1];
        v76 = (uint64_t)v159;
        if (v72 == v10)
          break;
        v77 = *v72--;
        v71 = v77;
        v74 = v77 + 4096;
      }
      v78 = *v10 + 4096;
      v79 = v9;
    }
    std::__copy_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v158, v79, v78, v75, v76);
    return;
  }
  if (v12 > v13)
  {
    v22 = (v18 << 7) - 1;
    v23 = v16 - v15;
    if (v16 == v15)
      v24 = 0;
    else
      v24 = v22;
    if (v16 == v15)
      v25 = v12 - v13 + 1;
    else
      v25 = v12 - v13;
    if ((v25 & 0x3FF) != 0)
      v26 = (v25 >> 10) + 1;
    else
      v26 = v25 >> 10;
    v27 = v24 - (v13 + v21);
    if (v26 >= v27 >> 10)
      v28 = v27 >> 10;
    else
      v28 = v26;
    v153 = v20;
    v154 = v12;
    if (v26 <= v27 >> 10)
    {
      for (a1[2].i64[0] = v13 + (v28 << 10); v28; --v28)
      {
        v47 = a1[1].i64[0];
        v158.i64[0] = *(_QWORD *)(v47 - 8);
        a1[1].i64[0] = v47 - 8;
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v158);
      }
    }
    else
    {
      v29 = v26 - v28;
      v30 = a1[1].i64[1] - a1->i64[0];
      if (v26 - v28 <= (v30 >> 3) - (v23 >> 3))
      {
        if (v29)
        {
          if (v15 == a1->i64[0])
          {
LABEL_58:
            v50 = v29;
            do
            {
              v158.i64[0] = (uint64_t)operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v158);
              --v50;
            }
            while (v50);
            v28 += v29;
            v13 = a1[2].u64[0];
          }
          else
          {
            while (1)
            {
              v158.i64[0] = (uint64_t)operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v158);
              v48 = a1->i64[1];
              v49 = a1[1].i64[0] - v48 == 8 ? 1023 : 1024;
              v13 = v49 + a1[2].i64[0];
              a1[2].i64[0] = v13;
              if (!--v29)
                break;
              if (v48 == a1->i64[0])
                goto LABEL_58;
            }
          }
        }
        a1[2].i64[0] = v13 + (v28 << 10);
        for (i = a7; v28; --v28)
        {
          v51 = a1[1].i64[0];
          v158.i64[0] = *(_QWORD *)(v51 - 8);
          a1[1].i64[0] = v51 - 8;
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v158);
        }
      }
      else
      {
        v31 = v16 == v15;
        v32 = v26 << 10;
        if (v30 >> 2 <= v29 + (v23 >> 3))
          v33 = v29 + (v23 >> 3);
        else
          v33 = v30 >> 2;
        v161 = &a1[1].i8[8];
        if (v33)
          v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v33);
        else
          v34 = 0;
        v151 = v32 - v31;
        v158.i64[0] = v33;
        v158.i64[1] = v33;
        v159 = (uint64_t *)v33;
        v160 = (char *)(v33 + 8 * v34);
        do
        {
          v157 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v158, &v157);
          --v29;
        }
        while (v29);
        v80 = a1[1].i64[0];
        v81 = (char *)v159;
        if (v28)
        {
          v152 = v9;
          do
          {
            if (v81 == v160)
            {
              v83 = (char *)v158.i64[1];
              v82 = (void *)v158.i64[0];
              if (v158.i64[1] <= (unint64_t)v158.i64[0])
              {
                if (v81 == (char *)v158.i64[0])
                  v89 = 1;
                else
                  v89 = (uint64_t)&v81[-v158.i64[0]] >> 2;
                v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v89);
                v93 = v81 - v83;
                v92 = v81 == v83;
                v81 = &v90[8 * (v89 >> 2)];
                if (!v92)
                {
                  v81 = &v90[8 * (v89 >> 2) + (v93 & 0xFFFFFFFFFFFFFFF8)];
                  v94 = 8 * (v93 >> 3);
                  v95 = &v90[8 * (v89 >> 2)];
                  do
                  {
                    v96 = *(_QWORD *)v83;
                    v83 += 8;
                    *(_QWORD *)v95 = v96;
                    v95 += 8;
                    v94 -= 8;
                  }
                  while (v94);
                }
                v158.i64[0] = (uint64_t)v90;
                v158.i64[1] = (uint64_t)&v90[8 * (v89 >> 2)];
                v159 = (uint64_t *)v81;
                v160 = &v90[8 * v91];
                if (v82)
                  operator delete(v82);
              }
              else
              {
                v84 = (v158.i64[1] - v158.i64[0]) >> 3;
                if (v84 >= -1)
                  v85 = v84 + 1;
                else
                  v85 = v84 + 2;
                v86 = v158.i64[1] - 8 * (v85 >> 1);
                v87 = &v81[-v158.i64[1]];
                if (v81 != (char *)v158.i64[1])
                {
                  memmove((void *)(v158.i64[1] - 8 * (v85 >> 1)), (const void *)v158.i64[1], (size_t)&v81[-v158.i64[1]]);
                  v81 = v83;
                }
                v88 = (unint64_t)&v81[-8 * (v85 >> 1)];
                v81 = &v87[v86];
                v158.i64[1] = v88;
                v159 = (uint64_t *)&v87[v86];
                v9 = v152;
              }
            }
            *(_QWORD *)v81 = *(_QWORD *)(v80 - 8);
            v81 = (char *)++v159;
            v80 = a1[1].i64[0] - 8;
            a1[1].i64[0] = v80;
            --v28;
          }
          while (v28);
        }
        v97 = (uint64_t *)a1->i64[1];
        if (v97 != (uint64_t *)v80)
        {
          do
          {
            if (v81 == v160)
            {
              v99 = (char *)v158.i64[1];
              v98 = (void *)v158.i64[0];
              if (v158.i64[1] <= (unint64_t)v158.i64[0])
              {
                if (v81 == (char *)v158.i64[0])
                  v105 = 1;
                else
                  v105 = (uint64_t)&v81[-v158.i64[0]] >> 2;
                v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v105);
                v108 = v81 - v99;
                v92 = v81 == v99;
                v81 = &v106[8 * (v105 >> 2)];
                if (!v92)
                {
                  v81 = &v106[8 * (v105 >> 2) + (v108 & 0xFFFFFFFFFFFFFFF8)];
                  v109 = 8 * (v108 >> 3);
                  v110 = &v106[8 * (v105 >> 2)];
                  do
                  {
                    v111 = *(_QWORD *)v99;
                    v99 += 8;
                    *(_QWORD *)v110 = v111;
                    v110 += 8;
                    v109 -= 8;
                  }
                  while (v109);
                }
                v158.i64[0] = (uint64_t)v106;
                v158.i64[1] = (uint64_t)&v106[8 * (v105 >> 2)];
                v159 = (uint64_t *)v81;
                v160 = &v106[8 * v107];
                if (v98)
                  operator delete(v98);
              }
              else
              {
                v100 = (v158.i64[1] - v158.i64[0]) >> 3;
                if (v100 >= -1)
                  v101 = v100 + 1;
                else
                  v101 = v100 + 2;
                v102 = v158.i64[1] - 8 * (v101 >> 1);
                v103 = &v81[-v158.i64[1]];
                if (v81 != (char *)v158.i64[1])
                {
                  memmove((void *)(v158.i64[1] - 8 * (v101 >> 1)), (const void *)v158.i64[1], (size_t)&v81[-v158.i64[1]]);
                  v81 = v99;
                }
                v104 = (unint64_t)&v81[-8 * (v101 >> 1)];
                v81 = &v103[v102];
                v158.i64[1] = v104;
                v159 = (uint64_t *)&v103[v102];
              }
            }
            v112 = *v97++;
            *(_QWORD *)v81 = v112;
            v81 = (char *)++v159;
          }
          while (v97 != (uint64_t *)a1[1].i64[0]);
        }
        v113 = (void *)a1->i64[0];
        *a1 = v158;
        v114 = (uint64_t)v160;
        a1[1].i64[0] = (uint64_t)v81;
        a1[1].i64[1] = v114;
        a1[2].i64[0] += v151;
        if (v113)
          operator delete(v113);
        i = a7;
      }
    }
    v13 = a1[2].u64[0];
    v15 = a1->i64[1];
    v16 = a1[1].i64[0];
    v14 = v13 >> 10;
    v20 = v153;
    v12 = v154;
  }
  v115 = (_QWORD *)(v15 + 8 * v14);
  if (v16 == v15)
    v116 = 0;
  else
    v116 = *v115 + 4 * (v13 & 0x3FF);
  if (v12 <= v20)
  {
    v118 = v116;
    v119 = (_QWORD *)(v15 + 8 * v14);
    v120 = v9;
    if (!v12)
      return;
    goto LABEL_171;
  }
  if (v20 >= v12 >> 1)
  {
    v117 = v12 - v20 + ((v9 - *v10) >> 2);
    if (v117 >= 1)
    {
      v10 += (unint64_t)v117 >> 10;
      goto LABEL_156;
    }
    v121 = 1023 - v117;
    v122 = ~(_WORD)v121;
    v10 -= v121 >> 10;
  }
  else
  {
    if (!v20)
    {
      v10 = v8;
      v120 = (uint64_t)i;
      goto LABEL_161;
    }
    v117 = (((uint64_t)i - *v8) >> 2) - v20;
    if (v117 >= 1)
    {
      v10 = &v8[(unint64_t)v117 >> 10];
LABEL_156:
      v120 = *v10 + 4 * (v117 & 0x3FF);
      goto LABEL_161;
    }
    v123 = 1023 - v117;
    v122 = ~(_WORD)v123;
    v10 = &v8[-(v123 >> 10)];
  }
  v120 = *v10 + 4 * (v122 & 0x3FF);
LABEL_161:
  if (v120 == v9)
  {
    v118 = v116;
    v119 = v115;
  }
  else
  {
    v124 = v10;
    v125 = v120;
    v119 = v115;
    v118 = v116;
    do
    {
      if (v118 == *v119)
      {
        v126 = *--v119;
        v118 = v126 + 4096;
      }
      if (v125 == *v124)
      {
        v127 = *--v124;
        v125 = v127 + 4096;
      }
      v128 = *(_DWORD *)(v125 - 4);
      v125 -= 4;
      *(_DWORD *)(v118 - 4) = v128;
      v118 -= 4;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1D513B290);
    }
    while (v125 != v9);
  }
  v12 = v20;
  if (v20)
  {
LABEL_171:
    v155 = (int *)v120;
    v129 = v12;
    v130 = v20;
    v131 = (char **)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v115, v116, v12);
    v133 = v130;
    v134 = v131;
    v135 = v132;
    if ((char *)v116 != v132)
    {
      v136 = v131;
      v137 = v132;
      do
      {
        if (v118 == *v119)
        {
          v138 = *--v119;
          v118 = v138 + 4096;
        }
        if (v137 == *v136)
        {
          v139 = (uint64_t)*--v136;
          v137 = (char *)(v139 + 4096);
        }
        v140 = *((_DWORD *)v137 - 1);
        v137 -= 4;
        *(_DWORD *)(v118 - 4) = v140;
        v118 -= 4;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1D513B290);
      }
      while (v137 != (char *)v116);
    }
    if (v129 < v133)
    {
      v141 = (char **)std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](v115, v116, v133);
      v158.i64[0] = (uint64_t)v115;
      v158.i64[1] = v116;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>>>(v134, v135, v141, v142, (char **)&v158);
      v116 = v158.i64[1];
      v115 = (_QWORD *)v158.i64[0];
    }
    v143 = v155;
    if (v10 == v8)
    {
      v150 = a7;
      v147 = (int *)v115;
      v148 = (int *)v116;
    }
    else
    {
      v145 = *v10;
      v144 = (int **)(v10 + 1);
      v146 = (int *)(v145 + 4096);
      v147 = (int *)v115;
      v148 = (int *)v116;
      while (1)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>((int **)&v158, v143, v146, v147, v148);
        v147 = (int *)v158.i64[1];
        v148 = (int *)v159;
        if (v144 == (int **)v8)
          break;
        v149 = *v144++;
        v143 = v149;
        v146 = v149 + 1024;
      }
      v143 = (int *)*v8;
      v150 = a7;
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>((int **)&v158, v143, v150, v147, v148);
  }
}

void sub_1D50BFCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

void nms::PyramidNMS<unsigned short,double,unsigned char>::computeConstitutedIndices(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 **v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 v32;
  __int16 v33;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v5 = a2[121];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 40);
    v33 = 0;
    v31 = v6;
    if (v6)
    {
      v10 = 0;
      v11 = 0;
      v29 = a4;
      v30 = a3;
      do
      {
        v12 = *(_QWORD *)(a2[104] + 8 * ((a2[107] + v30) / 0x55uLL)) + 48 * ((a2[107] + v30) % 0x55uLL);
        v13 = *(_QWORD *)(v12 + 32) + v11;
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * (v13 / 0x55));
        if (*(_QWORD *)(v14 + 48 * (v13 % 0x55) + 40))
        {
          v15 = v14 + 48 * (v13 % 0x55);
          v16 = *(_QWORD *)(v15 + 32) + v29;
          v17 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * (v16 / 0x55));
          v18 = v16 % 0x55;
          v19 = *(_QWORD *)(v17 + 48 * (v16 % 0x55) + 40);
          if (v19)
          {
            v20 = v17 + 48 * v18;
            v21 = *(_QWORD *)(v20 + 8);
            if (*(_QWORD *)(v20 + 16) != v21)
            {
              v22 = *(_QWORD *)(v17 + 48 * v18 + 32);
              v23 = (unsigned __int16 **)(v21 + 8 * (v22 >> 11));
              v24 = *v23;
              v25 = &(*v23)[v22 & 0x7FF];
              v26 = *(_QWORD *)(v21 + (((v22 + v19) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v22 + v19) & 0x7FF);
              while (v25 != (unsigned __int16 *)v26)
              {
                v32 = 0;
                v27 = *v25;
                v32 = *v25;
                if (!a5[5]
                  || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a5[1]
                                                       + (((a5[4] + (unint64_t)v10) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (*((_BYTE *)a5 + 32) + v10))
                               + v27))
                {
                  std::deque<std::pair<unsigned short,unsigned short>>::emplace_back<unsigned short &,unsigned short &>((_QWORD *)a1, &v33, &v32);
                  v24 = *v23;
                }
                if ((char *)++v25 - (char *)v24 == 4096)
                {
                  v28 = v23[1];
                  ++v23;
                  v24 = v28;
                  v25 = v28;
                }
              }
            }
          }
        }
        v33 = ++v10;
        v11 = v10;
      }
      while (v31 > v10);
    }
  }
}

void sub_1D50BFF34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned short,unsigned short>>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *j;
  char *v57;
  __int128 v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x3FF) != 0)
    v6 = (v5 >> 10) + 1;
  else
    v6 = v5 >> 10;
  v7 = a1[4];
  if (v6 >= v7 >> 10)
    v8 = v7 >> 10;
  else
    v8 = v6;
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(_QWORD *)&v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(a1, &v85);
          --v6;
          if (!--v9)
            goto LABEL_73;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v85 = operator new(0x1000uLL);
          std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8)
            v60 = 1023;
          else
            v60 = 1024;
          v61 = v60 + a1[4];
          a1[4] = v61;
        }
        v8 = v6;
      }
      else
      {
LABEL_73:
        v61 = a1[4];
      }
      a1[4] = v61 - (v8 << 10);
      if (v8)
      {
        v62 = (char *)a1[2];
        do
        {
          v63 = (_QWORD *)a1[1];
          v66 = *v63;
          v64 = (char *)(v63 + 1);
          v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1)
                v74 = 1;
              else
                v74 = (uint64_t)&v62[-*a1] >> 2;
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v74);
              v77 = &v75[8 * (v74 >> 2)];
              v78 = (uint64_t *)a1[1];
              v62 = v77;
              v79 = a1[2] - (_QWORD)v78;
              if (v79)
              {
                v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                v80 = 8 * (v79 >> 3);
                v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  v82 = *v78++;
                  *(_QWORD *)v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                v62 = (char *)a1[2];
              }
            }
            else
            {
              v68 = v67 >> 3;
              v22 = v67 >> 3 < -1;
              v69 = (v67 >> 3) + 2;
              if (v22)
                v70 = v69;
              else
                v70 = v68 + 1;
              v71 = &v64[-8 * (v70 >> 1)];
              v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                v62 = (char *)a1[1];
              }
              v73 = &v62[-8 * (v70 >> 1)];
              v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(_QWORD *)v62 = v65;
          v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = (char *)(v9 + v11);
      else
        v13 = (char *)v12;
      v14 = v11 - v8;
      v87 = a1 + 3;
      if (v13)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>((unint64_t)v13);
      else
        v15 = 0;
      v38 = v8 << 10;
      *(_QWORD *)&v85 = v13;
      *((_QWORD *)&v85 + 1) = &v13[8 * v14];
      *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
      *((_QWORD *)&v86 + 1) = &v13[8 * v15];
      do
      {
        v84 = operator new(0x1000uLL);
        std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            v41 = (char *)*((_QWORD *)&v85 + 1);
            v42 = (void *)v85;
            if (*((_QWORD *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85)
                v48 = 1;
              else
                v48 = (uint64_t)&v40[-v85] >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v48);
              v52 = v40 - v41;
              v51 = v40 == v41;
              v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *(_QWORD *)v41;
                  v41 += 8;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(_QWORD *)&v85 = v49;
              *((_QWORD *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v86 = v40;
              *((_QWORD *)&v86 + 1) = &v49[8 * v50];
              if (v42)
                operator delete(v42);
            }
            else
            {
              v43 = (uint64_t)(*((_QWORD *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1)
                v44 = v43 + 1;
              else
                v44 = v43 + 2;
              v45 = *((_QWORD *)&v85 + 1) - 8 * (v44 >> 1);
              v46 = &v40[-*((_QWORD *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((_QWORD *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((_QWORD *)&v85 + 1)]);
                v40 = v41;
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v46[v45];
              *((_QWORD *)&v85 + 1) = v47;
              *(_QWORD *)&v86 = &v46[v45];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v86 + 8);
          *(_QWORD *)&v86 = v86 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (j = (_QWORD *)a1[2];
            j != (_QWORD *)a1[1];
            std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v85, j))
      {
        --j;
      }
      v57 = (char *)*a1;
      v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] -= v38;
      if (v57)
        operator delete(v57);
    }
  }
}

void sub_1D50C0410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 2);
    if (v3 < 1)
      result -= (unint64_t)(1023 - v3) >> 10;
    else
      result += (unint64_t)v3 >> 10;
  }
  return result;
}

void std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__less<void,void>>(char *a1, unint64_t *a2, char *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a4 == a2
    || (v4 = (((uint64_t)a4 - *(_QWORD *)a3) >> 3) + ((a3 - a1) << 6), v5 = (uint64_t)a2 - *(_QWORD *)a1, v4 == v5 >> 3))
  {
    v6 = 0;
  }
  else
  {
    v6 = 63 - __clz(v4 - (v5 >> 3));
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,false>(a1, a2, a3, a4, 2 * v6);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,false>(char *a1, unint64_t *a2, char *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t *v6;
  unint64_t *v8;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t *v28;
  char v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t *v55;
  _QWORD *v56;
  unint64_t *v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  BOOL v83;
  unint64_t *v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t *v108;
  char *v109;
  unint64_t *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t *v136;
  unint64_t v137;
  char *i;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  unint64_t *v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t *v187;
  uint64_t v188;
  unint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char *v204;
  unint64_t *v205;
  char *v206;
  unint64_t *v207;
  unint64_t v208;
  char *v209;
  unint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  char *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t *v220;
  uint64_t v221;
  __int16 v222;
  char *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t *v230;
  unint64_t *v231;
  unint64_t v232;
  char *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  unint64_t *v240;

  if (a2 == a4)
    return;
  v6 = a4;
  v8 = a2;
  v10 = a2;
  while (2)
  {
    v11 = *(unint64_t **)a3;
    v240 = v6;
    v12 = (uint64_t)v6 - *(_QWORD *)a3;
    v13 = v12 >> 3;
    v14 = (v12 >> 3) + ((a3 - a1) << 6);
    v15 = *(char **)a1;
    v16 = v14 - (((uint64_t)v8 - *(_QWORD *)a1) >> 3);
    v120 = (uint64_t)v240;
    switch(v16)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (v240 == v11)
          v120 = *((_QWORD *)a3 - 1) + 4096;
        v121 = *(_QWORD *)(v120 - 8);
        if (v121 < *v8)
        {
          v122 = *v10;
          *v10 = v121;
          *(_QWORD *)(v120 - 8) = v122;
        }
        return;
      case 3uLL:
        v123 = (char *)v10 - v15;
        v124 = ((char *)v10 - v15) >> 3;
        if (v123 < -7)
        {
          v202 = 510 - v124;
          v126 = &a1[-8 * (v202 >> 9)];
          v127 = (unint64_t *)(*(_QWORD *)v126 + 8 * (~(_WORD)v202 & 0x1FF));
        }
        else
        {
          v125 = v124 + 1;
          v126 = &a1[8 * (v125 >> 9)];
          v127 = (unint64_t *)(*(_QWORD *)v126 + 8 * (v125 & 0x1FF));
        }
        if (v240 == v11)
        {
          v203 = *((_QWORD *)a3 - 1);
          a3 -= 8;
          v120 = v203 + 4096;
        }
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v10, (uint64_t)v126, v127, (uint64_t)a3, (unint64_t *)(v120 - 8));
        return;
      case 4uLL:
        v128 = (char *)v10 - v15;
        v129 = ((char *)v10 - v15) >> 3;
        if (v128 >= -7)
        {
          v130 = &a1[8 * ((unint64_t)(v129 + 1) >> 9)];
          v131 = (unint64_t *)(*(_QWORD *)v130 + 8 * ((v129 + 1) & 0x1FF));
          v132 = v129 + 2;
LABEL_229:
          v204 = &a1[8 * (v132 >> 9)];
          v205 = (unint64_t *)(*(_QWORD *)v204 + 8 * (v132 & 0x1FF));
          goto LABEL_244;
        }
        v130 = &a1[-8 * ((unint64_t)(510 - v129) >> 9)];
        v131 = (unint64_t *)(*(_QWORD *)v130 + 8 * (~(510 - (_WORD)v129) & 0x1FF));
        if ((unint64_t)v128 >= 0xFFFFFFFFFFFFFFF1)
        {
          v132 = 1;
          goto LABEL_229;
        }
        v216 = 509 - v129;
        v204 = &a1[-8 * (v216 >> 9)];
        v205 = (unint64_t *)(*(_QWORD *)v204 + 8 * (~(_WORD)v216 & 0x1FF));
LABEL_244:
        if (v240 == v11)
        {
          v217 = *((_QWORD *)a3 - 1);
          a3 -= 8;
          v120 = v217 + 4096;
        }
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v10, (uint64_t)v130, v131, (uint64_t)v204, v205, (uint64_t)a3, (unint64_t *)(v120 - 8));
        return;
      case 5uLL:
        v133 = (char *)v10 - v15;
        v134 = ((char *)v10 - v15) >> 3;
        if (v133 >= -7)
        {
          v135 = &a1[8 * ((unint64_t)(v134 + 1) >> 9)];
          v136 = (unint64_t *)(*(_QWORD *)v135 + 8 * ((v134 + 1) & 0x1FF));
          v137 = v134 + 2;
LABEL_232:
          v206 = &a1[8 * (v137 >> 9)];
          v207 = (unint64_t *)(*(_QWORD *)v206 + 8 * (v137 & 0x1FF));
          v208 = v134 + 3;
LABEL_233:
          v209 = &a1[8 * (v208 >> 9)];
          v210 = (unint64_t *)(*(_QWORD *)v209 + 8 * (v208 & 0x1FF));
          goto LABEL_234;
        }
        v135 = &a1[-8 * ((unint64_t)(510 - v134) >> 9)];
        v136 = (unint64_t *)(*(_QWORD *)v135 + 8 * (~(510 - (_WORD)v134) & 0x1FF));
        if ((unint64_t)v133 >= 0xFFFFFFFFFFFFFFF1)
        {
          v137 = 1;
          goto LABEL_232;
        }
        v206 = &a1[-8 * ((unint64_t)(509 - v134) >> 9)];
        v207 = (unint64_t *)(*(_QWORD *)v206 + 8 * (~(509 - (_WORD)v134) & 0x1FF));
        if ((unint64_t)v133 >= 0xFFFFFFFFFFFFFFE9)
        {
          v208 = 1;
          goto LABEL_233;
        }
        v234 = 508 - v134;
        v209 = &a1[-8 * (v234 >> 9)];
        v210 = (unint64_t *)(*(_QWORD *)v209 + 8 * (~(_WORD)v234 & 0x1FF));
LABEL_234:
        if (v240 == v11)
        {
          v211 = *((_QWORD *)a3 - 1);
          a3 -= 8;
          v120 = v211 + 4096;
        }
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v10, (uint64_t)v135, v136, (uint64_t)v206, v207, (uint64_t)v209, v210, (uint64_t)a3, (unint64_t *)(v120 - 8));
        return;
      default:
        if ((uint64_t)v16 > 23)
        {
          if (a5)
          {
            v17 = v16 >> 1;
            v18 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v8, v16 >> 1);
            if (v16 < 0x81)
            {
              if (v12 < 9)
              {
                v22 = &a3[-8 * ((unint64_t)(512 - v13) >> 9)];
                v23 = (unint64_t *)(*(_QWORD *)v22 + 8 * (~(512 - (_WORD)v13) & 0x1FF));
              }
              else
              {
                v22 = &a3[8 * ((unint64_t)(v13 - 1) >> 9)];
                v23 = (unint64_t *)(*(_QWORD *)v22 + 8 * ((v13 - 1) & 0x1FF));
              }
              v29 = (char)v240;
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v18, v19, (uint64_t)a1, v8, (uint64_t)v22, v23);
              v6 = v240;
            }
            else
            {
              if (v12 < 9)
              {
                v20 = &a3[-8 * ((unint64_t)(512 - v13) >> 9)];
                v21 = (unint64_t *)(*(_QWORD *)v20 + 8 * (~(512 - (_WORD)v13) & 0x1FF));
              }
              else
              {
                v20 = &a3[8 * ((unint64_t)(v13 - 1) >> 9)];
                v21 = (unint64_t *)(*(_QWORD *)v20 + 8 * ((v13 - 1) & 0x1FF));
              }
              v235 = a5;
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, v10, (uint64_t)v18, v19, (uint64_t)v20, v21);
              v24 = (uint64_t)v8 - *(_QWORD *)a1;
              v25 = v24 >> 3;
              v6 = v240;
              if (v24 < -7)
              {
                v30 = 510 - v25;
                v27 = &a1[-8 * (v30 >> 9)];
                v28 = (unint64_t *)(*(_QWORD *)v27 + 8 * (~(_WORD)v30 & 0x1FF));
              }
              else
              {
                v26 = v25 + 1;
                v27 = &a1[8 * (v26 >> 9)];
                v28 = (unint64_t *)(*(_QWORD *)v27 + 8 * (v26 & 0x1FF));
              }
              v32 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v8, v17 - 1);
              v33 = (uint64_t)v240 - *(_QWORD *)a3;
              v34 = v33 >> 3;
              if (v33 < 17)
              {
                v38 = 513 - v34;
                v36 = &a3[-8 * (v38 >> 9)];
                v37 = (unint64_t *)(*(_QWORD *)v36 + 8 * (~(_WORD)v38 & 0x1FF));
              }
              else
              {
                v35 = v34 - 2;
                v36 = &a3[8 * (v35 >> 9)];
                v37 = (unint64_t *)(*(_QWORD *)v36 + 8 * (v35 & 0x1FF));
              }
              v237 = a3;
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v27, v28, (uint64_t)v32, v31, (uint64_t)v36, v37);
              v39 = (uint64_t)v8 - *(_QWORD *)a1;
              v40 = v39 >> 3;
              if (v39 < -15)
              {
                v44 = 509 - v40;
                v42 = &a1[-8 * (v44 >> 9)];
                v43 = (unint64_t *)(*(_QWORD *)v42 + 8 * (~(_WORD)v44 & 0x1FF));
              }
              else
              {
                v41 = v40 + 2;
                v42 = &a1[8 * (v41 >> 9)];
                v43 = (unint64_t *)(*(_QWORD *)v42 + 8 * (v41 & 0x1FF));
              }
              v46 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v8, v17 + 1);
              v47 = (uint64_t)v240 - *(_QWORD *)v237;
              v48 = v47 >> 3;
              if (v47 < 25)
              {
                v52 = 514 - v48;
                v50 = &v237[-8 * (v52 >> 9)];
                v51 = (unint64_t *)(*(_QWORD *)v50 + 8 * (~(_WORD)v52 & 0x1FF));
              }
              else
              {
                v49 = v48 - 3;
                v50 = &v237[8 * (v49 >> 9)];
                v51 = (unint64_t *)(*(_QWORD *)v50 + 8 * (v49 & 0x1FF));
              }
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v42, v43, (uint64_t)v46, v45, (uint64_t)v50, v51);
              v53 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v8, v17 - 1);
              v55 = v54;
              v56 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v8, v17);
              v58 = v57;
              v59 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v8, v17 + 1);
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)v53, v55, (uint64_t)v56, v58, (uint64_t)v59, v60);
              std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v8, v17);
              v61 = *v8;
              *v8 = *v62;
              *v62 = v61;
              a5 = v235;
              a3 = v237;
              v29 = (char)v240;
            }
            --a5;
            if ((v29 & 1) != 0)
            {
              v63 = *v8;
              v64 = *(char **)a1;
            }
            else
            {
              v64 = *(char **)a1;
              v65 = (uint64_t)v8 - *(_QWORD *)a1;
              v66 = v65 >> 3;
              if (v65 < 9)
                v67 = (unint64_t *)(*(_QWORD *)&a1[-8 * ((unint64_t)(512 - v66) >> 9)]
                                         + 8 * (~(512 - (_WORD)v66) & 0x1FF));
              else
                v67 = (unint64_t *)(*(_QWORD *)&a1[((unint64_t)(v66 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                                         + 8 * ((v66 - 1) & 0x1FF));
              v68 = *v67;
              v63 = *v8;
              if (v68 >= *v8)
              {
                v101 = *(unint64_t **)a3;
                v102 = (uint64_t)v6 - *(_QWORD *)a3;
                v103 = v102 >> 3;
                if (v102 < 9)
                  v104 = (unint64_t *)(*(_QWORD *)&a3[-8 * ((unint64_t)(512 - v103) >> 9)]
                                            + 8 * (~(512 - (_WORD)v103) & 0x1FF));
                else
                  v104 = (unint64_t *)(*(_QWORD *)&a3[((unint64_t)(v103 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                                            + 8 * ((v103 - 1) & 0x1FF));
                v10 = v8;
                if (v63 >= *v104)
                {
                  do
                  {
                    if ((char *)++v10 - v64 == 4096)
                    {
                      v108 = (unint64_t *)*((_QWORD *)a1 + 1);
                      a1 += 8;
                      v64 = (char *)v108;
                      v10 = v108;
                    }
                  }
                  while ((a1 < a3 || a1 == a3 && v10 < v6) && v63 >= *v10);
                }
                else
                {
                  do
                  {
                    if ((char *)++v10 - v64 == 4096)
                    {
                      v107 = (unint64_t *)*((_QWORD *)a1 + 1);
                      a1 += 8;
                      v64 = (char *)v107;
                      v10 = v107;
                    }
                  }
                  while (v63 >= *v10);
                }
                if (a1 < a3 || a1 == a3 && v10 < v6)
                {
                  v109 = a3;
                  v110 = v6;
                  do
                  {
                    if (v110 == v101)
                    {
                      v111 = (unint64_t *)*((_QWORD *)v109 - 1);
                      v109 -= 8;
                      v101 = v111;
                      v110 = v111 + 512;
                    }
                    v112 = *--v110;
                  }
                  while (v63 < v112);
                }
                else
                {
                  v109 = a3;
                  v110 = v6;
                }
                while (a1 < v109 || a1 == v109 && v10 < v110)
                {
                  v113 = *v10;
                  *v10 = *v110;
                  *v110 = v113;
                  do
                  {
                    if ((char *)++v10 - v64 == 4096)
                    {
                      v114 = (unint64_t *)*((_QWORD *)a1 + 1);
                      a1 += 8;
                      v64 = (char *)v114;
                      v10 = v114;
                    }
                  }
                  while (v63 >= *v10);
                  do
                  {
                    if (v110 == v101)
                    {
                      v115 = (unint64_t *)*((_QWORD *)v109 - 1);
                      v109 -= 8;
                      v101 = v115;
                      v110 = v115 + 512;
                    }
                    v116 = *--v110;
                  }
                  while (v63 < v116);
                }
                v117 = (char *)v10 - v64;
                v118 = ((char *)v10 - v64) >> 3;
                if (v117 < 9)
                  v119 = (unint64_t *)(*(_QWORD *)&a1[-8 * ((unint64_t)(512 - v118) >> 9)]
                                            + 8 * (~(512 - (_WORD)v118) & 0x1FF));
                else
                  v119 = (unint64_t *)(*(_QWORD *)&a1[((unint64_t)(v118 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                                            + 8 * ((v118 - 1) & 0x1FF));
                if (v119 != v8)
                  *v8 = *v119;
                *v119 = v63;
LABEL_129:
                v8 = v10;
                if (v6 != v10)
                  continue;
                return;
              }
            }
            v69 = a1;
            v70 = v8;
            do
            {
              if ((char *)++v70 - v64 == 4096)
              {
                v71 = (unint64_t *)*((_QWORD *)v69 + 1);
                v69 += 8;
                v64 = (char *)v71;
                v70 = v71;
              }
              v72 = *v70;
            }
            while (*v70 < v63);
            v73 = ((char *)v70 - v64) >> 3;
            if ((char *)v70 - v64 < 9)
              v74 = *(_QWORD *)&v69[-8 * ((unint64_t)(512 - v73) >> 9)] + 8 * (~(512 - (_WORD)v73) & 0x1FF);
            else
              v74 = *(_QWORD *)&v69[((unint64_t)(v73 - 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v73 - 1) & 0x1FF);
            v75 = a3;
            v76 = v6;
            if ((unint64_t *)v74 == v8)
            {
              do
              {
                if (v69 >= v75 && (v69 != v75 || v70 >= v76))
                  break;
                if (v76 == *(unint64_t **)v75)
                {
                  v80 = *((_QWORD *)v75 - 1);
                  v75 -= 8;
                  v76 = (unint64_t *)(v80 + 4096);
                }
                v81 = *--v76;
              }
              while (v81 >= v63);
            }
            else
            {
              v77 = *(unint64_t **)a3;
              v75 = a3;
              v76 = v6;
              do
              {
                if (v76 == v77)
                {
                  v78 = (unint64_t *)*((_QWORD *)v75 - 1);
                  v75 -= 8;
                  v77 = v78;
                  v76 = v78 + 512;
                }
                v79 = *--v76;
              }
              while (v79 >= v63);
            }
            v83 = v69 != v75 || v70 >= v76;
            if (v69 < v75)
              v83 = 0;
            while (v69 < v75 || v69 == v75 && v70 < v76)
            {
              *v70 = *v76;
              *v76 = v72;
              do
              {
                if ((char *)++v70 - v64 == 4096)
                {
                  v84 = (unint64_t *)*((_QWORD *)v69 + 1);
                  v69 += 8;
                  v64 = (char *)v84;
                  v70 = v84;
                }
                v72 = *v70;
              }
              while (*v70 < v63);
              v85 = *(unint64_t **)v75;
              do
              {
                if (v76 == v85)
                {
                  v86 = (unint64_t *)*((_QWORD *)v75 - 1);
                  v75 -= 8;
                  v85 = v86;
                  v76 = v86 + 512;
                }
                v87 = *--v76;
              }
              while (v87 >= v63);
            }
            v88 = a5;
            v89 = (char *)v70 - v64;
            v90 = v89 >> 3;
            if (v89 < 9)
            {
              v94 = 512 - v90;
              v92 = &v69[-8 * (v94 >> 9)];
              v93 = (unint64_t *)(*(_QWORD *)v92 + 8 * (~(_WORD)v94 & 0x1FF));
            }
            else
            {
              v91 = v90 - 1;
              v92 = &v69[8 * (v91 >> 9)];
              v93 = (unint64_t *)(*(_QWORD *)v92 + 8 * (v91 & 0x1FF));
            }
            if (v93 != v8)
              *v8 = *v93;
            *v93 = v63;
            if (!v83)
              goto LABEL_89;
            v95 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(a1, v8, v92, v93);
            v96 = (uint64_t)v93 - *(_QWORD *)v92;
            v97 = v96 >> 3;
            if (v96 < -7)
            {
              v105 = 510 - v97;
              v99 = &v92[-8 * (v105 >> 9)];
              v100 = (unint64_t *)(*(_QWORD *)v99 + 8 * (~(_WORD)v105 & 0x1FF));
            }
            else
            {
              v98 = v97 + 1;
              v99 = &v92[8 * (v98 >> 9)];
              v100 = (unint64_t *)(*(_QWORD *)v99 + 8 * (v98 & 0x1FF));
            }
            if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(v99, v100, a3, v6))
            {
              v10 = v8;
              v6 = v93;
              a3 = v92;
              a5 = v88;
              if ((v95 & 1) != 0)
                return;
              goto LABEL_129;
            }
            if (v95)
            {
              v10 = v93 + 1;
              if ((unint64_t *)((char *)v93 - *(_QWORD *)v92 + 8) != (unint64_t *)4096)
                goto LABEL_91;
            }
            else
            {
LABEL_89:
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,false>(a1, v8, v92, v93, v88, v29 & 1);
              v10 = v93 + 1;
              if ((unint64_t *)((char *)v93 - *(_QWORD *)v92 + 8) != (unint64_t *)4096)
              {
LABEL_91:
                a1 = v92;
                a5 = v88;
                goto LABEL_129;
              }
            }
            v106 = (unint64_t *)*((_QWORD *)v92 + 1);
            v92 += 8;
            v10 = v106;
            goto LABEL_91;
          }
          if (v240 == v10)
            return;
          v150 = (char *)v10 - v15;
          v151 = v14 - (v150 >> 3);
          v152 = v151 - 2;
          if (v151 < 2)
            return;
          v236 = v150 >> 3;
          v238 = a3;
          v153 = v152 >> 1;
          v154 = v152 >> 1;
          while (1)
          {
            v155 = v154;
            v156 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v10, v154);
            v158 = v157;
            if (v10 == v157)
              break;
            v159 = ((v156 - a1) << 6) - v236 + (((uint64_t)v157 - *(_QWORD *)v156) >> 3);
            if (v153 >= v159)
              goto LABEL_167;
LABEL_187:
            v154 = v155 - 1;
            if (!v155)
            {
              v174 = v238;
              v175 = (uint64_t)v240;
              do
              {
                v239 = v174;
                v176 = 0;
                v177 = *v10;
                v178 = v10;
                v179 = a1;
                do
                {
                  v180 = v178;
                  if (v176 != -1)
                  {
                    v181 = v176 + 1 + (((uint64_t)v178 - *(_QWORD *)v179) >> 3);
                    if (v181 < 1)
                    {
                      v182 = 511 - v181;
                      v179 -= 8 * (v182 >> 9);
                      v178 = (unint64_t *)(*(_QWORD *)v179 + 8 * (~(_WORD)v182 & 0x1FF));
                    }
                    else
                    {
                      v179 += 8 * ((unint64_t)v181 >> 9);
                      v178 = (unint64_t *)(*(_QWORD *)v179 + 8 * (v181 & 0x1FF));
                    }
                  }
                  v183 = (2 * v176) | 1;
                  v176 = 2 * v176 + 2;
                  if (v176 >= v151
                    || ((v184 = (uint64_t)v178 - *(_QWORD *)v179, v185 = v184 >> 3, v184 < -7)
                      ? (v186 = (unint64_t *)(*(_QWORD *)&v179[-8 * ((unint64_t)(510 - v185) >> 9)]
                                                   + 8 * (~(510 - (_WORD)v185) & 0x1FF)))
                      : (v186 = (unint64_t *)(*(_QWORD *)&v179[((unint64_t)(v185 + 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                                                   + 8 * ((v185 + 1) & 0x1FF))),
                        *v178 >= *v186))
                  {
                    v176 = v183;
                  }
                  else if ((unint64_t *)((char *)++v178 - *(_QWORD *)v179) == (unint64_t *)4096)
                  {
                    v187 = (unint64_t *)*((_QWORD *)v179 + 1);
                    v179 += 8;
                    v178 = v187;
                  }
                  *v180 = *v178;
                }
                while (v176 <= (uint64_t)((unint64_t)(v151 - 2) >> 1));
                v188 = v175;
                if (v11 == (unint64_t *)v175)
                  v188 = *((_QWORD *)v239 - 1) + 4096;
                v189 = (unint64_t *)(v188 - 8);
                if (v189 == v178)
                {
                  *v178 = v177;
                }
                else
                {
                  *v178 = *v189;
                  v190 = (uint64_t)(v178 + 1);
                  v191 = *(_QWORD *)v179;
                  if (v190 - *(_QWORD *)v179 == 4096)
                  {
                    v192 = *((_QWORD *)v179 + 1);
                    v179 += 8;
                    v190 = v192;
                    v191 = v192;
                  }
                  *v189 = v177;
                  if ((unint64_t *)v190 != v10)
                  {
                    v193 = ((v190 - v191) >> 3) - v236 + ((v179 - a1) << 6);
                    v194 = v193 < 2;
                    v195 = v193 - 2;
                    if (!v194)
                    {
                      v196 = v195 >> 1;
                      std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v10, v195 >> 1);
                      if (v191 == v190)
                        v190 = *((_QWORD *)v179 - 1) + 4096;
                      v200 = *(_QWORD *)(v190 - 8);
                      v199 = (unint64_t *)(v190 - 8);
                      v198 = v200;
                      v201 = *v197;
                      if (*v197 < v200)
                      {
                        do
                        {
                          *v199 = v201;
                          v199 = v197;
                          if (!v196)
                            break;
                          v196 = (unint64_t)(v196 - 1) >> 1;
                          std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v10, v196);
                          v201 = *v197;
                        }
                        while (*v197 < v198);
                        *v199 = v198;
                      }
                    }
                  }
                }
                if (v11 == (unint64_t *)v175)
                {
                  v174 = v239 - 8;
                  v11 = (unint64_t *)*((_QWORD *)v239 - 1);
                  v175 = (uint64_t)(v11 + 512);
                }
                else
                {
                  v174 = v239;
                }
                v175 -= 8;
                v194 = v151-- <= 2;
              }
              while (!v194);
              return;
            }
          }
          v159 = 0;
LABEL_167:
          v160 = 2 * v159;
          v161 = (2 * v159) | 1;
          v162 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v10, v161);
          if (v160 + 2 < v151)
          {
            v164 = (uint64_t)v163 - *v162;
            v165 = v164 >> 3;
            v166 = (unint64_t *)(v164 < -7
                                      ? v162[-((unint64_t)(510 - v165) >> 9)]
                                      + 8 * (~(510 - (_WORD)v165) & 0x1FF)
                                      : *(_QWORD *)((char *)v162
                                                  + (((unint64_t)(v165 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v165 + 1) & 0x1FF));
            if (*v163 < *v166)
            {
              if ((unint64_t *)((char *)++v163 - *v162) == (unint64_t *)4096)
                v163 = (unint64_t *)v162[1];
              v161 = v160 + 2;
            }
          }
          v167 = *v163;
          v168 = *v158;
          if (*v163 >= *v158)
          {
            do
            {
              *v158 = v167;
              v158 = v163;
              if (v153 < v161)
                break;
              v169 = 2 * v161;
              v161 = (2 * v161) | 1;
              v170 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](a1, (uint64_t)v10, v161);
              if (v169 + 2 < v151)
              {
                v171 = (uint64_t)v163 - *v170;
                v172 = v171 >> 3;
                v173 = (unint64_t *)(v171 < -7
                                          ? v170[-((unint64_t)(510 - v172) >> 9)]
                                          + 8 * (~(510 - (_WORD)v172) & 0x1FF)
                                          : *(_QWORD *)((char *)v170
                                                      + (((unint64_t)(v172 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * ((v172 + 1) & 0x1FF));
                if (*v163 < *v173)
                {
                  if ((unint64_t *)((char *)++v163 - *v170) == (unint64_t *)4096)
                    v163 = (unint64_t *)v170[1];
                  v161 = v169 + 2;
                }
              }
              v167 = *v163;
            }
            while (*v163 >= v168);
            *v158 = v168;
          }
          goto LABEL_187;
        }
        if ((v240 & 1) != 0)
        {
          if (v240 == v10)
            return;
          for (i = (char *)(v10 + 1); ; i += 8)
          {
            if (i - v15 == 4096)
            {
              v139 = (char *)*((_QWORD *)a1 + 1);
              a1 += 8;
              v15 = v139;
              i = v139;
            }
            if (i == (char *)v240)
              break;
            v140 = a1;
            v141 = (uint64_t)i;
            if (i == v15)
            {
              v140 = a1 - 8;
              v141 = *((_QWORD *)a1 - 1) + 4096;
            }
            v144 = *(_QWORD *)(v141 - 8);
            v142 = (unint64_t *)(v141 - 8);
            v143 = v144;
            v145 = *(_QWORD *)i;
            if (*(_QWORD *)i < v144)
            {
              v146 = (unint64_t *)i;
              while (1)
              {
                *v146 = v143;
                if (v142 == v10)
                  break;
                v147 = v142;
                if (v142 == *(unint64_t **)v140)
                {
                  v148 = *((_QWORD *)v140 - 1);
                  v140 -= 8;
                  v142 = (unint64_t *)(v148 + 4096);
                }
                v149 = *--v142;
                v143 = v149;
                v146 = v147;
                if (v145 >= v149)
                  goto LABEL_158;
              }
              v147 = v10;
LABEL_158:
              *v147 = v145;
            }
          }
        }
        else if (v240 != v10)
        {
          v212 = (char *)v10 - v15;
          v213 = ((char *)v10 - v15) >> 3;
          if (v212 < -7)
          {
            v218 = 510 - v213;
            v214 = ~(_WORD)v218;
            v215 = &a1[-8 * (v218 >> 9)];
          }
          else
          {
            v214 = v213 + 1;
            v215 = &a1[8 * ((unint64_t)(v213 + 1) >> 9)];
          }
          v219 = *(char **)v215;
          v220 = (unint64_t *)(*(_QWORD *)v215 + 8 * (v214 & 0x1FF));
          while (v220 != v240)
          {
            v221 = ((char *)v220 - v219) >> 3;
            if ((char *)v220 - v219 < 9)
            {
              v224 = 512 - v221;
              v222 = ~(_WORD)v224;
              v223 = &v215[-8 * (v224 >> 9)];
            }
            else
            {
              v222 = v221 - 1;
              v223 = &v215[8 * ((unint64_t)(v221 - 1) >> 9)];
            }
            v225 = *(unint64_t **)v223;
            v226 = (unint64_t *)(*(_QWORD *)v223 + 8 * (v222 & 0x1FF));
            v227 = *v220;
            v228 = *v226;
            if (*v220 < *v226)
            {
              v229 = v220;
              do
              {
                v230 = v226;
                *v229 = v228;
                if (v226 == v225)
                {
                  v231 = (unint64_t *)*((_QWORD *)v223 - 1);
                  v223 -= 8;
                  v225 = v231;
                  v226 = v231 + 512;
                }
                v232 = *--v226;
                v228 = v232;
                v229 = v230;
              }
              while (v227 < v232);
              *v230 = v227;
            }
            if ((char *)++v220 - v219 == 4096)
            {
              v233 = (char *)*((_QWORD *)v215 + 1);
              v215 += 8;
              v219 = v233;
              v220 = (unint64_t *)v233;
            }
          }
        }
        return;
    }
  }
}

_QWORD *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 3);
    if (v3 < 1)
      result -= (unint64_t)(511 - v3) >> 9;
    else
      result += (unint64_t)v3 >> 9;
  }
  return result;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 >= *a2)
  {
    if (v8 < v6)
    {
      *a4 = v8;
      *a6 = v6;
      v9 = *a2;
      if (*a4 < *a2)
      {
        *a2 = *a4;
        *a4 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *a2 = v6;
      *a4 = v7;
      if (*a6 >= v7)
        return;
      *a4 = *a6;
    }
    else
    {
      *a2 = v8;
    }
    *a6 = v7;
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(char *a1, unint64_t *a2, char *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t **v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  uint64_t v33;
  char *v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t **v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  int v45;
  unint64_t *v46;
  unint64_t **v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v57;

  if (a4 == a2)
    return 1;
  v4 = (uint64_t)a4;
  v5 = (uint64_t)a3;
  v7 = *(unint64_t **)a3;
  v8 = (uint64_t)a2 - *(_QWORD *)a1;
  v9 = v8 >> 3;
  v10 = 1;
  switch((((uint64_t)a4 - *(_QWORD *)a3) >> 3) + ((a3 - a1) << 6) - (v8 >> 3))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4)
        v4 = *((_QWORD *)a3 - 1) + 4096;
      v11 = *(_QWORD *)(v4 - 8);
      v12 = *a2;
      if (v11 < *a2)
      {
        *a2 = v11;
        *(_QWORD *)(v4 - 8) = v12;
      }
      return 1;
    case 3:
      if (v8 < -7)
      {
        v17 = &a1[-8 * ((unint64_t)(510 - v9) >> 9)];
        v18 = (unint64_t *)(*(_QWORD *)v17 + 8 * (~(510 - (_WORD)v9) & 0x1FF));
      }
      else
      {
        v17 = &a1[8 * ((unint64_t)(v9 + 1) >> 9)];
        v18 = (unint64_t *)(*(_QWORD *)v17 + 8 * (((_WORD)v9 + 1) & 0x1FF));
      }
      if (v7 == (unint64_t *)v4)
      {
        v27 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v27 + 4096;
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v17, v18, v5, (unint64_t *)(v4 - 8));
      return 1;
    case 4:
      if (v8 >= -7)
      {
        v22 = &a1[8 * ((unint64_t)(v9 + 1) >> 9)];
        v23 = (unint64_t *)(*(_QWORD *)v22 + 8 * ((v9 + 1) & 0x1FF));
        v24 = v9 + 2;
LABEL_31:
        v34 = &a1[8 * (v24 >> 9)];
        v35 = (unint64_t *)(*(_QWORD *)v34 + 8 * (v24 & 0x1FF));
        goto LABEL_54;
      }
      v22 = &a1[-8 * ((unint64_t)(510 - v9) >> 9)];
      v23 = (unint64_t *)(*(_QWORD *)v22 + 8 * (~(510 - (_WORD)v9) & 0x1FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF1)
      {
        v24 = 1;
        goto LABEL_31;
      }
      v34 = &a1[-8 * ((unint64_t)(509 - v9) >> 9)];
      v35 = (unint64_t *)(*(_QWORD *)v34 + 8 * (~(509 - (_WORD)v9) & 0x1FF));
LABEL_54:
      if (v7 == (unint64_t *)v4)
      {
        v55 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v55 + 4096;
      }
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v22, v23, (uint64_t)v34, v35, v5, (unint64_t *)(v4 - 8));
      return 1;
    case 5:
      if (v8 >= -7)
      {
        v19 = &a1[8 * ((unint64_t)(v9 + 1) >> 9)];
        v20 = (unint64_t *)(*(_QWORD *)v19 + 8 * ((v9 + 1) & 0x1FF));
        v21 = v9 + 2;
LABEL_24:
        v28 = &a1[8 * (v21 >> 9)];
        v29 = (unint64_t *)(*(_QWORD *)v28 + 8 * (v21 & 0x1FF));
        v30 = v9 + 3;
LABEL_25:
        v31 = &a1[8 * (v30 >> 9)];
        v32 = (unint64_t *)(*(_QWORD *)v31 + 8 * (v30 & 0x1FF));
        goto LABEL_26;
      }
      v19 = &a1[-8 * ((unint64_t)(510 - v9) >> 9)];
      v20 = (unint64_t *)(*(_QWORD *)v19 + 8 * (~(510 - (_WORD)v9) & 0x1FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF1)
      {
        v21 = 1;
        goto LABEL_24;
      }
      v28 = &a1[-8 * ((unint64_t)(509 - v9) >> 9)];
      v29 = (unint64_t *)(*(_QWORD *)v28 + 8 * (~(509 - (_WORD)v9) & 0x1FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE9)
      {
        v30 = 1;
        goto LABEL_25;
      }
      v31 = &a1[-8 * ((unint64_t)(508 - v9) >> 9)];
      v32 = (unint64_t *)(*(_QWORD *)v31 + 8 * (~(508 - (_WORD)v9) & 0x1FF));
LABEL_26:
      if (v7 == (unint64_t *)v4)
      {
        v33 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v33 + 4096;
      }
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v19, v20, (uint64_t)v28, v29, (uint64_t)v31, v32, v5, (unint64_t *)(v4 - 8));
      return 1;
    default:
      if (v8 <= -16)
      {
        v13 = (unint64_t **)&a1[-8 * ((unint64_t)(509 - v9) >> 9)];
        v14 = &(*v13)[~(509 - (_WORD)v9) & 0x1FF];
        v16 = 510 - v9;
        goto LABEL_17;
      }
      v13 = (unint64_t **)&a1[8 * ((unint64_t)(v9 + 2) >> 9)];
      v14 = &(*v13)[(v9 + 2) & 0x1FF];
      v15 = v9 + 1;
      if (v9 == -1)
      {
        v16 = 511;
LABEL_17:
        v25 = &a1[-8 * (v16 >> 9)];
        v26 = (unint64_t *)(*(_QWORD *)v25 + 8 * (~(_WORD)v16 & 0x1FF));
        goto LABEL_33;
      }
      v25 = &a1[8 * (v15 >> 9)];
      v26 = (unint64_t *)(*(_QWORD *)v25 + 8 * (v15 & 0x1FF));
LABEL_33:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>((uint64_t)a1, a2, (uint64_t)v25, v26, (uint64_t)v13, v14);
      v36 = *v13;
      v37 = (char *)v14 - (char *)*v13;
      v38 = v37 >> 3;
      if (v37 < -7)
      {
        v43 = 510 - v38;
        v40 = &v13[-(v43 >> 9)];
        v41 = *v40;
        v42 = ~(_DWORD)v43 & 0x1FFLL;
      }
      else
      {
        v39 = v38 + 1;
        v40 = &v13[v39 >> 9];
        v41 = *v40;
        v42 = v39 & 0x1FF;
      }
      v44 = &v41[v42];
      if (v44 == (unint64_t *)v4)
        return 1;
      v45 = 0;
      while (1)
      {
        v46 = v44;
        v47 = v40;
        v48 = v41;
        v49 = *v44;
        v50 = *v14;
        if (v49 < *v14)
        {
          v51 = v46;
          while (1)
          {
            *v51 = v50;
            if (v14 == a2)
              break;
            v52 = v14;
            if (v14 == v36)
            {
              v53 = *--v13;
              v36 = v53;
              v14 = v53 + 512;
            }
            v54 = *--v14;
            v50 = v54;
            v51 = v52;
            if (v49 >= v54)
              goto LABEL_46;
          }
          v52 = a2;
LABEL_46:
          *v52 = v49;
          if (++v45 == 8)
            break;
        }
        v44 = v46 + 1;
        v41 = v48;
        v40 = v47;
        if ((char *)(v46 + 1) - (char *)v48 == 4096)
        {
          v40 = v47 + 1;
          v41 = v47[1];
          v44 = v41;
        }
        v36 = v48;
        v13 = v47;
        v14 = v46;
        if (v44 == (unint64_t *)v4)
          return 1;
      }
      v57 = v46 + 1;
      if ((char *)(v46 + 1) - (char *)v48 == 4096)
        v57 = v47[1];
      v10 = v57 == (unint64_t *)v4;
      break;
  }
  return v10;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(a1, a2, a3, a4, a5, a6);
  v12 = *a6;
  if (*a8 < *a6)
  {
    *a6 = *a8;
    *a8 = v12;
    v13 = *a4;
    if (*a6 < *a4)
    {
      *a4 = *a6;
      *a6 = v13;
      v14 = *a2;
      if (*a4 < *a2)
      {
        *a2 = *a4;
        *a4 = v14;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7, unint64_t *a8, uint64_t a9, unint64_t *a10)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v14;
    v15 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v15;
      v16 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v16;
        v17 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v17;
        }
      }
    }
  }
}

void std::deque<std::pair<unsigned short,unsigned short>>::erase(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char **v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char **v24;
  char *v25;
  int64x2_t v26;
  __n128 v27[2];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (char *)(v5 + 8 * (v4 >> 10));
  if (v6 == v5)
    v8 = 0;
  else
    v8 = *(_QWORD *)v7 + 4 * (*(_QWORD *)(a1 + 32) & 0x3FFLL);
  if (v8 == a3)
    v9 = 0;
  else
    v9 = ((a3 - *(_QWORD *)a2) >> 2) + ((a2 - v7) << 7) - ((v8 - *(_QWORD *)v7) >> 2);
  v10 = std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>::operator+[abi:ne180100]((_QWORD *)(v5 + 8 * (v4 >> 10)), v8, v9);
  v12 = (unint64_t)v10;
  v13 = v11;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = v11 - *v10;
  v16 = v15 >> 2;
  if (v9 <= (unint64_t)(v14 - 1) >> 1)
  {
    if (v15 < -3)
    {
      v20 = &v10[-((unint64_t)(1022 - v16) >> 10)];
      v21 = *v20 + 4 * (~(1022 - (_WORD)v16) & 0x3FF);
    }
    else
    {
      v20 = &v10[(unint64_t)(v16 + 1) >> 10];
      v21 = *v20 + 4 * (((_WORD)v16 + 1) & 0x3FF);
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>(v27, (uint64_t *)(v5 + 8 * (v4 >> 10)), v8, v10, v11, v20, v21);
    v26 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1D513B280);
    *(int64x2_t *)(a1 + 32) = v26;
    if (v26.i64[0] >= 0x800uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(_QWORD *)(a1 + 8) += 8;
      *(_QWORD *)(a1 + 32) -= 1024;
    }
  }
  else
  {
    if (v15 < -3)
    {
      v22 = 1022 - v16;
      v18 = (char **)&v10[-(v22 >> 10)];
      v19 = &(*v18)[4 * (~(_WORD)v22 & 0x3FF)];
    }
    else
    {
      v17 = v16 + 1;
      v18 = (char **)&v10[v17 >> 10];
      v19 = &(*v18)[4 * (v17 & 0x3FF)];
    }
    v23 = v14 + v4;
    v24 = (char **)(v5 + 8 * (v23 >> 10));
    if (v6 == v5)
      v25 = 0;
    else
      v25 = &(*v24)[4 * (v23 & 0x3FF)];
    v27[0].n128_u64[0] = v12;
    v27[0].n128_u64[1] = v13;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>>>(v18, v19, v24, v25, (char **)v27);
    --*(_QWORD *)(a1 + 40);
    std::deque<std::pair<unsigned short,unsigned short>>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)a1);
  }
}

void std::deque<unsigned long>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[5];
  v5 = a2 >= v4;
  v6 = a2 > v4;
  v7 = a2 - v4;
  if (v6)
  {
    std::deque<unsigned long>::__append(a1, v7);
  }
  else if (!v5)
  {
    v8 = a1[4];
    v10 = a1[1];
    v9 = a1[2];
    v11 = (_QWORD *)(v10 + 8 * (v8 >> 9));
    if (v9 == v10)
    {
      v12 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](v11, 0, a2);
      v15 = 0;
      v14 = (char *)(v10 + 8 * ((v8 + v4) >> 9));
    }
    else
    {
      v12 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](v11, *v11 + 8 * (v8 & 0x1FF), a2);
      v14 = (char *)(v10 + 8 * ((v8 + v4) >> 9));
      v15 = *(_QWORD *)v14 + 8 * ((v8 + v4) & 0x1FF);
    }
    if (v15 != v13)
    {
      v16 = ((v15 - *(_QWORD *)v14) >> 3) + ((v14 - v12) << 6) - ((v13 - *(_QWORD *)v12) >> 3);
      if (v16 >= 1)
      {
        a1[5] = v4 - v16;
        while ((std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0)
          ;
      }
    }
  }
}

BOOL std::deque<std::pair<unsigned short,unsigned short>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 7) - 1;
  v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x7FF;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,0>(__n128 *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a2 == a4)
  {
    v19 = a3;
    v18 = a5;
    v15 = a6;
    v16 = a7;
  }
  else
  {
    v13 = a4 - 1;
    v12 = *a4;
    v14 = a5;
    v15 = a6;
    v16 = a7;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v21, v12, v14, v15, v16);
      v16 = v22.n128_i64[1];
      v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a2)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a2 + 4096;
    v19 = a3;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v21, v19, v18, v15, v16);
  result = v22;
  a1->n128_u64[0] = (unint64_t)a4;
  a1->n128_u64[1] = a5;
  a1[1] = result;
  return result;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    v5 = *a4;
    v6 = a3;
    while (1)
    {
      if ((v6 - a2) >> 2 >= (a5 - v5) >> 2)
        v7 = (a5 - v5) >> 2;
      else
        v7 = (v6 - a2) >> 2;
      if (v7)
      {
        v8 = (__int16 *)(v6 - 2);
        v9 = -4 * v7;
        do
        {
          *(_WORD *)(a5 - 4) = *(v8 - 1);
          a5 -= 4;
          v10 = *v8;
          v8 -= 2;
          *(_WORD *)(a5 + 2) = v10;
          v9 += 4;
        }
        while (v9);
      }
      v6 -= 4 * v7;
      if (v6 == a2)
        break;
      v11 = *--a4;
      v5 = v11;
      a5 = v11 + 4096;
    }
    if (v5 + 4096 == a5)
    {
      v12 = a4[1];
      ++a4;
      a5 = v12;
    }
  }
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short>**,long,1024l>>>(char **a1, char *a2, char **a3, char *a4, char **a5)
{
  char *v7;
  char *v8;
  char **v10;
  char *i;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  v7 = *a5;
  v8 = a5[1];
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4096; ; i = v12 + 4096)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v14, a2, i, v7, v8);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (char *)v15;
      *a5 = (char *)v15;
      a5[1] = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(&v14, a2, a4, v7, v8);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char **std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(char **result, char *a2, char *a3, char *a4, char *a5)
{
  _WORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _WORD *v9;
  char *v10;

  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    v5 = *(_WORD **)a4;
    while (1)
    {
      v6 = (char *)(v5 + 2048);
      if ((a3 - a2) >> 2 >= (v6 - a5) >> 2)
        v7 = (v6 - a5) >> 2;
      else
        v7 = (a3 - a2) >> 2;
      if (v7)
      {
        v8 = &a2[4 * v7];
        do
        {
          *(_WORD *)a5 = *(_WORD *)a2;
          *((_WORD *)a5 + 1) = *((_WORD *)a2 + 1);
          a5 += 4;
          a2 += 4;
        }
        while (a2 != v8);
        a2 = v8;
      }
      if (a2 == a3)
        break;
      v9 = (_WORD *)*((_QWORD *)a4 + 1);
      a4 += 8;
      v5 = v9;
      a5 = (char *)v9;
    }
    if (v6 == a5)
    {
      v10 = (char *)*((_QWORD *)a4 + 1);
      a4 += 8;
      a5 = v10;
    }
  }
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

uint64_t std::deque<unsigned long>::deque(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2)
    std::deque<unsigned long>::__append((_QWORD *)a1, a2);
  return a1;
}

void sub_1D50C227C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void std::deque<unsigned long>::__append(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t i;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  char *v104;
  char *v105;
  void *v106;
  void *__p[2];
  __int128 v108;
  _QWORD *v109;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v8 = a1[4];
  v9 = a1[5];
  v10 = v9 + v8;
  v11 = v7 - (v9 + v8);
  v12 = a2 >= v11;
  v13 = a2 - v11;
  if (v13 != 0 && v12)
  {
    if (v5 == v4)
      v14 = v13 + 1;
    else
      v14 = v13;
    if ((v14 & 0x1FF) != 0)
      v15 = (v14 >> 9) + 1;
    else
      v15 = v14 >> 9;
    if (v15 >= v8 >> 9)
      v16 = v8 >> 9;
    else
      v16 = v15;
    if (v15 <= v8 >> 9)
    {
      for (a1[4] = v8 - (v16 << 9); v16; --v16)
      {
        v25 = (_QWORD *)a1[1];
        v28 = *v25;
        v26 = (char *)(v25 + 1);
        v27 = v28;
        a1[1] = v26;
        if (v5 == (char *)a1[3])
        {
          v29 = (uint64_t)&v26[-*a1];
          if ((unint64_t)v26 <= *a1)
          {
            if (v5 == (char *)*a1)
              v37 = 1;
            else
              v37 = (uint64_t)&v5[-*a1] >> 2;
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v37);
            v40 = &v38[8 * (v37 >> 2)];
            v41 = (uint64_t *)a1[1];
            v5 = v40;
            v42 = a1[2] - (_QWORD)v41;
            if (v42)
            {
              v5 = &v40[v42 & 0xFFFFFFFFFFFFFFF8];
              v43 = 8 * (v42 >> 3);
              v44 = &v38[8 * (v37 >> 2)];
              do
              {
                v45 = *v41++;
                *(_QWORD *)v44 = v45;
                v44 += 8;
                v43 -= 8;
              }
              while (v43);
            }
            v46 = (char *)*a1;
            *a1 = v38;
            a1[1] = v40;
            a1[2] = v5;
            a1[3] = &v38[8 * v39];
            if (v46)
            {
              operator delete(v46);
              v5 = (char *)a1[2];
            }
          }
          else
          {
            v30 = v29 >> 3;
            v31 = v29 >> 3 < -1;
            v32 = (v29 >> 3) + 2;
            if (v31)
              v33 = v32;
            else
              v33 = v30 + 1;
            v34 = &v26[-8 * (v33 >> 1)];
            v35 = v5 - v26;
            if (v5 != v26)
            {
              memmove(&v26[-8 * (v33 >> 1)], v26, v5 - v26);
              v5 = (char *)a1[1];
            }
            v36 = &v5[-8 * (v33 >> 1)];
            v5 = &v34[v35];
            a1[1] = v36;
            a1[2] = &v34[v35];
          }
        }
        *(_QWORD *)v5 = v27;
        v5 = (char *)(a1[2] + 8);
        a1[2] = v5;
      }
    }
    else
    {
      v17 = v15 - v16;
      v18 = a1[3] - *a1;
      if (v15 - v16 <= (v18 >> 3) - (v6 >> 3))
      {
        if (v17)
        {
          while (a1[3] != a1[2])
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, __p);
            --v15;
            if (!--v17)
            {
              v5 = (char *)a1[2];
              goto LABEL_81;
            }
          }
          for (i = 0; i != v17; ++i)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, __p);
            v5 = (char *)a1[2];
            if (&v5[-a1[1]] == (char *)8)
              v73 = 511;
            else
              v73 = 512;
            v74 = v73 + a1[4];
            a1[4] = v74;
          }
          v16 = v15;
        }
        else
        {
LABEL_81:
          v74 = a1[4];
        }
        for (a1[4] = v74 - (v16 << 9); v16; --v16)
        {
          v75 = (_QWORD *)a1[1];
          v78 = *v75;
          v76 = (char *)(v75 + 1);
          v77 = v78;
          a1[1] = v76;
          if (v5 == (char *)a1[3])
          {
            v79 = (uint64_t)&v76[-*a1];
            if ((unint64_t)v76 <= *a1)
            {
              if (v5 == (char *)*a1)
                v86 = 1;
              else
                v86 = (uint64_t)&v5[-*a1] >> 2;
              v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v86);
              v89 = &v87[8 * (v86 >> 2)];
              v90 = (uint64_t *)a1[1];
              v5 = v89;
              v91 = a1[2] - (_QWORD)v90;
              if (v91)
              {
                v5 = &v89[v91 & 0xFFFFFFFFFFFFFFF8];
                v92 = 8 * (v91 >> 3);
                v93 = &v87[8 * (v86 >> 2)];
                do
                {
                  v94 = *v90++;
                  *(_QWORD *)v93 = v94;
                  v93 += 8;
                  v92 -= 8;
                }
                while (v92);
              }
              v95 = (char *)*a1;
              *a1 = v87;
              a1[1] = v89;
              a1[2] = v5;
              a1[3] = &v87[8 * v88];
              if (v95)
              {
                operator delete(v95);
                v5 = (char *)a1[2];
              }
            }
            else
            {
              v80 = v79 >> 3;
              v31 = v79 >> 3 < -1;
              v81 = (v79 >> 3) + 2;
              if (v31)
                v82 = v81;
              else
                v82 = v80 + 1;
              v83 = &v76[-8 * (v82 >> 1)];
              v84 = v5 - v76;
              if (v5 != v76)
              {
                memmove(&v76[-8 * (v82 >> 1)], v76, v5 - v76);
                v5 = (char *)a1[1];
              }
              v85 = &v5[-8 * (v82 >> 1)];
              v5 = &v83[v84];
              a1[1] = v85;
              a1[2] = &v83[v84];
            }
          }
          *(_QWORD *)v5 = v77;
          v5 = (char *)(a1[2] + 8);
          a1[2] = v5;
        }
      }
      else
      {
        v19 = v6 >> 3;
        v20 = v18 >> 2;
        v21 = v17 + (v6 >> 3);
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
        v23 = v19 - v16;
        v109 = a1 + 3;
        if (v22)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v22);
        else
          v24 = 0;
        v47 = v16 << 9;
        __p[0] = v24;
        __p[1] = &v24[8 * v23];
        *(void **)&v108 = __p[1];
        *((_QWORD *)&v108 + 1) = &v24[8 * v22];
        do
        {
          v106 = operator new(0x1000uLL);
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(__p, &v106);
          --v17;
        }
        while (v17);
        if (v16)
        {
          v48 = (_QWORD *)a1[1];
          v49 = (char *)v108;
          do
          {
            if (v49 == *((char **)&v108 + 1))
            {
              v50 = (char *)__p[1] - (char *)__p[0];
              if (__p[1] <= __p[0])
              {
                if (v49 == __p[0])
                  v57 = 1;
                else
                  v57 = (v49 - (char *)__p[0]) >> 2;
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v109, v57);
                v60 = (uint64_t *)__p[1];
                v49 = &v58[8 * (v57 >> 2)];
                v61 = v108 - (unint64_t)__p[1];
                if ((void *)v108 != __p[1])
                {
                  v49 = &v58[8 * (v57 >> 2) + (v61 & 0xFFFFFFFFFFFFFFF8)];
                  v62 = 8 * (v61 >> 3);
                  v63 = &v58[8 * (v57 >> 2)];
                  do
                  {
                    v64 = *v60++;
                    *(_QWORD *)v63 = v64;
                    v63 += 8;
                    v62 -= 8;
                  }
                  while (v62);
                }
                v65 = __p[0];
                __p[0] = v58;
                __p[1] = &v58[8 * (v57 >> 2)];
                *(_QWORD *)&v108 = v49;
                *((_QWORD *)&v108 + 1) = &v58[8 * v59];
                if (v65)
                {
                  operator delete(v65);
                  v49 = (char *)v108;
                }
              }
              else
              {
                v51 = v50 >> 3;
                v31 = v50 >> 3 < -1;
                v52 = (v50 >> 3) + 2;
                if (v31)
                  v53 = v52;
                else
                  v53 = v51 + 1;
                v54 = (char *)__p[1] - 8 * (v53 >> 1);
                v55 = v49 - (char *)__p[1];
                if (v49 != __p[1])
                {
                  memmove((char *)__p[1] - 8 * (v53 >> 1), __p[1], v49 - (char *)__p[1]);
                  v49 = (char *)__p[1];
                }
                v56 = &v49[-8 * (v53 >> 1)];
                v49 = &v54[v55];
                __p[1] = v56;
                *(_QWORD *)&v108 = &v54[v55];
              }
            }
            *(_QWORD *)v49 = *v48;
            v49 = (char *)(v108 + 8);
            *(_QWORD *)&v108 = v108 + 8;
            v48 = (_QWORD *)(a1[1] + 8);
            a1[1] = v48;
            --v16;
          }
          while (v16);
        }
        v66 = (_QWORD *)a1[2];
        v67 = -7 - (_QWORD)v66;
        while (v66 != (_QWORD *)a1[1])
        {
          --v66;
          v67 += 8;
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)__p, v66);
        }
        v68 = (char *)*a1;
        v70 = *(_OWORD *)__p;
        v69 = v108;
        __p[0] = *(void **)a1;
        __p[1] = v66;
        v71 = *((_OWORD *)a1 + 1);
        *(_OWORD *)a1 = v70;
        *((_OWORD *)a1 + 1) = v69;
        v108 = v71;
        a1[4] -= v47;
        if (v66 != (_QWORD *)v71)
          *(_QWORD *)&v108 = v71 + (-(v71 + v67) & 0xFFFFFFFFFFFFFFF8);
        if (v68)
        {
          operator delete(v68);
          v5 = (char *)a1[2];
        }
        else
        {
          v5 = (char *)v69;
        }
      }
    }
    v9 = a1[5];
    v4 = (char *)a1[1];
    v10 = a1[4] + v9;
  }
  v96 = &v4[8 * (v10 >> 9)];
  if (v5 == v4)
    v97 = 0;
  else
    v97 = (char *)(*(_QWORD *)v96 + 8 * (v10 & 0x1FF));
  v98 = (char *)std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](v96, (uint64_t)v97, a2);
  if (v97 != v99)
  {
    v100 = v98;
    v101 = (uint64_t)v99;
    do
    {
      if (v96 == v100)
        v102 = v101;
      else
        v102 = *(_QWORD *)v96 + 4096;
      if (v97 == (char *)v102)
      {
        v104 = v97;
      }
      else
      {
        v103 = (v102 - (_QWORD)v97) & 0xFFFFFFFFFFFFFFF8;
        bzero(v97, v103);
        v104 = &v97[v103];
        v9 = a1[5];
      }
      v9 += (v104 - v97) >> 3;
      a1[5] = v9;
      if (v96 == v100)
        break;
      v105 = (char *)*((_QWORD *)v96 + 1);
      v96 += 8;
      v97 = v105;
    }
    while (v105 != (char *)v101);
  }
}

void sub_1D50C288C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(_QWORD *result, _BYTE *__src, _BYTE *a3, void **a4, char *__dst)
{
  void **v6;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  v8 = result;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        result = memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

_QWORD *std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>(_QWORD *result, _QWORD *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, _QWORD *a6, unint64_t *a7, uint64_t a8, uint64_t a9, unint64_t *a10, _QWORD *a11, unint64_t *a12)
{
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;

  while (a3 != a5 && a7 != a10)
  {
    v14 = *a3;
    if (*a3 >= *a7)
    {
      if (*a7 >= v14)
      {
        *a12++ = v14;
        if ((unint64_t *)((char *)a12 - *a11) == (unint64_t *)4096)
        {
          v16 = (unint64_t *)a11[1];
          ++a11;
          a12 = v16;
        }
        if ((unint64_t *)((char *)++a3 - *a2) == (unint64_t *)4096)
        {
          v17 = (unint64_t *)a2[1];
          ++a2;
          a3 = v17;
        }
      }
      if ((unint64_t *)((char *)++a7 - *a6) == (unint64_t *)4096)
      {
        v18 = (unint64_t *)a6[1];
        ++a6;
        a7 = v18;
      }
    }
    else if ((unint64_t *)((char *)++a3 - *a2) == (unint64_t *)4096)
    {
      v15 = (unint64_t *)a2[1];
      ++a2;
      a3 = v15;
    }
  }
  *result = a4;
  result[1] = a5;
  result[2] = a9;
  result[3] = a10;
  result[4] = a11;
  result[5] = a12;
  return result;
}

double nms::minMaxEdgeOfQuad<double>(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  double *v4;
  double *v5;
  double v6;

  v1 = 0;
  result = 1.79769313e308;
  v3 = 2.22507386e-308;
  do
  {
    v4 = (double *)(a1 + 8 * v1);
    v1 += 2;
    v5 = (double *)(a1 + 8 * (v1 & 6));
    v6 = sqrt((v4[1] - v5[1]) * (v4[1] - v5[1]) + (*v4 - *v5) * (*v4 - *v5));
    if (v6 < result)
      result = v6;
    if (v3 < v6)
      v3 = v6;
  }
  while (v1 != 8);
  return result;
}

double nms::PyramidNMS<unsigned short,double,unsigned char>::computeAggregatedScore(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  double v27;

  v2 = a2[5];
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD **)(a1 + 968);
    v5 = a2[4];
    v6 = 0.0;
    while (1)
    {
      v7 = *(_QWORD *)(a2[1] + (((unint64_t)(v3 + v5) >> 7) & 0x1FFFFFFFFFFFFF8));
      v8 = (v3 + v5) & 0x3FF;
      v9 = *(unsigned __int16 *)(v7 + 4 * v8);
      if (v4[5] <= v9)
        std::__throw_out_of_range[abi:ne180100]("deque");
      v10 = v4[4] + v9;
      v11 = *(_QWORD *)(v4[1] + 8 * (v10 / 0x14));
      v12 = v10 % 0x14;
      v13 = v11 + 200 * v12;
      v16 = *(_QWORD **)(v13 + 184);
      v14 = (_QWORD *)(v13 + 184);
      v15 = v16;
      if (!v16)
        goto LABEL_12;
      v17 = v15;
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17);
      if (v18 == v14 || v18[4] || (v19 = v18[5] - 5, v19 > 3))
      {
LABEL_12:
        v20 = -1;
        if (!v15)
          goto LABEL_18;
      }
      else
      {
        v20 = qword_1D513B398[v19];
        if (!v15)
          goto LABEL_18;
      }
      do
      {
        v21 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
      if (v21 == v14 || v21[4] || (v22 = v21[5], v22 > 8))
      {
LABEL_18:
        v23 = 0.0;
        goto LABEL_19;
      }
      v23 = dbl_1D513B3B8[v22];
LABEL_19:
      v24 = v20 + *(_QWORD *)&v23 * *(unsigned __int16 *)(v7 + 4 * v8 + 2);
      v26 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 200 * v12 + 88)
                                  + ((*(_QWORD *)(v11 + 200 * v12 + 112) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * *(_QWORD *)(v11 + 200 * v12 + 112));
      v25 = *v26;
      if (v24 >= (v26[1] - *v26) >> 3)
        v27 = -0.0;
      else
        v27 = *(double *)(v25 + 8 * v24);
      v6 = v6 + v27;
      if (++v3 == v2)
        return v6 * *(double *)(a1 + 1016);
    }
  }
  v6 = 0.0;
  return v6 * *(double *)(a1 + 1016);
}

double *nms::normalizeL2<double>(double *result, double *a2)
{
  uint64_t v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;

  v2 = (char *)a2 - (char *)result;
  if (a2 != result)
  {
    v3 = *result * *result;
    if ((unint64_t)v2 >= 9)
    {
      v4 = v2 >> 3;
      if (v4 <= 2)
        v4 = 2;
      v5 = v4 - 1;
      v6 = result + 1;
      do
      {
        v7 = *v6++;
        v3 = v3 + v7 * v7;
        --v5;
      }
      while (v5);
    }
    v8 = sqrt(v3);
    v9 = fabs(v8);
    if (v9 > v9 * 2.22044605e-16)
    {
      do
      {
        *result = *result / v8;
        ++result;
      }
      while (result != a2);
    }
  }
  return result;
}

BOOL nms::PyramidNMS<unsigned short,double,unsigned char>::checkValidityOfCosAngleInDistributionCheckInProcessingContainment(uint64_t a1, double **a2, double **a3, uint64_t a4)
{
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  _BOOL8 v13;
  double *v15;
  double *v16;

  v15 = 0;
  v16 = 0;
  std::valarray<double>::resize((uint64_t)&v15, 2uLL, 0.0);
  v8 = *a2;
  v9 = *a3;
  v10 = (*a2)[1] - (*a3)[1];
  v12 = v15;
  v11 = v16;
  *v15 = v10;
  v12[1] = *v9 - *v8;
  nms::normalizeL2<double>(v12, v11);
  v13 = fabs(*(double *)(*(_QWORD *)a4 + 8) * v12[1] + **(double **)a4 * *v12) >= *(double *)(a1 + 1136);
  operator delete(v12);
  return v13;
}

int **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(int **result, int *a2, int *a3, int *a4, int *a5)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  _DWORD *v10;
  int *v11;

  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    v5 = *(_DWORD **)a4;
    while (1)
    {
      v6 = v5 + 1024;
      if (a3 - a2 >= v6 - a5)
        v7 = v6 - a5;
      else
        v7 = a3 - a2;
      if (v7)
      {
        v8 = &a2[v7];
        do
        {
          v9 = *a2++;
          *a5++ = v9;
        }
        while (a2 != v8);
        a2 = v8;
      }
      if (a2 == a3)
        break;
      v10 = (_DWORD *)*((_QWORD *)a4 + 1);
      a4 += 2;
      v5 = v10;
      a5 = v10;
    }
    if (v6 == a5)
    {
      v11 = (int *)*((_QWORD *)a4 + 1);
      a4 += 2;
      a5 = v11;
    }
  }
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

_QWORD *std::__copy_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<unsigned short,unsigned short> *,std::__deque_iterator<std::pair<unsigned short,unsigned short>,std::pair<unsigned short,unsigned short> *,std::pair<unsigned short,unsigned short>&,std::pair<unsigned short,unsigned short> **,long,1024l>,0>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    v5 = *a4;
    v6 = a3;
    while (1)
    {
      if ((v6 - a2) >> 2 >= (a5 - v5) >> 2)
        v7 = (a5 - v5) >> 2;
      else
        v7 = (v6 - a2) >> 2;
      if (v7)
      {
        v8 = v6 - 2;
        v9 = -4 * v7;
        do
        {
          *(_DWORD *)(a5 - 4) = *(_DWORD *)(v8 - 2);
          a5 -= 4;
          v8 -= 4;
          v9 += 4;
        }
        while (v9);
      }
      v6 -= 4 * v7;
      if (v6 == a2)
        break;
      v10 = *--a4;
      v5 = v10;
      a5 = v10 + 4096;
    }
    if (v5 + 4096 == a5)
    {
      v11 = a4[1];
      ++a4;
      a5 = v11;
    }
  }
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

uint64_t std::deque<unsigned short>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 11));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 11));
  }
  else
  {
    v8 = &(*v7)[2 * (v4 & 0x7FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 11));
    v11 = *(_QWORD *)v10 + 2 * (v9 & 0x7FF);
  }
  if ((char *)v11 == v8)
    v12 = 0;
  else
    v12 = ((v11 - *(_QWORD *)v10) >> 1) + ((v10 - (char *)v7) << 8) - ((v8 - *v7) >> 1);
  std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>((_QWORD *)a1, v7, v8, v12);
  return a1;
}

void sub_1D50C2F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::valarray<double>::valarray(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = operator new(8 * v3);
    *a1 = v5;
    v6 = *(_QWORD **)a2;
    v7 = 8 * *(_QWORD *)(a2 + 16);
    do
    {
      *v5++ = *v6;
      v6 = (_QWORD *)((char *)v6 + v7);
      --v3;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

uint64_t std::deque<nms::RectForest<unsigned short,double>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x14];
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x14] + 200 * ((*(_QWORD *)(a1 + 40) + v5) % 0x14);
    if ((char *)*v6 + 200 * (v5 % 0x14) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 200 * (v5 % 0x14));
      do
      {
        v9 = *v8;
        v8 += 25;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4000)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 10;
    goto LABEL_15;
  }
  if (v12 == 2)
  {
    v13 = 20;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *nms::PyramidNMS<unsigned short,double,unsigned char>::PyramidNMS(_QWORD *a1)
{
  uint64_t v3;
  _BYTE v4[328];

  *a1 = &off_1E98D92E0;
  bzero(a1 + 1, 0x3C8uLL);
  nms::PyramidNMSConfig::PyramidNMSConfig((uint64_t)(a1 + 122), 0, 0);
  nms::PyramidNMSConfig::PyramidNMSConfig((uint64_t)&v3, 0, 0);
  memcpy(a1 + 123, v4, 0x148uLL);
  return a1;
}

void CRMinAreaRect::findMinAreaRect(float a1, uint64_t a2, uint64_t a3, double *a4)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  float v14;
  double v15;
  unint64_t ExtremeIndex;
  float v17;
  unint64_t v18;
  int v19;
  double v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  double v27;
  double v28;
  int *v29;
  double v30;
  double v31;
  int v32;
  double v33;
  int v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  double v40;
  double v41;
  double v42;
  int *v43;
  int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float v50;
  CGPoint *v51;
  CGFloat v52;
  float v53;
  float v54;
  float v55;
  int v56;
  double v57;
  float v58;
  float v59;
  int v60;
  double v61;
  CGPoint *v62;
  uint64_t v63;
  float64x2_t v64;
  int8x16_t v65;
  int8x16_t v66;
  float64x2_t v67;
  CGPoint *v68;
  double CenterPoint;
  int v71;
  uint64_t v72;
  CGPoint v73;
  CGPoint v74[4];
  uint64_t v75;
  float64x2x2_t v76;
  float64x2x2_t v77;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(int **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = v5 - *(_QWORD *)a3;
  if ((unint64_t)v6 >= 0x18)
  {
    v8 = v6 >> 3;
    v9 = v8 - 1;
    if (v8 == 1)
    {
      v71 = 0;
      v20 = 0.0;
      v23 = 0.0;
      v22 = 0.0;
      v21 = 0.0;
      v14 = 0.0;
      v15 = 0.0;
    }
    else
    {
      v10 = 0;
      v71 = 0;
      v12 = *v4;
      v11 = v4[1];
      v13 = v4 + 3;
      v14 = 0.0;
      v15 = 0.0;
      ExtremeIndex = 1;
      v17 = 3.4028e38;
      v18 = 1;
      v19 = 1;
      v20 = 0.0;
      v21 = 0.0;
      v22 = 0.0;
      v23 = 0.0;
      do
      {
        ExtremeIndex = findExtremeIndex((uint64_t)v4, v5, v10, ExtremeIndex, 0);
        v24 = findExtremeIndex((uint64_t)v4, v5, v10, v18, 2);
        v18 = v24;
        if (v10)
          v25 = v19;
        else
          v25 = v24;
        v19 = findExtremeIndex((uint64_t)v4, v5, v10, v25, 1);
        v26 = &v4[2 * (int)v18];
        v27 = (double)(*v26 - v12);
        v28 = (double)(v26[1] - v11);
        v29 = &v4[2 * v19];
        v30 = (double)(*v29 - v12);
        v31 = (double)(v29[1] - v11);
        v32 = *(v13 - 1);
        v33 = (double)(v32 - v12);
        v34 = *v13;
        v35 = (double)(*v13 - v11);
        v36 = sqrt((double)(v12 - v32) * (double)(v12 - v32) + (double)(v11 - v34) * (double)(v11 - v34));
        *(float *)&v27 = v28 * v35 + v27 * v33;
        v37 = *(float *)&v27 / v36;
        *(float *)&v28 = v31 * v35 + v30 * v33;
        v38 = *(float *)&v28 / v36;
        *(float *)&v30 = (double)(v4[2 * (int)ExtremeIndex] - v12) * v35
                       - (double)(v4[2 * (int)ExtremeIndex + 1] - v11) * v33;
        v39 = fabsf(*(float *)&v30) / v36;
        if ((float)((float)(v37 - v38) * v39) < v17)
        {
          v23 = v36;
          v22 = v39;
          v71 = v10;
          v21 = v38;
          v14 = v37;
          v20 = (double)(v34 - v11);
          v15 = (double)(v32 - v12);
          v17 = (float)(v37 - v38) * v39;
        }
        ++v10;
        v13 += 2;
        v11 = v34;
        v12 = v32;
      }
      while (v9 != v10);
    }
    v40 = v23 + 0.0000001;
    v41 = v15 / v40;
    v42 = v20 / v40;
    v43 = &v4[2 * v71];
    v44 = *v43;
    LODWORD(v43) = v43[1];
    v45 = (double)v44 + v41 * v21;
    v46 = (double)(int)v43 + v42 * v21;
    *a4 = v45;
    a4[1] = v46;
    v47 = (double)v44 + v41 * v14;
    v48 = (double)(int)v43 + v42 * v14;
    a4[2] = v47;
    a4[3] = v48;
    v49 = v22;
    a4[4] = v47 - v42 * v22;
    a4[5] = v48 + v41 * v22;
    a4[6] = v45 - v42 * v22;
    a4[7] = v46 + v41 * v22;
    v50 = v14 - v21;
    a4[8] = v50;
    a4[9] = v22;
    CenterPoint = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)a4, (CGPoint *)a3);
    v73.x = CenterPoint;
    v73.y = v52;
    v72 = *(_QWORD *)&v52;
    if (v50 <= v22)
    {
      if (v20 == 0.0)
      {
        v53 = 90.0;
      }
      else
      {
        v59 = v15;
        if (v59 >= 0.0)
          v60 = 1;
        else
          v60 = -1;
        v58 = v20;
        if (v58 < 0.0)
          v60 = -v60;
        v53 = atan2(fabs(v15) * (double)v60, fabs(v20)) / 3.14159265 * 180.0;
      }
      a4[8] = v49;
      a4[9] = v50;
      v57 = v50;
    }
    else
    {
      if (v15 == 0.0)
      {
        v53 = 90.0;
      }
      else
      {
        v55 = v15;
        if (v55 >= 0.0)
          v56 = 1;
        else
          v56 = -1;
        v54 = -v20;
        if (v54 < 0.0)
          v56 = -v56;
        v53 = atan2(fabs(v20) * (double)v56, fabs(v15)) / 3.14159265 * 180.0;
      }
      v57 = v22;
      v49 = v50;
    }
    a4[10] = v53;
    if (a1 != 0.0)
    {
      v61 = (float)(a1 + a1);
      a4[8] = v49 + v61;
      a4[9] = v57 + v61;
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)a4, &v73, v74, (float)(v53 / 180.0) * 3.14159265, v51);
      v63 = 0;
      v64 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&CenterPoint, 0);
      v65 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(-a1), 0);
      v66 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(a1), 0);
      v67 = (float64x2_t)vdupq_lane_s64(v72, 0);
      do
      {
        v68 = &v74[v63];
        v76 = vld2q_f64(&v68->x);
        v77.val[0] = vaddq_f64(v76.val[0], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v64, v76.val[0]), v65, v66));
        v77.val[1] = vaddq_f64(v76.val[1], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v67, v76.val[1]), v65, v66));
        vst2q_f64(&v68->x, v77);
        v63 += 2;
      }
      while (v63 != 4);
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)v74, &v73, (const CGPoint *)a4, (float)(v53 / -180.0) * 3.14159265, v62);
    }
  }
}

unint64_t findExtremeIndex(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int a5)
{
  unint64_t v6;
  int *v9;
  _DWORD *v10;
  int v11;
  int v12;
  double v13;
  double v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;

  v6 = a4;
  v9 = (int *)(a1 + 8 * a3);
  v10 = (_DWORD *)(a1 + 8 * (int)a4);
  v11 = *v9;
  v12 = v9[1];
  v13 = (double)(v9[2] - *v9);
  v14 = (double)(v9[3] - v12);
  if (analyzeState(a5, (double)(*v10 - v11), (double)(v10[1] - v12), (double)(v10[2] - v11), (double)(v10[3] - v12), (double)(v9[2] - v11), v14))v15 = a2 == a1;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = (a2 - a1) >> 3;
    v17 = 1;
    do
    {
      v6 = ((int)v6 + 1) % (v16 - 1);
      if (analyzeState(a5, (double)(*(_DWORD *)(a1 + 8 * (int)v6) - v11), (double)(*(_DWORD *)(a1 + 8 * (int)v6 + 4) - v12), (double)(*(_DWORD *)(a1 + ((uint64_t)((v6 << 32) + 0x100000000) >> 29)) - v11), (double)(*(_DWORD *)(a1 + ((uint64_t)((v6 << 32) + 0x100000000) >> 29) + 4) - v12), v13, v14))v18 = v16 > v17;
      else
        v18 = 0;
      ++v17;
    }
    while (v18);
  }
  return v6;
}

void CRMinAreaRect::findMinAreaMaxContourRect(float a1, float a2, uint64_t a3, uint64_t a4, double *a5, uint64_t *a6)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  int *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t ExtremeIndex;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  int *v32;
  double v33;
  double v34;
  int *v35;
  double v36;
  double v37;
  int *v38;
  int v39;
  double v40;
  double v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  CGPoint *v48;
  const CGPoint *v49;
  float v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  int64x2_t v58;
  CGPoint *v59;
  float v60;
  uint64_t i;
  float v62;
  float v64;
  int *v65;
  int v66;
  int v67;
  float v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  CGFloat v78;
  CGPoint *v79;
  float v80;
  float v81;
  float v82;
  int v83;
  double v84;
  float v85;
  float v86;
  int v87;
  double v88;
  CGPoint *v89;
  uint64_t v90;
  float64x2_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float64x2_t v94;
  double *v95;
  float v98;
  float v99;
  float v100;
  float v101;
  int v102;
  double v103;
  double v104;
  int *v105;
  unint64_t v106;
  float v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  float v112;
  float v113;
  float v114;
  unsigned int v115;
  unint64_t v116;
  unsigned int v117;
  double CenterPoint;
  CGPoint v119;
  uint64_t v120;
  CGPoint v121;
  CGPoint v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  uint64_t v129;
  float64x2x2_t v130;
  float64x2x2_t v131;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = *(int **)a4;
  v110 = *(_QWORD *)(a4 + 8);
  v7 = v110 - *(_QWORD *)a4;
  if ((unint64_t)v7 >= 0x18)
  {
    v8 = v7 >> 3;
    v9 = v7 >> 3 != 0;
    v10 = (v7 >> 3) - 1;
    if (v10 == 0 || !v9)
      v8 = 1;
    v11 = v6 + 1;
    v12 = 0.0;
    v13 = 3.4028e38;
    v14 = 3.4028e38;
    v15 = 0.0;
    do
    {
      v16 = (double)*(v11 - 1);
      v13 = fmin(v13, v16);
      v17 = *v11;
      v11 += 2;
      v14 = fmin(v14, (double)v17);
      v12 = fmax(v12, v16);
      v15 = fmax(v15, (double)v17);
      --v8;
    }
    while (v8);
    v18 = 0;
    v102 = 0;
    v19 = *a6;
    v109 = a6[1];
    v20 = (v109 - *a6) >> 3;
    v21 = fmin((float)((float)((float)(v12 - v13) + (float)(v12 - v13)) + (float)((float)(v15 - v14) * 2.0)), (double)v20);
    v98 = v21;
    v107 = 1.0 - a2;
    v108 = (float)v20;
    if (v20 <= 1)
      v22 = 1;
    else
      v22 = (v109 - v19) >> 3;
    if (v10 <= 1)
      v10 = 1;
    v106 = v10;
    v23 = *v6;
    v24 = v6[1];
    v104 = 0.0;
    v112 = 0.0;
    v25 = 1;
    v26 = 1;
    v117 = 1;
    v113 = 0.0;
    v99 = 0.0;
    v100 = 0.0;
    v101 = 0.0;
    v103 = 0.0;
    v105 = *(int **)a4;
    do
    {
      ExtremeIndex = findExtremeIndex((uint64_t)v6, v110, v18, v25, 0);
      v28 = findExtremeIndex((uint64_t)v6, v110, v18, v26, 2);
      v29 = v28;
      if (v18)
        v30 = v117;
      else
        v30 = v28;
      v31 = findExtremeIndex((uint64_t)v6, v110, v18, v30, 1);
      v115 = v29;
      v32 = &v6[2 * v29];
      v33 = (double)(*v32 - v23);
      v34 = (double)(v32[1] - v24);
      v117 = v31;
      v35 = &v6[2 * v31];
      v36 = (double)(*v35 - v23);
      v37 = (double)(v35[1] - v24);
      v38 = &v6[2 * v18 + 2];
      v39 = v38[1];
      v40 = (double)(*v38 - v23);
      v41 = (double)(v39 - v24);
      v116 = ExtremeIndex;
      v42 = *v38;
      v43 = v39;
      v44 = sqrt((double)(v23 - *v38) * (double)(v23 - *v38) + (double)(v24 - v39) * (double)(v24 - v39));
      *(float *)&v33 = v34 * v41 + v33 * v40;
      v45 = *(float *)&v33 / v44;
      *(float *)&v33 = v37 * v41 + v36 * v40;
      v46 = *(float *)&v33 / v44;
      *(float *)&v33 = (double)(v6[2 * (int)ExtremeIndex] - v23) * v41
                     - (double)(v6[2 * (int)ExtremeIndex + 1] - v24) * v40;
      v47 = fabsf(*(float *)&v33) / v44;
      v50 = expf((float)((float)(v45 - v46) * v47) / v108);
      v51 = v44 + 0.0000001;
      v52 = v40 / v51;
      v53 = v41 / v51;
      v122.x = (double)v23 + v52 * v46;
      v122.y = (double)v24 + v53 * v46;
      v123 = (double)v23 + v52 * v45;
      v124 = (double)v24 + v53 * v45;
      v125 = v123 - v53 * v47;
      v126 = v124 + v52 * v47;
      v127 = v122.x - v53 * v47;
      v128 = v122.y + v52 * v47;
      if (v109 == v19)
      {
        v56 = v18 + 1;
      }
      else
      {
        v114 = v50;
        v54 = 0;
        v55 = 0.0;
        v56 = v18 + 1;
        do
        {
          v57 = *(_QWORD *)(v19 + 8 * v54);
          v58.i64[0] = (int)v57;
          v58.i64[1] = SHIDWORD(v57);
          v119 = (CGPoint)vcvtq_f64_s64(v58);
          v59 = &v122;
          v60 = 3.4028e38;
          for (i = 1; i != 5; ++i)
          {
            v121 = v119;
            v62 = CRDetectorUtils::distPointToLine((CRDetectorUtils *)&v121, v59, &v122 + (i & 3), v49);
            if (v62 < v60)
              v60 = v62;
            ++v59;
          }
          if (v60 > 0.0 && v60 <= 1.0)
            v55 = v55 + 1.0;
          ++v54;
        }
        while (v54 != v22);
        v6 = v105;
        v50 = v114;
        if (v55 > 5.0)
        {
          v64 = expf((float)-v55 / v98);
          v50 = v114;
          v112 = (float)(1.0 / (float)(v64 + 1.0)) + -0.5;
        }
      }
      if ((float)((float)(v107 * (float)(1.0 / (float)(v50 + 1.0))) + (float)(a2 * v112)) > v113)
      {
        v103 = v40;
        v104 = v41;
        v102 = v18;
        v100 = v46;
        v101 = v47;
        v99 = v45;
        v113 = (float)(v107 * (float)(1.0 / (float)(v50 + 1.0))) + (float)(a2 * v112);
      }
      v24 = v43;
      v23 = v42;
      v18 = v56;
      v25 = v116;
      v26 = v115;
    }
    while (v56 != v106);
    v65 = &v6[2 * v102];
    v66 = *v65;
    v67 = v65[1];
    v68 = sqrt((double)(*v65 - v65[2]) * (double)(*v65 - v65[2]) + (double)(v67 - v65[3]) * (double)(v67 - v65[3]));
    v69 = v68 + 0.0000001;
    v70 = v103 / v69;
    v71 = v104 / v69;
    v72 = (double)*v65 + v70 * v100;
    v73 = (double)v67 + v71 * v100;
    *a5 = v72;
    a5[1] = v73;
    v74 = (double)v66 + v70 * v99;
    v75 = (double)v67 + v71 * v99;
    a5[2] = v74;
    a5[3] = v75;
    v76 = v101;
    a5[4] = v74 - v71 * v101;
    a5[5] = v75 + v70 * v101;
    a5[6] = v72 - v71 * v101;
    a5[7] = v73 + v70 * v101;
    v77 = (float)(v99 - v100);
    a5[8] = v77;
    a5[9] = v101;
    CenterPoint = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)a5, v48);
    v120 = *(_QWORD *)&v78;
    v121.x = CenterPoint;
    v121.y = v78;
    if ((float)(v99 - v100) <= v101)
    {
      if (v104 == 0.0)
      {
        v80 = 90.0;
      }
      else
      {
        v86 = v103;
        if (v86 >= 0.0)
          v87 = 1;
        else
          v87 = -1;
        v85 = v104;
        if (v85 < 0.0)
          v87 = -v87;
        v80 = atan2(fabs(v103) * (double)v87, fabs(v104)) / 3.14159265 * 180.0;
      }
      a5[8] = v76;
      a5[9] = v77;
      v84 = (float)(v99 - v100);
    }
    else
    {
      if (v103 == 0.0)
      {
        v80 = 90.0;
      }
      else
      {
        v82 = v103;
        if (v82 >= 0.0)
          v83 = 1;
        else
          v83 = -1;
        v81 = -v104;
        if (v81 < 0.0)
          v83 = -v83;
        v80 = atan2(fabs(v104) * (double)v83, fabs(v103)) / 3.14159265 * 180.0;
      }
      v84 = v101;
      v76 = (float)(v99 - v100);
    }
    a5[10] = v80;
    if (a1 != 0.0)
    {
      v88 = (float)(a1 + a1);
      a5[8] = v76 + v88;
      a5[9] = v84 + v88;
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)a5, &v121, &v122, (float)(v80 / 180.0) * 3.14159265, v79);
      v90 = 0;
      v91 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&CenterPoint, 0);
      v92 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(-a1), 0);
      v93 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(a1), 0);
      v94 = (float64x2_t)vdupq_lane_s64(v120, 0);
      do
      {
        v95 = (double *)((char *)&v122.x + v90);
        v130 = vld2q_f64(v95);
        v131.val[0] = vaddq_f64(v130.val[0], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v91, v130.val[0]), v92, v93));
        v131.val[1] = vaddq_f64(v130.val[1], (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v94, v130.val[1]), v92, v93));
        vst2q_f64(v95, v131);
        v90 += 32;
      }
      while (v90 != 64);
      CRDetectorUtils::rotatePolygon((CRDetectorUtils *)&v122, &v121, (const CGPoint *)a5, (float)(v80 / -180.0) * 3.14159265, v89);
    }
  }
}

void CRMinAreaRect::sortMinAreaRectCorners(int a1, CRDetectorUtils *this)
{
  double CenterPoint;
  CGFloat v4;
  double v5;
  float v6;
  CGPoint *v7;
  uint64_t v8;
  CGFloat *p_y;
  uint64_t i;
  uint64_t j;
  CGPoint v12;
  CGPoint *v13;
  CGPoint v14;
  CGPoint v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  CenterPoint = CRDetectorUtils::makeCenterPoint(this, (CGPoint *)this);
  v5 = v4;
  v14.x = CenterPoint;
  v14.y = v4;
  v6 = *((double *)this + 10) / 180.0 * 3.14159265;
  CRDetectorUtils::rotatePolygon(this, &v14, v15, v6, v7);
  v8 = 0;
  p_y = &v15[0].y;
  while (*(p_y - 1) >= CenterPoint || *p_y >= v5)
  {
    ++v8;
    p_y += 2;
    if (v8 == 4)
    {
      LOBYTE(v8) = 0;
      break;
    }
  }
  for (i = 0; i != 4; ++i)
    v15[i] = *((CGPoint *)this + (((_BYTE)v8 + (_BYTE)i) & 3));
  for (j = 0; j != 4; j += 2)
  {
    v12 = v15[j + 1];
    v13 = (CGPoint *)((char *)this + j * 16);
    *v13 = v15[j];
    v13[1] = v12;
  }
}

uint64_t analyzeState(int a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  _BOOL4 v11;
  float v13;
  float v14;
  _BOOL4 v15;

  if (a1 == 2)
  {
    v9 = a3 * a7 + a2 * a6;
    v10 = a5 * a7 + a4 * a6;
LABEL_6:
    v11 = vabds_f32(v9, v10) < 0.0000001;
    return (float)(v9 - v10) <= 0.0 || v11;
  }
  if (a1 != 1)
  {
    if (a1)
      return 0;
    v7 = a2 * a7 - a3 * a6;
    v8 = a4 * a7 - a5 * a6;
    v9 = fabsf(v7);
    v10 = fabsf(v8);
    goto LABEL_6;
  }
  v13 = a3 * a7 + a2 * a6;
  v14 = a5 * a7 + a4 * a6;
  v15 = vabds_f32(v13, v14) < 0.0000001;
  return (float)(v13 - v14) > 0.0 || v15;
}

void sub_1D50C43F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D50C477C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D50C49B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50C4A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50C5020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D50C548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D50C57A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50C59D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D50C5D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D50C5FD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D50C6224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D50C657C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1D50C6A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D50C6B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50C6E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50C732C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50C7608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50C76BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50C78A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50C7E1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50C86F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1D50C8C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1D50C9128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1D50C9710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1D50C98E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50C9964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50C9B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50C9B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50CA1F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50CA440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D50CA5D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50CA8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D50CAB34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50CAF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50CB190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50CB5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D50CBF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50CC270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50CCC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_1D50CD104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50CD24C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50CDB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D50CDE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50CDEE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50CDF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D50CE848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50CED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1D50CF824(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void sub_1D50D008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D50D032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D50D063C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D50D0970(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TRShouldLogImages(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD block[4];
  id v9;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "persistentDomainForName:", CFSTR("com.apple.CoreRecognition"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "objectForKey:", CFSTR("LogAllImages"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "BOOLValue"))
  {

  }
  else
  {
    objc_msgSend(v1, "objectForKey:", CFSTR("ImageLogLevel"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "BOOLValue");

    if (!v4)
    {
      v6 = 0;
      TRShouldLogImages(void)::_shouldLogImages = 0;
      goto LABEL_6;
    }
  }
  dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___Z17TRShouldLogImagesv_block_invoke;
  block[3] = &unk_1E98DB338;
  v9 = v1;
  dispatch_async(v5, block);

  v6 = TRShouldLogImages(void)::_shouldLogImages;
LABEL_6:

  return v6;
}

void sub_1D50D0BAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void ___Z17TRShouldLogImagesv_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("LogAllImages"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "BOOLValue"))
  {
    TRShouldLogImages(void)::_shouldLogImages = 5;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("ImageLogLevel"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    TRShouldLogImages(void)::_shouldLogImages = objc_msgSend(v2, "integerValue");

  }
}

void sub_1D50D0C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D50D0F5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D1004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D110C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D1218(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D1394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D1454(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D18F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D1A20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D1B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D1C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CRLattice::CRLattice(uint64_t a1, void *a2, void *a3, uint64_t **a4, void *a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  id v19;
  id v20;
  id v21;
  id v22;
  id v25;

  v19 = a2;
  v25 = a3;
  v20 = a5;
  *(_QWORD *)a1 = 0;
  v21 = v19;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 8) = v21;
  *(_OWORD *)(a1 + 32) = 0u;
  std::vector<BreakPoint>::__init_with_size[abi:ne180100]<BreakPoint*,BreakPoint*>((_QWORD *)(a1 + 24), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4));
  *(double *)(a1 + 48) = a9;
  *(double *)(a1 + 56) = a10;
  v22 = v20;
  *(_QWORD *)(a1 + 72) = v22;
  *(_QWORD *)(a1 + 80) = a6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a6 + 113);
  objc_storeStrong((id *)(a1 + 16), a3);
  CRLattice::build((uint64_t *)a1, (int **)(a1 + 24), a7, a8, a11, *(double *)(a1 + 48));

  return a1;
}

{
  return CRLattice::CRLattice(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1D50D2728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  id *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a4);
  v7 = v6;

  std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CRLattice::build(uint64_t *a1, int **a2, int a3, int a4, int a5, double a6)
{
  _BOOL4 v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  double v27;
  void *v28;
  BOOL v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  uint64_t v37;
  void *v38;
  double v40;
  double v41;
  double v42;
  double v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  int *v48;
  int *v49;
  double v50;
  double v51;
  double v53;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  double v67;
  double v68;
  unint64_t v69;
  double v70;
  NSString *v71;
  double v72;
  void **v73;
  void *v74;
  double v75;
  double v76;
  void *v77;
  void *v78;
  double v79;
  uint64_t v80;
  void **v81;
  _QWORD *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int **v89;
  void *v90;
  int64x2_t v91;
  int *v93;
  void **v94[5];
  int64x2_t v95;
  void *__p;
  _BYTE *v97;
  uint64_t v98;
  std::string v99;
  std::string v100;
  uint64_t *v101;
  _QWORD *v102[2];
  const NetworkEdge *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v10 = (a5 & 0xFFFFFFFD) == 0;
  if ((a5 & 0xFFFFFFFD) != 0)
    v11 = 1.0;
  else
    v11 = 0.6;
  v12 = operator new();
  v89 = a2;
  v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2[1] - (char *)*a2) >> 3);
  v103 = (const NetworkEdge *)(v13 - 1);
  v102[0] = 0;
  v102[1] = 0;
  v101 = (uint64_t *)v102;
  std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(&v101, v102, (unint64_t *)&v103, (uint64_t *)&v103);
  *(_QWORD *)v12 = (char *)&latticePresets + 120 * a5;
  *(_OWORD *)(v12 + 8) = 0u;
  v85 = v12 + 8;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 64) = v12 + 72;
  *(_QWORD *)(v12 + 80) = 0;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  v86 = v12 + 136;
  CRCHSymbolMap::CRCHSymbolMap((CRCHSymbolMap *)(v12 + 136));
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 200) = v12 + 208;
  *(_BYTE *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 224) = v12 + 232;
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 256) = 0;
  *(_QWORD *)(v12 + 240) = 0;
  std::vector<CRCHNetworkNode>::resize(v12 + 40, v13);
  v14 = v101;
  if (v101 != (uint64_t *)v102)
  {
    do
    {
      CRCHNetwork::setFinal((uint64_t **)v12, v14[4]);
      v15 = (uint64_t *)v14[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v14[2];
          v29 = *v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (!v29);
      }
      v14 = v16;
    }
    while (v16 != (uint64_t *)v102);
  }
  *a1 = v12;
  std::__tree<CRCHuint128>::destroy((uint64_t)&v101, v102[0]);
  v18 = *a2;
  v17 = a2[1];
  if (v17 == *a2)
  {
    v103 = 0;
    v104 = 0;
    v105 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = dbl_1D513B450[v10];
    v22 = 40;
    do
    {
      if (*((_BYTE *)a1 + 64) && (v23 = *((double *)a1 + 7), v23 > 0.0))
      {
        v24 = a1[3];
        v25 = v24 + v19;
        v26 = *(void **)(v24 + v19 + 16);
        v27 = 0.0;
        if (v26)
        {
          v28 = *(void **)(v25 + 24);
          v29 = !v28 || v26 == v28;
          if (!v29)
          {
            objc_msgSend(v28, "bounds", v85, v86);
            v31 = v30;
            objc_msgSend(*(id *)(v25 + 16), "bounds");
            v33 = v32;
            objc_msgSend(*(id *)(v25 + 16), "bounds");
            v27 = fmax(v31 - (v33 + v34), 0.0);
            v23 = *((double *)a1 + 7);
          }
        }
        v35 = v27 / v23;
        if (a4)
        {
          v36 = *(void **)(v25 + 16);
          v37 = v24 + v19;
          v38 = *(void **)(v37 + 24);
          if (v36 == v38 || v38 == 0)
            goto LABEL_27;
          objc_msgSend(v36, "bounds");
          v42 = v41;
          objc_msgSend(*(id *)(v25 + 16), "bounds");
          v40 = v21;
          if (v42 / v43 > 0.4)
          {
            v44 = *(void **)(v37 + 24);
            if (!v44
              || (objc_msgSend(v44, "bounds", v21),
                  v46 = v45,
                  objc_msgSend(*(id *)(v37 + 24), "bounds"),
                  v40 = v21,
                  v46 / v47 > 0.4))
            {
LABEL_27:
              v40 = v11;
            }
          }
          v35 = v35 * v40;
        }
        *(double *)(*(_QWORD *)(*a1 + 40) + v22) = v35;
        v18 = *v89;
        v17 = v89[1];
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(*a1 + 40) + v22) = 0x3FF0000000000000;
      }
      ++v20;
      v22 += 56;
      v19 += 40;
    }
    while (v20 < 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (char *)v18) >> 3));
    v103 = 0;
    v104 = 0;
    v105 = 0;
    if (v18 != v17)
    {
      v91 = vdupq_n_s64(1uLL);
      v48 = v17;
      while (1)
      {
        v93 = v18;
        v49 = v18 + 10;
        v87 = v18 + 10;
        if (v18 + 10 == v48)
        {
          v84 = v48;
          goto LABEL_81;
        }
        v50 = 1.79769313e308;
        while (v93[1] == 1 && v49[1] == 1 && v49[2] != v93[2])
        {
LABEL_77:
          v49 += 10;
          v84 = v17;
          if (v49 == v48)
            goto LABEL_81;
        }
        v51 = Segmenter::imageRegionBetweenBreakpoints((double *)v93, v49, a1 + 3);
        if (v53 <= v50)
          break;
        v17 = v89[1];
        v84 = v17;
LABEL_81:
        v48 = v84;
        v29 = v87 == v84;
        v18 = v87;
        if (v29)
          goto LABEL_85;
      }
      Segmenter::textFeatureForRegion((id *)a1[10], *(CGRect *)&v51);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v90 = v55;
      if (v55)
      {
        objc_msgSend(v55, "subFeatures");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "objectAtIndexedSubscript:", 0);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "stringValueCandidates");
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v90, "subFeatures");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "objectAtIndexedSubscript:", 0);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v60, "candidateProbs");
        v61 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        objc_msgSend(*((id *)v93 + 3), "stringValueCandidates");
        v62 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(*((id *)v93 + 3), "candidateProbs");
        v58 = (void *)v62;
        v61 = (void *)objc_claimAutoreleasedReturnValue();
      }
      if (!objc_msgSend(v58, "count", v85) || !objc_msgSend(v61, "count"))
      {

        v58 = &unk_1E993F920;
        v61 = &unk_1E993F908;
      }
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:", v61, v58);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        CRLattice::augmentConfusableCandidates((uint64_t)v63, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "allKeys");
        v65 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v64, "allValues");
        v66 = objc_claimAutoreleasedReturnValue();

        v61 = (void *)v66;
      }
      else
      {
        v65 = v58;
      }
      v67 = CRLattice::undersegmentationFactor((CRLattice *)a1, *v93, *v49);
      if (v93[1] == 1 || (v68 = 1.0, v49[1] == 1))
        v68 = 0.15;
      v69 = 0;
      if (!v49[2])
        v50 = a6;
      v70 = v67 * v68;
      while (v69 < objc_msgSend(v65, "count"))
      {
        objc_msgSend(v65, "objectAtIndexedSubscript:", v69);
        v71 = (NSString *)objc_claimAutoreleasedReturnValue();
        CRLattice::symbolIDStringFromRepresentationString(v71, (uint64_t)&v100);
        v72 = *(double *)a1;
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v99, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
        else
          v99 = v100;
        v73 = (void **)CRCHSymbolMap::store((_QWORD *)(*(_QWORD *)&v72 + 136), (__int128 *)&v99);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        objc_msgSend(v61, "objectAtIndexedSubscript:", v69);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "doubleValue");
        v76 = v75;

        v77 = (void *)a1[9];
        objc_msgSend(v65, "objectAtIndexedSubscript:", v69);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v77) = objc_msgSend(v77, "isEqualToString:", v78);

        v79 = v70 * v76;
        if ((_DWORD)v77)
          v79 = 0.0;
        v80 = *v93;
        v81 = (void **)*v49;
        if (v79 > 1.0)
          v79 = 1.0;
        v94[0] = (void **)*v93;
        v94[1] = v81;
        v94[2] = v73;
        v94[3] = v73;
        v94[4] = *(void ***)&v79;
        v95 = v91;
        v97 = 0;
        v98 = 0;
        __p = 0;
        v82 = v104;
        if ((unint64_t)v104 >= v105)
        {
          v83 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v103, (const NetworkEdge *)v94);
        }
        else
        {
          *v104 = v80;
          v82[1] = v81;
          v82[2] = v73;
          v82[3] = v73;
          *((double *)v82 + 4) = v79;
          *(int64x2_t *)(v82 + 5) = vdupq_n_s64(1uLL);
          v82[8] = 0;
          v82[9] = 0;
          v82[7] = 0;
          std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v82 + 7, __p, (uint64_t)v97, (v97 - (_BYTE *)__p) >> 3);
          v83 = (uint64_t)(v82 + 10);
        }
        v104 = (_QWORD *)v83;
        if (__p)
        {
          v97 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);

        ++v69;
      }

      v17 = v89[1];
      v48 = v17;
      goto LABEL_77;
    }
  }
LABEL_85:
  CRCHNetwork::insertEdges((CRCHNetwork *)*a1, &v103);
  CRCHNetwork::convertAllEdgesToScores((CRCHNetwork *)*a1);
  v94[0] = (void **)&v103;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100](v94);
}

void sub_1D50D2F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CRCHSymbolMap *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42)
{
  uint64_t v42;

  a19 = v42 - 184;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void CRLattice::~CRLattice(id *this)
{
  CRCHNetwork *v2;
  void **v3;

  v2 = (CRCHNetwork *)*this;
  if (v2)
  {
    CRCHNetwork::~CRCHNetwork(v2);
    MEMORY[0x1D826E294]();
    *this = 0;
  }

  v3 = this + 3;
  std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&v3);

}

void CRLattice::symbolIDStringFromRepresentationString(NSString *a1@<X1>, uint64_t a2@<X8>)
{
  NSString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = -[NSString length](v4, "length");
  v6 = MEMORY[0x1E0C80A78](v5);
  v7 = &v9 - 2 * v6;
  v13 = 0;
  if (!-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v4, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, 0, v6, 0))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0CB2890], CFSTR("Conversion from representation string to symbol ID string failed"), 0);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v8);
  }
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, v7, (uint64_t)v7 + (v13 & 0xFFFFFFFFFFFFFFFCLL), v13 >> 2);
  iv2s((uint64_t)&v10, 0, a2);
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }

}

void sub_1D50D3314(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(_QWORD *)(v2 - 64) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

double CRLattice::undersegmentationFactor(CRLattice *this, int a2, int a3)
{
  double v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v3 = 1.0;
  if (a2 + 1 <= (a3 - 1))
  {
    v5 = a3 - 1;
    v6 = a2 + 1;
    v7 = 40 * a2;
    do
    {
      v8 = *((_QWORD *)this + 3) + v7;
      if (!*(_DWORD *)(v8 + 44))
      {
        objc_msgSend(*(id *)(v8 + 64), "bounds");
        v10 = v9;
        objc_msgSend(*(id *)(v8 + 56), "bounds");
        v12 = v11;
        objc_msgSend(*(id *)(v8 + 56), "bounds");
        v3 = v3
           * exp(fmax((v10 - (v12 + v13)) * (double)(unint64_t)objc_msgSend(*((id *)this + 1), "width"), 0.0)* -0.5);
      }
      ++v6;
      v7 += 40;
    }
    while (v6 <= v5);
  }
  return v3;
}

id CRLattice::getNetworkEdges(CRLattice *this)
{
  uint64_t v1;
  NetworkEdge *v3;
  NetworkEdge *v4;
  void *v5;
  NetworkEdge *v6;
  NetworkEdge *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  id v11;
  void *v12;
  CRLatticeEdge *v13;
  void *__p;
  _BYTE *v16;
  std::string __str;
  NetworkEdge *v18;
  NetworkEdge *v19;
  uint64_t v20;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v3 = *(NetworkEdge **)(v1 + 88);
    v4 = *(NetworkEdge **)(v1 + 96);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    __str.__r_.__value_.__s.__data_[8] = 0;
    if (v4 != v3)
    {
      std::vector<NetworkEdge>::__vallocate[abi:ne180100](&v18, 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4));
      v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>((uint64_t)&v20, v3, v4, v19);
    }
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v18;
    v7 = v19;
    if (v18 != v19)
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)this + 144) + 24 * *((_QWORD *)v6 + 2);
        if (*(char *)(v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
        }
        else
        {
          v10 = *(_OWORD *)v9;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
        }
        w2i32(&__str, (char **)&__p);
        v11 = objc_alloc(MEMORY[0x1E0CB3940]);
        v12 = (void *)objc_msgSend(v11, "initWithBytes:length:encoding:", __p, v16 - (_BYTE *)__p, 2617245952);
        v13 = -[CRLatticeEdge initWithSymbol:index:score:startNode:endNode:]([CRLatticeEdge alloc], "initWithSymbol:index:score:startNode:endNode:", v12, v8, *(_QWORD *)v6, *((_QWORD *)v6 + 1), *((double *)v6 + 4));
        objc_msgSend(v5, "addObject:", v13);

        if (__p)
        {
          v16 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v6 = (NetworkEdge *)((char *)v6 + 80);
        ++v8;
      }
      while (v6 != v7);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

void sub_1D50D35E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20)
{
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

id CRLattice::augmentConfusableCandidates(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double v7;
  uint64_t i;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t j;
  void *v16;
  void *v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t k;
  uint64_t v25;
  void *v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  double v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t m;
  void *v38;
  double v39;
  double v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t n;
  uint64_t v46;
  void *v47;
  double v48;
  double v49;
  void *v50;
  void *v52;
  id obj;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];
  _BYTE v77[128];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v2 = a2;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v70, v78, 16);
  v4 = v2;
  v5 = v2;
  if (!v3)
  {
LABEL_48:

    goto LABEL_49;
  }
  v6 = *(_QWORD *)v71;
  v7 = 0.0;
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v71 != v6)
        objc_enumerationMutation(v2);
      objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * i));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "doubleValue");
      v11 = v10;

      v7 = v7 + v11;
    }
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v70, v78, 16);
  }
  while (v3);

  v5 = v2;
  if (v7 > 0.0)
  {
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v4 = 0;
    v12 = +[藐 countByEnumeratingWithState:objects:count:](&unk_1E9944850, "countByEnumeratingWithState:objects:count:", &v66, v77, 16);
    if (!v12)
      goto LABEL_38;
    v13 = *(_QWORD *)v67;
    v14 = -INFINITY;
    do
    {
      for (j = 0; j != v12; ++j)
      {
        if (*(_QWORD *)v67 != v13)
          objc_enumerationMutation(&unk_1E9944850);
        v16 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * j);
        objc_msgSend(v2, "objectForKey:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "doubleValue");
        if (v18 > v14)
        {
          objc_msgSend(v17, "doubleValue");
          v14 = v19;
          v20 = v16;

          v4 = v20;
        }

      }
      v12 = +[藐 countByEnumeratingWithState:objects:count:](&unk_1E9944850, "countByEnumeratingWithState:objects:count:", &v66, v77, 16);
    }
    while (v12);
    if (v4 && v14 < 0.6)
    {
      +[藐 objectForKey:](&unk_1E9944940, "objectForKey:", v4);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v2, "mutableCopy");
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      obj = v52;
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v76, 16);
      if (v22)
      {
        v23 = *(_QWORD *)v63;
        do
        {
          for (k = 0; k != v22; ++k)
          {
            if (*(_QWORD *)v63 != v23)
              objc_enumerationMutation(obj);
            v25 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * k);
            objc_msgSend(obj, "objectForKeyedSubscript:", v25);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "doubleValue");
            v28 = v27;

            objc_msgSend(v21, "objectForKey:", v25);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = v29;
            if (!v29 || (objc_msgSend(v29, "doubleValue"), v14 > v31))
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v14 * v28);
              v32 = objc_claimAutoreleasedReturnValue();

              v30 = (void *)v32;
            }
            objc_msgSend(v21, "setObject:forKey:", v30, v25);

          }
          v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v76, 16);
        }
        while (v22);
      }

      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v33 = v21;
      v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v58, v75, 16);
      if (v34)
      {
        v35 = *(_QWORD *)v59;
        v36 = 0.0;
        do
        {
          for (m = 0; m != v34; ++m)
          {
            if (*(_QWORD *)v59 != v35)
              objc_enumerationMutation(v33);
            objc_msgSend(v33, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * m));
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "doubleValue");
            v40 = v39;

            v36 = v36 + v40;
          }
          v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v58, v75, 16);
        }
        while (v34);
      }
      else
      {
        v36 = 0.0;
      }

      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v33, "count"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v42 = v33;
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v54, v74, 16);
      if (v43)
      {
        v44 = *(_QWORD *)v55;
        do
        {
          for (n = 0; n != v43; ++n)
          {
            if (*(_QWORD *)v55 != v44)
              objc_enumerationMutation(v42);
            v46 = *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * n);
            objc_msgSend(v42, "objectForKeyedSubscript:", v46);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "doubleValue");
            v49 = v48;

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7 * v49 / v36);
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "setObject:forKeyedSubscript:", v50, v46);

          }
          v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v54, v74, 16);
        }
        while (v43);
      }

      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v41);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
LABEL_38:
      v5 = v2;
    }
    goto LABEL_48;
  }
LABEL_49:

  return v5;
}

void sub_1D50D3BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void CRLattice::kBestPaths(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  id v18;
  const void *RootCursor;
  const void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  _QWORD *v38;

  v18 = a8;
  v33 = v18;
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  if (a5)
    v20 = (const void *)LXLexiconCreateRootCursor();
  else
    v20 = 0;
  +[CRCHPatternNetwork rootCursorForContentType:inNetwork:](CRCHPatternNetwork, "rootCursorForContentType:inNetwork:", a7, v18);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = a3;
  v31 = a6;
  v21 = *(_QWORD *)a1;
  v22 = std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v37, *(_QWORD *)a1 + 64);
  v23 = (uint64_t *)v37[4];
  std::__tree<CRCHuint128>::destroy((uint64_t)v22, v38);
  CRCHNetwork::kBestPaths(v21, 0, v23, a2, a4, RootCursor, a5, v20, &v35, v18, v34, a7, v30, v31, &__block_literal_global_38, &__block_literal_global_94, *(_BYTE *)(a1 + 64), 0, 1u,
    1u,
    0,
    a10,
    a11);
  if (RootCursor)
    CFRelease(RootCursor);
  if (v20)
    CFRelease(v20);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  v24 = v35;
  v25 = v36;
  v37 = (void **)a9;
  LOBYTE(v38) = 0;
  if (v36 != v35)
  {
    v26 = 0x6DB6DB6DB6DB6DB7 * ((v36 - v35) >> 6);
    if (v26 >= 0x92492492492493)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHLatticePath>>(a9 + 16, v26);
    v28 = 0;
    *(_QWORD *)a9 = v27;
    *(_QWORD *)(a9 + 8) = v27;
    *(_QWORD *)(a9 + 16) = &v27[448 * v29];
    do
    {
      CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)&v27[v28], (const CRCHLatticePath *)(v24 + v28));
      v28 += 448;
    }
    while (v24 + v28 != v25);
    *(_QWORD *)(a9 + 8) = &v27[v28];
    v18 = v33;
  }
  v37 = (void **)&v35;
  std::vector<CRCHLatticePath>::__destroy_vector::operator()[abi:ne180100](&v37);

}

void sub_1D50D3EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

double ___ZN9CRLattice10kBestPathsEiPvPK10_LXLexiconPS1_bbP18CRCHPatternNetworkbRKNSt3__18functionIFvRKNS7_6vectorImNS7_9allocatorImEEEEddddddEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32);
}

double ___ZN9CRLattice10kBestPathsEiPvPK10_LXLexiconPS1_bbP18CRCHPatternNetworkbRKNSt3__18functionIFvRKNS7_6vectorImNS7_9allocatorImEEEEddddddEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  double v2;
  double *v3;
  double v4;
  double v5;
  double v6;

  v2 = *(double *)(a2 + 144);
  v3 = **(double ***)(a2 + 56);
  v4 = v3[8];
  if (v2 > v4)
  {
    *(double *)(a2 + 144) = v4;
    v2 = v4;
  }
  v5 = *(double *)(a2 + 128);
  if (v5 > v4)
  {
    *(double *)(a2 + 128) = v4;
    v5 = v4;
  }
  v6 = *(double *)(a2 + 176);
  if (v6 > v4)
  {
    *(double *)(a2 + 176) = v4;
    v6 = v4;
  }
  return v3[1] * (v5 + *(double *)(a2 + 120))
       + v3[2] * (v2 + *(double *)(a2 + 136))
       + v3[5] * (*(double *)(a2 + 184) + *(double *)(a2 + 192))
       + v3[3] * (v6 + *(double *)(a2 + 168))
       + v3[6] * *(double *)(a2 + 200);
}

id CRLattice::decodePath(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  id v33;
  uint64_t v34;
  CRTextFeature *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v89;
  void *v90;
  char *v91;
  void *v92;
  char *v94;
  unint64_t v95;
  void *v96;
  _QWORD *v97;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _QWORD *v104;
  void *__p;
  _BYTE *v106;
  std::string v107;
  void *v108;
  uint64_t *v109;
  uint64_t *v110;
  char *v111;
  char *v112;
  std::string __str;
  char *v114;
  char *v115;
  unint64_t v116;

  v8 = 0x1E0C99000uLL;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v97 = (_QWORD *)a2;
  std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>(&v114, *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 4);
  v9 = v115;
  v10 = v115 - v114;
  if (v115 == v114)
  {
    v11 = ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3) - 1;
    if ((unint64_t)v115 >= v116)
    {
      v13 = v10 >> 4;
      v14 = v116 - (_QWORD)v114;
      if ((uint64_t)(v116 - (_QWORD)v114) >> 3 <= (unint64_t)((v10 >> 4) + 1))
        v15 = v13 + 1;
      else
        v15 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)&v116, v16);
      v18 = &v17[16 * v13];
      v20 = &v17[16 * v19];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = v11;
      v12 = v18 + 16;
      v22 = v114;
      v21 = v115;
      if (v115 != v114)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v21 - 1);
          v18 -= 16;
          v21 -= 16;
        }
        while (v21 != v22);
        v21 = v114;
      }
      v114 = v18;
      v115 = v12;
      v116 = (unint64_t)v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v115 = 0;
      *((_QWORD *)v9 + 1) = v11;
      v12 = v9 + 16;
    }
    v115 = v12;
  }
  if (a4)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v90 = 0;
  }
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v89 = 0;
  }
  v23 = v114;
  v91 = v115;
  if (v114 != v115)
  {
    v24 = 0;
    v103 = a5;
    v95 = 0;
    do
    {
      v25 = *((_QWORD *)v23 + 1);
      objc_msgSend(MEMORY[0x1E0CB37A0], "string");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      if (a4)
      {
        objc_msgSend(*(id *)(v8 + 3560), "array");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v96 = 0;
      }
      if (objc_msgSend(v99, "length"))
        objc_msgSend(v99, "appendString:", CFSTR(" "));
      v94 = v23;
      if (v25)
      {
        v26 = 0;
        v27 = v24;
        do
        {
          v100 = v25;
          v101 = v27 + 1;
          v28 = (unint64_t *)(*(_QWORD *)(*a1 + 40) + 56 * *(_QWORD *)(v97[8] + 8 * v27));
          v29 = v28[2] + *(_QWORD *)(v97[11] + 8 * (v27 + 1));
          v30 = *(_QWORD *)(*a1 + 88);
          v104 = (_QWORD *)(v30 + 80 * v29);
          v31 = *(_QWORD *)(*a1 + 144) + 24 * v104[2];
          if (*(char *)(v31 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v31, *(_QWORD *)(v31 + 8));
          }
          else
          {
            v32 = *(_OWORD *)v31;
            __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 16);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v32;
          }
          w2i32(&__str, &v111);
          v33 = objc_alloc(MEMORY[0x1E0CB3940]);
          v34 = objc_msgSend(v33, "initWithBytes:length:encoding:", v111, v112 - v111, 2617245952);

          objc_msgSend(v99, "appendString:", v34);
          v102 = (void *)v34;
          if (a4)
          {
            v35 = objc_alloc_init(CRTextFeature);
            -[CRTextFeature setStringValue:](v35, "setStringValue:", v34);
            v36 = v30 + 80 * v29;
            v38 = *(_QWORD *)(v36 + 8);
            v37 = (_QWORD *)(v36 + 8);
            -[CRTextFeature setBounds:](v35, "setBounds:", Segmenter::imageRegionBetweenBreakpoints((double *)(a1[3] + 40 * *v104), (int *)(a1[3] + 40 * v38), a1 + 3));
            -[CRTextFeature bounds](v35, "bounds");
            -[CRTextFeature setTopLeft:](v35, "setTopLeft:");
            -[CRTextFeature bounds](v35, "bounds");
            v40 = v39;
            -[CRTextFeature bounds](v35, "bounds");
            v42 = v41;
            -[CRTextFeature bounds](v35, "bounds");
            -[CRTextFeature setBottomLeft:](v35, "setBottomLeft:", v40, v42 + v43);
            -[CRTextFeature bounds](v35, "bounds");
            v45 = v44;
            -[CRTextFeature bounds](v35, "bounds");
            v47 = v46;
            -[CRTextFeature bounds](v35, "bounds");
            -[CRTextFeature setTopRight:](v35, "setTopRight:", v45 + v47);
            -[CRTextFeature bounds](v35, "bounds");
            v49 = v48;
            -[CRTextFeature bounds](v35, "bounds");
            v51 = v50;
            -[CRTextFeature bounds](v35, "bounds");
            v53 = v52;
            -[CRTextFeature bounds](v35, "bounds");
            -[CRTextFeature setBottomRight:](v35, "setBottomRight:", v49 + v51, v53 + v54);
            v108 = 0;
            v109 = 0;
            v110 = 0;
            v55 = *v28;
            if (*v28)
            {
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = *(_QWORD *)(*a1 + 88) + 80 * (v28[2] + v57);
                if (*(_QWORD *)(v58 + 8) == *v37)
                {
                  if (v56 >= v110)
                  {
                    v59 = ((char *)v56 - (_BYTE *)v108) >> 3;
                    if ((unint64_t)(v59 + 1) >> 61)
                      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                    v60 = ((char *)v110 - (_BYTE *)v108) >> 2;
                    if (v60 <= v59 + 1)
                      v60 = v59 + 1;
                    if ((unint64_t)((char *)v110 - (_BYTE *)v108) >= 0x7FFFFFFFFFFFFFF8)
                      v61 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v61 = v60;
                    if (v61)
                      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v110, v61);
                    else
                      v62 = 0;
                    v63 = (uint64_t *)&v62[8 * v59];
                    *v63 = v58;
                    v56 = v63 + 1;
                    v65 = (char *)v108;
                    v64 = (char *)v109;
                    if (v109 != v108)
                    {
                      do
                      {
                        v66 = *((_QWORD *)v64 - 1);
                        v64 -= 8;
                        *--v63 = v66;
                      }
                      while (v64 != v65);
                      v64 = (char *)v108;
                    }
                    v108 = v63;
                    v109 = v56;
                    v110 = (uint64_t *)&v62[8 * v61];
                    if (v64)
                      operator delete(v64);
                  }
                  else
                  {
                    *v56++ = v58;
                  }
                  v109 = v56;
                  v55 = *v28;
                }
                ++v57;
              }
              while (v57 < v55);
              v67 = (uint64_t *)v108;
            }
            else
            {
              v56 = 0;
              v67 = 0;
            }
            v68 = 126 - 2 * __clz(v56 - v67);
            if (v56 == v67)
              v69 = 0;
            else
              v69 = v68;
            std::__introsort<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**,false>((uint64_t)v67, v56, v69, 1);
            objc_msgSend(*(id *)(v8 + 3560), "array");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v8 + 3560), "array");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            -[CRTextFeature setBestCandidateIndex:](v35, "setBestCandidateIndex:", -1);
            v72 = (uint64_t *)v108;
            v73 = v109;
            if (v108 != v109)
            {
              v74 = 0;
              do
              {
                v75 = *v72;
                if (objc_msgSend(v70, "count") == v103)
                  break;
                v76 = *(_QWORD *)(*a1 + 144) + 24 * *(_QWORD *)(v75 + 16);
                if (*(char *)(v76 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v76, *(_QWORD *)(v76 + 8));
                }
                else
                {
                  v77 = *(_OWORD *)v76;
                  v107.__r_.__value_.__r.__words[2] = *(_QWORD *)(v76 + 16);
                  *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v77;
                }
                w2i32(&v107, (char **)&__p);
                v78 = objc_alloc(MEMORY[0x1E0CB3940]);
                v79 = (void *)objc_msgSend(v78, "initWithBytes:length:encoding:", __p, v106 - (_BYTE *)__p, 2617245952);
                objc_msgSend(v70, "addObject:", v79);
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", __exp10(-*(double *)(v75 + 32)));
                v80 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v71, "addObject:", v80);

                if ((_QWORD *)v75 == v104)
                  -[CRTextFeature setBestCandidateIndex:](v35, "setBestCandidateIndex:", v74);

                if (__p)
                {
                  v106 = __p;
                  operator delete(__p);
                }
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v107.__r_.__value_.__l.__data_);
                ++v72;
                ++v74;
              }
              while (v72 != v73);
            }
            -[CRTextFeature setStringValueCandidates:](v35, "setStringValueCandidates:", v70);
            -[CRTextFeature setCandidateProbs:](v35, "setCandidateProbs:", v71);
            objc_msgSend(v96, "addObject:", v35);

            if (v108)
            {
              v109 = (uint64_t *)v108;
              operator delete(v108);
            }

            v8 = 0x1E0C99000;
          }
          if (v111)
          {
            v112 = v111;
            operator delete(v111);
          }
          v24 = v101;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v81 = v102;
          v82 = objc_msgSend(v102, "length");
          v27 = v101;
          v26 = v102;
          v25 = v100 - v82;
        }
        while (v100 != v82);
      }
      else
      {
        v81 = 0;
      }
      objc_msgSend(v92, "addObject:", v99);
      if (a4)
        objc_msgSend(v90, "addObject:", v96);
      if (a3)
      {
        v83 = (v95 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v84 = 3;
        if ((*(_QWORD *)(v97[48] + v83) & (1 << v95)) == 0)
          v84 = 1;
        if ((*(_QWORD *)(v97[51] + v83) & (1 << v95)) != 0)
          v85 = v84 | 4;
        else
          v85 = v84;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v85);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v89, "addObject:", v86);

      }
      ++v95;

      v23 = v94 + 16;
    }
    while (v94 + 16 != v91);
  }
  if (a4)
  {
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v90);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v89);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v92);
  v87 = (void *)objc_claimAutoreleasedReturnValue();

  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }

  return v87;
}

void sub_1D50D484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;
  void *v41;

  v41 = *(void **)(v39 - 144);
  if (v41)
  {
    *(_QWORD *)(v39 - 136) = v41;
    operator delete(v41);
  }

  _Unwind_Resume(a1);
}

_QWORD *std::vector<BreakPoint>::__init_with_size[abi:ne180100]<BreakPoint*,BreakPoint*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<BreakPoint>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BreakPoint>,BreakPoint*,BreakPoint*,BreakPoint*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D50D4A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<BreakPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BreakPoint>,BreakPoint*,BreakPoint*,BreakPoint*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_DWORD *)(v4 + 8) = *((_DWORD *)v6 + 2);
      *(_QWORD *)v4 = v7;
      *(_QWORD *)(v4 + 16) = (id)v6[2];
      *(_QWORD *)(v4 + 24) = (id)v6[3];
      *(_QWORD *)(v4 + 32) = v6[4];
      v4 += 40;
      v6 += 5;
    }
    while (v6 != a3);
    v12 = v4;
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<BreakPoint>,BreakPoint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<BreakPoint>,BreakPoint*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<BreakPoint>,std::reverse_iterator<BreakPoint*>,std::reverse_iterator<BreakPoint*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<BreakPoint>,std::reverse_iterator<BreakPoint*>,std::reverse_iterator<BreakPoint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {

      v6 -= 40;
    }
    while (v6 != a5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  double v90;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(double *)(v38 + 32) < *(double *)(*v8 + 32))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(double *)(v43 + 32) < *(double *)(v44 + 32))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(double *)(*v42 + 32);
          if (v47 < *(double *)(*v41 + 32))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(double *)(*v40 + 32))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(double *)(*v8 + 32))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(double *)(v55 + 32);
                if (v57 < *(double *)(v56 + 32))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v56;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (v57 >= *(double *)(v56 + 32))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v50;
              v90 = *(double *)(v88 + 32);
              if (v90 < *(double *)(v89 + 32))
              {
                do
                {
                  *v50 = v89;
                  v89 = *(v50 - 2);
                  --v50;
                }
                while (v90 < *(double *)(v89 + 32));
                *v50 = v88;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                if (2 * v63 + 2 < (uint64_t)v10 && *(double *)(*v65 + 32) < *(double *)(v65[1] + 32))
                {
                  ++v65;
                  v64 = 2 * v63 + 2;
                }
                v66 = &v8[v63];
                v67 = *v65;
                v68 = *v66;
                v69 = *(double *)(*v66 + 32);
                if (*(double *)(*v65 + 32) >= v69)
                {
                  do
                  {
                    v70 = v65;
                    *v66 = v67;
                    if (v61 < v64)
                      break;
                    v71 = 2 * v64;
                    v64 = (2 * v64) | 1;
                    v65 = &v8[v64];
                    v72 = v71 + 2;
                    if (v72 < (uint64_t)v10)
                    {
                      result = *v65;
                      if (*(double *)(*v65 + 32) < *(double *)(v65[1] + 32))
                      {
                        ++v65;
                        v64 = v72;
                      }
                    }
                    v67 = *v65;
                    v66 = v70;
                  }
                  while (*(double *)(*v65 + 32) >= v69);
                  *v70 = v68;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v73 = (unint64_t)v9 >> 3;
            do
            {
              v74 = 0;
              v75 = *v8;
              v76 = v8;
              do
              {
                v77 = v76;
                v76 += v74 + 1;
                v78 = 2 * v74;
                v74 = (2 * v74) | 1;
                v79 = v78 + 2;
                if (v79 < v73 && *(double *)(*v76 + 32) < *(double *)(v76[1] + 32))
                {
                  ++v76;
                  v74 = v79;
                }
                *v77 = *v76;
              }
              while (v74 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v75;
              }
              else
              {
                *v76 = *a2;
                *a2 = v75;
                v80 = (char *)v76 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v76;
                  v85 = *(double *)(*v76 + 32);
                  if (*(double *)(*v82 + 32) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v76 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v76 = v86;
                    }
                    while (*(double *)(*v82 + 32) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v73-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(double *)(v14 + 32);
          if (*(double *)(*(v7 - 1) + 32) < v15)
            goto LABEL_12;
          if (v15 >= *(double *)(*(a2 - 1) + 32))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(double *)(*v8 + 32));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(double *)(v29 + 32));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(double *)(v32 + 32));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(double *)(v35 + 32));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(double *)(v36 + 32));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(double *)(v14 + 32);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(double *)(v17 + 32) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(double *)(v21 + 32) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(double *)(v20 + 32) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(double *)(v25 + 32) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(double *)(v26 + 32) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(double *)(*a2 + 32);
  v6 = *(double *)(*result + 32);
  v7 = *a3;
  v8 = *(double *)(*a3 + 32);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(double *)(*a2 + 32) < *(double *)(*result + 32))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(double *)(*a3 + 32) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(double *)(v6 + 32) < *(double *)(*a1 + 32))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(double *)(v21 + 32) < *(double *)(v22 + 32))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(double *)(*v20 + 32);
        if (v25 < *(double *)(*v19 + 32))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(double *)(*v18 + 32))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(double *)(*a1 + 32))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(double *)(*v9 + 32);
    if (v14 < *(double *)(*v8 + 32))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(double *)(v13 + 32))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRLattice::decodePath(CRCHLatticePath const&,NSArray<NSNumber *> * {__autoreleasing}*,NSArray* {__autoreleasing}*<NSArray*<CRTextFeature *>>,int)::$_0 &,NetworkEdge const**>(a1, a2, a3);
  v9 = *a3;
  if (*(double *)(*a4 + 32) < *(double *)(*a3 + 32))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(double *)(*a3 + 32) < *(double *)(*a2 + 32))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(double *)(*a2 + 32) < *(double *)(*a1 + 32))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_1D50D5924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D5A00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D5A94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D5D90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D50D6754(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1D50D705C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D50D7130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50D7878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{
  void *v46;
  void *v47;

  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void sub_1D50D7C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50D8040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1D50D8520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Segmenter *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a54, 8);
  Segmenter::~Segmenter(a10);

  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__16(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t ***v4;
  uint64_t ***v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  _QWORD *result;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[3];
  char v21;
  _QWORD *v22;
  _QWORD v23[2];
  char v24;
  _QWORD v25[3];
  char v26;
  _QWORD *v27;
  _QWORD *v28;

  v3 = a1;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v4 = *(uint64_t ****)(a2 + 48);
  v5 = *(uint64_t ****)(a2 + 56);
  if (v5 != v4)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 8), v6);
    v3[6] = v7;
    v3[7] = v7;
    v19 = v3;
    v3[8] = &v7[3 * v8];
    v22 = v7;
    v23[0] = v7;
    v20[0] = v3 + 8;
    v20[1] = &v22;
    v20[2] = v23;
    v21 = 0;
    v9 = v7;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v10 = *v4;
      v11 = v4[1];
      v23[1] = v9;
      v24 = 0;
      if (v11 != v10)
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * (v11 - v10);
        if (v12 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
        v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v9 + 2), v12);
        *v9 = v13;
        v9[1] = v13;
        v9[2] = &v13[3 * v14];
        v27 = v13;
        v28 = v13;
        v25[0] = v9 + 2;
        v25[1] = &v27;
        v25[2] = &v28;
        v26 = 0;
        v15 = v13;
        do
        {
          *v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
          std::vector<BreakPoint>::__init_with_size[abi:ne180100]<BreakPoint*,BreakPoint*>(v15, *v10, v10[1], 0xCCCCCCCCCCCCCCCDLL * (v10[1] - *v10));
          v15 = v28 + 3;
          v28 += 3;
          v10 += 3;
        }
        while (v10 != v11);
        v26 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BreakPoint>>,std::vector<BreakPoint>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v25);
        v9[1] = v15;
        v9 = (_QWORD *)v23[0];
      }
      v4 += 3;
      v9 += 3;
      v23[0] = v9;
    }
    while (v4 != v5);
    v21 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<BreakPoint>>>,std::vector<std::vector<BreakPoint>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v20);
    v3 = v19;
    v19[7] = v9;
  }
  v3[9] = *(id *)(a2 + 72);
  v3[10] = *(id *)(a2 + 80);
  v3[11] = *(id *)(a2 + 88);
  v3[12] = *(id *)(a2 + 96);
  v16 = *(id *)(a2 + 104);
  v3[14] = 0;
  v3[13] = v16;
  v3[15] = 0;
  v3[16] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3 + 14, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3);
  v3[17] = 0;
  v3[18] = 0;
  v3[19] = 0;
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3 + 17, *(const void **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 3);
  v18 = *(_QWORD *)(a2 + 160);
  *((_DWORD *)v3 + 42) = *(_DWORD *)(a2 + 168);
  v3[20] = v18;
  return result;
}

void sub_1D50D8878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  uint64_t v22;
  void **v23;
  void *v25;

  v25 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v22 + 120) = v25;
    operator delete(v25);
  }

  a22 = a10;
  std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void sub_1D50D8EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D50D9038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BreakPoint>>,std::vector<BreakPoint>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 8);
    v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      v5 = v4;
      std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<BreakPoint>>>,std::vector<std::vector<BreakPoint>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 8);
    v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      v5 = v4;
      std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

uint64_t nms::PyramidNMSConfig::PyramidNMSConfig(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(_WORD *)(result + 32) = 267;
  *(_BYTE *)(result + 34) = 0;
  *(_QWORD *)(result + 40) = 0x3FE3333333333333;
  *(_QWORD *)(result + 80) = 0xBFF0000000000000;
  *(_QWORD *)(result + 96) = 50;
  *(_DWORD *)(result + 120) = 16843009;
  *(_WORD *)(result + 124) = 257;
  *(_QWORD *)(result + 128) = 3;
  *(_QWORD *)(result + 144) = 0x3FB0000000000000;
  *(_BYTE *)(result + 48) = 1;
  *(_OWORD *)(result + 56) = xmmword_1D513B5F0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 88) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(result + 104) = _Q0;
  *(_WORD *)(result + 136) = 0;
  *(_BYTE *)(result + 152) = 1;
  *(_WORD *)(result + 176) = 256;
  *(_OWORD *)(result + 184) = xmmword_1D513B600;
  *(_OWORD *)(result + 216) = xmmword_1D513B600;
  *(_QWORD *)(result + 160) = 0x3FEB333333333333;
  *(_QWORD *)(result + 168) = 0;
  *(_OWORD *)(result + 200) = xmmword_1D513B610;
  *(_OWORD *)(result + 232) = xmmword_1D513B610;
  *(_OWORD *)(result + 248) = xmmword_1D513B620;
  *(_QWORD *)(result + 264) = 0x3FEB333333333333;
  *(_OWORD *)(result + 272) = xmmword_1D513B630;
  *(_OWORD *)(result + 288) = xmmword_1D513B630;
  *(_OWORD *)(result + 304) = xmmword_1D513A890;
  *(_OWORD *)(result + 320) = xmmword_1D513B640;
  *(_QWORD *)result = &off_1E98D9320;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  if (a3 <= 1)
    *(_QWORD *)(result + 24) = 0;
  return result;
}

double nms::PyramidNMSConfig::PyramidNMSConfig(nms::PyramidNMSConfig *this, const PyramidNMSConfig *a2)
{
  double result;

  *(_QWORD *)this = &off_1E98D9320;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = 267;
  *((_BYTE *)this + 34) = 0;
  *((_QWORD *)this + 5) = 0x3FE3333333333333;
  *((_BYTE *)this + 48) = 1;
  *(_OWORD *)((char *)this + 56) = xmmword_1D513B5F0;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = 0xBFF0000000000000;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 12) = 50;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 104) = _Q0;
  *((_DWORD *)this + 30) = 16843009;
  *((_WORD *)this + 62) = 257;
  *((_QWORD *)this + 16) = 3;
  *((_WORD *)this + 68) = 0;
  *((_QWORD *)this + 18) = 0x3FB0000000000000;
  *((_BYTE *)this + 152) = 1;
  *((_QWORD *)this + 20) = 0x3FEB333333333333;
  *((_QWORD *)this + 21) = 0;
  *((_WORD *)this + 88) = 256;
  *(_OWORD *)((char *)this + 184) = xmmword_1D513B600;
  *(_OWORD *)((char *)this + 200) = xmmword_1D513B610;
  *(_OWORD *)((char *)this + 216) = xmmword_1D513B600;
  *(_OWORD *)((char *)this + 232) = xmmword_1D513B610;
  *(_OWORD *)((char *)this + 248) = xmmword_1D513B620;
  *(_OWORD *)((char *)this + 264) = xmmword_1D513B650;
  *(_OWORD *)((char *)this + 280) = xmmword_1D513B650;
  *(_OWORD *)((char *)this + 296) = xmmword_1D513B660;
  *(_OWORD *)((char *)this + 312) = xmmword_1D513B670;
  *((_QWORD *)this + 41) = 0x3FEB333333333333;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&a2->methodType;
  *((_WORD *)this + 16) = *(_WORD *)&a2->scoreMapMinThreshold;
  *((_QWORD *)this + 3) = *(_QWORD *)&a2->scoreMinThreshold;
  *((_BYTE *)this + 34) = a2->scoreUseArea;
  *((_QWORD *)this + 5) = *(_QWORD *)&a2->scoreAggregationScalingFactor;
  *((_BYTE *)this + 48) = a2->scoreUseNumSubDatums;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)&a2->scoreNumSubDatumsUpperClip;
  *((_BYTE *)this + 72) = a2->ignoreOrphansInFullTile;
  *((_BYTE *)this + 88) = a2->computeIntrascaleGeometricRelationships;
  *((_QWORD *)this + 12) = a2->intersectionNumSamples;
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)&a2->iouMinThresholdToAcceptContainedDatum;
  *((_DWORD *)this + 30) = *(_DWORD *)&a2->pendingInvalidRejectCompetingDatums;
  *((_WORD *)this + 62) = *(_WORD *)&a2->processOverlap;
  *((_BYTE *)this + 152) = a2->useOverlappingWordsInProcessingContainment;
  *((_QWORD *)this + 16) = a2->favorSubDatumUndersegmentationInProcessingCoincidence;
  *((_WORD *)this + 68) = *(_WORD *)&a2->favorLargerAreaInProcessingCoincidence;
  *((_QWORD *)this + 18) = *(_QWORD *)&a2->datumMinHeightRatioToUseFullTile;
  *((_BYTE *)this + 152) = a2->useOverlappingWordsInProcessingContainment;
  *((_QWORD *)this + 20) = *(_QWORD *)&a2->minValidCosAngleInDistributionCheckInProcessingContainment;
  *((_QWORD *)this + 21) = a2->favorSubDatumUndersegmentationInProcessingContainment;
  *((_BYTE *)this + 176) = a2->favorLargerAreaInProcessingContainment;
  *((_BYTE *)this + 177) = a2->favorFullTileInProcessingContainment;
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)&a2->heightRatioFineToFullMinThresholdFavorFullTileInProcessingContainment;
  *(_OWORD *)((char *)this + 200) = *(_OWORD *)&a2->widthRatioFineToFullMinThresholdFavorFullTileInProcessingContainment;
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)&a2->heightRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment;
  *(_OWORD *)((char *)this + 232) = *(_OWORD *)&a2->widthRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment;
  *(_OWORD *)((char *)this + 248) = *(_OWORD *)&a2->favorFullTileInProcessingOverlap;
  *(_OWORD *)((char *)this + 264) = *(_OWORD *)&a2->coincidenceIOMinMinThreshold;
  *(_OWORD *)((char *)this + 280) = *(_OWORD *)&a2->containmentIOMinMinThreshold;
  *(_OWORD *)((char *)this + 296) = *(_OWORD *)&a2->constitutionIOMinMinThreshold;
  *(_OWORD *)((char *)this + 312) = *(_OWORD *)&a2->overlapIOUMaxThreshold;
  result = a2->overlapIOMinMaxThreshold;
  *((double *)this + 41) = result;
  return result;
}

double nms::PyramidNMSConfigV3::PyramidNMSConfigV3(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = nms::PyramidNMSConfig::PyramidNMSConfig(a1, a2, a3);
  *(_QWORD *)v3 = &off_1E98D9340;
  *(_QWORD *)(v3 + 96) = 20;
  result = 0.02;
  *(_OWORD *)(v3 + 104) = xmmword_1D513B260;
  *(_QWORD *)(v3 + 304) = 0x3FC999999999999ALL;
  *(_QWORD *)(v3 + 144) = 0x3FA1EB851EB851ECLL;
  *(_BYTE *)(v3 + 34) = 1;
  *(_QWORD *)(v3 + 40) = 0x4004000000000000;
  *(_QWORD *)(v3 + 160) = 0x3FE6666666666666;
  *(_QWORD *)(v3 + 216) = 0x3FE6666666666666;
  *(_QWORD *)(v3 + 184) = 0x3FE0000000000000;
  return result;
}

{
  uint64_t v3;
  double result;

  v3 = nms::PyramidNMSConfig::PyramidNMSConfig(a1, a2, a3);
  *(_QWORD *)v3 = &off_1E98D9340;
  *(_QWORD *)(v3 + 96) = 20;
  result = 0.02;
  *(_OWORD *)(v3 + 104) = xmmword_1D513B260;
  *(_QWORD *)(v3 + 304) = 0x3FC999999999999ALL;
  *(_QWORD *)(v3 + 144) = 0x3FA1EB851EB851ECLL;
  *(_BYTE *)(v3 + 34) = 1;
  *(_QWORD *)(v3 + 40) = 0x4004000000000000;
  *(_QWORD *)(v3 + 160) = 0x3FE6666666666666;
  *(_QWORD *)(v3 + 216) = 0x3FE6666666666666;
  *(_QWORD *)(v3 + 184) = 0x3FE0000000000000;
  return result;
}

void nms::PyramidNMSConfig::~PyramidNMSConfig(nms::PyramidNMSConfig *this)
{
  JUMPOUT(0x1D826E294);
}

void nms::PyramidNMSConfigV3::~PyramidNMSConfigV3(nms::PyramidNMSConfigV3 *this)
{
  JUMPOUT(0x1D826E294);
}

void CRDetectorOutputMaps::init(CRDetectorOutputMaps *this, unint64_t a2, unint64_t a3, char a4, int a5)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void ***v16;
  double v17;
  double v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  CGSize v23;
  CGSize v24;
  CGSize v25;

  v10 = a3 * a2;
  v11 = 4 * a2;
  v12 = operator new();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = a3;
  if (v10)
    *(_QWORD *)v12 = malloc_type_calloc(v10, 4uLL, 0xF2EF0BD8uLL);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)this, (void **)v12);
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = a3;
  if (v10)
    *(_QWORD *)v13 = malloc_type_calloc(v10, 4uLL, 0xF2EF0BD8uLL);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)this + 4, (void **)v13);
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = v11;
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = a3;
  if (v10)
    *(_QWORD *)v14 = malloc_type_calloc(v10, 4uLL, 0xF2EF0BD8uLL);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)this + 5, (void **)v14);
  if ((a4 & 1) != 0)
  {
    +[CRScriptCategoryV1 supportedCategories](CRScriptCategoryV1, "supportedCategories");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void ***)objc_msgSend(v15, "count");
    v17 = (double)(a3 >> 1);
    v18 = (double)(a2 >> 1);
    v23.width = v18;
    v23.height = v17;
    CRDetectorOutputMaps::createMaps(v16, v23, &v20);
    std::vector<std::unique_ptr<CRImageBuffer>>::__vdeallocate((void ****)this + 1);
    *(_OWORD *)((char *)this + 8) = v20;
    *((_QWORD *)this + 3) = v21;
    v21 = 0;
    v20 = 0uLL;
    v22 = (void **)&v20;
    std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v22);

  }
  else
  {
    v18 = (double)(a2 >> 1);
    v17 = (double)(a3 >> 1);
  }
  objc_opt_self();
  v24.width = v18;
  v24.height = v17;
  CRDetectorOutputMaps::createMaps((void ***)9, v24, &v20);
  std::vector<std::unique_ptr<CRImageBuffer>>::__vdeallocate((void ****)this + 7);
  *(_OWORD *)((char *)this + 56) = v20;
  *((_QWORD *)this + 9) = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = (void **)&v20;
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (a5)
  {
    v19 = +[CRNeuralTextDetectorV3 numSupportedTextType]();
    v25.width = v18;
    v25.height = v17;
    CRDetectorOutputMaps::createMaps((void ***)v19, v25, &v20);
    std::vector<std::unique_ptr<CRImageBuffer>>::__vdeallocate((void ****)this + 10);
    *((_OWORD *)this + 5) = v20;
    *((_QWORD *)this + 12) = v21;
    v21 = 0;
    v20 = 0uLL;
    v22 = (void **)&v20;
    std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

void sub_1D50D9FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D826E294](v1, 0x1080C40ABB4582ELL);
  _Unwind_Resume(a1);
}

void ***CRDetectorOutputMaps::createMaps@<X0>(void ***this@<X0>, CGSize a2@<0:D0, 8:D1>, _QWORD *a3@<X8>)
{
  void ***v3;
  double height;
  double width;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (this)
  {
    v3 = this;
    if ((unint64_t)this >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    height = a2.height;
    width = a2.width;
    v7 = 8 * (_QWORD)this;
    v8 = (char *)operator new(8 * (_QWORD)this);
    *a3 = v8;
    a3[2] = &v8[8 * (_QWORD)v3];
    bzero(v8, 8 * (_QWORD)v3);
    v9 = 0;
    a3[1] = &v8[v7];
    do
    {
      v10 = operator new();
      *(_QWORD *)(v10 + 16) = (unint64_t)width;
      *(_QWORD *)(v10 + 24) = 4 * (unint64_t)width;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = (unint64_t)height;
      if ((unint64_t)width * (unint64_t)height)
        *(_QWORD *)v10 = malloc_type_calloc((unint64_t)width * (unint64_t)height, 4uLL, 0xF2EF0BD8uLL);
      this = std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(*a3 + v9), (void **)v10);
      v9 += 8;
      v3 = (void ***)((char *)v3 - 1);
    }
    while (v3);
  }
  return this;
}

void sub_1D50DA108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void CRDetectorOutputMaps::scaleMaps(CRDetectorOutputMaps *this, int a2)
{
  const float **v3;
  float *v4;
  float *v5;
  uint64_t i;
  float v7;
  float __B;

  v3 = *(const float ***)this;
  v4 = (float *)**((_QWORD **)this + 4);
  v5 = (float *)**((_QWORD **)this + 5);
  __B = 5.0;
  vDSP_vsdiv(*v3, 1, &__B, (float *)*v3, 1, (_QWORD)v3[1] * (_QWORD)v3[2]);
  if (a2)
  {
    for (i = (_QWORD)v3[2] * (_QWORD)v3[1]; i; --i)
    {
      v7 = *v4;
      if (*v4 > 0.1 && *v5 > 0.1)
      {
        if (v7 < *v5)
          v7 = *v5;
        *v5 = v7;
        *v4 = v7;
      }
      ++v5;
      ++v4;
    }
  }
}

void CRDetectorOutputMaps::aggregateMaps(CRDetectorOutputMaps *this, CRTextDetectorModelV3Output *a2, const CGSize *a3, const CGPoint *a4)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  double width;
  double height;
  void **v23;
  void *v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  vDSP_Length v36;
  float *v37;
  _BYTE *v38;
  uint64_t v39;
  float *v40;
  _BYTE *v41;
  vDSP_Length v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void **v52;
  void *v53;
  double v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  vDSP_Length v62;
  float *v63;
  _BYTE *v64;
  uint64_t v65;
  float *v66;
  _BYTE *v67;
  vDSP_Length v68;
  float *v69;
  void *v70;
  double v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  vDSP_Length v79;
  float *v80;
  _BYTE *v81;
  uint64_t v82;
  float *v83;
  _BYTE *v84;
  vDSP_Length v85;
  float *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  double v92;
  int v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  const float *v97;
  int v98;
  uint64_t v99;
  int v100;
  vDSP_Length v101;
  float *v102;
  size_t count;
  void **v104;
  uint64_t v105;
  void **v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  CRDetectorOutputMaps *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  CRTextDetectorModelV3Output *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;

  v120 = a2;
  -[CRTextDetectorModelV3Output region_score](v120, "region_score");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "shape");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectAtIndexedSubscript:", 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "integerValue");

  -[CRTextDetectorModelV3Output region_score](v120, "region_score");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "shape");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectAtIndexedSubscript:", 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "integerValue");

  -[CRTextDetectorModelV3Output region_score](v120, "region_score");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "strides");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "objectAtIndexedSubscript:", 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v121 = objc_msgSend(v16, "integerValue");

  -[CRTextDetectorModelV3Output region_score](v120, "region_score");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "shape");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "objectAtIndexedSubscript:", 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "integerValue");

  v111 = *(_QWORD *)(*(_QWORD *)this + 16);
  width = a3->width;
  height = a3->height;
  v23 = (void **)operator new();
  v23[2] = (void *)v9;
  v23[3] = (void *)v9;
  *v23 = 0;
  v23[1] = (void *)v13;
  count = v13 * v9;
  if (v13 * v9)
  {
    v118 = malloc_type_calloc(v13 * v9, 1uLL, 0xF2EF0BD8uLL);
    *v23 = v118;
  }
  else
  {
    v118 = 0;
  }
  v104 = v23;
  -[CRTextDetectorModelV3Output region_score](v120, "region_score");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v113 = this;
  v25 = (int)sqrt((double)v20);
  v26 = (double)v25;
  v27 = v13 - (uint64_t)fmax((double)v13 - height / (double)v25, 0.0);
  v28 = a3->width;
  v123 = v25;
  v29 = (int)a3->height / v25;
  v112 = v27;
  if (v29 >= v27)
    v30 = v27;
  else
    v30 = v29;
  v107 = objc_retainAutorelease(v24);
  v115 = objc_msgSend(v107, "dataPointer");
  v105 = v9;
  v110 = v9 - (uint64_t)fmax((double)v9 - width / v26, 0.0);
  v31 = v121;
  v122 = 4 * v121;
  v32 = v118;
  if ((int)v30 >= 1)
  {
    v33 = 0;
    v34 = **(_QWORD **)this;
    v35 = (int)v28 / v123;
    if (v35 >= (int)v110)
      v35 = v110;
    v36 = v35;
    v37 = (float *)v115;
    v38 = v118;
    do
    {
      v39 = (uint64_t)(a4->x + (a4->y + (double)((int)v33 * v123)) * (double)v111);
      if (v32)
      {
        if ((_DWORD)v36)
        {
          v40 = v37;
          v41 = v38;
          v42 = v36;
          v43 = (float *)(v34 + 4 * v39);
          do
          {
            if (*v40 >= *v43)
            {
              *v43 = *v40;
              *v41 = 1;
            }
            v43 += v123;
            ++v41;
            ++v40;
            --v42;
          }
          while (v42);
        }
      }
      else
      {
        vDSP_vmax((const float *)(v115 + 4 * v33 * v31), 1, (const float *)(v34 + 4 * v39), v123, (float *)(v34 + 4 * v39), v123, v36);
        v32 = v118;
        v31 = v121;
      }
      ++v33;
      v38 += v31;
      v37 = (float *)((char *)v37 + v122);
    }
    while (v33 != v30);
  }

  if (-[CRTextDetectorModelV3Output isLazy](v120, "isLazy"))
    -[CRTextDetectorModelV3Output setRegion_score:](v120, "setRegion_score:", 0);
  v44 = *((_QWORD *)v113 + 7);
  v45 = *((_QWORD *)v113 + 8);
  -[CRTextDetectorModelV3Output orientation_score](v120, "orientation_score");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (v46 && v45 - v44 >= 1)
  {
    -[CRTextDetectorModelV3Output orientation_score](v120, "orientation_score");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    CRDetectorOutputMaps::updateMultiChannelData(v47, (uint64_t **)v113 + 7, v123, &a4->x, (uint64_t)v118);

  }
  if (-[CRTextDetectorModelV3Output isLazy](v120, "isLazy"))
    -[CRTextDetectorModelV3Output setOrientation_score:](v120, "setOrientation_score:", 0);
  v48 = *((_QWORD *)v113 + 10);
  v49 = *((_QWORD *)v113 + 11);
  -[CRTextDetectorModelV3Output text_type_score](v120, "text_type_score");
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  if (v50 && v49 - v48 >= 1)
  {
    -[CRTextDetectorModelV3Output text_type_score](v120, "text_type_score");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    CRDetectorOutputMaps::updateMultiChannelData(v51, (uint64_t **)v113 + 10, v123, &a4->x, (uint64_t)v118);

  }
  if (-[CRTextDetectorModelV3Output isLazy](v120, "isLazy"))
    -[CRTextDetectorModelV3Output setText_type_score:](v120, "setText_type_score:", 0);
  if (*v104)
    free(*v104);
  MEMORY[0x1D826E294](v104, 0x1080C40ABB4582ELL);
  v52 = (void **)operator new();
  v52[2] = (void *)v105;
  v52[3] = (void *)v105;
  *v52 = 0;
  v52[1] = (void *)v13;
  if (count)
  {
    v119 = malloc_type_calloc(count, 1uLL, 0xF2EF0BD8uLL);
    *v52 = v119;
  }
  else
  {
    v119 = 0;
  }
  v106 = v52;
  -[CRTextDetectorModelV3Output link_score_horizontal](v120, "link_score_horizontal");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = a3->width;
  v55 = (int)a3->height / v123;
  if (v55 >= v112)
    v56 = v112;
  else
    v56 = v55;
  v108 = objc_retainAutorelease(v53);
  v116 = objc_msgSend(v108, "dataPointer");
  v57 = v121;
  v58 = v119;
  if ((int)v56 >= 1)
  {
    v59 = 0;
    v60 = **((_QWORD **)v113 + 4);
    v61 = (int)v54 / v123;
    if (v61 >= (int)v110)
      v61 = v110;
    v62 = v61;
    v63 = (float *)v116;
    v64 = v119;
    do
    {
      v65 = (uint64_t)(a4->x + (a4->y + (double)((int)v59 * v123)) * (double)v111);
      if (v58)
      {
        if ((_DWORD)v62)
        {
          v66 = v63;
          v67 = v64;
          v68 = v62;
          v69 = (float *)(v60 + 4 * v65);
          do
          {
            if (*v66 >= *v69)
            {
              *v69 = *v66;
              *v67 = 1;
            }
            v69 += v123;
            ++v67;
            ++v66;
            --v68;
          }
          while (v68);
        }
      }
      else
      {
        vDSP_vmax((const float *)(v116 + 4 * v59 * v57), 1, (const float *)(v60 + 4 * v65), v123, (float *)(v60 + 4 * v65), v123, v62);
        v58 = v119;
        v57 = v121;
      }
      ++v59;
      v64 += v57;
      v63 = (float *)((char *)v63 + v122);
    }
    while (v59 != v56);
  }

  if (-[CRTextDetectorModelV3Output isLazy](v120, "isLazy"))
    -[CRTextDetectorModelV3Output setLink_score_horizontal:](v120, "setLink_score_horizontal:", 0);
  -[CRTextDetectorModelV3Output link_score_vertical](v120, "link_score_vertical");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = a3->width;
  v72 = (int)a3->height / v123;
  if (v72 >= v112)
    v73 = v112;
  else
    v73 = v72;
  v109 = objc_retainAutorelease(v70);
  v117 = objc_msgSend(v109, "dataPointer");
  v74 = v121;
  v75 = v119;
  if ((int)v73 >= 1)
  {
    v76 = 0;
    v77 = **((_QWORD **)v113 + 5);
    v78 = (int)v71 / v123;
    if (v78 >= (int)v110)
      v78 = v110;
    v79 = v78;
    v80 = (float *)v117;
    v81 = v119;
    do
    {
      v82 = (uint64_t)(a4->x + (a4->y + (double)((int)v76 * v123)) * (double)v111);
      if (v75)
      {
        if ((_DWORD)v79)
        {
          v83 = v80;
          v84 = v81;
          v85 = v79;
          v86 = (float *)(v77 + 4 * v82);
          do
          {
            if (*v83 >= *v86)
            {
              *v86 = *v83;
              *v84 = 1;
            }
            v86 += v123;
            ++v84;
            ++v83;
            --v85;
          }
          while (v85);
        }
      }
      else
      {
        vDSP_vmax((const float *)(v117 + 4 * v76 * v74), 1, (const float *)(v77 + 4 * v82), v123, (float *)(v77 + 4 * v82), v123, v79);
        v75 = v119;
        v74 = v121;
      }
      ++v76;
      v81 += v74;
      v80 = (float *)((char *)v80 + v122);
    }
    while (v76 != v73);
  }

  if (-[CRTextDetectorModelV3Output isLazy](v120, "isLazy"))
    -[CRTextDetectorModelV3Output setLink_score_vertical:](v120, "setLink_score_vertical:", 0);
  v87 = *((_QWORD *)v113 + 1);
  v88 = *((_QWORD *)v113 + 2);
  -[CRTextDetectorModelV3Output script_feature](v120, "script_feature");
  v89 = (void *)objc_claimAutoreleasedReturnValue();

  if (v89 && v88 - v87 >= 1)
  {
    -[CRTextDetectorModelV3Output script_feature](v120, "script_feature");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    CRDetectorOutputMaps::updateMultiChannelData(v90, (uint64_t **)v113 + 1, v123, &a4->x, (uint64_t)v119);

  }
  if (-[CRTextDetectorModelV3Output isLazy](v120, "isLazy"))
    -[CRTextDetectorModelV3Output setScript_feature:](v120, "setScript_feature:", 0);
  if (*v106)
    free(*v106);
  MEMORY[0x1D826E294](v106, 0x1080C40ABB4582ELL);
  if (*((_QWORD *)v113 + 6))
  {
    -[CRTextDetectorModelV3Output table_score](v120, "table_score");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = a3->width;
    v93 = (int)a3->height / v123;
    if (v93 >= v112)
      v94 = v112;
    else
      v94 = v93;
    v95 = objc_retainAutorelease(v91);
    v96 = objc_msgSend(v95, "dataPointer");
    if ((int)v94 >= 1)
    {
      v97 = (const float *)v96;
      v98 = 0;
      v99 = **((_QWORD **)v113 + 6);
      v100 = (int)v92 / v123;
      if (v100 >= (int)v110)
        v100 = v110;
      v101 = v100;
      do
      {
        v102 = (float *)(v99 + 4 * (uint64_t)(a4->x + (a4->y + (double)v98) * (double)v111));
        vDSP_vmax(v97, 1, v102, v123, v102, v123, v101);
        v97 = (const float *)((char *)v97 + v122);
        v98 += v123;
        --v94;
      }
      while (v94);
    }

    if (-[CRTextDetectorModelV3Output isLazy](v120, "isLazy"))
      -[CRTextDetectorModelV3Output setTable_score:](v120, "setTable_score:", 0);
  }

}

void sub_1D50DAB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  void *v26;
  uint64_t v27;

  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](&a26, 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(v27 - 128), 0);

  _Unwind_Resume(a1);
}

void CRDetectorOutputMaps::updateMultiChannelData(void *a1, uint64_t **a2, int a3, double *a4, uint64_t a5)
{
  id v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v39;
  uint64_t *v40;

  v8 = a1;
  v9 = *a2;
  v40 = a2[1];
  objc_msgSend(v8, "shape");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectAtIndexedSubscript:", 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v11, "integerValue");

  objc_msgSend(v8, "shape");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectAtIndexedSubscript:", 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "integerValue");

  objc_msgSend(v8, "strides");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "objectAtIndexedSubscript:", 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "integerValue");

  objc_msgSend(v8, "strides");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "objectAtIndexedSubscript:", 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "integerValue");

  v21 = *a4;
  v22 = a4[1];
  v23 = **a2;
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(_QWORD *)(v23 + 16);
  v39 = objc_retainAutorelease(v8);
  v26 = objc_msgSend(v39, "dataPointer");
  if ((char *)v40 - (char *)v9 >= 1)
  {
    v27 = 0;
    v28 = v40 - v9;
    v29 = *a2;
    v30 = v37 * a3;
    v31 = v14 * a3;
    if (v28 <= 1)
      v28 = 1;
    do
    {
      if (v30)
      {
        v32 = 0;
        v33 = *(_QWORD *)v29[v27] + 4 * (unint64_t)(v22 * 0.5) * v25;
        v34 = (unint64_t)(v22 * 0.5);
        do
        {
          if (v34 < v24 && v31)
          {
            v35 = 0;
            v36 = (unint64_t)(v21 * 0.5);
            do
            {
              if (v36 < v25 && *(char *)(a5 + v20 * (int)v32 + v35) >= 1)
                *(_DWORD *)(v33 + 4 * v36) = *(_DWORD *)(v26 + 4 * v20 * (int)v32 + 4 * v35);
              ++v36;
              v35 += a3;
            }
            while (v35 < v31);
          }
          ++v34;
          v32 += a3;
          v33 += 4 * v25;
        }
        while (v32 < v30);
      }
      ++v27;
      v26 += 4 * v17;
    }
    while (v27 != v28);
  }

}

void sub_1D50DAEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ***std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
      free(*v2);
    JUMPOUT(0x1D826E294);
  }
  return result;
}

void sub_1D50DB03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D50DB198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D50DB318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50DB48C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50DBE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  if (__p)
    operator delete(__p);
  v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(_QWORD *)(v31 - 168) = v33;
    operator delete(v33);
  }

  _Unwind_Resume(a1);
}

void sub_1D50DC1A4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1D826E294](v2, 0x1080C40ABB4582ELL);

  _Unwind_Resume(a1);
}

void sub_1D50DC3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  void *v12;

  a12 = a11;
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_1D50DCE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, void **a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a64;
  char a65;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;

  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  a44 = a12;
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](&a44);
  _Block_object_dispose(&a59, 8);

  _Block_object_dispose(&a65, 8);
  std::deque<unsigned char>::~deque[abi:ne180100](a11);

  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2C8], 8);
  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose(&STACK[0x388], 8);
  _Block_object_dispose(&STACK[0x3C8], 8);

  _Block_object_dispose(&STACK[0x3F8], 8);
  CRDetectorOutputMaps::~CRDetectorOutputMaps((void ***)&STACK[0x428]);
  _Block_object_dispose(&STACK[0x490], 8);
  CRDetectorOutputMaps::~CRDetectorOutputMaps((void ***)&STACK[0x4C0]);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a2 + 56) = 0u;
  v3 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a1 + 80) = v3;
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  return result;
}

void ***__Block_byref_object_dispose__20(uint64_t a1)
{
  void ***v2;
  void **v4;

  v2 = (void ***)(a1 + 48);
  v4 = (void **)(a1 + 128);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 104);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(a1 + 96), 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(a1 + 88), 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100]((void ***)(a1 + 80), 0);
  v4 = (void **)(a1 + 56);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](v2, 0);
}

void CRDetectorOutputMaps::~CRDetectorOutputMaps(void ***this)
{
  void **v2;

  v2 = (void **)(this + 10);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(this + 7);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this + 6, 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this + 5, 0);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this + 4, 0);
  v2 = (void **)(this + 1);
  std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](this, 0);
}

__n128 __Block_byref_object_copy__10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1D50DD8AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50DDCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_1D50DDEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__20(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__21(uint64_t a1)
{
  return std::deque<unsigned char>::~deque[abi:ne180100]((_QWORD *)(a1 + 48));
}

__n128 __Block_byref_object_copy__23(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{

}

void sub_1D50DE3B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50E0FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = *(_QWORD *)(v1 + 1320);
  v6 = *(_QWORD *)(v1 + 1328);
  if (v6 != v5)
    *(_QWORD *)(v1 + 1328) = v6 + ((v5 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  v7 = *(void **)(v1 + 1312);
  if (v7)
    operator delete(v7);

  *(_QWORD *)(v1 + 88) = v3;
  *(_QWORD *)(v1 + 640) = v1 + 440;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 640));
  std::deque<unsigned char>::~deque[abi:ne180100]((_QWORD *)(v1 + 464));

  *(_QWORD *)(v1 + 464) = v1 + 536;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 464));
  std::deque<unsigned char>::~deque[abi:ne180100]((_QWORD *)(v1 + 560));

  _Unwind_Resume(a1);
}

void sub_1D50E0FFC()
{
  JUMPOUT(0x1D50E10A8);
}

void sub_1D50E10B0()
{
  uint64_t v0;
  uint64_t v1;

  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,CRDetectorUtils::CRTextDetectorQuadFeature*>>::~__exception_guard_exceptions[abi:ne180100](v0 + 1312);
  *(_QWORD *)(v0 + 544) = v1;
  JUMPOUT(0x1D50E116CLL);
}

void sub_1D50E10C4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void **i;
  void *v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    for (i = *(void ***)(v2 + 1320); i != *(void ***)(v2 + 1328); ++i)
    {
      v4 = *i;
      operator delete(v4);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1D50E10F8()
{
  __cxa_end_catch();
  JUMPOUT(0x1D50E1100);
}

void sub_1D50E1134(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1D50E1144()
{
  JUMPOUT(0x1D50E1394);
}

void sub_1D50E1154()
{
  JUMPOUT(0x1D50E12E8);
}

void sub_1D50E115C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 1328) = v1;
  JUMPOUT(0x1D50E1164);
}

void sub_1D50E1178()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 464) = v0 + 536;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100](v0 + 464);
  std::deque<unsigned char>::~deque[abi:ne180100](v0 + 560);

  JUMPOUT(0x1D50E13ACLL);
}

void sub_1D50E118C()
{
  uint64_t v0;
  void *v1;

  JUMPOUT(0x1D50E1374);
}

void sub_1D50E11B8()
{
  void *v0;

  JUMPOUT(0x1D50E1310);
}

void sub_1D50E11D0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  *(_QWORD *)(v0 + 912) = v0 + 616;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 + 912));
  *(_QWORD *)(v0 + 616) = v0 + 648;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 + 616));
  JUMPOUT(0x1D50E12F8);
}

void sub_1D50E121C()
{
  uint64_t v0;

  JUMPOUT(0x1D50E1374);
}

void sub_1D50E1228()
{
  void *v0;

  JUMPOUT(0x1D50E1354);
}

void sub_1D50E1254()
{
  uint64_t v0;

  JUMPOUT(0x1D50E12CCLL);
}

void sub_1D50E1350()
{
  uint64_t v0;

  JUMPOUT(0x1D50E135CLL);
}

void sub_1D50E1600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1D50E1D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;

  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1D50E204C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50E21CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D50E2540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1D50E2B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  void *v44;

  a35 = &a28;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = &a31;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);

  _Unwind_Resume(a1);
}

void CRDetectorUtils::CRTextDetectorQuadFeature::~CRTextDetectorQuadFeature(CRDetectorUtils::CRTextDetectorQuadFeature *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 144);
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
}

void **std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::shrink_to_fit(void **result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = (unint64_t)*result;
  v2 = *(int64x2_t *)(result + 1);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 3uLL);
  v4 = 0xCF3CF3CF3CF3CF3DLL * v3.i64[0];
  v5 = v4;
  if (0xCF3CF3CF3CF3CF3DLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = (uint64_t)(result + 2);
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(v7, v4);
    }
    v10 = v8;
    v11 = &v8[168 * v5];
    v12 = v11;
    v13 = &v8[168 * v9];
    std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer(&v10);
  }
  return result;
}

void sub_1D50E2D2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D50E2D1CLL);
}

void sub_1D50E2E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_1D50E2F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50E33B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<CRDetectorUtils::CRTextDetectorQuad>::__init_with_size[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CRDetectorUtils::CRTextDetectorQuad>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D50E3488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<CRDetectorUtils::CRTextDetectorQuad>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1C71C71C71C71C8)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a4;
  v16 = a4;
  v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[3];
      *(_OWORD *)(v4 + 32) = v6[2];
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 72) = 0;
      *(_QWORD *)(v4 + 80) = 0;
      *(_QWORD *)(v4 + 64) = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)(v4 + 64), *((const void **)v6 + 8), *((_QWORD *)v6 + 9), (uint64_t)(*((_QWORD *)v6 + 9) - *((_QWORD *)v6 + 8)) >> 4);
      v10 = *(__int128 *)((char *)v6 + 88);
      v11 = *(__int128 *)((char *)v6 + 104);
      v12 = *(__int128 *)((char *)v6 + 120);
      *(_QWORD *)(v4 + 136) = *((_QWORD *)v6 + 17);
      *(_OWORD *)(v4 + 120) = v12;
      *(_OWORD *)(v4 + 104) = v11;
      *(_OWORD *)(v4 + 88) = v10;
      v4 = v17 + 144;
      v17 += 144;
      v6 += 9;
    }
    while (v6 != a3);
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v4;
}

void sub_1D50E3610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuad>,CRDetectorUtils::CRTextDetectorQuad*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 80);
    if (v3)
    {
      *(_QWORD *)(v1 - 72) = v3;
      operator delete(v3);
    }
    v1 -= 144;
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CRDetectorUtils::CRTextDetectorQuad>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorQuad>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 144)
  {
    v4 = *(void **)(i - 80);
    if (v4)
    {
      *(_QWORD *)(i - 72) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::__list_imp<unsigned long>::clear(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<CRImageBuffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void ***v2;
  void ***v4;
  void *v5;

  v1 = *a1;
  v2 = (void ***)**a1;
  if (v2)
  {
    v4 = (void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<CRImageBuffer>>::__vdeallocate(void ****a1)
{
  void ***v1;
  void ***v3;
  void ***v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
        std::unique_ptr<CRImageBuffer>::reset[abi:ne180100](--v3, 0);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 144);
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a2 + 64);
  if (v3)
  {
    *(_QWORD *)(a2 + 72) = v3;
    operator delete(v3);
  }
}

uint64_t std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__push_back_slow_path<CRDetectorUtils::CRTextDetectorQuadFeature const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[168 * v3];
  v13 = &v7[168 * v6];
  std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::construct[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuadFeature,CRDetectorUtils::CRTextDetectorQuadFeature const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 168;
  std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer(&v10);
  return v8;
}

void sub_1D50E3A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::construct[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuadFeature,CRDetectorUtils::CRTextDetectorQuadFeature const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *a3;
  v6 = a3[1];
  v7 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)(a2 + 64), *((const void **)a3 + 8), *((_QWORD *)a3 + 9), (uint64_t)(*((_QWORD *)a3 + 9) - *((_QWORD *)a3 + 8)) >> 4);
  v8 = *(__int128 *)((char *)a3 + 88);
  v9 = *(__int128 *)((char *)a3 + 104);
  v10 = *(__int128 *)((char *)a3 + 120);
  v11 = *((_QWORD *)a3 + 17);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 136) = v11;
  *(_OWORD *)(a2 + 120) = v10;
  *(_OWORD *)(a2 + 104) = v9;
  *(_OWORD *)(a2 + 88) = v8;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  return std::vector<CRDetectorUtils::CRTextDetectorQuad>::__init_with_size[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>((_QWORD *)(a2 + 144), *((__int128 **)a3 + 18), *((__int128 **)a3 + 19), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a3 + 19) - *((_QWORD *)a3 + 18)) >> 4));
}

void sub_1D50E3B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 168);
      v9 = *(_OWORD *)(a3 - 152);
      v10 = *(_OWORD *)(a3 - 136);
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      *(_OWORD *)(v7 - 136) = v10;
      *(_OWORD *)(v7 - 152) = v9;
      *(_OWORD *)(v7 - 168) = v8;
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 104) = 0;
      *(_OWORD *)(v7 - 104) = *(_OWORD *)(a3 - 104);
      *(_QWORD *)(v7 - 88) = *(_QWORD *)(a3 - 88);
      *(_QWORD *)(a3 - 104) = 0;
      *(_QWORD *)(a3 - 96) = 0;
      *(_QWORD *)(a3 - 88) = 0;
      v11 = *(_OWORD *)(a3 - 80);
      v12 = *(_OWORD *)(a3 - 48);
      v13 = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 48) = v12;
      *(_OWORD *)(v7 - 80) = v11;
      *(_QWORD *)(v7 - 32) = v13;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v19 + 1) - 168;
      *((_QWORD *)&v19 + 1) -= 168;
      a3 -= 168;
    }
    while (a3 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,std::reverse_iterator<CRDetectorUtils::CRTextDetectorQuadFeature*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](v3, v1);
      v1 += 168;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::~__split_buffer(void **a1)
{
  std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<CRDetectorUtils::CRTextDetectorQuadFeature>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 168;
    std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](v4, i - 168);
  }
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(double *result, double *a2, double *a3, _BYTE *a4)
{
  double *v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  double v9;
  __int128 v10;
  __int128 v11;
  double *v12;
  double v13;
  double *v14;
  __int128 v15;
  __int128 v16;
  double *v17;
  double v18;
  double *v19;

  if (*a4)
    v4 = a2;
  else
    v4 = a2 + 1;
  v5 = *v4;
  if (*a4)
    v6 = result;
  else
    v6 = result + 1;
  v7 = *v6;
  v8 = a3 + 1;
  if (*a4)
    v8 = a3;
  v9 = *v8;
  if (v5 >= v7)
  {
    if (v9 < v5)
    {
      v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v11;
      if (*a4)
        v12 = a2;
      else
        v12 = a2 + 1;
      v13 = *v12;
      v14 = result + 1;
      if (*a4)
        v14 = result;
      if (v13 < *v14)
      {
        v15 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v15;
      }
    }
  }
  else
  {
    if (v9 < v5)
    {
      v10 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
LABEL_27:
      *(_OWORD *)a3 = v10;
      return result;
    }
    v16 = *(_OWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v16;
    if (*a4)
      v17 = a3;
    else
      v17 = a3 + 1;
    v18 = *v17;
    v19 = a2 + 1;
    if (*a4)
      v19 = a2;
    if (v18 < *v19)
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_27;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(__int128 *a1, double *a2, _BYTE *a3)
{
  uint64_t v6;
  _BOOL8 result;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  __int128 v12;
  double *v13;
  double *v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  double *v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  __int128 v35;
  double *v36;
  double v37;
  double *v38;
  __int128 v39;
  double v40;
  double *v41;
  __int128 v42;
  double *v43;
  double v44;
  double *v45;
  __int128 v46;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 2;
      if (*a3)
        v9 = a2 - 2;
      else
        v9 = a2 - 1;
      v10 = *v9;
      if (*a3)
        v11 = (double *)a1;
      else
        v11 = (double *)a1 + 1;
      if (v10 < *v11)
      {
        v12 = *a1;
        *a1 = *(_OWORD *)v8;
        *(_OWORD *)v8 = v12;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, (unint64_t *)a2 - 2, a3);
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      v30 = a2 - 2;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, (unint64_t *)a1 + 6, a3);
      v31 = (double *)a1 + 7;
      if (*a3)
        v32 = a2 - 2;
      else
        v32 = a2 - 1;
      v33 = *v32;
      if (*a3)
        v34 = (double *)(a1 + 3);
      else
        v34 = (double *)a1 + 7;
      if (v33 < *v34)
      {
        v35 = *v29;
        *v29 = *(_OWORD *)v30;
        *(_OWORD *)v30 = v35;
        v36 = (double *)a1 + 5;
        if (*a3)
          v31 = (double *)(a1 + 3);
        v37 = *v31;
        if (*a3)
          v38 = (double *)(a1 + 2);
        else
          v38 = (double *)a1 + 5;
        if (v37 < *v38)
        {
          v39 = *v28;
          *v28 = *v29;
          *v29 = v39;
          if (*a3)
            v36 = (double *)(a1 + 2);
          v40 = *v36;
          if (*a3)
            v41 = (double *)(a1 + 1);
          else
            v41 = (double *)a1 + 3;
          if (v40 < *v41)
          {
            v42 = *v27;
            *v27 = *v28;
            *v28 = v42;
            v43 = *a3 ? (double *)(a1 + 1) : (double *)((char *)a1 + 24);
            v44 = *v43;
            v45 = *a3 ? (double *)a1 : (double *)((char *)a1 + 8);
            if (v44 < *v45)
            {
              v46 = *a1;
              *a1 = *v27;
              *v27 = v46;
            }
          }
        }
      }
      return 1;
    default:
      v13 = (double *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, a3);
      v14 = (double *)(a1 + 3);
      if (a1 + 3 == (__int128 *)a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v18 = *v14;
    v17 = v14[1];
    v19 = *a3 ? *v14 : v14[1];
    v20 = *a3 ? v13 : v13 + 1;
    if (v19 < *v20)
    {
      v21 = v15;
      while (1)
      {
        v22 = (uint64_t)a1 + v21;
        *(__int128 *)((char *)a1 + v21 + 48) = *(__int128 *)((char *)a1 + v21 + 32);
        if (v21 == -32)
          break;
        v23 = (double *)(v22 + 16);
        v24 = (double *)(v22 + 24);
        if (*a3)
          v25 = v18;
        else
          v25 = v17;
        if (*a3)
          v24 = v23;
        v21 -= 16;
        if (v25 >= *v24)
        {
          v26 = (double *)((char *)a1 + v21 + 48);
          goto LABEL_30;
        }
      }
      v26 = (double *)a1;
LABEL_30:
      *v26 = v18;
      v26[1] = v17;
      if (++v16 == 8)
        return v14 + 2 == a2;
    }
    v13 = v14;
    v15 += 16;
    v14 += 2;
    if (v14 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(double *a1, double *a2, double *a3, unint64_t *a4, _BYTE *a5)
{
  __n128 result;
  unint64_t *v11;
  unint64_t *v12;
  double *v13;
  double *v14;
  unint64_t *v15;
  double *v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(a1, a2, a3, a5);
  v11 = (unint64_t *)(a3 + 1);
  if (*a5)
    v12 = a4;
  else
    v12 = a4 + 1;
  result.n128_u64[0] = *v12;
  if (*a5)
    v13 = a3;
  else
    v13 = a3 + 1;
  if (result.n128_f64[0] < *v13)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*a5)
      v11 = (unint64_t *)a3;
    result.n128_u64[0] = *v11;
    if (*a5)
      v14 = a2;
    else
      v14 = a2 + 1;
    if (result.n128_f64[0] < *v14)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a5)
        v15 = (unint64_t *)a2;
      else
        v15 = (unint64_t *)(a2 + 1);
      result.n128_u64[0] = *v15;
      if (*a5)
        v16 = a1;
      else
        v16 = a1 + 1;
      if (result.n128_f64[0] < *v16)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void ****std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>>(uint64_t *a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  void ***v19;

  v19 = (void ***)a5;
  if (a1 != a3)
  {
    v8 = a1 + 1;
    std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>::operator()[abi:ne180100](&v19, a2, (_BYTE *)(*a1 + 4096));
    if (v8 != a3)
    {
      v10 = *(void ***)a5;
      v9 = *(char **)(a5 + 8);
      do
      {
        v11 = 0;
        v12 = *v8;
        v14 = (char *)*v10++;
        v13 = v14;
        while (1)
        {
          v15 = v13 - v9 + 4096;
          if (4096 - v11 >= v15)
            v16 = v15;
          else
            v16 = 4096 - v11;
          if (v16)
            memmove(v9, (const void *)(v12 + v11), v16);
          v11 += v16;
          if (v11 == 4096)
            break;
          v17 = (char *)*v10++;
          v13 = v17;
          v9 = v17;
        }
        v9 += v16;
        if ((char *)*(v10 - 1) + 4096 == v9)
          v9 = (char *)*v10;
        else
          --v10;
        *(_QWORD *)a5 = v10;
        *(_QWORD *)(a5 + 8) = v9;
        ++v8;
      }
      while (v8 != a3);
    }
    a2 = (_BYTE *)*a3;
  }
  return std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>::operator()[abi:ne180100](&v19, a2, a4);
}

void ****std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<unsigned char,unsigned char const*,unsigned char const&,unsigned char const* const*,long,4096l>,std::__deque_iterator<unsigned char,unsigned char *,unsigned char &,unsigned char **,long,4096l>>::operator()[abi:ne180100](void ****result, _BYTE *__src, _BYTE *a3)
{
  void ***v3;
  void **v4;
  void **v5;
  _BYTE *v7;
  void ****v8;
  void **v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  void **v13;

  v3 = *result;
  v5 = **result;
  v4 = (*result)[1];
  if (__src != a3)
  {
    v7 = __src;
    v8 = result;
    v10 = (char *)*v5++;
    v9 = (void **)v10;
    while (1)
    {
      v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11)
        v12 = v11;
      else
        v12 = a3 - v7;
      if (v12)
        result = (void ****)memmove(v4, v7, v12);
      v7 += v12;
      if (v7 == a3)
        break;
      v13 = (void **)*v5++;
      v9 = v13;
      v4 = v13;
    }
    v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4)
      v4 = (void **)*v5;
    else
      --v5;
    v3 = *v8;
  }
  *v3 = v5;
  v3[1] = v4;
  return result;
}

void std::deque<unsigned char>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0xFFF) != 0)
    v6 = (v5 >> 12) + 1;
  else
    v6 = v5 >> 12;
  v7 = a1[4];
  if (v6 >= v7 >> 12)
    v8 = v7 >> 12;
  else
    v8 = v6;
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 4095;
          else
            v64 = 4096;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1D50E5278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::construct[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuadFeature,CRDetectorUtils::CRTextDetectorQuadFeature&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)(a1 + 64), *((const void **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 4);
  v7 = *(__int128 *)((char *)a2 + 88);
  v8 = *(__int128 *)((char *)a2 + 104);
  v9 = *(__int128 *)((char *)a2 + 120);
  v10 = *((_QWORD *)a2 + 17);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  return std::vector<CRDetectorUtils::CRTextDetectorQuad>::__init_with_size[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad*,CRDetectorUtils::CRTextDetectorQuad*>((_QWORD *)(a1 + 144), *((__int128 **)a2 + 18), *((__int128 **)a2 + 19), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 4));
}

void sub_1D50E5398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>,CRDetectorUtils::CRTextDetectorQuadFeature*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 168;
        std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

void std::vector<CRDetectorUtils::CRTextDetectorQuad>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CRDetectorUtils::CRTextDetectorQuad>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuad *,CRDetectorUtils::CRTextDetectorQuad *,CRDetectorUtils::CRTextDetectorQuad *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v5 = a1 + 64;
    do
    {
      v6 = v5 - 64;
      v7 = *(_OWORD *)(v5 - 64);
      v8 = *(_OWORD *)(v5 - 48);
      v9 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(a3 + 48) = v9;
      *(_OWORD *)a3 = v7;
      *(_OWORD *)(a3 + 16) = v8;
      if (a3 != v5 - 64)
        std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>((char *)(a3 + 64), *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 4);
      v10 = *(_OWORD *)(v5 + 24);
      v11 = *(_OWORD *)(v5 + 40);
      v12 = *(_OWORD *)(v5 + 56);
      *(_QWORD *)(a3 + 136) = *(_QWORD *)(v5 + 72);
      *(_OWORD *)(a3 + 120) = v12;
      *(_OWORD *)(a3 + 104) = v11;
      *(_OWORD *)(a3 + 88) = v10;
      a3 += 144;
      v5 += 144;
    }
    while (v6 + 144 != a2);
  }
  return a3;
}

void sub_1D50E5584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50E5674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50E575C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50E5884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50E58D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D50E5ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void sub_1D50E75B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D50E768C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50E7A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  _Unwind_Resume(a1);
}

_QWORD *CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::~SpaceSegmentedPathBuilder(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E98D9098;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D50E7BC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::decode(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  BOOL v39;
  float v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;
  char *v47;
  double v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  void *__p;
  char *v80;
  _QWORD v81[2];
  void *v82[6];

  __p = 0;
  v80 = 0;
  v81[0] = 0;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::reserve(&__p, *a2 + 1);
  v6 = v80;
  if ((unint64_t)v80 >= v81[0])
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v80 - (_BYTE *)__p) >> 4);
    v9 = v8 + 1;
    if (v8 + 1 > 0x333333333333333)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    if (0x999999999999999ALL * ((uint64_t)(v81[0] - (_QWORD)__p) >> 4) > v9)
      v9 = 0x999999999999999ALL * ((uint64_t)(v81[0] - (_QWORD)__p) >> 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81[0] - (_QWORD)__p) >> 4) >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v9;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>((uint64_t)v81, v10);
    v12 = &v11[80 * v8];
    v14 = &v11[80 * v13];
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_QWORD *)v12 + 8) = &unk_1E98D9278;
    *((_QWORD *)v12 + 9) = 0;
    v7 = v12 + 80;
    v15 = (char *)__p;
    v16 = v80;
    if (v80 == __p)
    {
      v15 = v80;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v12[v17];
        v19 = *(_OWORD *)&v16[v17 - 80];
        v20 = *(_OWORD *)&v16[v17 - 64];
        v21 = *(_OWORD *)&v16[v17 - 32];
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v16[v17 - 48];
        *((_OWORD *)v18 - 2) = v21;
        *((_OWORD *)v18 - 5) = v19;
        *((_OWORD *)v18 - 4) = v20;
        *((_QWORD *)v18 - 2) = &unk_1E98D9278;
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v16[v17 - 8];
        v17 -= 80;
      }
      while (&v16[v17] != v15);
      v12 += v17;
    }
    __p = v12;
    v80 = v7;
    v81[0] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *((_OWORD *)v80 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *(_OWORD *)v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_QWORD *)v6 + 8) = &unk_1E98D9278;
    *((_QWORD *)v6 + 9) = 0;
    v7 = v6 + 80;
  }
  v80 = v7;
  *((_QWORD *)v7 - 3) = 0;
  *((_QWORD *)v7 - 6) = 0;
  *((_OWORD *)v7 - 5) = xmmword_1D513B720;
  v78 = 0uLL;
  if (*a2)
  {
    v22 = 0;
    v23 = 0;
    v24 = -1;
    v25 = 0.0;
    v26 = 0.0;
    do
    {
      v27 = v24;
      v28 = a2[1];
      v29 = v28 * v22;
      v31 = a2[8];
      v30 = a2[9];
      v32 = (float *)(v30 + 4 * v28 * v22);
      if (v30)
      {
        v33 = -1.0;
      }
      else
      {
        v32 = 0;
        v33 = 0.0;
      }
      v34 = (float *)(v31 + 4 * v29);
      v35 = v22 + 1;
      v36 = v28 * (v22 + 1);
      v37 = (float *)(v31 + 4 * v36);
      v39 = v29 == v36;
      v38 = v34 + 1;
      v39 = v39 || v38 == v37;
      if (!v39)
      {
        v40 = v33 + 1.0;
        if (v32)
          v40 = v33;
        v41 = v32 + 1;
        if (!v32)
          v41 = 0;
        v42 = 4 * v28 - 4;
        do
        {
          v43 = *v34;
          if (*v34 > -0.0010005)
            v43 = -0.0010005;
          v44 = *v38;
          if (*v38 > -0.0010005)
            v44 = -0.0010005;
          if (v43 < v44)
          {
            v32 = v41;
            v34 = v38;
            v33 = v40;
          }
          ++v38;
          v45 = v41 == 0;
          if (v41)
            ++v41;
          else
            v41 = 0;
          if (v45)
            v40 = v40 + 1.0;
          v42 -= 4;
        }
        while (v42);
      }
      if (v32)
        v33 = *v32;
      v24 = (unint64_t)v33;
      if (*v34 <= -0.0010005)
        v46 = *v34;
      else
        v46 = -0.0010005;
      v47 = v7 - 80;
      if (v27 == v24)
      {
        v48 = v46;
        CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::updateActivationProgression((uint64_t)(a1 + 2), (uint64_t)(v7 - 80), v22, v46);
        v7 = v80;
      }
      else
      {
        v48 = v46;
        if (a1[1] != v24)
        {
          v49 = (_QWORD *)a1[4];
          v50 = (_QWORD *)a1[5];
          if (v49 != v50)
          {
            while (*v49 != v24)
            {
              if (++v49 == v50)
              {
                v49 = (_QWORD *)a1[5];
                break;
              }
            }
          }
          if (v49 != v50)
          {
            v26 = v46;
            v23 = v22;
          }
          if ((unint64_t)v7 >= v81[0])
          {
            v51 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)__p) >> 4);
            v52 = v51 + 1;
            if (v51 + 1 > 0x333333333333333)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(v81[0] - (_QWORD)__p) >> 4) > v52)
              v52 = 0x999999999999999ALL * ((uint64_t)(v81[0] - (_QWORD)__p) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81[0] - (_QWORD)__p) >> 4) >= 0x199999999999999)
              v53 = 0x333333333333333;
            else
              v53 = v52;
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>((uint64_t)v81, v53);
            v56 = &v54[80 * v51];
            *(_QWORD *)v56 = v24;
            *((_QWORD *)v56 + 1) = v23;
            *((_OWORD *)v56 + 1) = v78;
            *((double *)v56 + 4) = v25;
            *((double *)v56 + 5) = v26;
            *((_QWORD *)v56 + 6) = 0;
            *((_QWORD *)v56 + 7) = v47;
            *((_QWORD *)v56 + 8) = &unk_1E98D9278;
            *((_QWORD *)v56 + 9) = 0;
            v57 = (char *)__p;
            v58 = v80;
            if (v80 == __p)
            {
              v57 = v80;
              v64 = &v54[80 * v51];
            }
            else
            {
              v59 = 0;
              do
              {
                v60 = &v56[v59];
                v61 = *(_OWORD *)&v58[v59 - 80];
                v62 = *(_OWORD *)&v58[v59 - 64];
                v63 = *(_OWORD *)&v58[v59 - 32];
                *((_OWORD *)v60 - 3) = *(_OWORD *)&v58[v59 - 48];
                *((_OWORD *)v60 - 2) = v63;
                *((_OWORD *)v60 - 5) = v61;
                *((_OWORD *)v60 - 4) = v62;
                *((_QWORD *)v60 - 2) = &unk_1E98D9278;
                *((_QWORD *)v60 - 1) = *(_QWORD *)&v58[v59 - 8];
                v59 -= 80;
              }
              while (&v58[v59] != v57);
              v64 = &v56[v59];
            }
            v7 = v56 + 80;
            __p = v64;
            v80 = v56 + 80;
            v81[0] = &v54[80 * v55];
            if (v57)
              operator delete(v57);
          }
          else
          {
            *(_QWORD *)v7 = v24;
            *((_QWORD *)v7 + 1) = v23;
            *((_OWORD *)v7 + 1) = v78;
            *((double *)v7 + 4) = v25;
            *((double *)v7 + 5) = v26;
            *((_QWORD *)v7 + 6) = 0;
            *((_QWORD *)v7 + 7) = v47;
            *((_QWORD *)v7 + 8) = &unk_1E98D9278;
            *((_QWORD *)v7 + 9) = 0;
            v7 += 80;
          }
          v80 = v7;
        }
      }
      v25 = v48 + *((double *)v7 - 6);
      *((double *)v7 - 6) = v25;
      v65 = *a2;
      v22 = v35;
    }
    while (v35 < *a2);
  }
  else
  {
    v65 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::createResultPathFromBeamEntry((uint64_t)(a1 + 2), (uint64_t)(v7 - 80), v65, (uint64_t)&v75);
  v66 = a3[2];
  v67 = a3[1];
  if (v67 >= v66)
  {
    v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - *a3) >> 3);
    v70 = v69 + 1;
    if (v69 + 1 > 0x666666666666666)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v71 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - *a3) >> 3);
    if (2 * v71 > v70)
      v70 = 2 * v71;
    if (v71 >= 0x333333333333333)
      v72 = 0x666666666666666;
    else
      v72 = v70;
    v82[4] = a3 + 2;
    if (v72)
      v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(a3 + 2), v72);
    else
      v73 = 0;
    v74 = &v73[40 * v69];
    v82[0] = v73;
    v82[1] = v74;
    v82[3] = &v73[40 * v72];
    *(_QWORD *)v74 = 0;
    *((_QWORD *)v74 + 1) = 0;
    *((_QWORD *)v74 + 2) = 0;
    *(_OWORD *)v74 = v75;
    *((_QWORD *)v74 + 2) = v76;
    v75 = 0uLL;
    v76 = 0;
    *(_OWORD *)(v74 + 24) = v77;
    v82[2] = v74 + 40;
    std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a3, v82);
    v68 = a3[1];
    std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(v82);
  }
  else
  {
    *(_QWORD *)v67 = 0;
    *(_QWORD *)(v67 + 8) = 0;
    *(_QWORD *)(v67 + 16) = 0;
    *(_OWORD *)v67 = v75;
    *(_QWORD *)(v67 + 16) = v76;
    v75 = 0uLL;
    v76 = 0;
    *(_OWORD *)(v67 + 24) = v77;
    v68 = v67 + 40;
  }
  a3[1] = v68;
  v82[0] = &v75;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
  if (__p)
  {
    v80 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1D50E81BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t *a22,void *a23)
{
  std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(&a23);
  a22 = &a11;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D50E8260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_40c100_ZTSN15CoreRecognition7decoder16CTCGreedyDecoderINS0_25SpaceSegmentedPathBuilderINS0_9BaseStateEEEEE96c86_ZTSKNSt3__16vectorIN15CoreRecognition7decoder16ActivationMatrixENS_9allocatorIS3_EEEE120c40_ZTSKN15CoreRecognition7decoder7ContextE(__n128 *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __n128 result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[2].n128_u64[1] = (unint64_t)&unk_1E98D8E40;
  a1[3].n128_u64[0] = v4;
  a1[4].n128_u8[0] = *(_BYTE *)(a2 + 64);
  a1[3].n128_u64[1] = (unint64_t)&unk_1E98D9098;
  a1[5].n128_u64[0] = 0;
  a1[5].n128_u64[1] = 0;
  a1[4].n128_u64[1] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&a1[4].n128_u64[1], *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
  a1[6].n128_u64[0] = 0;
  a1[6].n128_u64[1] = 0;
  a1[7].n128_u64[0] = 0;
  std::vector<CoreRecognition::decoder::ActivationMatrix>::__init_with_size[abi:ne180100]<CoreRecognition::decoder::ActivationMatrix*,CoreRecognition::decoder::ActivationMatrix*>((__n128 *)a1[6].n128_u64, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4));
  v5 = *(_QWORD *)(a2 + 120);
  if (v5)
    CFRetain(*(CFTypeRef *)(a2 + 120));
  a1[7].n128_u64[1] = v5;
  result = *(__n128 *)(a2 + 128);
  a1[8] = result;
  return result;
}

void sub_1D50E8328(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v1[5] = v2;
  v1[7] = v3;
  v5 = (void *)v1[9];
  if (v5)
  {
    v1[10] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E98D8E40;
  a1[2] = &unk_1E98D9098;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void __destroy_helper_block_ea8_40c100_ZTSN15CoreRecognition7decoder16CTCGreedyDecoderINS0_25SpaceSegmentedPathBuilderINS0_9BaseStateEEEEE96c86_ZTSKNSt3__16vectorIN15CoreRecognition7decoder16ActivationMatrixENS_9allocatorIS3_EEEE120c40_ZTSKN15CoreRecognition7decoder7ContextE(uint64_t a1)
{
  const void *v2;
  void *v3;
  void **v4;

  v2 = *(const void **)(a1 + 120);
  if (v2)
    CFRelease(v2);
  v4 = (void **)(a1 + 96);
  std::vector<CoreRecognition::decoder::ActivationMatrix>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(_QWORD *)(a1 + 40) = &unk_1E98D8E40;
  *(_QWORD *)(a1 + 56) = &unk_1E98D9098;
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
}

void CoreRecognition::decoder::Context::~Context(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void sub_1D50E8494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50E86A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 120);
  if (v12)
  {
    *(_QWORD *)(v10 - 112) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_1D50E89B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<CoreRecognition::decoder::ActivationMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D50E8E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void std::vector<espresso_buffer_t>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<espresso_buffer_t>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 168 * a2;
  }
}

void sub_1D50E9C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *v65;

  _Unwind_Resume(a1);
}

void sub_1D50EA2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D50EA414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D50EA49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D50EA51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::~SpaceSegmentedPathBuilder(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E98D9098;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D826E294);
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::createResultPathFromBeamEntry(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v5;
  double **v6;
  double *v8;
  int v10;
  int v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *i;
  __int128 *v52;
  __int128 *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  void *__p[2];
  char *v62;
  double v63;
  __int128 v64;
  __int128 v65;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v5 = *(double *)(a2 + 32);
  *(double *)(a4 + 24) = v5 + *(double *)(a2 + 48);
  *(double *)(a4 + 32) = v5;
  v64 = 0u;
  v65 = 0u;
  *(_OWORD *)__p = 0u;
  v62 = 0;
  v63 = v5;
  v6 = (double **)(a2 + 56);
  if (!*(_QWORD *)(a2 + 56))
  {
    v50 = 0;
    v49 = 0;
    goto LABEL_78;
  }
  v8 = (double *)a2;
  do
  {
    ++*((_QWORD *)&v65 + 1);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(_QWORD *)v8);
    v11 = v10;
    if (v10 != 2)
    {
      if (!v10)
      {
        v16 = (char *)__p[1];
        if (__p[1] >= v62)
        {
          v23 = (char *)__p[0];
          v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
LABEL_92:
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v26 = v62 - (char *)__p[0];
          if ((v62 - (char *)__p[0]) >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v27);
            v23 = (char *)__p[0];
            v16 = (char *)__p[1];
          }
          else
          {
            v28 = 0;
          }
          v44 = &v28[8 * v24];
          *(double *)v44 = *v8;
          v12 = v44 + 8;
          while (v16 != v23)
          {
            v45 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v44 - 1) = v45;
            v44 -= 8;
          }
          __p[0] = v44;
          __p[1] = v12;
          v62 = &v28[8 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(double *)__p[1] = *v8;
          v12 = v16 + 8;
        }
        __p[1] = v12;
        goto LABEL_64;
      }
      if (v10 == 1)
      {
        v13 = (char *)__p[1];
        if (__p[1] >= v62)
        {
          v17 = (char *)__p[0];
          v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            goto LABEL_92;
          v20 = v62 - (char *)__p[0];
          if ((v62 - (char *)__p[0]) >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v21);
            v17 = (char *)__p[0];
            v13 = (char *)__p[1];
          }
          else
          {
            v22 = 0;
          }
          v29 = &v22[8 * v18];
          *(double *)v29 = *v8;
          v14 = v29 + 8;
          while (v13 != v17)
          {
            v30 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v29 - 1) = v30;
            v29 -= 8;
          }
          __p[0] = v29;
          __p[1] = v14;
          v62 = &v22[8 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(double *)__p[1] = *v8;
          v14 = v13 + 8;
        }
        __p[1] = v14;
        v15 = *((_QWORD *)v8 + 1);
      }
      else
      {
LABEL_10:
        v15 = *((_QWORD *)v8 + 1) + 1;
      }
      *((_QWORD *)&v64 + 1) = v15;
      *(_QWORD *)&v65 = a3;
      v31 = *(_QWORD *)(a4 + 8);
      if (v31 >= *(_QWORD *)(a4 + 16))
      {
        v32 = std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
      }
      else
      {
        std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
        v32 = v31 + 64;
      }
      *(_QWORD *)(a4 + 8) = v32;
      v12 = (char *)__p[0];
      __p[1] = __p[0];
      *((_QWORD *)&v65 + 1) = 0;
      if (v11 == 2)
      {
        if (__p[0] >= v62)
        {
          v35 = (v62 - (char *)__p[0]) >> 2;
          if (v35 <= 1)
            v35 = 1;
          if ((unint64_t)(v62 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v36);
          v39 = (char *)__p[0];
          v40 = (char *)__p[1];
          *(double *)v38 = *v8;
          v12 = v38 + 8;
          v41 = v38;
          while (v40 != v39)
          {
            v42 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          __p[0] = v41;
          __p[1] = v38 + 8;
          v62 = &v38[8 * v37];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(double *)__p[0] = *v8;
          v12 += 8;
        }
        __p[1] = v12;
        v33 = v8;
      }
      else
      {
        v33 = *v6;
        if (!*v6)
        {
          v34 = 0.0;
LABEL_56:
          v43 = *((_QWORD *)v8 + 5);
          v63 = v34;
          *(_QWORD *)&v64 = v43;
          a3 = v15;
          goto LABEL_64;
        }
      }
      v34 = v33[4];
      goto LABEL_56;
    }
    v12 = (char *)__p[0];
    if (__p[0] != __p[1])
      goto LABEL_10;
LABEL_64:
    v8 = *v6;
    v46 = *v6;
    v47 = *((_QWORD *)v46 + 7);
    v6 = (double **)(v46 + 7);
  }
  while (v47);
  if (__p[0] != v12)
  {
    *((_QWORD *)&v64 + 1) = 0;
    *(_QWORD *)&v65 = a3;
    v48 = *(_QWORD *)(a4 + 8);
    if (v48 >= *(_QWORD *)(a4 + 16))
    {
      v49 = (__int128 *)std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
    }
    else
    {
      std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
      v49 = (__int128 *)(v48 + 64);
    }
    *(_QWORD *)(a4 + 8) = v49;
    v50 = *(__int128 **)a4;
    goto LABEL_73;
  }
  v50 = *(__int128 **)a4;
  v49 = *(__int128 **)(a4 + 8);
  if (*(__int128 **)a4 == v49)
  {
    v50 = *(__int128 **)(a4 + 8);
  }
  else
  {
    *((_QWORD *)v49 - 3) = 0;
LABEL_73:
    if (v50 != v49)
    {
      for (i = v50 + 4; i != v49; i += 4)
        *((double *)i - 5) = *((double *)i - 5) - *((double *)i + 3);
    }
  }
LABEL_78:
  std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>>(v50, v49);
  v52 = *(__int128 **)a4;
  v53 = *(__int128 **)(a4 + 8);
  while (v52 != v53)
  {
    v54 = *(_QWORD *)v52;
    v55 = *((_QWORD *)v52 + 1);
    v56 = (_QWORD *)(v55 - 8);
    if (*(_QWORD *)v52 != v55 && (unint64_t)v56 > v54)
    {
      v58 = v54 + 8;
      do
      {
        v59 = *(_QWORD *)(v58 - 8);
        *(_QWORD *)(v58 - 8) = *v56;
        *v56-- = v59;
        v60 = v58 >= (unint64_t)v56;
        v58 += 8;
      }
      while (!v60);
    }
    v52 += 4;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D50EAA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 16);
  v5 = *(_QWORD **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(_QWORD *)a2)
    {
      if (++v4 == v5)
      {
        v4 = *(_QWORD **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5 && *(_BYTE *)(result + 8) && *(double *)(a2 + 40) < a4)
  {
    *(_QWORD *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::updateActivationExtension(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 16);
  v5 = *(_QWORD **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(_QWORD *)a2)
    {
      if (++v4 == v5)
      {
        v4 = *(_QWORD **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    *(_QWORD *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

BOOL CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::willCommitBetween(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) == 2
      || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a3) == 1;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::needsToBeCommitted(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 24);
        return 2 * (v2 != v3);
      }
    }
  }
  return 2 * (v2 != v3);
}

__n128 std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  result = *(__n128 *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 64;
  return result;
}

void sub_1D50EABF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[64 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v12 = *(_OWORD *)(a2 + 24);
  v13 = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v13;
  *(_OWORD *)(v11 + 24) = v12;
  v17 += 64;
  std::vector<CoreRecognition::decoder::DecodingToken>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<CoreRecognition::decoder::DecodingToken>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1D50EACF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CoreRecognition::decoder::DecodingToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CoreRecognition::decoder::DecodingToken>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_OWORD *)(a3 + 40);
      v10 = *(_QWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = v10;
      *(_OWORD *)(v7 - 24) = v9;
      v7 = *((_QWORD *)&v16 + 1) - 64;
      *((_QWORD *)&v16 + 1) -= 64;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingToken>,std::reverse_iterator<CoreRecognition::decoder::DecodingToken*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 64;
  }
}

uint64_t std::__split_buffer<CoreRecognition::decoder::DecodingToken>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<CoreRecognition::decoder::DecodingToken>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<CoreRecognition::decoder::DecodingToken>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 64);
    *(_QWORD *)(a1 + 16) = v2 - 64;
    if (v5)
    {
      *(_QWORD *)(v2 - 56) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
}

void std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>>(__int128 *a1, __int128 *a2)
{
  unint64_t v2;
  __int128 *v3;

  v3 = a1;
  if (a1 != a2)
  {
    v2 = (unint64_t)(a2 - 4);
    if (a2 - 4 > a1)
    {
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &>(&v3, (uint64_t *)&v2);
        v2 -= 64;
        v3 += 4;
      }
      while ((unint64_t)v3 < v2);
    }
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *> &>(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __n128 result;
  __int128 v11;
  __n128 v12;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = *((_QWORD *)*a1 + 2);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = 0;
  v11 = v4;
  v12 = *(__n128 *)((char *)v2 + 24);
  v6 = *((_QWORD *)v2 + 5);
  v7 = *((_QWORD *)v2 + 6);
  v8 = *((_QWORD *)v2 + 7);
  std::vector<int>::__move_assign((uint64_t)v2, (__n128 *)v3);
  *(__int128 *)((char *)v2 + 24) = *(_OWORD *)(v3 + 24);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(v3 + 40);
  v2[3] = *(_OWORD *)(v3 + 48);
  v9 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v9;
    operator delete(v9);
  }
  *(_OWORD *)v3 = v11;
  *(_QWORD *)(v3 + 16) = v5;
  result = v12;
  *(__n128 *)(v3 + 24) = v12;
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v7;
  *(_QWORD *)(v3 + 56) = v8;
  return result;
}

void std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CoreRecognition::decoder::DecodingToken>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<CoreRecognition::decoder::DecodingToken>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 64);
      v4 -= 64;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 56) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        v6 = v4;
        std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E98D8E40;
  a1[2] = &unk_1E98D9098;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D826E294);
}

void std::vector<CoreRecognition::decoder::ActivationMatrix>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::allocator<CoreRecognition::decoder::ActivationMatrix>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CoreRecognition::decoder::ActivationMatrix>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[80 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    if (v10 == *a1)
    {
      v17 = v7;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = &v7[v12];
        v14 = *(_OWORD *)&v10[v12 - 80];
        v15 = *(_OWORD *)&v10[v12 - 64];
        v16 = *(_OWORD *)&v10[v12 - 32];
        *((_OWORD *)v13 - 3) = *(_OWORD *)&v10[v12 - 48];
        *((_OWORD *)v13 - 2) = v16;
        *((_OWORD *)v13 - 5) = v14;
        *((_OWORD *)v13 - 4) = v15;
        *((_QWORD *)v13 - 2) = &unk_1E98D9278;
        *((_QWORD *)v13 - 1) = *(_QWORD *)&v10[v12 - 8];
        v12 -= 80;
      }
      while (&v10[v12] != v11);
      v10 = (char *)*a1;
      v17 = &v7[v12];
    }
    *a1 = v17;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void CoreRecognition::decoder::BaseState::~BaseState(CoreRecognition::decoder::BaseState *this)
{
  JUMPOUT(0x1D826E294);
}

uint64_t CoreRecognition::decoder::BaseState::reset(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CoreRecognition::decoder::DecodingPath>,std::reverse_iterator<CoreRecognition::decoder::DecodingPath*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 5;
  }
}

void **std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(void **a1)
{
  std::__split_buffer<CoreRecognition::decoder::DecodingPath>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<CoreRecognition::decoder::DecodingPath>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *std::vector<CoreRecognition::decoder::ActivationMatrix>::__init_with_size[abi:ne180100]<CoreRecognition::decoder::ActivationMatrix*,CoreRecognition::decoder::ActivationMatrix*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a4)
  {
    if (a4 >= 0x333333333333334)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::ActivationMatrix>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[10 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = a2 + v9;
        v11 = &v7[v9 / 8];
        *(_OWORD *)v11 = *(_OWORD *)(a2 + v9);
        v11[3] = 0;
        v11[4] = 0;
        v7[v9 / 8 + 2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v7[v9 / 8 + 2], *(const void **)(a2 + v9 + 16), *(_QWORD *)(a2 + v9 + 24), (uint64_t)(*(_QWORD *)(a2 + v9 + 24) - *(_QWORD *)(a2 + v9 + 16)) >> 2);
        v11[5] = 0;
        v11[6] = 0;
        v12 = &v7[v9 / 8 + 5];
        v12[2] = 0;
        result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, *(const void **)(v10 + 40), *(_QWORD *)(v10 + 48), (uint64_t)(*(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 40)) >> 2);
        *(_OWORD *)&v7[v9 / 8 + 8] = *(_OWORD *)(a2 + v9 + 64);
        v9 += 80;
      }
      while (v10 + 80 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1D50EB6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CoreRecognition::decoder::ActivationMatrix>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::ActivationMatrix>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a1);
}

uint64_t *std::vector<CoreRecognition::decoder::ActivationMatrix>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 80;
      *(_OWORD *)(v4 - 80) = *(_OWORD *)(v3 - 80);
      *(_QWORD *)(v4 - 56) = 0;
      *(_QWORD *)(v4 - 48) = 0;
      *(_QWORD *)(v4 - 64) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v4 - 48) = *(_QWORD *)(v3 - 48);
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 32) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v4 -= 80;
      v3 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<CoreRecognition::decoder::ActivationMatrix>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::allocator<CoreRecognition::decoder::ActivationMatrix>::destroy[abi:ne180100]((_QWORD *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<espresso_buffer_t>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCF3CF3CF3CF3CF3DLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x186186186186186)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xC30C30C30C30C3)
      v11 = 0x186186186186186;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[168 * v8];
    v15 = &v12[168 * v11];
    v16 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 168);
        v21 = *(_OWORD *)(v18 - 152);
        *(_OWORD *)(v14 - 136) = *(_OWORD *)(v18 - 136);
        *(_OWORD *)(v14 - 152) = v21;
        *(_OWORD *)(v14 - 168) = v20;
        v22 = *(_OWORD *)(v18 - 120);
        v23 = *(_OWORD *)(v18 - 104);
        v24 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v24;
        *(_OWORD *)(v14 - 104) = v23;
        *(_OWORD *)(v14 - 120) = v22;
        v25 = *(_OWORD *)(v18 - 56);
        v26 = *(_OWORD *)(v18 - 40);
        v27 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v27;
        *(_OWORD *)(v14 - 40) = v26;
        *(_OWORD *)(v14 - 56) = v25;
        v14 -= 168;
        v18 -= 168;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void sub_1D50EC028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);

  _Unwind_Resume(a1);
}

void sub_1D50EC170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D50EC284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50EC5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50EC69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D50ECBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void sub_1D50ECD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50ECF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D50ED020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D50ED1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50ED218()
{
  JUMPOUT(0x1D50ED208);
}

void sub_1D50ED220()
{
  JUMPOUT(0x1D50ED20CLL);
}

void sub_1D50ED434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1D50ED670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50ED75C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50ED7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50ED898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50ED92C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50ED9A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50ED9FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

cv::Mat *cv::Mat::Mat(cv::Mat *this)
{
  *(_QWORD *)this = &off_1E98D92A0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 36) = &off_1E98D92C0;
  cv::Mat::create(this, 0, 0, 1);
  return this;
}

void sub_1D50EDBBC(_Unwind_Exception *a1)
{
  cv::SmartPtr *v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2;
  cv::SmartPtr::release(v1);
  _Unwind_Resume(a1);
}

void cv::Mat::create(_QWORD *a1, int a2, int *a3, int a4)
{
  size_t v5;
  _QWORD v6[2];
  _DWORD *v7;
  _QWORD v8[3];

  cv::Mat::createInfo((uint64_t)a1, a2, a3, a4, a3);
  v5 = a1[72];
  if (v5)
  {
    v6[0] = &off_1E98D92C0;
    v6[1] = malloc_type_malloc(v5, 0xC7CB7715uLL);
    v7 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    *v7 = 1;
    cv::SmartPtr::operator=((cv::SmartPtr *)(a1 + 36), (cv::SmartPtr *)v6, v8);
    v8[0] = &off_1E98D92C0;
    cv::SmartPtr::release((cv::SmartPtr *)v8);
    v6[0] = &off_1E98D92C0;
    cv::SmartPtr::release((cv::SmartPtr *)v6);
  }
  a1[1] = a1[37];
}

_QWORD *cv::Mat::Mat(_QWORD *a1, int a2, int a3, int a4)
{
  int v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E98D92A0;
  a1[37] = 0;
  a1[38] = 0;
  a1[36] = &off_1E98D92C0;
  v6[0] = a2;
  v6[1] = a3;
  cv::Mat::create(a1, 2, v6, a4);
  return a1;
}

void sub_1D50EDD04(_Unwind_Exception *a1)
{
  cv::SmartPtr *v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2;
  cv::SmartPtr::release(v1);
  _Unwind_Resume(a1);
}

void cv::Mat::createInfo(uint64_t a1, int a2, int *a3, int a4, int *a5)
{
  int v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;

  v6 = a4;
  *(_DWORD *)(a1 + 316) = a4;
  bzero((void *)(a1 + 156), 0x80uLL);
  bzero((void *)(a1 + 28), 0x80uLL);
  bzero((void *)(a1 + 320), 0x80uLL);
  bzero((void *)(a1 + 448), 0x80uLL);
  *(_DWORD *)(a1 + 16) = a2;
  if (a2 >= 1)
  {
    v10 = a2;
    v11 = -1;
    v12 = a1;
    do
    {
      v13 = *a5++;
      *(_DWORD *)(a1 + 4 * (v11 + *(_DWORD *)(a1 + 16)) + 156) = v13;
      *(_DWORD *)(v12 + 28) = *a3;
      v14 = *a3++;
      *(_DWORD *)(v12 + 448) = v14;
      v12 += 4;
      --v11;
      --v10;
    }
    while (v10);
  }
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a1 + 28);
  if (v6 > 32)
  {
    if (v6 != 33)
    {
      if (v6 == 49)
      {
        v6 = 8;
      }
      else
      {
        if (v6 != 65)
          goto LABEL_16;
        v6 = 2;
      }
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((v6 - 3) < 2 || v6 == 1)
    goto LABEL_15;
  if (v6 == 17)
  {
LABEL_13:
    v6 = 4;
LABEL_15:
    *(_DWORD *)(a1 + 312) = v6;
  }
LABEL_16:
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = *(int *)(a1 + 312);
    *(_QWORD *)(a1 + 576) = v16;
    if ((int)v15 >= 1)
    {
      v17 = (int *)(a1 + 156);
      do
      {
        v18 = *v17++;
        v16 *= v18;
        --v15;
      }
      while (v15);
      *(_QWORD *)(a1 + 576) = v16;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 576) = 0;
  }
}

void cv::Mat::~Mat(cv::Mat *this)
{
  *(_QWORD *)this = &off_1E98D92A0;
  *((_QWORD *)this + 36) = &off_1E98D92C0;
  cv::SmartPtr::release((cv::Mat *)((char *)this + 288));
}

{
  *(_QWORD *)this = &off_1E98D92A0;
  *((_QWORD *)this + 36) = &off_1E98D92C0;
  cv::SmartPtr::release((cv::Mat *)((char *)this + 288));
  JUMPOUT(0x1D826E294);
}

void cv::Mat::clear(cv::Mat *this)
{
  uint64_t v2;
  int *v3;
  int v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t v12;

  v2 = *((unsigned int *)this + 4);
  if ((int)v2 < 1)
  {
LABEL_5:
    bzero(*((void **)this + 1), *((_QWORD *)this + 72));
  }
  else
  {
    v3 = (int *)((char *)this + 28);
    while (1)
    {
      v4 = *v3++;
      if (v4 != *((_DWORD *)this + (int)v2 + 38))
        break;
      if (!--v2)
        goto LABEL_5;
    }
    v5 = (char *)*((_QWORD *)this + 1);
    v6 = *((_DWORD *)this + 6);
    switch(*((_DWORD *)this + 79) >> 4)
    {
      case 0:
        v7 = *((_DWORD *)this + 79) & 0xF;
        v8 = v7 * v6;
        v9 = 1;
        break;
      case 1:
      case 2:
        v7 = *((_DWORD *)this + 79) & 0xF;
        v8 = 4 * v6 * v7;
        v9 = 4;
        break;
      case 3:
        v7 = *((_DWORD *)this + 79) & 0xF;
        v8 = 8 * v6 * v7;
        v9 = 8;
        break;
      case 4:
        v7 = *((_DWORD *)this + 79) & 0xF;
        v8 = 2 * v6 * v7;
        v9 = 2;
        break;
      default:
        v8 = 0;
        v9 = 0;
        v7 = *((_DWORD *)this + 79) & 0xF;
        break;
    }
    if (*((int *)this + 5) >= 1)
    {
      v10 = 0;
      v11 = v9 * v7 * (uint64_t)*((int *)this + 39);
      v12 = v8;
      do
      {
        bzero(v5, v12);
        v5 += v11;
        ++v10;
      }
      while (v10 < *((_DWORD *)this + 5));
    }
  }
}

double cv::Mat::vImage@<D0>(cv::Mat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  __int128 v7;
  double result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 80);
  switch(*((_DWORD *)this + 79) >> 4)
  {
    case 0:
      v4 = *((_DWORD *)this + 79) & 0xF;
      v5 = *((_DWORD *)this + 39);
      v2 += v4 * v3 * v5 + *((int *)this + 81) * (uint64_t)v4;
      v6 = 1;
      break;
    case 1:
    case 2:
      v4 = *((_DWORD *)this + 79) & 0xF;
      v5 = *((_DWORD *)this + 39);
      v2 += 4 * v3 * v4 * v5 + 4 * v4 * (uint64_t)*((int *)this + 81);
      v6 = 4;
      break;
    case 3:
      v4 = *((_DWORD *)this + 79) & 0xF;
      v5 = *((_DWORD *)this + 39);
      v2 += 8 * v3 * v4 * v5 + 8 * v4 * (uint64_t)*((int *)this + 81);
      v6 = 8;
      break;
    case 4:
      v4 = *((_DWORD *)this + 79) & 0xF;
      v5 = *((_DWORD *)this + 39);
      v2 += 2 * v3 * v4 * v5 + 2 * v4 * (uint64_t)*((int *)this + 81);
      v6 = 2;
      break;
    default:
      v6 = 0;
      v4 = *((_DWORD *)this + 79) & 0xF;
      v5 = *((_DWORD *)this + 39);
      break;
  }
  *(_QWORD *)a2 = v2;
  result = *(double *)((char *)this + 20);
  *(_QWORD *)&v7 = SLODWORD(result);
  *((_QWORD *)&v7 + 1) = SHIDWORD(result);
  *(_QWORD *)&result = SLODWORD(result);
  *(_OWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 24) = v5 * v4 * v6;
  return result;
}

void sub_1D50EE894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void CRDetectorPostProcessV3::extractAvgAndMaxValueInComponents(uint64_t a1, uint64_t *a2, float **a3, uint64_t *a4, float **a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float *v23;
  float *v24;
  _DWORD *v25;
  float *v26;
  uint64_t v27;
  float *v28;
  float *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  float *v38;
  float *v39;
  float v40;
  void *__p[3];

  std::vector<float>::vector(__p, a3[1] - *a3);
  v14 = *(_QWORD *)(a1 + 112);
  if (v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = *a2;
    v18 = *a4;
    v19 = *a6;
    v20 = *(_QWORD *)(a1 + 104);
    v21 = *(unint64_t **)a1;
    v22 = *(int *)(a1 + 120);
    do
    {
      if (v20)
      {
        v23 = *a3;
        v24 = *a5;
        v25 = (_DWORD *)(v19 + 4 * v16);
        v26 = (float *)__p[0];
        v27 = *a7;
        v28 = (float *)(v18 + 4 * v16);
        v29 = (float *)(v17 + 4 * v16);
        v16 += v20;
        v30 = v21;
        v31 = v20;
        do
        {
          v32 = *v30++;
          v33 = v32 - v22;
          if (v32 >= v22)
          {
            v23[v33] = *v29 + v23[v33];
            v24[v33] = *v28 + v24[v33];
            v26[v33] = v26[v33] + 1.0;
            if (*(float *)(v27 + 4 * v33) < *(float *)v25)
              *(_DWORD *)(v27 + 4 * v33) = *v25;
          }
          ++v25;
          ++v28;
          ++v29;
          --v31;
        }
        while (v31);
      }
      ++v15;
      v21 += v20;
    }
    while (v15 != v14);
  }
  v34 = *a3;
  v35 = __p[0];
  v36 = (char *)a3[1] - (char *)*a3;
  if (v36)
  {
    v37 = v36 >> 2;
    v38 = *a5;
    if (v37 <= 1)
      v37 = 1;
    v39 = (float *)__p[0];
    do
    {
      *v34 = *v34 / *v39;
      ++v34;
      v40 = *v39++;
      *v38 = *v38 / v40;
      ++v38;
      --v37;
    }
    while (v37);
  }
  else if (!__p[0])
  {
    return;
  }
  __p[1] = v35;
  operator delete(v35);
}

void CRDetectorPostProcessV3::extractTableBoxes(_QWORD *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  CRLogger *v5;
  _BYTE *CRLogger;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  vImage_Buffer *v10;
  NSString *v11;
  CRDetectorUtils::CRTextDetectorConnectedComponentResult *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  CRNormalizedQuad *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  CRNormalizedQuad *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  float *v59;
  int v60;
  double v61;
  float v62;
  float *v63;
  float *v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  float *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  float **v76;
  unint64_t v77;
  _QWORD *v78;
  float *v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  float *v86;
  int v87;
  uint64_t v88;
  float *v89;
  float **v90;
  unint64_t v91;
  _QWORD *v92;
  float *v93;
  float *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  float *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  int v115;
  char **v116;
  char *v117;
  void **v118;
  unint64_t v119;
  _QWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  float WeightedMedianAngle;
  double v147;
  NSObject *v148;
  float *v149;
  float *v150;
  double v151;
  double v152;
  __float2 v153;
  double cosval;
  double sinval;
  unint64_t v156;
  int *v157;
  float v158;
  float v159;
  float v160;
  float v161;
  double v162;
  int v163;
  double v164;
  double v165;
  double v166;
  double v167;
  float v168;
  float v169;
  NSObject *v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  NSObject *v187;
  double v188;
  NSObject *v189;
  unint64_t *v190;
  CRNormalizedQuad *v191;
  void *v192;
  double v193;
  _BOOL4 v194;
  unint64_t *v195;
  unint64_t v196;
  CRImageSpaceQuad *v197;
  CRNormalizedQuad *v198;
  void *v199;
  double v200;
  _BOOL4 v201;
  unint64_t *v202;
  unint64_t v203;
  NSObject *v204;
  void *v205;
  double v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  double *v214;
  char *v215;
  double *v216;
  NSObject *v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  double *v226;
  char *v227;
  double *v228;
  uint64_t v229;
  double *v230;
  double *v231;
  uint64_t v232;
  double *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  float *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  id *v242;
  char **v243;
  unint64_t v244;
  _QWORD *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  int64x2_t v257;
  char *v258;
  uint64_t v259;
  uint64_t j;
  id v261;
  char *v262;
  char *v263;
  id v264;
  char v265;
  NSObject *v266;
  uint64_t v267;
  uint64_t v268;
  float v269;
  float v270;
  unint64_t v271;
  double v272;
  double *v273;
  void *v274;
  double v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  double v279;
  id v280;
  double *v281;
  uint64_t v284;
  double v285;
  id obj;
  int obja;
  _QWORD v288[3];
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  void *__p;
  void *v294;
  uint64_t v295;
  void *v296;
  float *v297;
  float *v298;
  void *v299;
  float *v300;
  float *v301;
  _QWORD v302[3];
  uint64_t __B;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  uint8_t buf[8];
  void *v309;
  _BYTE *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  int v318;
  float *v319[3];
  float *__C;
  float *v321;
  uint64_t v322;
  CRNormalizedQuad *v323;
  _BYTE v324[24];
  _BYTE v325[18];
  __int16 v326;
  double v327;
  __int16 v328;
  double v329;
  __int16 v330;
  double v331;
  __int16 v332;
  double v333;
  _BYTE v334[128];
  uint64_t v335;

  v335 = *MEMORY[0x1E0C80C00];
  v280 = a3;
  if (!a1)
  {
    CROSLogForCategory(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D4FB8000, v18, OS_LOG_TYPE_ERROR, "Nil tableMap buffer in extractTableBoxes.", buf, 2u);
    }

    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_283;
  }
  memset(v319, 0, sizeof(v319));
  v277 = a1[2];
  v278 = a1[1];
  std::vector<float>::vector(&__C, v277 * v278);
  LODWORD(v305) = 1061997773;
  LODWORD(__B) = 1056964608;
  MEMORY[0x1D826EDE0](*a1, 1, &v305, &__B, __C, 1, a1[2] * a1[1]);
  vDSP_vsadd(__C, 1, (const float *)&__B, __C, 1, a1[2] * a1[1]);
  CRLogger = CRLogger::getCRLogger(v5);
  if (*CRLogger && (CRLogger[8] & 1) != 0)
  {
    v7 = malloc_type_calloc(a1[1] * a1[2], 4uLL, 0x100004052888210uLL);
    v8 = a1[1];
    v9 = a1[2];
    *(_QWORD *)v324 = v7;
    *(_QWORD *)&v324[8] = v8;
    *(_QWORD *)&v324[16] = v9;
    *(_QWORD *)v325 = 4 * v9;
    if (v321 != __C)
      memmove(v7, __C, (char *)v321 - (char *)__C);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%f_tableMap.png"), (float)rand());
    v10 = (vImage_Buffer *)objc_claimAutoreleasedReturnValue();
    CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)v324, v10, v11);
    free(*(void **)v324);

  }
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)buf, v277, v278, 1, 1, 1);
  CRDetectorUtils::connectComponentLabel((CRDetectorUtils *)__C, (float *)v277, v278, (float64x2_t **)buf, v12);
  if (__C)
  {
    v321 = __C;
    operator delete(__C);
  }
  v14 = v309;
  v13 = v310;
  v15 = v310 - (_BYTE *)v309;
  v16 = (v310 - (_BYTE *)v309) >> 3;
  v305 = 0;
  v306 = 0;
  v307 = 0;
  std::vector<CRNormalizedQuad * {__strong}>::reserve(&v305, v16);
  if (v13 == v14)
  {
    v281 = 0;
    v273 = 0;
  }
  else
  {
    if (v15 >= 0x7FFFFFFFFFFFFFF9)
      std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]();
    v281 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v16);
    v273 = &v281[2 * v17];
  }
  std::vector<std::vector<float>>::vector(&__B, v16);
  std::vector<std::vector<float>>::vector(v302, v16);
  v299 = 0;
  v300 = 0;
  v301 = 0;
  v296 = 0;
  v297 = 0;
  v298 = 0;
  __p = 0;
  v294 = 0;
  v295 = 0;
  if (v13 != v14)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](&__p, v16);
    v19 = (char *)v294;
    bzero(v294, v15 & 0xFFFFFFFFFFFFFFF8);
    v294 = &v19[8 * v16];
  }
  v274 = v14;
  v276 = v13;
  v271 = v16;
  v291 = 0u;
  v292 = 0u;
  v289 = 0u;
  v290 = 0u;
  obj = v280;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v289, v334, 16);
  if (v20)
  {
    v21 = *(_QWORD *)v290;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v290 != v21)
          objc_enumerationMutation(obj);
        v23 = *(void **)(*((_QWORD *)&v289 + 1) + 8 * i);
        v24 = [CRNormalizedQuad alloc];
        objc_msgSend(v23, "topLeft");
        v26 = v25;
        v28 = v27;
        objc_msgSend(v23, "topRight");
        v30 = v29;
        v32 = v31;
        objc_msgSend(v23, "bottomRight");
        v34 = v33;
        v36 = v35;
        objc_msgSend(v23, "bottomLeft");
        v39 = -[CRNormalizedQuad initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:](v24, "initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:", v26, v28, v30, v32, v34, v36, v37, v38, (double)v316, (double)v317);
        -[CRNormalizedQuad midPoint](v39, "midPoint");
        v41 = v40;
        v43 = v42;
        -[CRNormalizedQuad normalizationSize](v39, "normalizationSize");
        v45 = v44;
        -[CRNormalizedQuad normalizationSize](v39, "normalizationSize");
        v47 = *(_QWORD *)(*(_QWORD *)buf + 8 * ((unint64_t)(v41 * v45) + v316 * (unint64_t)(v43 * v46)));
        objc_msgSend(v23, "baselineAngle");
        v49 = v48;
        if (objc_msgSend(v23, "shouldRotate180"))
        {
          v50 = v49 + 3.14159265;
          v49 = v50;
        }
        v51 = v300;
        if (v300 >= v301)
        {
          v53 = (float *)v299;
          v54 = ((char *)v300 - (_BYTE *)v299) >> 2;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v56 = (char *)v301 - (_BYTE *)v299;
          if (((char *)v301 - (_BYTE *)v299) >> 1 > v55)
            v55 = v56 >> 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v301, v57);
            v53 = (float *)v299;
            v51 = v300;
          }
          else
          {
            v58 = 0;
          }
          v59 = (float *)&v58[4 * v54];
          *v59 = v49;
          v52 = v59 + 1;
          while (v51 != v53)
          {
            v60 = *((_DWORD *)v51-- - 1);
            *((_DWORD *)v59-- - 1) = v60;
          }
          v299 = v59;
          v300 = v52;
          v301 = (float *)&v58[4 * v57];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *v300 = v49;
          v52 = v51 + 1;
        }
        v300 = v52;
        objc_msgSend(v23, "bounds");
        v62 = v61;
        v63 = v297;
        if (v297 >= v298)
        {
          v65 = (float *)v296;
          v66 = ((char *)v297 - (_BYTE *)v296) >> 2;
          v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 62)
            goto LABEL_285;
          v68 = (char *)v298 - (_BYTE *)v296;
          if (((char *)v298 - (_BYTE *)v296) >> 1 > v67)
            v67 = v68 >> 1;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
            v69 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v69 = v67;
          if (v69)
          {
            v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v298, v69);
            v65 = (float *)v296;
            v63 = v297;
          }
          else
          {
            v70 = 0;
          }
          v71 = (float *)&v70[4 * v66];
          *v71 = v62;
          v64 = v71 + 1;
          while (v63 != v65)
          {
            v72 = *((_DWORD *)v63-- - 1);
            *((_DWORD *)v71-- - 1) = v72;
          }
          v296 = v71;
          v297 = v64;
          v298 = (float *)&v70[4 * v69];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *v297 = v62;
          v64 = v63 + 1;
        }
        v297 = v64;
        if (v47)
        {
          v73 = v47 - 1;
          if (objc_msgSend(v23, "isVerticalLayout"))
            ++*((_QWORD *)__p + v73);
          v74 = __B + 24 * v73;
          v76 = (float **)(v74 + 8);
          v75 = *(float **)(v74 + 8);
          v78 = (_QWORD *)(v74 + 16);
          v77 = *(_QWORD *)(v74 + 16);
          if ((unint64_t)v75 >= v77)
          {
            v80 = *(float **)v74;
            v81 = ((uint64_t)v75 - *(_QWORD *)v74) >> 2;
            v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 62)
              goto LABEL_285;
            v83 = v77 - (_QWORD)v80;
            if (v83 >> 1 > v82)
              v82 = v83 >> 1;
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
              v84 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v84 = v82;
            if (v84)
            {
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v78, v84);
              v75 = *v76;
              v80 = *(float **)v74;
            }
            else
            {
              v85 = 0;
            }
            v86 = (float *)&v85[4 * v81];
            *v86 = v49;
            v79 = v86 + 1;
            while (v75 != v80)
            {
              v87 = *((_DWORD *)v75-- - 1);
              *((_DWORD *)v86-- - 1) = v87;
            }
            *(_QWORD *)v74 = v86;
            *v76 = v79;
            *v78 = &v85[4 * v84];
            if (v80)
              operator delete(v80);
          }
          else
          {
            *v75 = v49;
            v79 = v75 + 1;
          }
          *v76 = v79;
          v88 = v302[0] + 24 * v73;
          v90 = (float **)(v88 + 8);
          v89 = *(float **)(v88 + 8);
          v92 = (_QWORD *)(v88 + 16);
          v91 = *(_QWORD *)(v88 + 16);
          if ((unint64_t)v89 >= v91)
          {
            v94 = *(float **)v88;
            v95 = ((uint64_t)v89 - *(_QWORD *)v88) >> 2;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 62)
LABEL_285:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v97 = v91 - (_QWORD)v94;
            if (v97 >> 1 > v96)
              v96 = v97 >> 1;
            if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
              v98 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v98 = v96;
            if (v98)
            {
              v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v92, v98);
              v89 = *v90;
              v94 = *(float **)v88;
            }
            else
            {
              v99 = 0;
            }
            v100 = (float *)&v99[4 * v95];
            *v100 = v62;
            v93 = v100 + 1;
            while (v89 != v94)
            {
              v101 = *((_DWORD *)v89-- - 1);
              *((_DWORD *)v100-- - 1) = v101;
            }
            *(_QWORD *)v88 = v100;
            *v90 = v93;
            *v92 = &v99[4 * v98];
            if (v94)
              operator delete(v94);
          }
          else
          {
            *v89 = v62;
            v93 = v89 + 1;
          }
          *v90 = v93;
        }

      }
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v289, v334, 16);
    }
    while (v20);
  }

  if (v304 != __B)
  {
    v102 = 0;
    v103 = 0;
    do
    {
      CROSLogForCategory(5);
      v104 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
      {
        v105 = *((_QWORD *)v309 + v103);
        v106 = (uint64_t)(*(_QWORD *)(__B + v102 + 8) - *(_QWORD *)(__B + v102)) >> 2;
        *(_DWORD *)v324 = 67109888;
        *(_DWORD *)&v324[4] = v103;
        *(_WORD *)&v324[8] = 1024;
        *(_DWORD *)&v324[10] = v103 + v318;
        *(_WORD *)&v324[14] = 2048;
        *(_QWORD *)&v324[16] = v105;
        *(_WORD *)v325 = 2048;
        *(_QWORD *)&v325[2] = v106;
        _os_log_impl(&dword_1D4FB8000, v104, OS_LOG_TYPE_DEBUG, "componentIdx: %i componentLabel: %i - componentsize: %lu baseline angles: %lu", v324, 0x22u);
      }

      ++v103;
      v102 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v304 - __B) >> 3) > v103);
  }
  std::vector<std::vector<PixelPosition>>::vector(v288, (v310 - (_BYTE *)v309) >> 3);
  v107 = v309;
  if (v310 != v309)
  {
    v108 = 0;
    v109 = 0;
    do
    {
      std::vector<PixelPosition>::reserve((void **)(v288[0] + v108), v107[v109++]);
      v107 = v309;
      v108 += 24;
    }
    while (v109 < (v310 - (_BYTE *)v309) >> 3);
  }
  if ((int)v317 >= 1)
  {
    v110 = 0;
    v284 = v317;
    obja = v316;
    v111 = v316;
    do
    {
      if (obja >= 1)
      {
        v112 = 0;
        do
        {
          v113 = *(_QWORD *)(*(_QWORD *)buf + 8 * (v112 + v316 * v110));
          v114 = __OFSUB__((_DWORD)v113, v318);
          v115 = v113 - v318;
          if (v115 < 0 == v114)
          {
            v116 = (char **)(v288[0] + 24 * v115);
            v118 = (void **)(v116 + 1);
            v117 = v116[1];
            v120 = v116 + 2;
            v119 = (unint64_t)v116[2];
            if ((unint64_t)v117 >= v119)
            {
              v122 = (v117 - *v116) >> 3;
              v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 61)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v124 = v119 - (_QWORD)*v116;
              if (v124 >> 2 > v123)
                v123 = v124 >> 2;
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
                v125 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v125 = v123;
              v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v116 + 2), v125);
              v128 = &v126[8 * v122];
              *(_DWORD *)v128 = v112;
              *((_DWORD *)v128 + 1) = v110;
              v129 = (char *)*v118;
              v130 = *v116;
              v131 = v128;
              if (*v118 != *v116)
              {
                do
                {
                  v132 = *((_QWORD *)v129 - 1);
                  v129 -= 8;
                  *((_QWORD *)v131 - 1) = v132;
                  v131 -= 8;
                }
                while (v129 != v130);
                v129 = *v116;
              }
              *v116 = v131;
              v121 = v128 + 8;
              *v118 = v128 + 8;
              *v120 = &v126[8 * v127];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *(_DWORD *)v117 = v112;
              *((_DWORD *)v117 + 1) = v110;
              v121 = v117 + 8;
            }
            *v118 = v121;
          }
          ++v112;
        }
        while (v112 != v111);
      }
      ++v110;
    }
    while (v110 != v284);
  }
  if (v276 == v274)
  {
    v231 = 0;
    v233 = 0;
    goto LABEL_227;
  }
  v133 = 0;
  if (v271 <= 1)
    v134 = 1;
  else
    v134 = v271;
  v275 = (double)(unint64_t)v277;
  v272 = (double)(unint64_t)v278;
  v269 = (float)(unint64_t)v278;
  v135 = (char *)v281;
  do
  {
    CROSLogForCategory(5);
    v136 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
    {
      v137 = *((_QWORD *)v309 + v133);
      *(_DWORD *)v324 = 134218752;
      *(_QWORD *)&v324[4] = v316;
      *(_WORD *)&v324[12] = 2048;
      *(_QWORD *)&v324[14] = v317;
      *(_WORD *)&v324[22] = 1024;
      *(_DWORD *)v325 = v133;
      *(_WORD *)&v325[4] = 2048;
      *(_QWORD *)&v325[6] = v137;
      _os_log_impl(&dword_1D4FB8000, v136, OS_LOG_TYPE_DEBUG, "ccMap: %lu x %lu - component: %i: %lu", v324, 0x26u);
    }

    if (*((_QWORD *)v309 + v133) < a2
      || (v138 = *(_QWORD *)(__B + 24 * v133 + 8) - *(_QWORD *)(__B + 24 * v133), (unint64_t)v138 <= 0xF))
    {
      CROSLogForCategory(5);
      v139 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
      {
        v140 = *((_QWORD *)v309 + v133);
        v141 = (uint64_t)(*(_QWORD *)(__B + 24 * v133 + 8) - *(_QWORD *)(__B + 24 * v133)) >> 2;
        *(_DWORD *)v324 = 134218752;
        *(_QWORD *)&v324[4] = v140;
        *(_WORD *)&v324[12] = 2048;
        *(_QWORD *)&v324[14] = a2;
        *(_WORD *)&v324[22] = 2048;
        *(_QWORD *)v325 = v141;
        *(_WORD *)&v325[8] = 1024;
        *(_DWORD *)&v325[10] = 4;
        _os_log_impl(&dword_1D4FB8000, v139, OS_LOG_TYPE_DEBUG, "Rejecting Table in Detection because area too small (%lu <= %lu) or too few lines (%lu < %d)", v324, 0x26u);
      }
LABEL_135:

      goto LABEL_136;
    }
    v142 = v138 >> 2;
    if ((unint64_t)v138 >= 0x801)
    {
      CROSLogForCategory(5);
      v139 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v324 = 134218240;
        *(_QWORD *)&v324[4] = v142;
        *(_WORD *)&v324[12] = 1024;
        *(_DWORD *)&v324[14] = 512;
        _os_log_impl(&dword_1D4FB8000, v139, OS_LOG_TYPE_DEBUG, "Rejecting Table in Detection because too many line regions (we don't have ANE config for), (%lu > %d)", v324, 0x12u);
      }
      goto LABEL_135;
    }
    if ((double)(unint64_t)v142 * 0.25 < (double)*((unint64_t *)__p + v133))
    {
      CROSLogForCategory(5);
      v139 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v324 = 134217984;
        *(_QWORD *)&v324[4] = 0x3FD0000000000000;
        _os_log_impl(&dword_1D4FB8000, v139, OS_LOG_TYPE_DEBUG, "Rejecting Table in Detection because more than %f x of text regions is vertical text. Currently tables are not supported for vertical text.", v324, 0xCu);
      }
      goto LABEL_135;
    }
    CRDetectorUtils::generateConvexHull(v288[0] + 24 * v133, (char *)&__C);
    CROSLogForCategory(5);
    v143 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
    {
      v144 = (uint64_t)(*(_QWORD *)(__B + 24 * v133 + 8) - *(_QWORD *)(__B + 24 * v133)) >> 2;
      v145 = *((_QWORD *)v309 + v133);
      *(_DWORD *)v324 = 134218752;
      *(_QWORD *)&v324[4] = v144;
      *(_WORD *)&v324[12] = 1024;
      *(_DWORD *)&v324[14] = v133;
      *(_WORD *)&v324[18] = 1024;
      *(_DWORD *)&v324[20] = v318 + v133;
      *(_WORD *)v325 = 2048;
      *(_QWORD *)&v325[2] = v145;
      _os_log_impl(&dword_1D4FB8000, v143, OS_LOG_TYPE_DEBUG, "Table Detection: Found %lu baseline angles for component %i, label: %d of size %lu", v324, 0x22u);
    }

    WeightedMedianAngle = getWeightedMedianAngle((uint64_t *)&v299, (uint64_t *)&v296);
    v147 = getWeightedMedianAngle((uint64_t *)(__B + 24 * v133), (uint64_t *)(v302[0] + 24 * v133));
    v285 = WeightedMedianAngle;
    if (vabdd_f64(WeightedMedianAngle, v147) > 0.05)
    {
      CROSLogForCategory(5);
      v148 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v324 = 134218240;
        *(double *)&v324[4] = v147;
        *(_WORD *)&v324[12] = 2048;
        *(double *)&v324[14] = WeightedMedianAngle;
        _os_log_impl(&dword_1D4FB8000, v148, OS_LOG_TYPE_DEBUG, "Local weighted median table angle: %f vs. global weighted median table angle: %f", v324, 0x16u);
      }

    }
    v149 = v321;
    v150 = __C;
    v152 = *MEMORY[0x1E0C9D538];
    v151 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v153 = __sincosf_stret(WeightedMedianAngle);
    cosval = v153.__cosval;
    if (v149 == v150)
    {
      v160 = -3.4028e38;
      v161 = 3.4028e38;
      v158 = 3.4028e38;
      v159 = -3.4028e38;
    }
    else
    {
      sinval = v153.__sinval;
      v156 = ((char *)v149 - (char *)v150) >> 3;
      if (v156 <= 1)
        v156 = 1;
      v157 = (int *)(v150 + 1);
      v158 = 3.4028e38;
      v159 = -3.4028e38;
      v160 = -3.4028e38;
      v161 = 3.4028e38;
      do
      {
        v162 = (double)*(v157 - 1);
        v163 = *v157;
        v157 += 2;
        v164 = (double)v163 - v151;
        v165 = v162 - v152;
        v166 = v152 + v165 * cosval - v164 * sinval;
        v167 = v151 + v164 * cosval + v165 * sinval;
        v168 = v166;
        v169 = v167;
        if (v159 < v168)
          v159 = v166;
        if (v158 > v168)
          v158 = v166;
        if (v160 < v169)
          v160 = v169;
        if (v161 > v169)
          v161 = v169;
        --v156;
      }
      while (v156);
    }
    CROSLogForCategory(5);
    v170 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v324 = 134218496;
      *(double *)&v324[4] = v285;
      *(_WORD *)&v324[12] = 2048;
      *(double *)&v324[14] = (float)(v159 - v158);
      *(_WORD *)&v324[22] = 2048;
      *(double *)v325 = (float)(v160 - v161);
      _os_log_impl(&dword_1D4FB8000, v170, OS_LOG_TYPE_DEBUG, "Table Detection: angle: %f width: %f height: %f", v324, 0x20u);
    }

    v171 = v158 - v152;
    v172 = v161 - v151;
    v173 = (float)-v153.__sinval;
    v174 = -(v172 * v173);
    v279 = v152 + v171 * cosval - v172 * v173;
    v175 = v172 * cosval;
    v176 = v151 + v175 + v171 * v173;
    v177 = v159 - v152;
    v178 = v152 + v174 + v177 * cosval;
    v179 = v151 + v175 + v177 * v173;
    v180 = v160 - v151;
    v181 = -(v180 * v173);
    v182 = v152 + v177 * cosval - v180 * v173;
    v183 = v180 * cosval;
    v184 = v151 + v183 + v177 * v173;
    v185 = v152 + v181 + v171 * cosval;
    v186 = v151 + v183 + v171 * v173;
    CROSLogForCategory(5);
    v187 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v324 = 134219776;
      *(double *)&v324[4] = v279;
      *(_WORD *)&v324[12] = 2048;
      *(double *)&v324[14] = v176;
      *(_WORD *)&v324[22] = 2048;
      *(double *)v325 = v178;
      *(_WORD *)&v325[8] = 2048;
      *(double *)&v325[10] = v179;
      v326 = 2048;
      v327 = v182;
      v328 = 2048;
      v329 = v184;
      v330 = 2048;
      v331 = v185;
      v332 = 2048;
      v333 = v186;
      _os_log_impl(&dword_1D4FB8000, v187, OS_LOG_TYPE_DEBUG, "Table Detection: topLeft: (%f, %f) topRight: (%f, %f) bottomRight: (%f, %f) bottomLeft: (%f, %f)", v324, 0x52u);
    }

    v188 = fabs(v285);
    if (v188 >= 0.0174532925)
    {
      if (v188 < 6.28318531)
      {
        v197 = -[CRImageSpaceQuad initWithTopLeft:topRight:bottomRight:bottomLeft:]([CRImageSpaceQuad alloc], "initWithTopLeft:topRight:bottomRight:bottomLeft:", v279, v176, v178, v179, v182, v184, v185, v186);
        v198 = -[CRNormalizedQuad initWithDenormalizedQuad:size:]([CRNormalizedQuad alloc], "initWithDenormalizedQuad:size:", v197, v275, v272);
        v323 = v198;
        -[CRNormalizedQuad denormalizedQuad](v198, "denormalizedQuad");
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v199, "area");
        v201 = v200 < (double)*((unint64_t *)v309 + v133) * 1.35;

        if (v201)
        {
          v202 = (unint64_t *)v309;
          v203 = v306 - v305;
          if (v281 >= v273)
          {
            v220 = ((char *)v281 - v135) >> 4;
            v221 = v220 + 1;
            if ((unint64_t)(v220 + 1) >> 60)
              std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]();
            if (((char *)v273 - v135) >> 3 > v221)
              v221 = ((char *)v273 - v135) >> 3;
            if ((unint64_t)((char *)v273 - v135) >= 0x7FFFFFFFFFFFFFF0)
              v222 = 0xFFFFFFFFFFFFFFFLL;
            else
              v222 = v221;
            v223 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v222);
            v225 = &v223[16 * v220];
            *(double *)v225 = (double)v202[v133];
            *((_DWORD *)v225 + 2) = v203 >> 3;
            v226 = v281;
            if (v281 == (double *)v135)
            {
              v228 = v281;
              v135 = &v223[16 * v220];
            }
            else
            {
              v227 = &v223[16 * v220];
              do
              {
                *((_OWORD *)v227 - 1) = *((_OWORD *)v226 - 1);
                v227 -= 16;
                v226 -= 2;
              }
              while (v226 != (double *)v135);
              v228 = (double *)v135;
              v135 = v227;
            }
            v273 = (double *)&v223[16 * v224];
            v281 = (double *)(v225 + 16);
            if (v228)
              operator delete(v228);
          }
          else
          {
            *v281 = (double)*((unint64_t *)v309 + v133);
            *((_DWORD *)v281 + 2) = v203 >> 3;
            v281 += 2;
          }
          std::vector<CRNormalizedQuad * {__strong}>::emplace_back<CRNormalizedQuad * {__strong}&>(&v305, (id *)&v323);
          v198 = v323;
        }
        else
        {
          CROSLogForCategory(5);
          v217 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v217, OS_LOG_TYPE_DEBUG))
          {
            -[CRNormalizedQuad denormalizedQuad](v198, "denormalizedQuad");
            v218 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v218, "area");
            *(_DWORD *)v324 = 134217984;
            *(_QWORD *)&v324[4] = v219;
            _os_log_impl(&dword_1D4FB8000, v217, OS_LOG_TYPE_DEBUG, "Dropping table with too large quad area %f", v324, 0xCu);

          }
        }

      }
    }
    else
    {
      CROSLogForCategory(5);
      v189 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v324 = 134217984;
        *(double *)&v324[4] = v285;
        _os_log_impl(&dword_1D4FB8000, v189, OS_LOG_TYPE_DEBUG, "Table with angle %f -> dropping rotation", v324, 0xCu);
      }

      v190 = (unint64_t *)((char *)v311 + 32 * v133);
      v270 = (float)(unint64_t)v277;
      v191 = -[CRNormalizedQuad initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:]([CRNormalizedQuad alloc], "initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:", (float)((float)v190[2] / v270), (float)((float)*v190 / v269), (float)((float)v190[3] / v270), (float)((float)*v190 / v269), (float)((float)v190[3] / v270), (float)((float)v190[1] / v269), (float)((float)v190[2] / v270), (float)((float)v190[1] / v269), *(_QWORD *)&v275, *(_QWORD *)&v272);
      v323 = v191;
      -[CRNormalizedQuad denormalizedQuad](v191, "denormalizedQuad");
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v192, "area");
      v194 = v193 < (double)*((unint64_t *)v309 + v133) * 1.35;

      if (v194)
      {
        v195 = (unint64_t *)v309;
        v196 = v306 - v305;
        if (v281 >= v273)
        {
          v208 = ((char *)v281 - v135) >> 4;
          v209 = v208 + 1;
          if ((unint64_t)(v208 + 1) >> 60)
            std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]();
          if (((char *)v273 - v135) >> 3 > v209)
            v209 = ((char *)v273 - v135) >> 3;
          if ((unint64_t)((char *)v273 - v135) >= 0x7FFFFFFFFFFFFFF0)
            v210 = 0xFFFFFFFFFFFFFFFLL;
          else
            v210 = v209;
          v211 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v210);
          v213 = &v211[16 * v208];
          *(double *)v213 = (double)v195[v133];
          *((_DWORD *)v213 + 2) = v196 >> 3;
          v214 = v281;
          if (v281 == (double *)v135)
          {
            v216 = v281;
            v135 = &v211[16 * v208];
          }
          else
          {
            v215 = &v211[16 * v208];
            do
            {
              *((_OWORD *)v215 - 1) = *((_OWORD *)v214 - 1);
              v215 -= 16;
              v214 -= 2;
            }
            while (v214 != (double *)v135);
            v216 = (double *)v135;
            v135 = v215;
          }
          v273 = (double *)&v211[16 * v212];
          v281 = (double *)(v213 + 16);
          if (v216)
            operator delete(v216);
        }
        else
        {
          *v281 = (double)*((unint64_t *)v309 + v133);
          *((_DWORD *)v281 + 2) = v196 >> 3;
          v281 += 2;
        }
        std::vector<CRNormalizedQuad * {__strong}>::emplace_back<CRNormalizedQuad * {__strong}&>(&v305, (id *)&v323);
        v191 = v323;
      }
      else
      {
        CROSLogForCategory(5);
        v204 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
        {
          -[CRNormalizedQuad denormalizedQuad](v191, "denormalizedQuad");
          v205 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v205, "area");
          v206 = (double)*((unint64_t *)v309 + v133) * 1.35;
          *(_DWORD *)v324 = 134218240;
          *(_QWORD *)&v324[4] = v207;
          *(_WORD *)&v324[12] = 2048;
          *(double *)&v324[14] = v206;
          _os_log_impl(&dword_1D4FB8000, v204, OS_LOG_TYPE_DEBUG, "Dropping table with too large quad area %f >= %f", v324, 0x16u);

        }
      }

    }
    if (__C)
    {
      v321 = __C;
      operator delete(__C);
    }
LABEL_136:
    ++v133;
  }
  while (v133 != v134);
  v229 = (char *)v281 - v135;
  if (v281 == (double *)v135)
  {
    v231 = 0;
    v233 = 0;
  }
  else
  {
    if (v229 < 0)
      std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]();
    v230 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v229 >> 4);
    v231 = v230;
    v232 = 0;
    do
    {
      *(_OWORD *)&v230[v232] = *(_OWORD *)&v135[v232 * 8];
      v232 += 2;
    }
    while (&v135[v232 * 8] != (char *)v281);
    v233 = &v230[v232];
  }
  v281 = (double *)v135;
LABEL_227:
  v234 = v305;
  v235 = v306;
  if (v305 == v306)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    v321 = 0;
    __C = 0;
    v322 = 0;
    *(_QWORD *)v324 = &__C;
    v324[8] = 0;
    std::vector<unsigned long>::__vallocate[abi:ne180100](&__C, (v306 - v305) >> 3);
    v236 = 0;
    v237 = v321;
    do
    {
      *(_QWORD *)&v237[v236] = *(id *)&v234[v236 * 4];
      v236 += 2;
    }
    while (&v234[v236 * 4] != v235);
    v238 = ((char *)v233 - (char *)v231) >> 4;
    v239 = 126 - 2 * __clz(v238);
    v240 = (char *)v233 - (char *)v231;
    v321 = &v237[v236];
    if (v233 == v231)
      v241 = 0;
    else
      v241 = v239;
    std::__introsort<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,false>((uint64_t)v231, v233, &__C, v241, 1);
    *(_QWORD *)v324 = &__C;
    std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    std::vector<CRNormalizedQuad * {__strong}>::reserve((char **)a4, ((char *)v233 - (char *)v231) >> 4);
    v242 = (id *)v305;
    if (v306 != v305)
    {
      v243 = (char **)a4;
      v244 = *(_QWORD *)(a4 + 16);
      v245 = *(_QWORD **)(a4 + 8);
      if ((unint64_t)v245 >= v244)
      {
        v247 = ((uint64_t)v245 - *(_QWORD *)a4) >> 3;
        if ((unint64_t)(v247 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v248 = v244 - *(_QWORD *)a4;
        v249 = v248 >> 2;
        if (v248 >> 2 <= (unint64_t)(v247 + 1))
          v249 = v247 + 1;
        v250 = (unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v249;
        *(_QWORD *)&v325[8] = a4 + 16;
        v251 = v250 ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4 + 16, v250) : 0;
        v252 = &v251[8 * v247];
        v253 = &v251[8 * v250];
        *(_QWORD *)v325 = v253;
        *(_QWORD *)v252 = *v242;
        v246 = v252 + 8;
        *(_QWORD *)&v324[16] = v252 + 8;
        v255 = *(char **)a4;
        v254 = *(char **)(a4 + 8);
        if (v254 == *(char **)a4)
        {
          v257 = vdupq_n_s64((unint64_t)v254);
          v243 = (char **)a4;
        }
        else
        {
          do
          {
            v256 = *((_QWORD *)v254 - 1);
            v254 -= 8;
            *(_QWORD *)v254 = 0;
            *((_QWORD *)v252 - 1) = v256;
            v252 -= 8;
          }
          while (v254 != v255);
          v243 = (char **)a4;
          v257 = *(int64x2_t *)a4;
          v246 = *(char **)&v324[16];
          v253 = *(char **)v325;
        }
        *v243 = v252;
        v243[1] = v246;
        *(int64x2_t *)&v324[8] = v257;
        v258 = v243[2];
        v243[2] = v253;
        *(_QWORD *)v325 = v258;
        *(_QWORD *)v324 = v257.i64[0];
        std::__split_buffer<CRNormalizedQuad * {__strong}>::~__split_buffer((uint64_t)v324);
      }
      else
      {
        *v245 = *(id *)v305;
        v246 = (char *)(v245 + 1);
      }
      v243[1] = v246;
      if (v240 >= 0x11)
      {
        if (v238 <= 2)
          v259 = 2;
        else
          v259 = v238;
        for (j = 1; j != v259; ++j)
        {
          v261 = *(id *)&v305[8 * j];
          *(_QWORD *)v324 = v261;
          v262 = *(char **)a4;
          v263 = *(char **)(a4 + 8);
          while (v262 != v263)
          {
            v264 = *(id *)v262;
            v265 = objc_msgSend(v261, "overlapsNormalizedQuad:", v264);

            if ((v265 & 1) != 0)
              goto LABEL_261;
            v262 += 8;
          }
          std::vector<CRNormalizedQuad * {__strong}>::emplace_back<CRNormalizedQuad * {__strong}&>((char **)a4, (id *)v324);
LABEL_261:

        }
      }
    }
  }
  if (v231)
    operator delete(v231);
  CROSLogForCategory(5);
  v266 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v266, OS_LOG_TYPE_DEBUG))
  {
    v267 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3;
    *(_DWORD *)v324 = 134218240;
    *(_QWORD *)&v324[4] = (v306 - v305) >> 3;
    *(_WORD *)&v324[12] = 2048;
    *(_QWORD *)&v324[14] = v267;
    _os_log_impl(&dword_1D4FB8000, v266, OS_LOG_TYPE_DEBUG, "Table NMS: %lu -> %lu", v324, 0x16u);
  }

  *(_QWORD *)v324 = v288;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
  if (__p)
  {
    v294 = __p;
    operator delete(__p);
  }
  if (v296)
  {
    v297 = (float *)v296;
    operator delete(v296);
  }
  if (v299)
  {
    v300 = (float *)v299;
    operator delete(v299);
  }
  *(_QWORD *)v324 = v302;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
  *(_QWORD *)v324 = &__B;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
  if (v281)
    operator delete(v281);
  *(_QWORD *)v324 = &v305;
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
  *(_QWORD *)v324 = &v315;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  if (v311)
  {
    v312 = v311;
    operator delete(v311);
  }
  if (v309)
  {
    v310 = v309;
    operator delete(v309);
  }
  v268 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v268)
    MEMORY[0x1D826E270](v268, 0x1000C8000313F17);
  *(_QWORD *)buf = v319;
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_283:

}

void sub_1D50F13E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  void *v59;
  void *v60;
  void *v61;
  void *v63;

  v63 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x258] = (unint64_t)&a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x258]);
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  a47 = &a50;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a50 = (uint64_t)&a53;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (v60)
    operator delete(v60);
  a53 = (uint64_t)&a56;
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&a59);
  a59 = (uint64_t)&STACK[0x228];
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);

  _Unwind_Resume(a1);
}

uint64_t std::vector<CRNormalizedQuad * {__strong}>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<CRNormalizedQuad * {__strong}>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

float getWeightedMedianAngle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float *v24;
  float v25;
  float *v27;
  float *v28;
  float *v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v4 = a1[1] - *a1;
  if (v4)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v27 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v4 >> 2);
    v28 = v27;
    v29 = &v27[2 * v5];
  }
  v6 = *a1;
  if (a1[1] == *a1)
  {
    v20 = 0.0;
    v10 = v28;
  }
  else
  {
    v7 = 0;
    v8 = *a2;
    v9 = 0.0;
    v10 = v28;
    do
    {
      if (v10 >= v29)
      {
        v11 = ((char *)v10 - (char *)v27) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v29 - v27;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)((char *)v29 - (char *)v27) >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v13);
        v16 = &v14[8 * v11];
        *(_DWORD *)v16 = *(_DWORD *)(v6 + 4 * v7);
        *((_DWORD *)v16 + 1) = *(_DWORD *)(v8 + 4 * v7);
        v17 = v28;
        v18 = (float *)v16;
        if (v28 != v27)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 2;
            *((_QWORD *)v18 - 1) = v19;
            v18 -= 2;
          }
          while (v17 != v27);
          v17 = v27;
        }
        v10 = (float *)(v16 + 8);
        v27 = v18;
        v29 = (float *)&v14[8 * v15];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v10 = *(float *)(v6 + 4 * v7);
        v10[1] = *(float *)(v8 + 4 * v7);
        v10 += 2;
      }
      v28 = v10;
      v8 = *a2;
      v9 = v9 + *(float *)(*a2 + 4 * v7++);
      v6 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 2);
    v20 = v9 * 0.5;
  }
  v21 = 126 - 2 * __clz(((char *)v10 - (char *)v27) >> 3);
  if (v10 == v27)
    v22 = 0;
  else
    v22 = v21;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *,false>(v27, v10, v22, 1);
  if (v27 == v28)
  {
LABEL_29:
    v25 = 0.0;
    if (!v27)
      return v25;
LABEL_30:
    operator delete(v27);
    return v25;
  }
  v23 = 0.0;
  v24 = v27;
  while (1)
  {
    v23 = v23 + v24[1];
    if (v23 >= v20)
      break;
    v24 += 2;
    if (v24 == v28)
      goto LABEL_29;
  }
  v25 = *v24;
  if (v27)
    goto LABEL_30;
  return v25;
}

void sub_1D50F1984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id std::vector<CRNormalizedQuad * {__strong}>::emplace_back<CRNormalizedQuad * {__strong}&>(char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)std::__split_buffer<CRNormalizedQuad * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void CRDetectorPostProcessV3::saveConnectedComponentsMap(CRDetectorPostProcessV3 *this, const CRDetectorUtils::CRTextDetectorConnectedComponentResult *a2, void *a3, void *a4, NSString *a5)
{
  vImage_Buffer *v8;
  char *v9;
  NSString *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[4];

  v8 = a4;
  v9 = (char *)malloc_type_calloc((_QWORD)a3 * (_QWORD)a2, 4uLL, 0x100004052888210uLL);
  v30[0] = v9;
  v30[1] = a3;
  v30[2] = a2;
  v30[3] = (void *)(4 * (_QWORD)a2);
  v11 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (v11)
  {
    v12 = 0;
    v13 = v11 >> 3;
    v14 = *((_QWORD *)this + 4);
    v15 = *((int *)this + 30);
    if (v13 <= 1)
      v13 = 1;
    v16 = 19;
    do
    {
      v17 = v14 + 32 * v12;
      v10 = *(NSString **)v17;
      v18 = *(_QWORD *)(v17 + 8);
      if ((int)*(_QWORD *)v17 < (int)v18)
      {
        v21 = v17 + 16;
        v19 = *(_QWORD *)(v17 + 16);
        v20 = *(_QWORD *)(v21 + 8);
        v22 = *((_QWORD *)this + 13);
        v10 = (NSString *)(int)v10;
        v23 = (float *)&v9[4 * (_QWORD)a2 * (int)v10 + 4 * (int)v19];
        v24 = (uint64_t *)(*(_QWORD *)this + 8 * (v22 * (int)v10 + (int)v19));
        v25 = 8 * v22;
        do
        {
          v26 = v24;
          v27 = v23;
          v28 = (int)v20 - (uint64_t)(int)v19;
          if ((int)v19 < (int)v20)
          {
            do
            {
              v29 = *v26++;
              if (v29 == v12 + v15)
                *v27 = (float)v16 / 255.0;
              ++v27;
              --v28;
            }
            while (v28);
          }
          v10 = (NSString *)((char *)v10 + 1);
          v23 += (uint64_t)a2;
          v24 = (uint64_t *)((char *)v24 + v25);
        }
        while (v10 != (NSString *)(int)v18);
      }
      v16 = (v16 + 19) % 255;
      ++v12;
    }
    while (v12 != v13);
  }
  CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)v30, v8, v10);
  free(v30[0]);

}

void sub_1D50F1C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CRDetectorPostProcessV3::extractMaxValueInComponents(uint64_t a1, uint64_t *a2, char **a3)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *i;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v6 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v7 = v6 >> 3;
  v8 = *a3;
  v9 = a3[1];
  v10 = v9 - *a3;
  v11 = v10 >> 2;
  if (v6 >> 3 <= (unint64_t)(v10 >> 2))
  {
    if (v7 >= v11)
      goto LABEL_18;
    v23 = &v8[4 * v7];
    goto LABEL_15;
  }
  v12 = a3[2];
  if (v7 - v11 <= (v12 - v9) >> 2)
  {
    bzero(a3[1], (((v6 >> 1) - v10 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    v23 = &v9[4 * (v7 - v11)];
LABEL_15:
    a3[1] = v23;
    goto LABEL_18;
  }
  if (v6 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v13 = v12 - v8;
  v14 = v13 >> 1;
  if (v13 >> 1 <= v7)
    v14 = v6 >> 3;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v15 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v15 = v14;
  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v15);
  v18 = v17;
  v19 = &v16[4 * v11];
  bzero(v19, ((((unint64_t)v6 >> 1) - v10 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  v20 = *a3;
  for (i = a3[1]; i != v20; i -= 4)
  {
    v22 = *((_DWORD *)i - 1);
    *((_DWORD *)v19 - 1) = v22;
    v19 -= 4;
  }
  *a3 = v19;
  a3[1] = &v16[4 * v7];
  a3[2] = &v16[4 * v18];
  if (v20)
    operator delete(v20);
LABEL_18:
  v24 = *(_QWORD *)(a1 + 112);
  if (v24)
  {
    v25 = 0;
    v26 = 0;
    v27 = *a2;
    v28 = *(_QWORD *)(a1 + 104);
    v29 = *(unint64_t **)a1;
    v30 = *(int *)(a1 + 120);
    do
    {
      if (v28)
      {
        v31 = *a3;
        v32 = (_DWORD *)(v27 + 4 * v26);
        v26 += v28;
        v33 = v29;
        v34 = v28;
        do
        {
          v35 = *v33++;
          v36 = v35 - v30;
          if (v35 >= v30 && *(float *)&v31[4 * v36] < *(float *)v32)
            *(_DWORD *)&v31[4 * v36] = *v32;
          ++v32;
          --v34;
        }
        while (v34);
      }
      ++v25;
      v29 += v28;
    }
    while (v25 != v24);
  }
}

void CRDetectorPostProcessV3::getSplitComponents(void *a1, void *a2, const CRImageBuffer *a3, void *a4)
{
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  CRTextFeature *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  CRTextFeature *v19;
  CRDetectorUtils::CRTextDetectorConnectedComponentResult *v20;
  _BYTE *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t k;
  double *v25;
  CRTextFeature *v26;
  CRTextFeature *v27;
  float64x2_t *v28;
  id v29;
  id v30;
  float64x2_t v31;
  float64x2_t v32;
  id v33;
  void *__p[3];
  char v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void **v42[11];
  void *v43;
  void *v44;
  uint64_t v45;
  float64x2_t *v46;
  void *v47;
  _BYTE *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53[5];
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;
  float64x2x2_t v66;
  float64x2x2_t v67;

  v65 = *MEMORY[0x1E0C80C00];
  v29 = a1;
  v30 = a2;
  v33 = a4;
  v8 = *((_QWORD *)a3 + 1);
  v7 = *((_QWORD *)a3 + 2);
  if (v8 * v7)
  {
    v9 = malloc_type_calloc(v8 * v7, 4uLL, 0xF2EF0BD8uLL);
    bzero(v9, 4 * v8 * v7);
  }
  else
  {
    v9 = 0;
  }
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v10 = v30;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v59, v64, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v60;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v60 != v12)
          objc_enumerationMutation(v10);
        v14 = (CRTextFeature *)*(id *)(*((_QWORD *)&v59 + 1) + 8 * i);
        drawRect(v14, a3, (float *)v9, 1.0);

      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v59, v64, 16, v29);
    }
    while (v11);
  }

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v15 = v29;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v56;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v56 != v17)
          objc_enumerationMutation(v15);
        v19 = (CRTextFeature *)*(id *)(*((_QWORD *)&v55 + 1) + 8 * j);
        drawRect(v19, a3, (float *)v9, 0.0);

      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
    }
    while (v16);
  }

  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v46, v7, v8, 1, 1, 1);
  CRDetectorUtils::connectComponentLabel((CRDetectorUtils *)v9, (float *)v7, v8, &v46, v20);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  CRDetectorPostProcessV3::extractMaxValueInComponents((uint64_t)&v46, (uint64_t *)a3, (char **)&v43);
  v22 = v47;
  v21 = v48;
  if (v48 != v47)
  {
    v23 = 0;
    v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v8), 0);
    v32 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)v7), 0);
    do
    {
      if (v22[v23] >= 0xAuLL && *((float *)v43 + v23) >= 0.35)
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        extractContourFromLabelMap((uint64_t *)&v46, v54 + v23, (uint64_t)v46, v53[3], 1, &v39, &v36);
        CRDetectorUtils::generateConvexHull((uint64_t)&v36, (char *)__p);
        CRMinAreaRect::findMinAreaRect(0.0, (uint64_t)&v35, (uint64_t)__p, (double *)v42);
        CRMinAreaRect::sortMinAreaRectCorners((int)&v35, (CRDetectorUtils *)v42);
        for (k = 0; k != 8; k += 4)
        {
          v25 = (double *)&v42[k];
          v66 = vld2q_f64(v25);
          v67.val[0] = vdivq_f64(v66.val[0], v32);
          v67.val[1] = vdivq_f64(v66.val[1], v31);
          vst2q_f64(v25, v67);
        }
        v26 = [CRTextFeature alloc];
        v27 = -[CRTextFeature initWithTopLeft:topRight:bottomLeft:bottomRight:](v26, "initWithTopLeft:topRight:bottomLeft:bottomRight:", *(double *)v42, *(double *)&v42[1], *(double *)&v42[2], *(double *)&v42[3], *(double *)&v42[6], *(double *)&v42[7], *(double *)&v42[4], *(double *)&v42[5]);
        objc_msgSend(v33, "addObject:", v27);

        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        if (v39)
        {
          v40 = v39;
          operator delete(v39);
        }
        v22 = v47;
        v21 = v48;
      }
      ++v23;
    }
    while (v23 < (v21 - (_BYTE *)v22) >> 3);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v42[0] = (void **)v53;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v42);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  v28 = v46;
  v46 = 0;
  if (v28)
    MEMORY[0x1D826E270](v28, 0x1000C8000313F17);
  if (v9)
    free(v9);

}

void sub_1D50F224C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41)
{

  _Unwind_Resume(a1);
}

void drawRect(CRTextFeature *a1, const CRImageBuffer *a2, float *a3, float a4)
{
  CRTextFeature *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  int v36;
  float v37;
  unint64_t v38;
  CRTextFeature *v39;

  v7 = a1;
  v9 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  v10 = *(_QWORD *)a2;
  v39 = v7;
  -[CRTextFeature bounds](v7, "bounds");
  v12 = v11;
  -[CRTextFeature bounds](v39, "bounds");
  v14 = v13;
  -[CRTextFeature bounds](v39, "bounds");
  v16 = v15;
  -[CRTextFeature bounds](v39, "bounds");
  v18 = v17;
  -[CRTextFeature bounds](v39, "bounds");
  v20 = v19;
  -[CRTextFeature bounds](v39, "bounds");
  v22 = (int)fmax(v12 * (double)v9, 0.0);
  v23 = (int)fmin((double)v9, (v14 + v16) * (double)v9);
  if (v22 < v23)
  {
    v24 = (int)fmax(v18 * (double)v8, 0.0);
    v25 = v23;
    v26 = v22;
    v38 = v24;
    v27 = (int)fmin((double)v8, (v20 + v21) * (double)v8);
    v28 = (float)v9;
    v29 = (float)v8;
    v30 = v8 * v22;
    v31 = &a3[v30];
    v32 = 4 * v8;
    v33 = v10 + 4 * v30;
    do
    {
      if (v24 < v27)
      {
        v34 = v38;
        do
        {
          -[CRTextFeature boundingQuad](v39, "boundingQuad", v38);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = objc_msgSend(v35, "containsNormalizedPoint:", (float)((float)v34 / v29), (float)((float)v26 / v28));

          if (v36)
          {
            if (*(float *)(v33 + 4 * v34) <= 0.06)
              v37 = 0.0;
            else
              v37 = 1.0;
            v31[v34] = v37 * a4;
          }
          ++v34;
        }
        while (v34 < v27);
      }
      ++v26;
      v31 = (float *)((char *)v31 + v32);
      v33 += v32;
    }
    while (v26 < v25);
  }

}

void sub_1D50F250C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void extractContourFromLabelMap(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, void **a6, void **a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  double v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  BOOL v48;
  char v49;
  int v50;
  int v51;
  int v52;
  int v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  char v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  char v106;
  int v107;

  v10 = a1[13];
  v9 = a1[14];
  v11 = (uint64_t *)(a1[4] + 32 * (a2 - (uint64_t)*((int *)a1 + 30)));
  v12 = v11[2];
  v13 = v11[3];
  v15 = *v11;
  v14 = v11[1];
  v16 = 2 * a5;
  if ((int)v15 <= (int)v14)
  {
    v18 = (int)v15;
    v19 = a3 + 8 * a4 * (int)v15;
    v20 = *a1 + 8 * v10 * (int)v15;
    do
    {
      v21 = (int)v12;
      if ((int)v12 <= (int)v13)
      {
        do
        {
          if (*(_QWORD *)(v20 + 8 * v21) == a2)
            v17 = *(_QWORD *)(v19 + 8 * v21);
          else
            v17 = 0;
          if (v21 >= (int)v13)
            break;
          ++v21;
        }
        while (!v17);
      }
      else
      {
        v17 = 0;
      }
      if (v18 >= (int)v14)
        break;
      ++v18;
      v19 += 8 * a4;
      v20 += 8 * v10;
    }
    while (!v17);
  }
  else
  {
    v17 = 0;
  }
  LODWORD(v22) = (int)fmax((double)((int)v15 - v16), 0.0);
  v23 = (int)fmin((double)(v16 + 2 + (int)v14), (double)(int)v9);
  v24 = (double)(int)v10;
  if ((int)v22 >= v23)
  {
    v27 = 0;
    v26 = 0;
    v25 = 0;
    v33 = v10;
    v32 = v9;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = (int)fmin((double)(v16 + 2 + (int)v13), v24);
    v29 = (int)fmax((double)((int)v12 - v16), 0.0);
    v22 = (int)v22;
    v30 = (uint64_t *)(a3 + 8 * (a4 * (int)v22 + v29));
    v31 = 8 * a4;
    v32 = v9;
    v33 = v10;
    do
    {
      if (v29 < v28)
      {
        v34 = (double)(int)v22;
        v35 = v30;
        v36 = v29;
        v37 = v28 - (uint64_t)v29;
        do
        {
          v38 = *v35++;
          if (v38 == v17)
          {
            v33 = (int)fmin((double)v36, (double)v33);
            v27 = (int)fmax((double)v36, (double)v27);
            v32 = (int)fmin(v34, (double)v32);
            v26 = (int)fmax(v34, (double)v26);
            ++v25;
          }
          ++v36;
          --v37;
        }
        while (v37);
      }
      ++v22;
      v30 = (uint64_t *)((char *)v30 + v31);
    }
    while (v22 != v23);
  }
  v39 = sqrt(fmin((double)(v27 - v33 + 1), (double)(v26 - v32 + 1))* (double)v25/ (float)((v26 - v32 + 1) * (v27 - v33 + 1)));
  v40 = (int)fmax((double)v16, (double)(int)(v39 + v39));
  v41 = (int)fmax((double)(v32 - v40), 0.0);
  v42 = v40 + 2;
  v43 = (int)fmin((double)(v40 + 2 + v26), (double)(int)v9);
  v44 = (int)fmax((double)(v33 - v40), 0.0);
  v45 = (int)fmin((double)(v40 + 2 + v27), v24);
  v102 = v9;
  v104 = v44;
  v48 = v43 == (_DWORD)v9 || v44 == 0 || v45 == (_DWORD)v10;
  if (v41)
    v49 = v48;
  else
    v49 = 1;
  if (v41 < v43)
  {
    v50 = v40 + 1;
    v51 = (int)((double)(v40 + 1) * 0.6);
    if (v40 >= -1)
      v52 = v40 + 1;
    else
      v52 = v40 + 2;
    v53 = v50 - (v52 >> 1);
    if (v42 < 3)
      v49 = 1;
    v54 = (double)-v51;
    v55 = (double)(v52 >> 1);
    v56 = (double)-(v52 >> 1);
    v57 = a2;
    if (v51)
      v58 = v49;
    else
      v58 = 1;
    v106 = v58;
    v59 = (double)v53;
    v60 = v41;
    v107 = v10;
    v103 = v43;
    while (v104 >= v45)
    {
LABEL_89:
      if ((_DWORD)++v60 == v103)
        return;
    }
    v61 = v104;
    v62 = (int)fmax((double)-(int)v60, v54);
    v63 = (int)fmin((double)(v102 - (int)v60), v55);
    while (1)
    {
      v64 = *a1;
      v65 = a1[13];
      if ((int)v62 < (int)v63)
        break;
LABEL_53:
      if (*(_QWORD *)(v64 + 8 * (v61 + v65 * v60)) == v57)
      {
        v73 = 0;
LABEL_56:
        v75 = a6[1];
        v74 = (unint64_t)a6[2];
        if ((unint64_t)v75 >= v74)
        {
          v77 = ((char *)v75 - (_BYTE *)*a6) >> 3;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v79 = v74 - (_QWORD)*a6;
          if (v79 >> 2 > v78)
            v78 = v79 >> 2;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a6 + 2), v80);
          v83 = &v82[8 * v77];
          *(_DWORD *)v83 = v61;
          *((_DWORD *)v83 + 1) = v60;
          v85 = (char *)*a6;
          v84 = (char *)a6[1];
          v86 = v83;
          if (v84 != *a6)
          {
            do
            {
              v87 = *((_QWORD *)v84 - 1);
              v84 -= 8;
              *((_QWORD *)v86 - 1) = v87;
              v86 -= 8;
            }
            while (v84 != v85);
            v84 = (char *)*a6;
          }
          v76 = v83 + 8;
          *a6 = v86;
          a6[1] = v83 + 8;
          a6[2] = &v82[8 * v81];
          if (v84)
            operator delete(v84);
          LODWORD(v10) = v107;
        }
        else
        {
          *v75 = v61;
          v75[1] = v60;
          v76 = v75 + 2;
        }
        a6[1] = v76;
        if (v73 && ((v106 & 1) != 0 || *(_QWORD *)(*a1 + 8 * (v61 + a1[13] * v60)) != v57))
        {
          v89 = a7[1];
          v88 = (unint64_t)a7[2];
          if ((unint64_t)v89 >= v88)
          {
            v91 = ((char *)v89 - (_BYTE *)*a7) >> 3;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 61)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v93 = v88 - (_QWORD)*a7;
            if (v93 >> 2 > v92)
              v92 = v93 >> 2;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
              v94 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a7 + 2), v94);
            v97 = &v96[8 * v91];
            *(_DWORD *)v97 = v61;
            *((_DWORD *)v97 + 1) = v60;
            v99 = (char *)*a7;
            v98 = (char *)a7[1];
            v100 = v97;
            if (v98 != *a7)
            {
              do
              {
                v101 = *((_QWORD *)v98 - 1);
                v98 -= 8;
                *((_QWORD *)v100 - 1) = v101;
                v100 -= 8;
              }
              while (v98 != v99);
              v98 = (char *)*a7;
            }
            v90 = v97 + 8;
            *a7 = v100;
            a7[1] = v97 + 8;
            a7[2] = &v96[8 * v95];
            if (v98)
              operator delete(v98);
            LODWORD(v10) = v107;
          }
          else
          {
            *v89 = v61;
            v89[1] = v60;
            v90 = v89 + 2;
          }
          a7[1] = v90;
        }
      }
      if ((_DWORD)++v61 == v45)
        goto LABEL_89;
    }
    v66 = (int)fmin((double)((int)v10 - (int)v61), v59);
    v67 = (int)fmax((double)-(int)v61, v56);
    v68 = (uint64_t *)(v64 + 8 * (v61 + (v60 + v62) * v65 + v67));
    v69 = v62;
    while (1)
    {
      v70 = v66 - (uint64_t)v67;
      v71 = v68;
      if (v67 < v66)
        break;
LABEL_52:
      ++v69;
      v68 += v65;
      if (v69 == v63)
        goto LABEL_53;
    }
    while (1)
    {
      v72 = *v71++;
      if (v72 == v57)
        break;
      if (!--v70)
        goto LABEL_52;
    }
    v73 = 1;
    goto LABEL_56;
  }
}

void CRDetectorPostProcessV3::extractTextBoxes(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, CRDetectorUtils **a5, int a6, int a7, void *a8, char a9)
{
  uint64_t v13;
  float *v14;
  float *v15;
  CRDetectorUtils *v16;
  CRDetectorUtils *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  CRDetectorUtils::CRTextDetectorConnectedComponentResult *v20;
  CRDetectorUtils::CRTextDetectorConnectedComponentResult *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float64_t v29;
  unint64_t v30;
  float64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int v38;
  double *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  void *v68;
  double *v69;
  float64x2_t *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  unint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  __int128 v80;
  char **v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  const void **v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  float *v122;
  float *v123;
  float *v124;
  char *v125;
  uint64_t v126;
  float v127;
  BOOL v128;
  NSObject *v129;
  os_signpost_id_t v130;
  NSObject *v131;
  NSObject *v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  unint64_t v150;
  double v151;
  double v152;
  _QWORD *v153;
  uint64_t v154;
  int v155;
  int v156;
  int *v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned __int8 v163;
  int v164;
  int v165;
  double v166;
  int v167;
  CRDetectorUtils::CRTextDetectorConnectedComponentResult *v168;
  uint64_t v169;
  double v170;
  CRDetectorUtils *v171;
  int v172;
  int v173;
  unint64_t v174;
  double v175;
  double v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  float *v183;
  int v184;
  int v185;
  _BOOL4 v186;
  double v187;
  int v188;
  float64_t v189;
  CGFloat y;
  double v191;
  unint64_t *v192;
  unint64_t v193;
  double v194;
  unint64_t v195;
  double v196;
  double v197;
  double v198;
  double v199;
  unsigned __int8 v200;
  __objc2_class *v201;
  double *v202;
  uint64_t *v203;
  _BYTE *v204;
  CGFloat v205;
  double *v206;
  unint64_t v207;
  double v208;
  double *v209;
  double *v210;
  int64_t v211;
  unint64_t v212;
  CGFloat x;
  double v214;
  double v215;
  double v216;
  double *v217;
  double v218;
  double v219;
  unint64_t v220;
  double v221;
  double *v222;
  double v223;
  double v224;
  CGFloat v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  double *v231;
  CGFloat v232;
  uint64_t v233;
  CGFloat v234;
  double v235;
  unint64_t v236;
  double v237;
  double v238;
  double *v239;
  double v240;
  double v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  double v245;
  double v246;
  double v247;
  uint64_t *v249;
  char *v250;
  char *v251;
  unint64_t v252;
  BOOL v253;
  double *v254;
  double v255;
  double v256;
  CGFloat v257;
  int v258;
  NSObject *v259;
  NSObject *v260;
  CRLogger *v261;
  _BYTE *CRLogger;
  __CFString *v263;
  __CFString *v264;
  vImage_Buffer *v265;
  NSString *v266;
  vImage_Buffer *v267;
  NSString *v268;
  vImage_Buffer *v269;
  NSString *v270;
  void *v271;
  NSString *v272;
  void *v273;
  NSString *v274;
  NSObject *v275;
  os_signpost_id_t v276;
  NSObject *v277;
  NSObject *v278;
  uint64_t v279;
  uint64_t i;
  uint64_t j;
  char v282;
  float v283;
  _BOOL4 v284;
  char *v285;
  _BYTE *v286;
  unint64_t v287;
  int v288;
  double v289;
  uint64_t v290;
  int v291;
  double v292;
  unint64_t v294;
  double v295;
  double v296;
  double v297;
  uint64_t v298;
  uint64_t k;
  float v300;
  __float2 v301;
  double v302;
  double v303;
  double v304;
  double *v305;
  CGPoint *v306;
  CGFloat v307;
  int v308;
  CGPoint *v309;
  CGFloat v310;
  char *v311;
  unint64_t v312;
  float64x2_t *v313;
  uint64_t v314;
  int64x2_t v315;
  int8x16_t v316;
  float64x2_t v317;
  float64x2_t *v318;
  float64x2_t *v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  float64x2_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t *v329;
  CGPoint *v330;
  CGPoint *v331;
  _QWORD *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  CGPoint v343;
  float64x2_t v344;
  __int128 v345;
  CGPoint v346;
  float64x2_t v347;
  float64x2_t v348;
  CGPoint *v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float32x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float32x2_t v359;
  int v360;
  int32x2_t v361;
  _BOOL4 v362;
  float v363;
  float v364;
  float v365;
  _BOOL4 v366;
  int v367;
  float v368;
  float v369;
  BOOL v370;
  const double *v371;
  float *v372;
  const double *v373;
  CGFloat *v374;
  _BOOL4 isContourInQuad;
  int v376;
  uint64_t Root;
  uint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  uint64_t v386;
  int64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  int64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  double *v397;
  uint64_t v398;
  __int128 *v399;
  unint64_t v400;
  unint64_t v401;
  double *v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t *v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  uint64_t v412;
  double *v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  CGFloat v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  char *v424;
  __int128 v425;
  uint64_t v426;
  __int128 v427;
  CGFloat v428;
  float64_t v429;
  double v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  CGFloat v437;
  float64_t v438;
  NSObject *v439;
  NSObject *v440;
  void *v441;
  float64x2_t *v442;
  float64x2_t *v443;
  CRDetectorUtils *v444;
  double v446;
  unint64_t v447;
  os_signpost_id_t v448;
  os_signpost_id_t v449;
  uint64_t *v450;
  unint64_t v451;
  id v452;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  _BOOL4 v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  _BYTE *v463;
  unint64_t v464;
  uint64_t *v465;
  _BYTE *v466;
  float32x2_t v467;
  double *v468;
  float64x2_t v469;
  float32x2_t v470;
  void *v471;
  void *v472;
  uint64_t v473;
  char *v474;
  char *v475;
  CRDetectorUtils *v476[2];
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  __int128 v480;
  double v481;
  void *v482;
  void *v483;
  uint64_t v484;
  void *v485;
  _BYTE *v486;
  uint64_t v487;
  char v488;
  void *v489;
  void *v490;
  void *v491;
  void *v492;
  void *v493;
  void *v494;
  void *v495;
  uint64_t v496[8];
  void *v497;
  void *v498;
  uint64_t v499;
  void *v500;
  void *v501;
  char *v502;
  std::vector<int> v503;
  void *v504[3];
  void *v505[3];
  void *v506[3];
  void *v507[3];
  float64x2_t *v508;
  void *v509;
  _BYTE *v510;
  void *v511;
  void *v512;
  void *v513;
  void *v514;
  uint64_t v515;
  float64x2_t *v516;
  void *v517;
  char *v518;
  char *v519;
  void *v520;
  void *__p;
  unint64_t v522;
  void *v523;
  void *v524;
  uint64_t v525;
  _QWORD *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  CRDetectorUtils *v532;
  CRDetectorUtils *v533;
  void *v534[3];
  void *v535;
  _BYTE *v536;
  void *v537;
  _BYTE *v538;
  CGPoint v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  __int128 __src;
  _QWORD v544[5];
  __int128 v545;
  uint64_t v546;
  CGPoint buf;
  float64x2_t v548;
  float64x2_t v549;
  _BYTE v550[72];
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  void (**v556)(cv::SmartPtr *__hidden);
  int v557;
  int v558;
  int v559;
  uint64_t v560;
  float64x2x2_t v561;
  float64x2x2_t v562;
  float64x2x2_t v563;
  float32x4x2_t v564;
  float64x2x2_t v565;

  v560 = *MEMORY[0x1E0C80C00];
  v452 = a8;
  memset(v534, 0, sizeof(v534));
  v455 = *(_QWORD *)(a1 + 8);
  v456 = *(_QWORD *)(a1 + 16);
  std::vector<float>::vector(&v532, v456 * v455);
  v13 = *(_QWORD *)(a1 + 16) * *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = *(float **)a1;
    v15 = (float *)*a2;
    v16 = *a5;
    v17 = v532;
    do
    {
      v18 = *v14 > 0.15 || *v15 > 0.3;
      *(float *)v16 = (float)v18;
      v19 = *v14 > 0.45 || *v15 > 0.3;
      *(float *)v17 = (float)v19;
      v17 = (CRDetectorUtils *)((char *)v17 + 4);
      ++v15;
      v16 = (CRDetectorUtils *)((char *)v16 + 4);
      ++v14;
      --v13;
    }
    while (v13);
  }
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v516, v456, v455, 1, 1, 1);
  CRDetectorUtils::connectComponentLabel(*a5, (float *)v456, v455, &v516, v20);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v508, v456, v455, 1, 1, 1);
  v450 = a3;
  v444 = (CRDetectorUtils *)a5;
  v460 = a1;
  v465 = a4;
  CRDetectorUtils::connectComponentLabel(v532, (float *)v456, v455, &v508, v21);
  v533 = v532;
  std::vector<float>::shrink_to_fit((char **)&v532);
  v22 = v518;
  v23 = (char *)v517;
  v24 = (v518 - (_BYTE *)v517) >> 3;
  v466 = v510;
  v463 = v509;
  std::vector<std::vector<unsigned long>>::vector(&v489, v24);
  if (v22 != v23)
  {
    v25 = 0;
    if ((unint64_t)((v466 - v463) >> 3) <= 1)
      v26 = 1;
    else
      v26 = (v466 - v463) >> 3;
    v461 = v24;
    if (v24 <= 1)
      v27 = 1;
    else
      v27 = v24;
    v457 = v27;
    while (v466 == v463)
    {
LABEL_60:
      if (++v25 == v457)
      {
        v54 = 0;
        v55 = v461 + v530;
        do
        {
          v56 = (uint64_t *)((char *)v489 + 24 * v54);
          v57 = v56[1];
          v58 = *v56;
          v59 = v57 - *v56;
          if (v57 != *v56 && v59 >= 9)
          {
            v61 = 0;
            do
            {
              v62 = *(_QWORD *)(v58 + 8 * v61);
              if (v61)
              {
                if (*((_QWORD *)v509 + v62))
                {
                  v63 = 0;
                  v64 = 0;
                  do
                  {
                    CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v516, (unint64_t)*(double *)(*(_QWORD *)(v515 + 24 * v62) + v63 + 8), (unint64_t)*(double *)(*(_QWORD *)(v515 + 24 * v62) + v63), v55);
                    ++v64;
                    v63 += 16;
                  }
                  while (v64 < *((_QWORD *)v509 + v62));
                }
                v65 = (char *)v511 + 32 * v62;
                v66 = __p;
                if ((unint64_t)__p >= v522)
                {
                  v85 = ((_BYTE *)__p - (_BYTE *)v520) >> 5;
                  v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 59)
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  v87 = v522 - (_QWORD)v520;
                  if ((uint64_t)(v522 - (_QWORD)v520) >> 4 > v86)
                    v86 = v87 >> 4;
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0)
                    v88 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v88 = v86;
                  if (v88)
                    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)&v522, v88);
                  else
                    v89 = 0;
                  v90 = &v89[32 * v85];
                  v91 = v65[1];
                  *(_OWORD *)v90 = *v65;
                  *((_OWORD *)v90 + 1) = v91;
                  v92 = (char *)__p;
                  v93 = (char *)v520;
                  v94 = v90;
                  if (__p != v520)
                  {
                    do
                    {
                      v95 = *((_OWORD *)v92 - 1);
                      *((_OWORD *)v94 - 2) = *((_OWORD *)v92 - 2);
                      *((_OWORD *)v94 - 1) = v95;
                      v94 -= 32;
                      v92 -= 32;
                    }
                    while (v92 != v93);
                    v92 = (char *)v520;
                  }
                  v68 = v90 + 32;
                  v520 = v94;
                  __p = v90 + 32;
                  v522 = (unint64_t)&v89[32 * v88];
                  if (v92)
                    operator delete(v92);
                }
                else
                {
                  v67 = v65[1];
                  *(_OWORD *)__p = *v65;
                  v66[1] = v67;
                  v68 = v66 + 2;
                }
                __p = v68;
                v96 = v515;
                v97 = (const void **)(v515 + 24 * v62);
                v98 = v526;
                if ((unint64_t)v526 >= v527)
                {
                  v100 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v526 - v525) >> 3);
                  v101 = v100 + 1;
                  if (v100 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v527 - v525) >> 3) > v101)
                    v101 = 0x5555555555555556 * ((uint64_t)(v527 - v525) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v527 - v525) >> 3) >= 0x555555555555555)
                    v102 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v102 = v101;
                  *(_QWORD *)&v549.f64[0] = &v527;
                  if (v102)
                    v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v527, v102);
                  else
                    v103 = 0;
                  v104 = &v103[24 * v100];
                  *(_QWORD *)&buf.x = v103;
                  *(_QWORD *)&buf.y = v104;
                  *(_QWORD *)&v548.f64[0] = v104;
                  *(_QWORD *)&v548.f64[1] = &v103[24 * v102];
                  *(_QWORD *)v104 = 0;
                  *((_QWORD *)v104 + 1) = 0;
                  *((_QWORD *)v104 + 2) = 0;
                  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(v104, *v97, *(_QWORD *)(v96 + 24 * v62 + 8), (uint64_t)(*(_QWORD *)(v96 + 24 * v62 + 8) - (_QWORD)*v97) >> 4);
                  *(_QWORD *)&v548.f64[0] += 24;
                  std::vector<std::vector<CGPoint>>::__swap_out_circular_buffer(&v525, &buf);
                  v99 = v526;
                  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&buf);
                }
                else
                {
                  *v526 = 0;
                  v98[1] = 0;
                  v98[2] = 0;
                  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(v98, *v97, *(_QWORD *)(v96 + 24 * v62 + 8), (uint64_t)(*(_QWORD *)(v96 + 24 * v62 + 8) - (_QWORD)*v97) >> 4);
                  v99 = v98 + 3;
                }
                v526 = v99;
                v105 = v509;
                v106 = v518;
                if (v518 >= v519)
                {
                  v108 = (char *)v517;
                  v109 = (v518 - (_BYTE *)v517) >> 3;
                  v110 = v109 + 1;
                  if ((unint64_t)(v109 + 1) >> 61)
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  v111 = v519 - (_BYTE *)v517;
                  if ((v519 - (_BYTE *)v517) >> 2 > v110)
                    v110 = v111 >> 2;
                  if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
                    v112 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v112 = v110;
                  if (v112)
                  {
                    v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v519, v112);
                    v106 = v518;
                    v108 = (char *)v517;
                  }
                  else
                  {
                    v113 = 0;
                  }
                  v114 = &v113[8 * v109];
                  *(_QWORD *)v114 = v105[v62];
                  v107 = v114 + 8;
                  while (v106 != v108)
                  {
                    v115 = *((_QWORD *)v106 - 1);
                    v106 -= 8;
                    *((_QWORD *)v114 - 1) = v115;
                    v114 -= 8;
                  }
                  v517 = v114;
                  v518 = v107;
                  v519 = &v113[8 * v112];
                  if (v108)
                    operator delete(v108);
                }
                else
                {
                  *(_QWORD *)v518 = *((_QWORD *)v509 + v62);
                  v107 = v106 + 8;
                }
                v518 = v107;
                v531 += *((_QWORD *)v509 + v62);
                ++v55;
              }
              else
              {
                v69 = *(double **)(v525 + 24 * v54);
                v70 = v516;
                v71 = v517;
                v72 = *(_QWORD *)&v516->f64[(unint64_t)*v69 + v528 * (unint64_t)v69[1]];
                if (*((_QWORD *)v517 + v54))
                {
                  v73 = 0;
                  v74 = v530 - 1;
                  v75 = v69 + 1;
                  do
                  {
                    *(_QWORD *)&v70->f64[(unint64_t)*(v75 - 1) + v528 * (unint64_t)*v75] = v74;
                    ++v73;
                    v75 += 2;
                  }
                  while (v73 < v71[v54]);
                }
                if (*((_QWORD *)v509 + v62))
                {
                  v76 = 0;
                  v77 = 0;
                  do
                  {
                    CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v516, (unint64_t)*(double *)(*(_QWORD *)(v515 + 24 * v62) + v76 + 8), (unint64_t)*(double *)(*(_QWORD *)(v515 + 24 * v62) + v76), v72);
                    ++v77;
                    v76 += 16;
                  }
                  while (v77 < *((_QWORD *)v509 + v62));
                }
                v78 = (char *)v511 + 32 * v62;
                v79 = (char *)v520 + 32 * v54;
                v80 = v78[1];
                *v79 = *v78;
                v79[1] = v80;
                v81 = (char **)(v515 + 24 * v62);
                v82 = (char *)(v525 + 24 * v54);
                if (v82 != (char *)v81)
                  std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>(v82, *v81, *(_QWORD *)(v515 + 24 * v62 + 8), (uint64_t)(*(_QWORD *)(v515 + 24 * v62 + 8) - (_QWORD)*v81) >> 4);
                v83 = v509;
                v84 = *((_QWORD *)v509 + v62);
                *((_QWORD *)v517 + v54) = v84;
                v531 -= v84;
                v531 += v83[v62];
              }
              ++v61;
              v58 = *v56;
            }
            while (v61 < (v56[1] - *v56) >> 3);
          }
          ++v54;
        }
        while (v54 != v457);
        goto LABEL_128;
      }
    }
    v28 = 0;
    v29 = v516->f64[(unint64_t)**(double **)(v525 + 24 * v25)
                  + v528 * (unint64_t)*(double *)(*(_QWORD *)(v525 + 24 * v25) + 8)];
    while (1)
    {
      v30 = *((_QWORD *)v509 + v28);
      if ((float)((float)*((unint64_t *)v517 + v25) * 0.1) < (float)v30)
        break;
LABEL_59:
      if (++v28 == v26)
        goto LABEL_60;
    }
    v31 = v516->f64[(unint64_t)*((double *)v513 + 2 * v28)
                  + v528 * (unint64_t)*((double *)v513 + 2 * v28 + 1)];
    if (*(_QWORD *)&v31 == *(_QWORD *)&v29)
    {
      v32 = (char *)v489 + 24 * v25;
      v34 = v32 + 8;
      v33 = (_QWORD *)*((_QWORD *)v32 + 1);
      v36 = v32 + 16;
      v35 = *((_QWORD *)v32 + 2);
      if ((unint64_t)v33 < v35)
      {
LABEL_23:
        *v33 = v28;
        v37 = v33 + 1;
LABEL_58:
        *v34 = v37;
        goto LABEL_59;
      }
      v42 = *(_QWORD **)v32;
      v48 = ((uint64_t)v33 - *(_QWORD *)v32) >> 3;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v50 = v35 - (_QWORD)v42;
      if (v50 >> 2 > v49)
        v49 = v50 >> 2;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v49;
      if (v46)
      {
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v36, v46);
        v33 = (_QWORD *)*v34;
        v42 = *(_QWORD **)v32;
      }
      else
      {
        v47 = 0;
      }
      v51 = &v47[8 * v48];
      *(_QWORD *)v51 = v28;
      v37 = v51 + 8;
      while (v33 != v42)
      {
        v52 = *--v33;
        *((_QWORD *)v51 - 1) = v52;
        v51 -= 8;
      }
    }
    else
    {
      if (v31 != 0.0)
        goto LABEL_59;
      v38 = 0;
      if (v30)
      {
        v39 = (double *)(*(_QWORD *)(v515 + 24 * v28) + 8);
        v40 = *((_QWORD *)v509 + v28);
        do
        {
          if (*(_QWORD *)&v516->f64[(unint64_t)*(v39 - 1) + v528 * (unint64_t)*v39] == *(_QWORD *)&v29)
            ++v38;
          v39 += 2;
          --v40;
        }
        while (v40);
      }
      if (v30 > v38)
        goto LABEL_59;
      v32 = (char *)v489 + 24 * v25;
      v34 = v32 + 8;
      v33 = (_QWORD *)*((_QWORD *)v32 + 1);
      v36 = v32 + 16;
      v41 = *((_QWORD *)v32 + 2);
      if ((unint64_t)v33 < v41)
        goto LABEL_23;
      v42 = *(_QWORD **)v32;
      v43 = ((uint64_t)v33 - *(_QWORD *)v32) >> 3;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v45 = v41 - (_QWORD)v42;
      if (v45 >> 2 > v44)
        v44 = v45 >> 2;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v36, v46);
        v33 = (_QWORD *)*v34;
        v42 = *(_QWORD **)v32;
      }
      else
      {
        v47 = 0;
      }
      v51 = &v47[8 * v43];
      *(_QWORD *)v51 = v28;
      v37 = v51 + 8;
      while (v33 != v42)
      {
        v53 = *--v33;
        *((_QWORD *)v51 - 1) = v53;
        v51 -= 8;
      }
    }
    *(_QWORD *)v32 = v51;
    *v34 = v37;
    *v36 = &v47[8 * v46];
    if (v42)
      operator delete(v42);
    goto LABEL_58;
  }
LABEL_128:
  *(_QWORD *)&buf.x = &v489;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v116 = v518;
  v117 = (char *)v517;
  v118 = (v518 - (_BYTE *)v517) >> 3;
  std::vector<float>::vector(v507, v118);
  std::vector<float>::vector(v506, v118);
  v119 = (uint64_t *)v460;
  std::vector<float>::vector(v505, v118);
  CRDetectorPostProcessV3::extractAvgAndMaxValueInComponents((uint64_t)&v516, a2, (float **)v506, v450, (float **)v505, (uint64_t *)v460, (uint64_t *)v507);
  LOBYTE(buf.x) = 1;
  std::vector<BOOL>::vector(v504, v118, (unsigned __int8 *)&buf);
  if (v116 != v117)
  {
    v120 = 0;
    v121 = v517;
    v122 = (float *)v507[0];
    v123 = (float *)v506[0];
    v124 = (float *)v505[0];
    v125 = (char *)v504[0];
    if (v118 <= 1)
      v126 = 1;
    else
      v126 = v118;
    do
    {
      if (v121[v120] < 0xAuLL
        || v122[v120] < 0.35
        || ((v127 = v123[v120], v127 < 0.1) ? (v128 = a9 == 0) : (v128 = 0), v128 || v127 < v124[v120]))
      {
        *(_QWORD *)&v125[(v120 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v120);
      }
      ++v120;
    }
    while (v126 != v120);
  }
  if (CRSignpostLog_onceToken != -1)
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_14);
  v129 = (id)CRSignpostLog_signPostOSLog;
  v130 = os_signpost_id_generate(v129);

  if (CRSignpostLog_onceToken != -1)
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_14);
  v131 = (id)CRSignpostLog_signPostOSLog;
  v132 = v131;
  if (v130 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v131))
  {
    LOWORD(buf.x) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4FB8000, v132, OS_SIGNPOST_INTERVAL_BEGIN, v130, "OCRDetectorPostprocessingGrowComponent", "", (uint8_t *)&buf, 2u);
  }

  memset(&v503, 0, sizeof(v503));
  v501 = 0;
  v500 = 0;
  v502 = 0;
  v498 = 0;
  v497 = 0;
  v499 = 0;
  std::vector<int>::resize(&v503, (v518 - (_BYTE *)v517) >> 3);
  v133 = (v518 - (_BYTE *)v517) >> 3;
  v134 = (char *)v501;
  v135 = ((_BYTE *)v501 - (_BYTE *)v500) >> 3;
  if (v133 <= v135)
  {
    if (v133 >= v135)
      goto LABEL_165;
    v147 = (char *)v500 + 8 * v133;
    goto LABEL_162;
  }
  v136 = v133 - v135;
  if (v133 - v135 <= (v502 - (_BYTE *)v501) >> 3)
  {
    bzero(v501, 8 * v136);
    v147 = &v134[8 * v136];
LABEL_162:
    v501 = v147;
    goto LABEL_165;
  }
  if (v518 - (_BYTE *)v517 < 0)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v137 = v502 - (_BYTE *)v500;
  if ((v502 - (_BYTE *)v500) >> 2 > v133)
    v133 = v137 >> 2;
  if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
    v138 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v138 = v133;
  v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v502, v138);
  v140 = (char *)v501;
  v141 = (char *)v500;
  v142 = &v139[8 * v135];
  v144 = &v139[8 * v143];
  bzero(v142, 8 * v136);
  v145 = &v142[8 * v136];
  while (v140 != v141)
  {
    v146 = *((_QWORD *)v140 - 1);
    v140 -= 8;
    *((_QWORD *)v142 - 1) = v146;
    v142 -= 8;
  }
  v500 = v142;
  v501 = v145;
  v502 = v144;
  v119 = (uint64_t *)v460;
  if (v141)
    operator delete(v141);
LABEL_165:
  std::vector<double>::resize((uint64_t)&v497, (v518 - (_BYTE *)v517) >> 3);
  v448 = v130;
  v451 = v130 - 1;
  v148 = v518;
  v149 = (char *)v517;
  if (v518 != v517)
  {
    v150 = 0;
    v151 = 15.0;
    v152 = 0.5;
    do
    {
      if (((*(_QWORD *)((char *)v504[0] + ((v150 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v150) & 1) != 0)
      {
        v468 = (double *)v497;
        *((_QWORD *)v497 + v150) = 0x7FEFFFFFFFFFFFFFLL;
        v153 = v500;
        *((_QWORD *)v500 + v150) = 0;
        v154 = v530;
        v155 = v529;
        v156 = v528;
        v157 = (int *)((char *)v520 + 32 * v150);
        v158 = v157[4];
        v159 = *v157;
        v160 = v157[6];
        v161 = v157[2];
        v162 = *(_DWORD *)&v149[8 * v150];
        v163 = atomic_load((unsigned __int8 *)&qword_1ED0B4910);
        if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_1ED0B4910))
        {
          _MergedGlobals_38 = 0x3FFABD2098D0A970;
          __cxa_guard_release(&qword_1ED0B4910);
        }
        v164 = v161 - v159 + 1;
        v165 = v160 - v158 + 1;
        v166 = (double)(v156 * v155) * 0.0;
        v167 = v164 * v165;
        if (v166 >= (double)v162)
        {
          v196 = sqrt(fmin((double)v165, (double)v164) * (double)v162 / (float)v167);
          v197 = fmax((double)(int)(v196 + v196), 0.0);
          v119 = (uint64_t *)v460;
        }
        else
        {
          CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&buf, v165, v164, 1, 0, 1);
          std::vector<float>::vector(v476, v167);
          LODWORD(v169) = (int)fmax((double)v159, 0.0);
          v170 = fmin((double)(v164 + (int)v169), (double)*(unint64_t *)(v460 + 8));
          v171 = v476[0];
          if (v170 > (double)(int)v169)
          {
            v172 = 0;
            v173 = (int)fmax((double)v158, 0.0);
            v174 = *(_QWORD *)(v460 + 16);
            v175 = fmin((double)(v165 + v173), (double)v174);
            v176 = (double)v173;
            v177 = v173;
            v169 = (int)v169;
            v178 = v174 * (int)v169 + v173;
            v179 = v173 + 1;
            v180 = *(_QWORD *)v460 + 4 * v178;
            v181 = 4 * v174;
            do
            {
              if (v175 > v176)
              {
                v182 = (_QWORD *)&v516->f64[v177 + v528 * v169];
                v183 = (float *)v180;
                v184 = v172;
                v185 = v179;
                do
                {
                  v186 = *v183 > 0.4 && *v182 == v154 + (int)v150;
                  *((float *)v171 + v184) = (float)v186;
                  v187 = (double)v185++;
                  ++v184;
                  ++v182;
                  ++v183;
                }
                while (v175 > v187);
              }
              ++v169;
              v172 += v165;
              v180 += v181;
            }
            while (v170 > (double)(int)v169);
          }
          CRDetectorUtils::connectComponentLabel(v171, (float *)v165, v164, (float64x2_t **)&buf, v168);
          v476[1] = v476[0];
          std::vector<float>::shrink_to_fit((char **)v476);
          v188 = DWORD2(v551);
          v189 = v548.f64[0];
          y = buf.y;
          v153[v150] = (uint64_t)(*(_QWORD *)&v548.f64[0] - *(_QWORD *)&buf.y) >> 3;
          v119 = (uint64_t *)v460;
          if (v188 < 1)
          {
            v198 = sqrt(fmin((double)v165, (double)v164) * (double)v188 / (float)v167);
            v197 = fmax((double)(int)(v198 + v198), 0.0);
          }
          else
          {
            if (*(_QWORD *)&y == *(_QWORD *)&v189)
            {
              v194 = 0.0;
            }
            else
            {
              v191 = 1.0;
              v192 = *(unint64_t **)&y;
              do
              {
                v193 = *v192++;
                v191 = fmax(v191, (double)v193);
              }
              while (v192 != *(unint64_t **)&v189);
              v194 = 0.0;
              do
              {
                v195 = **(_QWORD **)&y;
                *(_QWORD *)&y += 8;
                v194 = v194 + (double)v195 / v191;
              }
              while (*(_QWORD *)&y != *(_QWORD *)&v189);
            }
            v199 = *(double *)&_MergedGlobals_38;
            if (fmax((double)v165, (double)v164) >= fmin((double)v165, (double)v164) * 8.0)
            {
              v255 = 1.79769313e308;
              v254 = v468;
            }
            else
            {
              v489 = 0;
              v490 = 0;
              v491 = 0;
              std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&v489, *(const void **)&v550[8], *(uint64_t *)&v550[16], (uint64_t)(*(_QWORD *)&v550[16] - *(_QWORD *)&v550[8]) >> 4);
              v200 = atomic_load((unsigned __int8 *)&qword_1ED0B4920);
              v201 = CRDocumentOutputRegionMetadata;
              if ((v200 & 1) == 0)
              {
                v258 = __cxa_guard_acquire(&qword_1ED0B4920);
                v201 = CRDocumentOutputRegionMetadata;
                if (v258)
                {
                  qword_1ED0B4918 = 0x3FF705BC7FA14B98;
                  __cxa_guard_release(&qword_1ED0B4920);
                  v201 = CRDocumentOutputRegionMetadata;
                }
              }
              v202 = *(double **)&v550[8];
              v203 = *(uint64_t **)&v550[16];
              v204 = v489;
              if (*(_QWORD *)&v550[8] != *(_QWORD *)&v550[16])
              {
                v205 = buf.y;
                v206 = (double *)((char *)v489 + 8);
                do
                {
                  v207 = **(_QWORD **)&v205;
                  *(_QWORD *)&v205 += 8;
                  *v206 = v202[1] + sqrt((double)v207 / 3.14159265) * *(double *)&v201[58].superclass;
                  v208 = *v202;
                  v202 += 2;
                  *(v206 - 1) = v208;
                  v206 += 2;
                }
                while (v202 != (double *)v203);
              }
              v539.y = 0.0;
              v539.x = 0.0;
              v540.f64[0] = 0.0;
              std::vector<double>::reserve((void **)&v539, ((_BYTE *)v490 - v204) >> 4);
              v209 = (double *)v489;
              v210 = (double *)v490;
              v211 = (_BYTE *)v490 - (_BYTE *)v489;
              if ((unint64_t)((_BYTE *)v490 - (_BYTE *)v489) < 0x11)
              {
                v255 = 1.79769313e308;
                v254 = v468;
              }
              else
              {
                v446 = v199;
                v212 = 0;
                do
                {
                  x = v539.x;
                  v539.y = v539.x;
                  if (v209 == v210)
                  {
                    v237 = NAN;
LABEL_251:
                    v254 = v468;
                    goto LABEL_252;
                  }
                  v214 = (double)(unint64_t)(v211 >> 4);
                  v215 = 0.0;
                  v216 = 0.0;
                  v217 = v209;
                  do
                  {
                    v218 = *v217;
                    v219 = v217[1];
                    v217 += 2;
                    v216 = v216 + v218 / v214;
                    v215 = v215 + v219 / v214;
                  }
                  while (v217 != v210);
                  v220 = 0;
                  v221 = 0.0;
                  do
                  {
                    v222 = &v209[2 * v220];
                    v223 = acos((*v222 - v216)/ sqrt((*v222 - v216) * (*v222 - v216) + (v222[1] - v215) * (v222[1] - v215)));
                    v224 = v223;
                    if (*(_QWORD *)&x >= *(_QWORD *)&v540.f64[0])
                    {
                      v225 = v539.x;
                      v226 = (uint64_t)(*(_QWORD *)&x - *(_QWORD *)&v539.x) >> 3;
                      v227 = v226 + 1;
                      if ((unint64_t)(v226 + 1) >> 61)
                        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                      v228 = *(_QWORD *)&v540.f64[0] - *(_QWORD *)&v539.x;
                      if ((uint64_t)(*(_QWORD *)&v540.f64[0] - *(_QWORD *)&v539.x) >> 2 > v227)
                        v227 = v228 >> 2;
                      if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8)
                        v229 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v229 = v227;
                      if (v229)
                      {
                        v230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v540, v229);
                        x = v539.y;
                        v225 = v539.x;
                      }
                      else
                      {
                        v230 = 0;
                      }
                      v231 = (double *)&v230[8 * v226];
                      *v231 = v224;
                      *(_QWORD *)&v232 = v231 + 1;
                      while (*(_QWORD *)&x != *(_QWORD *)&v225)
                      {
                        v233 = *(_QWORD *)(*(_QWORD *)&x - 8);
                        *(_QWORD *)&x -= 8;
                        *((_QWORD *)v231-- - 1) = v233;
                      }
                      *(_QWORD *)&v539.x = v231;
                      v539.y = v232;
                      *(_QWORD *)&v540.f64[0] = &v230[8 * v229];
                      if (v225 != 0.0)
                        operator delete(*(void **)&v225);
                      x = v232;
                    }
                    else
                    {
                      **(double **)&x = v223;
                      *(_QWORD *)&x += 8;
                    }
                    v539.y = x;
                    v234 = v539.x;
                    v235 = *(double *)(*(_QWORD *)&v539.x + 8 * v220);
                    if (v235 > 1.57079633)
                      v235 = v235 + -3.14159265;
                    *(double *)(*(_QWORD *)&v539.x + 8 * v220) = v235;
                    v221 = v221 + v235;
                    ++v220;
                    v209 = (double *)v489;
                  }
                  while (v220 < ((_BYTE *)v490 - (_BYTE *)v489) >> 4);
                  v236 = (uint64_t)(*(_QWORD *)&x - *(_QWORD *)&v234) >> 3;
                  v237 = v221 / (double)v236;
                  if (*(_QWORD *)&x == *(_QWORD *)&v234)
                    goto LABEL_251;
                  v238 = 0.0;
                  v239 = *(double **)&v234;
                  do
                  {
                    v240 = *v239++;
                    v238 = v238 + (v240 - v237) * (v240 - v237) / (double)v236;
                  }
                  while (v239 != *(double **)&x);
                  v241 = sqrt(v238);
                  if (v241 <= 0.034906585)
                    break;
                  v242 = 0;
                  v243 = v236 <= 1 ? 1 : (uint64_t)(*(_QWORD *)&x - *(_QWORD *)&v234) >> 3;
                  v244 = -1;
                  v245 = 0.0;
                  do
                  {
                    v246 = vabdd_f64(*(double *)(*(_QWORD *)&v234 + 8 * v242), v237);
                    if (v246 > v245)
                    {
                      v244 = v242;
                      v245 = v246;
                    }
                    ++v242;
                  }
                  while (v243 != v242);
                  if (v244 >= v236)
                    break;
                  v247 = *(double *)(*(_QWORD *)&v234 + 8 * v244);
                  if (v247 >= v237 - v241 && v247 <= v237 + v241)
                    break;
                  v249 = v119;
                  v250 = (char *)v489 + 16 * v244;
                  v251 = (char *)((_BYTE *)v490 - (v250 + 16));
                  if (v490 != v250 + 16)
                  {
                    memmove((char *)v489 + 16 * v244, v250 + 16, (_BYTE *)v490 - (v250 + 16));
                    v234 = v539.x;
                    x = v539.y;
                  }
                  v210 = (double *)&v251[(_QWORD)v250];
                  v490 = &v251[(_QWORD)v250];
                  v252 = *(_QWORD *)&v234 + 8 * v244;
                  if (*(_QWORD *)&x != v252 + 8)
                  {
                    memmove((void *)(*(_QWORD *)&v234 + 8 * v244), (const void *)(v252 + 8), *(_QWORD *)&x - (v252 + 8));
                    v210 = (double *)v490;
                  }
                  *(_QWORD *)&v539.y = *(_QWORD *)&x - 8;
                  v209 = (double *)v489;
                  v211 = (char *)v210 - (_BYTE *)v489;
                  v253 = (unint64_t)((char *)v210 - (_BYTE *)v489) < 0x11 || v212++ >= 9;
                  v119 = v249;
                }
                while (!v253);
                v254 = v468;
                if (v241 > 0.034906585)
                {
                  v255 = 1.79769313e308;
                  goto LABEL_255;
                }
LABEL_252:
                if (fabs(v237) <= 0.00174532925)
                  v255 = 0.0;
                else
                  v255 = -v237;
LABEL_255:
                v199 = v446;
              }
              if (*(_QWORD *)&v539.x)
              {
                v539.y = v539.x;
                operator delete(*(void **)&v539.x);
                v209 = (double *)v489;
              }
              if (v209)
              {
                v490 = v209;
                operator delete(v209);
              }
            }
            v256 = sqrt((double)v188 / fmax(v194, 1.0) / 3.14159265);
            v151 = 15.0;
            v197 = fmin((double)(int)fmax((double)(int)((v199 + -1.0) * v256 + (v199 + -1.0) * v256), 0.0), 15.0);
            v254[v150] = v255;
            v152 = 0.5;
          }
          if (v476[0])
          {
            v476[1] = v476[0];
            operator delete(v476[0]);
          }
          v489 = &v550[32];
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v489);
          if (*(_QWORD *)&v550[8])
          {
            *(_QWORD *)&v550[16] = *(_QWORD *)&v550[8];
            operator delete(*(void **)&v550[8]);
          }
          if (*(_QWORD *)&v549.f64[0])
          {
            v549.f64[1] = v549.f64[0];
            operator delete(*(void **)&v549.f64[0]);
          }
          if (*(_QWORD *)&buf.y)
          {
            v548.f64[0] = buf.y;
            operator delete(*(void **)&buf.y);
          }
          v257 = buf.x;
          buf.x = 0.0;
          if (v257 != 0.0)
            MEMORY[0x1D826E270](*(_QWORD *)&v257, 0x1000C8000313F17);
        }
        v503.__begin_[v150] = (int)fmin((double)(int)v197 * v152, v151);
        v148 = v518;
        v149 = (char *)v517;
      }
      else
      {
        v503.__begin_[v150] = 0;
        *((_QWORD *)v500 + v150) = 0;
        *((_QWORD *)v497 + v150) = 0;
      }
      ++v150;
    }
    while (v150 < (v148 - v149) >> 3);
  }
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v489, v456, v455, 1, 1, 0);
  CRDetectorUtils::growConnectedComponents((uint64_t)&v516, v119, &v503.__begin_, (CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v489, v504, 0.06);
  if (CRSignpostLog_onceToken != -1)
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_14);
  v259 = (id)CRSignpostLog_signPostOSLog;
  v260 = v259;
  if (v451 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v259))
  {
    LOWORD(buf.x) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4FB8000, v260, OS_SIGNPOST_INTERVAL_END, v448, "OCRDetectorPostprocessingGrowComponent", "", (uint8_t *)&buf, 2u);
  }

  CRLogger = CRLogger::getCRLogger(v261);
  if (*CRLogger && (CRLogger[8] & 1) != 0)
  {
    v263 = CFSTR("fine_scale");
    if (a6)
      v263 = CFSTR("coarse_scale");
    v264 = v263;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%@_regionMap_%@.png"), v452, v264);
    v265 = (vImage_Buffer *)objc_claimAutoreleasedReturnValue();
    CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)v119, v265, v266);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%@_linkMap_%@.png"), v452, v264);
    v267 = (vImage_Buffer *)objc_claimAutoreleasedReturnValue();
    CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)a2, v267, v268);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%@_combinedMap_%@.png"), v452, v264);
    v269 = (vImage_Buffer *)objc_claimAutoreleasedReturnValue();
    CRDetectorUtils::writeImageBufferToFile(v444, v269, v270);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%@_componentHighImage_%@.png"), v452, v264);
    v271 = (void *)objc_claimAutoreleasedReturnValue();
    CRDetectorPostProcessV3::saveConnectedComponentsMap((CRDetectorPostProcessV3 *)&v508, (const CRDetectorUtils::CRTextDetectorConnectedComponentResult *)v456, (void *)v455, v271, v272);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/tmp/%@_componentGrownImage_%@.png"), v452, v264);
    v273 = (void *)objc_claimAutoreleasedReturnValue();
    CRDetectorPostProcessV3::saveConnectedComponentsMap((CRDetectorPostProcessV3 *)&v489, (const CRDetectorUtils::CRTextDetectorConnectedComponentResult *)v456, (void *)v455, v273, v274);

  }
  if (CRSignpostLog_onceToken != -1)
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_14);
  v275 = (id)CRSignpostLog_signPostOSLog;
  v276 = os_signpost_id_generate(v275);

  if (CRSignpostLog_onceToken != -1)
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_14);
  v277 = (id)CRSignpostLog_signPostOSLog;
  v278 = v277;
  if (v276 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v277))
  {
    LOWORD(buf.x) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4FB8000, v278, OS_SIGNPOST_INTERVAL_BEGIN, v276, "OCRDetectorPostprocessingExtractQuads", "", (uint8_t *)&buf, 2u);
  }

  v485 = 0;
  v486 = 0;
  v487 = 0;
  v482 = 0;
  v483 = 0;
  v484 = 0;
  v279 = *a2;
  cv::Mat::Mat(&buf, v455, v456, 1);
  cv::Mat::clear((cv::Mat *)&buf);
  if (v455)
  {
    for (i = 0; i != v455; ++i)
    {
      if (v456)
      {
        for (j = 0; j != v456; ++j)
        {
          if (*(float *)(v279 + 4 * j) <= 0.3)
            v282 = 0;
          else
            v282 = -1;
          *(_BYTE *)(*(_QWORD *)&buf.y + v557 * (uint64_t)((int)j + v559 + HIDWORD(v554) * ((int)i + v558))) = v282;
        }
      }
      v279 += 4 * v456;
    }
  }
  v283 = houghTransformGlobalAngle(*(uint64_t *)&buf.y, v456, v455, 0.1);
  *(_QWORD *)&buf.x = &off_1E98D92A0;
  v556 = &off_1E98D92C0;
  cv::SmartPtr::release((cv::SmartPtr *)&v556);
  v447 = v276 - 1;
  v449 = v276;
  v284 = v283 != -1000.0 && vabds_f32(90.0, v283) < 15.0;
  v285 = v518;
  v286 = v517;
  if (v518 != v517)
  {
    v287 = 0;
    v458 = v284;
    while (((*(_QWORD *)((char *)v504[0] + ((v287 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v287) & 1) == 0)
    {
LABEL_371:
      if (++v287 >= (v285 - v286) >> 3)
        goto LABEL_372;
    }
    v288 = v530 + v287;
    LOBYTE(v546) = 0;
    v539 = (CGPoint)0;
    v540 = 0u;
    v541 = 0u;
    v542 = 0u;
    __src = 0u;
    memset(v544, 0, sizeof(v544));
    v289 = *((double *)v497 + v287);
    v290 = *((_QWORD *)v500 + v287);
    v291 = v503.__begin_[v287];
    v486 = v485;
    v483 = v482;
    extractContourFromLabelMap((uint64_t *)&v516, v530 + v287, (uint64_t)v489, v496[3], v291, &v485, &v482);
    CRDetectorUtils::generateConvexHull((uint64_t)&v482, (char *)&v537);
    if (v284)
      CRMinAreaRect::findMinAreaMaxContourRect(0.0, 0.5, (uint64_t)&v488, (uint64_t)&v537, (double *)v476, (uint64_t *)&v485);
    else
      CRMinAreaRect::findMinAreaRect(0.0, (uint64_t)&v488, (uint64_t)&v537, (double *)v476);
    v292 = v481;
    if (v481 == 90.0 && v290 == 1)
      v292 = 0.0;
    v481 = v292;
    CRMinAreaRect::sortMinAreaRectCorners((int)&v488, (CRDetectorUtils *)v476);
    v294 = (v486 - (_BYTE *)v485) >> 3;
    v295 = (double)v294;
    v296 = *(double *)&v480 * *((double *)&v480 + 1) * 0.5;
    if (*(double *)&v480 >= *((double *)&v480 + 1) * 2.5 || v296 <= v295)
    {
      if (v486 != v485 && !(_BYTE)v546 && *(double *)&v480 > *((double *)&v480 + 1) * 4.0 && a7 && v296 > v295)
      {
        std::vector<PixelPosition>::vector(&v535, v294);
        buf.x = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)v476, v306);
        buf.y = v307;
        CRDetectorUtils::rotateContour((uint64_t *)&v485, &buf.x, &v535, v481 / 180.0 * 3.14159265);
        v486 = v485;
        v472 = 0;
        v473 = 0;
        v471 = 0;
        std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&v471, v535, (uint64_t)v536, (v536 - (_BYTE *)v535) >> 3);
        buf.y = 0.0;
        buf.x = 0.0;
        v548.f64[0] = 0.0;
        *(_DWORD *)v550 = 0;
        memset(&v550[8], 0, 48);
        HIDWORD(v548.f64[1]) = v529;
        v549 = (float64x2_t)0xA0000000FuLL;
        CRDetectorPolygonExtractor::generatePivotsPolygon((uint64_t)&buf, (uint64_t *)&v471, &v474);
        v308 = LOBYTE(v548.f64[1]);
        CRDetectorPolygonExtractor::~CRDetectorPolygonExtractor((CRDetectorPolygonExtractor *)&buf);
        if (v471)
        {
          v472 = v471;
          operator delete(v471);
        }
        buf.x = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)v476, v309);
        buf.y = v310;
        CRDetectorUtils::rotateContour((uint64_t *)&v474, &buf.x, &v474, v481 / -180.0 * 3.14159265);
        v536 = v535;
        v311 = v474;
        if (v308 && v475 != v474)
        {
          v312 = 0;
          v313 = (float64x2_t *)*((_QWORD *)&__src + 1);
          do
          {
            v314 = *(_QWORD *)&v311[8 * v312];
            v315.i64[0] = (int)v314;
            v315.i64[1] = SHIDWORD(v314);
            v316 = (int8x16_t)vcvtq_f64_u64(*(uint64x2_t *)(v460 + 8));
            v317 = vdivq_f64(vcvtq_f64_s64(v315), (float64x2_t)vextq_s8(v316, v316, 8uLL));
            if ((unint64_t)v313 >= v544[0])
            {
              v469 = v317;
              v319 = (float64x2_t *)__src;
              v320 = (uint64_t)((uint64_t)v313 - __src) >> 4;
              v321 = v320 + 1;
              if ((unint64_t)(v320 + 1) >> 60)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v322 = v544[0] - __src;
              if ((uint64_t)(v544[0] - __src) >> 3 > v321)
                v321 = v322 >> 3;
              if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFF0)
                v294 = 0xFFFFFFFFFFFFFFFLL;
              else
                v294 = v321;
              if (v294)
              {
                v323 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)v544, v294);
                v313 = (float64x2_t *)*((_QWORD *)&__src + 1);
                v319 = (float64x2_t *)__src;
              }
              else
              {
                v323 = 0;
              }
              v324 = (float64x2_t *)&v323[16 * v320];
              *v324 = v469;
              v318 = v324 + 1;
              if (v313 != v319)
              {
                do
                {
                  v324[-1] = v313[-1];
                  --v324;
                  --v313;
                }
                while (v313 != v319);
                v319 = (float64x2_t *)__src;
              }
              *(_QWORD *)&__src = v324;
              *((_QWORD *)&__src + 1) = v318;
              v544[0] = &v323[16 * v294];
              if (v319)
                operator delete(v319);
            }
            else
            {
              *v313 = v317;
              v318 = v313 + 1;
            }
            *((_QWORD *)&__src + 1) = v318;
            ++v312;
            v311 = v474;
            v313 = v318;
          }
          while (v312 < (v475 - v474) >> 3);
        }
        if (v311)
        {
          v475 = v311;
          operator delete(v311);
        }
        v284 = v458;
        if (v535)
        {
          v536 = v535;
          operator delete(v535);
        }
        goto LABEL_323;
      }
    }
    else
    {
      LOBYTE(v546) = 1;
    }
    v486 = v485;
LABEL_323:
    v297 = v481 / 180.0 * 3.14159265;
    *(double *)&v544[3] = v297;
    v539 = *(CGPoint *)v476;
    v540 = v477;
    v541 = v478;
    v542 = v479;
    v544[1] = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)&v539, (CGPoint *)v294);
    v544[2] = v298;
    if (v289 < 1.79769313e308 && vabdd_f64(v297, v289) < 0.523598776)
    {
      for (k = 0; k != 8; k += 2)
      {
        v300 = *(double *)&v544[3] - v289;
        v301 = __sincosf_stret(v300);
        v302 = *(double *)&v476[k] - *(double *)&v544[1];
        v303 = *(double *)&v476[k + 1] - *(double *)&v544[2];
        v304 = *(double *)&v544[2] + v303 * v301.__cosval + v302 * v301.__sinval;
        v305 = (double *)((char *)&v539.x + k * 8);
        *v305 = *(double *)&v544[1] + v302 * v301.__cosval - v303 * v301.__sinval;
        v305[1] = v304;
      }
      v284 = v458;
      if (CRDetectorUtils::isContourInQuad((int **)&v537, &v539.x, (unint64_t)(v538 - (_BYTE *)v537) >> 3, 0.2))
      {
        *(double *)&v544[3] = v289;
      }
      else
      {
        v539 = *(CGPoint *)v476;
        v540 = v477;
        v541 = v478;
        v542 = v479;
      }
    }
    v545 = v480;
    *(double *)&v544[4] = *((float *)v507[0] + v288 - v530);
    LOBYTE(v552) = 0;
    v554 = 0;
    v555 = 0;
    v553 = 0;
    memset(&v550[16], 0, 56);
    buf = v539;
    v548 = v540;
    v549 = v541;
    *(float64x2_t *)v550 = v542;
    std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>(&v550[16], (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 4);
    *(_OWORD *)&v550[40] = *(_OWORD *)&v544[1];
    *(_OWORD *)&v550[56] = *(_OWORD *)&v544[3];
    v551 = v545;
    v552 = v546;
    v325 = v465[1];
    if (v325 >= v465[2])
    {
      v326 = std::vector<CRDetectorUtils::CRTextDetectorQuadFeature>::__push_back_slow_path<CRDetectorUtils::CRTextDetectorQuadFeature const&>(v465, (__int128 *)&buf);
      v327 = v465;
    }
    else
    {
      std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::construct[abi:ne180100]<CRDetectorUtils::CRTextDetectorQuadFeature,CRDetectorUtils::CRTextDetectorQuadFeature const&>((uint64_t)(v465 + 2), v465[1], (__int128 *)&buf);
      v326 = v325 + 168;
      v327 = v465;
      v465[1] = v325 + 168;
    }
    v327[1] = v326;
    v535 = &v553;
    std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100]((void ***)&v535);
    if (*(_QWORD *)&v550[16])
    {
      *(_QWORD *)&v550[24] = *(_QWORD *)&v550[16];
      operator delete(*(void **)&v550[16]);
    }
    if (v537)
    {
      v538 = v537;
      operator delete(v537);
    }
    if ((_QWORD)__src)
    {
      *((_QWORD *)&__src + 1) = __src;
      operator delete((void *)__src);
    }
    v285 = v518;
    v286 = v517;
    goto LABEL_371;
  }
LABEL_372:
  v328 = v465[1] - *v465;
  if (v328)
  {
    std::vector<unsigned long>::vector(&v537, 0xCF3CF3CF3CF3CF3DLL * (v328 >> 3));
    v329 = v465;
    std::vector<unsigned long>::vector(&v535, 0xCF3CF3CF3CF3CF3DLL * ((v465[1] - *v465) >> 3));
    v332 = v535;
    if (v536 != v535)
    {
      v333 = 0;
      v334 = (v536 - (_BYTE *)v535) >> 3;
      if (v334 <= 1)
        v334 = 1;
      do
      {
        v332[v333] = v333;
        ++v333;
      }
      while (v334 != v333);
    }
    v336 = *v465;
    v335 = v465[1];
    if (v335 != *v465)
    {
      v337 = 0;
      v338 = 168;
      v339 = 1;
      do
      {
        v340 = 0xCF3CF3CF3CF3CF3DLL * ((v335 - v336) >> 3);
        v464 = v337 + 1;
        if (v340 > v337 + 1)
        {
          v462 = v338;
          v459 = v339;
          do
          {
            v341 = v336 + 168 * v337;
            v342 = v336 + v338;
            v343 = *(CGPoint *)v341;
            v344 = *(float64x2_t *)(v341 + 16);
            v345 = *(_OWORD *)(v341 + 48);
            v549 = *(float64x2_t *)(v341 + 32);
            *(_OWORD *)v550 = v345;
            buf = v343;
            v548 = v344;
            v346 = *(CGPoint *)(v336 + v338);
            v347 = *(float64x2_t *)(v336 + v338 + 16);
            v348 = *(float64x2_t *)(v336 + v338 + 48);
            v541 = *(float64x2_t *)(v336 + v338 + 32);
            v542 = v348;
            v539 = v346;
            v540 = v347;
            CRDetectorUtils::rotatePolygon((CRDetectorUtils *)v341, (const CGPoint *)(v341 + 88), &buf, *(double *)(v341 + 104), v331);
            CRDetectorUtils::rotatePolygon((CRDetectorUtils *)(v336 + v338), (const CGPoint *)(v342 + 88), &v539, *(double *)(v342 + 104), v349);
            v350 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)buf, v548), (int8x16_t)buf, (int8x16_t)v548);
            v351 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v549, *(float64x2_t *)v550), (int8x16_t)v549, *(int8x16_t *)v550);
            v352 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v548, (float64x2_t)buf), (int8x16_t)buf, (int8x16_t)v548);
            v353 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)v550, v549), (int8x16_t)v549, *(int8x16_t *)v550);
            v354 = vcvt_f32_f64(vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v350, v351), (int8x16_t)v350, (int8x16_t)v351), (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v353, v352), (int8x16_t)v352, (int8x16_t)v353)));
            v355 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v539, v540), (int8x16_t)v539, (int8x16_t)v540);
            v356 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v541, v542), (int8x16_t)v541, (int8x16_t)v542);
            v357 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v540, (float64x2_t)v539), (int8x16_t)v539, (int8x16_t)v540);
            v358 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v542, v541), (int8x16_t)v541, (int8x16_t)v542);
            v359 = vcvt_f32_f64(vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v355, v356), (int8x16_t)v355, (int8x16_t)v356), (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v358, v357), (int8x16_t)v357, (int8x16_t)v358)));
            *(int32x2_t *)&v357.f64[0] = vcgt_f32(v354, v359);
            v467 = v359;
            v470 = v354;
            if ((HIDWORD(v357.f64[0]) & LODWORD(v357.f64[0]) & 1) != 0)
            {
              v360 = 1;
            }
            else
            {
              v361 = vcgt_f32(v359, v354);
              if ((v361.i32[1] & v361.i32[0] & 1) != 0)
                v360 = 0;
              else
                v360 = -1;
            }
            v362 = (float)(fmaxf(v359.f32[1], v359.f32[0]) / fminf(v359.f32[1], v359.f32[0])) < 2.0;
            if ((float)(fmaxf(v354.f32[1], v354.f32[0]) / fminf(v354.f32[1], v354.f32[0])) < 2.0)
              v362 = 1;
            v363 = fmaxf(v354.f32[1], v359.f32[1]) / fminf(v354.f32[1], v359.f32[1]);
            v364 = fmaxf(v354.f32[0], v359.f32[0]) / fminf(v354.f32[0], v359.f32[0]);
            v365 = fmaxf(v363, v364);
            v366 = fminf(v363, v364) > 1.8;
            v367 = v365 > 7.0 || v366;
            if (v365 <= 7.0)
              LOBYTE(v366) = 0;
            if (v366 || (v362 & v367 & 1) != 0)
            {
              std::vector<PixelPosition>::vector(v476, 4uLL);
              v368 = vmuls_lane_f32(v470.f32[0], v470, 1);
              v369 = vmuls_lane_f32(v467.f32[0], v467, 1);
              v370 = v368 < v369;
              if (v368 >= v369)
                v371 = (const double *)v342;
              else
                v371 = (const double *)v341;
              v372 = (float *)v476[0];
              v561 = vld2q_f64(v371);
              v373 = v371 + 4;
              v562 = vld2q_f64(v373);
              v564.val[0] = (float32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v561.val[0]), (int32x4_t)vcvtq_s64_f64(v562.val[0]));
              v564.val[1] = (float32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v561.val[1]), (int32x4_t)vcvtq_s64_f64(v562.val[1]));
              vst2q_f32(v372, v564);
              if (v370)
                v374 = (CGFloat *)v342;
              else
                v374 = (CGFloat *)v341;
              isContourInQuad = CRDetectorUtils::isContourInQuad((int **)v476, v374, 2, 0.2);
              if (v360 != -1 && isContourInQuad)
                v376 = v360;
              else
                v376 = -1;
              if (v476[0])
              {
                v476[1] = v476[0];
                operator delete(v476[0]);
              }
              if (isContourInQuad)
              {
                Root = CRDetectorUtils::findRoot(v337, &v535);
                *((_QWORD *)v535 + v337) = Root;
                v378 = CRDetectorUtils::findRoot(v339, &v535);
                v379 = v535;
                *((_QWORD *)v535 + v339) = v378;
                v379[v379[v337]] = v378;
              }
              if (v376 == 1)
              {
                ++*((_QWORD *)v537 + v339);
              }
              else if (!v376)
              {
                ++*((_QWORD *)v537 + v337);
              }
            }
            ++v339;
            v336 = *v465;
            v335 = v465[1];
            v340 = 0xCF3CF3CF3CF3CF3DLL * ((v335 - *v465) >> 3);
            v338 += 168;
          }
          while (v340 > v339);
          v338 = v462;
          v339 = v459;
        }
        ++v339;
        v338 += 168;
        ++v337;
      }
      while (v340 > v464);
      v329 = v465;
      if (v336 != v335)
      {
        v380 = v537;
        do
        {
          if (*v380)
          {
            if (v336 + 168 == v335)
            {
              v382 = v336;
            }
            else
            {
              v381 = v336;
              do
              {
                v382 = v381 + 168;
                v383 = *(_OWORD *)(v381 + 184);
                *(_OWORD *)v381 = *(_OWORD *)(v381 + 168);
                *(_OWORD *)(v381 + 16) = v383;
                v384 = *(_OWORD *)(v381 + 216);
                *(_OWORD *)(v381 + 32) = *(_OWORD *)(v381 + 200);
                *(_OWORD *)(v381 + 48) = v384;
                std::vector<int>::__move_assign(v381 + 64, (__n128 *)(v381 + 232));
                v385 = *(_OWORD *)(v381 + 272);
                *(_OWORD *)(v381 + 88) = *(_OWORD *)(v381 + 256);
                *(_OWORD *)(v381 + 104) = v385;
                *(_OWORD *)(v381 + 120) = *(_OWORD *)(v381 + 288);
                *(_QWORD *)(v381 + 136) = *(_QWORD *)(v381 + 304);
                std::vector<CRDetectorUtils::CRTextDetectorQuad>::__vdeallocate((uint64_t *)(v381 + 144));
                *(_OWORD *)(v381 + 144) = *(_OWORD *)(v381 + 312);
                *(_QWORD *)(v381 + 160) = *(_QWORD *)(v381 + 328);
                *(_QWORD *)(v381 + 320) = 0;
                *(_QWORD *)(v381 + 328) = 0;
                *(_QWORD *)(v381 + 312) = 0;
                v386 = v381 + 336;
                v381 += 168;
              }
              while (v386 != v335);
              v329 = v465;
              v335 = v465[1];
            }
            while (v335 != v382)
            {
              v335 -= 168;
              std::allocator<CRDetectorUtils::CRTextDetectorQuadFeature>::destroy[abi:ne180100]((uint64_t)(v465 + 2), v335);
            }
            v329[1] = v382;
            v330 = (CGPoint *)(v380 + 1);
            v387 = v538 - (_BYTE *)(v380 + 1);
            if (v538 != (_BYTE *)(v380 + 1))
            {
              memmove(v380, v330, v538 - (_BYTE *)(v380 + 1));
              v382 = v329[1];
            }
            v538 = (char *)v380 + v387;
            v335 = v382;
          }
          else
          {
            v336 += 168;
            ++v380;
          }
        }
        while (v336 != v335);
      }
    }
    if (v535)
    {
      v536 = v535;
      operator delete(v535);
    }
    if (v537)
    {
      v538 = v537;
      operator delete(v537);
    }
    v388 = *v329;
    if (v329[1] != *v329)
    {
      v389 = 0;
      v390 = 0;
      do
      {
        v391 = 0;
        v392 = v388 + 168 * v390;
        *(_DWORD *)(v392 + 140) = v390;
        v393 = (int64x2_t)vcvtq_f64_u64(*(uint64x2_t *)(v460 + 8));
        v394 = (float64x2_t)vextq_s8((int8x16_t)v393, (int8x16_t)v393, 8uLL);
        v395 = (float64x2_t)vdupq_laneq_s64(v393, 1);
        v396 = (float64x2_t)vdupq_lane_s64(v393.i64[0], 0);
        do
        {
          v397 = (double *)(v388 + v389 + v391);
          v563 = vld2q_f64(v397);
          v565.val[0] = vdivq_f64(v563.val[0], v395);
          v565.val[1] = vdivq_f64(v563.val[1], v396);
          vst2q_f64(v397, v565);
          v391 += 32;
        }
        while (v391 != 64);
        *(float64x2_t *)(v392 + 120) = vdivq_f64(*(float64x2_t *)(v392 + 120), v394);
        *(double *)(v392 + 88) = CRDetectorUtils::makeCenterPoint((CRDetectorUtils *)(v388 + 168 * v390), v330);
        *(_QWORD *)(v392 + 96) = v398;
        v399 = (__int128 *)(v392 + 88);
        v400 = v388 + 168 * v390;
        v403 = *(_QWORD *)(v400 + 160);
        v402 = (double *)(v400 + 160);
        v401 = v403;
        v405 = (uint64_t *)(v402 - 1);
        v404 = *((_QWORD *)v402 - 1);
        if (v404 >= v403)
        {
          v413 = v402 - 2;
          v414 = *((_QWORD *)v402 - 2);
          v415 = 0x8E38E38E38E38E39 * ((uint64_t)(v404 - v414) >> 4);
          v416 = v415 + 1;
          if (v415 + 1 > 0x1C71C71C71C71C7)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v417 = 0x8E38E38E38E38E39 * ((uint64_t)(v401 - v414) >> 4);
          if (2 * v417 > v416)
            v416 = 2 * v417;
          if (v417 >= 0xE38E38E38E38E3)
            v418 = 0x1C71C71C71C71C7;
          else
            v418 = v416;
          *(_QWORD *)&v549.f64[0] = v402;
          if (v418)
            v419 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDetectorUtils::CRTextDetectorQuad>>((uint64_t)v402, v418);
          else
            v419 = 0;
          *(_QWORD *)&v420 = &v419[144 * v415];
          *(_QWORD *)&buf.x = v419;
          buf.y = v420;
          v548.f64[0] = v420;
          *(_QWORD *)&v548.f64[1] = &v419[144 * v418];
          v421 = *(_OWORD *)v392;
          v422 = *(_OWORD *)(v392 + 16);
          v423 = *(_OWORD *)(v392 + 48);
          *(_OWORD *)(*(_QWORD *)&v420 + 32) = *(_OWORD *)(v392 + 32);
          *(_OWORD *)(*(_QWORD *)&v420 + 48) = v423;
          **(_OWORD **)&v420 = v421;
          *(_OWORD *)(*(_QWORD *)&v420 + 16) = v422;
          *(_QWORD *)(*(_QWORD *)&v420 + 72) = 0;
          *(_QWORD *)(*(_QWORD *)&v420 + 80) = 0;
          *(_QWORD *)(*(_QWORD *)&v420 + 64) = 0;
          std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)(*(_QWORD *)&v420 + 64), *(const void **)(v392 + 64), *(_QWORD *)(v392 + 72), (uint64_t)(*(_QWORD *)(v392 + 72) - *(_QWORD *)(v392 + 64)) >> 4);
          v424 = &v419[144 * v415];
          v425 = *(_OWORD *)(v392 + 120);
          v426 = *(_QWORD *)(v392 + 136);
          v427 = *v399;
          *(_OWORD *)(v424 + 104) = *(_OWORD *)(v392 + 104);
          *(_OWORD *)(v424 + 88) = v427;
          *((_QWORD *)v424 + 17) = v426;
          *(_OWORD *)(v424 + 120) = v425;
          v428 = buf.y;
          v412 = *(_QWORD *)&v548.f64[0] + 144;
          *(_QWORD *)&v548.f64[0] += 144;
          v429 = *(double *)v405;
          v430 = *v413;
          if (*v405 == *(_QWORD *)v413)
          {
            v437 = *(double *)v405;
          }
          else
          {
            do
            {
              v431 = *(_OWORD *)(*(_QWORD *)&v429 - 144);
              v432 = *(_OWORD *)(*(_QWORD *)&v429 - 128);
              v433 = *(_OWORD *)(*(_QWORD *)&v429 - 96);
              *(_OWORD *)(*(_QWORD *)&v428 - 112) = *(_OWORD *)(*(_QWORD *)&v429 - 112);
              *(_OWORD *)(*(_QWORD *)&v428 - 96) = v433;
              *(_OWORD *)(*(_QWORD *)&v428 - 144) = v431;
              *(_OWORD *)(*(_QWORD *)&v428 - 128) = v432;
              *(_QWORD *)(*(_QWORD *)&v428 - 72) = 0;
              *(_QWORD *)(*(_QWORD *)&v428 - 64) = 0;
              *(_QWORD *)(*(_QWORD *)&v428 - 80) = 0;
              *(_OWORD *)(*(_QWORD *)&v428 - 80) = *(_OWORD *)(*(_QWORD *)&v429 - 80);
              *(_QWORD *)(*(_QWORD *)&v428 - 64) = *(_QWORD *)(*(_QWORD *)&v429 - 64);
              *(_QWORD *)(*(_QWORD *)&v429 - 80) = 0;
              *(_QWORD *)(*(_QWORD *)&v429 - 72) = 0;
              *(_QWORD *)(*(_QWORD *)&v429 - 64) = 0;
              v434 = *(_OWORD *)(*(_QWORD *)&v429 - 56);
              v435 = *(_OWORD *)(*(_QWORD *)&v429 - 40);
              v436 = *(_OWORD *)(*(_QWORD *)&v429 - 24);
              *(_QWORD *)(*(_QWORD *)&v428 - 8) = *(_QWORD *)(*(_QWORD *)&v429 - 8);
              *(_OWORD *)(*(_QWORD *)&v428 - 24) = v436;
              *(_OWORD *)(*(_QWORD *)&v428 - 40) = v435;
              *(_OWORD *)(*(_QWORD *)&v428 - 56) = v434;
              *(_QWORD *)&v428 -= 144;
              *(_QWORD *)&v429 -= 144;
            }
            while (*(_QWORD *)&v429 != *(_QWORD *)&v430);
            v437 = *v413;
            v429 = *(double *)v405;
            v412 = *(_QWORD *)&v548.f64[0];
          }
          *v413 = v428;
          buf.y = v437;
          *v405 = v412;
          v548.f64[0] = v429;
          v438 = *v402;
          *v402 = v548.f64[1];
          v548.f64[1] = v438;
          buf.x = v437;
          std::__split_buffer<CRDetectorUtils::CRTextDetectorQuad>::~__split_buffer((uint64_t)&buf);
        }
        else
        {
          v406 = *(_OWORD *)v392;
          v407 = *(_OWORD *)(v392 + 16);
          v408 = *(_OWORD *)(v392 + 48);
          *(_OWORD *)(v404 + 32) = *(_OWORD *)(v392 + 32);
          *(_OWORD *)(v404 + 48) = v408;
          *(_OWORD *)v404 = v406;
          *(_OWORD *)(v404 + 16) = v407;
          *(_QWORD *)(v404 + 72) = 0;
          *(_QWORD *)(v404 + 80) = 0;
          *(_QWORD *)(v404 + 64) = 0;
          std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)(v404 + 64), *(const void **)(v392 + 64), *(_QWORD *)(v392 + 72), (uint64_t)(*(_QWORD *)(v392 + 72) - *(_QWORD *)(v392 + 64)) >> 4);
          v409 = *v399;
          v410 = *(_OWORD *)(v392 + 104);
          v411 = *(_OWORD *)(v392 + 120);
          *(_QWORD *)(v404 + 136) = *(_QWORD *)(v392 + 136);
          *(_OWORD *)(v404 + 120) = v411;
          *(_OWORD *)(v404 + 104) = v410;
          *(_OWORD *)(v404 + 88) = v409;
          v412 = v404 + 144;
          *v405 = v404 + 144;
        }
        *v405 = v412;
        ++v390;
        v388 = *v465;
        v389 += 168;
      }
      while (0xCF3CF3CF3CF3CF3DLL * ((v465[1] - *v465) >> 3) > v390);
    }
  }
  if (CRSignpostLog_onceToken != -1)
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_14);
  v439 = (id)CRSignpostLog_signPostOSLog;
  v440 = v439;
  if (v447 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v439))
  {
    LOWORD(buf.x) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D4FB8000, v440, OS_SIGNPOST_INTERVAL_END, v449, "OCRDetectorPostprocessingExtractQuads", "", (uint8_t *)&buf, 2u);
  }

  if (v482)
  {
    v483 = v482;
    operator delete(v482);
  }
  if (v485)
  {
    v486 = v485;
    operator delete(v485);
  }
  *(_QWORD *)&buf.x = v496;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v494)
  {
    v495 = v494;
    operator delete(v494);
  }
  if (v492)
  {
    v493 = v492;
    operator delete(v492);
  }
  if (v490)
  {
    v491 = v490;
    operator delete(v490);
  }
  v441 = v489;
  v489 = 0;
  if (v441)
    MEMORY[0x1D826E270](v441, 0x1000C8000313F17);
  if (v497)
  {
    v498 = v497;
    operator delete(v497);
  }
  if (v500)
  {
    v501 = v500;
    operator delete(v500);
  }
  if (v503.__begin_)
  {
    v503.__end_ = v503.__begin_;
    operator delete(v503.__begin_);
  }
  if (v504[0])
    operator delete(v504[0]);
  if (v505[0])
  {
    v505[1] = v505[0];
    operator delete(v505[0]);
  }
  if (v506[0])
  {
    v506[1] = v506[0];
    operator delete(v506[0]);
  }
  if (v507[0])
  {
    v507[1] = v507[0];
    operator delete(v507[0]);
  }
  *(_QWORD *)&buf.x = &v515;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v513)
  {
    v514 = v513;
    operator delete(v513);
  }
  if (v511)
  {
    v512 = v511;
    operator delete(v511);
  }
  if (v509)
  {
    v510 = v509;
    operator delete(v509);
  }
  v442 = v508;
  v508 = 0;
  if (v442)
    MEMORY[0x1D826E270](v442, 0x1000C8000313F17);
  *(_QWORD *)&buf.x = &v525;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v523)
  {
    v524 = v523;
    operator delete(v523);
  }
  if (v520)
  {
    __p = v520;
    operator delete(v520);
  }
  if (v517)
  {
    v518 = (char *)v517;
    operator delete(v517);
  }
  v443 = v516;
  v516 = 0;
  if (v443)
    MEMORY[0x1D826E270](v443, 0x1000C8000313F17);
  if (v532)
  {
    v533 = v532;
    operator delete(v532);
  }
  *(_QWORD *)&buf.x = v534;
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);

}

void sub_1D50F5578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;

  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&a56);
  v63 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v63;
    operator delete(v63);
  }
  v64 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v64;
    operator delete(v64);
  }
  v65 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v65;
    operator delete(v65);
  }
  if (STACK[0x250])
    operator delete((void *)STACK[0x250]);
  v66 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v66;
    operator delete(v66);
  }
  v67 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v67;
    operator delete(v67);
  }
  v68 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v68;
    operator delete(v68);
  }
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&STACK[0x2B0]);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&STACK[0x340]);
  v69 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v69;
    operator delete(v69);
  }
  STACK[0x340] = (unint64_t)&STACK[0x3E8];
  std::vector<CRDetectorUtils::CRTextDetectorQuad>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);

  _Unwind_Resume(a1);
}

void std::vector<float>::shrink_to_fit(char **a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;

  v2 = (uint64_t)(a1 + 2);
  v3 = a1[2];
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - v4) >> 2;
  if (v6 < (v3 - v4) >> 2)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 4 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v2, v6);
      v8 = *a1;
      v4 = a1[1];
      v9 = (uint64_t)&v7[4 * v6];
      v11 = &v7[4 * v10];
      if (v4 != *a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *(_DWORD *)(v12 - 4) = v13;
          v12 -= 4;
        }
        while (v4 != v8);
        v4 = v8;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *a1 = (char *)v12;
    a1[1] = (char *)v9;
    a1[2] = v11;
    if (v4)
      operator delete(v4);
  }
}

void CRDetectorPostProcessV3::Graph::connectedComponents(CRDetectorPostProcessV3::Graph *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  void *v12[3];

  v4 = *(int *)this;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(v12, v4, (unsigned __int8 *)&__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = *(_DWORD *)this;
  if (*(int *)this >= 1)
  {
    v6 = 0;
    do
    {
      if (((*(_QWORD *)((char *)v12[0] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        __p = 0;
        v10 = 0;
        v11 = 0;
        CRDetectorPostProcessV3::Graph::dfsUtil((uint64_t)this, v6, v12, (uint64_t)&__p);
        v7 = a2[1];
        if (v7 >= a2[2])
        {
          v8 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(a2, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)a2, (uint64_t)&__p);
          v8 = v7 + 24;
        }
        a2[1] = v8;
        if (__p)
        {
          v10 = __p;
          operator delete(__p);
        }
        v5 = *(_DWORD *)this;
      }
      ++v6;
    }
    while ((uint64_t)v6 < v5);
  }
  if (v12[0])
    operator delete(v12[0]);
}

void sub_1D50F5AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void CRDetectorPostProcessV3::Graph::dfsUtil(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t i;

  *(_QWORD *)(*a3 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_DWORD **)(a4 + 8);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_DWORD **)a4;
    v13 = ((uint64_t)v10 - *(_QWORD *)a4) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v16);
      v12 = *(_DWORD **)a4;
      v10 = *(_DWORD **)(a4 + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v19 = &v17[4 * v16];
    *(_DWORD *)v18 = a2;
    v11 = v18 + 4;
    while (v10 != v12)
    {
      v20 = *--v10;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    *(_QWORD *)a4 = v18;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v10 = a2;
    v11 = v10 + 1;
  }
  *(_QWORD *)(a4 + 8) = v11;
  v21 = *(_QWORD *)(a1 + 8) + 24 * a2;
  for (i = *(_QWORD *)(v21 + 8); i != v21; i = *(_QWORD *)(i + 8))
  {
    if (((*(_QWORD *)(*a3 + (((unint64_t)*(int *)(i + 16) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(i + 16)) & 1) == 0)
      CRDetectorPostProcessV3::Graph::dfsUtil(a1);
  }
}

CRDetectorPostProcessV3::Graph *CRDetectorPostProcessV3::Graph::Graph(CRDetectorPostProcessV3::Graph *this, int a2)
{
  _QWORD *v3;
  __int128 v5;
  uint64_t v6;
  void **v7;

  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v3 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<std::list<int>>::vector(&v5, a2);
  std::vector<std::list<int>>::__vdeallocate(v3);
  *(_OWORD *)((char *)this + 8) = v5;
  *((_QWORD *)this + 3) = v6;
  v6 = 0;
  v5 = 0uLL;
  v7 = (void **)&v5;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return this;
}

void sub_1D50F5D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_DWORD *CRDetectorPostProcessV3::Graph::addEdge(CRDetectorPostProcessV3::Graph *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  _DWORD *result;
  uint64_t v11;

  v5 = *((_QWORD *)this + 1);
  v6 = (uint64_t *)(v5 + 24 * a2);
  v7 = operator new(0x18uLL);
  v7[4] = a3;
  v8 = *v6;
  *(_QWORD *)v7 = *v6;
  *((_QWORD *)v7 + 1) = v6;
  *(_QWORD *)(v8 + 8) = v7;
  *v6 = (uint64_t)v7;
  ++v6[2];
  v9 = (uint64_t *)(v5 + 24 * a3);
  result = operator new(0x18uLL);
  result[4] = a2;
  v11 = *v9;
  *(_QWORD *)result = *v9;
  *((_QWORD *)result + 1) = v9;
  *(_QWORD *)(v11 + 8) = result;
  *v9 = (uint64_t)result;
  ++v9[2];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *,false>(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  int v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  float v34;
  float v35;
  float *j;
  float v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  float *v46;
  BOOL v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float *v55;
  uint64_t v56;
  float v57;
  float v58;
  float *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  float *v64;
  float v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  float *v90;
  float v91;
  float v92;
  float v93;
  float *v94;
  unint64_t v95;
  float v96;
  float v97;
  unint64_t k;
  float *v100;
  float v101;
  float v102;
  float v103;
  float *m;
  float v105;

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(float *a1, float *a2, float *a3)
{
  float result;
  float v4;
  float v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  int v10;
  float v11;
  float v12;
  float v13;

  result = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < result || a2[1] >= a1[1]))
  {
    v8 = *a3;
    if (*a3 < result || result >= v8 && a3[1] < a2[1])
    {
      *a2 = v8;
      *a3 = result;
      v9 = a2 + 1;
      v10 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v10;
      result = *a2;
      v11 = *a1;
      if (*a2 < *a1 || v11 >= result && *v9 < a1[1])
      {
        *a1 = result;
        v6 = a1 + 1;
        *a2 = v11;
LABEL_18:
        result = *v6;
        *v6 = *v9;
        *v9 = result;
      }
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < result || result >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = a1 + 1;
      *a3 = v4;
      v7 = a3 + 1;
LABEL_17:
      v9 = v7;
      goto LABEL_18;
    }
    *a1 = result;
    *a2 = v4;
    v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    v13 = *a3;
    result = *a2;
    if (*a3 < *a2 || result >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = result;
      v7 = a3 + 1;
      v6 = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(uint64_t a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1 || v7 >= v6 && *(a2 - 1) < *(float *)(a1 + 4))
      {
        *(float *)a1 = v6;
        *(a2 - 2) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(float *)(a1 + 4) = *(a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, (float *)(a1 + 8), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, a1 + 8, a1 + 16, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, a1 + 8, a1 + 16, a1 + 24, (uint64_t)(a2 - 2));
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = (float *)(a1 + 24);
      if ((float *)(a1 + 24) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = (float *)a1;
    if (v9 == (float *)a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = a1 + v17;
      v19 = *(float *)(a1 + v17 + 8);
      if (v13 < v19)
      {
        v20 = *(float *)(v18 + 12);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = (float *)(a1 + v17 + 16);
        goto LABEL_22;
      }
      v20 = *(float *)(a1 + v17 + 12);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *(float *)(v18 + 16) = v19;
      *(float *)(a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = (float *)a1;
        goto LABEL_22;
      }
    }
    v16 = v9;
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;
  float v9;
  int v10;
  float v11;
  int v12;
  float v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1, (float *)a2, (float *)a3);
  result = *(float *)a4;
  v9 = *(float *)a3;
  if (*(float *)a4 < *(float *)a3 || v9 >= result && *(float *)(a4 + 4) < *(float *)(a3 + 4))
  {
    *(float *)a3 = result;
    *(float *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    result = *(float *)a3;
    v11 = *(float *)a2;
    if (*(float *)a3 < *(float *)a2 || v11 >= result && *(float *)(a3 + 4) < *(float *)(a2 + 4))
    {
      *(float *)a2 = result;
      *(float *)a3 = v11;
      v12 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      result = *(float *)a2;
      v13 = *a1;
      if (*(float *)a2 < *a1 || v13 >= result && *(float *)(a2 + 4) < a1[1])
      {
        *a1 = result;
        *(float *)a2 = v13;
        result = a1[1];
        a1[1] = *(float *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result;
  float v11;
  int v12;
  float v13;
  int v14;
  float v15;
  int v16;
  float v17;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1, a2, a3, a4);
  result = *(float *)a5;
  v11 = *(float *)a4;
  if (*(float *)a5 < *(float *)a4 || v11 >= result && *(float *)(a5 + 4) < *(float *)(a4 + 4))
  {
    *(float *)a4 = result;
    *(float *)a5 = v11;
    v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v12;
    result = *(float *)a4;
    v13 = *(float *)a3;
    if (*(float *)a4 < *(float *)a3 || v13 >= result && *(float *)(a4 + 4) < *(float *)(a3 + 4))
    {
      *(float *)a3 = result;
      *(float *)a4 = v13;
      v14 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v14;
      result = *(float *)a3;
      v15 = *(float *)a2;
      if (*(float *)a3 < *(float *)a2 || v15 >= result && *(float *)(a3 + 4) < *(float *)(a2 + 4))
      {
        *(float *)a2 = result;
        *(float *)a3 = v15;
        v16 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v16;
        result = *(float *)a2;
        v17 = *a1;
        if (*(float *)a2 < *a1 || v17 >= result && *(float *)(a2 + 4) < a1[1])
        {
          *a1 = result;
          *(float *)a2 = v17;
          result = a1[1];
          a1[1] = *(float *)(a2 + 4);
          *(float *)(a2 + 4) = result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,false>(uint64_t result, double *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  double v40;
  int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  BOOL v51;
  double v52;
  int v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  unint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  int v88;
  double *v89;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  uint64_t v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  int v160;
  uint64_t v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double *v167;
  double *v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  int v175;
  double *v176;
  double *v177;
  int v178;
  double v179;
  double v180;
  double v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  int64_t v185;
  uint64_t v186;
  uint64_t v187;
  int64_t v188;
  int v189;

  v9 = result;
LABEL_2:
  v186 = (uint64_t)a2;
  v187 = (uint64_t)(a2 - 2);
  v183 = (uint64_t)(a2 - 6);
  v184 = (uint64_t)(a2 - 4);
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v82 = *(a2 - 2);
        objc_msgSend(*(id *)(*a3 + 8 * *((int *)a2 - 2)), "area");
        v83 = *(double *)v9;
        v85 = v82 / v84;
        result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v9 + 8)), "area");
        if (v85 < v83 / v86)
        {
          v87 = *(double *)v9;
          *(double *)v9 = *(a2 - 2);
          *(a2 - 2) = v87;
          v88 = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v88;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v9, v9 + 16, v187, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v9, v9 + 16, v9 + 32, v187, a3);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,0>(v9, v9 + 16, v9 + 32, v9 + 48, v187, a3);
      default:
        if (v11 <= 383)
        {
          v89 = (double *)(v9 + 16);
          v91 = (double *)v9 == a2 || v89 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v91)
            {
              v92 = 0;
              v93 = v9;
              do
              {
                v94 = v89;
                v95 = *(double *)(v93 + 16);
                objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v93 + 24)), "area", v183);
                v96 = *(double *)v93;
                v98 = v95 / v97;
                result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v93 + 8)), "area");
                if (v98 < v96 / v99)
                {
                  v100 = *v94;
                  v101 = *(_DWORD *)(v93 + 24);
                  v102 = v92;
                  while (1)
                  {
                    v103 = v9 + v102;
                    *(_QWORD *)(v103 + 16) = *(_QWORD *)(v9 + v102);
                    *(_DWORD *)(v103 + 24) = *(_DWORD *)(v9 + v102 + 8);
                    if (!v102)
                      break;
                    objc_msgSend(*(id *)(*a3 + 8 * v101), "area");
                    v104 = *(double *)(v103 - 16);
                    v106 = v100 / v105;
                    result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v103 - 8)), "area");
                    v102 -= 16;
                    if (v106 >= v104 / v107)
                    {
                      v108 = v9 + v102 + 16;
                      goto LABEL_73;
                    }
                  }
                  v108 = v9;
LABEL_73:
                  *(double *)v108 = v100;
                  *(_DWORD *)(v108 + 8) = v101;
                  a2 = (double *)v186;
                }
                v89 = v94 + 2;
                v92 += 16;
                v93 = (uint64_t)v94;
              }
              while (v94 + 2 != a2);
            }
          }
          else if (!v91)
          {
            v167 = (double *)(v9 + 24);
            do
            {
              v168 = v89;
              v169 = *(double *)(v9 + 16);
              objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v9 + 24)), "area", v183);
              v170 = *(double *)v9;
              v172 = v169 / v171;
              result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v9 + 8)), "area");
              if (v172 < v170 / v173)
              {
                v174 = *v168;
                v175 = *(_DWORD *)(v9 + 24);
                v176 = v167;
                do
                {
                  v177 = v176;
                  *(v176 - 1) = *(v176 - 3);
                  v178 = *((_DWORD *)v176 - 4);
                  v176 -= 2;
                  *(_DWORD *)v177 = v178;
                  objc_msgSend(*(id *)(*a3 + 8 * v175), "area");
                  v179 = *(v177 - 5);
                  v181 = v174 / v180;
                  result = objc_msgSend(*(id *)(*a3 + 8 * *((int *)v177 - 8)), "area");
                }
                while (v181 < v179 / v182);
                *(v176 - 1) = v174;
                *(_DWORD *)v176 = v175;
                a2 = (double *)v186;
              }
              v89 = v168 + 2;
              v167 += 2;
              v9 = (uint64_t)v168;
            }
            while (v168 + 2 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if ((double *)v9 != a2)
          {
            v109 = (unint64_t)(v12 - 2) >> 1;
            v188 = v109;
            do
            {
              v110 = v109;
              if (v188 >= v109)
              {
                v111 = (2 * v109) | 1;
                v112 = v9 + 16 * v111;
                if (2 * v109 + 2 < v12)
                {
                  v113 = *(double *)v112;
                  objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v112 + 8)), "area");
                  v114 = *(double *)(v112 + 16);
                  v116 = v113 / v115;
                  objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v112 + 24)), "area");
                  if (v116 < v114 / v117)
                  {
                    v112 += 16;
                    v111 = 2 * v110 + 2;
                  }
                }
                v118 = v9 + 16 * v110;
                v119 = *(double *)v112;
                objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v112 + 8)), "area", v183);
                v120 = *(double *)v118;
                v122 = v119 / v121;
                result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v118 + 8)), "area");
                if (v122 >= v120 / v123)
                {
                  v124 = *(double *)v118;
                  v183 = *(unsigned int *)(v118 + 8);
                  v185 = v110;
                  v125 = (int)v183;
                  do
                  {
                    v126 = v118;
                    v118 = v112;
                    *(_QWORD *)v126 = *(_QWORD *)v112;
                    *(_DWORD *)(v126 + 8) = *(_DWORD *)(v112 + 8);
                    if (v188 < v111)
                      break;
                    v127 = 2 * v111;
                    v111 = (2 * v111) | 1;
                    v112 = v9 + 16 * v111;
                    v128 = v127 + 2;
                    if (v127 + 2 < v12)
                    {
                      v129 = *(double *)v112;
                      objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v112 + 8)), "area");
                      v130 = *(double *)(v112 + 16);
                      v132 = v129 / v131;
                      objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v112 + 24)), "area");
                      if (v132 < v130 / v133)
                      {
                        v112 += 16;
                        v111 = v128;
                      }
                    }
                    v134 = *(double *)v112;
                    objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v112 + 8)), "area", v183);
                    v136 = v134 / v135;
                    result = objc_msgSend(*(id *)(*a3 + 8 * v125), "area");
                  }
                  while (v136 >= v124 / v137);
                  *(double *)v118 = v124;
                  v110 = v185;
                  *(_DWORD *)(v118 + 8) = v183;
                  a2 = (double *)v186;
                }
              }
              v109 = v110 - 1;
            }
            while (v110);
            v138 = (unint64_t)v11 >> 4;
            do
            {
              v139 = 0;
              v140 = *(double *)v9;
              v189 = *(_DWORD *)(v9 + 8);
              v141 = v9;
              do
              {
                v142 = v141;
                v141 += 16 * (v139 + 1);
                v143 = 2 * v139;
                v139 = (2 * v139) | 1;
                v144 = v143 + 2;
                if (v143 + 2 < v138)
                {
                  v145 = *(double *)v141;
                  objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v141 + 8)), "area");
                  v146 = *(double *)(v141 + 16);
                  v148 = v145 / v147;
                  result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v141 + 24)), "area");
                  if (v148 < v146 / v149)
                  {
                    v141 += 16;
                    v139 = v144;
                  }
                }
                *(_QWORD *)v142 = *(_QWORD *)v141;
                *(_DWORD *)(v142 + 8) = *(_DWORD *)(v141 + 8);
              }
              while (v139 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
              v150 = a2 - 2;
              if ((double *)v141 == a2 - 2)
              {
                *(double *)v141 = v140;
                *(_DWORD *)(v141 + 8) = v189;
              }
              else
              {
                *(double *)v141 = *(a2 - 2);
                *(_DWORD *)(v141 + 8) = *((_DWORD *)a2 - 2);
                *(a2 - 2) = v140;
                *((_DWORD *)a2 - 2) = v189;
                v151 = v141 - v9 + 16;
                if (v151 >= 17)
                {
                  v152 = (((unint64_t)v151 >> 4) - 2) >> 1;
                  v153 = v9 + 16 * v152;
                  v154 = *(double *)v153;
                  objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v153 + 8)), "area");
                  v155 = *(double *)v141;
                  v157 = v154 / v156;
                  result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v141 + 8)), "area");
                  if (v157 < v155 / v158)
                  {
                    v159 = *(double *)v141;
                    v160 = *(_DWORD *)(v141 + 8);
                    do
                    {
                      v161 = v141;
                      v141 = v153;
                      *(_QWORD *)v161 = *(_QWORD *)v153;
                      *(_DWORD *)(v161 + 8) = *(_DWORD *)(v153 + 8);
                      if (!v152)
                        break;
                      v152 = (v152 - 1) >> 1;
                      v153 = v9 + 16 * v152;
                      v162 = *(double *)v153;
                      objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v153 + 8)), "area");
                      v164 = v162 / v163;
                      result = objc_msgSend(*(id *)(*a3 + 8 * v160), "area");
                    }
                    while (v164 < v159 / v165);
                    *(double *)v141 = v159;
                    *(_DWORD *)(v141 + 8) = v160;
                  }
                }
              }
              a2 = v150;
            }
            while (v138-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = v9 + 16 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v14, v9, v187, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v9, v14, v187, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v9 + 16, v14 - 16, v184, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v9 + 32, v9 + 16 + 16 * v13, v183, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v14 - 16, v14, v9 + 16 + 16 * v13, a3);
          v15 = *(double *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v14;
          *(double *)v14 = v15;
          v16 = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = v16;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v17 = *(double *)(v9 - 16);
          objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v9 - 8)), "area");
          v18 = *(double *)v9;
          v20 = v17 / v19;
          objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v9 + 8)), "area");
          if (v20 >= v18 / v21)
          {
            v52 = *(double *)v9;
            v53 = *(_DWORD *)(v9 + 8);
            objc_msgSend(*(id *)(*a3 + 8 * v53), "area");
            v54 = *(a2 - 2);
            v56 = v52 / v55;
            result = objc_msgSend(*(id *)(*a3 + 8 * *((int *)a2 - 2)), "area");
            if (v56 >= v54 / v57)
            {
              v62 = v9 + 16;
              do
              {
                v10 = v62;
                if (v62 >= (unint64_t)a2)
                  break;
                objc_msgSend(*(id *)(*a3 + 8 * v53), "area");
                v63 = *(double *)v10;
                v65 = v52 / v64;
                result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v10 + 8)), "area");
                v62 = v10 + 16;
              }
              while (v65 >= v63 / v66);
            }
            else
            {
              v10 = v9;
              do
              {
                objc_msgSend(*(id *)(*a3 + 8 * v53), "area", v183);
                v58 = *(double *)(v10 + 16);
                v10 += 16;
                v60 = v52 / v59;
                result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v10 + 8)), "area");
              }
              while (v60 >= v58 / v61);
            }
            v67 = (unint64_t)a2;
            if (v10 < (unint64_t)a2)
            {
              v67 = (unint64_t)a2;
              do
              {
                objc_msgSend(*(id *)(*a3 + 8 * v53), "area", v183);
                v68 = *(double *)(v67 - 16);
                v67 -= 16;
                v70 = v52 / v69;
                result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v67 + 8)), "area");
              }
              while (v70 < v68 / v71);
            }
            while (v10 < v67)
            {
              v72 = *(double *)v10;
              *(_QWORD *)v10 = *(_QWORD *)v67;
              *(double *)v67 = v72;
              v73 = *(_DWORD *)(v10 + 8);
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v67 + 8);
              *(_DWORD *)(v67 + 8) = v73;
              do
              {
                objc_msgSend(*(id *)(*a3 + 8 * v53), "area", v183);
                v74 = *(double *)(v10 + 16);
                v10 += 16;
                v76 = v52 / v75;
                objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v10 + 8)), "area");
              }
              while (v76 >= v74 / v77);
              do
              {
                objc_msgSend(*(id *)(*a3 + 8 * v53), "area");
                v78 = *(double *)(v67 - 16);
                v67 -= 16;
                v80 = v52 / v79;
                result = objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v67 + 8)), "area");
              }
              while (v80 < v78 / v81);
            }
            if (v10 - 16 != v9)
            {
              *(_QWORD *)v9 = *(_QWORD *)(v10 - 16);
              *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
            }
            a5 = 0;
            *(double *)(v10 - 16) = v52;
            *(_DWORD *)(v10 - 8) = v53;
            continue;
          }
        }
        v22 = 0;
        v23 = *(double *)v9;
        v24 = *(_DWORD *)(v9 + 8);
        do
        {
          v25 = *(double *)(v9 + v22 + 16);
          objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v9 + v22 + 24)), "area", v183);
          v27 = v25 / v26;
          objc_msgSend(*(id *)(*a3 + 8 * v24), "area");
          v22 += 16;
        }
        while (v27 < v23 / v28);
        v29 = v9 + v22;
        v30 = v186;
        if (v22 == 16)
        {
          v30 = v186;
          do
          {
            if (v29 >= v30)
              break;
            v35 = *(double *)(v30 - 16);
            v30 -= 16;
            objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v30 + 8)), "area");
            v37 = v35 / v36;
            objc_msgSend(*(id *)(*a3 + 8 * v24), "area");
          }
          while (v37 >= v23 / v38);
        }
        else
        {
          do
          {
            v31 = *(double *)(v30 - 16);
            v30 -= 16;
            objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v30 + 8)), "area");
            v33 = v31 / v32;
            objc_msgSend(*(id *)(*a3 + 8 * v24), "area");
          }
          while (v33 >= v23 / v34);
        }
        v10 = v9 + v22;
        if (v29 < v30)
        {
          v39 = v30;
          do
          {
            v40 = *(double *)v10;
            *(_QWORD *)v10 = *(_QWORD *)v39;
            *(double *)v39 = v40;
            v41 = *(_DWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v39 + 8);
            *(_DWORD *)(v39 + 8) = v41;
            do
            {
              v42 = *(double *)(v10 + 16);
              v10 += 16;
              objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v10 + 8)), "area");
              v44 = v42 / v43;
              objc_msgSend(*(id *)(*a3 + 8 * v24), "area");
            }
            while (v44 < v23 / v45);
            do
            {
              v46 = *(double *)(v39 - 16);
              v39 -= 16;
              objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v39 + 8)), "area");
              v48 = v46 / v47;
              objc_msgSend(*(id *)(*a3 + 8 * v24), "area");
            }
            while (v48 >= v23 / v49);
          }
          while (v10 < v39);
        }
        if (v10 - 16 != v9)
        {
          *(_QWORD *)v9 = *(_QWORD *)(v10 - 16);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
        }
        *(double *)(v10 - 16) = v23;
        *(_DWORD *)(v10 - 8) = v24;
        v50 = v29 >= v30;
        a2 = (double *)v186;
        if (!v50)
        {
LABEL_31:
          result = std::__introsort<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,false>(v9, v10 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v9, v10 - 16, a3);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(v10, v186, a3);
        if (!(_DWORD)result)
        {
          if (v51)
            continue;
          goto LABEL_31;
        }
        a2 = (double *)(v10 - 16);
        if (!v51)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t result;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a2, a3, a4, a6);
  v12 = *(double *)a5;
  objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a5 + 8)), "area");
  v13 = *(double *)a4;
  v15 = v12 / v14;
  result = objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a4 + 8)), "area");
  if (v15 < v13 / v17)
  {
    v18 = *(double *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(double *)a5 = v18;
    v19 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v19;
    v20 = *(double *)a4;
    objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a4 + 8)), "area");
    v21 = *(double *)a3;
    v23 = v20 / v22;
    result = objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a3 + 8)), "area");
    if (v23 < v21 / v24)
    {
      v25 = *(double *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(double *)a4 = v25;
      v26 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v26;
      v27 = *(double *)a3;
      objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a3 + 8)), "area");
      v28 = *(double *)a2;
      v30 = v27 / v29;
      result = objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a2 + 8)), "area");
      if (v30 < v28 / v31)
      {
        v32 = *(double *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(double *)a3 = v32;
        v33 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v33;
        v34 = *(double *)a2;
        objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a2 + 8)), "area");
        v35 = *(double *)a1;
        v37 = v34 / v36;
        result = objc_msgSend(*(id *)(*a6 + 8 * *(int *)(a1 + 8)), "area");
        if (v37 < v35 / v38)
        {
          v39 = *(double *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(double *)a2 = v39;
          v40 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v40;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  double v8;
  int *v9;
  double v10;
  int *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t result;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;

  v8 = *(double *)a2;
  v9 = (int *)(a2 + 8);
  objc_msgSend(*(id *)(*a4 + 8 * *(int *)(a2 + 8)), "area");
  v10 = *(double *)a1;
  v11 = (int *)(a1 + 8);
  v13 = v8 / v12;
  objc_msgSend(*(id *)(*a4 + 8 * *(int *)(a1 + 8)), "area");
  v14 = *(double *)a3;
  v16 = v10 / v15;
  objc_msgSend(*(id *)(*a4 + 8 * *(int *)(a3 + 8)), "area");
  v17 = *(double *)a2;
  v19 = v14 / v18;
  result = objc_msgSend(*(id *)(*a4 + 8 * *v9), "area");
  v22 = v17 / v21;
  if (v13 < v16)
  {
    v23 = *(double *)a1;
    if (v19 >= v22)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(double *)a2 = v23;
      v32 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v32;
      v33 = *(double *)a3;
      objc_msgSend(*(id *)(*a4 + 8 * *(int *)(a3 + 8)), "area");
      v34 = *(double *)a2;
      v36 = v33 / v35;
      result = objc_msgSend(*(id *)(*a4 + 8 * *(int *)(a2 + 8)), "area");
      if (v36 >= v34 / v37)
        return result;
      v38 = *(double *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(double *)a3 = v38;
      v11 = v9;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(double *)a3 = v23;
    }
    v9 = (int *)(a3 + 8);
    goto LABEL_10;
  }
  if (v19 < v22)
  {
    v24 = *(double *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(double *)a3 = v24;
    v25 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v25;
    v26 = *(double *)a2;
    objc_msgSend(*(id *)(*a4 + 8 * *(int *)(a2 + 8)), "area");
    v27 = *(double *)a1;
    v29 = v26 / v28;
    result = objc_msgSend(*(id *)(*a4 + 8 * *(int *)(a1 + 8)), "area");
    if (v29 < v27 / v30)
    {
      v31 = *(double *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(double *)a2 = v31;
LABEL_10:
      v39 = *v11;
      *v11 = *v9;
      *v9 = v39;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(double *)(a2 - 16);
      objc_msgSend(*(id *)(*a3 + 8 * *(int *)(a2 - 8)), "area");
      v9 = *(double *)a1;
      v11 = v8 / v10;
      objc_msgSend(*(id *)(*a3 + 8 * *(int *)(a1 + 8)), "area");
      if (v11 < v9 / v12)
      {
        v13 = *(double *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(double *)(a2 - 16) = v13;
        v14 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v14;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*,0>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a3);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *(double *)v16;
    objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v16 + 8)), "area");
    v20 = *(double *)v15;
    v22 = v19 / v21;
    objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v15 + 8)), "area");
    if (v22 < v20 / v23)
    {
      v24 = *(double *)v16;
      v25 = *(_DWORD *)(v16 + 8);
      v26 = v17;
      while (1)
      {
        v27 = a1 + v26;
        *(_QWORD *)(v27 + 48) = *(_QWORD *)(a1 + v26 + 32);
        *(_DWORD *)(v27 + 56) = *(_DWORD *)(a1 + v26 + 40);
        if (v26 == -32)
          break;
        objc_msgSend(*(id *)(*a3 + 8 * v25), "area");
        v28 = *(double *)(v27 + 16);
        v30 = v24 / v29;
        objc_msgSend(*(id *)(*a3 + 8 * *(int *)(v27 + 24)), "area");
        v26 -= 16;
        if (v30 >= v28 / v31)
        {
          v32 = a1 + v26 + 48;
          goto LABEL_12;
        }
      }
      v32 = a1;
LABEL_12:
      *(double *)v32 = v24;
      *(_DWORD *)(v32 + 8) = v25;
      if (++v18 == 8)
        return v16 + 16 == a2;
    }
    v15 = v16;
    v17 += 16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,tableRegionNMS(std::vector<std::pair<double,int>>,std::vector<CRNormalizedQuad * {__strong}> const&)::$_0 &,std::pair<double,int>*>(a1, a2, a3, a5);
  v10 = *(double *)a4;
  objc_msgSend(*(id *)(*a5 + 8 * *(int *)(a4 + 8)), "area");
  v11 = *(double *)a3;
  v13 = v10 / v12;
  result = objc_msgSend(*(id *)(*a5 + 8 * *(int *)(a3 + 8)), "area");
  if (v13 < v11 / v15)
  {
    v16 = *(double *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(double *)a4 = v16;
    v17 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v17;
    v18 = *(double *)a3;
    objc_msgSend(*(id *)(*a5 + 8 * *(int *)(a3 + 8)), "area");
    v19 = *(double *)a2;
    v21 = v18 / v20;
    result = objc_msgSend(*(id *)(*a5 + 8 * *(int *)(a2 + 8)), "area");
    if (v21 < v19 / v22)
    {
      v23 = *(double *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(double *)a3 = v23;
      v24 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v24;
      v25 = *(double *)a2;
      objc_msgSend(*(id *)(*a5 + 8 * *(int *)(a2 + 8)), "area");
      v26 = *(double *)a1;
      v28 = v25 / v27;
      result = objc_msgSend(*(id *)(*a5 + 8 * *(int *)(a1 + 8)), "area");
      if (v28 < v26 / v29)
      {
        v30 = *(double *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(double *)a2 = v30;
        v31 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v31;
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<CRNormalizedQuad * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D50F8000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<CRDetectorUtils::CRTextDetectorQuad>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 144;
    v4 = *(void **)(v2 - 80);
    if (v4)
    {
      *(_QWORD *)(v2 - 72) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 144;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::list<int>>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::list<int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = &v4[3 * a2];
    do
    {
      *v4 = v4;
      v4[1] = v4;
      v4[2] = 0;
      v4 += 3;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D50F80E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::list<int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::pair<double,int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::list<int>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        std::__list_imp<unsigned long>::clear(v3);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void cv::SmartPtr::release(cv::SmartPtr *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    if ((*v2)-- == 1)
    {
      if (*((_QWORD *)this + 1))
      {
        free(*((void **)this + 1));
        *((_QWORD *)this + 1) = 0;
        v2 = (_DWORD *)*((_QWORD *)this + 2);
      }
      free(v2);
      *((_QWORD *)this + 2) = 0;
    }
  }
}

void cv::SmartPtr::~SmartPtr(cv::SmartPtr *this)
{
  *(_QWORD *)this = &off_1E98D92C0;
  cv::SmartPtr::release(this);
}

{
  *(_QWORD *)this = &off_1E98D92C0;
  cv::SmartPtr::release(this);
  JUMPOUT(0x1D826E294);
}

void cv::SmartPtr::operator=(cv::SmartPtr *this@<X0>, cv::SmartPtr *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (this == a2)
  {
    v9 = *((_QWORD *)this + 1);
    v6 = (int *)*((_QWORD *)this + 2);
    *a3 = &off_1E98D92C0;
    a3[1] = v9;
    a3[2] = v6;
    if (!v6)
      return;
    v8 = *v6;
    goto LABEL_6;
  }
  cv::SmartPtr::release(this);
  v7 = *((_QWORD *)a2 + 1);
  v6 = (int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 2) = v6;
  if (v6)
  {
    v8 = *v6 + 1;
    *v6 = v8;
    *a3 = &off_1E98D92C0;
    a3[1] = v7;
    a3[2] = v6;
LABEL_6:
    *v6 = v8 + 1;
    return;
  }
  *a3 = &off_1E98D92C0;
  a3[1] = v7;
  a3[2] = 0;
}

void correctHistogram(unsigned __int8 **a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  uint64_t v15;
  int v16;
  _DWORD v17[256];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_BYTE *)*a2;
  v4 = (_QWORD)a1[1] * (_QWORD)a1[2];
  bzero(v17, 0x400uLL);
  if ((int)v4 >= 1)
  {
    v5 = v4;
    v6 = v2;
    do
    {
      v7 = *v6++;
      ++v17[v7];
      --v5;
    }
    while (v5);
  }
  v8 = 257;
  v9 = v17;
  do
  {
    v10 = *v9++;
    --v8;
  }
  while (!v10);
  v11 = 255;
  v12 = v8;
  do
  {
    v13 = v17[v11];
    --v12;
    --v11;
  }
  while (!v13);
  if ((int)v4 >= 1)
  {
    v14 = 255.0 / (float)v12;
    v15 = v4;
    do
    {
      v16 = *v2++;
      *v3++ = (int)(float)(v14 * (float)(v8 + v16 - 256));
      --v15;
    }
    while (v15);
  }
}

double houghTransformGlobalAngle(uint64_t a1, unint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  int32x4_t v9;
  int64x2_t v10;
  float64x2_t v11;
  __double2 v12;
  float64x2_t v13;
  __double2 v14;
  __double2 v15;
  float64x2_t v16;
  float64x2_t v17;
  __double2 v18;
  float64x2_t v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  std::vector<int>::pointer begin;
  int v25;
  int v27;
  int v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  int *v43;
  uint64_t v44;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  double v58;
  double *v59;
  double *v60;
  double *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  double *v67;
  uint64_t v68;
  double *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  std::vector<int>::pointer v73;
  double *v74;
  unint64_t v75;
  double v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  double v80;
  float v81;
  float v82;
  uint64_t v83;
  double v84;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  uint64_t v90;
  float64x2_t v91;
  int32x4_t v92;
  std::vector<int>::value_type __x;
  std::vector<int> v94;
  void *v95;
  double *v96;
  double *v97;
  void *__p;
  char *v99;
  _QWORD v100[363];

  v8 = 0;
  v100[361] = *MEMORY[0x1E0C80C00];
  v9 = (int32x4_t)xmmword_1D513B9B0;
  v86 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
  v87 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  do
  {
    v92 = v9;
    v10.i64[0] = v9.i32[0];
    v10.i64[1] = v9.i32[1];
    v11 = vcvtq_f64_s64(v10);
    v10.i64[0] = v92.i32[2];
    v10.i64[1] = v92.i32[3];
    v91 = vdivq_f64(vmulq_f64(v11, v87), v86);
    v89 = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v10), v87), v86);
    v12 = __sincos_stret(v89.f64[1]);
    v14 = __sincos_stret(v89.f64[0]);
    v13.f64[0] = v14.__cosval;
    v13.f64[1] = v12.__cosval;
    v88 = v13;
    v15 = __sincos_stret(v91.f64[1]);
    v18 = __sincos_stret(v91.f64[0]);
    v17.f64[0] = v18.__cosval;
    v16.f64[0] = v18.__sinval;
    v17.f64[1] = v15.__cosval;
    *(float32x4_t *)&v100[v8 + 1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v17), v88);
    v19.f64[0] = v14.__sinval;
    v19.f64[1] = v12.__sinval;
    v16.f64[1] = v15.__sinval;
    *(float32x4_t *)&v100[v8 + 181] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v19);
    *(_QWORD *)&v17.f64[0] = 0x400000004;
    *(_QWORD *)&v17.f64[1] = 0x400000004;
    v9 = vaddq_s32(v92, (int32x4_t)v17);
    v8 += 2;
  }
  while (v8 != 180);
  v20 = (int)sqrt((double)(a2 * a2 + a3 * a3));
  __p = 0;
  v99 = 0;
  v100[0] = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  if (v20 >= 1)
  {
    __x = 0;
    std::vector<int>::vector(&v94, 360 * v20, &__x);
    if (a3 * a2)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        if (*(_BYTE *)(a1 + v21))
        {
          v23 = 0;
          begin = v94.__begin_;
          do
          {
            v25 = (int)(float)((float)(*((float *)&v100[181] + v23) * (float)(v21 / a2))
                             + (float)((float)(v21 % a2) * *((float *)&v100[1] + v23)));
            if (v25 >= 1 && v25 < v20)
            {
              v27 = v23 + 360 * v25;
              v28 = begin[v27];
              begin[v27] = v28 + 1;
              if (v28 + 1 > v22)
                v22 = v28 + 1;
            }
            ++v23;
          }
          while (v23 != 360);
        }
        ++v21;
      }
      while (v21 != a3 * a2);
    }
    else
    {
      v22 = 0;
    }
    if (v20 >= 10)
    {
      v29 = 0;
      v90 = (v20 - 9);
      v30 = (double)v22 * 0.5;
      v31 = 8;
      v32 = 4;
      do
      {
        for (i = 0; i != 360; ++i)
        {
          if ((int)i <= 4)
            v34 = 4;
          else
            v34 = i;
          v35 = v94.__begin_[360 * v32 + i];
          if (v30 < (double)(int)v35)
          {
            v36 = v34 - 4;
            v37 = v34 - 4;
            if (i >= 0x163)
              v38 = 355;
            else
              v38 = i;
            v39 = (v38 + 5);
            v40 = 1;
            v41 = v29;
            do
            {
              if (v41 <= v31)
                v42 = v31;
              else
                v42 = v41;
              v43 = &v94.__begin_[360 * v41];
              while (1)
              {
                v44 = v36;
                if (v37 < v39)
                  break;
LABEL_37:
                v43 += 360;
                if (v41++ == v42)
                {
                  if ((v40 & 1) != 0)
                  {
                    v47 = v99;
                    if ((unint64_t)v99 >= v100[0])
                    {
                      v49 = (char *)__p;
                      v50 = (v99 - (_BYTE *)__p) >> 3;
                      v51 = v50 + 1;
                      if ((unint64_t)(v50 + 1) >> 61)
                        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                      v52 = v100[0] - (_QWORD)__p;
                      if ((uint64_t)(v100[0] - (_QWORD)__p) >> 2 > v51)
                        v51 = v52 >> 2;
                      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
                        v53 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v53 = v51;
                      if (v53)
                      {
                        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v100, v53);
                        v49 = (char *)__p;
                        v47 = v99;
                      }
                      else
                      {
                        v54 = 0;
                      }
                      v55 = &v54[8 * v50];
                      *(_QWORD *)v55 = v35;
                      v48 = v55 + 8;
                      while (v47 != v49)
                      {
                        v56 = *((_QWORD *)v47 - 1);
                        v47 -= 8;
                        *((_QWORD *)v55 - 1) = v56;
                        v55 -= 8;
                      }
                      __p = v55;
                      v99 = v48;
                      v100[0] = &v54[8 * v53];
                      if (v49)
                        operator delete(v49);
                    }
                    else
                    {
                      *(_QWORD *)v99 = v35;
                      v48 = v47 + 8;
                    }
                    v99 = v48;
                    v57 = i - 180;
                    if (i < 0xB5)
                      v57 = i;
                    v58 = (float)v57;
                    v59 = v96;
                    if (v96 >= v97)
                    {
                      v61 = (double *)v95;
                      v62 = ((char *)v96 - (_BYTE *)v95) >> 3;
                      v63 = v62 + 1;
                      if ((unint64_t)(v62 + 1) >> 61)
                        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                      v64 = (char *)v97 - (_BYTE *)v95;
                      if (((char *)v97 - (_BYTE *)v95) >> 2 > v63)
                        v63 = v64 >> 2;
                      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                        v65 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v65 = v63;
                      if (v65)
                      {
                        v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v97, v65);
                        v61 = (double *)v95;
                        v59 = v96;
                      }
                      else
                      {
                        v66 = 0;
                      }
                      v67 = (double *)&v66[8 * v62];
                      *v67 = v58;
                      v60 = v67 + 1;
                      while (v59 != v61)
                      {
                        v68 = *((_QWORD *)v59-- - 1);
                        *((_QWORD *)v67-- - 1) = v68;
                      }
                      v95 = v67;
                      v96 = v60;
                      v97 = (double *)&v66[8 * v65];
                      if (v61)
                        operator delete(v61);
                    }
                    else
                    {
                      *v96 = v58;
                      v60 = v59 + 1;
                    }
                    v96 = v60;
                  }
                  goto LABEL_79;
                }
              }
              while (v43[v44] <= (int)v35)
              {
                if (++v44 >= v39)
                  goto LABEL_37;
              }
              v40 = 0;
            }
            while (v41++ < v32 + 4);
          }
LABEL_79:
          ;
        }
        ++v32;
        ++v29;
        ++v31;
      }
      while (v29 != v90);
    }
    if (v94.__begin_)
    {
      v94.__end_ = v94.__begin_;
      operator delete(v94.__begin_);
    }
  }
  std::vector<unsigned long>::vector(&v94, 0xB4uLL);
  v69 = (double *)v95;
  if (v96 == v95)
  {
    v83 = 0;
    v81 = 0.0;
    v82 = 0.0;
  }
  else
  {
    v70 = 0;
    v71 = ((char *)v96 - (_BYTE *)v95) >> 3;
    v72 = (uint64_t *)__p;
    v73 = v94.__begin_;
    if (v71 <= 1)
      v71 = 1;
    v74 = (double *)v95;
    v75 = v71;
    do
    {
      v76 = *v74++;
      *(_QWORD *)&v73[2 * (unint64_t)v76] += *v72;
      v77 = *v72++;
      v70 += v77;
      --v75;
    }
    while (v75);
    v78 = 0;
    v79 = 0;
    do
    {
      v80 = v69[v75];
      if (v79 <= *(_QWORD *)&v73[2 * (unint64_t)v80])
      {
        v79 = *(_QWORD *)&v73[2 * (unint64_t)v80];
        v78 = v75;
      }
      ++v75;
    }
    while (v71 != v75);
    v81 = (float)v70;
    v82 = (float)v79;
    v83 = v78;
  }
  v84 = -1000.0;
  if (v99 != __p && (float)(v81 * a4) <= v82)
    v84 = v69[v83];
  if (v94.__begin_)
  {
    v94.__end_ = v94.__begin_;
    operator delete(v94.__begin_);
  }
  if (v95)
  {
    v96 = (double *)v95;
    operator delete(v95);
  }
  if (__p)
  {
    v99 = (char *)__p;
    operator delete(__p);
  }
  return v84;
}

void sub_1D50F9624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

uint64_t otsuThreshold(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int32x4_t v10;
  float v11;
  int32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  float v17;
  float v18;
  int v19;
  unint64_t v20;
  float v21;
  _DWORD v22[256];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  bzero(v22, 0x400uLL);
  v6 = a3 * a2;
  if (a3 * a2)
  {
    v7 = a3 * a2;
    do
    {
      v8 = *a1++;
      ++v22[v8];
      --v7;
    }
    while (v7);
  }
  v9 = 0;
  v10 = (int32x4_t)xmmword_1D513B9B0;
  v11 = 0.0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  do
  {
    v13 = vcvtq_f32_s32(vmulq_s32(*(int32x4_t *)&v22[v9], v10));
    v11 = (float)((float)((float)(v11 + v13.f32[0]) + v13.f32[1]) + v13.f32[2]) + v13.f32[3];
    v10 = vaddq_s32(v10, v12);
    v9 += 4;
  }
  while (v9 != 256);
  v14 = 0;
  result = 0;
  v16 = 0;
  v17 = 0.0;
  v18 = 0.0;
  do
  {
    v19 = v22[v14];
    v16 += v19;
    if (v16)
    {
      if (v6 == v16)
        return result;
      v20 = v6 - v16;
      v18 = v18 + (float)(v19 * v14);
      v21 = (float)(v18 / (float)v16) - (float)((float)(v11 - v18) / (float)v20);
      if ((float)(v21 * (float)((float)((float)v16 * (float)v20) * v21)) <= v17)
      {
        result = result;
      }
      else
      {
        v17 = v21 * (float)((float)((float)v16 * (float)v20) * v21);
        result = v14;
      }
    }
    ++v14;
  }
  while (v14 != 256);
  return result;
}

unint64_t generateIntegralImage(unint64_t result, _QWORD *a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  unsigned __int8 *v15;
  int v16;

  v2 = *(unsigned __int8 **)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = *(_QWORD *)result;
  v5 = (_DWORD *)*a2;
  v6 = **(unsigned __int8 **)result;
  *(_DWORD *)*a2 = v6;
  if ((int)v2 >= 2)
  {
    v7 = v2 - 1;
    v8 = v5 + 1;
    v9 = (unsigned __int8 *)(v4 + 1);
    do
    {
      v10 = *v9++;
      v6 += v10;
      *v8++ = v6;
      --v7;
    }
    while (v7);
  }
  if (v3 >= 2)
  {
    v11 = 1;
    v12 = (int)v2;
    do
    {
      if ((int)v2 >= 1)
      {
        v13 = 0;
        v14 = &v5[v12];
        v15 = (unsigned __int8 *)(v4 + v12);
        v12 += (int)v2;
        LODWORD(result) = (_DWORD)v2;
        do
        {
          v16 = *v15++;
          v13 += v16;
          *v14 = v13 + v14[-(int)v2];
          ++v14;
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
      ++v11;
    }
    while (v11 != v3);
  }
  return result;
}

int32x4_t *generateIntegralImage_NEON(int32x4_t *result, const vImage_Buffer *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char *data;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  uint16x8_t v25;
  int32x4_t v26;

  v2 = result[1].i64[0];
  v3 = result->i32[2];
  v4 = result->i64[0];
  data = (char *)a2->data;
  v6 = *(unsigned __int8 *)result->i64[0];
  *(_DWORD *)a2->data = v6;
  if ((int)v2 >= 2)
  {
    v7 = v2 - 1;
    v8 = data + 4;
    v9 = (unsigned __int8 *)(v4 + 1);
    do
    {
      v10 = *v9++;
      v6 += v10;
      *v8++ = v6;
      --v7;
    }
    while (v7);
  }
  if (v3 >= 2)
  {
    v11 = data + 16;
    v12 = 1;
    v13 = v2;
    do
    {
      if ((int)v2 >= 1)
      {
        v14 = 0;
        v15 = 0uLL;
        v16 = (int32x4_t *)&v11[4 * v13];
        do
        {
          v17 = *(int8x8_t *)(v4 + v13 + v14);
          v18 = vext_s8(*(int8x8_t *)v15.i8, v17, 7uLL);
          v18.i8[0] = 0;
          v19 = vext_s8(*(int8x8_t *)v15.i8, v18, 7uLL);
          v19.i8[0] = 0;
          v20 = vext_s8(*(int8x8_t *)v15.i8, v19, 7uLL);
          v20.i8[0] = 0;
          v21 = vext_s8(*(int8x8_t *)v15.i8, v20, 7uLL);
          v21.i8[0] = 0;
          v22 = vext_s8(*(int8x8_t *)v15.i8, v21, 7uLL);
          v22.i8[0] = 0;
          v23 = vext_s8(*(int8x8_t *)v15.i8, v22, 7uLL);
          v23.i8[0] = 0;
          v24 = (uint8x8_t)vext_s8(*(int8x8_t *)v15.i8, v23, 7uLL);
          v24.i8[0] = 0;
          v25 = vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v18, (uint8x8_t)v17), (uint8x8_t)v19), (uint8x8_t)v20), (uint8x8_t)v21), (uint8x8_t)v22), (uint8x8_t)v23), v24);
          result = (int32x4_t *)((char *)v16 - 4 * (int)v2);
          v26 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v25);
          v16[-1] = (int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32(result[-1], v15), *(uint16x4_t *)v25.i8);
          *v16 = vaddq_s32(v26, *result);
          v16 += 2;
          v15 = vdupq_laneq_s32(v26, 3);
          v14 += 8;
        }
        while ((int)v14 < (int)v2);
        v13 += v14;
      }
      ++v12;
    }
    while (v12 != v3);
  }
  return result;
}

void adaptiveThresholdIntegralImage(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v4;
  void *v9;
  vImagePixelCount v10;
  vImagePixelCount v11;
  size_t v12;
  __int128 v13;
  __int128 v14;
  vImage_Buffer v15;
  _OWORD v16[2];
  _OWORD v17[2];
  vImage_Buffer v18;
  vImage_Buffer v19;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) * v4)
  {
    v9 = malloc_type_malloc(4 * v4 * *(_QWORD *)(a1 + 24), 0x100004052888210uLL);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    v19.data = v9;
    v19.height = v10;
    v12 = 4 * *(_QWORD *)(a1 + 24);
    v19.width = v11;
    v19.rowBytes = v12;
    v13 = *(_OWORD *)(a1 + 16);
    if ((v11 & 7) != 0)
    {
      v17[0] = *(_OWORD *)a1;
      v17[1] = v13;
      generateIntegralImage((unint64_t)v17, &v19);
    }
    else
    {
      *(_OWORD *)&v18.data = *(_OWORD *)a1;
      *(_OWORD *)&v18.width = v13;
      generateIntegralImage_NEON((int32x4_t *)&v18, &v19);
    }
    v14 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v14;
    v15 = v19;
    adaptiveThresholdIntegralImageWithBuffer((uint64_t)v16, a2, (uint64_t *)&v15, a3, a4, *(int32x4_t *)&v19.data, *(int32x4_t *)&v19.width);
    free(v9);
  }
}

uint64_t adaptiveThresholdIntegralImageWithBuffer(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int a5, int32x4_t a6, int32x4_t a7)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int8x16_t v33;
  unsigned int v34;
  int32x4_t *v35;
  uint64_t v36;
  int32x4_t *v37;
  int16x8_t v38;
  int32x4_t *v39;
  int32x4_t *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  int8x8_t *v44;
  unint64_t v45;
  uint8x8_t *v46;
  uint8x8_t v47;
  uint16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t i;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint16x8_t v68;
  unint64_t v69;
  uint16x4_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  int v79;
  _QWORD v80[2];
  uint64_t (*v81)(uint64_t, int, int);
  void *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;

  v7 = *(_QWORD *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v11 = result;
    v12 = *(_QWORD *)result;
    v13 = *a2;
    v14 = *a3;
    v80[0] = MEMORY[0x1E0C809B0];
    a6.i32[1] = 0;
    v80[1] = 3221225472;
    v81 = __adaptiveThresholdIntegralImageWithBuffer_block_invoke;
    v82 = &__block_descriptor_80_e11_v16__0i8i12l;
    v83 = v8;
    v84 = v7;
    v65 = v14;
    v66 = v13;
    v85 = v14;
    v86 = v12;
    v67 = v12;
    v88 = a4;
    v89 = a5;
    LOBYTE(v15) = v8;
    v87 = v13;
    v79 = a4;
    if (a4 >= 1)
    {
      v16 = 0;
      do
      {
        v17 = 0;
        do
          result = v81((uint64_t)v80, v17++, v16);
        while (v8 != v17);
        v16 = (v16 + 1);
        a4 = v79;
      }
      while ((_DWORD)v16 != v79);
      v15 = *(_QWORD *)(v11 + 16);
    }
    v18 = 4 * a4 * a4;
    v9 = (v15 & 7) == 0;
    v64 = v7;
    v19 = v7 - a4;
    if (v9)
    {
      v78 = v7 - a4;
      if (v19 > a4)
      {
        a6.i32[0] = 0;
        v31 = v79;
        v32 = (((_BYTE)v8 - (_BYTE)v79) & 7) + v79;
        a7.i32[0] = 4 * a4 * a4;
        v70 = *(uint16x4_t *)a7.i8;
        a7.i32[0] = a5;
        v33 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a7, a6), 0);
        if (a5 > 0)
          v34 = a5;
        else
          v34 = -a5;
        v35 = (int32x4_t *)(v65 + 4 * (((_BYTE)v8 - (_BYTE)v79) & 7));
        v36 = v65 + 4 * v8 * 2 * v79;
        v37 = (int32x4_t *)(v36 + 4 * (((_BYTE)v8 - (_BYTE)v79) & 7));
        v38 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v34));
        v68 = (uint16x8_t)vbslq_s8(v33, (int8x16_t)v38, (int8x16_t)vnegq_s16(v38));
        v39 = (int32x4_t *)(v65 + 4 * (v32 + v79));
        v40 = (int32x4_t *)(v36 + 4 * (v32 + v79));
        v41 = v32 + v8 * v79;
        v42 = v32;
        v73 = (int)v8 - v32;
        v75 = v8 - v32;
        v71 = 2 * v32;
        do
        {
          if (v32 >= 1)
          {
            v43 = 0;
            do
            {
              result = v81((uint64_t)v80, v43, v31);
              v43 = (v43 + 1);
            }
            while (v32 != (_DWORD)v43);
          }
          if (v75 > v42)
          {
            v44 = (int8x8_t *)(v66 + v41);
            v45 = v42;
            v46 = (uint8x8_t *)(v67 + v41);
            do
            {
              v47 = *v46++;
              v48 = vaddw_u8(v68, v47);
              v49 = *v39;
              v50 = v39[1];
              v39 += 2;
              v51 = *v37;
              v52 = v37[1];
              v37 += 2;
              v53 = vaddq_s32(v49, v51);
              v54 = *v40;
              v55 = v40[1];
              v40 += 2;
              v56 = vsubq_s32(v54, v53);
              v57 = *v35;
              v58 = v35[1];
              v35 += 2;
              *v44++ = vmovn_s16((int16x8_t)vuzp1q_s8((int8x16_t)vcgtq_u32(vmull_lane_u16(*(uint16x4_t *)v48.i8, v70, 0), (uint32x4_t)vaddq_s32(v56, v57)), (int8x16_t)vcgtq_u32(vmull_high_lane_u16(v48, v70, 0), (uint32x4_t)vaddq_s32(vsubq_s32(v55, vaddq_s32(v50, v52)), v58))));
              v45 += 8;
              v41 += 8;
            }
            while (v75 > v45);
          }
          if (v8 > v73)
          {
            v59 = v8 - v73;
            v60 = (v8 - v32);
            do
            {
              result = v81((uint64_t)v80, v60, v31);
              v60 = (v60 + 1);
              --v59;
            }
            while (v59);
          }
          v40 = (int32x4_t *)((char *)v40 + 4 * v71);
          v39 = (int32x4_t *)((char *)v39 + 4 * v71);
          v37 = (int32x4_t *)((char *)v37 + 4 * v71);
          ++v31;
          v41 += v71;
          v35 = (int32x4_t *)((char *)v35 + 4 * v71);
          v42 = v32;
        }
        while (v31 != v78);
      }
    }
    else
    {
      v72 = v7 - a4;
      if (v19 > a4)
      {
        v20 = 0;
        v21 = 2 * v79;
        v22 = v79;
        v23 = v79 + v79 * v8;
        v69 = (int)v8 - v79;
        v24 = 2 * v79 * v8;
        v76 = 2 * v79;
        v74 = v24;
        do
        {
          v77 = v20;
          if (v79 >= 1)
          {
            v25 = 0;
            do
            {
              result = v81((uint64_t)v80, v25, v22);
              v25 = (v25 + 1);
            }
            while (v79 != (_DWORD)v25);
          }
          v26 = v74 + v76;
          if (v8 - v79 <= v79)
          {
            v74 += v76;
          }
          else
          {
            v27 = 0;
            do
            {
              result = *(unsigned int *)(v65 + 4 * v77 + 4 * v27);
              if ((*(unsigned __int8 *)(v67 + v23 + v27) + a5) * v18 < *(_DWORD *)(v65 + 4 * v26 + 4 * v27)
                                                                      - (*(_DWORD *)(v65 + 4 * v21 + 4 * v27)
                                                                       + *(_DWORD *)(v65 + 4 * v24 + 4 * v27))
                                                                      + (int)result)
                v28 = 0;
              else
                v28 = -1;
              *(_BYTE *)(v66 + v23 + v27++) = v28;
            }
            while (v8 - 2 * v79 != v27);
            v77 += v27;
            v24 += v27;
            v21 += v27;
            v74 = v26 + v27;
            v23 += v27;
          }
          if (v8 > v69)
          {
            v29 = v8 - v69;
            v30 = (v8 - v79);
            do
            {
              result = v81((uint64_t)v80, v30, v22);
              v30 = (v30 + 1);
              --v29;
            }
            while (v29);
          }
          v21 += v76;
          v24 += v76;
          v20 = v77 + v76;
          ++v22;
          v23 += v76;
        }
        while (v22 != v72);
      }
    }
    if (v64 > (int)v64 - v79)
    {
      v61 = (int)v64 - v79;
      if (v8 <= 1)
        v62 = 1;
      else
        v62 = v8;
      do
      {
        for (i = 0; i != v62; ++i)
          result = v81((uint64_t)v80, i, v61);
        ++v61;
      }
      while (v64 > v61);
    }
  }
  return result;
}

void adaptiveThresholdIntegralImageWithFiltering(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  void *v12;
  vImagePixelCount v13;
  vImagePixelCount v14;
  size_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  vImage_Buffer v28;
  _OWORD v29[2];
  _OWORD v30[2];
  vImage_Buffer v31;
  vImage_Buffer v32;

  v12 = malloc_type_calloc(*(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 8), 4uLL, 0x100004052888210uLL);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v32.data = v12;
  v32.height = v13;
  v15 = 4 * *(_QWORD *)(a1 + 24);
  v32.width = v14;
  v32.rowBytes = v15;
  v16 = *(_OWORD *)(a1 + 16);
  if ((v14 & 7) != 0)
  {
    v30[0] = *(_OWORD *)a1;
    v30[1] = v16;
    generateIntegralImage((unint64_t)v30, &v32);
  }
  else
  {
    *(_OWORD *)&v31.data = *(_OWORD *)a1;
    *(_OWORD *)&v31.width = v16;
    generateIntegralImage_NEON((int32x4_t *)&v31, &v32);
  }
  v17 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  v29[1] = v17;
  v28 = v32;
  adaptiveThresholdIntegralImageWithBuffer((uint64_t)v29, (uint64_t *)a2, (uint64_t *)&v28, a3, a4, *(int32x4_t *)&v32.data, *(int32x4_t *)&v32.width);
  if (a5)
  {
    v18 = *(_OWORD *)(a2 + 16);
    v27[0] = *(_OWORD *)a2;
    v27[1] = v18;
    generateIntegralImage((unint64_t)v27, &v32);
    v19 = *(_QWORD *)(a2 + 8);
    if (v19 - a5 > (unint64_t)a5)
    {
      v20 = 0;
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)a2 + a5;
      v23 = 2 * a5;
      v24 = a5;
      do
      {
        if (v21 - a5 > (unint64_t)a5)
        {
          v25 = 0;
          do
          {
            v26 = v22 + v24 * v21;
            if (*(_BYTE *)(v26 + v25)
              && (*((_DWORD *)v12 + 2 * a5 + v25 + v23 * v21)
                - (*((_DWORD *)v12 + 2 * a5 + v25 + v20 * v21)
                 + *((_DWORD *)v12 + v25 + v23 * v21))
                + *((_DWORD *)v12 + v25 + v20 * v21))
               / 255 < a6)
            {
              *(_BYTE *)(v26 + v25) = 0;
              v21 = *(_QWORD *)(a2 + 16);
            }
            ++v25;
          }
          while (v21 - a5 > (unint64_t)(a5 + v25));
          v19 = *(_QWORD *)(a2 + 8);
        }
        ++v24;
        ++v20;
        ++v23;
      }
      while (v19 - a5 > v24);
    }
  }
  free(v12);
}

uint64_t __adaptiveThresholdIntegralImageWithBuffer_block_invoke(uint64_t result, int a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(result + 40);
  v5 = v3 * a3 + a2;
  v6 = *(_DWORD *)(result + 72);
  v7 = a2 - v6;
  v8 = v6 + a2;
  v9 = a3 - v6;
  v10 = v6 + a3;
  v11 = v7 & ~(v7 >> 31);
  if (v3 <= v8)
    v8 = v3 - 1;
  v12 = v9 & ~(v9 >> 31);
  if (v4 <= v10)
    v13 = v4 - 1;
  else
    v13 = v10;
  v14 = (v8 - v11) * (v13 - v12);
  v15 = v3 * v13;
  v16 = v3 * v12;
  v17 = *(_QWORD *)(result + 48);
  if (v14 * (*(_DWORD *)(result + 76) + *(unsigned __int8 *)(*(_QWORD *)(result + 56) + v5)) > *(_DWORD *)(v17 + 4 * v15 + 4 * v8)
                                                                                              - *(_DWORD *)(v17 + 4 * v15 + 4 * v11)
                                                                                              - *(_DWORD *)(v17 + 4 * v16 + 4 * v8)
                                                                                              + *(_DWORD *)(v17 + 4 * v16 + 4 * v11))
    *(_BYTE *)(*(_QWORD *)(result + 64) + v5) = -1;
  return result;
}

float find_homography(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  _BYTE *v7;
  float64x2_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  float v13;
  _BYTE v15[640];
  double v16;
  uint64_t v17;

  v1 = (float64x2_t *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = 0;
  v17 = *MEMORY[0x1E0C80C00];
  v6 = (double *)(v5 + 8);
  do
  {
    v7 = &v15[v4];
    *(_OWORD *)v7 = 0uLL;
    *((_QWORD *)v7 + 2) = 0;
    v8 = *v1++;
    *(float64x2_t *)(v7 + 24) = vnegq_f64(v8);
    *((_QWORD *)v7 + 5) = 0xBFF0000000000000;
    v9 = *v6;
    *((float64x2_t *)v7 + 3) = vmulq_n_f64(v8, *v6);
    *((double *)v7 + 8) = v9;
    *(float64x2_t *)(v7 + 72) = v8;
    *(_OWORD *)(v7 + 88) = xmmword_1D513A880;
    *(_OWORD *)(v7 + 104) = 0uLL;
    v10 = -*(v6 - 1);
    *(float64x2_t *)(v7 + 120) = vmulq_n_f64(v8, v10);
    *((double *)v7 + 17) = v10;
    v4 += 144;
    v6 += 2;
  }
  while (v4 != 576);
  dgeqrf_NEWLAPACK();
  dorgqr_NEWLAPACK();
  v11 = 0;
  v12 = 1.0 / v16;
  do
  {
    v13 = v12 * *(double *)&v15[8 * v11 + 576];
    *(float *)(v3 + 4 * v11++) = v13;
  }
  while (v11 != 9);
  return *(float *)&v12;
}

uint64_t writeCGImageToPNG(CGImage *a1, void *a2)
{
  return writeCGImageWithMetadata(a1, a2, 0);
}

uint64_t writeCGImageWithMetadata(CGImage *a1, void *a2, const __CFDictionary *a3)
{
  const __CFURL *v6;
  const __CFURL *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  CGImageDestination *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a2, "isAbsolutePath"))
  {
    v6 = (const __CFURL *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a2);
  }
  else
  {
    v14 = 0;
    v6 = (const __CFURL *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 9, 1, 0, 1, &v14), "URLByAppendingPathComponent:", CFSTR("CRImages")), "URLByAppendingPathComponent:", a2);
  }
  v7 = v6;
  v8 = (void *)-[__CFURL URLByDeletingLastPathComponent](v6, "URLByDeletingLastPathComponent");
  v14 = 0;
  if ((objc_msgSend(v8, "checkResourceIsReachableAndReturnError:", &v14) & 1) == 0)
  {
    v15 = *MEMORY[0x1E0CB2AA8];
    v16[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 493);
    v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v8, 1, v9, &v14);
  }
  v10 = (void *)objc_msgSend((id)objc_msgSend(a2, "pathExtension"), "uppercaseString");
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("JPG")) & 1) != 0
    || objc_msgSend(v10, "isEqualToString:", CFSTR("JPEG")))
  {
    v11 = (void *)*MEMORY[0x1E0CEC530];
  }
  else if (objc_msgSend(v10, "isEqualToString:", CFSTR("PNG")))
  {
    v11 = (void *)*MEMORY[0x1E0CEC580];
  }
  else
  {
    v11 = (void *)*MEMORY[0x1E0CEC600];
  }
  v12 = CGImageDestinationCreateWithURL(v7, (CFStringRef)objc_msgSend(v11, "identifier"), 1uLL, 0);
  CGImageDestinationAddImage(v12, a1, a3);
  CGImageDestinationFinalize(v12);
  CFRelease(v12);
  return -[__CFDictionary writeToFile:atomically:](a3, "writeToFile:atomically:", objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)-[__CFURL path](v7, "path"), "stringByDeletingPathExtension"), "stringByAppendingString:", CFSTR("-meta")), "stringByAppendingPathExtension:", CFSTR("plist")), 1);
}

void sub_1D50FA580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    NSLog(CFSTR("Exception: %@"));
    objc_end_catch();
    JUMPOUT(0x1D50FA54CLL);
  }
  _Unwind_Resume(exception_object);
}

void writeCGImage(CGImage *a1, void *a2)
{
  const __CFURL *v3;
  CGImageDestination *v4;

  if (a1)
  {
    v3 = (const __CFURL *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", objc_msgSend(-[NSArray objectAtIndex:](NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1), "objectAtIndex:", 0), "stringByAppendingPathComponent:", objc_msgSend(a2, "lastPathComponent")));
    v4 = CGImageDestinationCreateWithURL(v3, (CFStringRef)objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier"), 1uLL, 0);
    CGImageDestinationAddImage(v4, a1, 0);
    CGImageDestinationFinalize(v4);
    CFRelease(v4);
  }
  else
  {
    NSLog(CFSTR("No image available"));
  }
}

void writeBuffer(_OWORD *a1, void *a2)
{
  __int128 v2;
  _OWORD v3[2];

  v2 = a1[1];
  v3[0] = *a1;
  v3[1] = v2;
  writeBufferWithMetadata((uint64_t)v3, a2, 0);
}

void writeBufferWithMetadata(uint64_t a1, void *a2, const __CFDictionary *a3)
{
  CGColorSpace *DeviceGray;
  CGContext *v7;
  CGImage *Image;

  DeviceGray = CGColorSpaceCreateDeviceGray();
  v7 = CGBitmapContextCreate(*(void **)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), 8uLL, *(_QWORD *)(a1 + 24), DeviceGray, 0);
  Image = CGBitmapContextCreateImage(v7);
  writeCGImageWithMetadata(Image, a2, a3);
  CGColorSpaceRelease(DeviceGray);
  CGContextRelease(v7);
  CGImageRelease(Image);
}

void writeBufferWithFullColor(opaqueCMSampleBuffer *a1, void *a2, const __CFDictionary *a3)
{
  CVImageBufferRef ImageBuffer;
  CFDictionaryRef v7;
  void *v8;
  void *v9;
  CGImage *v10;

  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  v7 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 1u);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9DDC8]), "initWithCVPixelBuffer:options:", ImageBuffer, v7);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C9DD90], "contextWithOptions:", 0);
  objc_msgSend(v8, "extent");
  v10 = (CGImage *)objc_msgSend(v9, "createCGImage:fromRect:", v8);
  writeCGImageWithMetadata(v10, a2, a3);

  CFRelease(v7);
  CGImageRelease(v10);
}

void writeRawBuffer(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a1, a2);
  if ((objc_msgSend(a3, "isAbsolutePath") & 1) == 0)
    a3 = (void *)objc_msgSend((id)objc_msgSend(-[NSArray objectAtIndex:](NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1), "objectAtIndex:", 0), "stringByAppendingPathComponent:", CFSTR("CRImages")), "stringByAppendingPathComponent:", objc_msgSend(a3, "lastPathComponent"));
  objc_msgSend(v4, "writeToFile:atomically:", a3, 1);

}

uint64_t applyHomograpyMatrix(uint64_t result, _BYTE **a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int32x2_t v10;
  const float *v11;
  float32x2_t v12;
  float v13;
  const float *v14;
  float32x2_t v15;
  const float *v16;
  float32x2_t v17;
  float v18;
  const float *v19;
  float32x2_t v20;
  const float *v21;
  float32x2_t v22;
  float v23;
  const float *v24;
  float32x2_t v25;
  int v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  float v31;
  _BYTE *v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int32x2_t v37;
  int32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int32x2_t v48;
  _BYTE *v49;

  v11 = (const float *)a3;
  v12 = vld1_dup_f32(v11++);
  v13 = *v11;
  v14 = (const float *)(a3 + 8);
  v15 = vld1_dup_f32(v14);
  v16 = (const float *)(a3 + 12);
  v17 = vld1_dup_f32(v16);
  v18 = *(float *)(a3 + 16);
  v19 = (const float *)(a3 + 20);
  v20 = vld1_dup_f32(v19);
  v21 = (const float *)(a3 + 24);
  v22 = vld1_dup_f32(v21);
  v23 = *(float *)(a3 + 28);
  v24 = (const float *)(a3 + 32);
  v25 = vld1_dup_f32(v24);
  v26 = (int)(a5 + a7);
  v27 = *(_DWORD *)(result + 16);
  v28 = *(_BYTE **)result;
  v29 = *(_QWORD *)(result + 8);
  **(_BYTE **)result = 0;
  v30 = (float)(int)a5;
  v31 = (float)v26;
  if (v30 < (float)v26)
  {
    v32 = *a2;
    v33 = (int)(a4 + a6);
    v34 = (int)a4;
    v35 = (float)(int)a4;
    v36 = (float)v33;
    v37 = vdup_n_s32(v27);
    v38 = vdup_n_s32(v29);
    do
    {
      if (v35 >= v36)
      {
        v49 = v32;
      }
      else
      {
        v7.f32[0] = v13 * v30;
        v7 = (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0);
        v8.f32[0] = v23 * v30;
        v8 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
        v9.f32[0] = v18 * v30;
        v9 = (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0);
        *(float *)v10.i32 = (float)v34;
        do
        {
          v39 = vadd_f32((float32x2_t)vdup_lane_s32(v10, 0), (float32x2_t)0x3F80000000000000);
          v40 = vadd_f32(v25, vadd_f32(v8, vmul_f32(v22, v39)));
          v41 = vrecpe_f32(v40);
          v42 = vmul_f32(v41, vrecps_f32(v40, v41));
          v43 = vmul_f32(vrecps_f32(v40, v42), v42);
          v44 = vcvt_s32_f32(vadd_f32(vmul_f32(v43, vadd_f32(v15, vadd_f32(v7, vmul_f32(v12, v39)))), (float32x2_t)0x3F0000003F000000));
          v45 = vcvt_s32_f32(vadd_f32(vmul_f32(v43, vadd_f32(v20, vadd_f32(v9, vmul_f32(v17, v39)))), (float32x2_t)0x3F0000003F000000));
          v46 = vand_s8(vand_s8((int8x8_t)vcgt_s32(v38, v45), (int8x8_t)vcgt_s32(v37, v44)), (int8x8_t)vcgt_s32((int32x2_t)vorr_s8((int8x8_t)v45, (int8x8_t)v44), (int32x2_t)-1));
          v47 = vand_s8((int8x8_t)v44, v46);
          v48 = vmul_s32((int32x2_t)vand_s8((int8x8_t)v45, v46), v37);
          *v32 = v28[v48.i32[0] + v47.i32[0]];
          v49 = v32 + 2;
          v32[1] = v28[v48.i32[1] + v47.i32[1]];
          *(float *)v10.i32 = *(float *)v10.i32 + 2.0;
          v32 += 2;
        }
        while (*(float *)v10.i32 < v36);
      }
      v30 = v30 + 1.0;
      v32 = v49;
    }
    while (v30 < v31);
  }
  return result;
}

void InstantLogPrinter::InstantLogPrinter(InstantLogPrinter *this, __sFILE *a2)
{
  *(_QWORD *)this = a2;
}

{
  *(_QWORD *)this = a2;
}

uint64_t InstantLogPrinter::print(FILE **this, const char *a2, va_list a3)
{
  return vfprintf(*this, a2, a3);
}

void *CRLogger::getCRLogger(CRLogger *this)
{
  unsigned __int8 v1;

  {
    CRLogger::CRLogger((CRLogger *)&CRLogger::getCRLogger(void)::loggerSingleton);
  }
  return &CRLogger::getCRLogger(void)::loggerSingleton;
}

void sub_1D50FAAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CRLogger::CRLogger(CRLogger *this)
{
  uint64_t *v2;
  void *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  int v9;
  char *v10;
  uint64_t v11;
  void *v12;
  int v13;
  char *v14;
  const char *v15;
  FILE *v16;
  _QWORD *v17;
  uint64_t v18;

  *((_QWORD *)this + 1) = 0;
  v2 = (uint64_t *)((char *)this + 8);
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = getenv("DEBUG_PRINT_DETECTION_MAPS");
  if (v4 && *v4 == 49)
    *v2 |= 1uLL;
  v5 = getenv("DEBUG_PRINT_DETECTION_NMS");
  if (v5 && *v5 == 49)
    *v2 |= 2uLL;
  v6 = getenv("DEBUG_PRINT_RECOGNIZER_RECTIFIED_INPUT");
  if (v6 && *v6 == 49)
    *v2 |= 4uLL;
  v7 = getenv("DEBUG_FORM_FIELD_DETECTION");
  if (v7 && *v7 == 49
    || (objc_msgSend(v3, "objectForKey:", CFSTR("com.apple.CoreRecognition.debug_form_field_detection")),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v8, "BOOLValue"),
        v8,
        v9))
  {
    *v2 |= 8uLL;
  }
  v10 = getenv("DEBUG_DATA_DETECTION");
  if (v10 && *v10 == 49)
  {
    v11 = *v2;
  }
  else
  {
    objc_msgSend(v3, "objectForKey:", CFSTR("com.apple.CoreRecognition.debug_data_detection"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "BOOLValue");

    v11 = *v2;
    if (!v13)
    {
      if (!v11)
        goto LABEL_24;
      goto LABEL_20;
    }
  }
  *v2 = v11 | 0x10;
LABEL_20:
  *(_BYTE *)this = 1;
  v14 = getenv("CR_LOG_DESTINATION_FILE");
  if (v14)
  {
    v15 = v14;
    v16 = fopen(v14, "a+");
    *((_QWORD *)this + 2) = v16;
    if (!v16)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Cannot open specified log file %s.\nAll logging is turned off.\n", v15);
      *(_BYTE *)this = 0;
      goto LABEL_28;
    }
    *((_BYTE *)this + 24) = 1;
  }
  else
  {
    *((_QWORD *)this + 2) = *MEMORY[0x1E0C80C10];
  }
LABEL_24:
  if (*(_BYTE *)this)
  {
    v17 = (_QWORD *)operator new();
    *v17 = *((_QWORD *)this + 2);
    v18 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v17;
    if (v18)
      MEMORY[0x1D826E294](v18, 0x20C4093837F09);
  }
LABEL_28:

}

void sub_1D50FAD48(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v4)
    MEMORY[0x1D826E294](v4, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void CRLogger::~CRLogger(CRLogger *this)
{
  FILE **v2;
  uint64_t v3;

  v2 = (FILE **)*((_QWORD *)this + 4);
  if (v2)
    fflush(*v2);
  if (*((_BYTE *)this + 24))
    fclose(*((FILE **)this + 2));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    MEMORY[0x1D826E294](v3, 0x20C4093837F09);
}

BOOL CRLogger::isLoggingTypeEnabled(uint64_t a1, unsigned int a2)
{
  return *(_BYTE *)a1 && (*(_QWORD *)(a1 + 8) & a2) != 0;
}

uint64_t CRLogger::log(uint64_t result, unsigned int a2, char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (*(_BYTE *)result)
  {
    if ((*(_QWORD *)(result + 8) & a2) != 0)
      return vfprintf(**(FILE ***)(result + 32), a3, va);
  }
  return result;
}

void sub_1D50FB198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D50FC064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FC524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FC9A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FCD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FD0DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FD694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50FD7E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FD9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50FDAF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FDBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D50FDCBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FDF10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FDF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FE128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FE33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D50FE57C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FE698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FE878(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D50FEAB8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D50FECA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50FEE70(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D50FF1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FF2D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FF644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D50FF86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50FF918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FFA38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50FFF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  void *v54;

  cv::SmartPtr::release((cv::SmartPtr *)&a54);

  _Unwind_Resume(a1);
}

void sub_1D510053C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1D5100848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5100D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D5100E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5100E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5100F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRImage;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D5101024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5101374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5101608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5101708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5101CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5101D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D51020B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  const void *v13;
  va_list va;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, const void *);
  applesauce::CF::ObjectRef<CGContext *>::~ObjectRef((const void **)va);
  applesauce::CF::ObjectRef<CGColorSpace *>::~ObjectRef((const void **)va1);

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CTFrame const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<__CTFramesetter const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<CGColor *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<CGImage *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<CGContext *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<CGColorSpace *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1D5102574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D5102668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D510280C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5102938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5102C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id createPixelBufferCLAPDictionaryFromRect(CGSize a1, CGRect a2)
{
  double height;
  double width;
  double y;
  double x;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  _QWORD v15[5];

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  v6 = a1.height;
  v7 = a1.width;
  v15[4] = *MEMORY[0x1E0C80C00];
  v14[0] = *MEMORY[0x1E0CA8D60];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2.size.width);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v8;
  v14[1] = *MEMORY[0x1E0CA8D40];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", height);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = v9;
  v14[2] = *MEMORY[0x1E0CA8D48];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", x + width * 0.5 - v7 * 0.5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15[2] = v10;
  v14[3] = *MEMORY[0x1E0CA8D58];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", y + height * 0.5 - v6 * 0.5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[3] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1D5102DE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D510311C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D510338C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D51035A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D51037E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5103880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D51038EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5103970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5103A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5103A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5103B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5103B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5103C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5103CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5103D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRImage_PixelBuffer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D5103F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D51040EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::ObjectRef<CGColorSpace *>::from_create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGContext *>::from_create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGColor *>::from_create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGPath *>::from_create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<__CTFramesetter const*>::from_create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<__CTFrame const*>::from_create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t applesauce::CF::ObjectRef<CGImage *>::from_create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_1D51042A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5104388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D51048EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D5104B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)CRCTCCVNLPTextDecoder;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D5104BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5104C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5104CF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D510543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CoreRecognition::decoder::ActivationMatrix::~ActivationMatrix(CoreRecognition::decoder::ActivationMatrix *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

void sub_1D51056B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5105C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v15;

  v15 = (void *)STACK[0x4A8];
  if (STACK[0x4A8])
  {
    STACK[0x4B0] = (unint64_t)v15;
    operator delete(v15);
  }

  _Unwind_Resume(a1);
}

void sub_1D5106330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5106740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1D5106854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D510696C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5107068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  void *v15;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<int>>,void *>>>::operator()[abi:ne180100](1, v12);
  std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::~__hash_table(v11);
  v14 = 0;
  while (1)
  {
    v15 = *(void **)(&a10 + v14 + 72);
    if (v15)
    {
      *(_QWORD *)(&a10 + v14 + 80) = v15;
      operator delete(v15);
    }
    v14 -= 32;
    if (v14 == -96)
    {

      _Unwind_Resume(a1);
    }
  }
}

void sub_1D5107184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D51074B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D5107738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void sub_1D510785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5108590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40)
{
  void *v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  applesauce::CF::ObjectRef<_LXLexicon const*>::~ObjectRef((const void **)(v46 - 120));

  *(_QWORD *)(v46 - 120) = v46 - 160;
  std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 120));
  if (__p)
    operator delete(__p);
  *v42 = &off_1E98D90E0;
  *(_QWORD *)(v46 - 160) = a10;
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 160));

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::addScorer(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  _QWORD *v22;

  if (a2)
  {
    v3 = result;
    v4 = result + 5;
    v5 = result[5];
    v6 = (_QWORD *)result[4];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)result[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      v22 = v4;
      if (v12)
      {
        v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v12);
        v8 = (_QWORD *)v3[3];
        v6 = (_QWORD *)v3[4];
      }
      else
      {
        v13 = 0;
      }
      v14 = (_QWORD *)(v12 + 8 * v9);
      v15 = v12 + 8 * v13;
      v21 = v15;
      *v14 = a2;
      *((_QWORD *)&v20 + 1) = v14 + 1;
      if (v6 == v8)
      {
        v7 = v14 + 1;
      }
      else
      {
        do
        {
          v16 = *--v6;
          *v6 = 0;
          *--v14 = v16;
        }
        while (v6 != v8);
        v7 = (_QWORD *)*((_QWORD *)&v20 + 1);
        v15 = v21;
      }
      v17 = *(_OWORD *)(v3 + 3);
      v3[3] = v14;
      v3[4] = v7;
      v20 = v17;
      v18 = v3[5];
      v3[5] = v15;
      v21 = v18;
      v19 = v17;
      result = (_QWORD *)std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::~__split_buffer((uint64_t)&v19);
    }
    else
    {
      *v6 = a2;
      v7 = v6 + 1;
    }
    v3[4] = v7;
  }
  return result;
}

const void **applesauce::CF::ObjectRef<CVNLPLanguageModel *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinArabicMixedScriptPenaltyBeamScorer(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E98D9128;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::addScorer(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  _QWORD *v25;

  v2 = *a2;
  if (*a2)
  {
    v4 = result;
    v5 = result + 5;
    v6 = result[5];
    v7 = (_QWORD *)result[4];
    if ((unint64_t)v7 >= v6)
    {
      v9 = result[3];
      v10 = ((uint64_t)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v11 = v6 - v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v25 = v5;
      if (v13)
      {
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v13);
        v2 = *a2;
      }
      else
      {
        v14 = 0;
      }
      v15 = (_QWORD *)(v13 + 8 * v10);
      v16 = v13 + 8 * v14;
      v24 = v16;
      *a2 = 0;
      *v15 = v2;
      v8 = v15 + 1;
      v23.i64[1] = (uint64_t)(v15 + 1);
      v18 = (_QWORD *)v4[3];
      v17 = (_QWORD *)v4[4];
      if (v17 == v18)
      {
        v20 = vdupq_n_s64((unint64_t)v17);
      }
      else
      {
        do
        {
          v19 = *--v17;
          *v17 = 0;
          *--v15 = v19;
        }
        while (v17 != v18);
        v20 = *(int64x2_t *)(v4 + 3);
        v8 = (_QWORD *)v23.i64[1];
        v16 = v24;
      }
      v4[3] = v15;
      v4[4] = v8;
      v23 = v20;
      v21 = v4[5];
      v4[5] = v16;
      v24 = v21;
      v22 = v20.i64[0];
      result = (_QWORD *)std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *a2 = 0;
      *v7 = v2;
      v8 = v7 + 1;
    }
    v4[4] = v8;
  }
  return result;
}

_QWORD *CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinCyrillicMixedScriptPenaltyBeamScorer(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E98D9128;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<_LXLexicon const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::~AdditiveCombiningBeamScorer(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E98D90E0;
  v3 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_1D5108EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  CoreRecognition::decoder::Context::~Context((const void **)(v28 - 120));
  a21 = v27 + 16;
  a23 = v26 + 16;
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  a21 = v28 - 96;
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::decode(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  float v32;
  float *v33;
  unint64_t v34;
  uint64_t v35;
  float *v36;
  float *v37;
  BOOL v38;
  float v39;
  float *v40;
  uint64_t v41;
  float v42;
  float v43;
  BOOL v44;
  float v45;
  double v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  void *__p;
  char *v76;
  _QWORD v77[2];
  void *v78[6];

  __p = 0;
  v76 = 0;
  v77[0] = 0;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::BaseState>>::reserve(&__p, *a2 + 1);
  v6 = v76;
  if ((unint64_t)v76 >= v77[0])
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v76 - (_BYTE *)__p) >> 4);
    v9 = v8 + 1;
    if (v8 + 1 > 0x333333333333333)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    if (0x999999999999999ALL * ((uint64_t)(v77[0] - (_QWORD)__p) >> 4) > v9)
      v9 = 0x999999999999999ALL * ((uint64_t)(v77[0] - (_QWORD)__p) >> 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77[0] - (_QWORD)__p) >> 4) >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v9;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>((uint64_t)v77, v10);
    v12 = &v11[80 * v8];
    v14 = &v11[80 * v13];
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_QWORD *)v12 + 8) = &unk_1E98D9278;
    *((_QWORD *)v12 + 9) = 0;
    v7 = v12 + 80;
    v15 = (char *)__p;
    v16 = v76;
    if (v76 == __p)
    {
      v15 = v76;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v12[v17];
        v19 = *(_OWORD *)&v16[v17 - 80];
        v20 = *(_OWORD *)&v16[v17 - 64];
        v21 = *(_OWORD *)&v16[v17 - 32];
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v16[v17 - 48];
        *((_OWORD *)v18 - 2) = v21;
        *((_OWORD *)v18 - 5) = v19;
        *((_OWORD *)v18 - 4) = v20;
        *((_QWORD *)v18 - 2) = &unk_1E98D9278;
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v16[v17 - 8];
        v17 -= 80;
      }
      while (&v16[v17] != v15);
      v12 += v17;
    }
    __p = v12;
    v76 = v7;
    v77[0] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *((_OWORD *)v76 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *(_OWORD *)v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_QWORD *)v6 + 8) = &unk_1E98D9278;
    *((_QWORD *)v6 + 9) = 0;
    v7 = v6 + 80;
  }
  v76 = v7;
  *((_QWORD *)v7 - 3) = 0;
  *((_QWORD *)v7 - 6) = 0;
  *((_OWORD *)v7 - 5) = xmmword_1D513B720;
  v74 = 0uLL;
  v22 = *a2;
  if (*a2)
  {
    v23 = 0;
    v24 = -1;
    v25 = 0.0;
    do
    {
      v26 = v24;
      v27 = a2[1];
      v28 = v27 * v23;
      v30 = a2[8];
      v29 = a2[9];
      v31 = (float *)(v29 + 4 * v27 * v23);
      if (v29)
      {
        v32 = -1.0;
      }
      else
      {
        v31 = 0;
        v32 = 0.0;
      }
      v33 = (float *)(v30 + 4 * v28);
      v34 = v23 + 1;
      v35 = v27 * (v23 + 1);
      v36 = (float *)(v30 + 4 * v35);
      v38 = v28 == v35;
      v37 = v33 + 1;
      v38 = v38 || v37 == v36;
      if (!v38)
      {
        v39 = v32 + 1.0;
        if (v31)
          v39 = v32;
        v40 = v31 + 1;
        if (!v31)
          v40 = 0;
        v41 = 4 * v27 - 4;
        do
        {
          v42 = *v33;
          if (*v33 > -0.0010005)
            v42 = -0.0010005;
          v43 = *v37;
          if (*v37 > -0.0010005)
            v43 = -0.0010005;
          if (v42 < v43)
          {
            v31 = v40;
            v33 = v37;
            v32 = v39;
          }
          ++v37;
          v44 = v40 == 0;
          if (v40)
            ++v40;
          else
            v40 = 0;
          if (v44)
            v39 = v39 + 1.0;
          v41 -= 4;
        }
        while (v41);
      }
      if (v31)
        v32 = *v31;
      v24 = (unint64_t)v32;
      if (*v33 <= -0.0010005)
        v45 = *v33;
      else
        v45 = -0.0010005;
      v46 = v45;
      if (v26 == v24)
      {
        if (*(_BYTE *)(a1 + 24) && *((double *)v7 - 5) < v46)
        {
          *((_QWORD *)v7 - 9) = v23;
          *((double *)v7 - 5) = v46;
        }
      }
      else if (*(_QWORD *)(a1 + 8) != v24)
      {
        v47 = v7 - 80;
        if ((unint64_t)v7 >= v77[0])
        {
          v48 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)__p) >> 4);
          v49 = v48 + 1;
          if (v48 + 1 > 0x333333333333333)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)(v77[0] - (_QWORD)__p) >> 4) > v49)
            v49 = 0x999999999999999ALL * ((uint64_t)(v77[0] - (_QWORD)__p) >> 4);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77[0] - (_QWORD)__p) >> 4) >= 0x199999999999999)
            v50 = 0x333333333333333;
          else
            v50 = v49;
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>((uint64_t)v77, v50);
          v53 = &v51[80 * v48];
          *(_QWORD *)v53 = v24;
          *((_QWORD *)v53 + 1) = v23;
          *((_OWORD *)v53 + 1) = v74;
          *((double *)v53 + 4) = v25;
          *((double *)v53 + 5) = v46;
          *((_QWORD *)v53 + 6) = 0;
          *((_QWORD *)v53 + 7) = v47;
          *((_QWORD *)v53 + 8) = &unk_1E98D9278;
          *((_QWORD *)v53 + 9) = 0;
          v54 = (char *)__p;
          v55 = v76;
          if (v76 == __p)
          {
            v54 = v76;
            v61 = &v51[80 * v48];
          }
          else
          {
            v56 = 0;
            do
            {
              v57 = &v53[v56];
              v58 = *(_OWORD *)&v55[v56 - 80];
              v59 = *(_OWORD *)&v55[v56 - 64];
              v60 = *(_OWORD *)&v55[v56 - 32];
              *((_OWORD *)v57 - 3) = *(_OWORD *)&v55[v56 - 48];
              *((_OWORD *)v57 - 2) = v60;
              *((_OWORD *)v57 - 5) = v58;
              *((_OWORD *)v57 - 4) = v59;
              *((_QWORD *)v57 - 2) = &unk_1E98D9278;
              *((_QWORD *)v57 - 1) = *(_QWORD *)&v55[v56 - 8];
              v56 -= 80;
            }
            while (&v55[v56] != v54);
            v61 = &v53[v56];
          }
          v7 = v53 + 80;
          __p = v61;
          v76 = v53 + 80;
          v77[0] = &v51[80 * v52];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_QWORD *)v7 = v24;
          *((_QWORD *)v7 + 1) = v23;
          *((_OWORD *)v7 + 1) = v74;
          *((double *)v7 + 4) = v25;
          *((double *)v7 + 5) = v46;
          *((_QWORD *)v7 + 6) = 0;
          *((_QWORD *)v7 + 7) = v47;
          *((_QWORD *)v7 + 8) = &unk_1E98D9278;
          *((_QWORD *)v7 + 9) = 0;
          v7 += 80;
        }
        v76 = v7;
        v22 = *a2;
      }
      v25 = v46 + *((double *)v7 - 6);
      *((double *)v7 - 6) = v25;
      ++v23;
    }
    while (v34 < v22);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::createResultPathFromBeamEntry(a1 + 16, (uint64_t)(v7 - 80), v22, (uint64_t)&v71);
  v62 = a3[2];
  v63 = a3[1];
  if (v63 >= v62)
  {
    v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v63 - *a3) >> 3);
    v66 = v65 + 1;
    if (v65 + 1 > 0x666666666666666)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - *a3) >> 3);
    if (2 * v67 > v66)
      v66 = 2 * v67;
    if (v67 >= 0x333333333333333)
      v68 = 0x666666666666666;
    else
      v68 = v66;
    v78[4] = a3 + 2;
    if (v68)
      v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(a3 + 2), v68);
    else
      v69 = 0;
    v70 = &v69[40 * v65];
    v78[0] = v69;
    v78[1] = v70;
    v78[3] = &v69[40 * v68];
    *(_QWORD *)v70 = 0;
    *((_QWORD *)v70 + 1) = 0;
    *((_QWORD *)v70 + 2) = 0;
    *(_OWORD *)v70 = v71;
    *((_QWORD *)v70 + 2) = v72;
    v71 = 0uLL;
    v72 = 0;
    *(_OWORD *)(v70 + 24) = v73;
    v78[2] = v70 + 40;
    std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a3, v78);
    v64 = a3[1];
    std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(v78);
  }
  else
  {
    *(_QWORD *)v63 = 0;
    *(_QWORD *)(v63 + 8) = 0;
    *(_QWORD *)(v63 + 16) = 0;
    *(_OWORD *)v63 = v71;
    *(_QWORD *)(v63 + 16) = v72;
    v71 = 0uLL;
    v72 = 0;
    *(_OWORD *)(v63 + 24) = v73;
    v64 = v63 + 40;
  }
  a3[1] = v64;
  v78[0] = &v71;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
  if (__p)
  {
    v76 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1D51094E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t *a22,void *a23)
{
  std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(&a23);
  a22 = &a11;
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D5109588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5109720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1D5109BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t (**a38)(),uint64_t a39,void *__p,uint64_t a41)
{
  uint64_t v41;

  a38 = &off_1E98D9050;
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  a18 = v41 - 176;
  std::vector<CoreRecognition::decoder::DecodingPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);

  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _OWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  float *v31;
  float v32;
  float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  float v40;
  float *v41;
  float *v42;
  float v43;
  uint64_t *v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  float v53;
  float *v54;
  double v55;
  float v56;
  double v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  double *v65;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  long double v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  long double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  long double v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t *v92;
  uint64_t *v93;
  unint64_t *v94;
  char *v95;
  void *v96;
  char *v97;
  int64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t *i;
  uint64_t v106;
  double v107;
  unint64_t FreeCandidate;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  long double v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  char *v124;
  void *v125;
  char *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  float *v136;
  float *v137;
  float v138;
  uint64_t v139;
  float v140;
  double v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  long double v153;
  uint64_t v154;
  BOOL v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  BOOL v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  int64x2_t v177;
  unint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  char *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  unint64_t v195;
  char *v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  double v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t *v234;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  float *v239;
  unint64_t v240;
  unint64_t v241;
  float *v242;
  float *v243;
  uint64_t v244;
  void *__p[2];
  char *v246;
  __int128 v247;
  uint64_t *v248;
  _QWORD *v249;
  unint64_t v250;
  int64x2_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  float *v257[2];
  float v258;
  uint64_t *v259;
  char *v260;
  unint64_t v261;
  unint64_t *v262;
  int64x2_t v263;
  unint64_t *v264;
  _QWORD *v265;

  v7 = (_OWORD *)operator new();
  v7[3] = 0u;
  v7[4] = 0u;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = &off_1E98D8F00;
  *((_QWORD *)v7 + 11) = 0;
  *((_QWORD *)v7 + 12) = 0;
  *((_QWORD *)v7 + 10) = 0;
  __p[0] = v7;
  *v7 = xmmword_1D513B720;
  v7[1] = xmmword_1D513BAC0;
  v7[2] = 0u;
  *((_QWORD *)v7 + 6) = 0;
  CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::BeamSearchState((uint64_t)&v248, *(int *)(a1 + 88));
  v8 = (_QWORD *)v251.i64[1];
  if (v251.i64[1] >= v252)
  {
    v10 = (_QWORD *)v251.i64[0];
    v11 = (v251.i64[1] - v251.i64[0]) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v13 = v252 - v251.i64[0];
    if ((uint64_t)(v252 - v251.i64[0]) >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v265 = &v252;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v14);
      v8 = (_QWORD *)v251.i64[1];
      v10 = (_QWORD *)v251.i64[0];
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17 = v14 + 8 * v15;
    v264 = (unint64_t *)v17;
    *v16 = v7;
    v263.i64[1] = (uint64_t)(v16 + 1);
    if (v8 == v10)
    {
      v9 = v16 + 1;
    }
    else
    {
      do
      {
        v18 = *--v8;
        *v8 = 0;
        *--v16 = v18;
      }
      while (v8 != v10);
      v9 = (_QWORD *)v263.i64[1];
      v17 = (unint64_t)v264;
      v7 = __p[0];
    }
    v19 = v251;
    v251.i64[0] = (uint64_t)v16;
    v251.i64[1] = (uint64_t)v9;
    v263 = v19;
    v20 = (unint64_t *)v252;
    v252 = v17;
    v264 = v20;
    v262 = (unint64_t *)v19.i64[0];
    std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer((uint64_t)&v262);
  }
  else
  {
    *(_QWORD *)v251.i64[1] = v7;
    v9 = v8 + 1;
  }
  v251.i64[1] = (uint64_t)v9;
  CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>::getReversePrefix((char **)&v262, v7);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__emplace_unique_key_args<std::vector<unsigned long>,std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *&>(&v248, v262, (unint64_t *)v263.i64[0], (uint64_t)&v262, (uint64_t *)__p);
  if (v262)
  {
    v263.i64[0] = (uint64_t)v262;
    operator delete(v262);
  }
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::reserve(&v251, *a2 * *(int *)(a1 + 88));
  v21 = v248;
  if (v248 != (uint64_t *)&v249)
  {
    do
    {
      CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(*(_QWORD *)(a1 + 40), *(uint64_t **)(a1 + 48), (uint64_t *)(v21[7] + 64), a3);
      v22 = (uint64_t *)v21[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t *)v21[2];
          v30 = *v23 == (_QWORD)v21;
          v21 = v23;
        }
        while (!v30);
      }
      v21 = v23;
    }
    while (v23 != (uint64_t *)&v249);
  }
  v253 = 0;
  v238 = a2;
  if (*a2)
  {
    v24 = 0;
    v25 = a1 + 64;
    v244 = a1 + 16;
    while (1)
    {
      v26 = a2[1];
      v27 = v26 * v24;
      v29 = a2[8];
      v28 = a2[9];
      v30 = v28 == 0;
      v239 = (float *)(v28 + 4 * v27);
      if (v28)
        v31 = (float *)(v28 + 4 * v27);
      else
        v31 = 0;
      if (v28)
        v32 = -1.0;
      else
        v32 = 0.0;
      v241 = v27;
      v236 = a2[1];
      v240 = v26 + v27;
      v33 = (float *)(v28 + 4 * (v26 + v27));
      if (v30)
        v34 = 0;
      else
        v34 = v33;
      v36 = v254;
      v35 = v255;
      if (v255 != v254)
      {
        do
        {
          v37 = v35 - 104;
          *(_QWORD *)(v35 - 40) = &off_1E98D8F00;
          v262 = (unint64_t *)(v35 - 24);
          std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
          v35 = v37;
        }
        while (v37 != v36);
      }
      v255 = v36;
      __p[0] = 0;
      __p[1] = 0;
      v246 = 0;
      v38 = *(_QWORD *)(a1 + 8);
      if (v31)
      {
        v39 = -0.0010005;
        if (v31 != v34)
        {
          v40 = (float)v38;
          v39 = -0.0010005;
          v41 = v239;
          v42 = (float *)(v29 + 4 * v241);
          while (1)
          {
            v43 = *v42;
            if (*v41 == v40)
              break;
            if (v39 > v43)
              v39 = *v42;
            ++v41;
            ++v42;
            if (v41 == v34)
              goto LABEL_53;
          }
          if (v43 <= -0.0010005)
            v39 = *v42;
          else
            v39 = -0.0010005;
        }
      }
      else
      {
        v39 = *(float *)(v29 + 4 * v241 + 4 * v38);
        if (v39 > -0.0010005)
          v39 = -0.0010005;
      }
LABEL_53:
      v237 = v29;
      v242 = (float *)(v29 + 4 * v241);
      v243 = v31;
      v44 = v248;
      if (v248 != (uint64_t *)&v249)
        break;
LABEL_137:
      if (*(_BYTE *)(a1 + 128))
      {
        v259 = (uint64_t *)v242;
        v260 = (char *)v243;
        *(float *)&v261 = v32;
        v257[0] = (float *)(v237 + 4 * v240);
        v257[1] = v34;
        v258 = v32;
        CoreRecognition::decoder::ActivationPruning::pruneActivations((float **)&v262, a1 + 104, (uint64_t)&v259, v257);
        v92 = v262;
        v93 = v248;
        if (v248 != (uint64_t *)&v249)
        {
          v94 = (unint64_t *)v263.i64[0];
          do
          {
            __p[1] = __p[0];
            std::vector<unsigned long>::reserve(__p, ((v93[5] - v93[4]) >> 3) + 1);
            v95 = (char *)__p[1];
            if (__p[1] >= v246)
            {
              v97 = (char *)__p[0];
              v98 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 61)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v100 = v246 - (char *)__p[0];
              if ((v246 - (char *)__p[0]) >> 2 > v99)
                v99 = v100 >> 2;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v246, v101);
                v97 = (char *)__p[0];
                v95 = (char *)__p[1];
              }
              else
              {
                v102 = 0;
              }
              v103 = &v102[8 * v98];
              *(_QWORD *)v103 = 0;
              v96 = v103 + 8;
              while (v95 != v97)
              {
                v104 = *((_QWORD *)v95 - 1);
                v95 -= 8;
                *((_QWORD *)v103 - 1) = v104;
                v103 -= 8;
              }
              __p[0] = v103;
              __p[1] = v96;
              v246 = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)__p[1] = 0;
              v96 = v95 + 8;
            }
            __p[1] = v96;
            std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>((_QWORD *)v93[4], (_QWORD *)v93[5], (uint64_t)__p);
            for (i = v92; i != v94; i += 2)
            {
              v106 = *i;
              if (*i != *(_QWORD *)(a1 + 8))
              {
                v107 = *((float *)i + 2);
                if (*(double *)(a1 + 96) <= v107)
                {
                  *(_QWORD *)__p[0] = v106;
                  if (&v249 == std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>((uint64_t)&v248, (unint64_t *)__p[0], (unint64_t *)__p[1]))
                  {
                    FreeCandidate = CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(&v254);
                    v109 = FreeCandidate;
                    v110 = v253;
                    *(_QWORD *)FreeCandidate = v106;
                    *(_QWORD *)(FreeCandidate + 8) = v110;
                    *(_QWORD *)(FreeCandidate + 56) = v93[7];
                    *(_QWORD *)(FreeCandidate + 24) = 0xFFF0000000000000;
                    v111 = v93[7];
                    v112 = *(_QWORD *)v111;
                    v113 = 32;
                    if (v106 == *(_QWORD *)v111)
                      v113 = 24;
                    *(double *)(FreeCandidate + 16) = *(double *)(v111 + v113) + v107;
                    v114 = *(double *)(v111 + 48);
                    *(double *)(FreeCandidate + 48) = v114
                                                    + CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::expandState(v244, v111 + 64, v112, FreeCandidate + 64, v106);
                    v116 = *(double *)(v109 + 16);
                    v115 = *(double *)(v109 + 24);
                    if (v115 <= v116)
                      v117 = *(double *)(v109 + 24);
                    else
                      v117 = *(double *)(v109 + 16);
                    if (v115 <= v116)
                      v118 = *(double *)(v109 + 16);
                    else
                      v118 = *(double *)(v109 + 24);
                    if (v117 > -INFINITY)
                    {
                      v119 = exp(v117 - v118);
                      v118 = v118 + log1p(v119);
                    }
                    v120 = v254;
                    *(_QWORD *)(v109 + 8) = v253;
                    *(double *)(v109 + 32) = v118;
                    *(double *)(v109 + 40) = v107;
                    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v120, v255, 0x4EC4EC4EC4EC4EC5 * ((v255 - v120) >> 3));
                  }
                }
              }
            }
            v121 = (uint64_t *)v93[1];
            if (v121)
            {
              do
              {
                v122 = v121;
                v121 = (uint64_t *)*v121;
              }
              while (v121);
            }
            else
            {
              do
              {
                v122 = (uint64_t *)v93[2];
                v30 = *v122 == (_QWORD)v93;
                v93 = v122;
              }
              while (!v30);
            }
            v93 = v122;
          }
          while (v122 != (uint64_t *)&v249);
        }
        if (v92)
          operator delete(v92);
      }
      else
      {
        v123 = v248;
        if (v248 != (uint64_t *)&v249)
        {
          do
          {
            __p[1] = __p[0];
            std::vector<unsigned long>::reserve(__p, ((v123[5] - v123[4]) >> 3) + 1);
            v124 = (char *)__p[1];
            if (__p[1] >= v246)
            {
              v126 = (char *)__p[0];
              v127 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 61)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v129 = v246 - (char *)__p[0];
              if ((v246 - (char *)__p[0]) >> 2 > v128)
                v128 = v129 >> 2;
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v128;
              if (v130)
              {
                v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v246, v130);
                v126 = (char *)__p[0];
                v124 = (char *)__p[1];
              }
              else
              {
                v131 = 0;
              }
              v132 = &v131[8 * v127];
              *(_QWORD *)v132 = 0;
              v125 = v132 + 8;
              while (v124 != v126)
              {
                v133 = *((_QWORD *)v124 - 1);
                v124 -= 8;
                *((_QWORD *)v132 - 1) = v133;
                v132 -= 8;
              }
              __p[0] = v132;
              __p[1] = v125;
              v246 = &v131[8 * v130];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *(_QWORD *)__p[1] = 0;
              v125 = v124 + 8;
            }
            __p[1] = v125;
            std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>((_QWORD *)v123[4], (_QWORD *)v123[5], (uint64_t)__p);
            v134 = 4 * v236;
            v135 = v32;
            v137 = v242;
            v136 = v243;
            if (v241 != v240)
            {
              do
              {
                v138 = v135;
                if (v136)
                  v138 = *v136;
                v139 = (unint64_t)v138;
                if (*(_QWORD *)(a1 + 8) != (unint64_t)v138)
                {
                  v140 = *v137;
                  if (*v137 > -0.0010005)
                    v140 = -0.0010005;
                  v141 = v140;
                  if (*(double *)(a1 + 96) <= v140)
                  {
                    *(_QWORD *)__p[0] = v139;
                    if (&v249 == std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>((uint64_t)&v248, (unint64_t *)__p[0], (unint64_t *)__p[1]))
                    {
                      v142 = CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(&v254);
                      v143 = v142;
                      v144 = v253;
                      *(_QWORD *)v142 = v139;
                      *(_QWORD *)(v142 + 8) = v144;
                      *(_QWORD *)(v142 + 56) = v123[7];
                      *(_QWORD *)(v142 + 24) = 0xFFF0000000000000;
                      v145 = v123[7];
                      v146 = *(_QWORD *)v145;
                      v147 = 32;
                      if (*(_QWORD *)v145 == v139)
                        v147 = 24;
                      *(double *)(v142 + 16) = *(double *)(v145 + v147) + v141;
                      v148 = *(double *)(v145 + 48);
                      *(double *)(v142 + 48) = v148
                                             + CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::expandState(v244, v145 + 64, v146, v142 + 64, v139);
                      v150 = *(double *)(v143 + 16);
                      v149 = *(double *)(v143 + 24);
                      if (v149 <= v150)
                        v151 = *(double *)(v143 + 24);
                      else
                        v151 = *(double *)(v143 + 16);
                      if (v149 <= v150)
                        v152 = *(double *)(v143 + 16);
                      else
                        v152 = *(double *)(v143 + 24);
                      if (v151 > -INFINITY)
                      {
                        v153 = exp(v151 - v152);
                        v152 = v152 + log1p(v153);
                      }
                      v154 = v254;
                      *(_QWORD *)(v143 + 8) = v253;
                      *(double *)(v143 + 32) = v152;
                      *(double *)(v143 + 40) = v141;
                      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v154, v255, 0x4EC4EC4EC4EC4EC5 * ((v255 - v154) >> 3));
                    }
                  }
                }
                ++v137;
                v155 = v136 == 0;
                if (v136)
                  ++v136;
                else
                  v136 = 0;
                if (v155)
                  v135 = v135 + 1.0;
                v134 -= 4;
              }
              while (v134);
            }
            v156 = (uint64_t *)v123[1];
            if (v156)
            {
              do
              {
                v157 = v156;
                v156 = (uint64_t *)*v156;
              }
              while (v156);
            }
            else
            {
              do
              {
                v157 = (uint64_t *)v123[2];
                v30 = *v157 == (_QWORD)v123;
                v123 = v157;
              }
              while (!v30);
            }
            v123 = v157;
          }
          while (v157 != (uint64_t *)&v249);
        }
      }
      std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(v249);
      v249 = 0;
      v250 = 0;
      v248 = (uint64_t *)&v249;
      v159 = v254;
      v158 = v255;
      if (v255 - v254 < 105)
      {
        a2 = v238;
      }
      else
      {
        v160 = (v255 - v254) / 0x68uLL;
        a2 = v238;
        do
        {
          std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v159, v158, v160);
          v158 -= 104;
          v161 = v160-- > 2;
        }
        while (v161);
        v159 = v254;
        v158 = v255;
      }
      while (v159 != v158 && v250 < *(int *)(a1 + 88))
      {
        if (*(double *)(v159 + 32) > -INFINITY)
        {
          v162 = operator new();
          v163 = *(_OWORD *)v159;
          v164 = *(_OWORD *)(v159 + 16);
          v165 = *(_OWORD *)(v159 + 48);
          *(_OWORD *)(v162 + 32) = *(_OWORD *)(v159 + 32);
          *(_OWORD *)(v162 + 48) = v165;
          *(_OWORD *)v162 = v163;
          *(_OWORD *)(v162 + 16) = v164;
          *(_QWORD *)&v163 = *(_QWORD *)(v159 + 72);
          *(_QWORD *)(v162 + 80) = 0;
          *(_QWORD *)(v162 + 72) = v163;
          *(_QWORD *)(v162 + 64) = &off_1E98D8F00;
          *(_QWORD *)(v162 + 88) = 0;
          *(_QWORD *)(v162 + 96) = 0;
          std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__init_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>((char *)(v162 + 80), *(_QWORD **)(v159 + 80), *(_QWORD **)(v159 + 88), (uint64_t)(*(_QWORD *)(v159 + 88) - *(_QWORD *)(v159 + 80)) >> 4);
          v256 = v162;
          v166 = v251.i64[1];
          if (v251.i64[1] >= v252)
          {
            v168 = (v251.i64[1] - v251.i64[0]) >> 3;
            if ((unint64_t)(v168 + 1) >> 61)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v169 = (uint64_t)(v252 - v251.i64[0]) >> 2;
            if (v169 <= v168 + 1)
              v169 = v168 + 1;
            if (v252 - v251.i64[0] >= 0x7FFFFFFFFFFFFFF8)
              v170 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v170 = v169;
            v265 = &v252;
            if (v170)
              v170 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v170);
            else
              v171 = 0;
            v172 = (uint64_t *)(v170 + 8 * v168);
            v173 = v170 + 8 * v171;
            v264 = (unint64_t *)v173;
            v256 = 0;
            *v172 = v162;
            v167 = v172 + 1;
            v263.i64[1] = (uint64_t)(v172 + 1);
            v174 = (_QWORD *)v251.i64[1];
            v175 = (_QWORD *)v251.i64[0];
            if (v251.i64[1] == v251.i64[0])
            {
              v177 = vdupq_n_s64(v251.u64[1]);
            }
            else
            {
              do
              {
                v176 = *--v174;
                *v174 = 0;
                *--v172 = v176;
              }
              while (v174 != v175);
              v177 = v251;
              v167 = (_QWORD *)v263.i64[1];
              v173 = (unint64_t)v264;
            }
            v251.i64[0] = (uint64_t)v172;
            v251.i64[1] = (uint64_t)v167;
            v263 = v177;
            v178 = (unint64_t *)v252;
            v252 = v173;
            v264 = v178;
            v262 = (unint64_t *)v177.i64[0];
            std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer((uint64_t)&v262);
          }
          else
          {
            v256 = 0;
            *(_QWORD *)v251.i64[1] = v162;
            v167 = (_QWORD *)(v166 + 8);
          }
          v251.i64[1] = (uint64_t)v167;
          std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100](&v256);
          CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>::getReversePrefix((char **)&v262, (_QWORD *)v159);
          v256 = *(_QWORD *)(v251.i64[1] - 8);
          std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__emplace_unique_key_args<std::vector<unsigned long>,std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *&>(&v248, v262, (unint64_t *)v263.i64[0], (uint64_t)&v262, &v256);
          if (v262)
          {
            v263.i64[0] = (uint64_t)v262;
            operator delete(v262);
          }
          v158 = v255;
        }
        v159 += 104;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v24 = v253 + 1;
      v253 = v24;
      if (v24 >= *a2)
        goto LABEL_260;
    }
    v45 = v39;
    while (1)
    {
      v46 = v44[7];
      v47 = CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(&v254);
      v48 = v47;
      v49 = *(_OWORD *)v46;
      v50 = *(_OWORD *)(v46 + 16);
      v51 = *(_OWORD *)(v46 + 48);
      *(_OWORD *)(v47 + 32) = *(_OWORD *)(v46 + 32);
      *(_OWORD *)(v47 + 48) = v51;
      *(_OWORD *)v47 = v49;
      *(_OWORD *)(v47 + 16) = v50;
      *(_QWORD *)(v47 + 72) = *(_QWORD *)(v46 + 72);
      if (v47 != v46)
        std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>(v47 + 80, *(uint64_t **)(v46 + 80), *(uint64_t **)(v46 + 88), (uint64_t)(*(_QWORD *)(v46 + 88) - *(_QWORD *)(v46 + 80)) >> 4);
      if (!*(_QWORD *)(v48 + 56))
      {
        v55 = *(double *)(v48 + 16);
        goto LABEL_120;
      }
      v52 = *(_QWORD *)v48;
      if (v243)
      {
        if (v243 == v34)
        {
          v54 = v243;
        }
        else
        {
          v53 = (float)(unint64_t)v52;
          v54 = v239;
          while (*v54 != v53)
          {
            if (++v54 == v34)
            {
              v54 = v34;
              break;
            }
          }
        }
        if (v54 == v34)
        {
          v56 = -INFINITY;
          goto LABEL_72;
        }
        v52 = v54 - v243;
      }
      v56 = v242[v52];
      if (v56 > -0.0010005)
        v56 = -0.0010005;
LABEL_72:
      v57 = v56;
      if (*(_BYTE *)(a1 + 72) && *(double *)(v48 + 40) < v57)
      {
        *(_QWORD *)(v48 + 8) = v253;
        *(double *)(v48 + 40) = v57;
      }
      v58 = (unint64_t *)__p[0];
      __p[1] = __p[0];
      v59 = v44[4];
      v60 = v44[5];
      if (v59 == v60)
      {
        v61 = (unint64_t *)__p[0];
      }
      else
      {
        std::vector<unsigned long>::reserve(__p, ((v60 - v59) >> 3) - 1);
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>((_QWORD *)(v44[4] + 8), (_QWORD *)v44[5], (uint64_t)__p);
        v61 = (unint64_t *)__p[0];
        v58 = (unint64_t *)__p[1];
      }
      v62 = std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>((uint64_t)&v248, v61, v58);
      if (&v249 == v62)
      {
        v75 = *(double *)(v48 + 16);
        goto LABEL_119;
      }
      v63 = v62;
      v64 = v62[7];
      v65 = *(double **)(v48 + 56);
      if (v65 == (double *)v64 || v64 == 0 || v65 == 0)
      {
LABEL_93:
        v71 = 32;
        if (*(_QWORD *)v48 == *(_QWORD *)v65)
          v71 = 24;
        v72 = *(double *)(v64 + v71);
        v73 = *(double *)(v48 + 16);
        if (v73 <= v72)
          v74 = *(double *)(v48 + 16);
        else
          v74 = *(double *)(v64 + v71);
        if (v73 <= v72)
          v75 = *(double *)(v64 + v71);
        else
          v75 = *(double *)(v48 + 16);
        if (v74 > -INFINITY)
        {
          v76 = exp(v74 - v75);
          v75 = v75 + log1p(v76);
        }
        if (*(double *)(v64 + 32) > v65[4])
        {
          *(_QWORD *)(v48 + 56) = v64;
          if (*(_QWORD *)(v48 + 8) <= *(_QWORD *)(v64 + 8))
          {
            *(_QWORD *)(v48 + 8) = v253;
            *(double *)(v48 + 40) = v57;
          }
        }
LABEL_119:
        v55 = v75 + v57;
        *(double *)(v48 + 16) = v75 + v57;
LABEL_120:
        v85 = *(double *)(v46 + 32) + v45;
        *(double *)(v48 + 24) = v85;
        if (v85 <= v55)
          v86 = v85;
        else
          v86 = v55;
        if (v85 <= v55)
          v87 = v55;
        else
          v87 = v85;
        if (v86 > -INFINITY)
        {
          v88 = exp(v86 - v87);
          v87 = v87 + log1p(v88);
        }
        *(double *)(v48 + 32) = v87;
        v89 = v254;
        goto LABEL_129;
      }
      v68 = (uint64_t *)v48;
      while (1)
      {
        v69 = *v68;
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 48))(a1 + 64, *(_QWORD *)v65) == 2
          || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 48))(a1 + 64, v69) == 1)
        {
          break;
        }
        v70 = *((_QWORD *)v65 + 7);
        if (v70)
        {
          v64 = *(_QWORD *)(v64 + 56);
          if (v64)
          {
            v68 = (uint64_t *)v65;
            v65 = (double *)*((_QWORD *)v65 + 7);
            if (v70 != v64)
              continue;
          }
        }
        v65 = *(double **)(v48 + 56);
        v64 = v63[7];
        goto LABEL_93;
      }
      v77 = v63[7];
      v78 = 32;
      if (*(_QWORD *)v48 == **(_QWORD **)(v48 + 56))
        v78 = 24;
      v79 = *(double *)(v77 + v78);
      v75 = *(double *)(v48 + 16);
      v80 = *(double *)(v46 + 32) + v45;
      if (v75 + v57 <= v80)
        v81 = v75 + v57;
      else
        v81 = *(double *)(v46 + 32) + v45;
      if (v75 + v57 <= v80)
        v82 = *(double *)(v46 + 32) + v45;
      else
        v82 = v75 + v57;
      if (v81 > -INFINITY)
      {
        v83 = exp(v81 - v82);
        v82 = v82 + log1p(v83);
      }
      v84 = v79 + v57;
      if (v79 + v57 <= v82)
        goto LABEL_119;
      *(_QWORD *)(v48 + 56) = v77;
      *(_QWORD *)(v48 + 24) = 0xFFF0000000000000;
      *(double *)(v48 + 16) = v84;
      v89 = v254;
      *(_QWORD *)(v48 + 8) = v253;
      *(double *)(v48 + 32) = v84;
      *(double *)(v48 + 40) = v57;
LABEL_129:
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v89, v255, 0x4EC4EC4EC4EC4EC5 * ((v255 - v89) >> 3));
      v90 = (uint64_t *)v44[1];
      if (v90)
      {
        do
        {
          v91 = v90;
          v90 = (uint64_t *)*v90;
        }
        while (v90);
      }
      else
      {
        do
        {
          v91 = (uint64_t *)v44[2];
          v30 = *v91 == (_QWORD)v44;
          v44 = v91;
        }
        while (!v30);
      }
      v44 = v91;
      if (v91 == (uint64_t *)&v249)
        goto LABEL_137;
    }
  }
LABEL_260:
  v179 = v248;
  if (v248 != (uint64_t *)&v249)
  {
    do
    {
      *(double *)(v179[7] + 48) = CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::finalizeState(a1 + 16, v179[7] + 64)+ *(double *)(v179[7] + 48);
      v180 = (uint64_t *)v179[1];
      if (v180)
      {
        do
        {
          v181 = v180;
          v180 = (uint64_t *)*v180;
        }
        while (v180);
      }
      else
      {
        do
        {
          v181 = (uint64_t *)v179[2];
          v30 = *v181 == (_QWORD)v179;
          v179 = v181;
        }
        while (!v30);
      }
      v179 = v181;
    }
    while (v181 != (uint64_t *)&v249);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<CoreRecognition::decoder::DecodingPath>::reserve(a4, *(int *)(a1 + 92));
  v259 = 0;
  v260 = 0;
  v261 = 0;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *,std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>::reserve((void **)&v259, v250);
  v182 = v248;
  if (v248 == (uint64_t *)&v249)
  {
    v183 = v260;
  }
  else
  {
    v183 = v260;
    do
    {
      if ((unint64_t)v183 >= v261)
      {
        v184 = (char *)v259;
        v185 = (v183 - (char *)v259) >> 3;
        v186 = v185 + 1;
        if ((unint64_t)(v185 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v187 = v261 - (_QWORD)v259;
        if ((uint64_t)(v261 - (_QWORD)v259) >> 2 > v186)
          v186 = v187 >> 2;
        if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
          v188 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v188 = v186;
        if (v188)
          v188 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v188);
        else
          v189 = 0;
        v190 = (_QWORD *)(v188 + 8 * v185);
        *v190 = v182[7];
        v191 = (char *)(v190 + 1);
        if (v183 != v184)
        {
          do
          {
            v192 = *((_QWORD *)v183 - 1);
            v183 -= 8;
            *--v190 = v192;
          }
          while (v183 != v184);
          v183 = (char *)v259;
        }
        v259 = v190;
        v260 = v191;
        v261 = v188 + 8 * v189;
        if (v183)
          operator delete(v183);
        v183 = v191;
      }
      else
      {
        *(_QWORD *)v183 = v182[7];
        v183 += 8;
      }
      v260 = v183;
      v193 = (uint64_t *)v182[1];
      if (v193)
      {
        do
        {
          v194 = v193;
          v193 = (uint64_t *)*v193;
        }
        while (v193);
      }
      else
      {
        do
        {
          v194 = (uint64_t *)v182[2];
          v30 = *v194 == (_QWORD)v182;
          v182 = v194;
        }
        while (!v30);
      }
      v182 = v194;
    }
    while (v194 != (uint64_t *)&v249);
  }
  v195 = *(int *)(a1 + 92);
  v196 = (char *)v259;
  if (v195 >= (v183 - (char *)v259) >> 3)
    v197 = (uint64_t *)v183;
  else
    v197 = &v259[v195];
  if (v259 == v197)
    goto LABEL_325;
  v198 = (char *)v197 - (char *)v259;
  if ((char *)v197 - (char *)v259 >= 9)
  {
    v199 = (unint64_t)(v197 - v259 - 2) >> 1;
    v200 = v199 + 1;
    v201 = (char *)&v259[v199];
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(CoreRecognition::decoder::ActivationMatrix const&,CoreRecognition::decoder::Context const&)::{lambda(CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*)#1} &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>**>>((uint64_t)v196, ((char *)v197 - v196) >> 3, v201);
      v201 -= 8;
      --v200;
    }
    while (v200);
  }
  if (v183 != (char *)v197)
  {
    v202 = v197;
    do
    {
      v203 = *v202;
      if (*(double *)(*v202 + 32) + *(double *)(*v202 + 48) > *(double *)(*(_QWORD *)v196 + 32)
                                                             + *(double *)(*(_QWORD *)v196 + 48))
      {
        *v202 = *(_QWORD *)v196;
        *(_QWORD *)v196 = v203;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(CoreRecognition::decoder::ActivationMatrix const&,CoreRecognition::decoder::Context const&)::{lambda(CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*)#1} &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>**>>((uint64_t)v196, ((char *)v197 - v196) >> 3, v196);
      }
      ++v202;
    }
    while (v202 != (uint64_t *)v183);
  }
  if (v198 < 9)
  {
LABEL_325:
    v206 = a4;
  }
  else
  {
    v204 = (unint64_t)v198 >> 3;
    v205 = v197;
    v206 = a4;
    do
    {
      v207 = 0;
      v208 = *(_QWORD *)v196;
      v209 = v204 - 2;
      if (v204 < 2)
        v209 = v204 - 1;
      v210 = v209 >> 1;
      v211 = v196;
      do
      {
        v212 = v211;
        v211 += 8 * v207 + 8;
        v213 = 2 * v207;
        v207 = (2 * v207) | 1;
        v214 = v213 + 2;
        if (v214 < v204
          && *(double *)(*(_QWORD *)v211 + 32) + *(double *)(*(_QWORD *)v211 + 48) > *(double *)(*((_QWORD *)v211 + 1) + 32)
                                                                                       + *(double *)(*((_QWORD *)v211 + 1) + 48))
        {
          v211 += 8;
          v207 = v214;
        }
        *(_QWORD *)v212 = *(_QWORD *)v211;
      }
      while (v207 <= v210);
      if (--v205 == (uint64_t *)v211)
      {
        *(_QWORD *)v211 = v208;
      }
      else
      {
        *(_QWORD *)v211 = *v205;
        *v205 = v208;
        v215 = v211 - v196 + 8;
        if (v215 >= 9)
        {
          v216 = (((unint64_t)v215 >> 3) - 2) >> 1;
          v217 = &v196[8 * v216];
          v218 = *(_QWORD *)v217;
          v219 = *(_QWORD *)v211;
          v220 = *(double *)(*(_QWORD *)v211 + 32) + *(double *)(*(_QWORD *)v211 + 48);
          if (*(double *)(*(_QWORD *)v217 + 32) + *(double *)(*(_QWORD *)v217 + 48) > v220)
          {
            do
            {
              v221 = v217;
              *(_QWORD *)v211 = v218;
              if (!v216)
                break;
              v216 = (v216 - 1) >> 1;
              v217 = &v196[8 * v216];
              v218 = *(_QWORD *)v217;
              v211 = v221;
            }
            while (*(double *)(*(_QWORD *)v217 + 32) + *(double *)(*(_QWORD *)v217 + 48) > v220);
            *(_QWORD *)v221 = v219;
          }
        }
      }
      v161 = v204-- <= 2;
    }
    while (!v161);
    v196 = (char *)v259;
  }
  if (v196 == (char *)v197)
  {
    v196 = (char *)v197;
  }
  else
  {
    v222 = a1 + 64;
    v223 = (uint64_t)(v206 + 2);
    v224 = (uint64_t *)v196;
    do
    {
      if (*(_QWORD *)(*v224 + 56))
      {
        CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::createResultPathFromBeamEntry(v222, *v224, *a2, (uint64_t)__p);
        v225 = a4;
        v226 = a4[1];
        v227 = a4[2];
        if (v226 >= v227)
        {
          v229 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v226 - *a4) >> 3);
          v230 = v229 + 1;
          if (v229 + 1 > 0x666666666666666)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v231 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v227 - *a4) >> 3);
          if (2 * v231 > v230)
            v230 = 2 * v231;
          if (v231 >= 0x333333333333333)
            v232 = 0x666666666666666;
          else
            v232 = v230;
          v265 = (_QWORD *)v223;
          if (v232)
            v233 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>(v223, v232);
          else
            v233 = 0;
          v234 = &v233[5 * v229];
          v262 = v233;
          v263.i64[0] = (uint64_t)v234;
          v264 = &v233[5 * v232];
          *v234 = 0;
          v234[1] = 0;
          v234[2] = 0;
          *(_OWORD *)v234 = *(_OWORD *)__p;
          v234[2] = (unint64_t)v246;
          __p[0] = 0;
          __p[1] = 0;
          v246 = 0;
          *(_OWORD *)(v234 + 3) = v247;
          v263.i64[1] = (uint64_t)(v234 + 5);
          v225 = a4;
          std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a4, &v262);
          v228 = a4[1];
          std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer((void **)&v262);
        }
        else
        {
          *(_QWORD *)v226 = 0;
          *(_QWORD *)(v226 + 8) = 0;
          *(_QWORD *)(v226 + 16) = 0;
          *(_OWORD *)v226 = *(_OWORD *)__p;
          *(_QWORD *)(v226 + 16) = v246;
          __p[0] = 0;
          __p[1] = 0;
          v246 = 0;
          *(_OWORD *)(v226 + 24) = v247;
          v228 = v226 + 40;
        }
        v225[1] = v228;
        v262 = (unint64_t *)__p;
        std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
        a2 = v238;
      }
      ++v224;
    }
    while (v224 != v197);
  }
  if (v196)
  {
    v260 = v196;
    operator delete(v196);
  }
  v262 = (unint64_t *)&v254;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
  v262 = (unint64_t *)&v251;
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(v249);
}

void sub_1D510B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::~BeamSearchState((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E98D8F98;
  *(_QWORD *)(a1 + 16) = &off_1E98D90E0;
  v3 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _OWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  unint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  BOOL v31;
  float v32;
  unint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  float v41;
  float *v42;
  float *v43;
  float v44;
  uint64_t *v45;
  double v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  float v54;
  float *v55;
  double v56;
  float v57;
  double v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  double *v66;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  long double v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  long double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  long double v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t *v99;
  uint64_t *v100;
  unint64_t *v101;
  char *v102;
  void *v103;
  char *v104;
  int64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t *i;
  uint64_t v113;
  double v114;
  unint64_t FreeCandidate;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  long double v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  char *v132;
  void *v133;
  char *v134;
  int64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  float v142;
  float *v143;
  float *v144;
  float v145;
  uint64_t v146;
  float v147;
  double v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  long double v160;
  _QWORD *v161;
  _QWORD *v162;
  BOOL v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  BOOL v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  int64x2_t v185;
  unint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  char *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  double v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t *v242;
  uint64_t *v244;
  uint64_t v245;
  float *v246;
  unint64_t v247;
  unint64_t v248;
  float *v249;
  float *v250;
  uint64_t v251;
  void *__p[2];
  char *v253;
  __int128 v254;
  uint64_t *v255;
  _QWORD *v256;
  unint64_t v257;
  int64x2_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  float *v264[2];
  float v265;
  uint64_t *v266;
  char *v267;
  unint64_t v268;
  unint64_t *v269;
  int64x2_t v270;
  unint64_t *v271;
  _QWORD *v272;

  v7 = (_OWORD *)operator new();
  v7[3] = 0u;
  v7[4] = 0u;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = &off_1E98D8F00;
  *((_QWORD *)v7 + 11) = 0;
  *((_QWORD *)v7 + 12) = 0;
  *((_QWORD *)v7 + 10) = 0;
  __p[0] = v7;
  *v7 = xmmword_1D513B720;
  v7[1] = xmmword_1D513BAC0;
  v7[2] = 0u;
  *((_QWORD *)v7 + 6) = 0;
  CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::BeamSearchState((uint64_t)&v255, *(int *)(a1 + 112));
  v8 = (_QWORD *)v258.i64[1];
  if (v258.i64[1] >= v259)
  {
    v10 = (_QWORD *)v258.i64[0];
    v11 = (v258.i64[1] - v258.i64[0]) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v13 = v259 - v258.i64[0];
    if ((uint64_t)(v259 - v258.i64[0]) >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v272 = &v259;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v14);
      v8 = (_QWORD *)v258.i64[1];
      v10 = (_QWORD *)v258.i64[0];
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)(v14 + 8 * v11);
    v17 = v14 + 8 * v15;
    v271 = (unint64_t *)v17;
    *v16 = v7;
    v270.i64[1] = (uint64_t)(v16 + 1);
    if (v8 == v10)
    {
      v9 = v16 + 1;
    }
    else
    {
      do
      {
        v18 = *--v8;
        *v8 = 0;
        *--v16 = v18;
      }
      while (v8 != v10);
      v9 = (_QWORD *)v270.i64[1];
      v17 = (unint64_t)v271;
      v7 = __p[0];
    }
    v19 = v258;
    v258.i64[0] = (uint64_t)v16;
    v258.i64[1] = (uint64_t)v9;
    v270 = v19;
    v20 = (unint64_t *)v259;
    v259 = v17;
    v271 = v20;
    v269 = (unint64_t *)v19.i64[0];
    std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer((uint64_t)&v269);
  }
  else
  {
    *(_QWORD *)v258.i64[1] = v7;
    v9 = v8 + 1;
  }
  v258.i64[1] = (uint64_t)v9;
  CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>::getReversePrefix((char **)&v269, v7);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__emplace_unique_key_args<std::vector<unsigned long>,std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *&>(&v255, v269, (unint64_t *)v270.i64[0], (uint64_t)&v269, (uint64_t *)__p);
  if (v269)
  {
    v270.i64[0] = (uint64_t)v269;
    operator delete(v269);
  }
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::reserve(&v258, *a2 * *(int *)(a1 + 112));
  v21 = v255;
  if (v255 != (uint64_t *)&v256)
  {
    do
    {
      CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(*(_QWORD *)(a1 + 40), *(uint64_t **)(a1 + 48), (uint64_t *)(v21[7] + 64), a3);
      v22 = (uint64_t *)v21[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t *)v21[2];
          v31 = *v23 == (_QWORD)v21;
          v21 = v23;
        }
        while (!v31);
      }
      v21 = v23;
    }
    while (v23 != (uint64_t *)&v256);
  }
  v260 = 0;
  v244 = a2;
  if (*a2)
  {
    v24 = 0;
    v25 = a1 + 64;
    v251 = a1 + 16;
    while (1)
    {
      v26 = a2[1];
      v27 = v26 * v24;
      v29 = a2[8];
      v28 = a2[9];
      v30 = (float *)(v28 + 4 * v27);
      v31 = v28 == 0;
      v246 = v30;
      if (!v28)
        v30 = 0;
      v250 = v30;
      if (v28)
        v32 = -1.0;
      else
        v32 = 0.0;
      v248 = v27;
      v33 = v26 + v27;
      v34 = (float *)(v28 + 4 * (v26 + v27));
      if (v31)
        v35 = 0;
      else
        v35 = v34;
      v37 = v261;
      v36 = v262;
      if (v262 != v261)
      {
        do
        {
          v38 = v36 - 104;
          *(_QWORD *)(v36 - 40) = &off_1E98D8F00;
          v269 = (unint64_t *)(v36 - 24);
          std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v269);
          v36 = v38;
        }
        while (v38 != v37);
      }
      v262 = v37;
      __p[0] = 0;
      __p[1] = 0;
      v253 = 0;
      v39 = *(_QWORD *)(a1 + 8);
      v247 = v33;
      v245 = v29;
      if (v250)
      {
        v40 = -0.0010005;
        if (v250 != v35)
        {
          v41 = (float)v39;
          v40 = -0.0010005;
          v42 = v246;
          v43 = (float *)(v29 + 4 * v248);
          while (1)
          {
            v44 = *v43;
            if (*v42 == v41)
              break;
            if (v40 > v44)
              v40 = *v43;
            ++v42;
            ++v43;
            if (v42 == v35)
              goto LABEL_52;
          }
          if (v44 <= -0.0010005)
            v40 = *v43;
          else
            v40 = -0.0010005;
        }
      }
      else
      {
        v40 = *(float *)(v29 + 4 * v248 + 4 * v39);
        if (v40 > -0.0010005)
          v40 = -0.0010005;
      }
LABEL_52:
      v249 = (float *)(v29 + 4 * v248);
      v45 = v255;
      if (v255 != (uint64_t *)&v256)
        break;
LABEL_142:
      if (*(_BYTE *)(a1 + 152))
      {
        v266 = (uint64_t *)v249;
        v267 = (char *)v250;
        *(float *)&v268 = v32;
        v264[0] = (float *)(v245 + 4 * v247);
        v264[1] = v35;
        v265 = v32;
        CoreRecognition::decoder::ActivationPruning::pruneActivations((float **)&v269, a1 + 128, (uint64_t)&v266, v264);
        v99 = v269;
        v100 = v255;
        if (v255 != (uint64_t *)&v256)
        {
          v101 = (unint64_t *)v270.i64[0];
          do
          {
            __p[1] = __p[0];
            std::vector<unsigned long>::reserve(__p, ((v100[5] - v100[4]) >> 3) + 1);
            v102 = (char *)__p[1];
            if (__p[1] >= v253)
            {
              v104 = (char *)__p[0];
              v105 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 61)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v107 = v253 - (char *)__p[0];
              if ((v253 - (char *)__p[0]) >> 2 > v106)
                v106 = v107 >> 2;
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
                v108 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v108 = v106;
              if (v108)
              {
                v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v253, v108);
                v104 = (char *)__p[0];
                v102 = (char *)__p[1];
              }
              else
              {
                v109 = 0;
              }
              v110 = &v109[8 * v105];
              *(_QWORD *)v110 = 0;
              v103 = v110 + 8;
              while (v102 != v104)
              {
                v111 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v110 - 1) = v111;
                v110 -= 8;
              }
              __p[0] = v110;
              __p[1] = v103;
              v253 = &v109[8 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_QWORD *)__p[1] = 0;
              v103 = v102 + 8;
            }
            __p[1] = v103;
            std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>((_QWORD *)v100[4], (_QWORD *)v100[5], (uint64_t)__p);
            for (i = v99; i != v101; i += 2)
            {
              v113 = *i;
              if (*i != *(_QWORD *)(a1 + 8))
              {
                v114 = *((float *)i + 2);
                if (*(double *)(a1 + 120) <= v114)
                {
                  *(_QWORD *)__p[0] = v113;
                  if (&v256 == std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>((uint64_t)&v255, (unint64_t *)__p[0], (unint64_t *)__p[1]))
                  {
                    FreeCandidate = CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(&v261);
                    v116 = FreeCandidate;
                    v117 = v260;
                    *(_QWORD *)FreeCandidate = v113;
                    *(_QWORD *)(FreeCandidate + 8) = v117;
                    *(_QWORD *)(FreeCandidate + 56) = v100[7];
                    *(_QWORD *)(FreeCandidate + 24) = 0xFFF0000000000000;
                    v118 = v100[7];
                    v119 = *(_QWORD *)v118;
                    v120 = 32;
                    if (v113 == *(_QWORD *)v118)
                      v120 = 24;
                    *(double *)(FreeCandidate + 16) = *(double *)(v118 + v120) + v114;
                    v121 = *(double *)(v118 + 48);
                    *(double *)(FreeCandidate + 48) = v121
                                                    + CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::expandState(v251, v118 + 64, v119, FreeCandidate + 64, v113);
                    v123 = *(double *)(v116 + 16);
                    v122 = *(double *)(v116 + 24);
                    if (v122 <= v123)
                      v124 = *(double *)(v116 + 24);
                    else
                      v124 = *(double *)(v116 + 16);
                    if (v122 <= v123)
                      v125 = *(double *)(v116 + 16);
                    else
                      v125 = *(double *)(v116 + 24);
                    if (v124 > -INFINITY)
                    {
                      v126 = exp(v124 - v125);
                      v125 = v125 + log1p(v126);
                    }
                    *(double *)(v116 + 32) = v125;
                    v127 = *(_QWORD **)(a1 + 80);
                    v128 = *(_QWORD **)(a1 + 88);
                    if (v127 != v128)
                    {
                      while (*v127 != *(_QWORD *)v116)
                      {
                        if (++v127 == v128)
                        {
                          v127 = *(_QWORD **)(a1 + 88);
                          break;
                        }
                      }
                    }
                    if (v127 != v128)
                    {
                      *(_QWORD *)(v116 + 8) = v260;
                      *(double *)(v116 + 40) = v114;
                    }
                    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v261, v262, 0x4EC4EC4EC4EC4EC5 * ((v262 - v261) >> 3));
                  }
                }
              }
            }
            v129 = (uint64_t *)v100[1];
            if (v129)
            {
              do
              {
                v130 = v129;
                v129 = (uint64_t *)*v129;
              }
              while (v129);
            }
            else
            {
              do
              {
                v130 = (uint64_t *)v100[2];
                v31 = *v130 == (_QWORD)v100;
                v100 = v130;
              }
              while (!v31);
            }
            v100 = v130;
          }
          while (v130 != (uint64_t *)&v256);
        }
        if (v99)
          operator delete(v99);
      }
      else
      {
        v131 = v255;
        if (v255 != (uint64_t *)&v256)
        {
          do
          {
            __p[1] = __p[0];
            std::vector<unsigned long>::reserve(__p, ((v131[5] - v131[4]) >> 3) + 1);
            v132 = (char *)__p[1];
            if (__p[1] >= v253)
            {
              v134 = (char *)__p[0];
              v135 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              v136 = v135 + 1;
              if ((unint64_t)(v135 + 1) >> 61)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v137 = v253 - (char *)__p[0];
              if ((v253 - (char *)__p[0]) >> 2 > v136)
                v136 = v137 >> 2;
              if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v136;
              if (v138)
              {
                v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v253, v138);
                v134 = (char *)__p[0];
                v132 = (char *)__p[1];
              }
              else
              {
                v139 = 0;
              }
              v140 = &v139[8 * v135];
              *(_QWORD *)v140 = 0;
              v133 = v140 + 8;
              while (v132 != v134)
              {
                v141 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v140 - 1) = v141;
                v140 -= 8;
              }
              __p[0] = v140;
              __p[1] = v133;
              v253 = &v139[8 * v138];
              if (v134)
                operator delete(v134);
            }
            else
            {
              *(_QWORD *)__p[1] = 0;
              v133 = v132 + 8;
            }
            __p[1] = v133;
            std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>((_QWORD *)v131[4], (_QWORD *)v131[5], (uint64_t)__p);
            v142 = v32;
            v143 = v249;
            v144 = v250;
            if (v248 != v247)
            {
              do
              {
                v145 = v142;
                if (v144)
                  v145 = *v144;
                v146 = (unint64_t)v145;
                if (*(_QWORD *)(a1 + 8) != (unint64_t)v145)
                {
                  v147 = *v143;
                  if (*v143 > -0.0010005)
                    v147 = -0.0010005;
                  v148 = v147;
                  if (*(double *)(a1 + 120) <= v147)
                  {
                    *(_QWORD *)__p[0] = v146;
                    if (&v256 == std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>((uint64_t)&v255, (unint64_t *)__p[0], (unint64_t *)__p[1]))
                    {
                      v149 = CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(&v261);
                      v150 = v149;
                      v151 = v260;
                      *(_QWORD *)v149 = v146;
                      *(_QWORD *)(v149 + 8) = v151;
                      *(_QWORD *)(v149 + 56) = v131[7];
                      *(_QWORD *)(v149 + 24) = 0xFFF0000000000000;
                      v152 = v131[7];
                      v153 = *(_QWORD *)v152;
                      v154 = 32;
                      if (*(_QWORD *)v152 == v146)
                        v154 = 24;
                      *(double *)(v149 + 16) = *(double *)(v152 + v154) + v148;
                      v155 = *(double *)(v152 + 48);
                      *(double *)(v149 + 48) = v155
                                             + CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::expandState(v251, v152 + 64, v153, v149 + 64, v146);
                      v157 = *(double *)(v150 + 16);
                      v156 = *(double *)(v150 + 24);
                      if (v156 <= v157)
                        v158 = *(double *)(v150 + 24);
                      else
                        v158 = *(double *)(v150 + 16);
                      if (v156 <= v157)
                        v159 = *(double *)(v150 + 16);
                      else
                        v159 = *(double *)(v150 + 24);
                      if (v158 > -INFINITY)
                      {
                        v160 = exp(v158 - v159);
                        v159 = v159 + log1p(v160);
                      }
                      *(double *)(v150 + 32) = v159;
                      v161 = *(_QWORD **)(a1 + 80);
                      v162 = *(_QWORD **)(a1 + 88);
                      if (v161 != v162)
                      {
                        while (*v161 != *(_QWORD *)v150)
                        {
                          if (++v161 == v162)
                          {
                            v161 = *(_QWORD **)(a1 + 88);
                            break;
                          }
                        }
                      }
                      if (v161 != v162)
                      {
                        *(_QWORD *)(v150 + 8) = v260;
                        *(double *)(v150 + 40) = v148;
                      }
                      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v261, v262, 0x4EC4EC4EC4EC4EC5 * ((v262 - v261) >> 3));
                    }
                  }
                }
                ++v143;
                v163 = v144 == 0;
                if (v144)
                  ++v144;
                else
                  v144 = 0;
                if (v163)
                  v142 = v142 + 1.0;
              }
              while (v143 != (float *)(v245 + 4 * v247));
            }
            v164 = (uint64_t *)v131[1];
            if (v164)
            {
              do
              {
                v165 = v164;
                v164 = (uint64_t *)*v164;
              }
              while (v164);
            }
            else
            {
              do
              {
                v165 = (uint64_t *)v131[2];
                v31 = *v165 == (_QWORD)v131;
                v131 = v165;
              }
              while (!v31);
            }
            v131 = v165;
          }
          while (v165 != (uint64_t *)&v256);
        }
      }
      std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(v256);
      v256 = 0;
      v257 = 0;
      v255 = (uint64_t *)&v256;
      v167 = v261;
      v166 = v262;
      if (v262 - v261 >= 105)
      {
        v168 = (v262 - v261) / 0x68uLL;
        do
        {
          std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v167, v166, v168);
          v166 -= 104;
          v169 = v168-- > 2;
        }
        while (v169);
        v167 = v261;
        v166 = v262;
      }
      while (v167 != v166 && v257 < *(int *)(a1 + 112))
      {
        if (*(double *)(v167 + 32) > -INFINITY)
        {
          v170 = operator new();
          v171 = *(_OWORD *)v167;
          v172 = *(_OWORD *)(v167 + 16);
          v173 = *(_OWORD *)(v167 + 48);
          *(_OWORD *)(v170 + 32) = *(_OWORD *)(v167 + 32);
          *(_OWORD *)(v170 + 48) = v173;
          *(_OWORD *)v170 = v171;
          *(_OWORD *)(v170 + 16) = v172;
          *(_QWORD *)&v171 = *(_QWORD *)(v167 + 72);
          *(_QWORD *)(v170 + 80) = 0;
          *(_QWORD *)(v170 + 72) = v171;
          *(_QWORD *)(v170 + 64) = &off_1E98D8F00;
          *(_QWORD *)(v170 + 88) = 0;
          *(_QWORD *)(v170 + 96) = 0;
          std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__init_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>((char *)(v170 + 80), *(_QWORD **)(v167 + 80), *(_QWORD **)(v167 + 88), (uint64_t)(*(_QWORD *)(v167 + 88) - *(_QWORD *)(v167 + 80)) >> 4);
          v263 = v170;
          v174 = v258.i64[1];
          if (v258.i64[1] >= v259)
          {
            v176 = (v258.i64[1] - v258.i64[0]) >> 3;
            if ((unint64_t)(v176 + 1) >> 61)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v177 = (uint64_t)(v259 - v258.i64[0]) >> 2;
            if (v177 <= v176 + 1)
              v177 = v176 + 1;
            if (v259 - v258.i64[0] >= 0x7FFFFFFFFFFFFFF8)
              v178 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v178 = v177;
            v272 = &v259;
            if (v178)
              v178 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v178);
            else
              v179 = 0;
            v180 = (uint64_t *)(v178 + 8 * v176);
            v181 = v178 + 8 * v179;
            v271 = (unint64_t *)v181;
            v263 = 0;
            *v180 = v170;
            v175 = v180 + 1;
            v270.i64[1] = (uint64_t)(v180 + 1);
            v182 = (_QWORD *)v258.i64[1];
            v183 = (_QWORD *)v258.i64[0];
            if (v258.i64[1] == v258.i64[0])
            {
              v185 = vdupq_n_s64(v258.u64[1]);
            }
            else
            {
              do
              {
                v184 = *--v182;
                *v182 = 0;
                *--v180 = v184;
              }
              while (v182 != v183);
              v185 = v258;
              v175 = (_QWORD *)v270.i64[1];
              v181 = (unint64_t)v271;
            }
            v258.i64[0] = (uint64_t)v180;
            v258.i64[1] = (uint64_t)v175;
            v270 = v185;
            v186 = (unint64_t *)v259;
            v259 = v181;
            v271 = v186;
            v269 = (unint64_t *)v185.i64[0];
            std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer((uint64_t)&v269);
          }
          else
          {
            v263 = 0;
            *(_QWORD *)v258.i64[1] = v170;
            v175 = (_QWORD *)(v174 + 8);
          }
          v258.i64[1] = (uint64_t)v175;
          std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100](&v263);
          CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>::getReversePrefix((char **)&v269, (_QWORD *)v167);
          v263 = *(_QWORD *)(v258.i64[1] - 8);
          std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__emplace_unique_key_args<std::vector<unsigned long>,std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *&>(&v255, v269, (unint64_t *)v270.i64[0], (uint64_t)&v269, &v263);
          if (v269)
          {
            v270.i64[0] = (uint64_t)v269;
            operator delete(v269);
          }
          v166 = v262;
        }
        v167 += 104;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v24 = v260 + 1;
      v260 = v24;
      a2 = v244;
      if (v24 >= *v244)
        goto LABEL_275;
    }
    v46 = v40;
    while (1)
    {
      v47 = v45[7];
      v48 = CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(&v261);
      v49 = v48;
      v50 = *(_OWORD *)v47;
      v51 = *(_OWORD *)(v47 + 16);
      v52 = *(_OWORD *)(v47 + 48);
      *(_OWORD *)(v48 + 32) = *(_OWORD *)(v47 + 32);
      *(_OWORD *)(v48 + 48) = v52;
      *(_OWORD *)v48 = v50;
      *(_OWORD *)(v48 + 16) = v51;
      *(_QWORD *)(v48 + 72) = *(_QWORD *)(v47 + 72);
      if (v48 != v47)
        std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>(v48 + 80, *(uint64_t **)(v47 + 80), *(uint64_t **)(v47 + 88), (uint64_t)(*(_QWORD *)(v47 + 88) - *(_QWORD *)(v47 + 80)) >> 4);
      if (!*(_QWORD *)(v49 + 56))
      {
        v56 = *(double *)(v49 + 16);
        goto LABEL_120;
      }
      v53 = *(_QWORD *)v49;
      if (!v250)
        goto LABEL_67;
      if (v250 == v35)
      {
        v55 = v250;
      }
      else
      {
        v54 = (float)(unint64_t)v53;
        v55 = v246;
        while (*v55 != v54)
        {
          if (++v55 == v35)
          {
            v55 = v35;
            break;
          }
        }
      }
      if (v55 != v35)
        break;
      v57 = -INFINITY;
LABEL_71:
      v58 = v57;
      CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::updateActivationProgression(a1 + 64, v49, v260, v57);
      v59 = (unint64_t *)__p[0];
      __p[1] = __p[0];
      v60 = v45[4];
      v61 = v45[5];
      if (v60 == v61)
      {
        v62 = (unint64_t *)__p[0];
      }
      else
      {
        std::vector<unsigned long>::reserve(__p, ((v61 - v60) >> 3) - 1);
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>((_QWORD *)(v45[4] + 8), (_QWORD *)v45[5], (uint64_t)__p);
        v62 = (unint64_t *)__p[0];
        v59 = (unint64_t *)__p[1];
      }
      v63 = std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>((uint64_t)&v255, v62, v59);
      if (&v256 == v63)
      {
        v77 = *(double *)(v49 + 16);
      }
      else
      {
        v64 = v63;
        v65 = v63[7];
        v66 = *(double **)(v49 + 56);
        if (v66 == (double *)v65 || v65 == 0 || v66 == 0)
        {
LABEL_89:
          v72 = *(_QWORD *)v49;
          v73 = 32;
          if (*(_QWORD *)v49 == *(_QWORD *)v66)
            v73 = 24;
          v74 = *(double *)(v65 + v73);
          v75 = *(double *)(v49 + 16);
          if (v75 <= v74)
            v76 = *(double *)(v49 + 16);
          else
            v76 = *(double *)(v65 + v73);
          if (v75 <= v74)
            v77 = *(double *)(v65 + v73);
          else
            v77 = *(double *)(v49 + 16);
          if (v76 > -INFINITY)
          {
            v78 = exp(v76 - v77);
            v77 = v77 + log1p(v78);
          }
          if (*(double *)(v65 + 32) > v66[4])
          {
            *(_QWORD *)(v49 + 56) = v65;
            if (*(_QWORD *)(v49 + 8) <= *(_QWORD *)(v65 + 8))
            {
              v79 = *(_QWORD **)(a1 + 80);
              v80 = *(_QWORD **)(a1 + 88);
              if (v79 != v80)
              {
                while (*v79 != v72)
                {
                  if (++v79 == v80)
                  {
                    v79 = *(_QWORD **)(a1 + 88);
                    break;
                  }
                }
              }
              if (v79 != v80)
              {
                *(_QWORD *)(v49 + 8) = v260;
                *(double *)(v49 + 40) = v58;
              }
            }
          }
        }
        else
        {
          v69 = (uint64_t *)v49;
          while (1)
          {
            v70 = *v69;
            if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 48))(a1 + 64, *(_QWORD *)v66) == 2
              || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 48))(a1 + 64, v70) == 1)
            {
              break;
            }
            v71 = *((_QWORD *)v66 + 7);
            if (v71)
            {
              v65 = *(_QWORD *)(v65 + 56);
              if (v65)
              {
                v69 = (uint64_t *)v66;
                v66 = (double *)*((_QWORD *)v66 + 7);
                if (v71 != v65)
                  continue;
              }
            }
            v66 = *(double **)(v49 + 56);
            v65 = v64[7];
            goto LABEL_89;
          }
          v81 = *(_QWORD *)v49;
          v82 = v64[7];
          v83 = 32;
          if (*(_QWORD *)v49 == **(_QWORD **)(v49 + 56))
            v83 = 24;
          v84 = *(double *)(v82 + v83);
          v77 = *(double *)(v49 + 16);
          v85 = *(double *)(v47 + 32) + v46;
          if (v77 + v58 <= v85)
            v86 = v77 + v58;
          else
            v86 = *(double *)(v47 + 32) + v46;
          if (v77 + v58 <= v85)
            v87 = *(double *)(v47 + 32) + v46;
          else
            v87 = v77 + v58;
          if (v86 > -INFINITY)
          {
            v88 = exp(v86 - v87);
            v87 = v87 + log1p(v88);
          }
          v89 = v84 + v58;
          if (v84 + v58 > v87)
          {
            v96 = v260;
            *(_QWORD *)(v49 + 8) = v260;
            *(_QWORD *)(v49 + 56) = v82;
            *(_QWORD *)(v49 + 24) = 0xFFF0000000000000;
            *(double *)(v49 + 16) = v89;
            *(double *)(v49 + 32) = v89;
            v97 = *(_QWORD **)(a1 + 80);
            v98 = *(_QWORD **)(a1 + 88);
            if (v97 != v98)
            {
              while (*v97 != v81)
              {
                if (++v97 == v98)
                {
                  v97 = *(_QWORD **)(a1 + 88);
                  break;
                }
              }
            }
            if (v97 != v98)
            {
              *(_QWORD *)(v49 + 8) = v96;
              *(double *)(v49 + 40) = v58;
            }
            goto LABEL_129;
          }
        }
      }
      v56 = v77 + v58;
      *(double *)(v49 + 16) = v77 + v58;
LABEL_120:
      v90 = *(double *)(v47 + 32) + v46;
      *(double *)(v49 + 24) = v90;
      if (v90 <= v56)
        v91 = v90;
      else
        v91 = v56;
      if (v90 <= v56)
        v92 = v56;
      else
        v92 = v90;
      if (v91 > -INFINITY)
      {
        v93 = exp(v91 - v92);
        v92 = v92 + log1p(v93);
      }
      *(double *)(v49 + 32) = v92;
LABEL_129:
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v261, v262, 0x4EC4EC4EC4EC4EC5 * ((v262 - v261) >> 3));
      v94 = (uint64_t *)v45[1];
      if (v94)
      {
        do
        {
          v95 = v94;
          v94 = (uint64_t *)*v94;
        }
        while (v94);
      }
      else
      {
        do
        {
          v95 = (uint64_t *)v45[2];
          v31 = *v95 == (_QWORD)v45;
          v45 = v95;
        }
        while (!v31);
      }
      v45 = v95;
      if (v95 == (uint64_t *)&v256)
        goto LABEL_142;
    }
    v53 = v55 - v250;
LABEL_67:
    v57 = v249[v53];
    if (v57 > -0.0010005)
      v57 = -0.0010005;
    goto LABEL_71;
  }
LABEL_275:
  v187 = v255;
  if (v255 != (uint64_t *)&v256)
  {
    do
    {
      *(double *)(v187[7] + 48) = CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::finalizeState(a1 + 16, v187[7] + 64)+ *(double *)(v187[7] + 48);
      v188 = (uint64_t *)v187[1];
      if (v188)
      {
        do
        {
          v189 = v188;
          v188 = (uint64_t *)*v188;
        }
        while (v188);
      }
      else
      {
        do
        {
          v189 = (uint64_t *)v187[2];
          v31 = *v189 == (_QWORD)v187;
          v187 = v189;
        }
        while (!v31);
      }
      v187 = v189;
    }
    while (v189 != (uint64_t *)&v256);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<CoreRecognition::decoder::DecodingPath>::reserve(a4, *(int *)(a1 + 116));
  v266 = 0;
  v267 = 0;
  v268 = 0;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *,std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>::reserve((void **)&v266, v257);
  v190 = v255;
  if (v255 == (uint64_t *)&v256)
  {
    v191 = v267;
  }
  else
  {
    v191 = v267;
    do
    {
      if ((unint64_t)v191 >= v268)
      {
        v192 = (char *)v266;
        v193 = (v191 - (char *)v266) >> 3;
        v194 = v193 + 1;
        if ((unint64_t)(v193 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v195 = v268 - (_QWORD)v266;
        if ((uint64_t)(v268 - (_QWORD)v266) >> 2 > v194)
          v194 = v195 >> 2;
        if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v194;
        if (v196)
          v196 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v196);
        else
          v197 = 0;
        v198 = (_QWORD *)(v196 + 8 * v193);
        *v198 = v190[7];
        v199 = (char *)(v198 + 1);
        if (v191 != v192)
        {
          do
          {
            v200 = *((_QWORD *)v191 - 1);
            v191 -= 8;
            *--v198 = v200;
          }
          while (v191 != v192);
          v191 = (char *)v266;
        }
        v266 = v198;
        v267 = v199;
        v268 = v196 + 8 * v197;
        if (v191)
          operator delete(v191);
        v191 = v199;
      }
      else
      {
        *(_QWORD *)v191 = v190[7];
        v191 += 8;
      }
      v267 = v191;
      v201 = (uint64_t *)v190[1];
      if (v201)
      {
        do
        {
          v202 = v201;
          v201 = (uint64_t *)*v201;
        }
        while (v201);
      }
      else
      {
        do
        {
          v202 = (uint64_t *)v190[2];
          v31 = *v202 == (_QWORD)v190;
          v190 = v202;
        }
        while (!v31);
      }
      v190 = v202;
    }
    while (v202 != (uint64_t *)&v256);
  }
  v203 = *(int *)(a1 + 116);
  v204 = (char *)v266;
  if (v203 >= (v191 - (char *)v266) >> 3)
    v205 = (uint64_t *)v191;
  else
    v205 = &v266[v203];
  if (v266 == v205)
    goto LABEL_340;
  v206 = (char *)v205 - (char *)v266;
  if ((char *)v205 - (char *)v266 >= 9)
  {
    v207 = (unint64_t)(v205 - v266 - 2) >> 1;
    v208 = v207 + 1;
    v209 = (char *)&v266[v207];
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(CoreRecognition::decoder::ActivationMatrix const&,CoreRecognition::decoder::Context const&)::{lambda(CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*)#1} &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>**>>((uint64_t)v204, ((char *)v205 - v204) >> 3, v209);
      v209 -= 8;
      --v208;
    }
    while (v208);
  }
  if (v191 != (char *)v205)
  {
    v210 = v205;
    do
    {
      v211 = *v210;
      if (*(double *)(*v210 + 32) + *(double *)(*v210 + 48) > *(double *)(*(_QWORD *)v204 + 32)
                                                             + *(double *)(*(_QWORD *)v204 + 48))
      {
        *v210 = *(_QWORD *)v204;
        *(_QWORD *)v204 = v211;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(CoreRecognition::decoder::ActivationMatrix const&,CoreRecognition::decoder::Context const&)::{lambda(CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*)#1} &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>**>>((uint64_t)v204, ((char *)v205 - v204) >> 3, v204);
      }
      ++v210;
    }
    while (v210 != (uint64_t *)v191);
  }
  if (v206 < 9)
  {
LABEL_340:
    v214 = a4;
  }
  else
  {
    v212 = (unint64_t)v206 >> 3;
    v213 = v205;
    v214 = a4;
    do
    {
      v215 = 0;
      v216 = *(_QWORD *)v204;
      v217 = v212 - 2;
      if (v212 < 2)
        v217 = v212 - 1;
      v218 = v217 >> 1;
      v219 = v204;
      do
      {
        v220 = v219;
        v219 += 8 * v215 + 8;
        v221 = 2 * v215;
        v215 = (2 * v215) | 1;
        v222 = v221 + 2;
        if (v222 < v212
          && *(double *)(*(_QWORD *)v219 + 32) + *(double *)(*(_QWORD *)v219 + 48) > *(double *)(*((_QWORD *)v219 + 1) + 32)
                                                                                       + *(double *)(*((_QWORD *)v219 + 1) + 48))
        {
          v219 += 8;
          v215 = v222;
        }
        *(_QWORD *)v220 = *(_QWORD *)v219;
      }
      while (v215 <= v218);
      if (--v213 == (uint64_t *)v219)
      {
        *(_QWORD *)v219 = v216;
      }
      else
      {
        *(_QWORD *)v219 = *v213;
        *v213 = v216;
        v223 = v219 - v204 + 8;
        if (v223 >= 9)
        {
          v224 = (((unint64_t)v223 >> 3) - 2) >> 1;
          v225 = &v204[8 * v224];
          v226 = *(_QWORD *)v225;
          v227 = *(_QWORD *)v219;
          v228 = *(double *)(*(_QWORD *)v219 + 32) + *(double *)(*(_QWORD *)v219 + 48);
          if (*(double *)(*(_QWORD *)v225 + 32) + *(double *)(*(_QWORD *)v225 + 48) > v228)
          {
            do
            {
              v229 = v225;
              *(_QWORD *)v219 = v226;
              if (!v224)
                break;
              v224 = (v224 - 1) >> 1;
              v225 = &v204[8 * v224];
              v226 = *(_QWORD *)v225;
              v219 = v229;
            }
            while (*(double *)(*(_QWORD *)v225 + 32) + *(double *)(*(_QWORD *)v225 + 48) > v228);
            *(_QWORD *)v229 = v227;
          }
        }
      }
      v169 = v212-- <= 2;
    }
    while (!v169);
    v204 = (char *)v266;
  }
  if (v204 == (char *)v205)
  {
    v204 = (char *)v205;
  }
  else
  {
    v230 = a1 + 64;
    v231 = (uint64_t)(v214 + 2);
    v232 = (uint64_t *)v204;
    do
    {
      if (*(_QWORD *)(*v232 + 56))
      {
        CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::createResultPathFromBeamEntry(v230, *v232, *a2, (uint64_t)__p);
        v233 = a4;
        v234 = a4[1];
        v235 = a4[2];
        if (v234 >= v235)
        {
          v237 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v234 - *a4) >> 3);
          v238 = v237 + 1;
          if (v237 + 1 > 0x666666666666666)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v239 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v235 - *a4) >> 3);
          if (2 * v239 > v238)
            v238 = 2 * v239;
          if (v239 >= 0x333333333333333)
            v240 = 0x666666666666666;
          else
            v240 = v238;
          v272 = (_QWORD *)v231;
          if (v240)
            v241 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>(v231, v240);
          else
            v241 = 0;
          v242 = &v241[5 * v237];
          v269 = v241;
          v270.i64[0] = (uint64_t)v242;
          v271 = &v241[5 * v240];
          *v242 = 0;
          v242[1] = 0;
          v242[2] = 0;
          *(_OWORD *)v242 = *(_OWORD *)__p;
          v242[2] = (unint64_t)v253;
          __p[0] = 0;
          __p[1] = 0;
          v253 = 0;
          *(_OWORD *)(v242 + 3) = v254;
          v270.i64[1] = (uint64_t)(v242 + 5);
          v233 = a4;
          std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a4, &v269);
          v236 = a4[1];
          std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer((void **)&v269);
        }
        else
        {
          *(_QWORD *)v234 = 0;
          *(_QWORD *)(v234 + 8) = 0;
          *(_QWORD *)(v234 + 16) = 0;
          *(_OWORD *)v234 = *(_OWORD *)__p;
          *(_QWORD *)(v234 + 16) = v253;
          __p[0] = 0;
          __p[1] = 0;
          v253 = 0;
          *(_OWORD *)(v234 + 24) = v254;
          v236 = v234 + 40;
        }
        v233[1] = v236;
        v269 = (unint64_t *)__p;
        std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v269);
        a2 = v244;
      }
      ++v232;
    }
    while (v232 != v205);
  }
  if (v204)
  {
    v267 = v204;
    operator delete(v204);
  }
  v269 = (unint64_t *)&v261;
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v269);
  v269 = (unint64_t *)&v258;
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v269);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(v256);
}

void sub_1D510C714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::~BeamSearchState((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E98D8F70;
  *(_QWORD *)(a1 + 64) = &off_1E98D9050;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 16) = &off_1E98D90E0;
  v4 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

_QWORD *CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::~SpaceSegmentedPathBuilder(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E98D9050;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D510C940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D510CD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D510EAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_Unwind_Exception *exception_object)
{
  void *v56;
  void *v57;
  void *v58;

  _Unwind_Resume(a1);
}

unint64_t *CoreRecognition::decoder::ActivationMatrix::reverseInTime(unint64_t *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;

  v1 = *this;
  if (*this >= 2)
  {
    v2 = 0;
    v3 = this[1];
    v4 = this[8];
    v5 = this[9];
    do
    {
      v6 = v2 * v3;
      v7 = v2 + 1;
      if (v2 * v3 != (v2 + 1) * v3)
      {
        v8 = (v1 + ~v2) * v3;
        v9 = (_DWORD *)(v4 + 4 * v8);
        this = (unint64_t *)(v4 + 4 * v6);
        v10 = 4 * v3;
        do
        {
          v11 = *(_DWORD *)this;
          *(_DWORD *)this = *v9;
          this = (unint64_t *)((char *)this + 4);
          *v9++ = v11;
          v10 -= 4;
        }
        while (v10);
        if (v5)
        {
          v12 = (int *)(v5 + 4 * v8);
          v13 = 4 * v3;
          v14 = (int *)(v5 + 4 * v6);
          do
          {
            v15 = *v14;
            *v14++ = *v12;
            *v12++ = v15;
            v13 -= 4;
          }
          while (v13);
        }
      }
      v2 = v7;
    }
    while (v7 != v1 >> 1);
  }
  return this;
}

void sub_1D510F3B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  if (*(_BYTE *)(result + 8))
  {
    if (*(double *)(a2 + 40) < a4)
    {
      *(_QWORD *)(a2 + 8) = a3;
      *(double *)(a2 + 40) = a4;
    }
  }
  return result;
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::BaseState>::updateActivationExtension(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a3 + 8) = a4;
  *(double *)(a3 + 40) = a1;
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::~AdditiveCombiningBeamScorer(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E98D90E0;
  v1 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1D826E294);
}

_QWORD *CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::createState()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E98D8F00;
  result[1] = 0;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(*(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 32), a2, a3);
}

double CoreRecognition::decoder::BaseBeamScorer::getCachedExpandStateScore(CoreRecognition::decoder::BaseBeamScorer *this, const CoreRecognition::decoder::BaseState *a2)
{
  return *((double *)a2 + 1);
}

double CoreRecognition::decoder::BaseBeamScorer::finalizeState(CoreRecognition::decoder::BaseBeamScorer *this, CoreRecognition::decoder::BaseState *a2)
{
  return 0.0;
}

void CoreRecognition::decoder::CombinedBeamState::~CombinedBeamState(CoreRecognition::decoder::CombinedBeamState *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E98D8F00;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E98D8F00;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1D826E294);
}

uint64_t CoreRecognition::decoder::CombinedBeamState::reset(CoreRecognition::decoder::CombinedBeamState *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 2);
  while (result != v3)
    result = std::shared_ptr<CoreRecognition::decoder::BaseState>::~shared_ptr[abi:ne180100](result - 16);
  *((_QWORD *)this + 3) = v3;
  return result;
}

void std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<CoreRecognition::decoder::BaseState>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::shared_ptr<CoreRecognition::decoder::BaseState>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::initializeState(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((uint64_t *)result != a2)
  {
    v7 = (uint64_t *)result;
    v8 = a3 + 2;
    do
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v7 + 16))(*v7);
      v13 = v9;
      v10 = a3[3];
      if (v10 >= a3[4])
      {
        v11 = std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<CoreRecognition::decoder::BaseState*>(v8, &v13);
      }
      else
      {
        std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>((_QWORD *)a3[3], v9);
        v11 = v10 + 16;
        a3[3] = v10 + 16;
      }
      a3[3] = v11;
      v12 = *v7++;
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 24))(v12, *(_QWORD *)(v11 - 16), a4);
    }
    while (v7 != a2);
  }
  return result;
}

void sub_1D510F864(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<CoreRecognition::decoder::BaseState*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  int64x2_t v15;
  unint64_t v16;
  unint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  _QWORD *v21;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  v7 = a1[2] - *a1;
  if (v7 >> 3 > v3)
    v3 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v21 = v6;
  if (v8)
    v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v8);
  else
    v9 = 0;
  v18 = v8;
  v19.i64[0] = v8 + 16 * v2;
  v19.i64[1] = v19.i64[0];
  v20 = v8 + 16 * v9;
  std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>(v19.i64[0], *a2);
  v10 = v19.i64[0];
  v11 = v19.i64[0] + 16;
  v19.i64[1] = v19.i64[0] + 16;
  v13 = (_QWORD *)*a1;
  v12 = (_QWORD *)a1[1];
  if (v12 == (_QWORD *)*a1)
  {
    v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v12 - 1);
      v12 -= 2;
      *(_OWORD *)(v10 - 16) = v14;
      v10 -= 16;
      *v12 = 0;
      v12[1] = 0;
    }
    while (v12 != v13);
    v15 = *(int64x2_t *)a1;
    v11 = v19.i64[1];
  }
  *a1 = v10;
  a1[1] = v11;
  v19 = v15;
  v16 = a1[2];
  a1[2] = v20;
  v20 = v16;
  v18 = v15.i64[0];
  std::__split_buffer<std::shared_ptr<CoreRecognition::decoder::BaseState>>::~__split_buffer((uint64_t)&v18);
  return v11;
}

void sub_1D510F974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<CoreRecognition::decoder::BaseState>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E98D93E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D510F9DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CoreRecognition::decoder::BaseState *,std::shared_ptr<CoreRecognition::decoder::BaseState>::__shared_ptr_default_delete<CoreRecognition::decoder::BaseState,CoreRecognition::decoder::BaseState>,std::allocator<CoreRecognition::decoder::BaseState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D826E294);
}

uint64_t std::__shared_ptr_pointer<CoreRecognition::decoder::BaseState *,std::shared_ptr<CoreRecognition::decoder::BaseState>::__shared_ptr_default_delete<CoreRecognition::decoder::BaseState,CoreRecognition::decoder::BaseState>,std::allocator<CoreRecognition::decoder::BaseState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreRecognition::decoder::BaseState *,std::shared_ptr<CoreRecognition::decoder::BaseState>::__shared_ptr_default_delete<CoreRecognition::decoder::BaseState,CoreRecognition::decoder::BaseState>,std::allocator<CoreRecognition::decoder::BaseState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__split_buffer<std::shared_ptr<CoreRecognition::decoder::BaseState>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<CoreRecognition::decoder::BaseState>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v7;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double result;
  uint64_t v21;

  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  if (v6 == v7)
  {
    v11 = 0.0;
  }
  else
  {
    v11 = 0.0;
    do
    {
      v12 = *(_QWORD *)(a4 + 16);
      v13 = *(_QWORD *)(a4 + 24);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 16))(*v6);
      v21 = v14;
      v15 = *(_QWORD *)(a4 + 24);
      if (v15 >= *(_QWORD *)(a4 + 32))
      {
        v16 = std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__emplace_back_slow_path<CoreRecognition::decoder::BaseState*>((uint64_t *)(a4 + 16), &v21);
      }
      else
      {
        std::shared_ptr<CoreRecognition::decoder::BaseState>::shared_ptr[abi:ne180100]<CoreRecognition::decoder::BaseState,void>(*(_QWORD **)(a4 + 24), v14);
        v16 = v15 + 16;
        *(_QWORD *)(a4 + 24) = v15 + 16;
      }
      *(_QWORD *)(a4 + 24) = v16;
      v17 = *v6++;
      v11 = v11
          + (*(double (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 32))(v17, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * ((v13 - v12) >> 4)), a3, *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16 * ((v13 - v12) >> 4)), a5);
    }
    while (v6 != v7);
  }
  v18 = *(double *)(a1 + 16);
  if (v18 <= v11)
    v18 = v11;
  result = *(double *)(a1 + 8) * v18;
  *(double *)(a4 + 8) = result;
  return result;
}

void sub_1D510FBE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

double CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>::finalizeState(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;

  v4 = *(double *)(a2 + 8);
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(uint64_t **)(a1 + 32);
  if (v5 == v6)
  {
    v8 = 0.0;
  }
  else
  {
    v7 = 0;
    v8 = 0.0;
    do
    {
      v9 = *v5++;
      v8 = v8
         + (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v7));
      v7 += 16;
    }
    while (v5 != v6);
  }
  v10 = *(double *)(a1 + 8);
  v11 = *(double *)(a1 + 16);
  if (v11 <= v8 + v4 / v10)
    v11 = v8 + v4 / v10;
  *(double *)(a2 + 8) = v10 * v11;
  return v8;
}

_QWORD *CoreRecognition::decoder::MixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::createState()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E98D8E90;
  return result;
}

double CoreRecognition::decoder::MixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::expandState(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  double result;
  double v11;

  v9 = (*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a5);
  *(_DWORD *)(a4 + 20) = v9;
  if (a3 == -1)
  {
    *(_BYTE *)(a4 + 16) = 0;
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(double *, uint64_t))(*(_QWORD *)a1 + 64))(a1, v9))
  {
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a4 + 16) = *(_BYTE *)(a2 + 16);
LABEL_5:
    *(_QWORD *)(a4 + 8) = 0;
    return 0.0;
  }
  if (!*(_BYTE *)(a2 + 16)
    && ((*(uint64_t (**)(double *, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a4 + 20)) & 1) == 0)
  {
    return *(double *)(a4 + 8);
  }
  *(_BYTE *)(a4 + 16) = 1;
  v11 = a1[6];
  if (a1[2] > v11)
    v11 = a1[2];
  result = a1[1] * v11;
  *(double *)(a4 + 8) = result;
  return result;
}

uint64_t CoreRecognition::decoder::MixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::labelToScriptCode(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  void *v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (*(_QWORD *)(a1 + 32) - v2) >> 2;
  if (v3 > a2)
    return *(unsigned int *)(v2 + 4 * a2);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Label=%lu is out-of-bounds for labelToScriptMap of size=%lu"), a2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CVNLPLogGeneralFault();

  return 0;
}

void sub_1D510FE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::MixedScriptState::~MixedScriptState(CoreRecognition::decoder::MixedScriptState *this)
{
  JUMPOUT(0x1D826E294);
}

void std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::~CharacterSegmentedPathBuilder()
{
  JUMPOUT(0x1D826E294);
}

uint64_t CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>::needsToBeCommitted()
{
  return 1;
}

void std::vector<CoreRecognition::decoder::DecodingPath>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 5;
        v5 = v3;
        std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::~CharacterSegmentedPathBuilder()
{
  JUMPOUT(0x1D826E294);
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::createResultPathFromBeamEntry(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v5;
  double **v6;
  double *v8;
  int v10;
  int v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *i;
  __int128 *v52;
  __int128 *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  void *__p[2];
  char *v62;
  double v63;
  __int128 v64;
  __int128 v65;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v5 = *(double *)(a2 + 32);
  *(double *)(a4 + 24) = v5 + *(double *)(a2 + 48);
  *(double *)(a4 + 32) = v5;
  v64 = 0u;
  v65 = 0u;
  *(_OWORD *)__p = 0u;
  v62 = 0;
  v63 = v5;
  v6 = (double **)(a2 + 56);
  if (!*(_QWORD *)(a2 + 56))
  {
    v50 = 0;
    v49 = 0;
    goto LABEL_78;
  }
  v8 = (double *)a2;
  do
  {
    ++*((_QWORD *)&v65 + 1);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(_QWORD *)v8);
    v11 = v10;
    if (v10 != 2)
    {
      if (!v10)
      {
        v16 = (char *)__p[1];
        if (__p[1] >= v62)
        {
          v23 = (char *)__p[0];
          v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
LABEL_92:
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v26 = v62 - (char *)__p[0];
          if ((v62 - (char *)__p[0]) >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v27);
            v23 = (char *)__p[0];
            v16 = (char *)__p[1];
          }
          else
          {
            v28 = 0;
          }
          v44 = &v28[8 * v24];
          *(double *)v44 = *v8;
          v12 = v44 + 8;
          while (v16 != v23)
          {
            v45 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v44 - 1) = v45;
            v44 -= 8;
          }
          __p[0] = v44;
          __p[1] = v12;
          v62 = &v28[8 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(double *)__p[1] = *v8;
          v12 = v16 + 8;
        }
        __p[1] = v12;
        goto LABEL_64;
      }
      if (v10 == 1)
      {
        v13 = (char *)__p[1];
        if (__p[1] >= v62)
        {
          v17 = (char *)__p[0];
          v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            goto LABEL_92;
          v20 = v62 - (char *)__p[0];
          if ((v62 - (char *)__p[0]) >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v21);
            v17 = (char *)__p[0];
            v13 = (char *)__p[1];
          }
          else
          {
            v22 = 0;
          }
          v29 = &v22[8 * v18];
          *(double *)v29 = *v8;
          v14 = v29 + 8;
          while (v13 != v17)
          {
            v30 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v29 - 1) = v30;
            v29 -= 8;
          }
          __p[0] = v29;
          __p[1] = v14;
          v62 = &v22[8 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(double *)__p[1] = *v8;
          v14 = v13 + 8;
        }
        __p[1] = v14;
        v15 = *((_QWORD *)v8 + 1);
      }
      else
      {
LABEL_10:
        v15 = *((_QWORD *)v8 + 1) + 1;
      }
      *((_QWORD *)&v64 + 1) = v15;
      *(_QWORD *)&v65 = a3;
      v31 = *(_QWORD *)(a4 + 8);
      if (v31 >= *(_QWORD *)(a4 + 16))
      {
        v32 = std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
      }
      else
      {
        std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
        v32 = v31 + 64;
      }
      *(_QWORD *)(a4 + 8) = v32;
      v12 = (char *)__p[0];
      __p[1] = __p[0];
      *((_QWORD *)&v65 + 1) = 0;
      if (v11 == 2)
      {
        if (__p[0] >= v62)
        {
          v35 = (v62 - (char *)__p[0]) >> 2;
          if (v35 <= 1)
            v35 = 1;
          if ((unint64_t)(v62 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v36);
          v39 = (char *)__p[0];
          v40 = (char *)__p[1];
          *(double *)v38 = *v8;
          v12 = v38 + 8;
          v41 = v38;
          while (v40 != v39)
          {
            v42 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          __p[0] = v41;
          __p[1] = v38 + 8;
          v62 = &v38[8 * v37];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(double *)__p[0] = *v8;
          v12 += 8;
        }
        __p[1] = v12;
        v33 = v8;
      }
      else
      {
        v33 = *v6;
        if (!*v6)
        {
          v34 = 0.0;
LABEL_56:
          v43 = *((_QWORD *)v8 + 5);
          v63 = v34;
          *(_QWORD *)&v64 = v43;
          a3 = v15;
          goto LABEL_64;
        }
      }
      v34 = v33[4];
      goto LABEL_56;
    }
    v12 = (char *)__p[0];
    if (__p[0] != __p[1])
      goto LABEL_10;
LABEL_64:
    v8 = *v6;
    v46 = *v6;
    v47 = *((_QWORD *)v46 + 7);
    v6 = (double **)(v46 + 7);
  }
  while (v47);
  if (__p[0] != v12)
  {
    *((_QWORD *)&v64 + 1) = 0;
    *(_QWORD *)&v65 = a3;
    v48 = *(_QWORD *)(a4 + 8);
    if (v48 >= *(_QWORD *)(a4 + 16))
    {
      v49 = (__int128 *)std::vector<CoreRecognition::decoder::DecodingToken>::__emplace_back_slow_path<CoreRecognition::decoder::DecodingToken&>((uint64_t *)a4, (uint64_t)__p);
    }
    else
    {
      std::vector<CoreRecognition::decoder::DecodingToken>::__construct_one_at_end[abi:ne180100]<CoreRecognition::decoder::DecodingToken&>(a4, (uint64_t)__p);
      v49 = (__int128 *)(v48 + 64);
    }
    *(_QWORD *)(a4 + 8) = v49;
    v50 = *(__int128 **)a4;
    goto LABEL_73;
  }
  v50 = *(__int128 **)a4;
  v49 = *(__int128 **)(a4 + 8);
  if (*(__int128 **)a4 == v49)
  {
    v50 = *(__int128 **)(a4 + 8);
  }
  else
  {
    *((_QWORD *)v49 - 3) = 0;
LABEL_73:
    if (v50 != v49)
    {
      for (i = v50 + 4; i != v49; i += 4)
        *((double *)i - 5) = *((double *)i - 5) - *((double *)i + 3);
    }
  }
LABEL_78:
  std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>,std::__wrap_iter<CoreRecognition::decoder::DecodingToken *>>(v50, v49);
  v52 = *(__int128 **)a4;
  v53 = *(__int128 **)(a4 + 8);
  while (v52 != v53)
  {
    v54 = *(_QWORD *)v52;
    v55 = *((_QWORD *)v52 + 1);
    v56 = (_QWORD *)(v55 - 8);
    if (*(_QWORD *)v52 != v55 && (unint64_t)v56 > v54)
    {
      v58 = v54 + 8;
      do
      {
        v59 = *(_QWORD *)(v58 - 8);
        *(_QWORD *)(v58 - 8) = *v56;
        *v56-- = v59;
        v60 = v58 >= (unint64_t)v56;
        v58 += 8;
      }
      while (!v60);
    }
    v52 += 4;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D5110388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<CoreRecognition::decoder::DecodingToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  if (*(_BYTE *)(result + 8))
  {
    if (*(double *)(a2 + 40) < a4)
    {
      *(_QWORD *)(a2 + 8) = a3;
      *(double *)(a2 + 40) = a4;
    }
  }
  return result;
}

void CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::updateActivationExtension(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a3 + 8) = a4;
  *(double *)(a3 + 40) = a1;
}

BOOL CoreRecognition::decoder::SegmentedPathBuilderBase<CoreRecognition::decoder::CombinedBeamState>::willCommitBetween(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) == 2
      || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a3) == 1;
}

uint64_t CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::needsToBeCommitted()
{
  return 1;
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E98D8F98;
  *(_QWORD *)(a1 + 16) = &off_1E98D90E0;
  v1 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1D826E294);
}

void CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::~CTCBeamSearchDecoder(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E98D8F70;
  *(_QWORD *)(a1 + 64) = &off_1E98D9050;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 16) = &off_1E98D90E0;
  v3 = (void **)(a1 + 40);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1D826E294);
}

void CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::~SpaceSegmentedPathBuilder(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E98D9050;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D826E294);
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::updateActivationProgression(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 16);
  v5 = *(_QWORD **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(_QWORD *)a2)
    {
      if (++v4 == v5)
      {
        v4 = *(_QWORD **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5 && *(_BYTE *)(result + 8) && *(double *)(a2 + 40) < a4)
  {
    *(_QWORD *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::updateActivationExtension(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)(result + 16);
  v5 = *(_QWORD **)(result + 24);
  if (v4 != v5)
  {
    while (*v4 != *(_QWORD *)a2)
    {
      if (++v4 == v5)
      {
        v4 = *(_QWORD **)(result + 24);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    *(_QWORD *)(a2 + 8) = a3;
    *(double *)(a2 + 40) = a4;
  }
  return result;
}

uint64_t CoreRecognition::decoder::SpaceSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>::needsToBeCommitted(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 24);
        return 2 * (v2 != v3);
      }
    }
  }
  return 2 * (v2 != v3);
}

_QWORD *CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::~NGramCharLMBeamScorer(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E98D9008;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  return a1;
}

void CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::~NGramCharLMBeamScorer(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E98D9008;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  JUMPOUT(0x1D826E294);
}

double CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::createState()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E98D8DA0;
  *(_QWORD *)(v0 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  return result;
}

uint64_t CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::initializeState(uint64_t a1, _QWORD *a2, CFStringRef *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  CFIndex v28;
  int v29;
  CFIndex v30;
  uint64_t v31;

  v5 = *(int *)(a1 + 56);
  v7 = a2[2];
  v6 = (char *)a2[3];
  v8 = a2 + 2;
  v9 = (uint64_t)&v6[-v7] >> 2;
  if (v5 <= v9)
  {
    if (v5 < v9)
      a2[3] = v7 + 4 * v5;
  }
  else
  {
    v10 = v5 - v9;
    v11 = (uint64_t)(a2 + 4);
    v12 = a2[4];
    if (v5 - v9 <= (v12 - (uint64_t)v6) >> 2)
    {
      v23 = &v6[4 * v10];
      memset_pattern16(v6, &unk_1D513A1E0, 4 * v10);
      a2[3] = v23;
    }
    else
    {
      if ((v5 & 0x80000000) != 0)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v13 = v12 - v7;
      v14 = (v12 - v7) >> 1;
      if (v14 <= v5)
        v14 = v5;
      if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11, v15);
      v18 = v17;
      v19 = (char *)a2[2];
      v20 = (char *)a2[3];
      v21 = &v16[4 * v9];
      memset_pattern16(v21, &unk_1D513A1E0, 4 * v10);
      while (v20 != v19)
      {
        v22 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v21 - 1) = v22;
        v21 -= 4;
      }
      a2[2] = v21;
      a2[3] = &v16[4 * v5];
      a2[4] = &v16[4 * v18];
      if (v19)
        operator delete(v19);
    }
  }
  result = (uint64_t)*a3;
  if (*a3)
  {
    result = CFStringGetLength((CFStringRef)result);
    if (result)
    {
      result = CFStringGetLength(*a3);
      if (result >= 1)
      {
        v25 = result;
        v26 = 0;
        v27 = a2[3];
        do
        {
          if (v27 == *v8)
            return result;
          v28 = v25 - 1;
          result = CFStringGetCharacterAtIndex(*a3, v25 - 1);
          v29 = result;
          v30 = v25 - 2;
          if ((unint64_t)v25 < 2)
          {
            --v25;
            if ((v26 & 1) != 0)
              goto LABEL_35;
          }
          else
          {
            --v25;
            if ((result & 0xFC00) == 0xDC00)
            {
              result = CFStringGetCharacterAtIndex(*a3, v30);
              v25 = (result & 0xFC00) == 0xD800 ? v30 : v28;
              if ((result & 0xFC00) == 0xD800)
                v29 = v29 + ((_DWORD)result << 10) - 56613888;
            }
            if ((v26 & 1) != 0)
              goto LABEL_35;
          }
          result = CVNLPIsWhitespaceCharLMCodepoint();
          if ((result & 1) == 0)
          {
            result = CVNLPIsDigitCharLMCodepoint();
            v26 = 0;
            v31 = 6;
            if ((_DWORD)result)
              v31 = 5;
            ++a2[v31];
            goto LABEL_36;
          }
LABEL_35:
          v26 = 1;
LABEL_36:
          *(_DWORD *)(v27 - 4) = v29;
          v27 -= 4;
        }
        while (v25 > 0);
      }
    }
  }
  return result;
}

double CoreRecognition::decoder::NGramCharLMBeamScorer<CoreRecognition::decoder::NGramState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  double v30;
  double v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;

  *(_QWORD *)(a4 + 8) = 0;
  if (*(_QWORD *)(a1 + 64) == a5)
  {
    if (a4 != a2)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a4 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(a2 + 40);
  }
  else
  {
    v8 = (void **)(a4 + 16);
    std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(a4 + 16), *(int *)(a1 + 56) + 1);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_DWORD **)(a2 + 24);
    if (*(int *)(a1 + 56) >= (unint64_t)(((uint64_t)v10 - v9) >> 2))
      v11 = *(_DWORD **)(a2 + 16);
    else
      v11 = (_DWORD *)(v9 + 4);
    if (v10 != v11)
    {
      v12 = (_QWORD *)(a4 + 32);
      v13 = *(char **)(a4 + 24);
      do
      {
        if ((unint64_t)v13 >= *v12)
        {
          v15 = (char *)*v8;
          v16 = (v13 - (_BYTE *)*v8) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            goto LABEL_59;
          v18 = *v12 - (_QWORD)v15;
          if (v18 >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 32, v19);
            v15 = *(char **)(a4 + 16);
            v13 = *(char **)(a4 + 24);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[4 * v16];
          *(_DWORD *)v21 = *v11;
          v14 = v21 + 4;
          while (v13 != v15)
          {
            v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(_QWORD *)(a4 + 16) = v21;
          *(_QWORD *)(a4 + 24) = v14;
          *(_QWORD *)(a4 + 32) = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_DWORD *)v13 = *v11;
          v14 = v13 + 4;
        }
        *(_QWORD *)(a4 + 24) = v14;
        ++v11;
        v13 = v14;
      }
      while (v11 != v10);
    }
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * a5);
    if (CVNLPIsWhitespaceCharLMCodepoint())
    {
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
    }
    else
    {
      v24 = CVNLPIsDigitCharLMCodepoint();
      v25 = *(_QWORD *)(a2 + 40);
      if (v24)
      {
        ++v25;
        v26 = *(_QWORD *)(a2 + 48);
      }
      else
      {
        v26 = *(_QWORD *)(a2 + 48) + 1;
      }
      *(_QWORD *)(a4 + 40) = v25;
      *(_QWORD *)(a4 + 48) = v26;
    }
    v27 = *(_QWORD *)(a2 + 40);
    v28 = *(_QWORD *)(a2 + 48) + v27;
    if (v28)
      v29 = (float)(v27 / v28);
    else
      v29 = 0.0;
    if (v29 <= *(float *)(a1 + 72)
      && (uint64_t)(*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 2 >= (unint64_t)*(int *)(a1 + 56))
    {
      LMLanguageModelConditionalProbability();
      v31 = v30 * 2.30258509;
      if (*(double *)(a1 + 16) > v31)
        v31 = *(double *)(a1 + 16);
      *(double *)(a4 + 8) = *(double *)(a1 + 8) * v31;
    }
    v32 = *(_QWORD *)(a4 + 32);
    v33 = *(char **)(a4 + 24);
    if ((unint64_t)v33 >= v32)
    {
      v35 = (char *)*v8;
      v36 = (v33 - (_BYTE *)*v8) >> 2;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62)
LABEL_59:
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v38 = v32 - (_QWORD)v35;
      if (v38 >> 1 > v37)
        v37 = v38 >> 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 32, v39);
        v35 = *(char **)(a4 + 16);
        v33 = *(char **)(a4 + 24);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[4 * v36];
      v42 = &v40[4 * v39];
      *(_DWORD *)v41 = v23;
      v34 = v41 + 4;
      while (v33 != v35)
      {
        v43 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v41 - 1) = v43;
        v41 -= 4;
      }
      *(_QWORD *)(a4 + 16) = v41;
      *(_QWORD *)(a4 + 24) = v34;
      *(_QWORD *)(a4 + 32) = v42;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_DWORD *)v33 = v23;
      v34 = v33 + 4;
    }
    *(_QWORD *)(a4 + 24) = v34;
  }
  return *(double *)(a4 + 8);
}

void CoreRecognition::decoder::NGramState::~NGramState(CoreRecognition::decoder::NGramState *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E98D8DA0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E98D8DA0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D826E294);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BaseBeamScorer>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::~LSTMCharLMBeamScorer(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E98D8FC0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  return a1;
}

void CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::~LSTMCharLMBeamScorer(_QWORD *a1)
{
  void *v2;
  const void *v3;

  *a1 = &off_1E98D8FC0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  JUMPOUT(0x1D826E294);
}

_QWORD *CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::createState()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E98D8E18;
  return result;
}

void CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::initializeState(uint64_t a1, uint64_t a2, CFStringRef *a3)
{
  const void *v5;
  const void *v6;

  v5 = (const void *)CVNLPLanguageModelWithStateCreate();
  if (*a3 && CFStringGetLength(*a3))
    CVNLPLanguageModelWithStateUpdateWithContext();
  v6 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  if (v5)
    CFRetain(v5);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_1D5110F14(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

double CoreRecognition::decoder::LSTMCharLMBeamScorer<CoreRecognition::decoder::LSTMCharLMState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Copy;
  const void *v9;
  double v10;
  int v11;
  unsigned int v12;
  CFIndex v13;
  CFStringRef v14;
  float v15;
  float v16;
  double v17;
  double v18;
  CFTypeRef cf;
  UniChar chars[2];

  *(_QWORD *)(a4 + 8) = 0;
  Copy = CVNLPLanguageModelWithStateCreateCopy();
  v9 = *(const void **)(a4 + 16);
  *(_QWORD *)(a4 + 16) = Copy;
  if (v9)
    CFRelease(v9);
  if (*(_QWORD *)(a1 + 56) == a5)
    return *(double *)(a4 + 8);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * a5);
  if ((v11 - 0x10000) >> 20)
  {
    v13 = 1;
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * a5);
  }
  else
  {
    v12 = ((v11 + 67043328) >> 10) - 10240;
    chars[1] = v11 & 0x3FF | 0xDC00;
    v13 = 2;
  }
  chars[0] = v12;
  v14 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], chars, v13);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v14);
  CVNLPLanguageModelWithStateConditionalProbability();
  v16 = v15;
  CVNLPLanguageModelWithStateUpdateWithContext();
  v17 = logf(v16);
  v18 = *(double *)(a1 + 8);
  if (*(double *)(a1 + 16) > v17)
    v17 = *(double *)(a1 + 16);
  v10 = v18 * v17;
  *(double *)(a4 + 8) = v18 * v17;
  if (cf)
    CFRelease(cf);
  return v10;
}

void sub_1D5111058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void CoreRecognition::decoder::LSTMCharLMState::~LSTMCharLMState(CoreRecognition::decoder::LSTMCharLMState *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E98D8E18;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E98D8E18;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1D826E294);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D826E0D8](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1D5111178(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinArabicMixedScriptPenaltyBeamScorer(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E98D9128;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D826E294);
}

BOOL CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::isBadMixedScript(uint64_t a1, int a2, int a3)
{
  BOOL v3;
  BOOL v4;

  if (!a2 && a3 == 1)
    return 1;
  v3 = !a3 || a3 == 3;
  v4 = v3;
  if (a2 == 1 && v4)
    return 1;
  return a2 == 3 && a3 == 1;
}

BOOL CoreRecognition::decoder::LatinArabicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::shouldIgnoreScriptCode(uint64_t a1, int a2)
{
  return a2 == 2;
}

void CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::~LatinCyrillicMixedScriptPenaltyBeamScorer(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E98D9128;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D826E294);
}

uint64_t CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::isBadMixedScript()
{
  return CVNLPIsLatinCyrillicMixedScript();
}

uint64_t CoreRecognition::decoder::LatinCyrillicMixedScriptPenaltyBeamScorer<CoreRecognition::decoder::MixedScriptState>::shouldIgnoreScriptCode()
{
  return CVNLPShouldIgnoreScriptForLatinCyrillic();
}

void std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        std::allocator<applesauce::CF::ObjectRef<_LXLexicon const*>>::destroy[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<applesauce::CF::ObjectRef<_LXLexicon const*>>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    CFRelease(a1);
}

uint64_t std::__split_buffer<applesauce::CF::ObjectRef<_LXLexicon const*>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(const void **)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    std::allocator<applesauce::CF::ObjectRef<_LXLexicon const*>>::destroy[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__init_with_size[abi:ne180100]<applesauce::CF::ObjectRef<_LXLexicon const*>*,applesauce::CF::ObjectRef<_LXLexicon const*>*>(_QWORD *result, CFTypeRef *a2, CFTypeRef *a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  CFTypeRef v10;

  if (a4)
  {
    if (a4 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v8];
    if (a2 != a3)
    {
      v9 = result;
      do
      {
        v10 = *a2;
        if (*a2)
          result = CFRetain(*a2);
        *v9++ = v10;
        ++a2;
        ++v7;
      }
      while (a2 != a3);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1D5111500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::~LexiconBeamScorer(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E98D8F28;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 24);
  std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::~LexiconBeamScorer(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E98D8F28;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 24);
  std::vector<applesauce::CF::ObjectRef<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1D826E294);
}

double CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::createState()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)v0 = &off_1E98D8DF0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  return result;
}

void CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::initializeState(uint64_t a1, int64x2_t *a2, uint64_t a3)
{
  CFRange v6;
  CFStringRef v7;
  CFTypeRef *v8;
  CFTypeRef *i;
  CFTypeRef v10;
  uint64_t RootCursor;
  const void *v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  CFTypeRef cf;
  uint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  int64x2_t *v34;

  if (*(_QWORD *)a3 && CFStringGetLength(*(CFStringRef *)a3) && (v6.length = *(_QWORD *)(a3 + 16)) != 0)
  {
    v6.location = *(_QWORD *)(a3 + 8);
    v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a3, v6);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
  }
  else
  {
    cf = 0;
  }
  v8 = *(CFTypeRef **)(a1 + 24);
  for (i = *(CFTypeRef **)(a1 + 32); v8 != i; ++v8)
  {
    v10 = *v8;
    if (*v8)
      CFRetain(*v8);
    RootCursor = LXLexiconCreateRootCursor();
    v12 = (const void *)RootCursor;
    if (cf)
    {
      v13 = (const void *)LXCursorCreateByAdvancing();
      if (v12)
        CFRelease(v12);
    }
    else
    {
      v13 = (const void *)RootCursor;
    }
    v15 = a2[1].u64[1];
    v14 = a2[2].u64[0];
    if (v15 >= v14)
    {
      v17 = a2[1].i64[0];
      v18 = (uint64_t)(v15 - v17) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v19 = v14 - v17;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      v34 = a2 + 2;
      if (v21)
        v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v21);
      else
        v22 = 0;
      v23 = (_QWORD *)(v21 + 8 * v18);
      v24 = v21 + 8 * v22;
      v33 = v24;
      std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(v23, v13);
      v16 = v23 + 1;
      v32.i64[1] = (uint64_t)(v23 + 1);
      v26 = (_QWORD *)a2[1].i64[0];
      v25 = (_QWORD *)a2[1].i64[1];
      if (v25 == v26)
      {
        v28 = vdupq_n_s64((unint64_t)v25);
      }
      else
      {
        do
        {
          v27 = *--v25;
          *--v23 = v27;
          *v25 = 0;
        }
        while (v25 != v26);
        v28 = a2[1];
        v16 = (_QWORD *)v32.i64[1];
        v24 = v33;
      }
      a2[1].i64[0] = (uint64_t)v23;
      a2[1].i64[1] = (uint64_t)v16;
      v32 = v28;
      v29 = a2[2].i64[0];
      a2[2].i64[0] = v24;
      v33 = v29;
      v31 = v28.i64[0];
      std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer((uint64_t)&v31);
    }
    else
    {
      std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>((_QWORD *)a2[1].i64[1], v13);
      v16 = (_QWORD *)(v15 + 8);
    }
    a2[1].i64[1] = (uint64_t)v16;
    if (v13)
      CFRelease(v13);
    if (v10)
      CFRelease(v10);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1D5111814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  const void *v9;
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

double CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  void **v8;
  const void **v9;
  const void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  const void *v22;
  int v25;
  unsigned int v26;
  CFIndex v27;
  CFStringRef v28;
  void (*v29)(void);
  void *v30;
  id v31;
  void *v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t k;
  uint64_t RootCursor;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  double v51;
  unint64_t v52;
  const void **v53;
  _QWORD *v54;
  const void *v55;
  CFTypeRef *v56;
  CFTypeRef *j;
  CFTypeRef v58;
  const void *v59;
  const void *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  int64x2_t v76;
  unint64_t v77;
  unsigned __int8 v78;
  uint64_t *v79;
  __guard *v80;
  const void **v81;
  const void **i;
  const void *v83;
  CFTypeRef *v84;
  CFTypeRef *v85;
  double v86;
  double v87;
  double v88;
  CFTypeRef v89;
  double v90;
  double v91;
  double v92;
  long double v93;
  unsigned __int8 v94;
  double v95;
  double v96;
  double v97;
  CFTypeRef cf;
  UniChar chars[4];
  int64x2_t v101;
  unint64_t v102;
  uint64_t v103;

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 80) == a5)
  {
    if (a4 == a2)
      return 0.0;
    v8 = (void **)(a4 + 16);
    v7 = *(_QWORD *)(a4 + 16);
    v10 = *(const void ***)(a2 + 16);
    v9 = *(const void ***)(a2 + 24);
    v11 = v9 - v10;
    v12 = *(_QWORD *)(a4 + 32);
    if (v11 <= (v12 - v7) >> 3)
    {
      v52 = (*(_QWORD *)(a4 + 24) - v7) >> 3;
      if (v52 >= v11)
      {
        v81 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *>(*(const void ***)(a2 + 16), *(const void ***)(a2 + 24), *(const void ***)(a4 + 16));
        for (i = *(const void ***)(a4 + 24); i != v81; --i)
        {
          v83 = *(i - 1);
          std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v83);
        }
        *(_QWORD *)(a4 + 24) = v81;
      }
      else
      {
        v53 = &v10[v52];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *>(*(const void ***)(a2 + 16), v53, *(const void ***)(a4 + 16));
        v54 = *(_QWORD **)(a4 + 24);
        while (v53 != v9)
        {
          v55 = *v53++;
          std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(v54++, v55);
        }
        *(_QWORD *)(a4 + 24) = v54;
      }
    }
    else
    {
      if (v7)
      {
        v13 = *(_QWORD *)(a4 + 24);
        v14 = *(void **)(a4 + 16);
        if (v13 != v7)
        {
          do
          {
            v15 = *(const void **)(v13 - 8);
            v13 -= 8;
            std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v15);
          }
          while (v13 != v7);
          v14 = *v8;
        }
        *(_QWORD *)(a4 + 24) = v7;
        operator delete(v14);
        v12 = 0;
        *v8 = 0;
        *(_QWORD *)(a4 + 24) = 0;
        *(_QWORD *)(a4 + 32) = 0;
      }
      if ((char *)v9 - (char *)v10 < 0)
        goto LABEL_118;
      v16 = v12 >> 2;
      if (v12 >> 2 <= v11)
        v16 = v9 - v10;
      v17 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
      if (v17 >> 61)
LABEL_118:
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v17);
      v19 = v18;
      *(_QWORD *)(a4 + 16) = v18;
      *(_QWORD *)(a4 + 24) = v18;
      *(_QWORD *)(a4 + 32) = &v18[v20];
      if (v10 != v9)
      {
        v21 = v18;
        do
        {
          v22 = *v10++;
          std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(v21++, v22);
          ++v19;
        }
        while (v10 != v9);
      }
      *(_QWORD *)(a4 + 24) = v19;
    }
    return *(double *)(a4 + 8);
  }
  v25 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * a5);
  if ((v25 - 0x10000) >> 20)
  {
    v27 = 1;
    v26 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * a5);
  }
  else
  {
    v26 = ((v25 + 67043328) >> 10) - 10240;
    chars[1] = v25 & 0x3FF | 0xDC00;
    v27 = 2;
  }
  chars[0] = v26;
  v28 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], chars, v27);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v28);
  v29 = *(void (**)(void))(a1 + 96);
  if (v29)
  {
    v30 = (id)cf;
    v29();
    v31 = (id)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    if (v31)
      CFRetain(v31);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)chars, v32);

    v33 = cf;
    cf = *(CFTypeRef *)chars;
    *(_QWORD *)chars = v33;
    if (v33)
      CFRelease(v33);

  }
  if (*(_QWORD *)(a1 + 72) != a5 && !MEMORY[0x1D826DC70](cf))
  {
    v56 = *(CFTypeRef **)(a2 + 16);
    for (j = *(CFTypeRef **)(a2 + 24); v56 != j; ++v56)
    {
      v58 = *v56;
      if (*v56)
        CFRetain(*v56);
      v59 = (const void *)LXCursorCreateByAdvancing();
      v60 = v59;
      if (v59)
      {
        v62 = *(_QWORD **)(a4 + 24);
        v61 = *(_QWORD *)(a4 + 32);
        if ((unint64_t)v62 >= v61)
        {
          v64 = *(_QWORD *)(a4 + 16);
          v65 = ((uint64_t)v62 - v64) >> 3;
          if ((unint64_t)(v65 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v66 = v61 - v64;
          v67 = v66 >> 2;
          if (v66 >> 2 <= (unint64_t)(v65 + 1))
            v67 = v65 + 1;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
            v68 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v68 = v67;
          v103 = a4 + 32;
          if (v68)
          {
            v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v68);
          }
          else
          {
            v70 = 0;
            v69 = 0;
          }
          v71 = &v70[8 * v69];
          v102 = (unint64_t)v71;
          CFRetain(v60);
          v72 = &v70[8 * v65];
          *(_QWORD *)v72 = v60;
          v63 = v72 + 8;
          v101.i64[1] = (uint64_t)(v72 + 8);
          v74 = *(_QWORD **)(a4 + 16);
          v73 = *(_QWORD **)(a4 + 24);
          if (v73 == v74)
          {
            v76 = vdupq_n_s64((unint64_t)v73);
          }
          else
          {
            do
            {
              v75 = *--v73;
              *((_QWORD *)v72 - 1) = v75;
              v72 -= 8;
              *v73 = 0;
            }
            while (v73 != v74);
            v76 = *(int64x2_t *)(a4 + 16);
            v63 = (_QWORD *)v101.i64[1];
            v71 = (char *)v102;
          }
          *(_QWORD *)(a4 + 16) = v72;
          *(_QWORD *)(a4 + 24) = v63;
          v101 = v76;
          v77 = *(_QWORD *)(a4 + 32);
          *(_QWORD *)(a4 + 32) = v71;
          v102 = v77;
          *(_QWORD *)chars = v76.i64[0];
          std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer((uint64_t)chars);
        }
        else
        {
          CFRetain(v59);
          *v62 = v60;
          v63 = v62 + 1;
        }
        *(_QWORD *)(a4 + 24) = v63;
        CFRelease(v60);
      }
      if (v58)
        CFRelease(v58);
    }
    if (CVNLPShouldUseLexiconContextLogProb())
    {
      v79 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB;
      if ((v78 & 1) != 0
      {
        goto LABEL_107;
      }
      CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::CONTEXT_LOG_PROB = 0xC007F7427B73E391;
    }
    else
    {
      v84 = *(CFTypeRef **)(a4 + 16);
      v85 = *(CFTypeRef **)(a4 + 24);
      if (v84 != v85)
      {
        v86 = log((double)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
        if (*(_BYTE *)(a1 + 88))
          v87 = 0.0;
        else
          v87 = -INFINITY;
        v88 = -v86;
        do
        {
          v89 = *v84;
          if (*v84)
            CFRetain(*v84);
          LXCursorConditionalProbability();
          v91 = v88 + v90 * 2.30258509;
          if (v87 <= v91)
            v92 = v87;
          else
            v92 = v88 + v90 * 2.30258509;
          if (v87 <= v91)
            v87 = v91;
          if (v92 > -INFINITY)
          {
            v93 = exp(v92 - v87);
            v87 = v87 + log1p(v93);
          }
          if (v89)
            CFRelease(v89);
          ++v84;
        }
        while (v84 != v85);
        goto LABEL_108;
      }
      v79 = &CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB;
      if ((v94 & 1) != 0
      {
LABEL_107:
        v87 = *(double *)v79;
LABEL_108:
        v95 = *(double *)(a1 + 16);
        v96 = *(double *)(a4 + 40);
        v97 = v95 - v96;
        if (v87 >= v95 - v96)
          v97 = v87;
        *(double *)(a4 + 40) = v96 + v97;
        if (v95 <= v97)
          v95 = v97;
        v51 = *(double *)(a1 + 8) * v95;
        *(double *)(a4 + 8) = v51;
        goto LABEL_113;
      }
      CoreRecognition::decoder::LexiconBeamScorer<CoreRecognition::decoder::LexiconState>::expandState(CoreRecognition::decoder::LexiconState const*,unsigned long,CoreRecognition::decoder::LexiconState*,unsigned long)const::WORD_MIN_LOG_PROB = 0xC04205966F2B4F12;
    }
    __cxa_guard_release(v80);
    goto LABEL_107;
  }
  v34 = *(_QWORD *)(a1 + 24);
  for (k = *(_QWORD *)(a1 + 32); v34 != k; v34 += 8)
  {
    RootCursor = LXLexiconCreateRootCursor();
    v37 = RootCursor;
    v39 = *(uint64_t **)(a4 + 24);
    v38 = *(_QWORD *)(a4 + 32);
    if ((unint64_t)v39 >= v38)
    {
      v41 = *(_QWORD **)(a4 + 16);
      v42 = v39 - v41;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v44 = v38 - (_QWORD)v41;
      if (v44 >> 2 > v43)
        v43 = v44 >> 2;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      v103 = a4 + 32;
      if (v45)
      {
        v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v45);
        v41 = *(_QWORD **)(a4 + 16);
        v39 = *(uint64_t **)(a4 + 24);
      }
      else
      {
        v46 = 0;
      }
      v47 = (uint64_t *)(v45 + 8 * v42);
      v102 = v45 + 8 * v46;
      *v47 = v37;
      v101.i64[1] = (uint64_t)(v47 + 1);
      if (v39 == v41)
      {
        v40 = v47 + 1;
      }
      else
      {
        do
        {
          v48 = *--v39;
          *--v47 = v48;
          *v39 = 0;
        }
        while (v39 != v41);
        v40 = (_QWORD *)v101.i64[1];
      }
      v49 = *(int64x2_t *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v47;
      *(_QWORD *)(a4 + 24) = v40;
      v101 = v49;
      v50 = *(_QWORD *)(a4 + 32);
      *(_QWORD *)(a4 + 32) = v102;
      v102 = v50;
      *(_QWORD *)chars = v49.i64[0];
      std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer((uint64_t)chars);
    }
    else
    {
      *v39 = RootCursor;
      v40 = v39 + 1;
    }
    *(_QWORD *)(a4 + 24) = v40;
  }
  *(_QWORD *)(a4 + 40) = 0;
  v51 = *(double *)(a4 + 8);
LABEL_113:
  if (cf)
    CFRelease(cf);
  return v51;
}

void sub_1D5111F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void CoreRecognition::decoder::LexiconState::~LexiconState(CoreRecognition::decoder::LexiconState *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E98D8DF0;
  v1 = (void **)((char *)this + 16);
  std::vector<applesauce::CF::ObjectRef<_LXCursor const*>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E98D8DF0;
  v1 = (void **)((char *)this + 16);
  std::vector<applesauce::CF::ObjectRef<_LXCursor const*>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1D826E294);
}

void std::vector<applesauce::CF::ObjectRef<_LXCursor const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    CFRelease(a1);
}

_QWORD *std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::construct[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*>,applesauce::CF::ObjectRef<_LXCursor const*>&>(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  v3 = result;
  if (cf)
    result = CFRetain(cf);
  *v3 = cf;
  return result;
}

uint64_t std::__split_buffer<applesauce::CF::ObjectRef<_LXCursor const*>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(const void **)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    std::allocator<applesauce::CF::ObjectRef<_LXCursor const*>>::destroy[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

const void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *,applesauce::CF::ObjectRef<_LXCursor const*> *>(const void **a1, const void **a2, const void **a3)
{
  const void **v5;
  const void *v6;
  const void *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *a3;
      v7 = *v5;
      *a3 = *v5;
      if (v7)
        CFRetain(v7);
      if (v6)
        CFRelease(v6);
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::~WordLMBeamScorer(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;

  *a1 = &off_1E98D8EB8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  if (v4)
    CFRelease(v4);
  return a1;
}

void CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::~WordLMBeamScorer(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;

  *a1 = &off_1E98D8EB8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  if (v4)
    CFRelease(v4);
  JUMPOUT(0x1D826E294);
}

double CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::createState()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E98D8DC8;
  *(_QWORD *)(v0 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  return result;
}

void CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::initializeState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRange v4;
  CFStringRef v5;
  CFTypeRef v6;

  if (*(_QWORD *)a3 && CFStringGetLength(*(CFStringRef *)a3))
  {
    if (*(_QWORD *)a3 && CFStringGetLength(*(CFStringRef *)a3) && (v4.length = *(_QWORD *)(a3 + 8)) != 0)
    {
      v4.location = 0;
      v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a3, v4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v6, v5);
    }
    else
    {
      v6 = 0;
    }
    CVNLPWordTokenIDsForString();
    if (v6)
      CFRelease(v6);
  }
}

void sub_1D51123C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 - 40);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

double CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::expandState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v9;
  double result;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;

  *(_QWORD *)(a4 + 8) = 0;
  if (a4 == a2)
  {
    v9 = (void **)(a4 + 40);
  }
  else
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a4 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    v9 = (void **)(a4 + 40);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a4 + 40), *(char **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
  }
  if (*(_QWORD *)(a1 + 72) == a5)
  {
    result = *(double *)(a2 + 8);
    *(double *)(a4 + 8) = result;
  }
  else
  {
    if (*(_QWORD *)(a1 + 64) == a5)
    {
      CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::queryLanguageModelAndUpdateState(a1, (_QWORD *)a4, a5);
    }
    else
    {
      v11 = *(_QWORD *)(a4 + 56);
      v12 = *(uint64_t **)(a4 + 48);
      if ((unint64_t)v12 >= v11)
      {
        v14 = (uint64_t *)*v9;
        v15 = ((char *)v12 - (_BYTE *)*v9) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4 + 56, v18);
          v14 = *(uint64_t **)(a4 + 40);
          v12 = *(uint64_t **)(a4 + 48);
        }
        else
        {
          v19 = 0;
        }
        v20 = (uint64_t *)&v19[8 * v15];
        v21 = &v19[8 * v18];
        *v20 = a5;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v22 = *--v12;
          *--v20 = v22;
        }
        *(_QWORD *)(a4 + 40) = v20;
        *(_QWORD *)(a4 + 48) = v13;
        *(_QWORD *)(a4 + 56) = v21;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v12 = a5;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a4 + 48) = v13;
    }
    return *(double *)(a4 + 8);
  }
  return result;
}

double CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::finalizeState(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  if (!*(_BYTE *)(a1 + 80) && *(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 48))
  {
    CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::queryLanguageModelAndUpdateState(a1, (_QWORD *)a2, *(_QWORD *)(a1 + 64));
    return *(double *)(a2 + 8);
  }
  return result;
}

void CoreRecognition::decoder::WordLMState::~WordLMState(CoreRecognition::decoder::WordLMState *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E98D8DC8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E98D8DC8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1D826E294);
}

void ___ZNK15CoreRecognition7decoder16WordLMBeamScorerINS0_11WordLMStateEE15initializeStateEPS2_RKNS0_7ContextE_block_invoke(uint64_t a1, void *a2, int TokenIDForString)
{
  id v5;
  void *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  id v20;
  id v21;

  v5 = a2;
  if (!TokenIDForString)
  {
    v20 = v5;
    objc_msgSend(v5, "lowercaseString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    TokenIDForString = LMLanguageModelGetTokenIDForString();

    v5 = v20;
  }
  v7 = *(_QWORD **)(a1 + 40);
  v8 = (char *)v7[3];
  v9 = v7[4];
  if ((unint64_t)v8 >= v9)
  {
    v21 = v5;
    v11 = (char *)v7[2];
    v12 = (v8 - v11) >> 2;
    if ((unint64_t)(v12 + 1) >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v13 = v9 - (_QWORD)v11;
    v14 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
    if (v14 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 4), v15);
      v11 = (char *)v7[2];
      v8 = (char *)v7[3];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *(_DWORD *)v17 = TokenIDForString;
    v10 = v17 + 4;
    while (v8 != v11)
    {
      v19 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    v7[2] = v17;
    v7[3] = v10;
    v7[4] = v18;
    if (v11)
      operator delete(v11);
    v5 = v21;
  }
  else
  {
    *(_DWORD *)v8 = TokenIDForString;
    v10 = v8 + 4;
  }
  v7[3] = v10;

}

void sub_1D5112764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::WordLMBeamScorer<CoreRecognition::decoder::WordLMState>::queryLanguageModelAndUpdateState(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v3;
  char *v5;
  char *v6;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  __int16 v25;
  _WORD *v26;
  _WORD *v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int16 v44;
  CFStringRef v45;
  double v46;
  int TokenIDForString;
  void **v48;
  double v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  _QWORD *v62;
  void *__p;
  _WORD *p_p;
  _QWORD v65[2];
  CFTypeRef cf;

  v5 = (char *)a2[5];
  v6 = (char *)a2[6];
  if (v5 != v6)
  {
    if (*(_QWORD *)(a1 + 64) != a3)
    {
      v9 = a2[7];
      if ((unint64_t)v6 >= v9)
      {
        v11 = (v6 - v5) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v12 = v9 - (_QWORD)v5;
        v13 = (uint64_t)(v9 - (_QWORD)v5) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 7), v14);
          v5 = (char *)a2[5];
          v6 = (char *)a2[6];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = a3;
        v10 = v16 + 8;
        while (v6 != v5)
        {
          v18 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v16 - 1) = v18;
          v16 -= 8;
        }
        a2[5] = v16;
        a2[6] = v10;
        a2[7] = v17;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v6 = a3;
        v10 = v6 + 8;
      }
      a2[6] = v10;
      v5 = (char *)a2[5];
      v6 = v10;
    }
    __p = 0;
    p_p = 0;
    v65[0] = 0;
    v19 = v6 - v5;
    if (v6 != v5)
    {
      if (v19 < 0)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v65, v19 >> 3);
      p_p = __p;
      v65[0] = (char *)__p + 2 * v20;
    }
    v62 = a2;
    v21 = (_QWORD *)a2[5];
    v22 = (_QWORD *)a2[6];
    if (v21 == v22)
    {
      v27 = p_p;
    }
    else
    {
      do
      {
        v23 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * *v21);
        v24 = v23 - 1114112;
        if ((v23 - 1114112) >= 0xFFF00000)
          v25 = ((v23 + 67043328) >> 10) - 10240;
        else
          v25 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * *v21);
        if (v24 >= 0xFFF00000)
          v3 = v23 & 0x3FF | 0xDC00;
        v26 = p_p;
        if ((unint64_t)p_p >= v65[0])
        {
          v28 = __p;
          v29 = (char *)p_p - (_BYTE *)__p;
          if ((char *)p_p - (_BYTE *)__p <= -3)
            goto LABEL_97;
          v30 = v29 >> 1;
          if (v65[0] - (_QWORD)__p <= (unint64_t)((v29 >> 1) + 1))
            v31 = v30 + 1;
          else
            v31 = v65[0] - (_QWORD)__p;
          if (v65[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFFEuLL)
            v32 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v65, v32);
            v28 = __p;
            v26 = p_p;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[2 * v30];
          *(_WORD *)v34 = v25;
          v27 = v34 + 2;
          while (v26 != v28)
          {
            v35 = *--v26;
            *((_WORD *)v34 - 1) = v35;
            v34 -= 2;
          }
          __p = v34;
          p_p = v27;
          v65[0] = &v33[2 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *p_p = v25;
          v27 = v26 + 1;
        }
        p_p = v27;
        if (v24 >= 0xFFF00000)
        {
          if ((unint64_t)v27 >= v65[0])
          {
            v37 = __p;
            v38 = (char *)v27 - (_BYTE *)__p;
            if ((char *)v27 - (_BYTE *)__p < -2)
LABEL_97:
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v39 = v38 >> 1;
            if (v65[0] - (_QWORD)__p <= (unint64_t)((v38 >> 1) + 1))
              v40 = v39 + 1;
            else
              v40 = v65[0] - (_QWORD)__p;
            if (v65[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFFEuLL)
              v41 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v41 = v40;
            if (v41)
            {
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v65, v41);
              v37 = __p;
              v27 = p_p;
            }
            else
            {
              v42 = 0;
            }
            v43 = &v42[2 * v39];
            *(_WORD *)v43 = v3;
            v36 = v43 + 2;
            while (v27 != v37)
            {
              v44 = *--v27;
              *((_WORD *)v43 - 1) = v44;
              v43 -= 2;
            }
            __p = v43;
            p_p = v36;
            v65[0] = &v42[2 * v41];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v27 = v3;
            v36 = v27 + 1;
          }
          p_p = v36;
          v27 = v36;
        }
        ++v21;
      }
      while (v21 != v22);
    }
    v45 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UniChar *)__p, ((char *)v27 - (_BYTE *)__p) >> 1);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v45);
    if (__p)
    {
      p_p = __p;
      operator delete(__p);
    }
    __p = 0;
    p_p = &__p;
    v65[0] = 0x2020000000;
    v65[1] = 0;
    if (*(double *)(a1 + 16) / 2.30258509 >= -15.654)
      v46 = *(double *)(a1 + 16) / 2.30258509;
    else
      v46 = -15.654;
    TokenIDForString = LMLanguageModelGetTokenIDForString();
    if (TokenIDForString)
    {
      v48 = (void **)(v62 + 2);
      LMLanguageModelConditionalProbability();
      if (v49 < v46)
        v49 = v46;
      *((double *)p_p + 3) = v49;
      v50 = v62[4];
      v51 = (char *)v62[3];
      if ((unint64_t)v51 >= v50)
      {
        v53 = (char *)*v48;
        v54 = (v51 - (_BYTE *)*v48) >> 2;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v56 = v50 - (_QWORD)v53;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v62 + 4), v57);
          v53 = (char *)v62[2];
          v51 = (char *)v62[3];
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[4 * v54];
        v60 = &v58[4 * v57];
        *(_DWORD *)v59 = TokenIDForString;
        v52 = v59 + 4;
        while (v51 != v53)
        {
          v61 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v59 - 1) = v61;
          v59 -= 4;
        }
        v62[2] = v59;
        v62[3] = v52;
        v62[4] = v60;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_DWORD *)v51 = TokenIDForString;
        v52 = v51 + 4;
      }
      v62[3] = v52;
    }
    else
    {
      CVNLPWordTokenIDsForString();
    }
    v62[6] = v62[5];
    *((double *)v62 + 1) = *(double *)(a1 + 8) * *((double *)p_p + 3) * 2.30258509;
    _Block_object_dispose(&__p, 8);
    if (cf)
      CFRelease(cf);
  }
}

void sub_1D5112CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNK15CoreRecognition7decoder16WordLMBeamScorerINS0_11WordLMStateEE32queryLanguageModelAndUpdateStateEPS2_m_block_invoke(uint64_t a1, void *a2, int TokenIDForString)
{
  void *v5;
  double v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  id v20;

  v20 = a2;
  if (TokenIDForString
    || (objc_msgSend(v20, "lowercaseString"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        TokenIDForString = LMLanguageModelGetTokenIDForString(),
        v5,
        TokenIDForString))
  {
    LMLanguageModelConditionalProbability();
    if (v6 < *(double *)(a1 + 56))
      v6 = *(double *)(a1 + 56);
  }
  else
  {
    v6 = *(double *)(a1 + 56);
  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6
                                                              + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24);
  v7 = *(_QWORD **)(a1 + 48);
  v8 = (char *)v7[3];
  v9 = v7[4];
  if ((unint64_t)v8 >= v9)
  {
    v11 = (char *)v7[2];
    v12 = (v8 - v11) >> 2;
    if ((unint64_t)(v12 + 1) >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v13 = v9 - (_QWORD)v11;
    v14 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
    if (v14 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 4), v15);
      v11 = (char *)v7[2];
      v8 = (char *)v7[3];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *(_DWORD *)v17 = TokenIDForString;
    v10 = v17 + 4;
    while (v8 != v11)
    {
      v19 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    v7[2] = v17;
    v7[3] = v10;
    v7[4] = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_DWORD *)v8 = TokenIDForString;
    v10 = v8 + 4;
  }
  v7[3] = v10;

}

void sub_1D5112E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CoreRecognition::decoder::CTCGreedyDecoder<CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::BaseState>>::~CTCGreedyDecoder()
{
  JUMPOUT(0x1D826E294);
}

_QWORD *std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[8 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

void **std::vector<CoreRecognition::decoder::DecodingPath>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 40 * v6;
    std::vector<CoreRecognition::decoder::DecodingPath>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer(v7);
  }
  return result;
}

void sub_1D511300C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CoreRecognition::decoder::DecodingPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *,std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::~BeamSearchState(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>::getReversePrefix(char **a1, _QWORD *a2)
{
  _QWORD *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a1 + 2;
  v5 = (char *)operator new(8uLL);
  *(_QWORD *)v5 = *a2;
  v6 = v5 + 8;
  *v4 = v5 + 8;
  v7 = (_QWORD *)a2[7];
  *a1 = v5;
  for (a1[1] = v5 + 8; v7; v6 = v8)
  {
    if ((unint64_t)v6 >= *v4)
    {
      v9 = *a1;
      v10 = (v6 - *a1) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v12 = *v4 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v4, v13);
        v9 = *a1;
        v6 = a1[1];
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      *(_QWORD *)v15 = *v7;
      v8 = v15 + 8;
      while (v6 != v9)
      {
        v16 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v16;
        v15 -= 8;
      }
      *a1 = v15;
      a1[1] = v8;
      a1[2] = &v14[8 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v6 = *v7;
      v8 = v6 + 8;
    }
    a1[1] = v8;
    v7 = (_QWORD *)v7[7];
  }
}

void sub_1D5113228(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreRecognition::decoder::BeamSearchState<CoreRecognition::decoder::CombinedBeamState>::BeamSearchState(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v3 = (uint64_t *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v4 = a1 + 72;
  v5 = a2 + 1;
  *(_QWORD *)(a1 + 80) = a2 + 1;
  if (a2 != -1)
  {
    if (v5 >= 0x276276276276277)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v8[4] = v4;
    v8[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>(v5);
    v8[1] = v8[0];
    v8[2] = v8[0];
    v8[3] = v8[0] + 104 * v6;
    std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__swap_out_circular_buffer(v3, v8);
    std::__split_buffer<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::~__split_buffer((uint64_t)v8);
  }
  return a1;
}

void sub_1D5113300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD **v9;

  std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 104);
      v9 = *(_OWORD *)(v2 + v5 - 88);
      v10 = *(_OWORD *)(v2 + v5 - 72);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_OWORD *)(v6 - 72) = v10;
      *(_OWORD *)(v6 - 88) = v9;
      *(_OWORD *)(v6 - 104) = v8;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 40) = &off_1E98D8F00;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 104;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

uint64_t std::__split_buffer<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    *(_QWORD *)(i - 40) = &off_1E98D8F00;
    v5 = (void **)(i - 24);
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v4 = v2 - 104;
      *(_QWORD *)(v2 - 40) = &off_1E98D8F00;
      v5 = (void **)(v2 - 24);
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v5);
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    *(_QWORD *)(v1 + 64) = &off_1E98D8F00;
    v2 = (void **)(v1 + 80);
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1D826E294);
  }
  return result;
}

void std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(*a1);
    std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::destroy(a1[1]);
    v2 = (void *)a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::reset[abi:ne180100]((uint64_t *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__emplace_unique_key_args<std::vector<unsigned long>,std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *&>(uint64_t **a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t **v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__find_equal<std::vector<unsigned long>>((uint64_t)a1, &v13, a2, a3);
  if (!*result)
  {
    v9 = (uint64_t **)result;
    v10 = operator new(0x40uLL);
    v10[2] = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v12 = *a5;
    *((_QWORD *)v10 + 6) = v11;
    *((_QWORD *)v10 + 7) = v12;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, v13, v9, (uint64_t *)v10);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::__find_equal<std::vector<unsigned long>>(uint64_t a1, _QWORD *a2, unint64_t *a3, unint64_t *a4)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v6 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v7 = v5;
        v8 = (unint64_t *)v5[4];
        v9 = (unint64_t *)v7[5];
        if (v8 != v9)
          break;
LABEL_11:
        if (a3 != a4)
        {
          v15 = a3 + 1;
          while (v8 != v9)
          {
            v16 = *v8;
            v17 = *(v15 - 1);
            if (*v8 < v17)
              break;
            ++v8;
            if (v17 < v16 || v15++ == a4)
              goto LABEL_26;
          }
          result = v7 + 1;
          v5 = (_QWORD *)v7[1];
          if (v5)
            continue;
        }
        goto LABEL_26;
      }
      v10 = v8 + 1;
      v11 = a3;
      while (v11 != a4)
      {
        v12 = *v11;
        v13 = *(v10 - 1);
        if (*v11 < v13)
          break;
        ++v11;
        if (v13 < v12 || v10++ == v9)
          goto LABEL_11;
      }
      v5 = (_QWORD *)*v7;
      result = v7;
    }
    while (*v7);
  }
  else
  {
    v7 = result;
  }
LABEL_26:
  *a2 = v7;
  return result;
}

uint64_t CoreRecognition::decoder::ActivationPruning::pruneActivations(float **a1, uint64_t a2, uint64_t a3, float **a4)
{
  float **v4;
  unint64_t v5;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  float v44;
  uint64_t v45;
  float *v46;
  float v48;
  float v49;
  float v50;
  float **v52;
  uint64_t v53;
  uint64_t v54;

  v4 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v9 = 16 * v5;
    v10 = (float *)operator new(16 * v5);
    v11 = v10;
    v12 = (uint64_t)&v10[4 * v5];
    v13 = v10;
    do
    {
      *(_QWORD *)v13 = 0;
      v13[2] = 0.0;
      v13 += 4;
    }
    while (v13 != (float *)v12);
    v54 = a2;
    *v4 = v10;
    v4[1] = (float *)v12;
    v52 = v4;
    v4[2] = (float *)v12;
    v14 = *a4;
    v15 = *(float *)(a3 + 16);
    v17 = *(float **)a3;
    v16 = *(float **)(a3 + 8);
    if (*(float **)a3 == *a4)
    {
      v18 = v10;
      v17 = *a4;
      v20 = v10;
    }
    else
    {
      v18 = v10;
      v19 = *(float **)(a3 + 8);
      v20 = v10;
      do
      {
        v21 = *v17;
        if (v19)
        {
          v22 = *v19++;
          v23 = v22;
          if (v21 > -0.0010005)
            v21 = -0.0010005;
          v16 = v19;
        }
        else
        {
          if (v21 > -0.0010005)
            v21 = -0.0010005;
          v23 = v15;
          v15 = v15 + 1.0;
        }
        *(_QWORD *)v20 = (unint64_t)v23;
        v20[2] = v21;
        ++v17;
        v20 += 4;
        v18 += 4;
      }
      while (v17 != v14 && v20 != (float *)v12);
    }
    v24 = (char *)v18 - (char *)v10;
    v25 = v24 >> 4;
    v53 = v24;
    if (v24 >= 17)
    {
      v26 = (unint64_t)(v25 - 2) >> 1;
      v27 = v26 + 1;
      v28 = &v10[4 * v26];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::ActivationPruning::pruneActivations(CoreRecognition::decoder::detail::ActivationsIterator<float>,CoreRecognition::decoder::detail::ActivationsIterator<float>)::{lambda(std::pair<unsigned long,float> const&,std::pair<unsigned long,float> const&)#1} &,std::__wrap_iter<std::pair<unsigned long,float>*>>((uint64_t)v11, v25, v28);
        v28 -= 4;
        --v27;
      }
      while (v27);
    }
    if (v17 != v14)
    {
      v29 = v16;
      do
      {
        v30 = *v17;
        if (*v17 > -0.0010005)
          v30 = -0.0010005;
        if (v30 > v11[2])
        {
          v31 = v15;
          if (v29)
            v31 = *v29;
          *(_QWORD *)v11 = (unint64_t)v31;
          v11[2] = v30;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::ActivationPruning::pruneActivations(CoreRecognition::decoder::detail::ActivationsIterator<float>,CoreRecognition::decoder::detail::ActivationsIterator<float>)::{lambda(std::pair<unsigned long,float> const&,std::pair<unsigned long,float> const&)#1} &,std::__wrap_iter<std::pair<unsigned long,float>*>>((uint64_t)v11, v25, v11);
          v29 = v16;
        }
        ++v17;
        if (v29)
          v16 = v29 + 1;
        else
          v15 = v15 + 1.0;
        if (v29)
          ++v29;
        else
          v29 = 0;
      }
      while (v17 != v14);
    }
    if (v53 >= 17)
    {
      v32 = (unint64_t)v53 >> 4;
      do
      {
        v33 = 0;
        v34 = *(_QWORD *)v11;
        v35 = v11[2];
        v36 = v32 - 2;
        if (v32 < 2)
          v36 = v32 - 1;
        v37 = v36 >> 1;
        v38 = v11;
        do
        {
          v39 = v38;
          v38 += 4 * v33 + 4;
          v40 = 2 * v33;
          v33 = (2 * v33) | 1;
          v41 = v40 + 2;
          if (v41 < v32 && v38[2] > v38[6])
          {
            v38 += 4;
            v33 = v41;
          }
          *(_QWORD *)v39 = *(_QWORD *)v38;
          v39[2] = v38[2];
        }
        while (v33 <= v37);
        if (v20 - 4 == v38)
        {
          *(_QWORD *)v38 = v34;
        }
        else
        {
          *(_QWORD *)v38 = *((_QWORD *)v20 - 2);
          v38[2] = *(v20 - 2);
          *((_QWORD *)v20 - 2) = v34;
          *(v20 - 2) = v35;
          v42 = (char *)v38 - (char *)v11 + 16;
          if (v42 < 17)
            goto LABEL_55;
          v43 = (((unint64_t)v42 >> 4) - 2) >> 1;
          v44 = v11[4 * v43 + 2];
          v35 = v38[2];
          if (v44 <= v35)
            goto LABEL_55;
          v45 = *(_QWORD *)v38;
          do
          {
            v46 = v38;
            v38 = &v11[4 * v43];
            *(_QWORD *)v46 = *(_QWORD *)v38;
            v46[2] = v44;
            if (!v43)
              break;
            v43 = (v43 - 1) >> 1;
            v44 = v11[4 * v43 + 2];
          }
          while (v44 > v35);
          *(_QWORD *)v38 = v45;
        }
        v38[2] = v35;
LABEL_55:
        v20 -= 4;
      }
      while (v32-- > 2);
    }
    v48 = *(float *)v54;
    if (*(_BYTE *)(v54 + 16))
    {
      v49 = expf(v48);
      v50 = 0.0;
      v4 = v52;
      while (v50 <= v49)
      {
        v50 = v50 + expf(v11[2]);
        v11 += 4;
        v9 -= 16;
        if (!v9)
          goto LABEL_65;
      }
    }
    else
    {
      v4 = v52;
      while (v11[2] >= v48)
      {
        v11 += 4;
        v9 -= 16;
        if (!v9)
        {
LABEL_65:
          v11 = (float *)v12;
          return std::vector<std::pair<unsigned long,float>>::erase((uint64_t)v4, (uint64_t)v11, v12);
        }
      }
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  return std::vector<std::pair<unsigned long,float>>::erase((uint64_t)v4, (uint64_t)v11, v12);
}

unint64_t CoreRecognition::decoder::BeamSearchQueue<CoreRecognition::decoder::CombinedBeamState>::getFreeCandidate(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[5];

  v2 = *a1;
  v3 = a1[1];
  v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v3 - v2) >> 3);
  if (v5 >= a1[3])
  {
    std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(v2, v3, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v3 - v2) >> 3));
    v8 = a1[1];
    v10 = *(_QWORD *)(v8 - 24);
    v9 = *(_QWORD *)(v8 - 16);
    v7 = v8;
    if (v9 != v10)
    {
      do
        v9 = std::shared_ptr<CoreRecognition::decoder::BaseState>::~shared_ptr[abi:ne180100](v9 - 16);
      while (v9 != v10);
      v7 = a1[1];
    }
    *(_QWORD *)(v8 - 16) = v10;
  }
  else
  {
    v6 = a1[2];
    if (v3 >= v6)
    {
      v11 = v5 + 1;
      if (v5 + 1 > 0x276276276276276)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v12 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - v2) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x13B13B13B13B13BLL)
        v13 = 0x276276276276276;
      else
        v13 = v11;
      v17[4] = a1 + 2;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>>(v13);
      else
        v14 = 0;
      v15 = v13 + 104 * v5;
      v17[0] = v13;
      v17[1] = v15;
      v17[3] = v13 + 104 * v14;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_QWORD *)(v15 + 64) = &off_1E98D8F00;
      *(_QWORD *)(v15 + 88) = 0;
      *(_QWORD *)(v15 + 96) = 0;
      *(_QWORD *)(v15 + 80) = 0;
      v17[2] = v15 + 104;
      std::vector<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::__swap_out_circular_buffer(a1, v17);
      v7 = a1[1];
      std::__split_buffer<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>>::~__split_buffer((uint64_t)v17);
    }
    else
    {
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
      *(_QWORD *)(v3 + 64) = &off_1E98D8F00;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 96) = 0;
      v7 = v3 + 104;
      *(_QWORD *)(v3 + 80) = 0;
    }
    a1[1] = v7;
  }
  return v7 - 104;
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void **v4;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void **v31[13];

  if (a3 >= 2)
  {
    v31[11] = v3;
    v31[12] = v4;
    v8 = 0;
    v26 = *(_OWORD *)(a1 + 32);
    v27 = *(_OWORD *)(a1 + 48);
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    v28 = *(_QWORD *)(a1 + 72);
    v29 = *(_OWORD *)(a1 + 80);
    v30 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v9 = (unint64_t)(a3 - 2) >> 1;
    v10 = a1;
    *(_QWORD *)(a1 + 80) = 0;
    do
    {
      v11 = v10;
      v12 = v8 + 1;
      v10 += 104 * (v8 + 1);
      v13 = 2 * v8;
      v8 = (2 * v8) | 1;
      v14 = v13 + 2;
      if (v14 < a3
        && *(double *)(v11 + 104 * v12 + 32) + *(double *)(v11 + 104 * v12 + 48) > *(double *)(v10 + 136)
                                                                                 + *(double *)(v10 + 152))
      {
        v10 += 104;
        v8 = v14;
      }
      v15 = *(_OWORD *)v10;
      v16 = *(_OWORD *)(v10 + 16);
      v17 = *(_OWORD *)(v10 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v10 + 32);
      *(_OWORD *)(v11 + 48) = v17;
      *(_OWORD *)v11 = v15;
      *(_OWORD *)(v11 + 16) = v16;
      *(_QWORD *)(v11 + 72) = *(_QWORD *)(v10 + 72);
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((void **)(v11 + 80));
      v18 = (void **)(v10 + 80);
      *(_OWORD *)(v11 + 80) = *(_OWORD *)(v10 + 80);
      *(_QWORD *)(v11 + 96) = *(_QWORD *)(v10 + 96);
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      *(_QWORD *)(v10 + 96) = 0;
    }
    while (v8 <= v9);
    v19 = (__int128 *)(a2 - 104);
    if (a2 - 104 == v10)
    {
      *(_OWORD *)(v10 + 32) = v26;
      *(_OWORD *)(v10 + 48) = v27;
      *(_OWORD *)v10 = v24;
      *(_OWORD *)(v10 + 16) = v25;
      *(_QWORD *)(v10 + 72) = v28;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate(v18);
      *(_OWORD *)(v10 + 80) = v29;
      *(_QWORD *)(v10 + 96) = v30;
      v29 = 0uLL;
      v30 = 0;
    }
    else
    {
      v20 = *v19;
      v21 = *(_OWORD *)(a2 - 88);
      v22 = *(_OWORD *)(a2 - 56);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(v10 + 48) = v22;
      *(_OWORD *)v10 = v20;
      *(_OWORD *)(v10 + 16) = v21;
      *(_QWORD *)(v10 + 72) = *(_QWORD *)(a2 - 32);
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate(v18);
      v23 = (_QWORD *)(a2 - 24);
      *(_OWORD *)(v10 + 80) = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v10 + 96) = *(_QWORD *)(a2 - 8);
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      *(_OWORD *)(a2 - 72) = v26;
      *(_OWORD *)(a2 - 56) = v27;
      *v19 = v24;
      *(_OWORD *)(a2 - 88) = v25;
      *(_QWORD *)(a2 - 32) = v28;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((void **)(a2 - 24));
      *(_OWORD *)v23 = v29;
      *(_QWORD *)(a2 - 8) = v30;
      v29 = 0uLL;
      v30 = 0;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(a1, v10 + 104, 0x4EC4EC4EC4EC4EC5 * ((v10 + 104 - a1) >> 3));
    }
    v31[0] = (void **)&v29;
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](v31);
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[24];
  void **v23[15];

  v7 = a3 - 2;
  if (a3 >= 2)
  {
    v23[1] = v6;
    v23[2] = v5;
    v23[13] = v3;
    v23[14] = v4;
    v9 = v7 >> 1;
    if (*(double *)(a1 + 104 * (v7 >> 1) + 32) + *(double *)(a1 + 104 * (v7 >> 1) + 48) > *(double *)(a2 - 72)
                                                                                         + *(double *)(a2 - 56))
    {
      v10 = (__int128 *)(a2 - 104);
      v20 = *(_OWORD *)(a2 - 72);
      v21 = *(_OWORD *)(a2 - 56);
      v18 = *(_OWORD *)(a2 - 104);
      v19 = *(_OWORD *)(a2 - 88);
      v11 = *(_QWORD *)(a2 - 32);
      v17 = *(_OWORD *)(a2 - 24);
      v12 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      do
      {
        v13 = v10;
        v10 = (__int128 *)(a1 + 104 * v9);
        v14 = *v10;
        v15 = v10[1];
        v16 = v10[3];
        v13[2] = v10[2];
        v13[3] = v16;
        *v13 = v14;
        v13[1] = v15;
        *((_QWORD *)v13 + 9) = *((_QWORD *)v10 + 9);
        std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((void **)v13 + 10);
        v13[5] = v10[5];
        *((_QWORD *)v13 + 12) = *((_QWORD *)v10 + 12);
        *((_QWORD *)v10 + 11) = 0;
        *((_QWORD *)v10 + 10) = 0;
        *((_QWORD *)v10 + 12) = 0;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
      }
      while (*(double *)(a1 + 104 * v9 + 32) + *(double *)(a1 + 104 * v9 + 48) > *(double *)&v20 + *(double *)&v21);
      v10[2] = v20;
      v10[3] = v21;
      *v10 = v18;
      v10[1] = v19;
      *((_QWORD *)v10 + 9) = v11;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((void **)v10 + 10);
      v10[5] = v17;
      *((_QWORD *)v10 + 12) = v12;
      memset(v22, 0, sizeof(v22));
      v23[0] = (void **)v22;
      std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](v23);
    }
  }
}

void std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<CoreRecognition::decoder::BaseState>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(uint64_t **)a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    result = (uint64_t *)std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_24:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v17 = *(_QWORD *)(a1 + 8);
  v18 = (v17 - (uint64_t)result) >> 4;
  if (v18 < a4)
  {
    v19 = &a2[2 * v18];
    if ((uint64_t *)v17 != result)
    {
      do
      {
        v20 = *v6;
        v21 = v6[1];
        v6 += 2;
        result = std::shared_ptr<CoreRecognition::decoder::BaseState>::operator=[abi:ne180100](result, v20, v21) + 2;
      }
      while (v6 != v19);
      result = *(uint64_t **)(a1 + 8);
    }
    v13 = result;
    if (v19 != a3)
    {
      v13 = result;
      do
      {
        v22 = v19[1];
        *v13 = *v19;
        v13[1] = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v19 += 2;
        v13 += 2;
      }
      while (v19 != a3);
    }
    goto LABEL_24;
  }
  if (a2 == a3)
  {
    v25 = result;
  }
  else
  {
    v25 = result;
    do
    {
      v26 = *v6;
      v27 = v6[1];
      v6 += 2;
      result = std::shared_ptr<CoreRecognition::decoder::BaseState>::operator=[abi:ne180100](result, v26, v27) + 2;
      v25 += 2;
    }
    while (v6 != a3);
    v17 = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)v17 != v25)
  {
    v17 -= 16;
    result = (uint64_t *)std::shared_ptr<CoreRecognition::decoder::BaseState>::~shared_ptr[abi:ne180100](v17);
  }
  *(_QWORD *)(a1 + 8) = v25;
  return result;
}

char *std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::shared_ptr<CoreRecognition::decoder::BaseState>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>,std::back_insert_iterator<std::vector<unsigned long>>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = (_QWORD *)(a3 + 16);
    v7 = *(_QWORD **)(a3 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        v9 = *(_QWORD **)a3;
        v10 = ((uint64_t)v7 - *(_QWORD *)a3) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v12 = *v6 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v13);
          v9 = *(_QWORD **)a3;
          v7 = *(_QWORD **)(a3 + 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = *v5;
        v8 = v15 + 8;
        while (v7 != v9)
        {
          v16 = *--v7;
          *((_QWORD *)v15 - 1) = v16;
          v15 -= 8;
        }
        *(_QWORD *)a3 = v15;
        *(_QWORD *)(a3 + 8) = v8;
        *(_QWORD *)(a3 + 16) = &v14[8 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v7 = *v5;
        v8 = v7 + 1;
      }
      *(_QWORD *)(a3 + 8) = v8;
      ++v5;
      v7 = v8;
    }
    while (v5 != a2);
  }
}

_QWORD *std::__tree<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::__map_value_compare<std::vector<unsigned long>,std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>,std::less<std::vector<unsigned long>>,true>,std::allocator<std::__value_type<std::vector<unsigned long>,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> *>>>::find<std::vector<unsigned long>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  unint64_t v16;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = result;
    do
    {
      if (a2 == a3)
      {
LABEL_12:
        v6 = v4;
      }
      else
      {
        v7 = (unint64_t *)v4[4];
        v8 = a2 + 1;
        while (v7 != (unint64_t *)v4[5])
        {
          v9 = *v7;
          v10 = *(v8 - 1);
          if (*v7 < v10)
            break;
          ++v7;
          if (v10 < v9 || v8++ == a3)
            goto LABEL_12;
        }
        ++v4;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if (result != v6)
    {
      v13 = v6[4];
      v12 = v6[5];
      if (v13 == v12)
      {
        return v6;
      }
      else
      {
        for (i = v13 + 8; a2 != a3; i += 8)
        {
          v15 = *a2;
          v16 = *(_QWORD *)(i - 8);
          if (*a2 < v16)
            break;
          ++a2;
          if (v16 < v15 || i == v12)
            return v6;
        }
      }
    }
  }
  return result;
}

uint64_t std::vector<std::pair<unsigned long,float>>::erase(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 != a3)
  {
    v3 = *(_QWORD *)(result + 8);
    if (a3 != v3)
    {
      v4 = 16 * ((a3 - a2) >> 4);
      do
      {
        *(_QWORD *)a2 = *(_QWORD *)(a2 + v4);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + v4 + 8);
        a2 += 16;
      }
      while (a2 + v4 != v3);
    }
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::ActivationPruning::pruneActivations(CoreRecognition::decoder::detail::ActivationsIterator<float>,CoreRecognition::decoder::detail::ActivationsIterator<float>)::{lambda(std::pair<unsigned long,float> const&,std::pair<unsigned long,float> const&)#1} &,std::__wrap_iter<std::pair<unsigned long,float>*>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      v5 = v3 >> 3;
      v6 = (v3 >> 3) | 1;
      v7 = (float *)(result + 16 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && v7[2] > v7[6])
      {
        v7 += 4;
        v6 = v8;
      }
      v9 = v7[2];
      v10 = a3[2];
      if (v9 <= v10)
      {
        v11 = *(_QWORD *)a3;
        do
        {
          v12 = a3;
          a3 = v7;
          *(_QWORD *)v12 = *(_QWORD *)v7;
          v12[2] = v9;
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (float *)(result + 16 * v6);
          v14 = v13 + 2;
          if (v14 < a2 && v7[2] > v7[6])
          {
            v7 += 4;
            v6 = v14;
          }
          v9 = v7[2];
        }
        while (v9 <= v10);
        *(_QWORD *)a3 = v11;
        a3[2] = v10;
      }
    }
  }
  return result;
}

char *std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__init_with_size[abi:ne180100]<std::shared_ptr<CoreRecognition::decoder::BaseState>*,std::shared_ptr<CoreRecognition::decoder::BaseState>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1D51147C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<CoreRecognition::decoder::BaseState>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreRecognition::decoder::CTCBeamSearchDecoder<CoreRecognition::decoder::AdditiveCombiningBeamScorer<CoreRecognition::decoder::CombinedBeamState>,CoreRecognition::decoder::CharacterSegmentedPathBuilder<CoreRecognition::decoder::CombinedBeamState>>::decode(CoreRecognition::decoder::ActivationMatrix const&,CoreRecognition::decoder::Context const&)::{lambda(CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*,CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState> const*)#1} &,std::__wrap_iter<CoreRecognition::decoder::BeamEntry<CoreRecognition::decoder::CombinedBeamState>**>>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) | 1;
      v7 = (_QWORD *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2
        && *(double *)(*v7 + 32) + *(double *)(*v7 + 48) > *(double *)(v7[1] + 32) + *(double *)(v7[1] + 48))
      {
        ++v7;
        v6 = v8;
      }
      v9 = *v7;
      v10 = *a3;
      v11 = *(double *)(*a3 + 32) + *(double *)(*a3 + 48);
      if (*(double *)(*v7 + 32) + *(double *)(*v7 + 48) <= v11)
      {
        do
        {
          *a3 = v9;
          a3 = v7;
          if (v4 < v6)
            break;
          v12 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (_QWORD *)(result + 8 * v6);
          v13 = v12 + 2;
          if (v13 < a2
            && *(double *)(*v7 + 32) + *(double *)(*v7 + 48) > *(double *)(v7[1] + 32) + *(double *)(v7[1] + 48))
          {
            ++v7;
            v6 = v13;
          }
          v9 = *v7;
        }
        while (*(double *)(*v7 + 32) + *(double *)(*v7 + 48) <= v11);
        *a3 = v10;
      }
    }
  }
  return result;
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return MEMORY[0x1E0CAE3A0]();
}

uint64_t CharacterSet.union(_:)()
{
  return MEMORY[0x1E0CAE440]();
}

uint64_t CharacterSet.contains(_:)()
{
  return MEMORY[0x1E0CAE488]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.UnicodeScalarView.append<A>(contentsOf:)()
{
  return MEMORY[0x1E0DEA6B8]();
}

uint64_t String.insert(_:at:)()
{
  return MEMORY[0x1E0DEA818]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x1E0DEA840]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x1E0CB2410]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x1E0DEC2A0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x1E0DEC590]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1E0DED770]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB0](red, green, blue, alpha);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB8](red, green, blue, alpha);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFD0](c, x, y);
}

void CGContextAddRects(CGContextRef c, const CGRect *rects, size_t count)
{
  MEMORY[0x1E0C9BFF0](c, rects, count);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C330](c, x, y);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetGrayFillColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
  MEMORY[0x1E0C9C448](c, gray, alpha);
}

void CGContextSetGrayStrokeColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
  MEMORY[0x1E0C9C450](c, gray, alpha);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A8](c, red, green, blue, alpha);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
  MEMORY[0x1E0C9C520](c, *(_QWORD *)&mode);
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C538](c, x, y);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C578](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
  MEMORY[0x1E0C9D2B0](path, m, points, count);
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  MEMORY[0x1E0C9D2C8](path, m, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1E0C9D318](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D320](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D410](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D560]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFDictionaryRef CMCopyDictionaryOfAttachments(CFAllocatorRef allocator, CMAttachmentBearerRef target, CMAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9ED80](allocator, target, *(_QWORD *)&attachmentMode);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1E0C9EFD8](sbuf);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A88](name, matrix, size);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  CGFloat result;

  MEMORY[0x1E0CA7C50](font);
  return result;
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  MEMORY[0x1E0CA7DA0](frame, context);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1E0CA7DD8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

uint64_t CVNLPCodepointToScriptCode()
{
  return MEMORY[0x1E0D099F8]();
}

uint64_t CVNLPIsDigitCharLMCodepoint()
{
  return MEMORY[0x1E0D09A20]();
}

uint64_t CVNLPIsLatinCyrillicMixedScript()
{
  return MEMORY[0x1E0D09A28]();
}

uint64_t CVNLPIsWhitespaceCharLMCodepoint()
{
  return MEMORY[0x1E0D09A30]();
}

uint64_t CVNLPIsWordSeparatorForLexicon()
{
  return MEMORY[0x1E0D09A38]();
}

uint64_t CVNLPLanguageModelCreate()
{
  return MEMORY[0x1E0D09A40]();
}

uint64_t CVNLPLanguageModelLogConditionalProbabilityForTokenString()
{
  return MEMORY[0x1E0D09A48]();
}

uint64_t CVNLPLanguageModelLogJointProbability()
{
  return MEMORY[0x1E0D09A50]();
}

uint64_t CVNLPLanguageModelWithStateConditionalProbability()
{
  return MEMORY[0x1E0D09A58]();
}

uint64_t CVNLPLanguageModelWithStateCreate()
{
  return MEMORY[0x1E0D09A60]();
}

uint64_t CVNLPLanguageModelWithStateCreateCopy()
{
  return MEMORY[0x1E0D09A68]();
}

uint64_t CVNLPLanguageModelWithStateUpdateWithContext()
{
  return MEMORY[0x1E0D09A70]();
}

uint64_t CVNLPLogGeneralFault()
{
  return MEMORY[0x1E0D09A78]();
}

uint64_t CVNLPNormalizeCodepointForCharLM()
{
  return MEMORY[0x1E0D09A80]();
}

uint64_t CVNLPShouldIgnoreScriptForLatinCyrillic()
{
  return MEMORY[0x1E0D09A88]();
}

uint64_t CVNLPShouldUseLexiconContextLogProb()
{
  return MEMORY[0x1E0D09A90]();
}

uint64_t CVNLPWordTokenIDsForString()
{
  return MEMORY[0x1E0D09AA8]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AB8](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AC0](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B68](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1E0D43820]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1E0D42C60]();
}

uint64_t LMLanguageModelConditionalProbabilityVector()
{
  return MEMORY[0x1E0D42C68]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1E0D42C78]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1E0D42CC0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1E0D42D00]();
}

uint64_t LMLanguageModelTokenIDisUnknown()
{
  return MEMORY[0x1E0D42D40]();
}

uint64_t LMLexiconCursorFirstTokenID()
{
  return MEMORY[0x1E0D42D58]();
}

uint64_t LMLexiconCursorGetTraversedCharacters()
{
  return MEMORY[0x1E0D42D60]();
}

uint64_t LMLexiconCursorHasChildren()
{
  return MEMORY[0x1E0D42D68]();
}

uint64_t LMLexiconCursorHasEntries()
{
  return MEMORY[0x1E0D42D70]();
}

uint64_t LMLexiconCursorHash()
{
  return MEMORY[0x1E0D42D78]();
}

uint64_t LMLexiconCursorTraversedLength()
{
  return MEMORY[0x1E0D42D80]();
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters()
{
  return MEMORY[0x1E0D42D88]();
}

uint64_t LMLexiconGetRootCursor()
{
  return MEMORY[0x1E0D42D98]();
}

uint64_t LMLexiconResetCursors()
{
  return MEMORY[0x1E0D42DD0]();
}

uint64_t LMStreamTokenizerCreate()
{
  return MEMORY[0x1E0D42DF8]();
}

uint64_t LMStreamTokenizerPushBytes()
{
  return MEMORY[0x1E0D42E08]();
}

uint64_t LMStreamTokenizerRelease()
{
  return MEMORY[0x1E0D42E10]();
}

uint64_t LMStreamTokenizerReset()
{
  return MEMORY[0x1E0D42E18]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x1E0D43530]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x1E0D43540]();
}

uint64_t LXCursorHasChildren()
{
  return MEMORY[0x1E0D43570]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x1E0D43578]();
}

uint64_t LXCursorIsRoot()
{
  return MEMORY[0x1E0D43588]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x1E0D435A8]();
}

uint64_t LXLexiconAdd()
{
  return MEMORY[0x1E0D43650]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1E0D43690]();
}

uint64_t LXLexiconCreateMutable()
{
  return MEMORY[0x1E0D43698]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1E0D436A0]();
}

uint64_t LXLexiconIncrementUsageCount()
{
  return MEMORY[0x1E0D436E0]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x1E0DE2B78]();
}

NSArray *MLAllComputeDevices(void)
{
  return (NSArray *)MEMORY[0x1E0C9E858]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

NSRect NSIntegralRect(NSRect aRect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  NSRect result;

  MEMORY[0x1E0CB2C48]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSRect NSRectFromString(NSString *aString)
{
  double v1;
  double v2;
  double v3;
  double v4;
  NSRect result;

  MEMORY[0x1E0CB3150](aString);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return (NSString *)MEMORY[0x1E0CB3210]((__n128)aPoint, *(__n128 *)&aPoint.y);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return (NSString *)MEMORY[0x1E0CB3228]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return (NSString *)MEMORY[0x1E0CB3240]((__n128)aSize, *(__n128 *)&aSize.height);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

OSStatus VTPixelRotationSessionCreate(CFAllocatorRef allocator, VTPixelRotationSessionRef *pixelRotationSessionOut)
{
  return MEMORY[0x1E0CECCD8](allocator, pixelRotationSessionOut);
}

void VTPixelRotationSessionInvalidate(VTPixelRotationSessionRef session)
{
  MEMORY[0x1E0CECCE8](session);
}

OSStatus VTPixelRotationSessionRotateImage(VTPixelRotationSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1E0CECCF0](session, sourceBuffer, destinationBuffer);
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1E0CECD18](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x1E0CECD28](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1E0CECD38](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0CECD80](session, propertyKey, propertyValue);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4280](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4310](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4638]();
}

{
  return MEMORY[0x1E0DE4658]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1E0DE4AE0]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x1E0DE4AE8]();
}

uint64_t std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>()
{
  return MEMORY[0x1E0DE4AF0]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1E0DE4AF8]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::valarray<unsigned long>::resize()
{
  return MEMORY[0x1E0DE4D20]();
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete[](void *__p, std::align_val_t a2)
{
  off_1E98D7920(__p, a2);
}

uint64_t operator delete[]()
{
  return off_1E98D7928();
}

void operator delete(void *__p)
{
  off_1E98D7930(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_1E98D7938(__p, a2);
}

uint64_t operator delete()
{
  return off_1E98D7940();
}

void *__cdecl operator new[](size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E98D7948(__sz, a2);
}

uint64_t operator new[]()
{
  return off_1E98D7950();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E98D7958(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E98D7960(__sz, a2);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E98D7968(__sz, a2);
}

uint64_t operator new()
{
  return off_1E98D7970();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x1E0C81630](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5270](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5280](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

uint64_t convertToCVNLPTextDecodingResult()
{
  return MEMORY[0x1E0D09B18]();
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

uint64_t dgeqrf_NEWLAPACK()
{
  return MEMORY[0x1E0C8BCD0]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

uint64_t dorgqr_NEWLAPACK()
{
  return MEMORY[0x1E0C8BD48]();
}

uint64_t espresso_blob_is_dynamic()
{
  return MEMORY[0x1E0D1FED8]();
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1E0D1FEE8]();
}

uint64_t espresso_buffer_unpack_tensor_shape()
{
  return MEMORY[0x1E0D1FF00]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1E0D1FF10]();
}

uint64_t espresso_context_set_low_precision_accumulation()
{
  return MEMORY[0x1E0D1FF28]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1E0D1FF38]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1E0D1FF40]();
}

uint64_t espresso_device_id_for_metal_device()
{
  return MEMORY[0x1E0D1FF60]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1E0D1FFB8]();
}

uint64_t espresso_network_change_blob_shape()
{
  return MEMORY[0x1E0D20008]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x1E0D20038]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x1E0D20040]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x1E0D20080]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1E0D200B0]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1E0D200C8]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1E0D200D8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1E0D200E8]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1E0D20100]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x1E0D20110]();
}

uint64_t espresso_plan_get_phase()
{
  return MEMORY[0x1E0D20120]();
}

uint64_t espresso_plan_submit()
{
  return MEMORY[0x1E0D20150]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

long double log1p(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BD0](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

uint64_t pc_session_add_metric()
{
  return MEMORY[0x1E0DE8148]();
}

uint64_t pc_session_begin()
{
  return MEMORY[0x1E0DE8160]();
}

uint64_t pc_session_create()
{
  return MEMORY[0x1E0DE8168]();
}

uint64_t pc_session_destroy()
{
  return MEMORY[0x1E0DE8180]();
}

uint64_t pc_session_end()
{
  return MEMORY[0x1E0DE8190]();
}

uint64_t pc_session_get_value()
{
  return MEMORY[0x1E0DE81A0]();
}

uint64_t pc_session_set_procpid()
{
  return MEMORY[0x1E0DE81B8]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1E0C85650](__str, __sep, __lasts);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

float tanf(float a1)
{
  float result;

  MEMORY[0x1E0C857F0](a1);
  return result;
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x1E0C85800](a1);
  return result;
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1E0DE5978](*(_QWORD *)&c);
}

UBool u_isWhitespace(UChar32 c)
{
  return MEMORY[0x1E0DE5A10](*(_QWORD *)&c);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x1E0DE5A30](*(_QWORD *)&c);
}

UBool u_islower(UChar32 c)
{
  return MEMORY[0x1E0DE5A38](*(_QWORD *)&c);
}

UBool u_ispunct(UChar32 c)
{
  return MEMORY[0x1E0DE5A48](*(_QWORD *)&c);
}

UBool u_isupper(UChar32 c)
{
  return MEMORY[0x1E0DE5A60](*(_QWORD *)&c);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1E0DE5B10](*(_QWORD *)&c);
}

uint64_t ubidi_close()
{
  return MEMORY[0x1E0DE5BD8]();
}

uint64_t ubidi_getLogicalMap()
{
  return MEMORY[0x1E0DE5C00]();
}

uint64_t ubidi_getParaLevel()
{
  return MEMORY[0x1E0DE5C10]();
}

uint64_t ubidi_getVisualMap()
{
  return MEMORY[0x1E0DE5C30]();
}

uint64_t ubidi_open()
{
  return MEMORY[0x1E0DE5C38]();
}

uint64_t ubidi_setInverse()
{
  return MEMORY[0x1E0DE5C58]();
}

uint64_t ubidi_setPara()
{
  return MEMORY[0x1E0DE5C60]();
}

uint64_t ubidi_setReorderingMode()
{
  return MEMORY[0x1E0DE5C70]();
}

uint64_t ubidi_writeReordered()
{
  return MEMORY[0x1E0DE5C80]();
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1E0DE5C88](*(_QWORD *)&c);
}

void vDSP_maxmgvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
  MEMORY[0x1E0C8C198](__A, __IA, __C, __I, __N);
}

void vDSP_sveD(const double *__A, vDSP_Stride __I, double *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C2F8](__A, __I, __C, __N);
}

void vDSP_vclipc(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N, vDSP_Length *__NLow, vDSP_Length *__NHigh)
{
  MEMORY[0x1E0C8C3F0](__A, __IA, __B, __C, __D, __ID, __N, __NLow);
}

void vDSP_vlim(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C680](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vmax(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C6C0](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C800](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C860](__A, __IA, __B, __C, __IC, __N);
}

vImage_Error vImageBuffer_InitWithCGImage(vImage_Buffer *buf, vImage_CGImageFormat *format, const CGFloat *backgroundColor, CGImageRef image, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CC28](buf, format, backgroundColor, image, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD70](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_422CbYpCrYp8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD88](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_444AYpCbCr8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDC0](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_444CrYpCb8ToARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CDD8](src, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To444AYpCbCr8(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE70](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To444CrYpCb8(const vImage_Buffer *src, const vImage_Buffer *dest, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8CE80](src, dest, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888toRGB888(const vImage_Buffer *a1, const vImage_Buffer *a2, vImage_Flags a3)
{
  return MEMORY[0x1E0C8CEB8](a1, a2, *(_QWORD *)&a3);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CEE8](matrix, pixelRange, outInfo, *(_QWORD *)&inARGBType, *(_QWORD *)&outYpCbCrType, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8ToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF70](alpha, red, green, blue, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF90](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFC8](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_RGB888toARGB8888(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_8 a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags a6)
{
  return MEMORY[0x1E0C8D028](a1, a2, a3, a4, a5, *(_QWORD *)&a6);
}

vImage_Error vImageConvert_RGB888toPlanar8(const vImage_Buffer *rgbSrc, const vImage_Buffer *redDest, const vImage_Buffer *greenDest, const vImage_Buffer *blueDest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D040](rgbSrc, redDest, greenDest, blueDest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D0F8](matrix, pixelRange, outInfo, *(_QWORD *)&inYpCbCrType, *(_QWORD *)&outARGBType, *(_QWORD *)&flags);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D1E0](src, dest, pixelSize, *(_QWORD *)&flags);
}

CGImageRef vImageCreateCGImageFromBuffer(const vImage_Buffer *buf, const vImage_CGImageFormat *format, void (__cdecl *callback)(void *, void *), void *userData, vImage_Flags flags, vImage_Error *error)
{
  return (CGImageRef)MEMORY[0x1E0C8D1E8](buf, format, callback, userData, *(_QWORD *)&flags, error);
}

vImage_Error vImageDilate_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const unsigned __int8 *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D210](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(_QWORD *)&flags);
}

vImage_Error vImageDilate_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const float *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D218](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(_QWORD *)&flags);
}

vImage_Error vImageErode_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const float *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D278](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(_QWORD *)&flags);
}

vImage_Error vImageExtractChannel_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D288](src, dest, channelIndex, *(_QWORD *)&flags);
}

vImage_Error vImageHorizontalReflect_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D340](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageHorizontalReflect_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D360](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGB8888ToPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[4], int32_t divisor, const int16_t pre_bias[4], int32_t post_bias, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D418](src, dest, matrix, *(_QWORD *)&divisor, pre_bias, *(_QWORD *)&post_bias, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannelsWithPixel_ARGB8888(const Pixel_8888 the_pixel, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D4A0](the_pixel, src, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannels_ARGB8888(const vImage_Buffer *newSrc, const vImage_Buffer *origSrc, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D4E8](newSrc, origSrc, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannels_RGB888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[3], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D538](src, dest, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D658](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D688](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, float angleInRadians, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6C8](src, dest, tempBuffer, backColor, *(_QWORD *)&flags, angleInRadians);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6E8](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D728](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageVerticalReflect_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D7F8](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageVerticalReflect_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D818](src, dest, *(_QWORD *)&flags);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

