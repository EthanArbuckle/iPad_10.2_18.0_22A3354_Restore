uint64_t deviceHasAppleNeuralEngine()
{
  if (qword_1ED0B44D0 != -1)
    dispatch_once(&qword_1ED0B44D0, &__block_literal_global_195);
  return _MergedGlobals_15;
}

uint64_t __deviceHasAppleNeuralEngine_block_invoke()
{
  _MergedGlobals_15 = espresso_create_context() != 0;
  return espresso_context_destroy();
}

CRGeometryUtilities __swiftcall CRGeometryUtilities.init()()
{
  return (CRGeometryUtilities)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id CRGeometryUtilities.init()()
{
  objc_super v1;

  v1.super_class = (Class)CRGeometryUtilities;
  return objc_msgSendSuper2(&v1, sel_init);
}

BOOL specialized static CRGeometryUtilities.checkIntersection(forLineThroughPoint:andPoint:andSegmentStartingAt:andEndingAt:intersectAt:)(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;

  v9 = a4 - a2;
  v10 = a5 - a3;
  v11 = (a4 - a2) * (a9 - a7) - (a5 - a3) * (a8 - a6);
  if (v11 == 0.0)
    return 0;
  v13 = a3 * a4 - a2 * a5;
  v14 = a7 * a8 - a6 * a9;
  v15 = v13 * (a8 - a6) - v9 * v14;
  v16 = (v13 * (a9 - a7) - v10 * v14) / v11;
  *a1 = v15 / v11;
  a1[1] = v16;
  return (v15 / v11 - a6) * (v15 / v11 - a8) + (v16 - a7) * (v16 - a9) <= 0.0;
}

unint64_t type metadata accessor for CRGeometryUtilities()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CRGeometryUtilities;
  if (!lazy cache variable for type metadata for CRGeometryUtilities)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CRGeometryUtilities);
  }
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return 0;
  v6 = 0;
  v7 = a3 + 32;
  while (1)
  {
    v10 = *(_QWORD *)(v7 + 8 * v6);
    swift_bridgeObjectRetain();
    v8 = a1(&v10);
    swift_bridgeObjectRelease();
    if (v3 || (v8 & 1) != 0)
      break;
    if (v4 == ++v6)
      return 0;
  }
  return v6;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v6 = a3 + 24;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v4);
      swift_bridgeObjectRetain();
      v7 = a1(&v9);
      swift_bridgeObjectRelease();
      if (v3)
        break;
      --v4;
    }
    while (!(v7 & 1 | (v4 == 0)));
  }
  return v4;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t (*v24)();
  uint64_t *v25;
  _QWORD *v26;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  result = specialized Sequence._copyContents(initializing:)(&v28, &v4[v11 + 4], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v13 = v4[2];
    v14 = __OFADD__(v13, result);
    v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_31;
    }
    v4[2] = v15;
  }
  if (result != v12)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v4;
    return result;
  }
LABEL_16:
  if (!v29)
    goto LABEL_13;
  v16 = v29 - 1;
  if (!__OFSUB__(v29, 1))
  {
    v2 = v4[2];
    v17 = v28;
    v18 = specialized Array.subscript.read((uint64_t (*)())v27, v29 - 1, v28);
    v20 = *v19;
    swift_bridgeObjectRetain();
    ((void (*)(_BYTE *, _QWORD))v18)(v27, 0);
    while (1)
    {
LABEL_20:
      v21 = v4[3];
      v22 = v21 >> 1;
      v23 = v2 + 1;
      if ((uint64_t)(v21 >> 1) < v2 + 1)
      {
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v2 + 1, 1, v4);
        v23 = v2 + 1;
        v4 = v26;
        v22 = v26[3] >> 1;
        if (v2 < v22)
        {
LABEL_22:
          v4[v2 + 4] = v20;
          if (v16)
          {
            while (1)
            {
              v14 = __OFSUB__(v16--, 1);
              if (v14)
                break;
              v24 = specialized Array.subscript.read((uint64_t (*)())v27, v16, v17);
              v20 = *v25;
              swift_bridgeObjectRetain();
              ((void (*)(_BYTE *, _QWORD))v24)(v27, 0);
              if (v22 - 1 == v2)
              {
                v2 = v22;
                v4[2] = v22;
                goto LABEL_20;
              }
              v4[v2++ + 5] = v20;
              if (!v16)
                goto LABEL_32;
            }
LABEL_31:
            __break(1u);
LABEL_32:
            v23 = v2 + 1;
          }
          v4[2] = v23;
          goto LABEL_13;
        }
      }
      else if (v2 < v22)
      {
        goto LABEL_22;
      }
      v4[2] = v2;
    }
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Unicode.Scalar]>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    *(_QWORD *)result = *(_QWORD *)(a3 + 8 * a2 + 32);
    swift_bridgeObjectRetain();
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence._copyContents(initializing:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v8 = *(_QWORD *)(a4 + 16);
    v6 = 0;
    goto LABEL_17;
  }
  v7 = a3;
  if (!a3)
  {
    v8 = *(_QWORD *)(a4 + 16);
    v6 = 0;
    goto LABEL_17;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
  {
LABEL_20:
    v8 = 0;
    goto LABEL_17;
  }
  v8 = v6 - 1;
  *a2 = *(_QWORD *)(a4 + 32 + 8 * (v6 - 1));
  if (a3 == 1)
  {
LABEL_13:
    v6 = v7;
    goto LABEL_14;
  }
  if (v6 != 1)
  {
    v8 = v6 - 2;
    a2[1] = *(_QWORD *)(a4 + 32 + 8 * (v6 - 2));
    v9 = a3 - 2;
    if (a3 != 2)
    {
      v10 = 0;
      v11 = a2 + 2;
      v12 = a4 + 8 * v6 + 8;
      while (v8 + v10)
      {
        swift_bridgeObjectRetain();
        *v11++ = *(_QWORD *)(v12 + 8 * v10--);
        if (!(v9 + v10))
        {
          v8 += v10;
          goto LABEL_12;
        }
      }
      v8 = 0;
      v7 = v6;
    }
LABEL_12:
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
LABEL_14:
  swift_bridgeObjectRetain();
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Unicode.Scalar]>);
      v7 = (_QWORD *)swift_allocObject();
      v8 = _swift_stdlib_malloc_size(v7);
      v9 = v8 - 32;
      if (v8 < 32)
        v9 = v8 - 25;
      v7[2] = v5;
      v7[3] = 2 * (v9 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v12 = v8 + v6;
      else
        v12 = v8;
      isUniquelyReferenced_nonNull_native = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 1, v7);
      v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_12:
  if ((v7[3] >> 1) - v7[2] < v6)
    goto LABEL_19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
  swift_arrayInitWithCopy();
  if (v6 <= 0)
  {
LABEL_16:
    *(_QWORD *)v4 = v7;
    return;
  }
  v13 = v7[2];
  v14 = __OFADD__(v13, v6);
  v15 = v13 + v6;
  if (!v14)
  {
    v7[2] = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t specialized static CRBiDiTransform._rearrangeNumericRuns(inLogicalToken:layoutDirection:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;

  v4 = type metadata accessor for CharacterSet();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v74 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v74 - v12;
  v83 = a1 & 0xFFFFFFFFFFFFLL;
  v84 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0)
    v14 = HIBYTE(a2) & 0xF;
  else
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v14)
    goto LABEL_9;
  CharacterSet.init(charactersIn:)();
  swift_bridgeObjectRelease();
  CharacterSet.init(charactersIn:)();
  CharacterSet.union(_:)();
  v87 = a1;
  v88 = a2;
  lazy protocol witness table accessor for type String and conformance String();
  v15 = StringProtocol.trimmingCharacters(in:)();
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v15 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v11, v4);
    v19(v13, v4);
LABEL_9:
    swift_bridgeObjectRetain();
    return a1;
  }
  v75 = v8;
  v76 = v5;
  v77 = v4;
  v81 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v82 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 1;
  v78 = xmmword_1D513A0C0;
  v79 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_12:
  v80 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v87 = a1;
          v88 = v82;
        }
        else if ((a1 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        v23 = _decodeScalar(_:startingAt:)();
      }
      v25 = v23;
      v21 += v24;
      v26 = CharacterSet.contains(_:)();
      if ((v26 & 1) != 0)
      {
        if (*((_QWORD *)v80 + 2))
        {
          swift_bridgeObjectRetain();
          v30 = v79;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
          v32 = v30[2];
          v31 = v30[3];
          v33 = v30;
          if (v32 >= v31 >> 1)
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
          v33[2] = v32 + 1;
          v34 = &v33[v32];
          v35 = v33;
          v34[4] = v80;
        }
        else
        {
          v35 = v79;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = v78;
        *(_DWORD *)(v36 + 32) = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        v37 = v35;
        v38 = v35[2];
        v79 = v37;
        v39 = v37[3];
        if (v38 >= v39 >> 1)
          v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v38 + 1, 1, v79);
        v40 = v79;
        v79[2] = v38 + 1;
        v40[v38 + 4] = v36;
        swift_bridgeObjectRelease();
        if (v21 >= v14)
          goto LABEL_79;
LABEL_44:
        v22 = v26 ^ 1;
        goto LABEL_12;
      }
      if ((CharacterSet.contains(_:)() & 1) != 0)
        break;
      if (v21 >= v14)
        goto LABEL_51;
    }
    if ((v22 & 1) == 0 && *((_QWORD *)v80 + 2))
      break;
    v27 = v80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v29 = *((_QWORD *)v27 + 2);
    v28 = *((_QWORD *)v27 + 3);
    if (v29 >= v28 >> 1)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v27);
    *((_QWORD *)v27 + 2) = v29 + 1;
    v80 = v27;
    *(_DWORD *)&v27[4 * v29 + 32] = v25;
    v22 = 1;
    if (v21 >= v14)
    {
LABEL_51:
      v44 = v80;
      goto LABEL_52;
    }
  }
  swift_bridgeObjectRetain();
  v41 = v79;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
  v43 = v41[2];
  v42 = v41[3];
  if (v43 >= v42 >> 1)
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v41);
  v41[2] = v43 + 1;
  v41[v43 + 4] = v80;
  swift_bridgeObjectRelease();
  v79 = v41;
  if (v21 < v14)
    goto LABEL_44;
LABEL_79:
  v44 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_52:
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  v46 = *((_QWORD *)v44 + 2);
  v80 = v44;
  if (v46)
  {
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
      v79 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v48 = v79[2];
    v47 = v79[3];
    if (v48 >= v47 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v79);
      v79 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v50 = v79;
    v49 = v80;
    v79[2] = v48 + 1;
    v50[v48 + 4] = v49;
  }
  else
  {
    v50 = v79;
  }
  MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
  *(&v74 - 2) = (uint64_t)v13;
  swift_bridgeObjectRetain();
  v51 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in static CRBiDiTransform._rearrangeNumericRuns(inLogicalToken:layoutDirection:), (uint64_t)(&v74 - 4), (uint64_t)v50);
  v53 = v52;
  v54 = swift_bridgeObjectRelease();
  if ((v53 & 1) != 0)
    v55 = 0;
  else
    v55 = v51;
  MEMORY[0x1E0C80A78](v54);
  *(&v74 - 2) = (uint64_t)v13;
  swift_bridgeObjectRetain();
  v56 = specialized BidirectionalCollection.lastIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in static CRBiDiTransform._rearrangeNumericRuns(inLogicalToken:layoutDirection:), (uint64_t)(&v74 - 4), (uint64_t)v50);
  v58 = v57;
  swift_bridgeObjectRelease();
  v79 = v50;
  if ((v58 & 1) != 0)
    v56 = v50[2] - 1;
  if (v55 == v56)
  {
    swift_bridgeObjectRelease();
    v59 = *(void (**)(char *, uint64_t))(v76 + 8);
    v60 = v77;
    v59(v75, v77);
    v59(v11, v60);
    v59(v13, v60);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  v86 = MEMORY[0x1E0DEE9D8];
  if (v55 < 0)
  {
    __break(1u);
    goto LABEL_81;
  }
  v61 = v79;
  if (v79[2] < (unint64_t)v55)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v58 = (uint64_t)(v79 + 4);
  v62 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v62, (uint64_t)(v61 + 4), 0, (2 * v55) | 1);
  swift_bridgeObjectRelease();
  if (v56 < v55)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (__OFADD__(v56++, 1))
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v79[2] < v56)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v56 < 0)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    v66 = v79;
    swift_bridgeObjectRelease();
    specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v66, v58, v55, (2 * v56) | 1);
    v67 = v73;
    goto LABEL_77;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v64 = swift_dynamicCastClass();
  if (!v64)
  {
    swift_bridgeObjectRelease();
    v64 = MEMORY[0x1E0DEE9D8];
  }
  v65 = *(_QWORD *)(v64 + 16);
  swift_release();
  if (v65 != v56 - v55)
    goto LABEL_86;
  v66 = v79;
  v67 = swift_dynamicCastClass();
  if (!v67)
  {
    swift_bridgeObjectRelease();
    v67 = MEMORY[0x1E0DEE9D8];
  }
LABEL_77:
  swift_bridgeObjectRelease();
  result = specialized Array.append<A>(contentsOf:)(v67);
  v68 = v66[2];
  if (v68 < v56)
  {
    __break(1u);
  }
  else
  {
    v69 = (2 * v68) | 1;
    v70 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v70, v58, v56, v69);
    swift_bridgeObjectRelease();
    v85 = v86;
    v87 = 0;
    v88 = 0xE000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlattenSequence<[[Unicode.Scalar]]>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type FlattenSequence<[[Unicode.Scalar]]> and conformance FlattenSequence<A>, &demangling cache variable for type metadata for FlattenSequence<[[Unicode.Scalar]]>, MEMORY[0x1E0DEC7B0]);
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v87;
    v71 = *(void (**)(char *, uint64_t))(v76 + 8);
    v72 = v77;
    v71(v75, v77);
    v71(v11, v72);
    v71(v13, v72);
    swift_bridgeObjectRelease();
    return a1;
  }
  return result;
}

uint64_t specialized static CRBiDiTransform.rearrangeNumericRuns(inLogicalString:layoutDirection:)()
{
  uint64_t v0;
  int64_t v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  lazy protocol witness table accessor for type String and conformance String();
  v0 = StringProtocol.components<A>(separatedBy:)();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = (unint64_t *)(v0 + 40);
    do
    {
      v3 = *(v2 - 1);
      v4 = *v2;
      swift_bridgeObjectRetain();
      v5 = specialized static CRBiDiTransform._rearrangeNumericRuns(inLogicalToken:layoutDirection:)(v3, v4);
      v7 = v6;
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v13 + 16);
      v8 = *(_QWORD *)(v13 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      v2 += 2;
      *(_QWORD *)(v13 + 16) = v9 + 1;
      v10 = v13 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v11 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1D826ECA8](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D826EC90]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D826EC9C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in static CRBiDiTransform._rearrangeNumericRuns(inLogicalToken:layoutDirection:)(uint64_t a1)
{
  return partial apply for closure #1 in static CRBiDiTransform._rearrangeNumericRuns(inLogicalToken:layoutDirection:)(a1) & 1;
}

uint64_t partial apply for closure #1 in static CRBiDiTransform._rearrangeNumericRuns(inLogicalToken:layoutDirection:)(uint64_t result)
{
  if (*(_QWORD *)(*(_QWORD *)result + 16))
    return CharacterSet.contains(_:)() & 1;
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D826ECA8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

Swift::String __swiftcall NSString._crStringByReversingExtendedGraphemeClusters()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  while ((unint64_t)String.Iterator.next()().value._object)
  {
    String.insert(_:at:)();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v0 = 0;
  v1 = (void *)0xE000000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

id @objc NSString._crStringByReversingExtendedGraphemeClusters()(void *a1)
{
  id v1;
  Swift::String v2;
  void *v3;

  v1 = a1;
  v2 = NSString._crStringByReversingExtendedGraphemeClusters()();

  v3 = (void *)MEMORY[0x1D826D73C](v2._countAndFlagsBits, v2._object);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1D4FBC8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBC9D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FBCC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D4FBCE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FBCEC4()
{
  JUMPOUT(0x1D4FBCEB4);
}

void sub_1D4FBCECC()
{
  JUMPOUT(0x1D4FBCEB8);
}

void sub_1D4FBD0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1D4FBD240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4FBD4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D4FBD6C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FBD8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  _Block_object_dispose(&a23, 8);
  std::vector<+[CRFormParser horizontalClustersFromFields:]::ClusteredLine>::~vector[abi:ne180100](a10);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void **__Block_byref_object_dispose__14(uint64_t a1)
{
  return std::vector<+[CRFormParser horizontalClustersFromFields:]::ClusteredLine>::~vector[abi:ne180100]((void **)(a1 + 48));
}

void sub_1D4FBDE60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBDFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D4FBE3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D4FBE510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBE5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4FBEB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  void *v17;
  void *v18;
  void *v19;

  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a14);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a17);

  _Unwind_Resume(a1);
}

void sub_1D4FBEC40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FBED08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id CRCastAsClass<CROutputRegion>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_1D4FBED88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBF098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D4FBF210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D4FBF410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1D4FBF4DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBF548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBF5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBF6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4FBF95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id CRCastAsClass<CRFormFieldOutputRegion>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_1D4FBFA2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FBFE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1D4FC0270(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, id);
  _Block_object_dispose(va, 8);

  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__119(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__120(uint64_t a1)
{

}

void sub_1D4FC03D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4FC053C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FC0638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FC085C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FC0914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<unsigned long>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E98D78C8, MEMORY[0x1E0DE42D0]);
}

void sub_1D4FC09F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::vector<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CTCLayer::CTCLayer(CTCLayer *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v2 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *v2 = &off_1E98D8C98;
  v2[16] = 0;
  v2[17] = 0;
  *((_QWORD *)this + 25) = v2;
  v3 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *v3 = &off_1E98D8C98;
  v3[16] = 0;
  v3[17] = 0;
  *((_QWORD *)this + 26) = v3;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 24) = 103;
}

void sub_1D4FC0E74()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 200) = 0;
  Matrix<float>::~Matrix(v1);
}

void sub_1D4FC0E88(uint64_t a1, ...)
{
  _QWORD *v1;
  _Unwind_Exception *v2;
  _QWORD **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a1);
  v4 = (void *)v1[22];
  if (v4)
  {
    v1[23] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[19];
  if (v5)
  {
    v1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[16];
  if (v6)
  {
    v1[17] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[13];
  if (v7)
  {
    v1[14] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[10];
  if (v8)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*v3);
  _Unwind_Resume(v2);
}

void CTCLayer::CTCLayer(CTCLayer *this, __int16 a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v4 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *v4 = &off_1E98D8C98;
  v4[16] = 0;
  v4[17] = 0;
  *((_QWORD *)this + 25) = v4;
  v5 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *v5 = &off_1E98D8C98;
  v5[16] = 0;
  v5[17] = 0;
  *((_QWORD *)this + 26) = v5;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 24) = a2;
}

void sub_1D4FC0FB0()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 200) = 0;
  Matrix<float>::~Matrix(v1);
}

void sub_1D4FC0FC0(uint64_t a1, ...)
{
  _QWORD *v1;
  _Unwind_Exception *v2;
  _QWORD **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a1);
  v4 = (void *)v1[22];
  if (v4)
  {
    v1[23] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[19];
  if (v5)
  {
    v1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[16];
  if (v6)
  {
    v1[17] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[13];
  if (v7)
  {
    v1[14] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[10];
  if (v8)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*v3);
  _Unwind_Resume(v2);
}

void CTCLayer::~CTCLayer(CTCLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;

  v2 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {
    *((_QWORD *)this + 23) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 19);
  if (v5)
  {
    *((_QWORD *)this + 20) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 16);
  if (v6)
  {
    *((_QWORD *)this + 17) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 13);
  if (v7)
  {
    *((_QWORD *)this + 14) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 10);
  if (v8)
  {
    *((_QWORD *)this + 11) = v8;
    operator delete(v8);
  }
  v9 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((_QWORD **)this + 4));
}

void CTCLayer::bestPathDecoding(CTCLayer *this@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  _QWORD *v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      v7 = *(_DWORD *)(v2 + 4);
      if ((unint64_t)v5 >= *v6)
      {
        v9 = *a2;
        v10 = (v5 - *a2) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = *v6 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v13);
          v9 = *a2;
          v5 = a2[1];
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[4 * v10];
        *(_DWORD *)v15 = v7;
        v8 = v15 + 4;
        while (v5 != v9)
        {
          v16 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[4 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_DWORD *)v5 = v7;
        v8 = v5 + 4;
      }
      a2[1] = v8;
      v2 += 8;
      v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1D4FC1210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::setCummulativeScores(CTCLayer *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  float v42;
  unint64_t v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  float v86;
  float *v87;
  float *v88;
  float *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  float *v95;
  char *v96;
  uint64_t v97;
  int v98;

  v3 = (void **)((char *)this + 176);
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 17) = *((_QWORD *)this + 16);
  *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
  *((_QWORD *)this + 23) = v2;
  v4 = *(unsigned int *)(*((_QWORD *)this + 10) + 4);
  v5 = *((unsigned __int16 *)this + 24);
  v98 = v5;
  v6 = *((unsigned int *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 3, v5, (unsigned int *)&v98)+ 8);
  v8 = (uint64_t)*(v3 - 12);
  v7 = (uint64_t)*(v3 - 11);
  if (v7 == v8)
  {
    v11 = 0;
    v10 = 0;
    v12 = 0.0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0.0;
    v13 = v4;
    do
    {
      v4 = *(unsigned int *)(v8 + 8 * v9 + 4);
      if (v4 == v13)
      {
        v12 = v12 + *(float *)(v8 + 8 * v9);
      }
      else
      {
        if (v13 == v6)
        {
          v10 = v9;
        }
        else
        {
          v14 = LODWORD(v12) | (unint64_t)(v13 << 32);
          v16 = (unint64_t *)*((_QWORD *)this + 17);
          v15 = *((_QWORD *)this + 18);
          if ((unint64_t)v16 >= v15)
          {
            v18 = *((_QWORD *)this + 16);
            v19 = ((uint64_t)v16 - v18) >> 3;
            if ((unint64_t)(v19 + 1) >> 61)
              goto LABEL_111;
            v20 = v15 - v18;
            v21 = v20 >> 2;
            if (v20 >> 2 <= (unint64_t)(v19 + 1))
              v21 = v19 + 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v21;
            if (v22)
              v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v22);
            else
              v23 = 0;
            v24 = (unint64_t *)(v22 + 8 * v19);
            *v24 = v14;
            v17 = v24 + 1;
            v26 = (char *)*((_QWORD *)this + 16);
            v25 = (char *)*((_QWORD *)this + 17);
            if (v25 != v26)
            {
              do
              {
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 8;
                *--v24 = v27;
              }
              while (v25 != v26);
              v25 = (char *)*((_QWORD *)this + 16);
            }
            *((_QWORD *)this + 16) = v24;
            *((_QWORD *)this + 17) = v17;
            *((_QWORD *)this + 18) = v22 + 8 * v23;
            if (v25)
              operator delete(v25);
          }
          else
          {
            *v16 = v14;
            v17 = v16 + 1;
          }
          *((_QWORD *)this + 17) = v17;
          v28 = LODWORD(v12) | (unint64_t)(v11 << 32);
          v30 = (unint64_t *)*((_QWORD *)this + 20);
          v29 = *((_QWORD *)this + 21);
          if ((unint64_t)v30 >= v29)
          {
            v32 = *((_QWORD *)this + 19);
            v33 = ((uint64_t)v30 - v32) >> 3;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_111;
            v34 = v29 - v32;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v36);
            else
              v37 = 0;
            v38 = (unint64_t *)(v36 + 8 * v33);
            *v38 = v28;
            v31 = v38 + 1;
            v40 = (char *)*((_QWORD *)this + 19);
            v39 = (char *)*((_QWORD *)this + 20);
            if (v39 != v40)
            {
              do
              {
                v41 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *--v38 = v41;
              }
              while (v39 != v40);
              v39 = (char *)*((_QWORD *)this + 19);
            }
            *((_QWORD *)this + 19) = v38;
            *((_QWORD *)this + 20) = v31;
            *((_QWORD *)this + 21) = v36 + 8 * v37;
            if (v39)
              operator delete(v39);
          }
          else
          {
            *v30 = v28;
            v31 = v30 + 1;
          }
          *((_QWORD *)this + 20) = v31;
          v42 = (float)((int)v9 - v10) * 0.5 + (float)v10;
          v44 = (float *)*((_QWORD *)this + 23);
          v43 = *((_QWORD *)this + 24);
          if ((unint64_t)v44 >= v43)
          {
            v46 = (float *)*v3;
            v47 = ((char *)v44 - (_BYTE *)*v3) >> 3;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
              goto LABEL_112;
            v49 = v43 - (_QWORD)v46;
            if (v49 >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 192, v50);
              v46 = (float *)*((_QWORD *)this + 22);
              v44 = (float *)*((_QWORD *)this + 23);
            }
            else
            {
              v51 = 0;
            }
            v52 = (float *)&v51[8 * v47];
            *v52 = v12;
            v52[1] = v42;
            v53 = v52;
            if (v44 != v46)
            {
              do
              {
                v54 = *((_QWORD *)v44 - 1);
                v44 -= 2;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 2;
              }
              while (v44 != v46);
              v46 = (float *)*v3;
            }
            v45 = v52 + 2;
            *((_QWORD *)this + 22) = v53;
            *((_QWORD *)this + 23) = v52 + 2;
            *((_QWORD *)this + 24) = &v51[8 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v44 = v12;
            v44[1] = v42;
            v45 = v44 + 2;
          }
          *((_QWORD *)this + 23) = v45;
          v11 = (v11 + 1);
          v10 = v9;
          v8 = *((_QWORD *)this + 10);
          v7 = *((_QWORD *)this + 11);
        }
        v12 = *(float *)(v8 + 8 * v9);
      }
      ++v9;
      v13 = v4;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  if (v4 != v6)
  {
    v55 = LODWORD(v12) | (unint64_t)(v4 << 32);
    v57 = (unint64_t *)*((_QWORD *)this + 17);
    v56 = *((_QWORD *)this + 18);
    if ((unint64_t)v57 >= v56)
    {
      v59 = *((_QWORD *)this + 16);
      v60 = ((uint64_t)v57 - v59) >> 3;
      if ((unint64_t)(v60 + 1) >> 61)
        goto LABEL_111;
      v61 = v56 - v59;
      v62 = v61 >> 2;
      if (v61 >> 2 <= (unint64_t)(v60 + 1))
        v62 = v60 + 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v62;
      if (v63)
        v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v63);
      else
        v64 = 0;
      v65 = (unint64_t *)(v63 + 8 * v60);
      v66 = v63 + 8 * v64;
      *v65 = v55;
      v58 = v65 + 1;
      v68 = (char *)*((_QWORD *)this + 16);
      v67 = (char *)*((_QWORD *)this + 17);
      if (v67 != v68)
      {
        do
        {
          v69 = *((_QWORD *)v67 - 1);
          v67 -= 8;
          *--v65 = v69;
        }
        while (v67 != v68);
        v67 = (char *)*((_QWORD *)this + 16);
      }
      *((_QWORD *)this + 16) = v65;
      *((_QWORD *)this + 17) = v58;
      *((_QWORD *)this + 18) = v66;
      if (v67)
        operator delete(v67);
    }
    else
    {
      *v57 = v55;
      v58 = v57 + 1;
    }
    *((_QWORD *)this + 17) = v58;
    v70 = LODWORD(v12) | (unint64_t)(v11 << 32);
    v72 = (unint64_t *)*((_QWORD *)this + 20);
    v71 = *((_QWORD *)this + 21);
    if ((unint64_t)v72 < v71)
    {
      *v72 = v70;
      v73 = v72 + 1;
LABEL_93:
      v85 = *((_QWORD *)this + 24);
      *((_QWORD *)this + 20) = v73;
      v86 = (float)(unint64_t)(((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3) - v10) * 0.5
          + (float)v10;
      v87 = (float *)*((_QWORD *)this + 23);
      if ((unint64_t)v87 >= v85)
      {
        v89 = (float *)*v3;
        v90 = ((char *)v87 - (_BYTE *)*v3) >> 3;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61)
LABEL_112:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v92 = v85 - (_QWORD)v89;
        if (v92 >> 2 > v91)
          v91 = v92 >> 2;
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v91;
        if (v93)
        {
          v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 192, v93);
          v89 = (float *)*((_QWORD *)this + 22);
          v87 = (float *)*((_QWORD *)this + 23);
        }
        else
        {
          v94 = 0;
        }
        v95 = (float *)&v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v12;
        v95[1] = v86;
        v88 = v95 + 2;
        if (v87 != v89)
        {
          do
          {
            v97 = *((_QWORD *)v87 - 1);
            v87 -= 2;
            *((_QWORD *)v95 - 1) = v97;
            v95 -= 2;
          }
          while (v87 != v89);
          v89 = (float *)*v3;
        }
        *((_QWORD *)this + 22) = v95;
        *((_QWORD *)this + 23) = v88;
        *((_QWORD *)this + 24) = v96;
        if (v89)
          operator delete(v89);
      }
      else
      {
        *v87 = v12;
        v87[1] = v86;
        v88 = v87 + 2;
      }
      *((_QWORD *)this + 23) = v88;
      return;
    }
    v74 = *((_QWORD *)this + 19);
    v75 = ((uint64_t)v72 - v74) >> 3;
    if (!((unint64_t)(v75 + 1) >> 61))
    {
      v76 = v71 - v74;
      v77 = v76 >> 2;
      if (v76 >> 2 <= (unint64_t)(v75 + 1))
        v77 = v75 + 1;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v78 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v78 = v77;
      if (v78)
        v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v78);
      else
        v79 = 0;
      v80 = (unint64_t *)(v78 + 8 * v75);
      v81 = v78 + 8 * v79;
      *v80 = v70;
      v73 = v80 + 1;
      v83 = (char *)*((_QWORD *)this + 19);
      v82 = (char *)*((_QWORD *)this + 20);
      if (v82 != v83)
      {
        do
        {
          v84 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *--v80 = v84;
        }
        while (v82 != v83);
        v82 = (char *)*((_QWORD *)this + 19);
      }
      *((_QWORD *)this + 19) = v80;
      *((_QWORD *)this + 20) = v73;
      *((_QWORD *)this + 21) = v81;
      if (v82)
        operator delete(v82);
      goto LABEL_93;
    }
LABEL_111:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
}

void CTCLayer::pathDecodingFixedLength(CTCLayer *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  unint64_t v25;
  int *v26;
  _QWORD *v27;
  char *v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  char *__p;
  char *v40;
  unint64_t v41;

  v6 = *((_QWORD *)this + 20);
  v7 = *((_QWORD *)this + 19);
  v8 = 126 - 2 * __clz((uint64_t)(v6 - v7) >> 3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v6 == v7)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(v6, v6, v7, v7, v9, 1);
  __p = 0;
  v40 = 0;
  v41 = 0;
  v10 = *((_QWORD *)this + 19);
  v11 = (*((_QWORD *)this + 20) - v10) >> 3;
  v12 = 0;
  if (v11 >= a2)
    v11 = a2;
  if (v11)
  {
    v13 = 0;
    do
    {
      v14 = (_DWORD *)(v10 + 8 * v13 + 4);
      if ((unint64_t)v12 >= v41)
      {
        v15 = __p;
        v16 = (v12 - __p) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v41 - (_QWORD)__p;
        if ((uint64_t)(v41 - (_QWORD)__p) >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v19);
          v21 = v20;
          v15 = __p;
          v12 = v40;
        }
        else
        {
          v21 = 0;
        }
        v22 = (char *)(v19 + 4 * v16);
        *(_DWORD *)v22 = *v14;
        v23 = v22 + 4;
        while (v12 != v15)
        {
          v24 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        __p = v22;
        v41 = v19 + 4 * v21;
        if (v15)
          operator delete(v15);
        v12 = v23;
      }
      else
      {
        *(_DWORD *)v12 = *v14;
        v12 += 4;
      }
      v40 = v12;
      ++v13;
      v10 = *((_QWORD *)this + 19);
      v25 = (*((_QWORD *)this + 20) - v10) >> 3;
      if (v25 >= a2)
        v25 = a2;
    }
    while (v25 > v13);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v26 = (int *)__p;
  if (__p != v40)
  {
    v27 = a3 + 2;
    v28 = a3[1];
    do
    {
      v29 = *(_DWORD *)(*((_QWORD *)this + 16) + 8 * *v26 + 4);
      if ((unint64_t)v28 >= *v27)
      {
        v31 = *a3;
        v32 = (v28 - *a3) >> 2;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v34 = *v27 - (_QWORD)v31;
        if (v34 >> 1 > v33)
          v33 = v34 >> 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v35);
          v31 = *a3;
          v28 = a3[1];
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[4 * v32];
        *(_DWORD *)v37 = v29;
        v30 = v37 + 4;
        while (v28 != v31)
        {
          v38 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        *a3 = v37;
        a3[1] = v30;
        a3[2] = &v36[4 * v35];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_DWORD *)v28 = v29;
        v30 = v28 + 4;
      }
      a3[1] = v30;
      ++v26;
      v28 = v30;
    }
    while (v26 != (int *)v40);
    v26 = (int *)__p;
  }
  if (v26)
    operator delete(v26);
}

void sub_1D4FC1A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  if (__p)
    operator delete(__p);
  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::pathDecodingFixedLengthInjectSpaces(CTCLayer *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int v24;
  unint64_t v25;
  int *v26;
  _DWORD *v27;
  unint64_t v28;
  char **v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  _DWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int *__p;
  int *v66;
  unint64_t v67;

  v6 = *((_QWORD *)this + 20);
  v7 = *((_QWORD *)this + 19);
  v8 = 126 - 2 * __clz((uint64_t)(v6 - v7) >> 3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v6 == v7)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(v6, v6, v7, v7, v9, 1);
  __p = 0;
  v66 = 0;
  v67 = 0;
  v10 = *((_QWORD *)this + 19);
  v11 = (*((_QWORD *)this + 20) - v10) >> 3;
  v12 = 0;
  if (v11 >= a2)
    v11 = a2;
  if (v11)
  {
    v13 = 0;
    do
    {
      v14 = (int *)(v10 + 8 * v13 + 4);
      if ((unint64_t)v12 >= v67)
      {
        v15 = __p;
        v16 = v12 - __p;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v67 - (_QWORD)__p;
        if ((uint64_t)(v67 - (_QWORD)__p) >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67, v19);
          v21 = v20;
          v15 = __p;
          v12 = v66;
        }
        else
        {
          v21 = 0;
        }
        v22 = (int *)(v19 + 4 * v16);
        *v22 = *v14;
        v23 = v22 + 1;
        while (v12 != v15)
        {
          v24 = *--v12;
          *--v22 = v24;
        }
        __p = v22;
        v67 = v19 + 4 * v21;
        if (v15)
          operator delete(v15);
        v12 = v23;
      }
      else
      {
        *v12++ = *v14;
      }
      v66 = v12;
      ++v13;
      v10 = *((_QWORD *)this + 19);
      v25 = (*((_QWORD *)this + 20) - v10) >> 3;
      if (v25 >= a2)
        v25 = a2;
    }
    while (v25 > v13);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v26 = v66;
  if (v66 != __p)
  {
    v27 = (_DWORD *)(*((_QWORD *)this + 16) + 8 * *__p + 4);
    v29 = (char **)(a3 + 2);
    v28 = a3[2];
    v30 = (char *)a3[1];
    if ((unint64_t)v30 >= v28)
    {
      v32 = (char *)*a3;
      v33 = (uint64_t)&v30[-*a3] >> 2;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v35 = v28 - (_QWORD)v32;
      if (v35 >> 1 > v34)
        v34 = v35 >> 1;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v36 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v36);
        v32 = (char *)*a3;
        v30 = (char *)a3[1];
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[4 * v33];
      v39 = &v37[4 * v36];
      *(_DWORD *)v38 = *v27;
      v31 = v38 + 4;
      while (v30 != v32)
      {
        v40 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v38 - 1) = v40;
        v38 -= 4;
      }
      *a3 = v38;
      a3[1] = v31;
      a3[2] = v39;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_DWORD *)v30 = *v27;
      v31 = v30 + 4;
    }
    a3[1] = v31;
    v26 = __p;
    if ((unint64_t)((char *)v66 - (char *)__p) >= 5)
    {
      v41 = 1;
      do
      {
        v42 = v26[v41];
        v43 = *((_QWORD *)this + 22);
        v44 = *(float *)(v43 + 8 * v26[v41 - 1] + 4);
        v45 = *v29;
        if ((float)((float)(*(float *)(v43 + 8 * v42 + 4) - v44) + (float)(*(float *)(v43 + 8 * v42 + 4) - v44)) > 30.0)
        {
          if (v31 >= v45)
          {
            v47 = (char *)*a3;
            v48 = (uint64_t)&v31[-*a3] >> 2;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62)
              goto LABEL_86;
            v50 = v45 - v47;
            if (v50 >> 1 > v49)
              v49 = v50 >> 1;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v51);
              v47 = (char *)*a3;
              v31 = (char *)a3[1];
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[4 * v48];
            *(_DWORD *)v53 = *((_DWORD *)this + 1);
            v46 = v53 + 4;
            while (v31 != v47)
            {
              v54 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v53 - 1) = v54;
              v53 -= 4;
            }
            v45 = &v52[4 * v51];
            *a3 = v53;
            a3[1] = v46;
            a3[2] = v45;
            if (v47)
            {
              operator delete(v47);
              v45 = *v29;
            }
          }
          else
          {
            *(_DWORD *)v31 = *((_DWORD *)this + 1);
            v46 = v31 + 4;
          }
          a3[1] = v46;
          v42 = __p[v41];
          v31 = v46;
        }
        v55 = (_DWORD *)(*((_QWORD *)this + 16) + 8 * v42 + 4);
        if (v31 >= v45)
        {
          v57 = (char *)*a3;
          v58 = (uint64_t)&v31[-*a3] >> 2;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62)
LABEL_86:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v60 = v45 - v57;
          if (v60 >> 1 > v59)
            v59 = v60 >> 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v61);
            v57 = (char *)*a3;
            v31 = (char *)a3[1];
          }
          else
          {
            v62 = 0;
          }
          v63 = &v62[4 * v58];
          *(_DWORD *)v63 = *v55;
          v56 = v63 + 4;
          while (v31 != v57)
          {
            v64 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v63 - 1) = v64;
            v63 -= 4;
          }
          *a3 = v63;
          a3[1] = v56;
          a3[2] = &v62[4 * v61];
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(_DWORD *)v31 = *v55;
          v56 = v31 + 4;
        }
        a3[1] = v56;
        ++v41;
        v26 = __p;
        v31 = v56;
      }
      while (v41 < v66 - __p);
    }
  }
  if (v26)
    operator delete(v26);
}

void sub_1D4FC1F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  if (__p)
    operator delete(__p);
  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::pathDecodingGeometrical(CTCLayer *this@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  char *v37;
  int v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  char *v49;
  char *__p;
  char *v51;
  char *v52;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  v51 = 0;
  v52 = 0;
  v5 = *((_QWORD *)this + 22);
  v6 = *((_QWORD *)this + 23);
  if (v6 != v5 && v6 - v5 != 8)
  {
    v4 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v5 + 8 * v8++;
      v12 = (float)(*(float *)(v5 + 8 * v8 + 4) - *(float *)(v11 + 4))
          + (float)(*(float *)(v5 + 8 * v8 + 4) - *(float *)(v11 + 4));
      if (v12 > 12.0 && v12 < 24.0)
      {
        v10 = v8;
      }
      else if ((int)v10 <= (int)v9)
      {
        v9 = v8;
      }
      else
      {
        v14 = v9 | (v10 << 32);
        if (v4 >= v52)
        {
          v15 = (v4 - __p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = (v52 - __p) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)(v52 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v52, v17);
          else
            v18 = 0;
          v19 = &v18[8 * v15];
          *(_QWORD *)v19 = v14;
          v4 = v19 + 8;
          v20 = v51;
          if (v51 != __p)
          {
            do
            {
              v21 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v19 - 1) = v21;
              v19 -= 8;
            }
            while (v20 != __p);
            v20 = __p;
          }
          __p = v19;
          v52 = &v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v4 = v14;
          v4 += 8;
        }
        v51 = v4;
        v9 = v8;
        v5 = *((_QWORD *)this + 22);
        v6 = *((_QWORD *)this + 23);
      }
    }
    while (((v6 - v5) >> 3) - 1 > v8);
    if ((int)v10 > (int)v9)
    {
      v22 = v9 | (v10 << 32);
      if (v4 >= v52)
      {
        v23 = (v4 - __p) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = (v52 - __p) >> 2;
        if (v24 <= v23 + 1)
          v24 = v23 + 1;
        if ((unint64_t)(v52 - __p) >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v52, v25);
        else
          v26 = 0;
        v27 = &v26[8 * v23];
        v28 = &v26[8 * v25];
        *(_QWORD *)v27 = v22;
        v4 = v27 + 8;
        v29 = v51;
        if (v51 != __p)
        {
          do
          {
            v30 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *((_QWORD *)v27 - 1) = v30;
            v27 -= 8;
          }
          while (v29 != __p);
          v29 = __p;
        }
        __p = v27;
        v52 = v28;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v4 = v22;
        v4 += 8;
      }
    }
  }
  v31 = __p;
  if (__p != v4)
  {
    v32 = 0;
    v33 = a2 + 2;
    v49 = v4;
    do
    {
      v34 = *((_DWORD *)v31 + 1);
      v35 = *(int *)v31;
      v36 = v34 - v35;
      if (v34 - (int)v35 > v32)
      {
        v37 = *a2;
        a2[1] = *a2;
        if (v34 >= (int)v35)
        {
          v38 = v34 + 1;
          do
          {
            v39 = (_DWORD *)(*((_QWORD *)this + 16) + 8 * v35 + 4);
            if ((unint64_t)v37 >= *v33)
            {
              v41 = *a2;
              v42 = (v37 - *a2) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v44 = *v33 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v45);
                v41 = *a2;
                v37 = a2[1];
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = *v39;
              v40 = v47 + 4;
              while (v37 != v41)
              {
                v48 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *a2 = v47;
              a2[1] = v40;
              a2[2] = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v37 = *v39;
              v40 = v37 + 4;
            }
            a2[1] = v40;
            ++v35;
            v37 = v40;
          }
          while (v38 != (_DWORD)v35);
          v32 = v36;
          v4 = v49;
        }
        else
        {
          v32 = v34 - v35;
        }
      }
      v31 += 8;
    }
    while (v31 != v4);
    v4 = __p;
  }
  if (v4)
    operator delete(v4);
}

void sub_1D4FC230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::pathDecodingCTCSegment(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v8;
  uint64_t *v9;
  int v10;
  std::vector<int>::pointer begin;
  int v12;
  unint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<int>::pointer v18;
  uint64_t v19;
  uint64_t v20;
  float **v21;
  float *v22;
  float *v23;
  float *v24;
  BOOL v25;
  float *v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  int v32;
  std::vector<int>::pointer v33;
  uint64_t v34;
  _QWORD *v35;
  int *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char v40;
  std::vector<int>::value_type *v41;
  std::vector<int>::value_type *v42;
  unint64_t v43;
  std::vector<int>::pointer v44;
  void **v45;
  unint64_t v46;
  int *v47;
  unint64_t v48;
  std::vector<int>::value_type *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  float *v54;
  float *v55;
  float *v56;
  float v58;
  float *v59;
  float v60;
  float v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  char *v80;
  int v81;
  char *v82;
  std::vector<int>::pointer v83;
  int *v84;
  int v85;
  _DWORD *v86;
  int v87;
  char *v88;
  std::vector<int>::pointer v89;
  unint64_t v90;
  int *v91;
  int *v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int v106;
  int *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int *v114;
  int v115;
  char *v116;
  char *v117;
  unint64_t v118;
  BOOL v119;
  BOOL v120;
  double v121;
  double v122;
  unint64_t v123;
  int *v124;
  int *v125;
  int *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  int v133;
  double v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  float v140;
  int v141;
  int v143;
  unint64_t v145;
  int *v146;
  int *v147;
  int *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  int *v154;
  int v155;
  float v156;
  unint64_t v157;
  float *v158;
  float *v159;
  float *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  float *v166;
  float *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int **v172;
  void **v173;
  std::vector<int>::value_type v174[2];
  void *v175;
  uint64_t v176;
  int *v177;
  int *v178;
  uint64_t v179;
  std::vector<int> v180;
  void *v181;
  char *v182;
  char *v183;
  void *v184;
  char *v185;
  char *v186;
  void *__p;
  void *v188;
  uint64_t v189;
  std::vector<int>::value_type *v190;
  std::vector<int>::value_type *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  std::vector<int>::value_type __x[2];
  uint64_t v197;
  uint64_t v198;
  std::vector<int> v199;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LODWORD(v199.__begin_) = *(unsigned __int16 *)(a1 + 48);
  v8 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 24), (int)v199.__begin_, (unsigned int *)&v199)+ 8);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
  v9 = *(uint64_t **)(a1 + 56);
  v10 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v9) >> 3);
  if (v10 == 1)
  {
    returnIndiciesOfSortedFloatVector(&v199, v9);
    begin = v199.__begin_;
    v12 = *v199.__begin_;
    if (*v199.__begin_ == v8)
    {
      v13 = (unint64_t)a4[2];
      v14 = a4[1];
      if ((unint64_t)v14 < v13)
      {
        *v14 = v199.__begin_[1];
        v15 = v14 + 1;
LABEL_99:
        v92 = v15;
LABEL_128:
        a4[1] = v92;
        goto LABEL_241;
      }
      v93 = *a4;
      v94 = v14 - *a4;
      v95 = v94 + 1;
      if (!((unint64_t)(v94 + 1) >> 62))
      {
        v96 = v13 - (_QWORD)v93;
        if (v96 >> 1 > v95)
          v95 = v96 >> 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
          v97 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v97);
          v93 = *a4;
          v14 = a4[1];
        }
        else
        {
          v98 = 0;
        }
        v104 = &v98[4 * v94];
        v105 = &v98[4 * v97];
        *(_DWORD *)v104 = begin[1];
        v92 = (int *)(v104 + 4);
        while (v14 != v93)
        {
          v106 = *--v14;
          *((_DWORD *)v104 - 1) = v106;
          v104 -= 4;
        }
        *a4 = (int *)v104;
LABEL_126:
        a4[1] = v92;
        a4[2] = (int *)v105;
        if (v93)
          operator delete(v93);
        goto LABEL_128;
      }
    }
    else
    {
      v90 = (unint64_t)a4[2];
      v91 = a4[1];
      if ((unint64_t)v91 < v90)
      {
        *v91 = v12;
        v15 = v91 + 1;
        goto LABEL_99;
      }
      v93 = *a4;
      v99 = v91 - *a4;
      v100 = v99 + 1;
      if (!((unint64_t)(v99 + 1) >> 62))
      {
        v101 = v90 - (_QWORD)v93;
        if (v101 >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v102);
          v93 = *a4;
          v91 = a4[1];
          v12 = *begin;
        }
        else
        {
          v103 = 0;
        }
        v107 = (int *)&v103[4 * v99];
        v105 = &v103[4 * v102];
        *v107 = v12;
        v92 = v107 + 1;
        while (v91 != v93)
        {
          v108 = *--v91;
          *--v107 = v108;
        }
        *a4 = v107;
        goto LABEL_126;
      }
    }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v17 = *v9;
  v16 = v9[1];
  __x[0] = 1;
  std::vector<int>::vector(&v199, v10, __x);
  v18 = v199.__begin_;
  if (v10 >= 1)
  {
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 56);
    do
    {
      v21 = (float **)(v20 + 24 * v19);
      v22 = *v21;
      v23 = v21[1];
      v24 = v22 + 1;
      v25 = v22 == v23 || v24 == v23;
      v26 = v22;
      if (!v25)
      {
        v27 = *v22;
        v26 = v22;
        v28 = v22 + 1;
        do
        {
          v29 = *v28++;
          v30 = v29;
          if (v27 < v29)
          {
            v27 = v30;
            v26 = v24;
          }
          v24 = v28;
        }
        while (v28 != v23);
      }
      v31 = *v26;
      if (v8 == ((unint64_t)((char *)v26 - (char *)v22) >> 2))
        v18[v19] = 0;
      if (v31 == 0.0)
        v18[v19] = 0;
      ++v19;
    }
    while (v19 != v10);
  }
  *(_QWORD *)__x = 0;
  v197 = 0;
  v198 = 0;
  v194 = 0;
  v195 = 0;
  v193 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v193, v18, (uint64_t)v199.__end_, v199.__end_ - v18);
  v32 = indexGrouping(&v193, (uint64_t *)__x, 0);
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v32)
  {
    v170 = v17;
    v172 = a4;
    v173 = (void **)(a1 + 176);
    v33 = v199.__begin_;
    if (v197 != *(_QWORD *)__x)
    {
      if ((unint64_t)((v197 - *(_QWORD *)__x) / 24) <= 1)
        v34 = 1;
      else
        v34 = (v197 - *(_QWORD *)__x) / 24;
      v35 = (_QWORD *)(*(_QWORD *)__x + 8);
      do
      {
        v36 = (int *)*(v35 - 1);
        v37 = *v35 - (_QWORD)v36;
        if ((unint64_t)v37 <= 0xB)
        {
          v38 = &v33[*v36];
          if ((unint64_t)v37 < 5)
          {
            *v38 = 1;
          }
          else
          {
            v39 = 4 * v36[(v37 >> 2) - 1] + 4 - 4 * *v36;
            if (v39 >= 1)
              memset_pattern16(v38, &unk_1D513A1E0, 4 * (((unint64_t)v39 >> 2) - ((unint64_t)v39 > 3)) + 4);
          }
        }
        v35 += 3;
        --v34;
      }
      while (v34);
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v188 = 0;
    v189 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v33, (uint64_t)v199.__end_, v199.__end_ - v33);
    v40 = indexGrouping((char **)&__p, (uint64_t *)&v190, 1);
    if (__p)
    {
      v188 = __p;
      operator delete(__p);
    }
    if ((v40 & 1) != 0)
    {
      v41 = v190;
      v42 = v191;
      v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3);
      if (v43 >= 0x14)
      {
        v44 = v199.__begin_;
        v45 = (void **)(v190 + 2);
        v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3);
        do
        {
          v47 = (int *)*(v45 - 1);
          if ((unint64_t)((_BYTE *)*v45 - (_BYTE *)v47) <= 7)
          {
            v44[*v47] = 0;
            if ((int)v46 < 21)
              break;
            LODWORD(v46) = v46 - 1;
          }
          v45 += 3;
          --v43;
        }
        while (v43);
      }
      v184 = 0;
      v185 = 0;
      v186 = 0;
      v181 = 0;
      v182 = 0;
      v183 = 0;
      if (v42 != v41)
      {
        v48 = 0;
        v169 = (unint64_t)(v16 - v170) >> 2;
        do
        {
          v49 = &v41[6 * v48];
          v50 = *(_QWORD *)v49;
          v51 = *((_QWORD *)v49 + 1) - *(_QWORD *)v49;
          v52 = *(_DWORD *)(v50 + ((v51 >> 1) & 0xFFFFFFFFFFFFFFFCLL));
          v53 = *(_QWORD *)(a1 + 56) + 24 * v52;
          v54 = *(float **)v53;
          v55 = *(float **)(v53 + 8);
          v56 = v54 + 1;
          if (v54 != v55 && v56 != v55)
          {
            v58 = *v54;
            v59 = v54 + 1;
            do
            {
              v60 = *v59++;
              v61 = v60;
              if (v58 < v60)
              {
                v58 = v61;
                v54 = v56;
              }
              v56 = v59;
            }
            while (v59 != v55);
          }
          if ((unint64_t)v51 > 7 || *v54 >= 0.5)
          {
            v64 = v185;
            if (v185 >= v186)
            {
              v66 = (char *)v184;
              v67 = (v185 - (_BYTE *)v184) >> 2;
              v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 62)
                goto LABEL_244;
              v69 = v186 - (_BYTE *)v184;
              if ((v186 - (_BYTE *)v184) >> 1 > v68)
                v68 = v69 >> 1;
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
                v70 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v70 = v68;
              if (v70)
              {
                v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v186, v70);
                v66 = (char *)v184;
                v64 = v185;
              }
              else
              {
                v71 = 0;
              }
              v78 = &v71[4 * v67];
              *(_DWORD *)v78 = v52;
              v65 = v78 + 4;
              while (v64 != v66)
              {
                v79 = *((_DWORD *)v64 - 1);
                v64 -= 4;
                *((_DWORD *)v78 - 1) = v79;
                v78 -= 4;
              }
              v184 = v78;
              v185 = v65;
              v186 = &v71[4 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_DWORD *)v185 = v52;
              v65 = v64 + 4;
            }
            v185 = v65;
          }
          else
          {
            v62 = v182;
            if (v182 >= v183)
            {
              v72 = (char *)v181;
              v73 = (v182 - (_BYTE *)v181) >> 2;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62)
LABEL_244:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v75 = v183 - (_BYTE *)v181;
              if ((v183 - (_BYTE *)v181) >> 1 > v74)
                v74 = v75 >> 1;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                v76 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v183, v76);
                v72 = (char *)v181;
                v62 = v182;
              }
              else
              {
                v77 = 0;
              }
              v80 = &v77[4 * v73];
              *(_DWORD *)v80 = v48;
              v63 = v80 + 4;
              while (v62 != v72)
              {
                v81 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              v181 = v80;
              v182 = v63;
              v183 = &v77[4 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_DWORD *)v182 = v48;
              v63 = v62 + 4;
            }
            v182 = v63;
          }
          ++v48;
          v41 = v190;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v191 - (char *)v190) >> 3) > v48);
        if (v184 != v185)
        {
          v174[0] = 0;
          std::vector<int>::vector(&v180, (v185 - (_BYTE *)v184) >> 2, v174);
          v82 = v185;
          v83 = v180.__begin_;
          if (v184 != v185)
          {
            v84 = (int *)((char *)v184 + 4);
            v85 = *(_DWORD *)v184;
            *v180.__begin_ = *(_DWORD *)v184;
            if (v84 != (int *)v82)
            {
              v86 = v83 + 1;
              do
              {
                v87 = *v84++;
                *v86++ = v87 - v85;
                v85 = v87;
              }
              while (v84 != (int *)v82);
            }
          }
          v88 = (char *)((char *)v180.__end_ - (char *)(v83 + 1));
          if (v180.__end_ == v83 + 1)
          {
            v89 = v83;
          }
          else
          {
            memmove(v83, v83 + 1, (char *)v180.__end_ - (char *)(v83 + 1));
            v89 = v180.__begin_;
          }
          v180.__end_ = (std::vector<int>::pointer)&v88[(_QWORD)v83];
          v178 = 0;
          v179 = 0;
          v177 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v177, v89, (uint64_t)&v88[(_QWORD)v83], (&v88[(_QWORD)v83] - (char *)v89) >> 2);
          if (v178 == v177)
          {
            v111 = 0;
          }
          else
          {
            v109 = 0;
            v110 = 0;
            v111 = 0;
            v112 = v178 - v177;
            if (v112 <= 1)
              v112 = 1;
            do
            {
              v113 = 0;
              v114 = v177;
              do
              {
                v115 = *v114++;
                if (v115 == v177[v109])
                  ++v113;
              }
              while (v114 != v178);
              if (v113 > v110)
              {
                v111 = v177[v109];
                v110 = v113;
              }
              ++v109;
            }
            while (v109 != v112);
          }
          if (v177)
          {
            v178 = v177;
            operator delete(v177);
          }
          v116 = (char *)v184;
          v117 = v185;
          if (v185 != v184)
          {
            v118 = 0;
            v119 = 0;
            v120 = 0;
            v171 = (uint64_t)(v172 + 2);
            v121 = (double)v111 * 1.7;
            v122 = (double)v111 * 1.3;
            while (1)
            {
              if (v120)
              {
                if ((unint64_t)((char *)v172[1] - (char *)*v172) > 0x10)
                  goto LABEL_233;
                v172[1] = *v172;
              }
              if (v119)
              {
                v124 = v172[1];
                v123 = (unint64_t)v172[2];
                if ((unint64_t)v124 >= v123)
                {
                  v126 = *v172;
                  v127 = v124 - *v172;
                  v128 = v127 + 1;
                  if ((unint64_t)(v127 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v129 = v123 - (_QWORD)v126;
                  if (v129 >> 1 > v128)
                    v128 = v129 >> 1;
                  if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
                    v130 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v130 = v128;
                  if (v130)
                  {
                    v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v171, v130);
                    v126 = *v172;
                    v124 = v172[1];
                  }
                  else
                  {
                    v131 = 0;
                  }
                  v132 = &v131[4 * v127];
                  *(_DWORD *)v132 = v169;
                  v125 = (int *)(v132 + 4);
                  while (v124 != v126)
                  {
                    v133 = *--v124;
                    *((_DWORD *)v132 - 1) = v133;
                    v132 -= 4;
                  }
                  *v172 = (int *)v132;
                  v172[1] = v125;
                  v172[2] = (int *)&v131[4 * v130];
                  if (v126)
                    operator delete(v126);
                }
                else
                {
                  *v124 = v169;
                  v125 = v124 + 1;
                }
                v172[1] = v125;
                v116 = (char *)v184;
                v117 = v185;
              }
              if (((v117 - v116) >> 2) - 1 == v118)
              {
                v120 = 0;
                v119 = 0;
              }
              else
              {
                v134 = (double)v180.__begin_[v118];
                v120 = v121 < v134;
                v119 = v121 >= v134 && v122 < v134;
              }
              v135 = *(_QWORD *)(a1 + 56) + 24 * *(int *)&v116[4 * v118];
              v175 = 0;
              v176 = 0;
              *(_QWORD *)v174 = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v174, *(const void **)v135, *(_QWORD *)(v135 + 8), (uint64_t)(*(_QWORD *)(v135 + 8) - *(_QWORD *)v135) >> 2);
              v136 = *(void **)v174;
              if (v175 != *(void **)v174)
                break;
              v139 = -1;
LABEL_196:
              if (v139 != v8)
              {
                v146 = v172[1];
                v145 = (unint64_t)v172[2];
                if ((unint64_t)v146 >= v145)
                {
                  v148 = *v172;
                  v149 = v146 - *v172;
                  v150 = v149 + 1;
                  if ((unint64_t)(v149 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v151 = v145 - (_QWORD)v148;
                  if (v151 >> 1 > v150)
                    v150 = v151 >> 1;
                  if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
                    v152 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v152 = v150;
                  if (v152)
                  {
                    v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v171, v152);
                    v148 = *v172;
                    v146 = v172[1];
                  }
                  else
                  {
                    v153 = 0;
                  }
                  v154 = (int *)&v153[4 * v149];
                  *v154 = v139;
                  v147 = v154 + 1;
                  while (v146 != v148)
                  {
                    v155 = *--v146;
                    *--v154 = v155;
                  }
                  *v172 = v154;
                  v172[1] = v147;
                  v172[2] = (int *)&v153[4 * v152];
                  if (v148)
                    operator delete(v148);
                }
                else
                {
                  *v146 = v139;
                  v147 = v146 + 1;
                }
                v172[1] = v147;
                v156 = (float)(*((_DWORD *)v184 + v118) / 2);
                v158 = *(float **)(a1 + 184);
                v157 = *(_QWORD *)(a1 + 192);
                if ((unint64_t)v158 >= v157)
                {
                  v160 = (float *)*v173;
                  v161 = ((char *)v158 - (_BYTE *)*v173) >> 3;
                  v162 = v161 + 1;
                  if ((unint64_t)(v161 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v163 = v157 - (_QWORD)v160;
                  if (v163 >> 2 > v162)
                    v162 = v163 >> 2;
                  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
                    v164 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v164 = v162;
                  if (v164)
                  {
                    v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 192, v164);
                    v160 = *(float **)(a1 + 176);
                    v158 = *(float **)(a1 + 184);
                  }
                  else
                  {
                    v165 = 0;
                  }
                  v166 = (float *)&v165[8 * v161];
                  *v166 = 1.0;
                  v166[1] = v156;
                  v167 = v166;
                  if (v158 != v160)
                  {
                    do
                    {
                      v168 = *((_QWORD *)v158 - 1);
                      v158 -= 2;
                      *((_QWORD *)v167 - 1) = v168;
                      v167 -= 2;
                    }
                    while (v158 != v160);
                    v160 = (float *)*v173;
                  }
                  v159 = v166 + 2;
                  *(_QWORD *)(a1 + 176) = v167;
                  *(_QWORD *)(a1 + 184) = v166 + 2;
                  *(_QWORD *)(a1 + 192) = &v165[8 * v164];
                  if (v160)
                    operator delete(v160);
                }
                else
                {
                  *v158 = 1.0;
                  v158[1] = v156;
                  v159 = v158 + 2;
                }
                *(_QWORD *)(a1 + 184) = v159;
                v136 = *(void **)v174;
              }
              if (v136)
              {
                v175 = v136;
                operator delete(v136);
              }
              ++v118;
              v116 = (char *)v184;
              v117 = v185;
              if (v118 >= (v185 - (_BYTE *)v184) >> 2)
                goto LABEL_233;
            }
            v137 = 0;
            v138 = ((uint64_t)v175 - *(_QWORD *)v174) >> 2;
            if (v138 <= 1)
              v138 = 1;
            v139 = -1;
            v140 = -INFINITY;
            while (1)
            {
              if (a2 == 3)
              {
                v143 = *(_DWORD *)(a3 + 4 * v137);
                if (v143 != 103 && (v143 - 91) <= 0xFFFFFFE5)
                {
LABEL_191:
                  if (*(float *)(*(_QWORD *)v174 + 4 * v137) > v140)
                  {
                    v140 = *(float *)(*(_QWORD *)v174 + 4 * v137);
                    v139 = v137;
                  }
                }
              }
              else if (a2 == 2)
              {
                v141 = *(_DWORD *)(a3 + 4 * v137);
                if (v141 != 103 && (v141 - 58) <= 0xFFFFFFF5)
                  goto LABEL_191;
              }
              else if (a2 == 1 && (*(_DWORD *)(a3 + 4 * v137) - 48) <= 9)
              {
                goto LABEL_191;
              }
              if (v138 == ++v137)
                goto LABEL_196;
            }
          }
LABEL_233:
          if (v180.__begin_)
          {
            v180.__end_ = v180.__begin_;
            operator delete(v180.__begin_);
          }
        }
        if (v181)
        {
          v182 = (char *)v181;
          operator delete(v181);
        }
        if (v184)
        {
          v185 = (char *)v184;
          operator delete(v184);
        }
      }
    }
    v184 = &v190;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  }
  v190 = __x;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
LABEL_241:
  if (v199.__begin_)
  {
    v199.__end_ = v199.__begin_;
    operator delete(v199.__begin_);
  }
}

void sub_1D4FC2F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t *a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
  {
    a27 = a26;
    operator delete(a26);
  }
  a26 = &a32;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a32 = v32 - 168;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(_QWORD *)(v32 - 136) = v34;
    operator delete(v34);
  }
  v35 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

int *returnIndiciesOfSortedFloatVector(std::vector<int> *a1, uint64_t *a2)
{
  int *begin;
  int *end;
  std::vector<int> *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v12;

  v5 = std::vector<int>::vector(a1, (a2[1] - *a2) >> 2);
  begin = v5->__begin_;
  end = v5->__end_;
  v6 = end - v5->__begin_;
  if (end != v5->__begin_)
  {
    v7 = 0;
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = end - begin;
    do
    {
      begin[v7] = v7;
      ++v7;
    }
    while (v8 != v7);
  }
  v12 = a2;
  v9 = 126 - 2 * __clz(v6);
  if (end == begin)
    v10 = 0;
  else
    v10 = v9;
  return std::__introsort<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *,false>(begin, end, &v12, v10, 1);
}

uint64_t indexGrouping(char **a1, uint64_t *a2, int a3)
{
  char *v5;
  char *v6;
  char *v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char **v39;
  char *v40;
  void **v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  _QWORD v50[3];
  _QWORD v51[3];

  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v8 = v5 + 4;
    while (v8 != v6)
    {
      v9 = *((_DWORD *)v8 - 1);
      v10 = *(_DWORD *)v8;
      v8 += 4;
      if (v9 != v10)
      {
        v11 = v5 + 4;
        while (v11 != v6)
        {
          v12 = *((_DWORD *)v11 - 1);
          v13 = *(_DWORD *)v11;
          v11 += 4;
          if (v12 != v13)
          {
            if (v11 - 8 == v6)
              goto LABEL_15;
            v14 = *a1;
            while (*(_DWORD *)v14 != a3)
            {
              v14 += 4;
              if (v14 == v6)
              {
                v14 = a1[1];
                break;
              }
            }
            v15 = v14 - v5;
            v16 = (unint64_t)(v14 - v5) >> 2;
            v17 = operator new(4uLL);
            *v17 = v16;
            v51[1] = v17 + 1;
            v51[2] = v17 + 1;
            v19 = a2[1];
            v18 = a2[2];
            v51[0] = v17;
            if (v19 >= v18)
            {
              v20 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)v51);
            }
            else
            {
              std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)v51);
              v20 = v19 + 24;
            }
            a2[1] = v20;
            v25 = (v15 << 30) + 0x100000000;
            v26 = *a1;
            v27 = (a1[1] - *a1) >> 2;
            if (v27 >= v25 >> 32)
            {
              v28 = v25 >> 32;
              if (v27 != v28)
              {
                do
                {
                  v29 = 4 * (int)v16;
                  v16 = v28;
                  v30 = *(_DWORD *)&v26[4 * v28];
                  v31 = *(_DWORD *)&v26[v29];
                  if (v30 == a3 && v30 == v31)
                  {
                    if (a2[1] - *a2 == 6120)
                      goto LABEL_22;
                    v37 = (_QWORD *)(a2[1] - 8);
                    v39 = (char **)(v37 - 1);
                    v38 = (char *)*(v37 - 1);
                    if ((unint64_t)v38 >= *v37)
                    {
                      v41 = (void **)(v37 - 2);
                      v42 = (char *)*(v37 - 2);
                      v43 = (v38 - v42) >> 2;
                      v44 = v43 + 1;
                      if ((unint64_t)(v43 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v45 = *v37 - (_QWORD)v42;
                      if (v45 >> 1 > v44)
                        v44 = v45 >> 1;
                      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                        v46 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v46 = v44;
                      if (v46)
                      {
                        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v37, v46);
                        v38 = *v39;
                        v42 = (char *)*v41;
                      }
                      else
                      {
                        v47 = 0;
                      }
                      v48 = &v47[4 * v43];
                      *(_DWORD *)v48 = v16;
                      v40 = v48 + 4;
                      while (v38 != v42)
                      {
                        v49 = *((_DWORD *)v38 - 1);
                        v38 -= 4;
                        *((_DWORD *)v48 - 1) = v49;
                        v48 -= 4;
                      }
                      *v41 = v48;
                      *v39 = v40;
                      *v37 = &v47[4 * v46];
                      if (v42)
                        operator delete(v42);
                    }
                    else
                    {
                      *(_DWORD *)v38 = v16;
                      v40 = v38 + 4;
                    }
                    *v39 = v40;
                  }
                  else if (v30 == a3)
                  {
                    v33 = operator new(4uLL);
                    *v33 = v16;
                    v50[1] = v33 + 1;
                    v50[2] = v33 + 1;
                    v35 = a2[1];
                    v34 = a2[2];
                    v50[0] = v33;
                    if (v35 >= v34)
                    {
                      v36 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)v50);
                    }
                    else
                    {
                      std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)v50);
                      v36 = v35 + 24;
                    }
                    a2[1] = v36;
                    operator delete(v33);
                  }
                  v28 = v16 + 1;
                  v26 = *a1;
                }
                while (v16 + 1 != (a1[1] - *a1) >> 2);
              }
              v23 = 1;
            }
            else
            {
LABEL_22:
              v23 = 0;
            }
            operator delete(v17);
            return v23;
          }
        }
        break;
      }
    }
  }
LABEL_15:
  v21 = a2[1];
  if (v21 >= a2[2])
  {
    v22 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a2, (uint64_t)a1);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a2, (uint64_t)a1);
    v22 = v21 + 24;
  }
  a2[1] = v22;
  return 1;
}

void sub_1D4FC3410(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CTCLayer::removeNoise(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  char *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  float v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  void *__p;
  char *v27;
  char *v28;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *(_DWORD **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v3)
  {
    v8 = (char *)operator new(4uLL);
    *(_DWORD *)v8 = *v4;
    v9 = (uint64_t)(v8 + 4);
    v27 = v8 + 4;
    v28 = v8 + 4;
    __p = v8;
    if ((unint64_t)(v3 - (_QWORD)v4) < 5)
    {
      v10 = 0;
      v24 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = *(float *)(*(_QWORD *)(a1 + 176) + 8 * v11 + 4) - *(float *)(*(_QWORD *)(a1 + 176) + 8 * v11 - 4);
        if ((float)(v12 + v12) <= 50.0)
        {
          v13 = (char *)v9;
        }
        else
        {
          v13 = (char *)__p;
          v14 = (v9 - (uint64_t)__p) >> 2;
          if (v14 > (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)
          {
            *(_DWORD *)(a1 + 16) = v10;
            if (&__p != (void **)a3)
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, v13, v9, v14);
              v13 = (char *)__p;
              v4 = *(_DWORD **)a2;
            }
          }
          v27 = v13;
          v10 = v11;
        }
        if (v13 >= v28)
        {
          v15 = (char *)__p;
          v16 = (v13 - (_BYTE *)__p) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v18 = v28 - (_BYTE *)__p;
          if ((v28 - (_BYTE *)__p) >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v28, v19);
            v21 = v20;
            v15 = (char *)__p;
            v13 = v27;
          }
          else
          {
            v21 = 0;
          }
          v22 = (_DWORD *)(v19 + 4 * v16);
          *v22 = v4[v11];
          v9 = (uint64_t)(v22 + 1);
          while (v13 != v15)
          {
            v23 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v22 = v23;
          }
          __p = v22;
          v27 = (char *)v9;
          v28 = (char *)(v19 + 4 * v21);
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_DWORD *)v13 = v4[v11];
          v9 = (uint64_t)(v13 + 4);
        }
        v27 = (char *)v9;
        ++v11;
        v4 = *(_DWORD **)a2;
      }
      while (v11 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v8 = (char *)__p;
      v24 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
    }
    v25 = (v9 - (uint64_t)v8) >> 2;
    if (v25 > v24)
    {
      *(_DWORD *)(a1 + 16) = v10;
      if (&__p != (void **)a3)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, v8, v9, v25);
        v8 = (char *)__p;
      }
    }
    if (v8)
    {
      v27 = v8;
      operator delete(v8);
    }
  }
}

void sub_1D4FC3684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::injectSpaces(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v8;
  char *v9;
  char **v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_DWORD **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v3)
  {
    v8 = operator new(4uLL);
    *v8 = *v4;
    v9 = (char *)(v8 + 1);
    a3[1] = v8 + 1;
    a3[2] = v8 + 1;
    *a3 = v8;
    if ((unint64_t)(v3 - (_QWORD)v4) >= 5)
    {
      v10 = (char **)(a3 + 2);
      v11 = 1;
      do
      {
        v12 = *(_QWORD *)(a1 + 176) + 8 * (*(int *)(a1 + 16) + (uint64_t)(int)v11);
        v13 = (float)(*(float *)(v12 + 4) - *(float *)(v12 - 4)) + (float)(*(float *)(v12 + 4) - *(float *)(v12 - 4));
        v14 = *v10;
        if (v13 > 30.0)
        {
          if (v9 >= v14)
          {
            v16 = (char *)*a3;
            v17 = (uint64_t)&v9[-*a3] >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              goto LABEL_40;
            v19 = v14 - v16;
            if (v19 >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v20);
              v16 = (char *)*a3;
              v9 = (char *)a3[1];
            }
            else
            {
              v21 = 0;
            }
            v22 = &v21[4 * v17];
            *(_DWORD *)v22 = *(_DWORD *)(a1 + 4);
            v15 = v22 + 4;
            while (v9 != v16)
            {
              v23 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            v14 = &v21[4 * v20];
            *a3 = v22;
            a3[1] = v15;
            a3[2] = v14;
            if (v16)
            {
              operator delete(v16);
              v14 = *v10;
            }
          }
          else
          {
            *(_DWORD *)v9 = *(_DWORD *)(a1 + 4);
            v15 = v9 + 4;
          }
          a3[1] = v15;
          v4 = *(_DWORD **)a2;
          v9 = v15;
        }
        if (v9 >= v14)
        {
          v25 = (char *)*a3;
          v26 = (uint64_t)&v9[-*a3] >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
LABEL_40:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v28 = v14 - v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v29);
            v25 = (char *)*a3;
            v9 = (char *)a3[1];
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = v4[v11];
          v24 = v31 + 4;
          while (v9 != v25)
          {
            v32 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *a3 = v31;
          a3[1] = v24;
          a3[2] = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v9 = v4[v11];
          v24 = v9 + 4;
        }
        a3[1] = v24;
        ++v11;
        v4 = *(_DWORD **)a2;
        v9 = v24;
      }
      while (v11 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
  }
}

void sub_1D4FC38F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CTCLayer::getMaxActivations(CTCLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;

  __p = 0;
  v25 = 0;
  v26 = 0;
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  if (*((int *)this + 2) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)this + 7);
      v4 = (char **)(v3 + 24 * v2);
      if (&__p != (void **)v4)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&__p, *v4, *(_QWORD *)(v3 + 24 * v2 + 8), (uint64_t)(*(_QWORD *)(v3 + 24 * v2 + 8) - (_QWORD)*v4) >> 2);
      if (v25 == __p)
      {
        v6 = 0;
        v8 = 0.0;
      }
      else
      {
        v5 = 0;
        LODWORD(v6) = 0;
        v7 = (v25 - (_BYTE *)__p) >> 2;
        if (v7 <= 1)
          v7 = 1;
        v8 = 0.0;
        do
        {
          v9 = *((float *)__p + v5);
          if (v9 <= v8)
            v6 = v6;
          else
            v6 = v5;
          if (v9 > v8)
            v8 = *((float *)__p + v5);
          ++v5;
        }
        while (v7 != v5);
      }
      v10 = LODWORD(v8) | (unint64_t)(v6 << 32);
      v12 = (unint64_t *)*((_QWORD *)this + 11);
      v11 = *((_QWORD *)this + 12);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *((_QWORD *)this + 10);
        v15 = ((uint64_t)v12 - v14) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v11 - v14;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v18);
        else
          v19 = 0;
        v20 = (unint64_t *)(v18 + 8 * v15);
        *v20 = v10;
        v13 = v20 + 1;
        v22 = (char *)*((_QWORD *)this + 10);
        v21 = (char *)*((_QWORD *)this + 11);
        if (v21 != v22)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = (char *)*((_QWORD *)this + 10);
        }
        *((_QWORD *)this + 10) = v20;
        *((_QWORD *)this + 11) = v13;
        *((_QWORD *)this + 12) = v18 + 8 * v19;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      *((_QWORD *)this + 11) = v13;
      ++v2;
    }
    while (v2 < *((int *)this + 2));
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
}

void sub_1D4FC3ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CTCLayer::setActivations(uint64_t a1, uint64_t **a2)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  float **v20;
  unint64_t v21;
  _QWORD *v22;
  float *v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  float *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;

  v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v4 = (_QWORD *)**a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((*a2)[1] - (uint64_t)v4) >> 3);
  *(_DWORD *)(a1 + 4) = (v4[1] - *v4) >> 2;
  *(_DWORD *)(a1 + 8) = v5;
  v6 = (uint64_t *)(a1 + 56);
  if ((int)v3 <= 1)
  {
    std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 56), (int)v5);
    v32 = *(_DWORD *)(a1 + 8);
    if (v32 >= 1)
    {
      v33 = 0;
      for (i = 0; i < v32; ++i)
      {
        v35 = **a2;
        if (*v6 != v35)
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*v6 + v33), *(char **)(v35 + v33), *(_QWORD *)(v35 + v33 + 8), (uint64_t)(*(_QWORD *)(v35 + v33 + 8) - *(_QWORD *)(v35 + v33)) >> 2);
          v32 = *(_DWORD *)(a1 + 8);
        }
        v33 += 24;
      }
    }
  }
  else
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 56));
    std::vector<std::vector<float>>::resize(v6, *(int *)(a1 + 8));
    v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = (float)(int)v3;
      LODWORD(v10) = *(_DWORD *)(a1 + 4);
      v11 = v3;
      do
      {
        if ((int)v10 >= 1)
        {
          v12 = 0;
          do
          {
            v13 = *a2;
            v14 = 0.0;
            v15 = v11;
            do
            {
              v16 = *v13;
              v13 += 3;
              v14 = v14 + *(float *)(*(_QWORD *)(v16 + 24 * v8) + 4 * v12);
              --v15;
            }
            while (v15);
            v17 = *v6 + 24 * v8;
            v18 = v14 / v9;
            v20 = (float **)(v17 + 8);
            v19 = *(float **)(v17 + 8);
            v22 = (_QWORD *)(v17 + 16);
            v21 = *(_QWORD *)(v17 + 16);
            if ((unint64_t)v19 >= v21)
            {
              v24 = *(float **)v17;
              v25 = ((uint64_t)v19 - *(_QWORD *)v17) >> 2;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v27 = v21 - (_QWORD)v24;
              if (v27 >> 1 > v26)
                v26 = v27 >> 1;
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
                v28 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v28 = v26;
              if (v28)
              {
                v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v22, v28);
                v19 = *v20;
                v24 = *(float **)v17;
              }
              else
              {
                v29 = 0;
              }
              v30 = (float *)&v29[4 * v25];
              *v30 = v18;
              v23 = v30 + 1;
              while (v19 != v24)
              {
                v31 = *((_DWORD *)v19-- - 1);
                *((_DWORD *)v30-- - 1) = v31;
              }
              *(_QWORD *)v17 = v30;
              *v20 = v23;
              *v22 = &v29[4 * v28];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *v19 = v18;
              v23 = v19 + 1;
            }
            *v20 = v23;
            ++v12;
            v10 = *(int *)(a1 + 4);
          }
          while (v12 < v10);
          v7 = *(_DWORD *)(a1 + 8);
        }
        ++v8;
      }
      while (v8 < v7);
    }
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t *CTCLayer::setCodeMap(uint64_t *this, unsigned int *a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t **v6;
  int *v7;
  uint64_t v8;
  int v9;

  if (a3 >= 1)
  {
    v4 = a2;
    v5 = 0;
    v6 = (uint64_t **)(this + 3);
    v7 = (int *)a2;
    v8 = a3;
    do
    {
      v9 = *v7++;
      this = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v6, v9, v4);
      *((_DWORD *)this + 8) = v5++;
      v4 = (unsigned int *)v7;
    }
    while (v8 != v5);
  }
  return this;
}

float CTCLayer::computeScore(CTCLayer *this, uint64_t a2)
{
  char *v4;
  float v5;

  v4 = (char *)this + 104;
  if (v4 != (char *)a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 < 5uLL)
  {
    if (logZero(void)::onceToken != -1)
      dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
    v5 = *(double *)&logZero(void)::slogZero;
    *(float *)this = v5;
  }
  else
  {
    CTCLayer::computeForwardVariables(this);
    v5 = *(float *)this;
  }
  return -v5;
}

void CTCLayer::computeForwardVariables(CTCLayer *this)
{
  uint64_t v1;
  signed int v3;
  int v4;
  float v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  int v17;
  signed int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float *v25;
  uint64_t v26;
  signed int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  int v37;

  v1 = *((_QWORD *)this + 25);
  if (v1)
  {
    v31 = (*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 1;
    v3 = v31 | 1;
    *((_DWORD *)this + 3) = v31 | 1;
    v4 = *((_DWORD *)this + 2);
    if (logZero(void)::onceToken != -1)
      dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
    v5 = *(double *)&logZero(void)::slogZero;
    Matrix<float>::Initialize(v1, v4, v3, v5);
    v6 = *((unsigned __int16 *)this + 24);
    v37 = v6;
    v7 = *((int *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 3, v6, (unsigned int *)&v37)+ 8);
    **(float **)(*((_QWORD *)this + 25) + 128) = logSafe(*(float *)(**((_QWORD **)this + 7) + 4 * v7));
    *(float *)(*(_QWORD *)(*((_QWORD *)this + 25) + 128) + 4) = logSafe(*(float *)(**((_QWORD **)this + 7)
                                                                                     + 4 * **((int **)this + 13)));
    v8 = operator new[]();
    v9 = v8;
    if (*((int *)this + 2) >= 2)
    {
      v10 = 0;
      v11 = v3 + 2;
      v12 = 1;
      v13 = (float *)(v8 + 4 * v7);
      do
      {
        v14 = *((_QWORD *)this + 7) + 24 * v12;
        v35 = 0;
        v36 = 0;
        v34 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v34, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
        v15 = v35;
        if (v35 != v34)
        {
          v16 = 0;
          v15 = v34;
          do
          {
            *(float *)(v9 + 4 * v16) = logSafe(v15[v16]);
            ++v16;
            v15 = v34;
          }
          while (v16 < v35 - v34);
        }
        if (v15)
        {
          v35 = v15;
          operator delete(v15);
        }
        v17 = *((_DWORD *)this + 2);
        v33 = v12 + 1;
        if (2 * ((int)v12 + 1) >= v3)
          v18 = v3;
        else
          v18 = 2 * (v12 + 1);
        if (((v3 + 2 * (v12 - v17)) & ~((v3 + 2 * ((int)v12 - v17)) >> 31)) < v18)
        {
          v32 = v11;
          v19 = ((v11 - 2 * v17) & ~((v11 - 2 * v17) >> 31)) - 1;
          do
          {
            v20 = v19 + 1;
            if (((v19 + 1) & 1) != 0)
            {
              v26 = *(int *)(*((_QWORD *)this + 13) + 4 * (v20 >> 1));
              v24 = logAdd(*(float *)(*(_QWORD *)(*((_QWORD *)this + 25) + 128)+ 4 * (v19 + v10 * *(_DWORD *)(*((_QWORD *)this + 25) + 136) + 1)), *(float *)(*(_QWORD *)(*((_QWORD *)this + 25) + 128)+ 4 * (v19 + v10 * *(_DWORD *)(*((_QWORD *)this + 25) + 136))));
              if (v20 >= 2 && (_DWORD)v26 != *(_DWORD *)(*((_QWORD *)this + 13) + 4 * (int)((v20 >> 1) - 1)))
                v24 = logAdd(v24, *(float *)(*(_QWORD *)(*((_QWORD *)this + 25) + 128)+ 4 * (v19 + v10 * *(_DWORD *)(*((_QWORD *)this + 25) + 136) - 1)));
              v25 = (float *)(v9 + 4 * v26);
            }
            else
            {
              v21 = *((_QWORD *)this + 25);
              v22 = *(_QWORD *)(v21 + 128);
              v23 = v19 + v10 * *(_DWORD *)(v21 + 136);
              v24 = *(float *)(v22 + 4 * (v23 + 1));
              if (v19 != -1)
                v24 = logAdd(v24, *(float *)(v22 + 4 * v23));
              v25 = v13;
            }
            logMult(v24, *v25);
            v27 = v19 + 2;
            *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 25) + 128)
                      + 4 * (++v19 + v12 * *(_DWORD *)(*((_QWORD *)this + 25) + 136))) = v28;
          }
          while (v27 < v18);
          v17 = *((_DWORD *)this + 2);
          v3 = v31 | 1;
          v11 = v32;
        }
        ++v10;
        v11 += 2;
        ++v12;
      }
      while (v33 < v17);
    }
    MEMORY[0x1D826E270](v9, 0x1000C8052888210);
    v29 = *((_QWORD *)this + 25);
    v30 = *(_QWORD *)(v29 + 128);
    LODWORD(v29) = *(_DWORD *)(v29 + 136) * (*((_DWORD *)this + 2) - 1);
    *(float *)this = logAdd(*(float *)(v30 + 4 * (v29 + (v31 & 0xFFFFFFFE))), *(float *)(v30 + 4 * (v3 + v29 - 2)));
  }
}

void CTCLayer::stringSequence2codeSequence(uint64_t a1@<X0>, int **a2@<X1>, char **a3@<X8>)
{
  int *v3;
  int *v4;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = (uint64_t **)(a1 + 24);
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v21 = *v3;
      v8 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v6, v21, (unsigned int *)&v21);
      v9 = v8;
      v11 = a3[1];
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = (v11 - *a3) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v17);
          v13 = *a3;
          v11 = a3[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = *((_DWORD *)v9 + 8);
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        *a3 = v19;
        a3[1] = v12;
        a3[2] = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v11 = *((_DWORD *)v8 + 8);
        v12 = v11 + 4;
      }
      a3[1] = v12;
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1D4FC433C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Matrix<float>::Initialize(uint64_t a1, int a2, unsigned int a3, float a4)
{
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
    MEMORY[0x1D826E270](v8, 0x1000C8052888210);
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = a2;
  result = operator new[]();
  *(_QWORD *)(a1 + 128) = result;
  if (a2)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v10;
      v13 = a3;
      if (a3)
      {
        do
        {
          *(float *)(result + 4 * v12++) = a4;
          --v13;
        }
        while (v13);
      }
      ++v11;
      v10 += a3;
    }
    while (v11 != a2);
  }
  return result;
}

float logSafe(float a1)
{
  if (a1 > 2.22507386e-308)
    return logf(a1);
  if (logZero(void)::onceToken != -1)
    dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
  return *(double *)&logZero(void)::slogZero;
}

float logAdd(float a1, float a2)
{
  double v4;
  float v5;
  float v6;

  v4 = a1;
  if (logZero(void)::onceToken != -1)
    dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
  if (*(double *)&logZero(void)::slogZero != v4)
  {
    if (*(double *)&logZero(void)::slogZero == a2)
    {
      return a1;
    }
    else
    {
      if (a1 <= a2)
        v5 = a1 - a2;
      else
        v5 = a2 - a1;
      if (a1 > a2)
        a2 = a1;
      v6 = expf(v5) + 1.0;
      if (v5 >= 1024.0)
        v6 = INFINITY;
      return a2 + logSafe(v6);
    }
  }
  return a2;
}

void logMult(float a1, float a2)
{
  if (logZero(void)::onceToken != -1)
    dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
}

uint64_t CTCLayer::computeBackwardVariables(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  float v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  float v21;
  float v22;
  int v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v32;
  float *v33;
  uint64_t v34;
  int v35;

  v1 = *(_QWORD *)(this + 208);
  if (v1)
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 8);
    v4 = *(_DWORD *)(this + 12);
    if (logZero(void)::onceToken != -1)
      dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
    v5 = *(double *)&logZero(void)::slogZero;
    Matrix<float>::Initialize(v1, v3, v4, v5);
    v6 = *(unsigned __int16 *)(v2 + 48);
    v35 = v6;
    v7 = *((int *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v2 + 24), v6, (unsigned int *)&v35)+ 8);
    v8 = *(_QWORD *)(v2 + 208);
    v9 = *(_QWORD *)(v8 + 128);
    LODWORD(v8) = *(_DWORD *)(v2 + 12) + *(_DWORD *)(v8 + 136) * (*(_DWORD *)(v2 + 8) - 1);
    *(_DWORD *)(v9 + 4 * (v8 - 1)) = 0;
    *(_DWORD *)(v9 + 4 * (v8 - 2)) = 0;
    v10 = operator new[]();
    v11 = *(_DWORD *)(v2 + 8);
    v12 = (v11 - 2);
    if (v11 >= 2)
    {
      while (1)
      {
        v13 = v12 + 1;
        v14 = *(_QWORD *)(v2 + 56) + 24 * (v12 + 1);
        v33 = 0;
        v34 = 0;
        v32 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v32, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
        v15 = v33;
        if (v33 != v32)
        {
          v16 = 0;
          v15 = v32;
          do
          {
            *(float *)(v10 + 4 * v16) = logSafe(v15[v16]);
            ++v16;
            v15 = v32;
          }
          while (v16 < v33 - v32);
        }
        if (v15)
        {
          v33 = v15;
          operator delete(v15);
        }
        v17 = *(_DWORD *)(v2 + 12);
        v18 = v17 + 2 * (v12 - *(_DWORD *)(v2 + 8));
        v19 = v18 & ~(v18 >> 31);
        v20 = 2 * v13 >= v17 ? *(_DWORD *)(v2 + 12) : 2 * v13;
        if (v19 < v20)
          break;
LABEL_23:
        if (v12-- <= 0)
          return MEMORY[0x1D826E270](v10, 0x1000C8052888210);
      }
      while (1)
      {
        if ((v19 & 1) != 0)
        {
          v26 = *(int *)(*(_QWORD *)(v2 + 104) + 4 * (v19 >> 1));
          logMult(*(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 128)+ 4 * (v19 + *(_DWORD *)(*(_QWORD *)(v2 + 208) + 136) * v13)), *(float *)(v10 + 4 * v26));
          v28 = v27;
          v23 = v19 + 1;
          logMult(*(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 128)+ 4 * (v19 + 1 + *(_DWORD *)(*(_QWORD *)(v2 + 208) + 136) * v13)), *(float *)(v10 + 4 * v7));
          v22 = logAdd(v28, v29);
          if (v19 >= *(_DWORD *)(v2 + 12) - 2)
            goto LABEL_22;
          v25 = *(int *)(*(_QWORD *)(v2 + 104) + 4 * ((v19 >> 1) + 1));
          if ((_DWORD)v26 == (_DWORD)v25)
            goto LABEL_22;
          v24 = *(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 128)
                         + 4 * (v19 + *(_DWORD *)(*(_QWORD *)(v2 + 208) + 136) * v13 + 2));
        }
        else
        {
          logMult(*(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 128)+ 4 * (v19 + *(_DWORD *)(*(_QWORD *)(v2 + 208) + 136) * v13)), *(float *)(v10 + 4 * v7));
          v22 = v21;
          if (v19 >= *(_DWORD *)(v2 + 12) - 1)
          {
            v23 = v19 + 1;
            goto LABEL_22;
          }
          v23 = v19 + 1;
          v24 = *(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 128)
                         + 4 * (v19 + 1 + *(_DWORD *)(*(_QWORD *)(v2 + 208) + 136) * v13));
          v25 = *(int *)(*(_QWORD *)(v2 + 104) + 4 * (v19 >> 1));
        }
        logMult(v24, *(float *)(v10 + 4 * v25));
        v22 = logAdd(v22, v30);
LABEL_22:
        *(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 128)
                 + 4 * (v19 + *(_DWORD *)(*(_QWORD *)(v2 + 208) + 136) * v12)) = v22;
        v19 = v23;
        if (v23 >= v20)
          goto LABEL_23;
      }
    }
    return MEMORY[0x1D826E270](v10, 0x1000C8052888210);
  }
  return this;
}

void CTCLayer::backprop(CTCLayer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  _QWORD **v21;
  _QWORD *v22;
  _QWORD **v23;
  int v24;
  _QWORD *v25;
  float v26;
  float v27;
  uint64_t *v28;
  float v29;
  float v30;
  int v31;
  int v32;
  int v33;
  _QWORD *v34;
  _QWORD **v35;
  _QWORD *v36;
  _QWORD **v37;
  int v38;
  _QWORD *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  unsigned int v49;
  _QWORD *v50;
  int v51;
  float *v52;
  float *v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56[2];
  int v57;

  v5 = (char *)this + 104;
  if ((CTCLayer *)((char *)this + 104) != (CTCLayer *)a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 104, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v50 = v5;
  CTCLayer::computeForwardVariables(this);
  CTCLayer::computeBackwardVariables((uint64_t)this);
  *(_QWORD *)a3 = &off_1E98D8C98;
  *(_QWORD *)(a3 + 128) = 0;
  v6 = (_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 136) = 0;
  v8 = *((_DWORD *)this + 1);
  v7 = *((_DWORD *)this + 2);
  *(_DWORD *)(a3 + 136) = v8;
  *(_DWORD *)(a3 + 140) = v7;
  v9 = (void *)operator new[]();
  *v6 = v9;
  bzero(v9, 4 * v7 * (unint64_t)v8);
  if (*((_QWORD *)this + 25) && *((_QWORD *)this + 26))
  {
    v10 = operator new[]();
    v49 = v8;
    v11 = *((unsigned __int16 *)this + 24);
    LODWORD(v55) = v11;
    v12 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 3, v11, (unsigned int *)&v55);
    if (*((int *)this + 2) >= 1)
    {
      v13 = 0;
      v14 = *((_DWORD *)v12 + 8);
      do
      {
        v56[0] = 0;
        v56[1] = 0;
        v54 = 0;
        v55 = (uint64_t *)v56;
        v15 = *((_QWORD *)this + 7) + 24 * v13;
        v52 = 0;
        v53 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v52, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 2);
        v16 = v53;
        if (v53 != v52)
        {
          v17 = 0;
          v16 = v52;
          do
          {
            *(float *)(v10 + 4 * v17) = logSafe(v16[v17]);
            ++v17;
            v16 = v52;
          }
          while (v17 < v53 - v52);
        }
        if (v16)
        {
          v53 = v16;
          operator delete(v16);
        }
        if (*((int *)this + 3) >= 1)
        {
          v18 = 0;
          do
          {
            v19 = v14;
            if ((v18 & 1) != 0)
              v19 = *(_DWORD *)(*v50 + 4 * (v18 >> 1));
            v57 = v19;
            v20 = v56[0];
            if (!v56[0])
              goto LABEL_25;
            v21 = v56;
            do
            {
              v22 = v20;
              v23 = v21;
              v24 = *((_DWORD *)v20 + 7);
              v25 = v20 + 1;
              if (v24 >= v19)
              {
                v25 = v22;
                v21 = (_QWORD **)v22;
              }
              v20 = (_QWORD *)*v25;
            }
            while (v20);
            if (v21 == v56)
              goto LABEL_25;
            if (v24 < v19)
              v22 = v23;
            if (v19 >= *((_DWORD *)v22 + 7))
            {
              v29 = *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v55, v19, (unsigned int *)&v57)+ 8);
              logMult(*(float *)(*(_QWORD *)(*((_QWORD *)this + 25) + 128)+ 4 * (v18 + *(_DWORD *)(*((_QWORD *)this + 25) + 136) * (_DWORD)v13)), *(float *)(*(_QWORD *)(*((_QWORD *)this + 26) + 128)+ 4 * (v18 + *(_DWORD *)(*((_QWORD *)this + 26) + 136) * (_DWORD)v13)));
              v27 = logAdd(v29, v30);
              v28 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v55, v19, (unsigned int *)&v57);
            }
            else
            {
LABEL_25:
              logMult(*(float *)(*(_QWORD *)(*((_QWORD *)this + 25) + 128)+ 4 * (v18 + *(_DWORD *)(*((_QWORD *)this + 25) + 136) * (_DWORD)v13)), *(float *)(*(_QWORD *)(*((_QWORD *)this + 26) + 128)+ 4 * (v18 + *(_DWORD *)(*((_QWORD *)this + 26) + 136) * (_DWORD)v13)));
              v27 = v26;
              v28 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v55, v19, (unsigned int *)&v57);
            }
            *((float *)v28 + 8) = v27;
            ++v18;
          }
          while ((signed int)v18 < *((_DWORD *)this + 3));
        }
        v51 = 0;
        v31 = *((_DWORD *)this + 1);
        if (v31 >= 1)
        {
          v32 = 0;
          v33 = v49 * v13;
          do
          {
            v34 = v56[0];
            if (!v56[0])
              goto LABEL_40;
            v35 = v56;
            do
            {
              v36 = v34;
              v37 = v35;
              v38 = *((_DWORD *)v34 + 7);
              v39 = v34 + 1;
              if (v38 >= v32)
              {
                v39 = v36;
                v35 = (_QWORD **)v36;
              }
              v34 = (_QWORD *)*v39;
            }
            while (v34);
            if (v35 == v56)
              goto LABEL_40;
            if (v38 < v32)
              v36 = v37;
            if (v32 >= *((_DWORD *)v36 + 7))
            {
              v42 = *(float *)(v10 + 4 * v32);
              v43 = expf(v42);
              if (v42 >= 1024.0)
                v44 = INFINITY;
              else
                v44 = v43;
              v45 = *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v55, v32, (unsigned int *)&v51)+ 8);
              v46 = *(float *)this;
              if (logZero(void)::onceToken != -1)
                dispatch_once(&logZero(void)::onceToken, &__block_literal_global_0);
              if (*(double *)&logZero(void)::slogZero == v45)
              {
                v47 = *(double *)&logZero(void)::slogZero;
              }
              else if (*(double *)&logZero(void)::slogZero == v46)
              {
                v47 = INFINITY;
              }
              else
              {
                v47 = v45 - v46;
              }
              v48 = expf(v47);
              if (v47 >= 1024.0)
                v48 = INFINITY;
              *((float *)v9 + (v32 + v33)) = v44 - v48;
              v31 = *((_DWORD *)this + 1);
            }
            else
            {
LABEL_40:
              v40 = *(float *)(v10 + 4 * v32);
              v41 = expf(v40);
              if (v40 >= 1024.0)
                v41 = INFINITY;
              *((float *)v9 + (v32 + v33)) = v41;
            }
            v51 = ++v32;
          }
          while (v32 < v31);
        }
        std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v56[0]);
        ++v13;
      }
      while (v13 < *((int *)this + 2));
    }
    MEMORY[0x1D826E270](v10, 0x1000C8052888210);
  }
}

void sub_1D4FC4D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;

  *a10 = &off_1E98D8C98;
  MEMORY[0x1D826E270](v10, 0x1000C8052888210);
  a10[16] = 0;
  _Unwind_Resume(a1);
}

_QWORD *Matrix<float>::~Matrix(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E98D8C98;
  v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1D826E270](v2, 0x1000C8052888210);
    a1[16] = 0;
  }
  return a1;
}

void CTCLayer::pathDecodingCTCSegment(uint64_t **this@<X0>, int a2@<W1>, unsigned int a3@<W2>, char **a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  float *v11;
  float *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  int *begin;
  std::vector<int>::pointer end;
  unint64_t v22;
  std::vector<int>::pointer v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  std::vector<int>::pointer v34;
  std::vector<int>::pointer v35;
  char *v36;
  int v37;
  unint64_t v38;
  std::vector<int>::pointer v39;
  uint64_t v40;
  uint64_t *v41;
  float **v42;
  float *v43;
  float *v44;
  float *v45;
  BOOL v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  char v53;
  int v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  int v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  int *v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int *v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  std::vector<int>::pointer v89;
  int *v90;
  std::vector<int>::pointer v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  std::vector<int>::pointer v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  std::vector<int>::size_type v105;
  _DWORD *v106;
  int *v107;
  std::vector<int>::pointer v108;
  uint64_t *v109;
  int *v110;
  int v111;
  float **v112;
  float *v113;
  float *v114;
  float *v115;
  BOOL v116;
  float *v117;
  float v118;
  float *v119;
  float v120;
  float v121;
  float v122;
  int v123;
  std::vector<int>::pointer v124;
  unint64_t v125;
  _QWORD *v126;
  int *v127;
  int v128;
  int v129;
  std::vector<int> *v130;
  std::vector<int> *v131;
  std::vector<int> *v132;
  int *v133;
  std::vector<int>::pointer v134;
  char *v135;
  uint64_t v136;
  _DWORD *v137;
  _DWORD *v138;
  int v139;
  char *v140;
  std::vector<int> *v141;
  std::vector<int> *v142;
  std::vector<int> *v143;
  std::vector<int> *v144;
  std::vector<int> *v145;
  uint64_t v146;
  char *v147;
  _BOOL4 v149;
  unint64_t v150;
  unint64_t v151;
  int *v152;
  std::vector<int> *v153;
  std::vector<int> *v154;
  unint64_t v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  int64x2_t v161;
  int *v162;
  char *v163;
  char *v164;
  std::vector<int> *v165;
  std::vector<int> *v166;
  char *v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  int *v171;
  int *v172;
  int v173;
  uint64_t v174;
  float *v175;
  float *v176;
  float *v177;
  BOOL v178;
  float *v179;
  float v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  unint64_t v185;
  char *v186;
  char *v187;
  std::vector<int>::pointer v188;
  std::vector<int>::pointer *p_end;
  std::vector<int>::pointer *v190;
  std::vector<int> *v191;
  std::vector<int>::pointer v192;
  std::vector<int>::pointer v193;
  std::vector<int> *v194;
  int v195;
  int v196;
  float *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  char *v205;
  int v206;
  char *v207;
  char *v208;
  std::vector<int>::pointer v209;
  int v210;
  float v211;
  uint64_t *v212;
  std::vector<int> *v213;
  std::vector<int> *v214;
  std::vector<int>::pointer v215;
  float *v216;
  int *v217;
  std::vector<int>::pointer v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  char *v222;
  int64_t v223;
  _DWORD *v224;
  unint64_t v225;
  int v226;
  uint64_t *v227;
  char **v228;
  uint64_t v229;
  float *v230;
  char *v231;
  int64_t v232;
  float *v233;
  float *v234;
  float *v235;
  float v236;
  unint64_t v237;
  float v238;
  float *v239;
  float *v240;
  float v241;
  float *v242;
  float *v243;
  float v244;
  float v245;
  uint64_t v246;
  unint64_t v247;
  std::vector<int>::pointer v248;
  char *v249;
  std::vector<int>::pointer v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  int v257;
  int v258;
  float v259;
  uint64_t *v260;
  float *v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  uint64_t *v270;
  uint64_t v271;
  std::vector<int>::pointer v272;
  int *v273;
  std::vector<int>::pointer v274;
  int64_t v275;
  unint64_t v276;
  int64_t v277;
  unint64_t v278;
  char *v279;
  int *v280;
  int v281;
  int *v282;
  _DWORD *v283;
  int *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  int *v290;
  int v291;
  unint64_t v292;
  void **v293;
  char v294;
  int v295;
  uint64_t v296;
  char *v297;
  void *v298;
  _DWORD *v299;
  uint64_t v300;
  void *v301;
  void *v302;
  uint64_t v303;
  void *v304;
  char *v305;
  uint64_t v306;
  void *v307;
  void *v308;
  uint64_t v309;
  void *v310;
  char *v311;
  char *v312;
  std::vector<int> v313;
  void *v314;
  int *v315;
  uint64_t v316;
  int *v317;
  int *v318;
  uint64_t v319;
  void *v320;
  _DWORD *v321;
  unint64_t v322;
  void *v323;
  char *v324;
  char *v325;
  void *__p;
  void *v327;
  uint64_t v328;
  char *v329;
  std::vector<int> *v330;
  unint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335[3];
  std::vector<int> v336;
  int *v337;
  __int128 v338;
  char *v339;
  unint64_t *v340;
  std::vector<int> __x;
  char *v342;
  unint64_t *v343;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LODWORD(__x.__begin_) = *((unsigned __int16 *)this + 24);
  v8 = *((int *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(this + 3, (int)__x.__begin_, (unsigned int *)&__x)+ 8);
  this[23] = this[22];
  v9 = this[7];
  v10 = (char *)this[8] - (char *)v9;
  if (v10 == 24)
  {
    if (a3 <= 1 && (a2 & 1) != 0)
    {
      v12 = (float *)*v9;
      v11 = (float *)v9[1];
      v13 = *v9 + 4;
      v14 = (float *)*v9 == v11 || v13 == (_QWORD)v11;
      v15 = *v9;
      if (!v14)
      {
        v16 = *v12;
        v15 = *v9;
        v17 = (float *)(*v9 + 4);
        do
        {
          v18 = *v17++;
          v19 = v18;
          if (v16 < v18)
          {
            v16 = v19;
            v15 = v13;
          }
          v13 = (uint64_t)v17;
        }
        while (v17 != v11);
      }
      begin = (int *)operator new(4uLL);
      *begin = (unint64_t)(v15 - (_QWORD)v12) >> 2;
      end = begin + 1;
      if (!a2)
        goto LABEL_13;
    }
    else
    {
      returnIndiciesOfSortedFloatVector(&__x, v9);
      begin = __x.__begin_;
      end = __x.__end_;
      if (!a2)
      {
LABEL_13:
        v22 = (int)fmin((double)a3, (double)(unint64_t)(end - begin - 1));
        v23 = (std::vector<int>::pointer)*a4;
        v24 = (int *)a4[1];
        v25 = ((char *)v24 - *a4) >> 2;
        if (v25 < v22)
        {
          v26 = 0;
          v27 = a4 + 2;
          do
          {
            v28 = begin[v26];
            if (v28 != (_DWORD)v8)
            {
              if ((unint64_t)v24 >= *v27)
              {
                v29 = *v27 - (_QWORD)v23;
                v30 = v29 >> 1;
                if (v29 >> 1 <= v25 + 1)
                  v30 = v25 + 1;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v30;
                v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v31);
                v34 = (std::vector<int>::pointer)*a4;
                v35 = (std::vector<int>::pointer)a4[1];
                v36 = &v33[4 * v25];
                *(_DWORD *)v36 = v28;
                v24 = (int *)(v36 + 4);
                while (v35 != v34)
                {
                  v37 = *--v35;
                  *((_DWORD *)v36 - 1) = v37;
                  v36 -= 4;
                }
                *a4 = v36;
                a4[1] = (char *)v24;
                a4[2] = &v33[4 * v32];
                if (v34)
                  operator delete(v34);
              }
              else
              {
                *v24++ = v28;
              }
              a4[1] = (char *)v24;
              v23 = (std::vector<int>::pointer)*a4;
            }
            ++v26;
            v25 = v24 - v23;
          }
          while (v25 < v22);
        }
LABEL_122:
        if (!begin)
          return;
        v99 = begin;
LABEL_422:
        operator delete(v99);
        return;
      }
    }
    if (a3)
    {
      v87 = 0;
      v88 = a4 + 2;
      v89 = (std::vector<int>::pointer)a4[1];
      do
      {
        if ((unint64_t)v89 >= *v88)
        {
          v91 = (std::vector<int>::pointer)*a4;
          v92 = ((char *)v89 - *a4) >> 2;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v94 = *v88 - (_QWORD)v91;
          if (v94 >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v95);
            v91 = (std::vector<int>::pointer)*a4;
            v89 = (std::vector<int>::pointer)a4[1];
          }
          else
          {
            v96 = 0;
          }
          v97 = &v96[4 * v92];
          *(_DWORD *)v97 = begin[v87];
          v90 = (int *)(v97 + 4);
          while (v89 != v91)
          {
            v98 = *--v89;
            *((_DWORD *)v97 - 1) = v98;
            v97 -= 4;
          }
          *a4 = v97;
          a4[1] = (char *)v90;
          a4[2] = &v96[4 * v95];
          if (v91)
            operator delete(v91);
        }
        else
        {
          *v89 = begin[v87];
          v90 = v89 + 1;
        }
        a4[1] = (char *)v90;
        ++v87;
        v89 = v90;
      }
      while (v87 != a3);
    }
    goto LABEL_122;
  }
  v38 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  LODWORD(__x.__begin_) = 1;
  std::vector<int>::vector(&v336, (int)v38, (const std::vector<int>::value_type *)&__x);
  v39 = v336.__begin_;
  if ((int)v38 >= 1)
  {
    v40 = 0;
    v41 = this[7];
    do
    {
      v42 = (float **)&v41[3 * v40];
      v43 = *v42;
      v44 = v42[1];
      v45 = v43 + 1;
      v46 = v43 == v44 || v45 == v44;
      v47 = v43;
      if (!v46)
      {
        v48 = *v43;
        v47 = v43;
        v49 = v43 + 1;
        do
        {
          v50 = *v49++;
          v51 = v50;
          if (v48 < v50)
          {
            v48 = v51;
            v47 = v45;
          }
          v45 = v49;
        }
        while (v49 != v44);
      }
      v52 = *v47;
      if ((_DWORD)v8 == ((unint64_t)((char *)v47 - (char *)v43) >> 2) && v52 > 0.9)
        v39[v40] = 0;
      if (v52 == 0.0)
        v39[v40] = 0;
      ++v40;
    }
    while (v40 != v38);
  }
  memset(v335, 0, sizeof(v335));
  v333 = 0;
  v334 = 0;
  v332 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v332, v39, (uint64_t)v336.__end_, v336.__end_ - v39);
  v53 = indexGrouping(&v332, v335, 0);
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if ((v53 & 1) == 0)
  {
LABEL_420:
    __x.__begin_ = (std::vector<int>::pointer)v335;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    v99 = v336.__begin_;
    if (!v336.__begin_)
      return;
    v336.__end_ = v336.__begin_;
    goto LABEL_422;
  }
  v329 = 0;
  v330 = 0;
  v331 = 0;
  v327 = 0;
  v328 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v336.__begin_, (uint64_t)v336.__end_, v336.__end_ - v336.__begin_);
  v54 = indexGrouping((char **)&__p, (uint64_t *)&v329, 1);
  if (__p)
  {
    v327 = __p;
    operator delete(__p);
  }
  if (!v54 || (v55 = v329, v330 == (std::vector<int> *)v329))
  {
LABEL_419:
    __x.__begin_ = (std::vector<int>::pointer)&v329;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    goto LABEL_420;
  }
  v293 = (void **)(this + 22);
  v56 = 0;
  v323 = 0;
  v324 = 0;
  v325 = 0;
  v320 = 0;
  v321 = 0;
  v322 = 0;
  do
  {
    v57 = (*(_QWORD *)&v55[24 * v56 + 8] - *(_QWORD *)&v55[24 * v56]) >> 2;
    v58 = v321;
    if ((unint64_t)v321 >= v322)
    {
      v60 = v320;
      v61 = ((char *)v321 - (_BYTE *)v320) >> 2;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v63 = v322 - (_QWORD)v320;
      if ((uint64_t)(v322 - (_QWORD)v320) >> 1 > v62)
        v62 = v63 >> 1;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
        v64 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v322, v64);
        v60 = v320;
        v58 = v321;
      }
      else
      {
        v65 = 0;
      }
      v66 = &v65[4 * v61];
      *(_DWORD *)v66 = v57;
      v59 = v66 + 4;
      while (v58 != v60)
      {
        v67 = *--v58;
        *((_DWORD *)v66 - 1) = v67;
        v66 -= 4;
      }
      v320 = v66;
      v321 = v59;
      v322 = (unint64_t)&v65[4 * v64];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *v321 = v57;
      v59 = v58 + 1;
    }
    v321 = v59;
    v55 = v329;
    if (v56)
    {
      v68 = **(_DWORD **)&v329[24 * v56] - *(_DWORD *)(*(_QWORD *)&v329[24 * (v56 - 1) + 8] - 4);
      v69 = v324;
      if (v324 >= v325)
      {
        v71 = (char *)v323;
        v72 = (v324 - (_BYTE *)v323) >> 2;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v74 = v325 - (_BYTE *)v323;
        if ((v325 - (_BYTE *)v323) >> 1 > v73)
          v73 = v74 >> 1;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
          v75 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v325, v75);
          v71 = (char *)v323;
          v69 = v324;
        }
        else
        {
          v76 = 0;
        }
        v77 = (int *)&v76[4 * v72];
        *v77 = v68;
        v70 = (char *)(v77 + 1);
        while (v69 != v71)
        {
          v78 = *((_DWORD *)v69 - 1);
          v69 -= 4;
          *--v77 = v78;
        }
        v323 = v77;
        v324 = v70;
        v325 = &v76[4 * v75];
        if (v71)
          operator delete(v71);
      }
      else
      {
        *(_DWORD *)v324 = v68;
        v70 = v69 + 4;
      }
      v324 = v70;
      v55 = v329;
    }
    ++v56;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v55) >> 3) > v56);
  v79 = v321;
  if (v321 == v320)
  {
LABEL_415:
    if (v79)
    {
      v321 = v79;
      operator delete(v79);
    }
    if (v323)
    {
      v324 = (char *)v323;
      operator delete(v323);
    }
    goto LABEL_419;
  }
  v317 = 0;
  v318 = 0;
  v319 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v317, v320, (uint64_t)v321, ((char *)v321 - (_BYTE *)v320) >> 2);
  if (v318 == v317)
  {
    v82 = 0;
  }
  else
  {
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v83 = v318 - v317;
    if (v83 <= 1)
      v83 = 1;
    do
    {
      v84 = 0;
      v85 = v317;
      do
      {
        v86 = *v85++;
        if (v86 == v317[v80])
          ++v84;
      }
      while (v85 != v318);
      if (v84 > v81)
      {
        v82 = v317[v80];
        v81 = v84;
      }
      ++v80;
    }
    while (v80 != v83);
  }
  if (v317)
  {
    v318 = v317;
    operator delete(v317);
  }
  v100 = v329;
  if (v330 == (std::vector<int> *)v329)
  {
    memset(&__x, 0, sizeof(__x));
LABEL_412:
    if (__x.__begin_)
    {
      __x.__end_ = __x.__begin_;
      operator delete(__x.__begin_);
    }
    v79 = v320;
    goto LABEL_415;
  }
  v101 = 0;
  v294 = 0;
  LODWORD(v102) = 0;
  v103 = 0;
  v104 = 2 * v82;
  while (1)
  {
    v314 = 0;
    v315 = 0;
    v316 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v314, *(const void **)&v100[24 * v101], *(_QWORD *)&v100[24 * v101 + 8], (uint64_t)(*(_QWORD *)&v100[24 * v101 + 8] - *(_QWORD *)&v100[24 * v101]) >> 2);
    v105 = ((char *)v315 - (_BYTE *)v314) >> 2;
    if (v105 <= v104)
    {
      LODWORD(v102) = v102 + 1;
LABEL_224:
      v129 = 0;
      goto LABEL_225;
    }
    LODWORD(__x.__begin_) = 1;
    std::vector<int>::vector(&v313, v105, (const std::vector<int>::value_type *)&__x);
    v106 = v314;
    v107 = v315;
    v108 = v313.__begin_;
    if (v314 != v315)
    {
      v109 = this[7];
      v110 = (int *)v314;
      do
      {
        v111 = *v110;
        v112 = (float **)&v109[3 * *v110];
        v113 = *v112;
        v114 = v112[1];
        v115 = v113 + 1;
        v116 = v113 == v114 || v115 == v114;
        v117 = v113;
        if (!v116)
        {
          v118 = *v113;
          v117 = v113;
          v119 = v113 + 1;
          do
          {
            v120 = *v119++;
            v121 = v120;
            if (v118 < v120)
            {
              v118 = v121;
              v117 = v115;
            }
            v115 = v119;
          }
          while (v119 != v114);
        }
        v122 = *v117;
        if ((_DWORD)v8 == ((unint64_t)((char *)v117 - (char *)v113) >> 2) && v122 > 0.85)
          v108[v111 - *v106] = 0;
        if (v122 == 0.0)
          v108[v111 - *v106] = 0;
        ++v110;
      }
      while (v110 != v107);
    }
    v310 = 0;
    v311 = 0;
    v312 = 0;
    v308 = 0;
    v309 = 0;
    v307 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v307, v108, (uint64_t)v313.__end_, v313.__end_ - v108);
    v123 = indexGrouping((char **)&v307, (uint64_t *)&v310, 0);
    if (v307)
    {
      v308 = v307;
      operator delete(v307);
    }
    if (v123)
    {
      v124 = v313.__begin_;
      if (v311 != v310)
      {
        v125 = (v311 - (_BYTE *)v310) / 24;
        if (v125 <= 1)
          v125 = 1;
        v126 = (char *)v310 + 8;
        do
        {
          v127 = (int *)*(v126 - 1);
          if (*v126 - (_QWORD)v127 <= 7uLL)
            v124[*v127] = 1;
          v126 += 3;
          --v125;
        }
        while (v125);
      }
      v304 = 0;
      v305 = 0;
      v306 = 0;
      v302 = 0;
      v303 = 0;
      v301 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v301, v124, (uint64_t)v313.__end_, v313.__end_ - v124);
      v128 = indexGrouping((char **)&v301, (uint64_t *)&v304, 1);
      if (v301)
      {
        v302 = v301;
        operator delete(v301);
      }
      if (v128 && 0xAAAAAAAAAAAAAAABLL * ((v305 - (_BYTE *)v304) >> 3) > 1)
      {
        v130 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>((std::vector<int> *)&v329[24 * (int)v102 + 24], v330, (std::vector<int> *)&v329[24 * (int)v102]);
        v131 = v330;
        if (v330 != v130)
        {
          v132 = v330;
          do
          {
            v134 = v132[-1].__begin_;
            --v132;
            v133 = v134;
            if (v134)
            {
              v131[-1].__end_ = v133;
              operator delete(v133);
            }
            v131 = v132;
          }
          while (v132 != v130);
        }
        v330 = v130;
        v135 = (char *)v304;
        v297 = v305;
        if (v304 != v305)
        {
          v292 = v104;
          v102 = (int)v102;
          v136 = 24 * (int)v102 - 24;
          do
          {
            v298 = 0;
            v299 = 0;
            v300 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v298, *(const void **)v135, *((_QWORD *)v135 + 1), (uint64_t)(*((_QWORD *)v135 + 1) - *(_QWORD *)v135) >> 2);
            v137 = v298;
            v138 = v299;
            if (v298 != v299)
            {
              v139 = *(_DWORD *)v314;
              do
                *v137++ += v139;
              while (v137 != v138);
            }
            v140 = v329;
            v141 = v330;
            v142 = (std::vector<int> *)&v329[24 * v102];
            if ((unint64_t)v330 >= v331)
            {
              v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v329) >> 3) + 1;
              if (v150 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v331 - (_QWORD)v329) >> 3) > v150)
                v150 = 0x5555555555555556 * ((uint64_t)(v331 - (_QWORD)v329) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v331 - (_QWORD)v329) >> 3) >= 0x555555555555555)
                v151 = 0xAAAAAAAAAAAAAAALL;
              else
                v151 = v150;
              v340 = &v331;
              if (v151)
                v152 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v331, v151);
              else
                v152 = 0;
              v153 = (std::vector<int> *)&v152[6 * v102];
              v337 = v152;
              *(_QWORD *)&v338 = v153;
              *((_QWORD *)&v338 + 1) = v153;
              v339 = (char *)&v152[6 * v151];
              if (v102 == v151)
              {
                if (v102 < 1)
                {
                  if (v102)
                    v155 = 2 * v102;
                  else
                    v155 = 1;
                  v343 = &v331;
                  v156 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v331, v155);
                  v158 = v338;
                  if (*((_QWORD *)&v338 + 1) == (_QWORD)v338)
                  {
                    v161 = vdupq_n_s64(v338);
                    v159 = (uint64_t)&v156[6 * (v155 >> 2)];
                  }
                  else
                  {
                    v159 = (uint64_t)&v156[6 * (v155 >> 2)] + *((_QWORD *)&v338 + 1) - v338;
                    v160 = (char *)&v156[6 * (v155 >> 2)];
                    do
                    {
                      *(_QWORD *)v160 = 0;
                      *((_QWORD *)v160 + 1) = 0;
                      *((_QWORD *)v160 + 2) = 0;
                      *(_OWORD *)v160 = *(_OWORD *)v158;
                      *((_QWORD *)v160 + 2) = *(_QWORD *)(v158 + 16);
                      *(_QWORD *)v158 = 0;
                      *(_QWORD *)(v158 + 8) = 0;
                      *(_QWORD *)(v158 + 16) = 0;
                      v160 += 24;
                      v158 += 24;
                    }
                    while (v160 != (char *)v159);
                    v161 = (int64x2_t)v338;
                  }
                  v162 = v337;
                  v163 = v339;
                  v337 = v156;
                  *(_QWORD *)&v338 = &v156[6 * (v155 >> 2)];
                  *(int64x2_t *)&__x.__end_ = v161;
                  *((_QWORD *)&v338 + 1) = v159;
                  v339 = (char *)&v156[6 * v157];
                  __x.__begin_ = v162;
                  v342 = v163;
                  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&__x);
                  v153 = (std::vector<int> *)*((_QWORD *)&v338 + 1);
                }
                else
                {
                  v154 = &v153[-((unint64_t)(v102 + 1) >> 1)];
                  v153 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(v153, v153, v154);
                  *(_QWORD *)&v338 = v154;
                  *((_QWORD *)&v338 + 1) = v153;
                }
              }
              v153->__begin_ = 0;
              v153->__end_ = 0;
              v153->__end_cap_.__value_ = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v153, v298, (uint64_t)v299, ((char *)v299 - (_BYTE *)v298) >> 2);
              *((_QWORD *)&v338 + 1) += 24;
              std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)&v331, (uint64_t)v142, v142, (uint64_t)v329, v329, v338, v338);
              *(_QWORD *)&v338 = v164;
              v165 = v330;
              v166 = (std::vector<int> *)*((_QWORD *)&v338 + 1);
              if (v330 != v142)
              {
                do
                {
                  v166->__begin_ = 0;
                  v166->__end_ = 0;
                  v166->__end_cap_.__value_ = 0;
                  *(_OWORD *)&v166->__begin_ = *(_OWORD *)&v142->__begin_;
                  v166->__end_cap_.__value_ = v142->__end_cap_.__value_;
                  v142->__begin_ = 0;
                  v142->__end_ = 0;
                  v142->__end_cap_.__value_ = 0;
                  ++v166;
                  ++v142;
                }
                while (v142 != v165);
                v164 = (char *)v338;
                v142 = v330;
              }
              v167 = v329;
              v168 = v331;
              v329 = v164;
              v330 = v166;
              v331 = (unint64_t)v339;
              *((_QWORD *)&v338 + 1) = v142;
              v339 = (char *)v168;
              v337 = (int *)v167;
              *(_QWORD *)&v338 = v167;
              std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v337);
            }
            else if (v142 == v330)
            {
              v142->__begin_ = 0;
              v142->__end_ = 0;
              v142->__end_cap_.__value_ = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v142, v298, (uint64_t)v299, ((char *)v299 - (_BYTE *)v298) >> 2);
              v330 = v142 + 1;
            }
            else
            {
              v143 = v330 - 1;
              v144 = v330;
              v145 = v330 - 1;
              if ((unint64_t)v330 >= 0x18)
              {
                do
                {
                  v144->__begin_ = 0;
                  v144->__end_ = 0;
                  v144->__end_cap_.__value_ = 0;
                  *(_OWORD *)&v144->__begin_ = *(_OWORD *)&v145->__begin_;
                  v144->__end_cap_.__value_ = v145->__end_cap_.__value_;
                  v145->__begin_ = 0;
                  v145->__end_ = 0;
                  v145->__end_cap_.__value_ = 0;
                  ++v144;
                  ++v145;
                }
                while (v145 < v141);
              }
              v330 = v144;
              if (v141 != &v142[1])
              {
                v146 = 8 * (((char *)v141 - (char *)&v142[1]) >> 3);
                v147 = &v140[v136];
                do
                {
                  std::vector<int>::__move_assign((uint64_t)v143--, (__n128 *)&v147[v146]);
                  v146 -= 24;
                }
                while (v146);
                v144 = v330;
              }
              v149 = v142 <= (std::vector<int> *)&v298 && v144 > (std::vector<int> *)&v298;
              if (v142 != (std::vector<int> *)(&v298 + 3 * v149))
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v142, (char *)v298, (uint64_t)v299, ((char *)v299 - (_BYTE *)v298) >> 2);
            }
            if (v298)
            {
              v299 = v298;
              operator delete(v298);
            }
            ++v102;
            v135 += 24;
            v136 += 24;
          }
          while (v135 != v297);
          v104 = v292;
        }
        v129 = 0;
        v103 = v102 - 1;
      }
      else
      {
        LODWORD(v102) = v102 + 1;
        v129 = 15;
      }
      __x.__begin_ = (std::vector<int>::pointer)&v304;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    }
    else
    {
      v129 = 1;
      v294 = 1;
    }
    __x.__begin_ = (std::vector<int>::pointer)&v310;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
    if (v313.__begin_)
    {
      v313.__end_ = v313.__begin_;
      operator delete(v313.__begin_);
    }
    if (!v129)
      goto LABEL_224;
LABEL_225:
    if (v314)
    {
      v315 = (int *)v314;
      operator delete(v314);
    }
    if (v129 != 15 && v129)
      break;
    v101 = ++v103;
    v100 = v329;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v329) >> 3) <= v103)
    {
      memset(&__x, 0, sizeof(__x));
      v337 = 0;
      v338 = 0uLL;
      if (v330 != (std::vector<int> *)v329)
      {
        v169 = 0;
        do
        {
          v170 = &v100[24 * v169];
          v295 = *(_DWORD *)(*(_QWORD *)v170
                           + (((uint64_t)(*((_QWORD *)v170 + 1) - *(_QWORD *)v170) >> 1) & 0xFFFFFFFFFFFFFFFCLL));
          v314 = 0;
          v315 = 0;
          v316 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v314, *(const void **)v170, *((_QWORD *)v170 + 1), (uint64_t)(*((_QWORD *)v170 + 1) - *(_QWORD *)v170) >> 2);
          v296 = v169;
          v313.__end_ = 0;
          v313.__end_cap_.__value_ = 0;
          v312 = 0;
          v313.__begin_ = (std::vector<int>::pointer)&v313.__end_;
          v310 = 0;
          v311 = 0;
          v172 = (int *)v314;
          v171 = v315;
          do
          {
            v173 = *v172;
            v174 = (uint64_t)&this[7][3 * *v172];
            v175 = *(float **)v174;
            v176 = *(float **)(v174 + 8);
            v177 = v175 + 1;
            v178 = v175 == v176 || v177 == v176;
            v179 = v175;
            if (!v178)
            {
              v180 = *v175;
              v179 = v175;
              v181 = v175 + 1;
              do
              {
                v182 = *v181++;
                v183 = v182;
                if (v180 < v182)
                {
                  v180 = v183;
                  v179 = v177;
                }
                v177 = v181;
              }
              while (v181 != v176);
            }
            v184 = *v179;
            v185 = (unint64_t)((char *)v179 - (char *)v175) >> 2;
            LODWORD(v304) = v185;
            if ((_DWORD)v8 == (_DWORD)v185)
            {
              v186 = v311;
              if (v311 >= v312)
              {
                v198 = (char *)v310;
                v199 = (v311 - (_BYTE *)v310) >> 2;
                v200 = v199 + 1;
                if ((unint64_t)(v199 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v201 = v312 - (_BYTE *)v310;
                if ((v312 - (_BYTE *)v310) >> 1 > v200)
                  v200 = v201 >> 1;
                if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL)
                  v202 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v202 = v200;
                if (v202)
                {
                  v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v312, v202);
                  v198 = (char *)v310;
                  v186 = v311;
                }
                else
                {
                  v203 = 0;
                }
                v205 = &v203[4 * v199];
                *(_DWORD *)v205 = v173;
                v187 = v205 + 4;
                while (v186 != v198)
                {
                  v206 = *((_DWORD *)v186 - 1);
                  v186 -= 4;
                  *((_DWORD *)v205 - 1) = v206;
                  v205 -= 4;
                }
                v310 = v205;
                v311 = v187;
                v312 = &v203[4 * v202];
                if (v198)
                  operator delete(v198);
              }
              else
              {
                *(_DWORD *)v311 = v173;
                v187 = v186 + 4;
              }
              v311 = v187;
            }
            else
            {
              v188 = v313.__end_;
              p_end = &v313.__end_;
              v190 = &v313.__end_;
              if (v313.__end_)
              {
                v191 = (std::vector<int> *)&v313.__end_;
                v192 = v313.__end_;
                do
                {
                  v193 = v192;
                  v194 = v191;
                  v195 = v192[7];
                  if (v195 >= (int)v185)
                    v191 = (std::vector<int> *)v192;
                  else
                    v192 += 2;
                  v192 = *(std::vector<int>::pointer *)v192;
                }
                while (v192);
                if (v191 == (std::vector<int> *)&v313.__end_)
                  goto LABEL_257;
                if (v195 < (int)v185)
                  v193 = (std::vector<int>::pointer)v194;
                if (v193[7] > (int)v185)
                {
LABEL_257:
                  while (1)
                  {
                    while (1)
                    {
                      v190 = (std::vector<int>::pointer *)v188;
                      v196 = v188[7];
                      if (v196 <= (int)v185)
                        break;
                      v188 = *v190;
                      p_end = v190;
                      if (!*v190)
                        goto LABEL_260;
                    }
                    if (v196 >= (int)v185)
                      break;
                    v188 = v190[1];
                    if (!v188)
                    {
                      p_end = v190 + 1;
                      goto LABEL_260;
                    }
                  }
                }
                else
                {
                  v204 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v313, v185, (unsigned int *)&v304);
                  *((float *)v204 + 8) = v184 + *((float *)v204 + 8);
                }
              }
              else
              {
LABEL_260:
                v197 = (float *)operator new(0x28uLL);
                *((_DWORD *)v197 + 7) = v185;
                v197[8] = v184;
                *(_QWORD *)v197 = 0;
                *((_QWORD *)v197 + 1) = 0;
                *((_QWORD *)v197 + 2) = v190;
                *p_end = (std::vector<int>::pointer)v197;
                if (*(_QWORD *)v313.__begin_)
                {
                  v313.__begin_ = *(std::vector<int>::pointer *)v313.__begin_;
                  v197 = (float *)*p_end;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v313.__end_, (uint64_t *)v197);
                ++v313.__end_cap_.__value_;
              }
            }
            ++v172;
          }
          while (v172 != v171);
          v207 = (char *)v310;
          if (v313.__end_cap_.__value_)
          {
            v208 = v311;
            while (v207 != v208)
            {
              v209 = v313.__begin_;
              if ((std::vector<int>::pointer *)v313.__begin_ != &v313.__end_)
              {
                v210 = *(_DWORD *)v207;
                do
                {
                  v304 = *(void **)(v209 + 7);
                  v211 = *(float *)(this[7][3 * v210] + 4 * (int)v304);
                  v212 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v313, (int)v304, (unsigned int *)&v304);
                  *((float *)v212 + 8) = v211 + *((float *)v212 + 8);
                  v213 = (std::vector<int> *)*((_QWORD *)v209 + 1);
                  if (v213)
                  {
                    do
                    {
                      v214 = v213;
                      v213 = (std::vector<int> *)v213->__begin_;
                    }
                    while (v213);
                  }
                  else
                  {
                    do
                    {
                      v214 = (std::vector<int> *)*((_QWORD *)v209 + 2);
                      v14 = v214->__begin_ == v209;
                      v209 = (std::vector<int>::pointer)v214;
                    }
                    while (!v14);
                  }
                  v209 = (std::vector<int>::pointer)v214;
                }
                while (v214 != (std::vector<int> *)&v313.__end_);
              }
              v207 += 4;
            }
            v215 = v313.__begin_;
            v216 = (float *)&v313.__end_;
            if ((std::vector<int>::pointer *)v313.__begin_ != &v313.__end_)
            {
              v216 = (float *)v313.__begin_;
              while (1)
              {
                v217 = (int *)*((_QWORD *)v215 + 1);
                v218 = v215;
                if (v217)
                {
                  do
                  {
                    v215 = v217;
                    v217 = *(int **)v217;
                  }
                  while (v217);
                }
                else
                {
                  do
                  {
                    v215 = (std::vector<int>::pointer)*((_QWORD *)v218 + 2);
                    v14 = *(_QWORD *)v215 == (_QWORD)v218;
                    v218 = v215;
                  }
                  while (!v14);
                }
                if (v215 == (std::vector<int>::pointer)&v313.__end_)
                  break;
                if ((int)v216[8] < (int)*((float *)v215 + 8))
                  v216 = (float *)v215;
              }
            }
            v219 = *((int *)v216 + 7);
          }
          else
          {
            v220 = (uint64_t)&this[7][3 * *(int *)v310];
            v305 = 0;
            v306 = 0;
            v304 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v304, *(const void **)v220, *(_QWORD *)(v220 + 8), (uint64_t)(*(_QWORD *)(v220 + 8) - *(_QWORD *)v220) >> 2);
            v221 = v304;
            v222 = (char *)v304 + 4 * v8;
            v223 = v305 - (v222 + 4);
            if (v305 != v222 + 4)
            {
              memmove((char *)v304 + 4 * v8, v222 + 4, v305 - (v222 + 4));
              v221 = v304;
            }
            v305 = &v222[v223];
            v298 = 0;
            v299 = 0;
            v300 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v298, v221, (uint64_t)&v222[v223], (&v222[v223] - (_BYTE *)v221) >> 2);
            v224 = v310;
            if ((unint64_t)(v311 - (_BYTE *)v310) < 5)
            {
              v237 = (unint64_t)(v311 - (_BYTE *)v310) >> 2;
              v233 = (float *)v298;
              v234 = (float *)v299;
            }
            else
            {
              v225 = 1;
              do
              {
                v226 = v224[v225];
                v227 = this[7];
                v228 = (char **)&v227[3 * v226];
                if (&v304 != (void **)v228)
                {
                  v229 = v227[3 * v226 + 1];
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v304, *v228, v229, (v229 - (uint64_t)*v228) >> 2);
                }
                v230 = (float *)v304;
                v231 = (char *)v304 + 4 * v8;
                v232 = v305 - (v231 + 4);
                if (v305 != v231 + 4)
                {
                  memmove((char *)v304 + 4 * v8, v231 + 4, v305 - (v231 + 4));
                  v230 = (float *)v304;
                }
                v305 = &v231[v232];
                v233 = (float *)v298;
                v234 = (float *)v299;
                if (v298 != v299)
                {
                  v235 = (float *)v298;
                  do
                  {
                    v236 = *v230++;
                    *v235 = *v235 + v236;
                    ++v235;
                  }
                  while (v235 != v234);
                }
                ++v225;
                v224 = v310;
                v237 = (v311 - (_BYTE *)v310) >> 2;
              }
              while (v237 > v225);
            }
            if (v233 == v234)
              goto LABEL_327;
            v238 = 1.0 / (float)v237;
            v239 = v233;
            do
            {
              *v239 = v238 * *v239;
              ++v239;
            }
            while (v239 != v234);
            v240 = v233 + 1;
            if (v233 + 1 == v234)
            {
LABEL_327:
              v242 = v233;
            }
            else
            {
              v241 = *v233;
              v242 = v233;
              v243 = v233 + 1;
              do
              {
                v244 = *v243++;
                v245 = v244;
                if (v241 < v244)
                {
                  v241 = v245;
                  v242 = v240;
                }
                v240 = v243;
              }
              while (v243 != v234);
            }
            v246 = v242 - v233;
            if (v246 < v8)
              v219 = v242 - v233;
            else
              v219 = v246 + 1;
            if (v233)
            {
              v299 = v233;
              operator delete(v233);
            }
            if (v304)
            {
              v305 = (char *)v304;
              operator delete(v304);
            }
          }
          if (v219 != v8)
          {
            v248 = (std::vector<int>::pointer)a4[1];
            v247 = (unint64_t)a4[2];
            if ((unint64_t)v248 >= v247)
            {
              v250 = (std::vector<int>::pointer)*a4;
              v251 = ((char *)v248 - *a4) >> 2;
              v252 = v251 + 1;
              if ((unint64_t)(v251 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v253 = v247 - (_QWORD)v250;
              if (v253 >> 1 > v252)
                v252 = v253 >> 1;
              if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFFCLL)
                v254 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v254 = v252;
              if (v254)
              {
                v255 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v254);
                v250 = (std::vector<int>::pointer)*a4;
                v248 = (std::vector<int>::pointer)a4[1];
              }
              else
              {
                v255 = 0;
              }
              v256 = &v255[4 * v251];
              *(_DWORD *)v256 = v219;
              v249 = v256 + 4;
              while (v248 != v250)
              {
                v257 = *--v248;
                *((_DWORD *)v256 - 1) = v257;
                v256 -= 4;
              }
              *a4 = v256;
              a4[1] = v249;
              a4[2] = &v255[4 * v254];
              if (v250)
                operator delete(v250);
            }
            else
            {
              *v248 = v219;
              v249 = (char *)(v248 + 1);
            }
            a4[1] = v249;
            if (v295 >= 0)
              v258 = v295;
            else
              v258 = v295 + 1;
            v259 = (float)(v258 >> 1);
            v261 = (float *)this[23];
            v260 = this[24];
            if (v261 >= (float *)v260)
            {
              v263 = (uint64_t *)*v293;
              v264 = ((char *)v261 - (_BYTE *)*v293) >> 3;
              v265 = v264 + 1;
              if ((unint64_t)(v264 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v266 = (char *)v260 - (char *)v263;
              if (v266 >> 2 > v265)
                v265 = v266 >> 2;
              if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8)
                v267 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v267 = v265;
              if (v267)
              {
                v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(this + 24), v267);
                v263 = this[22];
                v261 = (float *)this[23];
              }
              else
              {
                v268 = 0;
              }
              v269 = &v268[8 * v264];
              *(_DWORD *)v269 = 1065353216;
              *((float *)v269 + 1) = v259;
              v270 = (uint64_t *)v269;
              if (v261 != (float *)v263)
              {
                do
                {
                  v271 = *((_QWORD *)v261 - 1);
                  v261 -= 2;
                  *--v270 = v271;
                }
                while (v261 != (float *)v263);
                v263 = (uint64_t *)*v293;
              }
              v262 = (uint64_t *)(v269 + 8);
              this[22] = v270;
              this[23] = (uint64_t *)(v269 + 8);
              this[24] = (uint64_t *)&v268[8 * v267];
              if (v263)
                operator delete(v263);
            }
            else
            {
              *v261 = 1.0;
              v261[1] = v259;
              v262 = (uint64_t *)(v261 + 2);
            }
            this[23] = v262;
            v272 = __x.__end_;
            if (__x.__end_ >= __x.__end_cap_.__value_)
            {
              v274 = __x.__begin_;
              v275 = __x.__end_ - __x.__begin_;
              v276 = v275 + 1;
              if ((unint64_t)(v275 + 1) >> 62)
                goto LABEL_440;
              v277 = (char *)__x.__end_cap_.__value_ - (char *)__x.__begin_;
              if (((char *)__x.__end_cap_.__value_ - (char *)__x.__begin_) >> 1 > v276)
                v276 = v277 >> 1;
              if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFFCLL)
                v278 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v278 = v276;
              if (v278)
              {
                v279 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__x.__end_cap_, v278);
                v274 = __x.__begin_;
                v272 = __x.__end_;
              }
              else
              {
                v279 = 0;
              }
              v280 = (int *)&v279[4 * v275];
              *v280 = v295;
              v273 = v280 + 1;
              while (v272 != v274)
              {
                v281 = *--v272;
                *--v280 = v281;
              }
              __x.__begin_ = v280;
              __x.__end_ = v273;
              __x.__end_cap_.__value_ = (int *)&v279[4 * v278];
              if (v274)
                operator delete(v274);
            }
            else
            {
              *__x.__end_ = v295;
              v273 = v272 + 1;
            }
            __x.__end_ = v273;
            v282 = (int *)v338;
            if ((unint64_t)v338 >= *((_QWORD *)&v338 + 1))
            {
              v284 = v337;
              v285 = (uint64_t)(v338 - (_QWORD)v337) >> 2;
              v286 = v285 + 1;
              if ((unint64_t)(v285 + 1) >> 62)
LABEL_440:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v287 = *((_QWORD *)&v338 + 1) - (_QWORD)v337;
              if ((uint64_t)(*((_QWORD *)&v338 + 1) - (_QWORD)v337) >> 1 > v286)
                v286 = v287 >> 1;
              if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
                v288 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v288 = v286;
              if (v288)
              {
                v289 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v338 + 8, v288);
                v284 = v337;
                v282 = (int *)v338;
              }
              else
              {
                v289 = 0;
              }
              v290 = (int *)&v289[4 * v285];
              *v290 = v296;
              v283 = v290 + 1;
              while (v282 != v284)
              {
                v291 = *--v282;
                *--v290 = v291;
              }
              v337 = v290;
              *(_QWORD *)&v338 = v283;
              *((_QWORD *)&v338 + 1) = &v289[4 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_DWORD *)v338 = v296;
              v283 = v282 + 1;
            }
            *(_QWORD *)&v338 = v283;
          }
          if (v310)
          {
            v311 = (char *)v310;
            operator delete(v310);
          }
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy((_QWORD *)v313.__end_);
          if (v314)
          {
            v315 = (int *)v314;
            operator delete(v314);
          }
          v169 = v296 + 1;
          v100 = v329;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v330 - v329) >> 3) > v296 + 1);
        if (v337)
        {
          *(_QWORD *)&v338 = v337;
          operator delete(v337);
        }
      }
      goto LABEL_412;
    }
  }
  if (v320)
  {
    v321 = v320;
    operator delete(v320);
  }
  if (v323)
  {
    v324 = (char *)v323;
    operator delete(v323);
  }
  __x.__begin_ = (std::vector<int>::pointer)&v329;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__begin_ = (std::vector<int>::pointer)v335;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  if (v336.__begin_)
  {
    v336.__end_ = v336.__begin_;
    operator delete(v336.__begin_);
  }
  if ((v294 & 1) == 0)
  {
    v99 = (std::vector<int>::pointer)*a4;
    if (*a4)
    {
      a4[1] = (char *)v99;
      goto LABEL_422;
    }
  }
}

void sub_1D4FC658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t *a44,uint64_t *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  void *v54;
  void *v55;

  if (__p)
    operator delete(__p);
  if (a44)
  {
    a45 = a44;
    operator delete(a44);
  }
  a44 = &a50;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a50 = v52 - 232;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  v54 = *(void **)(v52 - 208);
  if (v54)
  {
    *(_QWORD *)(v52 - 200) = v54;
    operator delete(v54);
  }
  v55 = *(void **)v51;
  if (*(_QWORD *)v51)
  {
    *(_QWORD *)(v51 + 8) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1D4FC683C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

int *std::__introsort<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  BOOL v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int64_t v65;
  uint64_t *v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  int *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  int *v94;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v43 = *(a2 - 1);
        v44 = *v10;
        if (*(float *)(**a3 + 4 * v43) > *(float *)(**a3 + 4 * v44))
        {
          *v10 = v43;
          *(a2 - 1) = v44;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v10, v10 + 1, a2 - 1, **a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5:
        v45 = v10 + 2;
        v46 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v47 = *(a2 - 1);
        v48 = v10[3];
        v49 = **a3;
        if (*(float *)(v49 + 4 * v47) > *(float *)(v49 + 4 * v48))
        {
          *v46 = v47;
          *(a2 - 1) = v48;
          v50 = *v46;
          v51 = *v45;
          v52 = *(float *)(v49 + 4 * v50);
          if (v52 > *(float *)(v49 + 4 * v51))
          {
            *v45 = v50;
            *v46 = v51;
            v53 = v10[1];
            if (v52 > *(float *)(v49 + 4 * v53))
            {
              v10[1] = v50;
              v10[2] = v53;
              v54 = *v10;
              if (v52 > *(float *)(v49 + 4 * v54))
              {
                *v10 = v50;
                v10[1] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v55 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v56 = **a3;
                v57 = 4;
                v58 = v10;
                do
                {
                  v60 = *v58;
                  v59 = v58[1];
                  v58 = v55;
                  v61 = *(float *)(v56 + 4 * v59);
                  if (v61 > *(float *)(v56 + 4 * v60))
                  {
                    v62 = v57;
                    while (1)
                    {
                      *(int *)((char *)v10 + v62) = v60;
                      v63 = v62 - 4;
                      if (v62 == 4)
                        break;
                      v60 = *(int *)((char *)v10 + v62 - 8);
                      v62 -= 4;
                      if (v61 <= *(float *)(v56 + 4 * v60))
                      {
                        v64 = (int *)((char *)v10 + v63);
                        goto LABEL_75;
                      }
                    }
                    v64 = v10;
LABEL_75:
                    *v64 = v59;
                  }
                  v55 = v58 + 1;
                  v57 += 4;
                }
                while (v58 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v96 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v97 = **a3;
              do
              {
                v99 = *v9;
                v98 = v9[1];
                v9 = v96;
                v100 = *(float *)(v97 + 4 * v98);
                if (v100 > *(float *)(v97 + 4 * v99))
                {
                  do
                  {
                    *v96 = v99;
                    v99 = *(v96 - 2);
                    --v96;
                  }
                  while (v100 > *(float *)(v97 + 4 * v99));
                  *v96 = v98;
                }
                v96 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v65 = (unint64_t)(v12 - 2) >> 1;
            v66 = *a3;
            v67 = v65;
            do
            {
              v68 = v67;
              if (v65 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v10[v69];
                v71 = 2 * v67 + 2;
                v72 = *v66;
                if (v71 < v12 && *(float *)(v72 + 4 * *v70) > *(float *)(v72 + 4 * v70[1]))
                {
                  ++v70;
                  v69 = 2 * v68 + 2;
                }
                result = &v10[v68];
                v73 = *v70;
                v74 = *result;
                v75 = *(float *)(v72 + 4 * v74);
                if (*(float *)(v72 + 4 * v73) <= v75)
                {
                  do
                  {
                    v76 = v70;
                    *result = v73;
                    if (v65 < v69)
                      break;
                    v77 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v70 = &v10[v69];
                    v78 = v77 + 2;
                    if (v78 < v12 && *(float *)(v72 + 4 * *v70) > *(float *)(v72 + 4 * v70[1]))
                    {
                      ++v70;
                      v69 = v78;
                    }
                    v73 = *v70;
                    result = v76;
                  }
                  while (*(float *)(v72 + 4 * v73) <= v75);
                  *v76 = v74;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v79 = (unint64_t)v11 >> 2;
            do
            {
              v80 = 0;
              v81 = *v10;
              v82 = *a3;
              v83 = v10;
              do
              {
                v84 = v83;
                v83 += v80 + 1;
                v85 = 2 * v80;
                v80 = (2 * v80) | 1;
                v86 = v85 + 2;
                if (v86 < v79)
                {
                  result = (int *)v83[1];
                  if (*(float *)(*v82 + 4 * *v83) > *(float *)(*v82 + 4 * (_QWORD)result))
                  {
                    ++v83;
                    v80 = v86;
                  }
                }
                *v84 = *v83;
              }
              while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
              if (v83 == --a2)
              {
                *v83 = v81;
              }
              else
              {
                *v83 = *a2;
                *a2 = v81;
                v87 = (char *)v83 - (char *)v10 + 4;
                if (v87 >= 5)
                {
                  v88 = (((unint64_t)v87 >> 2) - 2) >> 1;
                  v89 = &v10[v88];
                  v90 = *v89;
                  v91 = *v83;
                  v92 = *v82;
                  v93 = *(float *)(v92 + 4 * v91);
                  if (*(float *)(v92 + 4 * v90) > v93)
                  {
                    do
                    {
                      v94 = v89;
                      *v83 = v90;
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                      v89 = &v10[v88];
                      v90 = *v89;
                      v83 = v94;
                    }
                    while (*(float *)(v92 + 4 * v90) > v93);
                    *v94 = v91;
                  }
                }
              }
            }
            while (v79-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        v15 = **a3;
        if ((unint64_t)v11 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v14, v9, a2 - 1, v15);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v9, v14, a2 - 1, v15);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v9 + 1, v14 - 1, a2 - 2, **a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v9 + 2, &v9[v13 + 1], a2 - 3, **a3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v14 - 1, v14, &v9[v13 + 1], **a3);
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = **a3;
        if ((a5 & 1) == 0)
        {
          v19 = *(float *)(v18 + 4 * v17);
          if (*(float *)(v18 + 4 * *(v9 - 1)) > v19)
            goto LABEL_12;
          if (v19 <= *(float *)(v18 + 4 * *(a2 - 1)))
          {
            v35 = v9 + 1;
            do
            {
              v10 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v19 <= *(float *)(v18 + 4 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v34 = v10[1];
              ++v10;
            }
            while (v19 <= *(float *)(v18 + 4 * v34));
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v19 > *(float *)(v18 + 4 * v37));
          }
          if (v10 < v36)
          {
            v38 = *v10;
            v39 = *v36;
            do
            {
              *v10 = v39;
              *v36 = v38;
              do
              {
                v40 = v10[1];
                ++v10;
                v38 = v40;
              }
              while (v19 <= *(float *)(v18 + 4 * v40));
              do
              {
                v41 = *--v36;
                v39 = v41;
              }
              while (v19 > *(float *)(v18 + 4 * v41));
            }
            while (v10 < v36);
          }
          v42 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v42;
          a5 = 0;
          *v42 = v17;
          continue;
        }
        v19 = *(float *)(v18 + 4 * v17);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while (*(float *)(v18 + 4 * v21) > v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(float *)(v18 + 4 * v25) <= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(float *)(v18 + 4 * v24) <= v19);
        }
        if (v22 >= v23)
        {
          v32 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = v21;
          v28 = &v9[v20];
          v29 = v23;
          do
          {
            *v28 = v26;
            *v29 = v27;
            do
            {
              v30 = v28[1];
              ++v28;
              v27 = v30;
            }
            while (*(float *)(v18 + 4 * v30) > v19);
            do
            {
              v31 = *--v29;
              v26 = v31;
            }
            while (*(float *)(v18 + 4 * v31) <= v19);
          }
          while (v28 < v29);
          v32 = v28 - 1;
        }
        if (v32 != v9)
          *v9 = *v32;
        *v32 = v17;
        if (v22 < v23)
        {
LABEL_33:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *,false>(v9, v32, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v32 + 1;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v9, v32, a3);
        v10 = v32 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(v32 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v32;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(float *)(a4 + 4 * v4);
  v7 = *(float *)(a4 + 4 * v5);
  v8 = *a3;
  v9 = *(float *)(a4 + 4 * v8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(float *)(a4 + 4 * v10) > *(float *)(a4 + 4 * v11))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(float *)(a4 + 4 * v12) <= v7)
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) > *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = **a3;
      if (*(float *)(v25 + 4 * v23) > *(float *)(v25 + 4 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = *(float *)(v25 + 4 * v26);
        if (v28 > *(float *)(v25 + 4 * v27))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 > *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 > *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * v15);
    if (v17 > *(float *)(v13 + 4 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(float *)(v13 + 4 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,returnIndiciesOfSortedFloatVector(std::vector<float> const&)::$_0 &,int *>(a1, a2, a3, **a5);
  v11 = *a4;
  v12 = *a3;
  v13 = **a5;
  if (*(float *)(v13 + 4 * v11) > *(float *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) > *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) > *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1D4FC7420(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1D4FC7528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void ___ZL7logZerov_block_invoke()
{
  logZero(void)::slogZero = 0xC06CC845B54B54F2;
}

void Matrix<float>::~Matrix(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E98D8C98;
  v1 = a1[16];
  if (v1)
    MEMORY[0x1D826E270](v1, 0x1000C8052888210);
  JUMPOUT(0x1D826E288);
}

uint64_t Matrix<float>::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 140);
  v7 = *(_DWORD *)(a2 + 136);
  *(_QWORD *)a3 = &off_1E98D8C98;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a2 + 136);
    v12 = *(_QWORD *)(a2 + 128);
    do
    {
      if ((_DWORD)v11)
      {
        v13 = 0;
        v14 = 0;
        v15 = *(unsigned int *)(a1 + 136);
        do
        {
          v16 = v10 + v7 * (_DWORD)v14;
          *(_DWORD *)(result + 4 * v16) = 0;
          if ((_DWORD)v15)
          {
            v17 = *(_QWORD *)(a1 + 128);
            v18 = 0.0;
            v19 = v10;
            v20 = v13;
            v21 = v15;
            do
            {
              v18 = v18 + (float)(*(float *)(v17 + 4 * v19) * *(float *)(v12 + 4 * v20));
              *(float *)(result + 4 * v16) = v18;
              ++v20;
              v19 += v15;
              --v21;
            }
            while (v21);
          }
          ++v14;
          v13 += v11;
        }
        while (v14 != v11);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<float>::operator*@<X0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E98D8C98;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a1 + 136);
    v12 = *a2;
    do
    {
      if ((_DWORD)v11)
      {
        v13 = *(_QWORD *)(a1 + 128);
        v14 = v10;
        v15 = v10;
        v16 = v11;
        do
        {
          *(float *)(result + 4 * v15) = v12 * *(float *)(v13 + 4 * v14);
          v15 += v7;
          v14 += v11;
          --v16;
        }
        while (v16);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<float>::operator+@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E98D8C98;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a1 + 136);
    v12 = *(_QWORD *)(a2 + 128);
    v13 = *(_DWORD *)(a2 + 136);
    do
    {
      if ((_DWORD)v11)
      {
        v14 = *(_QWORD *)(a1 + 128);
        v15 = v10;
        v16 = v10;
        v17 = v10;
        v18 = v11;
        do
        {
          *(float *)(result + 4 * v17) = *(float *)(v14 + 4 * v15) + *(float *)(v12 + 4 * v16);
          v17 += v7;
          v16 += v13;
          v15 += v11;
          --v18;
        }
        while (v18);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<float>::operator+=(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    v3 = 0;
    v4 = *(unsigned int *)(result + 136);
    v5 = *(_QWORD *)(a2 + 128);
    v6 = *(_DWORD *)(a2 + 136);
    do
    {
      if ((_DWORD)v4)
      {
        v7 = *(_QWORD *)(result + 128);
        v8 = v3;
        v9 = v3;
        v10 = v4;
        do
        {
          *(float *)(v7 + 4 * v9) = *(float *)(v5 + 4 * v8) + *(float *)(v7 + 4 * v9);
          v9 += v4;
          v8 += v6;
          --v10;
        }
        while (v10);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t Matrix<float>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    MEMORY[0x1D826E270](v4, 0x1000C8052888210);
  v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  v6 = (void *)operator new[]();
  *(_QWORD *)(a1 + 128) = v6;
  memcpy(v6, *(const void **)(a2 + 128), 4 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

uint64_t Matrix<float>::operator=(uint64_t a1, const void *a2)
{
  memcpy(*(void **)(a1 + 128), a2, 4 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

BOOL Matrix<float>::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140)))
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 4 * (v3 * v2)) == 0;
  else
    return 0;
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  float *v20;
  float v21;
  uint64_t v22;
  int v23;
  float v24;
  unint64_t v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v31;
  float *v32;
  float *v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float v38;
  char v39;
  int v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float *i;
  float v46;
  float *v47;
  int v48;
  int v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  int v73;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  uint64_t v85;
  float v86;
  float v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  int v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  float v109;
  float *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  int v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  float v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  float v127;
  int v128;
  uint64_t j;

  while (2)
  {
    v10 = a2 - a4;
    v11 = (uint64_t)(a2 - a4) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v55 = *(float *)a4;
        v56 = *(float *)(a2 - 8);
        if (*(float *)a4 >= v56)
        {
          if (v56 < v55)
            return;
          v58 = *(_DWORD *)(a4 + 4);
          v57 = *(_DWORD *)(a2 - 4);
          if (v58 >= v57)
            return;
        }
        else
        {
          v57 = *(_DWORD *)(a2 - 4);
          v58 = *(_DWORD *)(a4 + 4);
        }
        *(float *)(a2 - 8) = v55;
        *(float *)a4 = v56;
        *(_DWORD *)(a2 - 4) = v58;
        *(_DWORD *)(a4 + 4) = v57;
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a3, a4 + 8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, a4 + 8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, a4 + 8);
        return;
      default:
        if (v10 > 191)
        {
          if (!a5)
          {
            if (a2 == a4)
              return;
            v75 = (v11 - 2) >> 1;
            v76 = v75;
            while (1)
            {
              v77 = v76;
              v78 = 8 * v76;
              if (v75 >= v78 >> 3)
              {
                v79 = v78 >> 2;
                v80 = (v78 >> 2) | 1;
                v81 = a2 - 8 * v80;
                v82 = v79 + 2;
                if (v82 < (uint64_t)v11)
                {
                  v83 = *(float *)(v81 - 8);
                  v84 = *(float *)(v81 - 16);
                  if (v83 < v84 || v84 >= v83 && *(_DWORD *)(v81 - 4) < *(_DWORD *)(v81 - 12))
                  {
                    v81 -= 8;
                    v80 = v82;
                  }
                }
                v85 = a2 - 8 * v77;
                v86 = *(float *)(v81 - 8);
                v87 = *(float *)(v85 - 8);
                if (v86 >= v87)
                {
                  if (v87 < v86)
                  {
                    v88 = *(_DWORD *)(v85 - 4);
                    v89 = *(_DWORD *)(v81 - 4);
LABEL_136:
                    *(float *)(v85 - 8) = v86;
                    *(_DWORD *)(v85 - 4) = v89;
                    if (v75 >= v80)
                    {
                      while (1)
                      {
                        v91 = 2 * v80;
                        v80 = (2 * v80) | 1;
                        v90 = a2 - 8 * v80;
                        v92 = v91 + 2;
                        if (v92 < (uint64_t)v11)
                        {
                          v93 = *(float *)(v90 - 8);
                          v94 = *(float *)(v90 - 16);
                          if (v93 < v94 || v94 >= v93 && *(_DWORD *)(v90 - 4) < *(_DWORD *)(v90 - 12))
                          {
                            v90 -= 8;
                            v80 = v92;
                          }
                        }
                        v95 = *(float *)(v90 - 8);
                        if (v95 < v87)
                          break;
                        v96 = *(_DWORD *)(v90 - 4);
                        v97 = v87 >= v95 && v96 < v88;
                        if (v97)
                          break;
                        *(float *)(v81 - 8) = v95;
                        *(_DWORD *)(v81 - 4) = v96;
                        v81 = v90;
                        if (v75 < v80)
                          goto LABEL_138;
                      }
                    }
                    v90 = v81;
LABEL_138:
                    *(float *)(v90 - 8) = v87;
                    *(_DWORD *)(v90 - 4) = v88;
                    goto LABEL_139;
                  }
                  v89 = *(_DWORD *)(v81 - 4);
                  v88 = *(_DWORD *)(v85 - 4);
                  if (v89 >= v88)
                    goto LABEL_136;
                }
              }
LABEL_139:
              v76 = v77 - 1;
              if (!v77)
              {
                v98 = (unint64_t)v10 >> 3;
                while (1)
                {
                  v99 = 0;
                  v100 = *(_DWORD *)(a2 - 8);
                  v101 = *(_DWORD *)(a2 - 4);
                  v102 = v98 - 2;
                  if (v98 < 2)
                    v102 = v98 - 1;
                  v103 = v102 >> 1;
                  v104 = a2;
                  do
                  {
                    v105 = v104;
                    v104 += 8 * ~v99;
                    v106 = 2 * v99;
                    v99 = (2 * v99) | 1;
                    v107 = v106 + 2;
                    if (v107 < v98)
                    {
                      v108 = *(float *)(v104 - 8);
                      v109 = *(float *)(v104 - 16);
                      if (v108 < v109 || v109 >= v108 && *(_DWORD *)(v104 - 4) < *(_DWORD *)(v104 - 12))
                      {
                        v104 -= 8;
                        v99 = v107;
                      }
                    }
                    *(_DWORD *)(v105 - 8) = *(_DWORD *)(v104 - 8);
                    *(_DWORD *)(v105 - 4) = *(_DWORD *)(v104 - 4);
                  }
                  while (v99 <= v103);
                  if (a4 + 8 == v104)
                  {
                    *(_DWORD *)(v104 - 8) = v100;
                    *(_DWORD *)(v104 - 4) = v101;
                  }
                  else
                  {
                    v110 = (float *)(v104 - 8);
                    *(_DWORD *)(v104 - 8) = *(_DWORD *)a4;
                    *(_DWORD *)(v104 - 4) = *(_DWORD *)(a4 + 4);
                    *(_DWORD *)a4 = v100;
                    *(_DWORD *)(a4 + 4) = v101;
                    v111 = a2 - (v104 - 8);
                    if (v111 >= 9)
                    {
                      v112 = ((unint64_t)v111 >> 3) - 2;
                      v113 = v112 >> 1;
                      v114 = a2 - 8 * (v112 >> 1);
                      v115 = *(float *)(v114 - 8);
                      v116 = *v110;
                      if (v115 < *v110)
                      {
                        v117 = *(_DWORD *)(v104 - 4);
                        v118 = *(_DWORD *)(v114 - 4);
LABEL_169:
                        *(float *)(v104 - 8) = v115;
                        *(_DWORD *)(v104 - 4) = v118;
                        if (v112 >= 2)
                        {
                          while (1)
                          {
                            v120 = v113 - 1;
                            v113 = (v113 - 1) >> 1;
                            v119 = a2 - 8 * v113;
                            v121 = *(float *)(v119 - 8);
                            if (v121 >= v116)
                            {
                              if (v116 < v121)
                                break;
                              v122 = *(_DWORD *)(v119 - 4);
                              if (v122 >= v117)
                                break;
                            }
                            else
                            {
                              v122 = *(_DWORD *)(v119 - 4);
                            }
                            *(float *)(v114 - 8) = v121;
                            *(_DWORD *)(v114 - 4) = v122;
                            v114 = a2 - 8 * v113;
                            if (v120 <= 1)
                              goto LABEL_176;
                          }
                        }
                        v119 = v114;
LABEL_176:
                        *(float *)(v119 - 8) = v116;
                        *(_DWORD *)(v119 - 4) = v117;
                        goto LABEL_177;
                      }
                      if (v116 >= v115)
                      {
                        v118 = *(_DWORD *)(v114 - 4);
                        v117 = *(_DWORD *)(v104 - 4);
                        if (v118 < v117)
                          goto LABEL_169;
                      }
                    }
                  }
LABEL_177:
                  a4 += 8;
                  v97 = v98-- <= 2;
                  if (v97)
                    return;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = a2 - 8 * (v11 >> 1);
          v14 = a2;
          v15 = a1;
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a2 - 8 * (v11 >> 1), a2 - 8 * (v11 >> 1), a1, a2, a4 + 8, a4 + 8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8 * (v11 >> 1), a2 - 8 * (v11 >> 1), a4 + 8, a4 + 8);
            v16 = a2 + 8 * (1 - v12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a2 - 8, a2 - 8, v16, v16, a4 + 16, a4 + 16);
            v17 = a2 + 8 * ~v12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a2 - 16, a2 - 16, v17, v17, a4 + 24, a4 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(v16, v16, v13, v13, v17, v17);
            v18 = *(_DWORD *)(a2 - 8);
            *(_DWORD *)(a2 - 8) = *(_DWORD *)(v13 - 8);
            *(_DWORD *)(v13 - 8) = v18;
            v19 = *(_DWORD *)(a2 - 4);
            *(_DWORD *)(a2 - 4) = *(_DWORD *)(v13 - 4);
            *(_DWORD *)(v13 - 4) = v19;
          }
          --a5;
          v20 = (float *)(a2 - 8);
          if ((a6 & 1) != 0)
          {
            v21 = *v20;
LABEL_10:
            v22 = 0;
            v23 = *(_DWORD *)(a2 - 4);
            while (1)
            {
              v24 = *(float *)(a2 + v22 - 16);
              if (v24 >= v21 && (v21 < v24 || *(_DWORD *)(a2 + v22 - 12) >= v23))
                break;
              v22 -= 8;
            }
            v25 = a2 + v22 - 8;
            if (v22)
            {
              v26 = *(float *)a4;
              v27 = (float *)(a4 + 8);
              if (*(float *)a4 >= v21)
              {
                do
                {
                  if (v21 >= v26 && *((_DWORD *)v27 - 1) < v23)
                    break;
                  v28 = *v27;
                  v27 += 2;
                  v26 = v28;
                }
                while (v28 >= v21);
              }
            }
            else
            {
              v27 = (float *)a4;
              if (v25 > a4)
              {
                v29 = *(float *)a4;
                v27 = (float *)(a4 + 8);
                while (v29 >= v21)
                {
                  if (v21 >= v29)
                  {
                    if (*((_DWORD *)v27 - 1) < v23 || (unint64_t)v27 >= v25)
                      break;
                  }
                  else if ((unint64_t)v27 >= v25)
                  {
                    break;
                  }
                  v31 = *v27;
                  v27 += 2;
                  v29 = v31;
                }
              }
            }
            v32 = (float *)v25;
            if ((unint64_t)v27 < v25)
            {
              v33 = v27;
              do
              {
                v34 = *((_DWORD *)v32 - 2);
                v32 -= 2;
                *v32 = *(v33 - 2);
                *((_DWORD *)v33 - 2) = v34;
                v35 = *((_DWORD *)v32 + 1);
                v32[1] = *(v33 - 1);
                *((_DWORD *)v33 - 1) = v35;
                while (1)
                {
                  v36 = *(v32 - 2);
                  if (v36 >= v21 && (v21 < v36 || *((_DWORD *)v32 - 1) >= v23))
                    break;
                  v32 -= 2;
                }
                do
                {
                  v37 = *v33;
                  v33 += 2;
                  v38 = v37;
                }
                while (v37 >= v21 && (v21 < v38 || *((_DWORD *)v33 - 1) >= v23));
              }
              while (v33 < v32);
            }
            if (v32 + 2 != (float *)a2)
            {
              *(float *)(a2 - 8) = *v32;
              *(float *)(a2 - 4) = v32[1];
            }
            *v32 = v21;
            *((_DWORD *)v32 + 1) = v23;
            if ((unint64_t)v27 < v25)
            {
LABEL_46:
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>,false>(v15, v14, v32 + 2, v32 + 2, a5, a6 & 1);
              a6 = 0;
              a1 = (uint64_t)(v32 + 2);
              a2 = (uint64_t)v32;
              continue;
            }
            v39 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, (uint64_t)(v32 + 2), (uint64_t)(v32 + 2));
            if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>((uint64_t)v32, (uint64_t)v32, a3, a4))
            {
              a3 = (uint64_t)(v32 + 2);
              a4 = (unint64_t)(v32 + 2);
              if ((v39 & 1) != 0)
                return;
            }
            else
            {
              a1 = (uint64_t)(v32 + 2);
              a2 = (uint64_t)v32;
              if ((v39 & 1) == 0)
                goto LABEL_46;
            }
          }
          else
          {
            v21 = *(float *)(a2 - 8);
            if (*(float *)a2 < v21)
              goto LABEL_10;
            if (v21 >= *(float *)a2)
            {
              v40 = *(_DWORD *)(a2 - 4);
              if (*(_DWORD *)(a2 + 4) < v40)
                goto LABEL_10;
            }
            else
            {
              v40 = *(_DWORD *)(a2 - 4);
            }
            v41 = *(float *)a4;
            if (v21 < *(float *)a4 || v41 >= v21 && v40 < *(_DWORD *)(a4 + 4))
            {
              v42 = *(float *)(a2 - 16);
              if (v21 >= v42)
              {
                v43 = a2 - 24;
                do
                {
                  if (v42 >= v21 && v40 < *(_DWORD *)(v43 + 12))
                    break;
                  v44 = *(float *)v43;
                  v43 -= 8;
                  v42 = v44;
                }
                while (v21 >= v44);
                v20 = (float *)(v43 + 16);
              }
            }
            else
            {
              while ((unint64_t)v20 > a4)
              {
                v54 = *(v20 - 2);
                if (v21 < v54 || v54 >= v21 && v40 < *((_DWORD *)v20 - 1))
                  break;
                v20 -= 2;
              }
            }
            i = (float *)a4;
            if ((unint64_t)v20 > a4)
            {
              for (i = (float *)(a4 + 8); v21 < v41 || v41 >= v21 && v40 < *((_DWORD *)i - 1); i += 2)
              {
                v46 = *i;
                v41 = v46;
              }
            }
            if (i >= v20)
            {
              v47 = v20;
            }
            else
            {
              v47 = v20;
              do
              {
                v48 = *((_DWORD *)v47 - 2);
                v47 -= 2;
                *v47 = *(i - 2);
                *((_DWORD *)i - 2) = v48;
                v49 = *((_DWORD *)v47 + 1);
                v47[1] = *(i - 1);
                *((_DWORD *)i - 1) = v49;
                v50 = *(v47 - 2);
                if (v21 >= v50)
                {
                  v51 = v20 - 6;
                  do
                  {
                    if (v50 >= v21 && v40 < *((_DWORD *)v51 + 3))
                      break;
                    v52 = *v51;
                    v51 -= 2;
                    v50 = v52;
                  }
                  while (v21 >= v52);
                  v47 = v51 + 4;
                }
                do
                {
                  do
                  {
                    i += 2;
                    v53 = *(i - 2);
                  }
                  while (v21 < v53);
                }
                while (v53 >= v21 && v40 < *((_DWORD *)i - 1));
                v20 = v47;
              }
              while (i < v47);
            }
            if (v47 + 2 != (float *)a2)
            {
              *(float *)(a2 - 8) = *v47;
              *(float *)(a2 - 4) = v47[1];
            }
            a6 = 0;
            *v47 = v21;
            *((_DWORD *)v47 + 1) = v40;
            a2 = (uint64_t)v47;
          }
          continue;
        }
        v59 = a2 - 8;
        v61 = a2 == a4 || v59 == a4;
        if ((a6 & 1) == 0)
        {
          if (v61)
            return;
          v123 = a2 - 4;
          v124 = a2 - 8;
          while (1)
          {
            v125 = *(float *)(v124 - 8);
            v124 -= 8;
            v126 = v125;
            v127 = *(float *)v59;
            if (v125 < *(float *)v59)
              break;
            if (v127 >= v126)
            {
              v128 = *(_DWORD *)(v59 - 4);
              if (v128 < *(_DWORD *)(v59 + 4))
                goto LABEL_187;
            }
LABEL_195:
            v123 -= 8;
            v59 = v124;
            if (v124 == a4)
              return;
          }
          v128 = *(_DWORD *)(v59 - 4);
LABEL_187:
          for (j = v123; ; j += 8)
          {
            *(float *)(j - 12) = v127;
            *(_DWORD *)(j - 8) = *(_DWORD *)j;
            v127 = *(float *)(j + 4);
            if (v126 >= v127 && (v127 < v126 || v128 >= *(_DWORD *)(j + 8)))
              break;
          }
          *(float *)(j - 4) = v126;
          *(_DWORD *)j = v128;
          goto LABEL_195;
        }
        if (v61)
          return;
        v62 = 0;
        v63 = a2 - 8;
        do
        {
          v64 = v59 + 8;
          v65 = *(float *)v59;
          v66 = *(float *)(v63 - 8);
          v63 -= 8;
          v67 = v66;
          if (v66 >= *(float *)v59)
          {
            if (v65 < v67)
              goto LABEL_122;
            v68 = *(_DWORD *)(v59 - 4);
            v69 = *(_DWORD *)(v59 + 4);
            if (v68 >= v69)
              goto LABEL_122;
          }
          else
          {
            v68 = *(_DWORD *)(v59 - 4);
            v69 = *(_DWORD *)(v59 + 4);
          }
          *(float *)(v59 - 8) = v65;
          *(_DWORD *)(v59 - 4) = v69;
          v70 = a2;
          if (v64 == a2)
            goto LABEL_121;
          v71 = v62;
          v70 = v64;
          while (1)
          {
            v72 = *(float *)(a2 + v71);
            if (v67 >= v72)
              break;
            v73 = *(_DWORD *)(a2 + v71 + 4);
LABEL_115:
            v70 += 8;
            v74 = a2 + v71;
            *(float *)(v74 - 8) = v72;
            *(_DWORD *)(v74 - 4) = v73;
            v71 += 8;
            if (!v71)
            {
              v70 = a2;
              goto LABEL_121;
            }
          }
          if (v72 < v67)
            goto LABEL_121;
          v73 = *(_DWORD *)(a2 + v71 + 4);
          if (v68 < v73)
            goto LABEL_115;
          v70 = a2 + v71;
LABEL_121:
          *(float *)(v70 - 8) = v67;
          *(_DWORD *)(v70 - 4) = v68;
LABEL_122:
          v62 -= 8;
          v59 = v63;
        }
        while (v63 != a4);
        return;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  float v11;
  int v12;
  int v13;
  float v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float v20;
  int v21;

  v6 = *(float *)(a4 - 8);
  v7 = *(float *)(a2 - 8);
  if (v6 >= v7 && (v7 < v6 || *(_DWORD *)(a4 - 4) >= *(_DWORD *)(a2 - 4)))
  {
    v11 = *(float *)(a6 - 8);
    if (v11 >= v6)
    {
      if (v6 < v11)
        return;
      v13 = *(_DWORD *)(a6 - 4);
      v12 = *(_DWORD *)(a4 - 4);
      if (v13 >= v12)
        return;
    }
    else
    {
      v12 = *(_DWORD *)(a4 - 4);
      v13 = *(_DWORD *)(a6 - 4);
    }
    *(float *)(a4 - 8) = v11;
    *(float *)(a6 - 8) = v6;
    *(_DWORD *)(a4 - 4) = v13;
    *(_DWORD *)(a6 - 4) = v12;
    v14 = *(float *)(a4 - 8);
    v15 = *(float *)(a2 - 8);
    if (v14 >= v15)
    {
      if (v15 < v14)
        return;
      v17 = *(_DWORD *)(a4 - 4);
      v16 = *(_DWORD *)(a2 - 4);
      if (v17 >= v16)
        return;
    }
    else
    {
      v16 = *(_DWORD *)(a2 - 4);
      v17 = *(_DWORD *)(a4 - 4);
    }
    *(float *)(a2 - 8) = v14;
    *(float *)(a4 - 8) = v15;
    *(_DWORD *)(a2 - 4) = v17;
    *(_DWORD *)(a4 - 4) = v16;
    return;
  }
  v8 = *(float *)(a6 - 8);
  if (v8 < v6)
  {
    v9 = *(_DWORD *)(a6 - 4);
LABEL_6:
    *(float *)(a2 - 8) = v8;
    *(float *)(a6 - 8) = v7;
    v10 = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 4) = v9;
    *(_DWORD *)(a6 - 4) = v10;
    return;
  }
  if (v6 >= v8)
  {
    v9 = *(_DWORD *)(a6 - 4);
    v18 = *(_DWORD *)(a4 - 4);
    if (v9 < v18)
      goto LABEL_6;
  }
  else
  {
    v18 = *(_DWORD *)(a4 - 4);
  }
  *(float *)(a2 - 8) = v6;
  *(float *)(a4 - 8) = v7;
  v19 = *(_DWORD *)(a2 - 4);
  *(_DWORD *)(a2 - 4) = v18;
  *(_DWORD *)(a4 - 4) = v19;
  v20 = *(float *)(a6 - 8);
  if (v20 < v7)
  {
    v21 = *(_DWORD *)(a6 - 4);
LABEL_24:
    *(float *)(a4 - 8) = v20;
    *(float *)(a6 - 8) = v7;
    *(_DWORD *)(a4 - 4) = v21;
    *(_DWORD *)(a6 - 4) = v19;
    return;
  }
  if (v7 >= v20)
  {
    v21 = *(_DWORD *)(a6 - 4);
    if (v21 < v19)
      goto LABEL_24;
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  float v7;
  float v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  float v22;
  int v23;
  uint64_t v24;
  char v25;

  v6 = 1;
  switch((a2 - a4) >> 3)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      v7 = *(float *)a4;
      v8 = *(float *)(a2 - 8);
      if (*(float *)a4 >= v8)
      {
        if (v8 < v7)
          return v6 & 1;
        v10 = *(_DWORD *)(a4 + 4);
        v9 = *(_DWORD *)(a2 - 4);
        if (v10 >= v9)
          goto LABEL_25;
      }
      else
      {
        v9 = *(_DWORD *)(a2 - 4);
        v10 = *(_DWORD *)(a4 + 4);
      }
      *(float *)(a2 - 8) = v7;
      *(float *)a4 = v8;
      *(_DWORD *)(a2 - 4) = v10;
      v6 = 1;
      *(_DWORD *)(a4 + 4) = v9;
      return v6 & 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a3, a4 + 8);
      goto LABEL_25;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, a4 + 8);
      goto LABEL_25;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, a4 + 8);
LABEL_25:
      v6 = 1;
      return v6 & 1;
    default:
      v11 = a2 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16);
      v13 = a2 - 24;
      if (a2 - 24 == a4)
        goto LABEL_26;
      v12 = 0;
      v14 = 0;
      v15 = a2 - 24;
      break;
  }
  do
  {
    v16 = *(float *)(v15 - 8);
    v15 -= 8;
    v17 = v16;
    v18 = *(float *)(v11 - 8);
    if (v16 >= v18)
    {
      if (v18 < v17)
        goto LABEL_19;
      v19 = *(_DWORD *)(v13 - 4);
      v20 = *(_DWORD *)(v11 - 4);
      if (v19 >= v20)
        goto LABEL_19;
    }
    else
    {
      v19 = *(_DWORD *)(v13 - 4);
      v20 = *(_DWORD *)(v11 - 4);
    }
    *(float *)(v13 - 8) = v18;
    *(_DWORD *)(v13 - 4) = v20;
    if (v11 == a2)
    {
LABEL_17:
      v11 = a2;
      goto LABEL_18;
    }
    v21 = v12;
    while (1)
    {
      v22 = *(float *)(a2 + v21 - 16);
      if (v17 >= v22)
        break;
      v23 = *(_DWORD *)(a2 + v21 - 12);
LABEL_16:
      v11 += 8;
      v24 = a2 + v21;
      *(float *)(v24 - 24) = v22;
      *(_DWORD *)(v24 - 20) = v23;
      v21 += 8;
      if (v21 == 16)
        goto LABEL_17;
    }
    if (v22 >= v17)
    {
      v23 = *(_DWORD *)(a2 + v21 - 12);
      if (v19 >= v23)
        goto LABEL_18;
      goto LABEL_16;
    }
    v11 = a2 + v21 - 16;
LABEL_18:
    *(float *)(v11 - 8) = v17;
    *(_DWORD *)(v11 - 4) = v19;
    if (++v14 == 8)
    {
      v25 = 0;
      LOBYTE(v12) = v15 == a4;
      goto LABEL_31;
    }
LABEL_19:
    v12 -= 8;
    v11 = v13;
    v13 = v15;
  }
  while (v15 != a4);
LABEL_26:
  v25 = 1;
LABEL_31:
  v6 = v25 | v12;
  return v6 & 1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v12;
  float v13;
  int v14;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  float v20;
  float v21;
  int v22;
  int v23;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a3, a4, a5, a6);
  v12 = *(float *)(a8 - 8);
  v13 = *(float *)(a6 - 8);
  if (v12 >= v13)
  {
    if (v13 < v12)
      return;
    v15 = *(_DWORD *)(a8 - 4);
    v14 = *(_DWORD *)(a6 - 4);
    if (v15 >= v14)
      return;
  }
  else
  {
    v14 = *(_DWORD *)(a6 - 4);
    v15 = *(_DWORD *)(a8 - 4);
  }
  *(float *)(a6 - 8) = v12;
  *(float *)(a8 - 8) = v13;
  *(_DWORD *)(a6 - 4) = v15;
  *(_DWORD *)(a8 - 4) = v14;
  v16 = *(float *)(a6 - 8);
  v17 = *(float *)(a4 - 8);
  if (v16 >= v17)
  {
    if (v17 < v16)
      return;
    v19 = *(_DWORD *)(a6 - 4);
    v18 = *(_DWORD *)(a4 - 4);
    if (v19 >= v18)
      return;
  }
  else
  {
    v18 = *(_DWORD *)(a4 - 4);
    v19 = *(_DWORD *)(a6 - 4);
  }
  *(float *)(a4 - 8) = v16;
  *(float *)(a6 - 8) = v17;
  *(_DWORD *)(a4 - 4) = v19;
  *(_DWORD *)(a6 - 4) = v18;
  v20 = *(float *)(a4 - 8);
  v21 = *(float *)(a2 - 8);
  if (v20 < v21)
  {
    v22 = *(_DWORD *)(a2 - 4);
    v23 = *(_DWORD *)(a4 - 4);
LABEL_15:
    *(float *)(a2 - 8) = v20;
    *(float *)(a4 - 8) = v21;
    *(_DWORD *)(a2 - 4) = v23;
    *(_DWORD *)(a4 - 4) = v22;
    return;
  }
  if (v21 >= v20)
  {
    v23 = *(_DWORD *)(a4 - 4);
    v22 = *(_DWORD *)(a2 - 4);
    if (v23 < v22)
      goto LABEL_15;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  float v19;
  int v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  float v27;
  int v28;
  int v29;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<float,int> *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(float *)(a10 - 8);
  v15 = *(float *)(a8 - 8);
  if (v14 >= v15)
  {
    if (v15 < v14)
      return;
    v17 = *(_DWORD *)(a10 - 4);
    v16 = *(_DWORD *)(a8 - 4);
    if (v17 >= v16)
      return;
  }
  else
  {
    v16 = *(_DWORD *)(a8 - 4);
    v17 = *(_DWORD *)(a10 - 4);
  }
  *(float *)(a8 - 8) = v14;
  *(float *)(a10 - 8) = v15;
  *(_DWORD *)(a8 - 4) = v17;
  *(_DWORD *)(a10 - 4) = v16;
  v18 = *(float *)(a8 - 8);
  v19 = *(float *)(a6 - 8);
  if (v18 >= v19)
  {
    if (v19 < v18)
      return;
    v21 = *(_DWORD *)(a8 - 4);
    v20 = *(_DWORD *)(a6 - 4);
    if (v21 >= v20)
      return;
  }
  else
  {
    v20 = *(_DWORD *)(a6 - 4);
    v21 = *(_DWORD *)(a8 - 4);
  }
  *(float *)(a6 - 8) = v18;
  *(float *)(a8 - 8) = v19;
  *(_DWORD *)(a6 - 4) = v21;
  *(_DWORD *)(a8 - 4) = v20;
  v22 = *(float *)(a6 - 8);
  v23 = *(float *)(a4 - 8);
  if (v22 >= v23)
  {
    if (v23 < v22)
      return;
    v25 = *(_DWORD *)(a6 - 4);
    v24 = *(_DWORD *)(a4 - 4);
    if (v25 >= v24)
      return;
  }
  else
  {
    v24 = *(_DWORD *)(a4 - 4);
    v25 = *(_DWORD *)(a6 - 4);
  }
  *(float *)(a4 - 8) = v22;
  *(float *)(a6 - 8) = v23;
  *(_DWORD *)(a4 - 4) = v25;
  *(_DWORD *)(a6 - 4) = v24;
  v26 = *(float *)(a4 - 8);
  v27 = *(float *)(a2 - 8);
  if (v26 < v27)
  {
    v28 = *(_DWORD *)(a2 - 4);
    v29 = *(_DWORD *)(a4 - 4);
LABEL_9:
    *(float *)(a2 - 8) = v26;
    *(float *)(a4 - 8) = v27;
    *(_DWORD *)(a2 - 4) = v29;
    *(_DWORD *)(a4 - 4) = v28;
    return;
  }
  if (v27 >= v26)
  {
    v29 = *(_DWORD *)(a4 - 4);
    v28 = *(_DWORD *)(a2 - 4);
    if (v29 < v28)
      goto LABEL_9;
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1D4FC8E08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FC8E80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FC8EF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1D4FC916C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

__n128 std::vector<int>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

std::vector<int> *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(std::vector<int> *__c, std::vector<int> *a2, std::vector<int> *this)
{
  __n128 *v5;

  if (__c != a2)
  {
    v5 = (__n128 *)__c;
    do
    {
      std::vector<int>::__move_assign((uint64_t)this, v5);
      v5 = (__n128 *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != (__n128 *)a2);
  }
  return this;
}

id CROSLogForCategory(int a1)
{
  if (CROSLogForCategory_onceToken != -1)
    dispatch_once(&CROSLogForCategory_onceToken, &__block_literal_global_1);
  return (id)CROSLogForCategory_logObjects[a1];
}

void sub_1D4FC9CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_1D4FCA458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  _QWORD **v53;
  uint64_t v54;
  _QWORD **v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  _QWORD **v60;
  void *v62;
  void *v63;

  std::__tree<CRCHuint128>::destroy(v58, *v55);
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(v57, *v53);
  CRCHSymbolMap::~CRCHSymbolMap(a11);
  v62 = *(void **)(v54 + 112);
  if (v62)
  {
    *(_QWORD *)(v54 + 120) = v62;
    operator delete(v62);
  }
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  std::__tree<CRCHuint128>::destroy(a12, *v60);
  v63 = *v59;
  if (*v59)
  {
    *(_QWORD *)(v54 + 48) = v63;
    operator delete(v63);
  }
  if (*(char *)(v54 + 31) < 0)
    operator delete(*v56);
  MEMORY[0x1D826E294](v54, 0x10F2C40A9BC773BLL);
  _Unwind_Resume(a1);
}

void NetworkEdge::NetworkEdge(NetworkEdge *this, const NetworkEdge *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
}

_QWORD *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FCA668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CRCHSymbolMap::~CRCHSymbolMap(char **this)
{
  void **v2;

  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((uint64_t)(this + 4), this[5]);
  v2 = (void **)(this + 1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void CRCHSymbolMap::CRCHSymbolMap(CRCHSymbolMap *this)
{
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  *(_QWORD *)this = &unk_1E98D8C80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  std::string::basic_string[abi:ne180100]<0>(v4, ",");
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  CRCHSymbolMap::store(this, (__int128 *)v4);
  CRCHSymbolMap::store(this, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1D4FCA844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  char **v21;

  if (a20 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(v20, *v21);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CRCHSymbolMap::store(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v12;

  v4 = a1[1];
  v6 = a1[2];
  v5 = a1 + 1;
  v7 = (uint64_t **)(a1 + 4);
  if (a1 + 5 == (_QWORD *)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)(a1 + 4), (const void **)a2))
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v4) >> 3);
    v12 = a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12)[7] = v8;
    v9 = a1[2];
    if (v9 >= a1[3])
    {
      v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, a2);
      v10 = v9 + 24;
    }
    a1[2] = v10;
  }
  else
  {
    v12 = a2;
    return std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12)[7];
  }
  return v8;
}

uint64_t CRCHSymbolMap::store(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v11;

  v6 = (uint64_t **)(a1 + 32);
  if (a1 + 40 == std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(a1 + 32, (const void **)a2))
  {
    v11 = a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v11)[7] = a3;
    v7 = (uint64_t *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 >= *(_QWORD *)(a1 + 24))
    {
      v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, a2);
      v9 = v8 + 24;
    }
    *(_QWORD *)(a1 + 16) = v9;
  }
  else
  {
    v11 = a2;
    return std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v11)[7];
  }
  return a3;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1D4FCACEC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1D4FCAE34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1D4FCAF48(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__tree<CRCHuint128>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<CRCHuint128>::destroy(a1, *a2);
    std::__tree<CRCHuint128>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(a1, a2[1]);
    std::__tree<CRCHuint128>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<NetworkEdge>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<NetworkEdge>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void CRCHNetwork::~CRCHNetwork(CRCHNetwork *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::__tree<CRCHuint128>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  v4 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 88);
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<CRCHuint128>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

BOOL pathForResource(const char *a1, const char *a2, UInt8 *a3)
{
  char *v5;
  char *v6;
  const __CFAllocator *v7;
  const __CFString *v8;
  const __CFString *v9;
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v11;
  _BOOL8 v12;
  char *__lasts;

  if (!a1)
    return 0;
  v5 = strdup(a1);
  __lasts = 0;
  v6 = strtok_r(v5, ".", &__lasts);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 0x8000100u);
  if (!__lasts)
  {
    v9 = 0;
    if (!a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v9 = CFStringCreateWithCString(v7, __lasts, 0x8000100u);
  if (a2)
LABEL_4:
    a2 = (const char *)CFStringCreateWithCString(v7, a2, 0x8000100u);
LABEL_5:
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.TextRecognition"));
  v11 = CFBundleCopyResourceURL(BundleWithIdentifier, v8, v9, (CFStringRef)a2);
  v12 = CFURLGetFileSystemRepresentation(v11, 1u, a3, 1024) != 0;
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (a2)
    CFRelease(a2);
  if (v11)
    CFRelease(v11);
  free(v5);
  return v12;
}

uint64_t firstMatchingResourceForLocale(NSLocale *a1, NSString *a2, NSString *a3, UInt8 *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = rankedCandidateIdentifiersForLocale(a1);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = *(_QWORD *)v15;
LABEL_3:
  v11 = 0;
  while (1)
  {
    if (*(_QWORD *)v15 != v10)
      objc_enumerationMutation(v7);
    v12 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11);
    if (pathForResource(-[NSString UTF8String](-[NSString stringByAppendingPathExtension:](-[NSString stringByAppendingString:](a2, "stringByAppendingString:", v12), "stringByAppendingPathExtension:", a3), "UTF8String"), 0, a4))
    {
      return v12;
    }
    if (v9 == ++v11)
    {
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v9)
        goto LABEL_3;
      return 0;
    }
  }
}

void *rankedCandidateIdentifiersForLocale(NSLocale *a1)
{
  NSString *v2;
  NSString *v3;
  NSString *v4;
  void *v5;
  BOOL v6;
  int v7;

  v2 = -[NSString lowercaseString](-[NSLocale languageCode](a1, "languageCode"), "lowercaseString");
  v3 = -[NSString capitalizedString](-[NSLocale scriptCode](a1, "scriptCode"), "capitalizedString");
  v4 = -[NSString uppercaseString](-[NSLocale countryCode](a1, "countryCode"), "uppercaseString");
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (v7 == 1 && v4 != 0)
    objc_msgSend(v5, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@_%@"), v2, v3, v4));
  if (v2 && v4)
    objc_msgSend(v5, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), v2, v4));
  if (v7)
  {
    objc_msgSend(v5, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v2, v3));
LABEL_18:
    objc_msgSend(v5, "addObject:", v2);
    return v5;
  }
  if (v2)
    goto LABEL_18;
  return v5;
}

void *NSStringFromUInt32Ptr(unsigned int *a1, uint64_t a2, _NSRange a3)
{
  NSUInteger length;
  NSUInteger location;
  void *v7;
  NSUInteger v8;
  int v9;

  if (!a1)
    return 0;
  length = a3.length;
  location = a3.location;
  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  if (a2 && length)
  {
    v8 = 0;
    do
    {
      v9 = a1[v8];
      if (v9 == 1)
      {
        ++location;
      }
      else if (location <= v8 && location + length > v8)
      {
        objc_msgSend(v7, "appendString:", CH_unicodeToNSString(v9));
      }
      ++v8;
    }
    while (a2 != v8);
  }
  return v7;
}

uint64_t CH_unicodeToNSString(int a1)
{
  unsigned int v1;
  uint64_t v2;
  _WORD v4[2];

  if ((a1 - 0x10000) >> 20)
  {
    v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    v1 = ((a1 + 67043328) >> 10) - 10240;
    v4[1] = a1 & 0x3FF | 0xDC00;
    v2 = 2;
  }
  v4[0] = v1;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", v4, v2);
}

void *createUInt32PtrWithNSString(NSString *a1, NSUInteger a2, uint64_t a3, unint64_t *a4, BOOL *a5)
{
  NSUInteger v10;
  void *v11;
  int v12;
  NSUInteger v13;
  uint64_t v14;
  _QWORD v16[10];
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v10 = -[NSString lengthOfBytesUsingEncoding:](a1, "lengthOfBytesUsingEncoding:", 2348810496);
  v11 = 0;
  *a4 = 0;
  *a5 = 0;
  if (v10 >> 2 < a2)
    a2 = v10 >> 2;
  if (v10 >= 4 && a2)
  {
    v18 = 0;
    v19 = &v18;
    v20 = 0x2020000000;
    v21 = 0;
    v21 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
    if ((a3 & 0x100) != 0)
    {
      *((_DWORD *)v23 + 6) = a2 - 1;
      v12 = -1;
    }
    else
    {
      v12 = 1;
    }
    v13 = -[NSString length](a1, "length");
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___Z27createUInt32PtrWithNSStringP8NSStringmmRmRb_block_invoke;
    v16[3] = &unk_1E98D9CB0;
    v16[6] = a3;
    v16[7] = a2;
    v16[4] = &v22;
    v16[5] = &v18;
    v17 = v12;
    v16[8] = a4;
    v16[9] = a5;
    -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v13, a3, v16);
    v14 = *a4;
    if (*a4)
    {
      v11 = (void *)v19[3];
      if (a2 == v14)
      {
LABEL_13:
        _Block_object_dispose(&v18, 8);
        goto LABEL_14;
      }
      v11 = malloc_type_realloc((void *)v19[3], 4 * v14, 0x100004052888210uLL);
    }
    else
    {
      free((void *)v19[3]);
      v11 = 0;
    }
    v19[3] = (uint64_t)v11;
    goto LABEL_13;
  }
LABEL_14:
  _Block_object_dispose(&v22, 8);
  return v11;
}

void sub_1D4FCBA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z27createUInt32PtrWithNSStringP8NSStringmmRmRb_block_invoke(uint64_t result, NSString *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  _BYTE *v10;

  v9 = result;
  if ((*(_BYTE *)(result + 49) & 1) == 0
    && *(_QWORD *)(result + 56) <= (unint64_t)*(int *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    goto LABEL_10;
  }
  if (a4 > 2)
  {
    **(_BYTE **)(result + 72) = 1;
    v10 = a7;
    goto LABEL_7;
  }
  result = CH_NSStringToUnicode(a2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) + 24)
            + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 24)) = result;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 24) += *(_DWORD *)(v9 + 80);
  ++**(_QWORD **)(v9 + 64);
  if (a4 == 2)
  {
    v10 = *(_BYTE **)(v9 + 72);
LABEL_7:
    *v10 = 1;
  }
  if ((*(_BYTE *)(v9 + 49) & 1) != 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 24) & 0x80000000) != 0)
LABEL_10:
    *a7 = 1;
  return result;
}

uint64_t CH_NSStringToUnicode(NSString *a1)
{
  unsigned int v3;
  int v4;

  if (-[NSString length](a1, "length") == 1)
    return -[NSString characterAtIndex:](a1, "characterAtIndex:", 0);
  if (-[NSString length](a1, "length") != 2)
    return 0;
  v3 = -[NSString characterAtIndex:](a1, "characterAtIndex:", 0);
  v4 = -[NSString characterAtIndex:](a1, "characterAtIndex:", 1);
  if ((v4 & 0xFFF0) == 0xFE00)
    return v3;
  else
    return (int)(v4 + (v3 << 10) - 56613888);
}

uint64_t createUInt32PtrFromCharacterAtIndex(unint64_t a1, NSString *a2, unint64_t *a3, BOOL *a4)
{
  uint64_t v8;
  NSUInteger v9;
  _QWORD v11[9];
  _QWORD v12[4];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  *a3 = 0;
  *a4 = 0;
  v8 = 0;
  if (-[NSString length](a2, "length") > a1)
  {
    if (-[NSString length](a2, "length"))
    {
      v13 = 0;
      v14 = &v13;
      v15 = 0x2020000000;
      v16 = 0;
      v16 = operator new[]();
      v12[0] = 0;
      v12[1] = v12;
      v12[2] = 0x2020000000;
      v12[3] = 0;
      v9 = -[NSString length](a2, "length");
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___Z35createUInt32PtrFromCharacterAtIndexmP8NSStringRmRb_block_invoke;
      v11[3] = &unk_1E98D9CD8;
      v11[4] = v12;
      v11[5] = &v13;
      v11[6] = a1;
      v11[7] = a3;
      v11[8] = a4;
      -[NSString enumerateSubstringsInRange:options:usingBlock:](a2, "enumerateSubstringsInRange:options:usingBlock:", 0, v9, 2, v11);
      v8 = v14[3];
      if (!*a3)
      {
        free((void *)v14[3]);
        v8 = 0;
        v14[3] = 0;
      }
      _Block_object_dispose(v12, 8);
      _Block_object_dispose(&v13, 8);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_1D4FCBD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z35createUInt32PtrFromCharacterAtIndexmP8NSStringRmRb_block_invoke(uint64_t result, NSString *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;

  v7 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 == *(_QWORD *)(result + 48))
  {
    v11 = result;
    if (a4 > 2
      || (result = CH_NSStringToUnicode(a2),
          **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 24) = result,
          **(_QWORD **)(v11 + 56) = 1,
          a4 == 2))
    {
      **(_BYTE **)(v11 + 64) = 1;
    }
    *a7 = 1;
    v7 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
    v8 = *(_QWORD *)(v7 + 24);
  }
  *(_QWORD *)(v7 + 24) = v8 + 1;
  return result;
}

uint64_t halfWidthToFullWidthCode(uint64_t result)
{
  if ((result - 33) < 0xF
    || (result - 91) <= 0x23 && ((1 << (result - 91)) & 0xF0000003FLL) != 0
    || (result - 58) < 6)
  {
    if ((_DWORD)result == 46)
      return 12290;
    else
      return (result + 65248);
  }
  return result;
}

uint64_t characterCount(NSString *a1)
{
  NSUInteger v2;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = -[NSString length](a1, "length");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___Z14characterCountP8NSString_block_invoke;
  v5[3] = &unk_1E98D9D00;
  v5[4] = &v6;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 2, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D4FCBEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z14characterCountP8NSString_block_invoke(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

id uppercaseFirstCharacter(NSString *a1)
{
  NSUInteger v2;
  id v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  uint64_t v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3052000000;
  v9 = __Block_byref_object_copy__0;
  v10 = __Block_byref_object_dispose__0;
  v11 = 0;
  v11 = -[NSString mutableCopy](a1, "mutableCopy");
  v2 = -[NSString length](a1, "length");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___Z23uppercaseFirstCharacterP8NSString_block_invoke;
  v5[3] = &unk_1E98D9D00;
  v5[4] = &v6;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 2, v5);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D4FCBFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t ___Z23uppercaseFirstCharacterP8NSString_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "replaceCharactersInRange:withString:", a3, a4, objc_msgSend(a2, "uppercaseString"));
  *a7 = 1;
  return result;
}

id lastWordInString(NSString *a1)
{
  NSUInteger v2;
  id v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  uint64_t v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3052000000;
  v9 = __Block_byref_object_copy__0;
  v10 = __Block_byref_object_dispose__0;
  v11 = 0;
  v2 = -[NSString length](a1, "length");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___Z16lastWordInStringP8NSString_block_invoke;
  v5[3] = &unk_1E98D9D00;
  v5[4] = &v6;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](a1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 1283, v5);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D4FCC138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z16lastWordInStringP8NSString_block_invoke(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v8;

  if (a3 == a5 && a4 == a6)
  {
    v8 = result;
    result = objc_msgSend(a2, "copy");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8) + 40) = result;
  }
  *a7 = 1;
  return result;
}

unint64_t editDistance(NSString *a1, NSString *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  BOOL v7[2];
  unint64_t v8;
  unint64_t v9;

  v8 = 0;
  v9 = 0;
  *(_WORD *)v7 = 0;
  v3 = (unsigned int *)createUInt32PtrWithNSString(a1, -[NSString length](a1, "length"), 2, &v9, &v7[1]);
  v4 = (unsigned int *)createUInt32PtrWithNSString(a2, -[NSString length](a2, "length"), 2, &v8, v7);
  v5 = editDistance(v3, v9, v4, v8);
  free(v3);
  free(v4);
  return v5;
}

unint64_t editDistance(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t **v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  void *__p;
  _BYTE *v33;
  unint64_t **v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t ***v37;
  char v38;

  if (!a2 || !a4)
    return a4 + a2;
  v8 = a2 + 1;
  v9 = a2 == -1;
  v10 = a4 + 1;
  std::vector<unsigned long>::vector(&__p, a4 + 1);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = &v34;
  v38 = 0;
  if (!v9)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](&v34, a2 + 1);
    v11 = v35;
    v12 = &v35[3 * v8];
    v13 = 24 * a2 + 24;
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, __p, (uint64_t)v33, (v33 - (_BYTE *)__p) >> 3);
      v11 += 3;
      v13 -= 24;
    }
    while (v13);
    v35 = v12;
  }
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  v14 = v34;
  if (a2 != -1)
  {
    v15 = 0;
    do
    {
      v16 = *v14;
      v14 += 3;
      *v16 = v15++;
    }
    while (v8 != v15);
    v14 = v34;
  }
  if (a4 != -1)
  {
    v17 = 0;
    v18 = *v14;
    do
    {
      v18[v17] = v17;
      ++v17;
    }
    while (v10 != v17);
    v14 = v34;
  }
  v19 = 2;
  if (v10 <= 2)
    v20 = 2;
  else
    v20 = a4 + 1;
  if (v8 > 2)
    v19 = a2 + 1;
  v21 = *v14;
  v22 = v20 - 1;
  v23 = 1;
  do
  {
    v24 = 0;
    v25 = a1[v23 - 1];
    v26 = v14[3 * v23];
    v27 = *v26;
    do
    {
      v28 = fmin((double)(v21[v24 + 1] + 1), (double)(v27 + 1));
      if (v25 == a3[v24])
        v29 = v21[v24];
      else
        v29 = v21[v24] + 1;
      v27 = (unint64_t)fmin((double)(unint64_t)v28, (double)(unint64_t)v29);
      v26[++v24] = v27;
    }
    while (v22 != v24);
    ++v23;
    v21 = v26;
  }
  while (v23 != v19);
  v30 = v14[3 * a2][a4];
  __p = &v34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v30;
}

void sub_1D4FCC42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t isMixedCaseString(NSString *a1)
{
  if (-[NSString isEqualToString:](a1, "isEqualToString:", -[NSString lowercaseString](a1, "lowercaseString"))
    || -[NSString isEqualToString:](a1, "isEqualToString:", -[NSString uppercaseString](a1, "uppercaseString")))
  {
    return 0;
  }
  else
  {
    return -[NSString isEqualToString:](a1, "isEqualToString:", -[NSString capitalizedString](a1, "capitalizedString")) ^ 1;
  }
}

void *tokenRangesForString(__CFString *a1, NSLocale *a2)
{
  void *v4;
  const __CFAllocator *v5;
  __CFStringTokenizer *v6;
  CFRange CurrentTokenRange;
  CFRange v9;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (qword_1ED0B4340 != -1)
    dispatch_once(&qword_1ED0B4340, &__block_literal_global_2);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9.length = -[__CFString length](a1, "length");
  v9.location = 0;
  v6 = CFStringTokenizerCreate(v5, a1, v9, 4uLL, (CFLocaleRef)a2);
  while (CFStringTokenizerAdvanceToNextToken(v6))
  {
    CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v6);
    if (-[__CFString rangeOfCharacterFromSet:options:range:](a1, "rangeOfCharacterFromSet:options:range:", _MergedGlobals_9, 2, CurrentTokenRange.location, CurrentTokenRange.length) != 0x7FFFFFFFFFFFFFFFLL)objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", CurrentTokenRange.location, CurrentTokenRange.length));
  }
  CFRelease(v6);
  return v4;
}

id ___Z20tokenRangesForStringP8NSStringP8NSLocale_block_invoke()
{
  id result;

  result = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet"), "invertedSet");
  _MergedGlobals_9 = (uint64_t)result;
  return result;
}

double ratioHorizontalOverlapOfSubjectToReferenceRect(CGRect a1, CGRect a2)
{
  CGFloat width;
  CGFloat x;
  double v4;
  CGFloat v5;
  double v6;
  uint64_t v7;
  double v8;
  double MinX;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  width = a2.size.width;
  x = a2.origin.x;
  v4 = a1.size.width;
  v5 = a1.origin.x;
  if (a1.size.width == 0.0)
  {
    v6 = 0.0;
    v7 = 0;
    v8 = 1.0;
    MinX = CGRectGetMinX(a1);
    v16.origin.y = 0.0;
    v16.size.height = 1.0;
    v16.origin.x = x;
    v16.size.width = width;
    if (MinX >= CGRectGetMinX(v16))
    {
      v17.origin.y = 0.0;
      v17.size.height = 1.0;
      v17.origin.x = v5;
      v17.size.width = v4;
      v10 = CGRectGetMinX(v17);
      v18.origin.y = 0.0;
      v18.size.height = 1.0;
      v18.origin.x = x;
      v18.size.width = width;
      if (v10 <= CGRectGetMaxX(v18))
        return 1.0;
    }
  }
  else
  {
    v6 = 0.0;
    if (a2.size.width > 0.0)
    {
      v11 = 0;
      v12 = 1.0;
      v13 = 0;
      v14 = 1.0;
      v19 = CGRectIntersection(a1, a2);
      return v19.size.width / v4;
    }
  }
  return v6;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D4FCC758(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_1D4FCDB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1D4FCE1F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_1D4FCE3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D4FCE774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v47;

  objc_sync_exit(v47);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FCF0DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D4FCF69C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D4FCFD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1D4FCFE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D4FCFEF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD0058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1D4FD0220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD04A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D4FD056C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1D4FD0638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1D4FD06CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4FD073C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4FD07D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4FD0864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4FD08F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4FD095C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD0F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1D4FD1A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id CRCastAsClass<CRFormTextFieldOutputRegion>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_1D4FD1BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD1C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4FD1D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4FD1E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D4FD210C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D4FD2928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1D4FD2DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D4FD2EF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD32A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1D4FD36E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_1D4FD3EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D4FD42D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_1D4FD4480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FD469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4FD4800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FD49D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1D4FD4D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1D4FD4EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD5068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1D4FD511C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FD556C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FD563C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FD56C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FD5864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FD5920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD5AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1D4FD5CF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1D4FD5EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FD60CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FD632C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_1D4FD64A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD6800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1D4FD6D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void sub_1D4FD7334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D4FD767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1D4FD77B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FD7840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRLanguageCorrection;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D4FD80A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1D4FD83E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD858C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FD8A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1D4FD8C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FD90E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<BreakPoint>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E98D78D0, MEMORY[0x1E0DE42E0]);
}

void sub_1D4FD92E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void sub_1D4FD9558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::vector<CRCHLatticePath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)(v4 - 448));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CRCHLatticePath::~CRCHLatticePath(CRCHLatticePath *this)
{
  void *v2;
  void *v3;
  const void *v4;
  const void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 1) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 28);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 28) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 27);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 27) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 51);
  if (v6)
    operator delete(v6);
  v7 = (void *)*((_QWORD *)this + 48);
  if (v7)
    operator delete(v7);
  v8 = (void *)*((_QWORD *)this + 45);
  if (v8)
  {
    *((_QWORD *)this + 46) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 42);
  if (v9)
  {
    *((_QWORD *)this + 43) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 39);
  if (v10)
  {
    *((_QWORD *)this + 40) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 36);
  if (v11)
  {
    *((_QWORD *)this + 37) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 31);
  if (v12)
  {
    *((_QWORD *)this + 32) = v12;
    operator delete(v12);
  }

  v13 = (void *)*((_QWORD *)this + 11);
  if (v13)
  {
    *((_QWORD *)this + 12) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 8);
  if (v14)
  {
    *((_QWORD *)this + 9) = v14;
    operator delete(v14);
  }
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D4FD97D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  v4 = *result;
  v5 = *(double *)(a4 + 8 * *result);
  v6 = *a2;
  v7 = *(double *)(a4 + 8 * *a2);
  v8 = *a3;
  v9 = *(double *)(a4 + 8 * *a3);
  if (v5 >= v7)
  {
    if (v7 < v9)
    {
      *a2 = v8;
      *a3 = v6;
      v10 = *result;
      if (*(double *)(a4 + 8 * *result) < *(double *)(a4 + 8 * *a2))
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  else
  {
    if (v7 >= v9)
    {
      *result = v6;
      *a2 = v4;
      if (v5 >= *(double *)(a4 + 8 * *a3))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v8;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a1;
      v9 = *(a2 - 1);
      if (*(double *)(**a3 + 8 * *a1) < *(double *)(**a3 + 8 * v9))
      {
        *a1 = v9;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 1;
      v22 = a1 + 2;
      v23 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v24 = a1[3];
      v25 = **a3;
      v26 = *(a2 - 1);
      if (*(double *)(v25 + 8 * v24) < *(double *)(v25 + 8 * v26))
      {
        *v23 = v26;
        *(a2 - 1) = v24;
        v27 = *v22;
        v28 = *v23;
        v29 = *(double *)(v25 + 8 * *v23);
        if (*(double *)(v25 + 8 * *v22) < v29)
        {
          *v22 = v28;
          *v23 = v27;
          v30 = *v21;
          if (*(double *)(v25 + 8 * *v21) < v29)
          {
            a1[1] = v28;
            a1[2] = v30;
            v31 = *a1;
            if (*(double *)(v25 + 8 * *a1) < v29)
            {
              *a1 = v28;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v10;
    v16 = *v11;
    v17 = *(double *)(v13 + 8 * *v11);
    if (*(double *)(v13 + 8 * *v10) < v17)
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v15;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v15 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (*(double *)(v13 + 8 * v15) >= v17)
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v16;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRLanguageCorrection correctTextFeature:inImage:withTextPieces:withMaxWidthPerRegion:withMedianCharSpacing:withBreakpoints:segmenter:options:numCharCandidates:downscaleSpaceRatio:latticePresetIdx:latticeResults:]::$_1 &,unsigned long *>(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  if (*(double *)(v12 + 8 * *a3) < *(double *)(v12 + 8 * *a4))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(double *)(v12 + 8 * *a2) < *(double *)(v12 + 8 * *a3))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(double *)(v12 + 8 * *a1) < *(double *)(v12 + 8 * *a2))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void sub_1D4FDA73C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D4FDA814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1D4FDA9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FDAB9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D4FDB5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FDBDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_1D4FDC8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FDD3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDD444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRTextRecognizerModelEspressoInput;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D4FDD594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDD714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDD938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4FDDA88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDE1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FDE4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *__copy_helper_block_ea8_56c59_ZTSNSt3__16vectorI17espresso_buffer_tNS_9allocatorIS1_EEEE80c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<espresso_buffer_t>::__init_with_size[abi:ne180100]<espresso_buffer_t*,espresso_buffer_t*>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:ne180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>((char *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
}

void sub_1D4FDE564(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_56c59_ZTSNSt3__16vectorI17espresso_buffer_tNS_9allocatorIS1_EEEE80c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 80);
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_1D4FDE6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4FDE864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDE900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FDEA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)CRTextSequenceRecognizerModelEspresso;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D4FDEACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FDEB30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FDEBF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDEF2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FDEFE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDF100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1D4FDF2C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FDF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<espresso_buffer_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x186186186186187)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[168 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<espresso_buffer_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(168 * a2);
}

_QWORD *std::vector<espresso_buffer_t>::__init_with_size[abi:ne180100]<espresso_buffer_t*,espresso_buffer_t*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<espresso_buffer_t>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FDFA38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:ne180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  char **v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:ne180100](result, a4);
    v7 = (char **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      result = (char *)MEMORY[0x1D826E9A8](v8);
      *v7++ = result;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1D4FDFABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1D4FE064C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FE0868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE0E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1D4FE15EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1D4FE1884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D4FE1950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CRImageBuffer::CRImageBuffer(CRImageBuffer *this, size_t count, size_t size, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = a6;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a4;
  if (count)
    *(_QWORD *)this = malloc_type_calloc(count, size, 0xF2EF0BD8uLL);
}

{
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = a6;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a4;
  if (count)
    *(_QWORD *)this = malloc_type_calloc(count, size, 0xF2EF0BD8uLL);
}

void CRImageBuffer::~CRImageBuffer(void **this)
{
  void *v1;

  v1 = *this;
  if (v1)
    free(v1);
}

{
  void *v1;

  v1 = *this;
  if (v1)
    free(v1);
}

void sub_1D4FE1EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D4FE2088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FE22D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D4FE2730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D4FE29CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D4FE2A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE2AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE2B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE2BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE2EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D4FE30BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FE3280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE32E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE3398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE3410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE3474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE3B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1D4FE3D74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FE4170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{

  _Unwind_Resume(a1);
}

void sub_1D4FE42C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4FE4344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D4FE441C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D4FE4530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FE45B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE4680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FE4750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FE483C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE4BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D4FE4D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE52E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D4FE5434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4FE5480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE55A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE56CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE57F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE591C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE59B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5A44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5AD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FE5DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE5E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE6090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE61C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FE639C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void RectangleFinder::RectangleFinder(RectangleFinder *this)
{
  *((_QWORD *)this + 10) = 0x340200000;
  *((_DWORD *)this + 22) = 1080033280;
}

{
  *((_QWORD *)this + 10) = 0x340200000;
  *((_DWORD *)this + 22) = 1080033280;
}

uint64_t RectangleFinder::PrintLabels(RectangleFinder *this, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  int **v8;
  uint64_t j;
  uint64_t v10;
  uint64_t result;

  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v8 = a2;
      for (j = a3; j; --j)
      {
        v10 = (uint64_t)*v8++;
        printf("%3d ", *(_DWORD *)(v10 + 4 * i));
      }
      result = putchar(10);
    }
  }
  return result;
}

uint64_t RectangleFinder::FindNextContourPixelPosition(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int *a6, int a7)
{
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v7 = 0;
  v8 = *a6;
  v9 = HIDWORD(a5);
  while (1)
  {
    v10 = (v8 + v7) & 7;
    if (v8 + v7 <= 0)
      v10 = -(-(v8 + v7) & 7);
    v11 = neighborColumnOffset[v10] + (uint64_t)(int)a5;
    v12 = neighborRowOffset[v10] + (uint64_t)SHIDWORD(a5);
    if (v11 >= a3 || v12 >= a4)
    {
LABEL_12:
      *a6 = 0;
      v15 = a5;
      return v15 | (v9 << 32);
    }
    if (*(unsigned __int8 *)(a1 + v11 + v12 * a3) != a7)
      break;
    v14 = *(_QWORD *)(a2 + 8 * v11);
    if (!*(_DWORD *)(v14 + 4 * v12))
      *(_DWORD *)(v14 + 4 * v12) = -1;
    if (++v7 == 8)
      goto LABEL_12;
  }
  v9 = v12;
  v15 = v11;
  *a6 = (char)(v10 + 4 - ((v10 + 4 + (((char)(v10 + 4) >> 12) & 7)) & 0xF8));
  return v15 | (v9 << 32);
}

void RectangleFinder::TraceSingleContour(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, void **a9@<X8>)
{
  unsigned int v11;
  unint64_t v17;
  int v18;
  int64_t NextContourPixelPosition;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  BOOL v32;
  unint64_t v33;
  int64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  int64_t *v41;
  char *v42;
  char *v43;
  int64_t v44;
  int v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  unint64_t v55;
  int v56;
  int v57;
  int v59;

  v11 = a5;
  v17 = HIDWORD(a5);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if ((a6 - 1) >= 2)
    v18 = 7;
  else
    v18 = 3;
  v59 = v18;
  NextContourPixelPosition = RectangleFinder::FindNextContourPixelPosition(a1, a2, a3, a4, a5, &v59, a8);
  v20 = NextContourPixelPosition;
  v57 = a7;
  *(_DWORD *)(*(_QWORD *)(a2 + 8 * (int)NextContourPixelPosition) + 4 * (NextContourPixelPosition >> 32)) = a7;
  if (NextContourPixelPosition == __PAIR64__(v17, v11))
  {
    v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a9 + 2), 1uLL);
    v23 = &v21[v22];
    *v21 = v20;
    v24 = v21 + 1;
    v26 = (char *)*a9;
    v25 = (char *)a9[1];
    if (v25 != *a9)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v21 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*a9;
    }
    *a9 = v21;
    a9[1] = v24;
    a9[2] = v23;
    if (v25)
      operator delete(v25);
    a9[1] = v24;
  }
  else
  {
    v55 = HIDWORD(NextContourPixelPosition);
    v56 = v17;
    v54 = a6;
    v28 = (v59 + 2) & 7;
    if (v59 + 2 <= 0)
      v28 = -(-(v59 + 2) & 7);
    v59 = v28;
    v29 = RectangleFinder::FindNextContourPixelPosition(a1, a2, a3, a4, NextContourPixelPosition, &v59, a8);
    v30 = (int)v29;
    if ((int)v29 < a3)
    {
      v31 = v29;
      v32 = 0;
      do
      {
        if (v31 >> 32 >= a4)
          break;
        *(_DWORD *)(*(_QWORD *)(a2 + 8 * v30) + 4 * (v31 >> 32)) = v57;
        v34 = (int64_t *)a9[1];
        v33 = (unint64_t)a9[2];
        if ((unint64_t)v34 >= v33)
        {
          v36 = ((char *)v34 - (_BYTE *)*a9) >> 3;
          if ((unint64_t)(v36 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v37 = v33 - (_QWORD)*a9;
          v38 = v37 >> 2;
          if (v37 >> 2 <= (unint64_t)(v36 + 1))
            v38 = v36 + 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v38;
          if (v39)
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a9 + 2), v39);
          else
            v40 = 0;
          v41 = (int64_t *)&v40[8 * v36];
          *v41 = v31;
          v35 = v41 + 1;
          v43 = (char *)*a9;
          v42 = (char *)a9[1];
          if (v42 != *a9)
          {
            do
            {
              v44 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *--v41 = v44;
            }
            while (v42 != v43);
            v42 = (char *)*a9;
          }
          *a9 = v41;
          a9[1] = v35;
          a9[2] = &v40[8 * v39];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v34 = v31;
          v35 = v34 + 1;
        }
        a9[1] = v35;
        if ((_DWORD)v31 == (_DWORD)v20 && v32 && HIDWORD(v31) == (_DWORD)v55)
          break;
        v32 = (_DWORD)v31 == v11 && HIDWORD(v31) == v56;
        v46 = (v59 + 2) & 7;
        if (v59 + 2 <= 0)
          v46 = -(-(v59 + 2) & 7);
        v59 = v46;
        v31 = RectangleFinder::FindNextContourPixelPosition(a1, a2, a3, a4, v31, &v59, a8);
        v30 = (int)v31;
      }
      while ((int)v31 < a3);
    }
    if (v54)
    {
      v47 = (unint64_t)*a9;
      v48 = (char *)a9[1];
      v49 = v48 - 8;
      if (*a9 != v48 && (unint64_t)v49 > v47)
      {
        v51 = v47 + 8;
        do
        {
          v52 = *(_QWORD *)(v51 - 8);
          *(_QWORD *)(v51 - 8) = *(_QWORD *)v49;
          *(_QWORD *)v49 = v52;
          v49 -= 8;
          v53 = v51 >= (unint64_t)v49;
          v51 += 8;
        }
        while (!v53);
      }
    }
  }
}

void sub_1D4FE69E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void RectangleFinder::TraceAllContours(const vImage_Buffer *a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  vImagePixelCount width;
  _BYTE *data;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  vImagePixelCount v11;
  _BYTE *v12;
  vImagePixelCount v13;
  vImagePixelCount v14;
  _BYTE *v15;
  vImagePixelCount v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void **v56;
  void *v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  vImagePixelCount count;
  void *__p;
  void *v65;
  uint64_t v66;
  void *v67[3];
  int *v68;
  _BYTE *v69;
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;

  v78 = 0;
  v79 = 0;
  v80 = 0;
  v76 = 0uLL;
  v77 = 0;
  width = a1->width;
  count = a1->height;
  data = a1->data;
  v8 = malloc_type_calloc(width, 8uLL, 0x10040436913F5uLL);
  v9 = v8;
  if (width)
  {
    v10 = (void **)v8;
    v11 = width;
    do
    {
      *v10++ = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
      --v11;
    }
    while (v11);
    v12 = data;
    v13 = width;
    do
    {
      *v12 = a2;
      v12[(count - 1) * width] = a2;
      ++v12;
      --v13;
    }
    while (v13);
  }
  v58 = a3;
  if (count >= 2)
  {
    v14 = count - 1;
    v15 = &data[width];
    do
    {
      *v15 = a2;
      *(v15 - 1) = a2;
      v15 += width;
      --v14;
    }
    while (v14);
  }
  v62 = width;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v16 = count - 1;
  if (count - 1 >= 2)
  {
    v17 = width - 1;
    v18 = 1;
    v19 = 1;
    v61 = v9;
    while (v17 <= 1)
    {
      v22 = v18 + 1;
LABEL_61:
      v18 = v22;
      if (v22 == v16)
        goto LABEL_62;
    }
    v20 = v18 << 32;
    v21 = (((v18 << 32) + 0x100000000) >> 32) * v62;
    v22 = v18 + 1;
    v23 = 1;
    v60 = (((v18 << 32) - 0x100000000) >> 32) * v62;
    while (1)
    {
      if (data[v23 + v18 * v62] == a2)
        goto LABEL_58;
      v24 = v23 | v20;
      v25 = v9[v23];
      v26 = *(_DWORD *)(v25 + 4 * v18);
      if (v26)
      {
        v27 = 2;
        goto LABEL_46;
      }
      if (data[v23 + v60] != a2)
        goto LABEL_44;
      *(_DWORD *)(v25 + 4 * v18) = v19;
      RectangleFinder::TraceSingleContour((uint64_t)data, (uint64_t)v9, v62, count, v23 | v20, 0, v19, a2, v71);
      if ((_QWORD)v76)
      {
        *((_QWORD *)&v76 + 1) = v76;
        operator delete((void *)v76);
      }
      v76 = *(_OWORD *)v71;
      v77 = v72;
      v28 = v79;
      if ((unint64_t)v79 >= v80)
      {
        v29 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>((uint64_t *)&v78, (uint64_t)&v76);
      }
      else
      {
        *v79 = 0;
        v28[1] = 0;
        v28[2] = 0;
        std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v28, (const void *)v76, *((uint64_t *)&v76 + 1), (uint64_t)(*((_QWORD *)&v76 + 1) - v76) >> 3);
        v29 = (uint64_t)(v28 + 3);
      }
      v59 = v19;
      v79 = (_QWORD *)v29;
      v30 = (*((_QWORD *)&v76 + 1) - (_QWORD)v76) >> 3;
      v31 = v74;
      if (v74 >= v75)
      {
        v33 = v73;
        v34 = (v74 - v73) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v36 = v75 - v73;
        if ((v75 - v73) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v37);
          v33 = v73;
          v31 = v74;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[4 * v34];
        *(_DWORD *)v39 = v30;
        v32 = v39 + 4;
        if (v31 == v33)
        {
          v9 = v61;
        }
        else
        {
          v9 = v61;
          do
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          while (v31 != v33);
        }
        v73 = v39;
        v74 = v32;
        v75 = &v38[4 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v74 = v30;
        v32 = v31 + 4;
        v9 = v61;
      }
      v74 = v32;
      v19 = v59 + 1;
      v25 = v9[v23];
      v26 = *(_DWORD *)(v25 + 4 * v18);
      v21 = (((v18 << 32) + 0x100000000) >> 32) * v62;
      v20 = v18 << 32;
      if (!v26)
        break;
      v27 = 2;
LABEL_45:
      v22 = v18 + 1;
LABEL_46:
      if (data[v23 + v21] == a2)
      {
        if (!v26)
        {
          v41 = *(_DWORD *)(v9[v23 - 1] + 4 * v18);
          *(_DWORD *)(v25 + 4 * v18) = v41;
          ++*(_DWORD *)&v73[4 * v41 - 4];
        }
        if (*(_DWORD *)(v25 + 4 * v22) != -1)
        {
          v42 = (uint64_t)v9;
          v43 = *(_DWORD *)(v25 + 4 * v18);
          RectangleFinder::TraceSingleContour((uint64_t)data, v42, v62, count, v24, v27, v43, a2, v71);
          if ((_QWORD)v76)
          {
            *((_QWORD *)&v76 + 1) = v76;
            operator delete((void *)v76);
          }
          v76 = *(_OWORD *)v71;
          v77 = v72;
          v44 = v79;
          if ((unint64_t)v79 >= v80)
          {
            v45 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>((uint64_t *)&v78, (uint64_t)&v76);
          }
          else
          {
            *v79 = 0;
            v44[1] = 0;
            v44[2] = 0;
            std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v44, (const void *)v76, *((uint64_t *)&v76 + 1), (uint64_t)(*((_QWORD *)&v76 + 1) - v76) >> 3);
            v45 = (uint64_t)(v44 + 3);
          }
          v79 = (_QWORD *)v45;
          *(_DWORD *)&v73[4 * v43 - 4] += (*((_QWORD *)&v76 + 1) - (_QWORD)v76) >> 3;
          v9 = v61;
          v21 = (((v18 << 32) + 0x100000000) >> 32) * v62;
          v20 = v18 << 32;
        }
        goto LABEL_58;
      }
      if (!v26)
        goto LABEL_55;
LABEL_58:
      if (++v23 == v17)
      {
        v16 = count - 1;
        goto LABEL_61;
      }
    }
    if (data[v23 + v60] == a2)
    {
      v22 = v18 + 1;
LABEL_55:
      v46 = *(_DWORD *)(v9[v23 - 1] + 4 * v18);
      *(_DWORD *)(v25 + 4 * v18) = v46;
      ++*(_DWORD *)&v73[4 * v46 - 4];
      goto LABEL_58;
    }
LABEL_44:
    v26 = 0;
    v27 = 1;
    goto LABEL_45;
  }
LABEL_62:
  *v58 = 0;
  v58[1] = 0;
  v58[2] = 0;
  v47 = (uint64_t)v78;
  v48 = v62;
  if (v79 != v78)
  {
    v49 = 0;
    v50 = 0;
    do
    {
      v71[0] = 0;
      v71[1] = 0;
      v72 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&v68, *(const void **)(v47 + v49), *(_QWORD *)(v47 + v49 + 8), (uint64_t)(*(_QWORD *)(v47 + v49 + 8) - *(_QWORD *)(v47 + v49)) >> 3);
      v51 = v68;
      if ((unint64_t)(v69 - (_BYTE *)v68) >= 0x11)
      {
        if (*(int *)&v73[4 * *(int *)(v9[*v68] + 4 * v68[1]) - 4] < 100)
          goto LABEL_82;
        v65 = 0;
        v66 = 0;
        __p = 0;
        std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&__p, v68, (uint64_t)v69, (v69 - (_BYTE *)v68) >> 3);
        RectangleFinder::generateConvexHull((int32x2_t **)&__p, (char **)v67);
        if (__p)
        {
          v65 = __p;
          operator delete(__p);
        }
        PolygonApproximateContourC((uint64_t *)&v68, (uint64_t)v71, 30.0);
        if ((void *)((char *)v71[1] - (char *)v71[0]) == (void *)40)
        {
          v52 = v58[1];
          if (v52 >= v58[2])
          {
            v53 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(v58, (uint64_t)v71);
          }
          else
          {
            std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)v58, (uint64_t)v71);
            v53 = v52 + 24;
          }
          v58[1] = v53;
        }
        PolygonApproximateContourC((uint64_t *)v67, (uint64_t)v71, 30.0);
        if ((void *)((char *)v71[1] - (char *)v71[0]) == (void *)40)
        {
          v54 = v58[1];
          if (v54 >= v58[2])
          {
            v55 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(v58, (uint64_t)v71);
          }
          else
          {
            std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)v58, (uint64_t)v71);
            v55 = v54 + 24;
          }
          v58[1] = v55;
        }
        if (v67[0])
        {
          v67[1] = v67[0];
          operator delete(v67[0]);
        }
        v51 = v68;
      }
      if (v51)
      {
LABEL_82:
        v69 = v51;
        operator delete(v51);
      }
      if (v71[0])
      {
        v71[1] = v71[0];
        operator delete(v71[0]);
      }
      ++v50;
      v47 = (uint64_t)v78;
      v49 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v79 - v78) > v50);
  }
  if (v62)
  {
    v56 = (void **)v9;
    do
    {
      v57 = *v56++;
      free(v57);
      --v48;
    }
    while (v48);
  }
  free(v9);
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if ((_QWORD)v76)
  {
    *((_QWORD *)&v76 + 1) = v76;
    operator delete((void *)v76);
  }
  *(_QWORD *)&v76 = &v78;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
}

void sub_1D4FE70A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(_QWORD *)(v30 - 136) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(v30 - 144) = v30 - 112;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  _Unwind_Resume(a1);
}

void RectangleFinder::generateConvexHull(int32x2_t **a1@<X0>, char **a2@<X8>)
{
  int32x2_t *v3;
  int32x2_t *v4;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  unint64_t v12;
  _QWORD *v13;
  int32x2_t *v14;
  int32x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int32x2_t *v21;
  char *v22;
  char *v23;
  char *v24;
  int32x2_t v25;
  int32x2_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  int32x2_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  int32x2_t *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int32x2_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  int v69;
  char *v70;
  int *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  int32x2_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  int v89;
  int v90;
  char *v91;
  char *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  char *v97;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  int64_t v113;
  char *v114;
  char *v115;
  uint64_t *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  char *__p;
  char *v134;
  char *v135;
  char *v136;
  char v137;

  v3 = *a1;
  v4 = a1[1];
  v6 = (char *)v4 - (char *)v3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  __p = 0;
  v136 = 0;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x19)
  {
    v8 = v6 >> 3;
    v9 = 126 - 2 * __clz(v6 >> 3);
    if (v4 == v3)
      v10 = 0;
    else
      v10 = v9;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>(v3, v4, (uint64_t)&v137, v10, 1);
    v11 = *a1;
    v13 = a2 + 2;
    v12 = (unint64_t)a2[2];
    v14 = (int32x2_t *)a2[1];
    if ((unint64_t)v14 >= v12)
    {
      v16 = ((char *)v14 - *a2) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_159;
      v17 = v12 - (_QWORD)*a2;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v19);
      else
        v20 = 0;
      v21 = (int32x2_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = *v11;
      v15 = v21 + 1;
      v24 = *a2;
      v23 = a2[1];
      if (v23 != *a2)
      {
        do
        {
          v25 = *(int32x2_t *)(v23 - 8);
          v23 -= 8;
          v21[-1] = v25;
          --v21;
        }
        while (v23 != v24);
        v23 = *a2;
      }
      *a2 = (char *)v21;
      a2[1] = (char *)v15;
      a2[2] = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v14 = *v11;
      v15 = v14 + 1;
    }
    a2[1] = (char *)v15;
    v26 = *a1;
    v27 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v27)
    {
      v29 = ((char *)v15 - *a2) >> 3;
      if ((unint64_t)(v29 + 1) >> 61)
        goto LABEL_159;
      v30 = v27 - (_QWORD)*a2;
      v31 = v30 >> 2;
      if (v30 >> 2 <= (unint64_t)(v29 + 1))
        v31 = v29 + 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v32);
      else
        v33 = 0;
      v34 = &v33[8 * v29];
      v35 = &v33[8 * v32];
      *(int32x2_t *)v34 = v26[1];
      v28 = v34 + 8;
      v37 = *a2;
      v36 = a2[1];
      if (v36 != *a2)
      {
        do
        {
          v38 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v34 - 1) = v38;
          v34 -= 8;
        }
        while (v36 != v37);
        v36 = *a2;
      }
      *a2 = v34;
      a2[1] = v28;
      a2[2] = v35;
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v15 = v26[1];
      v28 = (char *)&v15[1];
    }
    a2[1] = v28;
    v39 = v8 - 1;
    v40 = *a1;
    if (v136)
    {
      MEMORY[0] = v40[v39];
      v41 = 8;
    }
    else
    {
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, 1uLL);
      *(int32x2_t *)v42 = v40[v39];
      v41 = (unint64_t)(v42 + 8);
      __p = v42;
      v136 = &v42[8 * v43];
    }
    v134 = (char *)v41;
    v44 = v8 - 2;
    v45 = *a1;
    v132 = v6;
    if (v41 < (unint64_t)v136)
    {
      *(int32x2_t *)v41 = v45[v44];
      v46 = (char *)(v41 + 8);
LABEL_56:
      v135 = v46;
      v131 = v6 >> 3;
      if (v8 <= 3)
        v55 = 3;
      else
        v55 = v6 >> 3;
      v56 = a2[1];
      v57 = 2;
      do
      {
        v58 = *a1;
        if ((unint64_t)v56 >= *v13)
        {
          v59 = (v56 - *a2) >> 3;
          if ((unint64_t)(v59 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v60 = *v13 - (_QWORD)*a2;
          v61 = v60 >> 2;
          if (v60 >> 2 <= (unint64_t)(v59 + 1))
            v61 = v59 + 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v62);
          else
            v63 = 0;
          v64 = &v63[8 * v59];
          *(int32x2_t *)v64 = v58[v57];
          v56 = v64 + 8;
          v66 = *a2;
          v65 = a2[1];
          if (v65 != *a2)
          {
            do
            {
              v67 = *((_QWORD *)v65 - 1);
              v65 -= 8;
              *((_QWORD *)v64 - 1) = v67;
              v64 -= 8;
            }
            while (v65 != v66);
            v65 = *a2;
          }
          *a2 = v64;
          a2[1] = v56;
          a2[2] = &v63[8 * v62];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(int32x2_t *)v56 = v58[v57];
          v56 += 8;
        }
        a2[1] = v56;
        if ((unint64_t)(v56 - *a2) >= 0x11)
        {
          v68 = *((_DWORD *)v56 - 2);
          v69 = *((_DWORD *)v56 - 1);
          v70 = v56 - 16;
          v71 = (int *)(v56 - 24);
          while (1)
          {
            v72 = *((_DWORD *)v70 + 1);
            v74 = *v71;
            v73 = v71[1];
            v75 = (v69 - v73) * (*(_DWORD *)v70 - v74) + (v72 - v73) * (v74 - v68);
            if (v75)
            {
              if (v75 > 0)
                break;
            }
            else
            {
              if (v72 < v73)
                v73 = v72;
              if (v73 < v69)
                break;
            }
            v76 = v56 - 16;
            memmove(v56 - 16, v56 - 8, 8uLL);
            v77 = *a2;
            v56 -= 8;
            a2[1] = v76 + 8;
            if ((unint64_t)(v76 + 8 - v77) < 0x18)
              break;
            v71 = (int *)(v76 - 16);
            v70 = v76 - 8;
          }
        }
        ++v57;
      }
      while (v57 != v55);
      if ((int)(v132 >> 3) <= 2)
      {
        v88 = __p;
        v79 = v135;
      }
      else
      {
        v78 = (v131 - 3);
        v79 = v135;
        do
        {
          v80 = *a1;
          if (v79 >= v136)
          {
            v81 = (v79 - __p) >> 3;
            if ((unint64_t)(v81 + 1) >> 61)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v82 = (v136 - __p) >> 2;
            if (v82 <= v81 + 1)
              v82 = v81 + 1;
            if ((unint64_t)(v136 - __p) >= 0x7FFFFFFFFFFFFFF8)
              v83 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v83 = v82;
            if (v83)
              v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v83);
            else
              v84 = 0;
            v85 = &v84[8 * v81];
            *(int32x2_t *)v85 = v80[v78];
            v79 = v85 + 8;
            v86 = v135;
            if (v135 != __p)
            {
              do
              {
                v87 = *((_QWORD *)v86 - 1);
                v86 -= 8;
                *((_QWORD *)v85 - 1) = v87;
                v85 -= 8;
              }
              while (v86 != __p);
              v86 = __p;
            }
            __p = v85;
            v136 = &v84[8 * v83];
            if (v86)
              operator delete(v86);
          }
          else
          {
            *(int32x2_t *)v79 = v80[v78];
            v79 += 8;
          }
          v135 = v79;
          v88 = __p;
          if ((unint64_t)(v79 - __p) >= 0x11)
          {
            v89 = *((_DWORD *)v79 - 2);
            v90 = *((_DWORD *)v79 - 1);
            v91 = v79 - 16;
            v92 = v79 - 24;
            while (1)
            {
              v93 = *((_DWORD *)v91 + 1);
              v95 = *(_DWORD *)v92;
              v94 = *((_DWORD *)v92 + 1);
              v96 = (v90 - v94) * (*(_DWORD *)v91 - v95) + (v93 - v94) * (v95 - v89);
              if (v96)
              {
                if (v96 > 0)
                  break;
              }
              else
              {
                if (v93 < v94)
                  v94 = v93;
                if (v94 < v90)
                  break;
              }
              v97 = v79 - 16;
              memmove(v79 - 16, v79 - 8, 8uLL);
              v88 = __p;
              v79 -= 8;
              v135 = v97 + 8;
              if ((unint64_t)(v97 + 8 - __p) < 0x18)
                break;
              v92 = v97 - 16;
              v91 = v97 - 8;
            }
          }
        }
        while (v78-- > 0);
      }
      v99 = v88;
      if (v79 != v88 + 8)
      {
        memmove(v88, v88 + 8, v79 - (v88 + 8));
        v99 = __p;
      }
      v100 = v79 - 8;
      v101 = v79 - 8 - v99;
      if (v101 < 1)
        goto LABEL_154;
      v102 = v101 >> 3;
      v103 = (unint64_t)a2[1];
      v104 = v103 - (_QWORD)*a2;
      v105 = &(*a2)[v104 & 0xFFFFFFFFFFFFFFF8];
      if (v101 >> 3 <= (uint64_t)(*v13 - v103) >> 3)
      {
        v111 = (uint64_t)(v103 - (_QWORD)v105) >> 3;
        if (v111 >= v102)
        {
          v112 = &v99[8 * v102];
          v114 = a2[1];
        }
        else
        {
          v112 = &v99[8 * v111];
          v113 = v100 - v112;
          if (v100 != v112)
            memmove(a2[1], &v99[8 * v111], v100 - v112);
          v114 = (char *)(v103 + v113);
          a2[1] = (char *)(v103 + v113);
          if ((uint64_t)(v103 - (_QWORD)v105) < 1)
            goto LABEL_154;
        }
        v115 = &v105[8 * v102];
        v116 = (uint64_t *)&v114[-8 * v102];
        v117 = v114;
        if ((unint64_t)v116 < v103)
        {
          v117 = v114;
          do
          {
            v118 = *v116++;
            *(_QWORD *)v117 = v118;
            v117 += 8;
          }
          while ((unint64_t)v116 < v103);
        }
        a2[1] = v117;
        if (v114 != v115)
          memmove(&v114[-8 * ((v114 - v115) >> 3)], v105, v114 - v115);
        if (v112 != v99)
          memmove(v105, v99, v112 - v99);
      }
      else
      {
        v106 = v104 >> 3;
        v107 = (v104 >> 3) + v102;
        if (v107 >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v108 = *v13 - (_QWORD)*a2;
        if (v108 >> 2 > v107)
          v107 = v108 >> 2;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v109 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v109 = v107;
        if (v109)
          v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v109);
        else
          v110 = 0;
        v119 = &v110[8 * v106];
        v120 = &v119[8 * v102];
        v121 = 8 * v102;
        v122 = v119;
        do
        {
          v123 = *(_QWORD *)v99;
          v99 += 8;
          *(_QWORD *)v122 = v123;
          v122 += 8;
          v121 -= 8;
        }
        while (v121);
        v124 = *a2;
        if (*a2 != v105)
        {
          v125 = v105;
          do
          {
            v126 = *((_QWORD *)v125 - 1);
            v125 -= 8;
            *((_QWORD *)v119 - 1) = v126;
            v119 -= 8;
          }
          while (v125 != v124);
        }
        v127 = &v110[8 * v109];
        v128 = a2[1];
        v129 = v128 - v105;
        if (v128 != v105)
          memmove(v120, v105, v128 - v105);
        v130 = *a2;
        *a2 = v119;
        a2[1] = &v120[v129];
        a2[2] = v127;
        if (v130)
          operator delete(v130);
      }
LABEL_154:
      if (__p)
        operator delete(__p);
      return;
    }
    v47 = (uint64_t)(v41 - (_QWORD)__p) >> 3;
    if (!((unint64_t)(v47 + 1) >> 61))
    {
      v48 = (v136 - __p) >> 2;
      if (v48 <= v47 + 1)
        v48 = v47 + 1;
      if ((unint64_t)(v136 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v49);
      else
        v50 = 0;
      v51 = &v50[8 * v47];
      v52 = &v50[8 * v49];
      *(int32x2_t *)v51 = v45[v44];
      v46 = v51 + 8;
      v53 = v134;
      if (v134 != __p)
      {
        do
        {
          v54 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v51 - 1) = v54;
          v51 -= 8;
        }
        while (v53 != __p);
        v53 = __p;
      }
      __p = v51;
      v136 = v52;
      if (v53)
        operator delete(v53);
      goto LABEL_56;
    }
LABEL_159:
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
}

void sub_1D4FE7A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void PolygonApproximateContourC(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void *__p;
  char *v31;
  char *v32;

  v5 = *a1;
  v6 = a1[1] - *a1;
  if (v6)
  {
    v8 = 0;
    v9 = v6 >> 3;
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    v11 = 0;
    do
      v11 = vadd_s32(*(int32x2_t *)(v5 + 8 * v8++), v11);
    while (v10 != v8);
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v11.i32[0] / v9;
    v16 = (_DWORD *)(v5 + 4);
    v17 = v11.i32[1] / v9;
    do
    {
      if ((*(v16 - 1) - (int)v15) * (*(v16 - 1) - (int)v15) + (*v16 - (int)v17) * (*v16 - (int)v17) > v13)
      {
        v14 = v12;
        v13 = (*(v16 - 1) - v15) * (*(v16 - 1) - v15) + (*v16 - v17) * (*v16 - v17);
      }
      ++v12;
      v16 += 2;
    }
    while (v10 != v12);
    v18 = 0;
    v19 = 0;
    v20 = v14;
    __p = 0;
    v31 = 0;
    v32 = 0;
    do
    {
      v21 = (v19 + v20) % (v9 - 1);
      if (v18 >= v32)
      {
        v22 = (v18 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v23 = (v32 - (_BYTE *)__p) >> 2;
        if (v23 <= v22 + 1)
          v23 = v22 + 1;
        if ((unint64_t)(v32 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v24);
        else
          v25 = 0;
        v26 = &v25[8 * v22];
        *(_QWORD *)v26 = *(_QWORD *)(v5 + 8 * v21);
        v18 = v26 + 8;
        v28 = (char *)__p;
        v27 = v31;
        if (v31 != __p)
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *((_QWORD *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v27 != v28);
          v27 = (char *)__p;
        }
        __p = v26;
        v31 = v18;
        v32 = &v25[8 * v24];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_QWORD *)v18 = *(_QWORD *)(v5 + 8 * v21);
        v18 += 8;
      }
      v31 = v18;
      ++v19;
      v5 = *a1;
      v9 = (a1[1] - *a1) >> 3;
    }
    while (v9 > v19);
  }
  else
  {
    __p = 0;
    v31 = 0;
    v32 = 0;
  }
  PolygonApproximateContour((uint64_t)&__p, a2, a3);
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1D4FE7C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RectangleFinder::traceAllContoursWithoutFiltering(RectangleFinder *this@<X0>, const vImage_Buffer *a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  uint64_t v35;
  unint64_t v36;
  int v37;
  size_t count;
  size_t v39;
  void *v40;
  __int128 v41;
  void *__p;
  __int128 v43;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __p = 0;
  v43 = 0uLL;
  v3 = *((_QWORD *)this + 2);
  count = *((_QWORD *)this + 1);
  if (v3)
    v4 = *((_QWORD *)this + 1) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v6 = (int)a2;
      v7 = malloc_type_calloc(v3, 8uLL, 0x10040436913F5uLL);
      v8 = 0;
      do
        v7[v8++] = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
      while (v3 != v8);
      v9 = 0;
      v10 = count - 1;
      do
      {
        *(_BYTE *)(v5 + v9) = v6;
        *(_BYTE *)(v5 + (count - 1) * v3 + v9++) = v6;
      }
      while (v3 != v9);
      if (count >= 2)
      {
        v11 = (_BYTE *)(v5 + v3);
        v12 = count - 1;
        do
        {
          *v11 = v6;
          *(v11 - 1) = v6;
          v11 += v3;
          --v12;
        }
        while (v12);
      }
      if (v10 >= 2)
      {
        v13 = v3 - 1;
        v14 = 2 - v3;
        v15 = 1;
        v37 = 1;
        v35 = v5;
        v36 = v3;
        v32 = v3 - 1;
        while (v13 <= 1)
        {
          v29 = v15 + 1;
LABEL_50:
          v15 = v29;
          if (v29 == v10)
            goto LABEL_51;
        }
        v39 = v5 + (((v15 << 32) + 0x100000000) >> 32) * v3;
        v33 = v5 + (((v15 << 32) - 0x100000000) >> 32) * v3;
        v17 = v5 + v15 * v3;
        v18 = 1;
        v19 = 1;
        while (1)
        {
          if (*(unsigned __int8 *)(v17 + v19) == v6)
            goto LABEL_47;
          v16 = v15 << 32;
          v20 = v7[v18];
          v21 = *(_DWORD *)(v20 + 4 * v15);
          if (v21)
            break;
          if (*(unsigned __int8 *)(v33 + v19) == v6)
          {
            *(_DWORD *)(v20 + 4 * v15) = v37;
            RectangleFinder::TraceSingleContour(v35, (uint64_t)v7, v36, count, v19 | v16, 0, v37, v6, &v40);
            if (__p)
            {
              *(_QWORD *)&v43 = __p;
              operator delete(__p);
            }
            __p = v40;
            v43 = v41;
            if ((void *)v41 != v40)
            {
              v24 = a3[1];
              if (v24 >= a3[2])
              {
                v25 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a3, (uint64_t)&__p);
              }
              else
              {
                std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a3, (uint64_t)&__p);
                v25 = v24 + 24;
              }
              a3[1] = v25;
            }
            ++v37;
            v20 = v7[v18];
            v21 = *(_DWORD *)(v20 + 4 * v15);
            if (v21)
              break;
            if (*(unsigned __int8 *)(v33 + v19) == v6)
              goto LABEL_44;
          }
          v21 = 0;
          v22 = 1;
          v23 = 1;
LABEL_31:
          if (*(unsigned __int8 *)(v39 + v19) == v6)
          {
            if (!v21)
            {
              v21 = *(_DWORD *)(v7[v18 - 1] + 4 * v15);
              *(_DWORD *)(v20 + 4 * v15) = v21;
            }
            if (*(_DWORD *)(v20 + 4 * (v15 + 1)) != -1)
            {
              RectangleFinder::TraceSingleContour(v35, (uint64_t)v7, v36, count, v19 | v16, v23, v21, v6, &v40);
              if (__p)
              {
                *(_QWORD *)&v43 = __p;
                operator delete(__p);
              }
              __p = v40;
              v43 = v41;
              if ((void *)v41 == v40)
                v26 = 1;
              else
                v26 = v22;
              if ((v26 & 1) == 0)
              {
                v27 = a3[1];
                if (v27 >= a3[2])
                {
                  v28 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a3, (uint64_t)&__p);
                }
                else
                {
                  std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a3, (uint64_t)&__p);
                  v28 = v27 + 24;
                }
                a3[1] = v28;
              }
            }
            goto LABEL_47;
          }
          if (!v21)
LABEL_44:
            *(_DWORD *)(v20 + 4 * v15) = *(_DWORD *)(v7[v18 - 1] + 4 * v15);
LABEL_47:
          ++v19;
          ++v18;
          if (v14 + v19 == 1)
          {
            v5 = v35;
            v3 = v36;
            v13 = v32;
            v10 = count - 1;
            v29 = v15 + 1;
            goto LABEL_50;
          }
        }
        v22 = 0;
        v23 = 2;
        goto LABEL_31;
      }
LABEL_51:
      v30 = 0;
      if (v3 <= 1)
        v31 = 1;
      else
        v31 = v3;
      do
        free((void *)v7[v30++]);
      while (v31 != v30);
      free(v7);
      if (__p)
      {
        *(_QWORD *)&v43 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1D4FE8020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void RectangleFinder::identifyRectangleContours(uint64_t *a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  _BOOL4 v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  int v38;
  float v39;
  int v40;
  float v41;
  int v42;
  float v43;
  int v44;
  int v45;
  void *__p;
  void *v48;
  uint64_t v49;
  void *v50[3];
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;

  v57 = 0;
  v58 = 0;
  v59 = 0;
  v3 = *a1;
  if (a1[1] == *a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&v51, *(const void **)(v3 + v5), *(_QWORD *)(v3 + v5 + 8), (uint64_t)(*(_QWORD *)(v3 + v5 + 8) - *(_QWORD *)(v3 + v5)) >> 3);
      v7 = v51;
      if ((unint64_t)(v52 - v51) >= 0x11)
      {
        v48 = 0;
        v49 = 0;
        __p = 0;
        std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&__p, v51, (uint64_t)v52, (v52 - v51) >> 3);
        RectangleFinder::generateConvexHull((int32x2_t **)&__p, (char **)v50);
        if (__p)
        {
          v48 = __p;
          operator delete(__p);
        }
        PolygonApproximateContourC((uint64_t *)&v51, (uint64_t)&v54, 20.0);
        if (v55 - (_BYTE *)v54 == 40)
        {
          v8 = v58;
          if ((unint64_t)v58 >= v59)
          {
            v9 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(&v57, (uint64_t)&v54);
          }
          else
          {
            *v58 = 0;
            v8[1] = 0;
            v8[2] = 0;
            std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v8, v54, (uint64_t)v55, (v55 - (_BYTE *)v54) >> 3);
            v9 = (uint64_t)(v8 + 3);
          }
          v58 = (_QWORD *)v9;
        }
        PolygonApproximateContourC((uint64_t *)v50, (uint64_t)&v54, 20.0);
        if (v55 - (_BYTE *)v54 == 40)
        {
          v10 = v58;
          if ((unint64_t)v58 >= v59)
          {
            v11 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(&v57, (uint64_t)&v54);
          }
          else
          {
            *v58 = 0;
            v10[1] = 0;
            v10[2] = 0;
            std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v10, v54, (uint64_t)v55, (v55 - (_BYTE *)v54) >> 3);
            v11 = (uint64_t)(v10 + 3);
          }
          v58 = (_QWORD *)v11;
        }
        if (v50[0])
        {
          v50[1] = v50[0];
          operator delete(v50[0]);
        }
        v7 = v51;
      }
      if (v7)
      {
        v52 = v7;
        operator delete(v7);
      }
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      ++v6;
      v3 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
    v12 = v57;
    v13 = v58;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v13 != (_QWORD *)v12)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v12 + v14;
        v18 = *(int **)(v12 + v14);
        if (*(_QWORD *)(v12 + v14 + 8) - (_QWORD)v18 == 40)
        {
          v19 = *v18;
          if (*v18 == v18[8])
          {
            v20 = v18[1];
            if (v20 == v18[9])
            {
              v21 = v18[2];
              v22 = v18[3];
              v23 = (int)sqrt((double)((v19 - v21) * (v19 - v21) + (v20 - v22) * (v20 - v22)));
              v24 = v18[6];
              v25 = v18[7];
              v26 = (int)sqrt((double)((v19 - v24) * (v19 - v24) + (v20 - v25) * (v20 - v25)));
              v28 = v18[4];
              v27 = v18[5];
              v29 = (int)sqrt((double)((v21 - v28) * (v21 - v28) + (v22 - v27) * (v22 - v27)));
              v30 = (int)sqrt((double)((v28 - v24) * (v28 - v24) + (v27 - v25) * (v27 - v25)));
              v31 = v23 <= v29 || v30 <= v26;
              v32 = !v31;
              v33 = !v32 || v23 <= v26;
              v34 = v33 || v30 <= v29;
              if (!v34
                || (v29 > v23 ? (v35 = v26 <= v30) : (v35 = 1),
                    !v35 ? (v36 = v26 <= v23) : (v36 = 1),
                    !v36 ? (v37 = v29 <= v30) : (v37 = 1),
                    !v37))
              {
                if (v29 >= v26)
                  v38 = v26;
                else
                  v38 = v29;
                v39 = (float)v38;
                if (v29 <= v26)
                  v40 = v26;
                else
                  v40 = v29;
                v41 = v39 / (float)v40;
                if (v23 >= v30)
                  v42 = v30;
                else
                  v42 = v23;
                if (v23 <= v30)
                  v23 = v30;
                v43 = (float)v42 / (float)v23;
                if (v29 >= v26)
                  v44 = v26;
                else
                  v44 = v29;
                if (v29 > v26)
                  v26 = v29;
                if (v32)
                {
                  v23 = v26;
                  v45 = v44;
                }
                else
                {
                  v45 = v42;
                }
                if (v32)
                  v41 = v43;
                if ((float)((float)(1.0 - v41) * 100.0) < 20.0
                  && (float)((float)(1.0 - (float)((float)v45 / (float)v23)) * 100.0) < 50.0)
                {
                  if (v15 >= a2[2])
                  {
                    v15 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a2, v17);
                  }
                  else
                  {
                    std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a2, v17);
                    v15 += 24;
                  }
                  a2[1] = v15;
                  v12 = v57;
                  v13 = v58;
                }
              }
            }
          }
        }
        ++v16;
        v14 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v12) >> 3) > v16);
    }
  }
  v54 = &v57;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_1D4FE8444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = &a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t RectangleFinder::pointAboveOrRightOfLineSegment(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v4;

  v3 = HIDWORD(a2);
  v4 = (HIDWORD(a1) - HIDWORD(a2)) * (a3 - a2) + (HIDWORD(a3) - HIDWORD(a2)) * (a2 - a1);
  if (v4)
  {
    if (v4 > 0)
      return 1;
  }
  else
  {
    if (SHIDWORD(a3) < SHIDWORD(a2))
      LODWORD(v3) = HIDWORD(a3);
    if ((int)v3 < SHIDWORD(a1))
      return 1;
  }
  return 0;
}

float RectangleFinder::angleBetweenLines(RectangleFinder *this, CGPoint a2, CGPoint a3, CGPoint a4)
{
  double v4;
  long double v5;

  v4 = ((a3.y - a2.y) * (a4.y - a2.y) + (a3.x - a2.x) * (a4.x - a2.x))
     / (sqrt((a3.y - a2.y) * (a3.y - a2.y) + (a3.x - a2.x) * (a3.x - a2.x))
      * sqrt((a4.y - a2.y) * (a4.y - a2.y) + (a4.x - a2.x) * (a4.x - a2.x)));
  v5 = -1.0;
  if (v4 >= -1.0)
  {
    v5 = v4;
    if (v4 > 1.0)
      v5 = 1.0;
  }
  return acos(v5) * 180.0 / 3.14159265;
}

uint64_t RectangleFinder::linesIntersect(RectangleFinder *this, CGPoint a2, CGPoint a3, CGPoint a4, CGPoint a5, CGPoint *a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  uint64_t result;
  double v12;
  double v13;
  double v14;
  float v15;
  float v17;
  double v19;

  v6 = a3.x - a2.x;
  v7 = a3.y - a2.y;
  v8 = a5.x - a4.x;
  v9 = a5.y - a4.y;
  v10 = v6 * v9 - v8 * v7;
  result = 0;
  if (fabsf(v10) > 1.0e-10)
  {
    v12 = a2.x - a4.x;
    v13 = a2.y - a4.y;
    v14 = v10;
    v15 = (v6 * v13 - v7 * v12) / v14;
    if (v15 >= 0.0 && v15 <= 1.0)
    {
      v17 = (v8 * v13 - v9 * v12) / v14;
      if (v17 >= 0.0 && v17 <= 1.0)
      {
        if (a6)
        {
          v19 = v17;
          a6->x = a2.x + v19 * v6;
          a6->y = a2.y + v19 * v7;
        }
        return 1;
      }
    }
  }
  return result;
}

BOOL RectangleFinder::pointInPolygon(RectangleFinder *this, CGPoint *a2, CGPoint a3)
{
  uint64_t v3;
  _BOOL8 result;
  double y;
  CGFloat *p_y;
  uint64_t v7;
  uint64_t v8;
  double v9;
  BOOL v10;
  BOOL v11;

  v3 = 0;
  result = 0;
  y = a2[3].y;
  p_y = &a2->y;
  v7 = 3;
  do
  {
    v8 = v7;
    v7 = v3;
    v9 = y;
    y = *p_y;
    v10 = *p_y <= a3.y && a3.y < v9;
    if (v10 || (a3.y < y ? (v11 = v9 > a3.y) : (v11 = 1), !v11))
    {
      if (a3.x < *(p_y - 1) + (a3.y - y) * (a2[v8].x - *(p_y - 1)) / (v9 - y))
        result = !result;
    }
    ++v3;
    p_y += 2;
  }
  while (v7 != 3);
  return result;
}

float RectangleFinder::percentageOfPtsOnEdge(RectangleFinder *this, vImage_Buffer *a2, CGPoint *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  float64x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  unsigned __int8 v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  float v20;
  float v21;
  unsigned int v22;
  int v23;
  int v24;
  char v25;
  vImagePixelCount v26;
  uint64_t v27;
  vImagePixelCount v28;
  uint64_t v29;
  int v30;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (float64x2_t)a3[v3++];
    v7 = vcvt_f32_f64(v6);
    v8 = vcvt_f32_f64((float64x2_t)a3[v3 & 3]);
    *(float32x2_t *)&v6.f64[0] = vabd_f32(v8, v7);
    v9 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v6.f64[0], 1), *(float32x2_t *)&v6.f64[0]).u8[0];
    v10 = v8.f32[1];
    v11 = v7.f32[1];
    if ((v9 & 1) != 0)
    {
      v12 = (float)(int)v7.f32[0];
      v13 = (float)(int)v8.f32[0];
    }
    else
    {
      v12 = v7.f32[1];
      v13 = v8.f32[1];
      v11 = v7.f32[0];
      v10 = v8.f32[0];
    }
    if (v11 > v10)
    {
      v14 = (int)v11;
      v11 = v10;
      v10 = (float)v14;
      v15 = (int)v12;
      v12 = v13;
      v13 = (float)v15;
    }
    if (v12 < v13)
      v16 = 1;
    else
      v16 = -1;
    if (v10 > (float)(int)v11)
    {
      v17 = v10 - v11;
      v18 = (int)v11;
      v19 = (int)v12;
      v20 = 0.0;
      v21 = vabds_f32(v13, v12) / v17;
      do
      {
        v22 = v18 - 3;
        v23 = v18 + 3;
        v24 = v19 + 3;
        v25 = 0;
        if ((v9 & 1) != 0)
        {
          do
          {
            v26 = v22;
            LODWORD(v27) = v19 - 4;
            do
            {
              v27 = (v27 + 1);
              if ((int)v26 >= 1
                && (int)v27 >= 1
                && a2->height > v26
                && a2->width > v27
                && !*((_BYTE *)a2->data + v27 + a2->rowBytes * v26))
              {
                v25 = 1;
              }
            }
            while ((int)v27 < v24);
            v22 = v26 + 1;
          }
          while ((int)v26 < v23);
          v25 &= 1u;
        }
        else
        {
          do
          {
            v28 = v22;
            LODWORD(v29) = v19 - 4;
            do
            {
              v29 = (v29 + 1);
              if ((int)v28 >= 1 && (int)v29 >= 1 && a2->width > v28 && a2->height > v29)
                v25 |= *((_BYTE *)a2->data + v28 + a2->rowBytes * v29) == 0;
            }
            while ((int)v29 < v24);
            v22 = v28 + 1;
          }
          while ((int)v28 < v23);
        }
        ++v4;
        v5 += v25 & 1;
        v20 = v21 + v20;
        if (v20 < 0.5)
        {
          v30 = 0;
        }
        else
        {
          v20 = v20 + -1.0;
          v30 = v16;
        }
        v19 += v30;
        ++v18;
      }
      while (v10 > (float)v18);
    }
  }
  while (v3 != 4);
  return (float)((float)v5 * 100.0) / (float)v4;
}

uint64_t RectangleFinder::peakHistogramPtsInPolygon(RectangleFinder *this, vImage_Buffer *a2, CGPoint *a3)
{
  char *data;
  vImagePixelCount height;
  uint64_t v7;
  CGFloat y;
  uint64_t v9;
  int v10;
  double v11;
  CGFloat *p_y;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  BOOL v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  vImagePixelCount width;
  vImagePixelCount v26;
  vImagePixelCount v27;
  vImagePixelCount v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  _QWORD v33[259];

  v33[258] = *MEMORY[0x1E0C80C00];
  data = (char *)a2->data;
  bzero(v33, 0x800uLL);
  height = a2->height;
  if (height)
  {
    v7 = 0;
    y = a3[3].y;
    do
    {
      v9 = 0;
      v10 = 0;
      v11 = (float)(int)v7;
      p_y = &a3->y;
      v13 = y;
      v14 = 3;
      do
      {
        v15 = v9;
        v16 = *p_y;
        v17 = *p_y >= v11 || v13 < v11;
        if (!v17 || (v16 >= v11 ? (v18 = v13 < v11) : (v18 = 0), v18))
          *((_DWORD *)&v33[256] + v10++) = (int)(*(p_y - 1)
                                               + ((double)(int)v7 - v16) / (v13 - v16) * (a3[v14].x - *(p_y - 1)));
        ++v9;
        p_y += 2;
        v13 = v16;
        v14 = v15;
      }
      while (v15 != 3);
      if (v10 > 1)
      {
        v19 = 0;
        do
        {
          v20 = v19;
          v21 = *((_DWORD *)&v33[256] + v19);
          v22 = v20 + 1;
          v23 = *((_DWORD *)&v33[256] + v20 + 1);
          if (v21 > v23)
          {
            *((_DWORD *)&v33[256] + v20) = v23;
            *((_DWORD *)&v33[256] + v22) = v21;
            LODWORD(v22) = v20 - 1;
            if (!(_DWORD)v20)
              LODWORD(v22) = 0;
          }
          v19 = v22;
        }
        while ((int)v22 < v10 - 1);
      }
      if (v10 >= 1)
      {
        v24 = 0;
        width = a2->width;
        do
        {
          v26 = SLODWORD(v33[v24 + 256]);
          if (width <= v26)
            break;
          v27 = *((unsigned int *)&v33[256] + ((v24 * 2) | 1));
          if ((int)v27 >= 1)
          {
            if ((v26 & 0x80000000) != 0)
            {
              LODWORD(v26) = 0;
              LODWORD(v33[v24 + 256]) = 0;
            }
            if (width >= v27)
              v27 = v27;
            else
              v27 = width;
            *((_DWORD *)&v33[256] + ((v24 * 2) | 1)) = v27;
            if ((int)v26 < (int)v27)
            {
              v28 = v27 - v26;
              v29 = &data[width * v7 + v26];
              do
              {
                v30 = *v29++;
                ++v33[v30];
                --v28;
              }
              while (v28);
            }
          }
          ++v24;
        }
        while (v10 > (int)(v24 * 2));
      }
      ++v7;
    }
    while (v7 != height);
  }
  v31 = 0;
  LODWORD(result) = 0;
  do
  {
    if (v33[v31] <= v33[(int)result])
      result = result;
    else
      result = v31;
    ++v31;
  }
  while (v31 != 255);
  return result;
}

void RectangleFinder::bestContours(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  double v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  int v35;
  float v36;
  int v37;
  float v38;
  int v39;
  int v40;
  float v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  RectangleFinder *v59;
  RectangleFinder *v60;
  RectangleFinder *v61;
  RectangleFinder *v62;
  RectangleFinder *v63;
  BOOL v64;
  __int128 v65;
  RectangleFinder *v66;
  __int128 v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  double v75;
  unint64_t v76;
  vImage_Buffer v80;
  vImage_Buffer v81;
  CGPoint v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  CGPoint v90;
  CGPoint v91;
  CGPoint v92;
  CGPoint v93;
  CGPoint v94;
  CGPoint v95;
  CGPoint v96;
  CGPoint v97;
  CGPoint v98;
  CGPoint v99;
  CGPoint v100;
  CGPoint v101;
  CGPoint v102;
  CGPoint v103;
  CGPoint v104;
  CGPoint v105;
  CGPoint v106;
  CGPoint v107;
  CGPoint v108;
  CGPoint v109;

  v89 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v7 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v9 = 0;
    v76 = 0;
    v10 = 0;
    v11 = 1.0;
    v12 = 20.0;
    v13 = 0.005;
    *(float *)&v14 = 63.333;
    do
    {
      v15 = *(int **)(v7 + v9);
      if (*(_QWORD *)(v7 + v9 + 8) - (_QWORD)v15 == 40)
      {
        v16 = *v15;
        if (*v15 == v15[8])
        {
          v17 = v15[1];
          if (v17 == v15[9])
          {
            v18 = v15[2];
            v19 = v15[3];
            v20 = (int)sqrt((double)((v16 - v18) * (v16 - v18) + (v17 - v19) * (v17 - v19)));
            v21 = v15[6];
            v22 = v15[7];
            v23 = (int)sqrt((double)((v16 - v21) * (v16 - v21) + (v17 - v22) * (v17 - v22)));
            v24 = v15[4];
            v25 = v15[5];
            v26 = (int)sqrt((double)((v18 - v24) * (v18 - v24) + (v19 - v25) * (v19 - v25)));
            v27 = (int)sqrt((double)((v24 - v21) * (v24 - v21) + (v25 - v22) * (v25 - v22)));
            v28 = v20 <= v26 || v27 <= v23;
            v29 = !v28;
            v30 = !v29 || v20 <= v23;
            v31 = v30 || v27 <= v26;
            if (!v31
              || (v26 > v20 ? (v32 = v23 <= v27) : (v32 = 1),
                  !v32 ? (v33 = v23 <= v20) : (v33 = 1),
                  !v33 ? (v34 = v26 <= v27) : (v34 = 1),
                  !v34))
            {
              if (v26 >= v23)
                v35 = v23;
              else
                v35 = v26;
              v36 = (float)v35;
              if (v26 <= v23)
                v37 = v23;
              else
                v37 = v26;
              v38 = v36 / (float)v37;
              if (v20 >= v27)
                v39 = v27;
              else
                v39 = v20;
              if (v20 <= v27)
                v40 = v27;
              else
                v40 = v20;
              v41 = (float)v39 / (float)v40;
              if (v26 >= v23)
                v42 = v23;
              else
                v42 = v26;
              if (v26 <= v23)
                v43 = v23;
              else
                v43 = v26;
              v44 = !v29;
              if (v29)
                v45 = v43;
              else
                v45 = v40;
              if (!v44)
              {
                v39 = v42;
                v38 = v41;
              }
              if ((float)((float)(v11 - v38) * 100.0) < v12
                && (float)((float)(v11 - (float)((float)v39 / (float)v45)) * 100.0) < 50.0
                && v20 >= 31
                && v26 >= 31
                && v27 >= 31
                && v23 >= 31)
              {
                if (v20 > v27)
                  v27 = v20;
                if (v26 <= v23)
                  v26 = v23;
                if (v27 * v26 > (int)((double)*(unint64_t *)(a2 + 16)
                                     * v13
                                     * (double)*(unint64_t *)(a2 + 8)))
                {
                  v74 = *(float *)&v14;
                  v75 = v13;
                  v51 = (double)v16;
                  v52 = (double)v17;
                  v53 = (double)v18;
                  v54 = (double)v19;
                  v55 = (double)v24;
                  v56 = (double)v25;
                  v57 = (double)v21;
                  v58 = (double)v22;
                  v90.x = (double)v16;
                  v90.y = (double)v17;
                  v96.x = (double)v18;
                  v96.y = (double)v19;
                  v102.x = (double)v21;
                  v102.y = (double)v22;
                  v73 = RectangleFinder::angleBetweenLines((RectangleFinder *)0x42480000, v90, v96, v102);
                  v91.x = v53;
                  v91.y = v54;
                  v97.x = v51;
                  v97.y = v52;
                  v103.x = v55;
                  v103.y = v56;
                  v72 = RectangleFinder::angleBetweenLines(v59, v91, v97, v103);
                  v92.x = v55;
                  v92.y = v56;
                  v98.x = v53;
                  v98.y = v54;
                  v104.x = v57;
                  v104.y = v58;
                  v71 = RectangleFinder::angleBetweenLines(v60, v92, v98, v104);
                  v93.x = v57;
                  v93.y = v58;
                  v99.x = v51;
                  v99.y = v52;
                  v105.x = v55;
                  v105.y = v56;
                  v70 = RectangleFinder::angleBetweenLines(v61, v93, v99, v105);
                  v69 = *(float *)(a1 + 88);
                  v94.x = v51;
                  v94.y = v52;
                  v100.x = v53;
                  v100.y = v54;
                  v106.x = v55;
                  v106.y = v56;
                  v108.x = v57;
                  v108.y = v58;
                  v63 = (RectangleFinder *)RectangleFinder::linesIntersect(v62, v94, v100, v106, v108, 0);
                  if ((_DWORD)v63)
                  {
                    v64 = 1;
                  }
                  else
                  {
                    v95.x = v53;
                    v95.y = v54;
                    v101.x = v55;
                    v101.y = v56;
                    v107.x = v51;
                    v107.y = v52;
                    v109.x = v57;
                    v109.y = v58;
                    v63 = (RectangleFinder *)RectangleFinder::linesIntersect(v63, v95, v101, v107, v109, 0);
                    v64 = (_DWORD)v63 != 0;
                  }
                  v82.x = v51;
                  v82.y = v52;
                  v83 = v53;
                  v84 = v54;
                  v85 = v55;
                  v86 = v56;
                  v87 = v57;
                  v88 = v58;
                  if (fmaxf(vabds_f32(v73, v72), vabds_f32(v71, v70)) >= 30.0)
                  {
                    v11 = 1.0;
                    v12 = 20.0;
                    v13 = v75;
                    *(float *)&v14 = v74;
                  }
                  else
                  {
                    v11 = 1.0;
                    v12 = 20.0;
                    v13 = v75;
                    *(float *)&v14 = v74;
                    if (vabds_f32(fmaxf((float)v23 / (float)v20, (float)v20 / (float)v23), v69) < 1.0 && !v64)
                    {
                      v65 = a4[1];
                      *(_OWORD *)&v81.data = *a4;
                      *(_OWORD *)&v81.width = v65;
                      if (RectangleFinder::percentageOfPtsOnEdge(v63, &v81, &v82) > v74)
                      {
                        v67 = *(_OWORD *)(a2 + 16);
                        *(_OWORD *)&v80.data = *(_OWORD *)a2;
                        *(_OWORD *)&v80.width = v67;
                        if (RectangleFinder::peakHistogramPtsInPolygon(v66, &v80, &v82) - 70 <= 0xA2)
                        {
                          if (v76 >= a5[2])
                          {
                            v68 = std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(a5, v7 + v9);
                          }
                          else
                          {
                            std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>((uint64_t)a5, v7 + v9);
                            v68 = v76 + 24;
                          }
                          v76 = v68;
                          a5[1] = v68;
                          v7 = *a3;
                          v6 = a3[1];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v10;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v10);
  }
}

void sub_1D4FE8F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RectangleFinder::bestContour(RectangleFinder *a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  double v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  _BOOL4 v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  int v37;
  float v38;
  int v39;
  float v40;
  int v41;
  int v42;
  float v43;
  int v44;
  int v45;
  float *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  RectangleFinder *v60;
  RectangleFinder *v61;
  RectangleFinder *v62;
  RectangleFinder *v63;
  RectangleFinder *v64;
  BOOL v65;
  float v66;
  float v67;
  __int128 v68;
  RectangleFinder *v69;
  float v70;
  __int128 v71;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  double v79;
  float v80;
  float v81;
  _OWORD *v82;
  vImage_Buffer v83;
  vImage_Buffer v84;
  CGPoint v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  CGPoint v93;
  CGPoint v94;
  CGPoint v95;
  CGPoint v96;
  CGPoint v97;
  CGPoint v98;
  CGPoint v99;
  CGPoint v100;
  CGPoint v101;
  CGPoint v102;
  CGPoint v103;
  CGPoint v104;
  CGPoint v105;
  CGPoint v106;
  CGPoint v107;
  CGPoint v108;
  CGPoint v109;
  CGPoint v110;
  CGPoint v111;
  CGPoint v112;

  v92 = *MEMORY[0x1E0C80C00];
  v4 = a3[1] - *a3;
  if (!v4)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = v4 / 24;
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  v9 = (_QWORD *)(*a3 + 8);
  v10 = 15.0;
  v11 = 0xFFFFFFFFLL;
  v12 = 66.667;
  v13 = 1.0;
  v14 = 20.0;
  v15 = 0.005;
  *(float *)&v16 = 0.95;
  do
  {
    v17 = (int *)*(v9 - 1);
    if (*v9 - (_QWORD)v17 == 40)
    {
      v18 = *v17;
      if (*v17 == v17[8])
      {
        v19 = v17[1];
        if (v19 == v17[9])
        {
          v20 = v17[2];
          v21 = v17[3];
          v22 = (int)sqrt((double)((v18 - v20) * (v18 - v20) + (v19 - v21) * (v19 - v21)));
          v23 = v17[6];
          v24 = v17[7];
          v25 = (int)sqrt((double)((v18 - v23) * (v18 - v23) + (v19 - v24) * (v19 - v24)));
          v26 = v17[4];
          v27 = v17[5];
          v28 = (int)sqrt((double)((v20 - v26) * (v20 - v26) + (v21 - v27) * (v21 - v27)));
          v29 = (int)sqrt((double)((v26 - v23) * (v26 - v23) + (v27 - v24) * (v27 - v24)));
          v30 = v22 <= v28 || v29 <= v25;
          v31 = !v30;
          v32 = !v31 || v22 <= v25;
          v33 = v32 || v29 <= v28;
          if (!v33
            || (v28 > v22 ? (v34 = v25 <= v29) : (v34 = 1),
                !v34 ? (v35 = v25 <= v22) : (v35 = 1),
                !v35 ? (v36 = v28 <= v29) : (v36 = 1),
                !v36))
          {
            if (v28 >= v25)
              v37 = v25;
            else
              v37 = v28;
            v38 = (float)v37;
            if (v28 <= v25)
              v39 = v25;
            else
              v39 = v28;
            v40 = v38 / (float)v39;
            if (v22 >= v29)
              v41 = v29;
            else
              v41 = v22;
            if (v22 <= v29)
              v42 = v29;
            else
              v42 = v22;
            v43 = (float)v41 / (float)v42;
            if (v28 >= v25)
              v44 = v25;
            else
              v44 = v28;
            if (v28 <= v25)
              v45 = v25;
            else
              v45 = v28;
            if (v31)
            {
              v42 = v45;
              v41 = v44;
              v40 = v43;
            }
            if ((float)((float)(v13 - v40) * 100.0) < v14
              && (float)((float)(v13 - (float)((float)v41 / (float)v42)) * 100.0) < 50.0
              && v22 >= 31
              && v28 >= 31
              && v29 >= 31
              && v25 >= 31)
            {
              if (v22 > v29)
                v29 = v22;
              if (v28 <= v25)
                v28 = v25;
              if (v29 * v28 > (int)((double)*(unint64_t *)(a2 + 16) * v15 * (double)*(unint64_t *)(a2 + 8)))
              {
                v78 = *(float *)&v16;
                v79 = v15;
                v80 = v12;
                v81 = v10;
                v51 = (float *)a1;
                v82 = a4;
                v52 = (double)v18;
                v53 = (double)v19;
                v54 = (double)v20;
                v55 = (double)v21;
                v56 = (double)v26;
                v57 = (double)v27;
                v58 = (double)v23;
                v59 = (double)v24;
                v93.x = (double)v18;
                v93.y = (double)v19;
                v99.x = (double)v20;
                v99.y = (double)v21;
                v105.x = (double)v23;
                v105.y = (double)v24;
                v77 = RectangleFinder::angleBetweenLines(a1, v93, v99, v105);
                v94.x = v54;
                v94.y = v55;
                v100.x = v52;
                v100.y = v53;
                v106.x = v56;
                v106.y = v57;
                v76 = RectangleFinder::angleBetweenLines(v60, v94, v100, v106);
                v95.x = v56;
                v95.y = v57;
                v101.x = v54;
                v101.y = v55;
                v107.x = v58;
                v107.y = v59;
                v75 = RectangleFinder::angleBetweenLines(v61, v95, v101, v107);
                v96.x = v58;
                v96.y = v59;
                v102.x = v52;
                v102.y = v53;
                v108.x = v56;
                v108.y = v57;
                v74 = RectangleFinder::angleBetweenLines(v62, v96, v102, v108);
                v73 = v51[22];
                v97.x = v52;
                v97.y = v53;
                v103.x = v54;
                v103.y = v55;
                v109.x = v56;
                v109.y = v57;
                v111.x = v58;
                v111.y = v59;
                v64 = (RectangleFinder *)RectangleFinder::linesIntersect(v63, v97, v103, v109, v111, 0);
                if ((_DWORD)v64)
                {
                  v65 = 1;
                }
                else
                {
                  v98.x = v54;
                  v98.y = v55;
                  v104.x = v56;
                  v104.y = v57;
                  v110.x = v52;
                  v110.y = v53;
                  v112.x = v58;
                  v112.y = v59;
                  v64 = (RectangleFinder *)RectangleFinder::linesIntersect(v64, v98, v104, v110, v112, 0);
                  v65 = (_DWORD)v64 != 0;
                }
                a4 = v82;
                v66 = fmaxf(vabds_f32(v77, v76), vabds_f32(v75, v74));
                v85.x = v52;
                v85.y = v53;
                v86 = v54;
                v87 = v55;
                v88 = v56;
                v89 = v57;
                v90 = v58;
                v91 = v59;
                v10 = v81;
                if (v66 >= (float)(v10 + v10))
                {
                  v12 = v80;
                  v13 = 1.0;
                  v14 = 20.0;
                  v15 = v79;
                  *(float *)&v16 = v78;
                }
                else
                {
                  v13 = 1.0;
                  v12 = v80;
                  v14 = 20.0;
                  v15 = v79;
                  *(float *)&v16 = v78;
                  if (vabds_f32(fmaxf((float)v25 / (float)v22, (float)v22 / (float)v25), v73) < 1.0 && !v65)
                  {
                    v67 = v66;
                    v68 = v82[1];
                    *(_OWORD *)&v84.data = *v82;
                    *(_OWORD *)&v84.width = v68;
                    v70 = RectangleFinder::percentageOfPtsOnEdge(v64, &v84, &v85);
                    if (v70 > (float)(v80 * v78))
                    {
                      v71 = *(_OWORD *)(a2 + 16);
                      *(_OWORD *)&v83.data = *(_OWORD *)a2;
                      *(_OWORD *)&v83.width = v71;
                      if (RectangleFinder::peakHistogramPtsInPolygon(v69, &v83, &v85) - 70 >= 0xA3)
                      {
                        v11 = v11;
                      }
                      else
                      {
                        v12 = v70;
                        v10 = v67;
                        v11 = v6;
                      }
                    }
                    a4 = v82;
                  }
                }
                a1 = (RectangleFinder *)v51;
              }
            }
          }
        }
      }
    }
    ++v6;
    v9 += 3;
  }
  while (v8 != v6);
  return v11;
}

void RectangleFinder::findCodeRectPoints(RectangleFinder *this@<X0>, vImage_Buffer *a2@<X1>, int a3@<W2>, double **a4@<X8>)
{
  void *v8;
  __int128 v9;
  _OWORD *v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  vImagePixelCount height;
  void *data;
  size_t rowBytes;
  vImagePixelCount width;
  CGColorSpace *DeviceGray;
  CGContext *v20;
  CGImage *Image;
  unint64_t v22;
  unint64_t v23;
  CGColorSpace *DeviceRGB;
  void *v25;
  CGContext *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  float v33;
  float v34;
  float v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  CGImage *v45;
  unsigned int v46;
  uint64_t v47;
  const float *v48;
  double *v49;
  int64x2_t v50;
  int64x2_t v51;
  double *v52;
  char *v53;
  unint64_t v54;
  double *v55;
  uint64_t v56;
  const float *v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  double *v61;
  unsigned __int8 *v62;
  double *v63;
  double v64;
  double v65;
  int v66;
  double v67;
  double v68;
  int v69;
  double v70;
  double v71;
  int v72;
  double v73;
  double v74;
  __int128 v75;
  __int128 v76;
  double v77;
  double v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  CGPoint v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  CGPoint v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  double y;
  float32x4x2_t v96;
  double x;
  vImage_Buffer v98;
  CGPoint v99;
  CGPoint v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  vImage_Buffer v104;
  _OWORD v105[2];
  vImage_Buffer v106;
  _OWORD v107[2];
  uint64_t v108[3];
  uint64_t v109;
  uint64_t v110;
  _OWORD v111[2];
  _OWORD v112[2];
  vImage_Buffer v113;
  float32x4x2_t v114;
  float32x4x2_t v115;
  float64x2x2_t v116;
  float64x2x2_t v117;
  float64x2x2_t v118;
  float64x2x2_t v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;

  v8 = malloc_type_calloc(a2->rowBytes * a2->height, 1uLL, 0x100004077774924uLL);
  v113.data = v8;
  *(_OWORD *)&v113.height = *(_OWORD *)&a2->height;
  v113.rowBytes = a2->rowBytes;
  v9 = *(_OWORD *)&a2->width;
  if (a3 == 95192327)
  {
    v112[0] = *(_OWORD *)&a2->data;
    v112[1] = v9;
    v10 = v112;
    v11 = 7;
    v12 = 3;
  }
  else
  {
    v111[0] = *(_OWORD *)&a2->data;
    v111[1] = v9;
    v10 = v111;
    v11 = 13;
    v12 = 7;
  }
  adaptiveThresholdIntegralImage((uint64_t)v10, (uint64_t *)&v113, v11, v12);
  if ((int)TRShouldLogImages() >= 4)
  {
    v98 = v113;
    writeBufferWithMetadata((uint64_t)&v98, CFSTR("/tmp/CoreRecognitionImages/Debug/threshold200.png"), 0);
  }
  RectangleFinder::TraceAllContours(&v113, 255, &v109);
  v13 = *(_OWORD *)&a2->width;
  v107[0] = *(_OWORD *)&a2->data;
  v107[1] = v13;
  v106 = v113;
  RectangleFinder::bestContours((uint64_t)this, (uint64_t)v107, &v109, &v106, v108);
  v14 = *(_OWORD *)&a2->width;
  v105[0] = *(_OWORD *)&a2->data;
  v105[1] = v14;
  v104 = v113;
  *((_DWORD *)this + 28) = RectangleFinder::bestContour(this, (uint64_t)v105, &v109, &v104);
  if ((int)TRShouldLogImages() >= 4)
  {
    v101 = 0;
    v102 = 0;
    v103 = 0;
    std::vector<std::vector<PixelPosition>>::__init_with_size[abi:ne180100]<std::vector<PixelPosition>*,std::vector<PixelPosition>*>(&v101, v109, v110, 0xAAAAAAAAAAAAAAABLL * ((v110 - v109) >> 3));
    data = a2->data;
    height = a2->height;
    width = a2->width;
    rowBytes = a2->rowBytes;
    DeviceGray = CGColorSpaceCreateDeviceGray();
    v20 = CGBitmapContextCreate(data, width, height, 8uLL, rowBytes, DeviceGray, 0);
    CGColorSpaceRelease(DeviceGray);
    Image = CGBitmapContextCreateImage(v20);
    CGContextRelease(v20);
    v22 = CGImageGetWidth(Image);
    v23 = CGImageGetHeight(Image);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v25 = malloc_type_malloc(v23 * 4 * v22, 0x29D91509uLL);
    v26 = CGBitmapContextCreate(v25, v22, v23, 8uLL, 4 * v22, DeviceRGB, 5u);
    CGColorSpaceRelease(DeviceRGB);
    v120.size.width = (double)v22;
    v120.origin.x = 0.0;
    v120.origin.y = 0.0;
    v120.size.height = (double)v23;
    CGContextDrawImage(v26, v120, Image);
    CGImageRelease(Image);
    CGContextTranslateCTM(v26, 0.0, (double)v23);
    CGContextScaleCTM(v26, 1.0, -1.0);
    v27 = v101;
    if (v102 - v101 >= 1)
    {
      v28 = 0;
      if ((uint64_t)((v102 - v101) / 0x18uLL) <= 1)
        v29 = 1;
      else
        v29 = (v102 - v101) / 0x18uLL;
      do
      {
        if (*(_QWORD *)(v27 + 24 * v28 + 8) - *(_QWORD *)(v27 + 24 * v28) >= 9uLL)
        {
          v30 = rand();
          v31 = rand();
          v32 = rand();
          v33 = (double)(10 * v30) / 10.0;
          v34 = (double)(10 * v31) / 10.0;
          v35 = (double)(10 * v32) / 10.0;
          v36 = v33;
          v37 = v34;
          v38 = v35;
          CGContextSetRGBStrokeColor(v26, v33, v34, v35, 0.0);
          CGContextSetRGBFillColor(v26, v36, v37, v38, 0.0);
          CGContextSetLineWidth(v26, 1.0);
          CGContextBeginPath(v26);
          CGContextMoveToPoint(v26, (double)**(int **)(v101 + 24 * v28), (double)*(int *)(*(_QWORD *)(v101 + 24 * v28) + 4));
          CGContextSetRGBStrokeColor(v26, v36, v37, v38, 1.0);
          CGContextSetRGBFillColor(v26, v36, v37, v38, 1.0);
          CGContextSetLineWidth(v26, 1.0);
          v39 = *(_QWORD *)(v101 + 24 * v28);
          if ((unint64_t)(*(_QWORD *)(v101 + 24 * v28 + 8) - v39) >= 9)
          {
            v40 = 0;
            v41 = 1;
            do
            {
              CGContextAddLineToPoint(v26, (double)*(int *)(v39 + v40 + 8), (double)*(int *)(v39 + v40 + 12));
              ++v41;
              v39 = *(_QWORD *)(v101 + 24 * v28);
              v40 += 8;
            }
            while (v41 < (*(_QWORD *)(v101 + 24 * v28 + 8) - v39) >> 3);
          }
          CGContextStrokePath(v26);
          v27 = v101;
          v42 = *(_QWORD *)(v101 + 24 * v28);
          if (*(_QWORD *)(v101 + 24 * v28 + 8) != v42)
          {
            v43 = 0;
            v44 = 0;
            do
            {
              v121.origin.x = (double)*(int *)(v42 + v43);
              v121.origin.y = (double)*(int *)(v42 + v43 + 4);
              v121.size.width = 3.0;
              v121.size.height = 3.0;
              CGContextFillRect(v26, v121);
              ++v44;
              v27 = v101;
              v42 = *(_QWORD *)(v101 + 24 * v28);
              v43 += 8;
            }
            while (v44 < (*(_QWORD *)(v101 + 24 * v28 + 8) - v42) >> 3);
          }
        }
        ++v28;
      }
      while (v28 != v29);
    }
    v45 = CGBitmapContextCreateImage(v26);
    CGContextRelease(v26);
    free(v25);
    v98.data = &v101;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
    writeCGImageWithMetadata(v45, CFSTR("/tmp/CoreRecognitionImages/Debug/contours.png"), 0);
    CGImageRelease(v45);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v46 = *((_DWORD *)this + 28);
  v47 = v109;
  if ((v46 & 0x80000000) != 0)
  {
    v49 = 0;
    v53 = 0;
  }
  else
  {
    v48 = *(const float **)(v109 + 24 * v46);
    v114 = vld2q_f32(v48);
    v96 = v114;
    v49 = (double *)operator new(0x40uLL);
    v50.i64[0] = v96.val[0].i32[2];
    v50.i64[1] = v96.val[0].i32[3];
    v51 = v50;
    v50.i64[0] = v96.val[0].i32[0];
    v50.i64[1] = v96.val[0].i32[1];
    v116.val[0] = vcvtq_f64_s64(v50);
    v50.i64[0] = v96.val[1].i32[0];
    v50.i64[1] = v96.val[1].i32[1];
    v116.val[1] = vcvtq_f64_s64(v50);
    v118.val[0] = vcvtq_f64_s64(v51);
    v52 = v49;
    vst2q_f64(v52, v116);
    v52 += 4;
    v50.i64[0] = v96.val[1].i32[2];
    v50.i64[1] = v96.val[1].i32[3];
    v118.val[1] = vcvtq_f64_s64(v50);
    vst2q_f64(v52, v118);
    v53 = (char *)(v49 + 8);
    a4[1] = v49 + 8;
    a4[2] = v49 + 8;
    *a4 = v49;
  }
  if (v110 != v47)
  {
    v54 = 0;
    v55 = (double *)v53;
    do
    {
      v56 = 0;
      v57 = *(const float **)(v47 + 24 * v54);
      v115 = vld2q_f32(v57);
      v58.i64[0] = v115.val[0].i32[2];
      v58.i64[1] = v115.val[0].i32[3];
      v117.val[0] = vcvtq_f64_s64(v58);
      v58.i64[0] = v115.val[1].i32[2];
      v58.i64[1] = v115.val[1].i32[3];
      v59 = v58;
      v58.i64[0] = v115.val[0].i32[0];
      v58.i64[1] = v115.val[0].i32[1];
      v60 = v58;
      v58.i64[0] = v115.val[1].i32[0];
      v58.i64[1] = v115.val[1].i32[1];
      v119.val[0] = vcvtq_f64_s64(v60);
      v119.val[1] = vcvtq_f64_s64(v58);
      v61 = (double *)&v98;
      vst2q_f64(v61, v119);
      v61 += 4;
      v117.val[1] = vcvtq_f64_s64(v59);
      vst2q_f64(v61, v117);
      v62 = (unsigned __int8 *)a2->data;
      do
      {
        v63 = (double *)&v98 + 2 * v56;
        v65 = *v63;
        v64 = v63[1];
        v66 = (int)(*v63 + -2.0);
        v67 = *v63 + 2.0;
        v68 = (double)v66;
        if (v67 >= (double)v66)
        {
          v69 = (int)(v64 + -2.0);
          v70 = v64 + 2.0;
          do
          {
            if (v70 >= (double)v69)
            {
              v71 = (double)v69;
              v72 = v69;
              do
              {
                if (v66 >= 1
                  && v72 >= 1
                  && a2->width > v66
                  && a2->height > v72
                  && v62[(int)(v66 + v72 * a2->rowBytes)] < v62[(int)(v65 + (double)a2->rowBytes * v64)])
                {
                  v65 = v68;
                  v64 = v71;
                }
                v71 = (double)++v72;
              }
              while (v70 >= (double)v72);
            }
            v68 = (double)++v66;
          }
          while (v67 >= (double)v66);
        }
        *v63 = v65;
        v63[1] = v64;
        ++v56;
      }
      while (v56 != 4);
      v73 = (double)a2->width;
      v74 = (double)a2->height;
      v75 = *(_OWORD *)&v98.data;
      v122.origin.x = 0.0;
      v122.origin.y = 0.0;
      v122.size.width = v73;
      v122.size.height = v74;
      if (CGRectContainsPoint(v122, *(CGPoint *)&v98.data))
      {
        v76 = *(_OWORD *)&v98.width;
        v123.origin.x = 0.0;
        v123.origin.y = 0.0;
        v123.size.width = v73;
        v123.size.height = v74;
        if (CGRectContainsPoint(v123, *(CGPoint *)&v98.width))
        {
          v124.origin.x = 0.0;
          v124.origin.y = 0.0;
          v124.size.width = v73;
          v124.size.height = v74;
          y = v99.y;
          x = v99.x;
          if (CGRectContainsPoint(v124, v99))
          {
            v125.origin.x = 0.0;
            v125.origin.y = 0.0;
            v125.size.width = v73;
            v77 = v100.x;
            v125.size.height = v74;
            v78 = v100.y;
            if (CGRectContainsPoint(v125, v100))
            {
              v79 = (char *)v55 - (char *)v49;
              if (v55 == v49
                || *(v55 - 8) != *(double *)&v75
                || *(v55 - 7) != *((double *)&v75 + 1)
                || *(v55 - 6) != *(double *)&v76
                || *(v55 - 5) != *((double *)&v76 + 1)
                || *(v55 - 4) != x
                || *(v55 - 3) != y
                || *(v55 - 2) != v77
                || *(v55 - 1) != v78)
              {
                if (v55 >= (double *)v53)
                {
                  v83 = v79 >> 6;
                  v84 = (v79 >> 6) + 1;
                  if (v84 >> 58)
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  if ((v53 - (char *)v49) >> 5 > v84)
                    v84 = (v53 - (char *)v49) >> 5;
                  if ((unint64_t)(v53 - (char *)v49) >= 0x7FFFFFFFFFFFFFC0)
                    v85 = 0x3FFFFFFFFFFFFFFLL;
                  else
                    v85 = v84;
                  if (v85)
                  {
                    if (v85 >> 58)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v86 = (char *)operator new(v85 << 6);
                  }
                  else
                  {
                    v86 = 0;
                  }
                  v87 = &v86[64 * v83];
                  v88 = *(_OWORD *)&v98.width;
                  *(_OWORD *)v87 = *(_OWORD *)&v98.data;
                  *((_OWORD *)v87 + 1) = v88;
                  v89 = v100;
                  *((CGPoint *)v87 + 2) = v99;
                  *((CGPoint *)v87 + 3) = v89;
                  if (v55 == v49)
                  {
                    v94 = &v86[64 * v83];
                  }
                  else
                  {
                    v90 = &v86[64 * v83];
                    do
                    {
                      v91 = *((_OWORD *)v55 - 4);
                      v92 = *((_OWORD *)v55 - 3);
                      v93 = *((_OWORD *)v55 - 1);
                      v94 = v90 - 64;
                      *((_OWORD *)v90 - 2) = *((_OWORD *)v55 - 2);
                      *((_OWORD *)v90 - 1) = v93;
                      *((_OWORD *)v90 - 4) = v91;
                      *((_OWORD *)v90 - 3) = v92;
                      v55 -= 8;
                      v90 -= 64;
                    }
                    while (v55 != v49);
                  }
                  v53 = &v86[64 * v85];
                  v55 = (double *)(v87 + 64);
                  *a4 = (double *)v94;
                  a4[1] = (double *)(v87 + 64);
                  a4[2] = (double *)v53;
                  if (v49)
                    operator delete(v49);
                  v49 = (double *)v94;
                }
                else
                {
                  v80 = *(_OWORD *)&v98.data;
                  v81 = *(_OWORD *)&v98.width;
                  v82 = v100;
                  *((CGPoint *)v55 + 2) = v99;
                  *((CGPoint *)v55 + 3) = v82;
                  *(_OWORD *)v55 = v80;
                  *((_OWORD *)v55 + 1) = v81;
                  v55 += 8;
                }
                a4[1] = v55;
              }
            }
          }
        }
      }
      ++v54;
      v47 = v109;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v110 - v109) >> 3) > v54);
    v8 = v113.data;
  }
  free(v8);
  v98.data = v108;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
  v98.data = &v109;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
}

void sub_1D4FE9D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;
  void *v48;

  v48 = *(void **)v46;
  if (*(_QWORD *)v46)
  {
    *(_QWORD *)(v46 + 8) = v48;
    operator delete(v48);
  }
  a15 = (void **)&a43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  a15 = (void **)&a46;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void PolygonApproximateContour(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;
  float v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  const void *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void *__p;
  _BYTE *v91;
  uint64_t v92;
  void *v93;
  _BYTE *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;

  v6 = *(int **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = v5 - *(_QWORD *)a1;
  v8 = v7 >> 3;
  if ((unint64_t)v7 >= 0x18)
  {
    v10 = 0;
    v11 = 0;
    v12 = (float)*v6;
    v13 = &v6[2 * v8];
    v14 = *(v13 - 2);
    v15 = *(v13 - 1);
    v16 = v6 + 1;
    v17 = (float)v6[1];
    v18 = (float)v14;
    v19 = (float)v15;
    v20 = v18 - v12;
    v21 = v19 - v17;
    v22 = (float)(v21 * v21) + (float)(v20 * v20);
    v23 = sqrtf(v22);
    if (v8 <= 1)
      v24 = 1;
    else
      v24 = v8;
    v25 = 0.0;
    do
    {
      v26 = (float)*(v16 - 1);
      v27 = (float)*v16;
      v28 = (float)((float)(v21 * (float)(v27 - v17)) + (float)((float)(v26 - v12) * v20)) / v22;
      if (v28 < 0.0 || v28 > 1.0)
      {
        v30 = (float)((float)(v27 - v17) * (float)(v27 - v17)) + (float)((float)(v26 - v12) * (float)(v26 - v12));
        v31 = (float)((float)(v27 - v19) * (float)(v27 - v19)) + (float)((float)(v26 - v18) * (float)(v26 - v18));
        v32 = sqrtf(v31);
        v33 = sqrtf(v30);
        if (v30 >= v31)
          v34 = v32;
        else
          v34 = v33;
      }
      else
      {
        v34 = v23 * fabsf((float)((float)((float)(v17 - v27) * v20) - (float)((float)(v12 - v26) * v21)) / v22);
      }
      v16 += 2;
      if (v34 > v25)
      {
        v11 = v10;
        v25 = v34;
      }
      ++v10;
    }
    while (v24 != v10);
    if (v25 <= a3)
    {
      v65 = *(_QWORD **)a2;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
      v66 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v65 >= v66)
      {
        v68 = v66 - (_QWORD)v65;
        v69 = v68 >> 2;
        if ((unint64_t)(v68 >> 2) <= 1)
          v69 = 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v69;
        v71 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v70);
        v73 = &v71[v72];
        *v71 = *(_QWORD *)v6;
        v67 = v71 + 1;
        v75 = *(_QWORD **)a2;
        v74 = *(_QWORD **)(a2 + 8);
        if (v74 != *(_QWORD **)a2)
        {
          do
          {
            v76 = *--v74;
            *--v71 = v76;
          }
          while (v74 != v75);
          v74 = *(_QWORD **)a2;
        }
        *(_QWORD *)a2 = v71;
        *(_QWORD *)(a2 + 8) = v67;
        *(_QWORD *)(a2 + 16) = v73;
        if (v74)
          operator delete(v74);
      }
      else
      {
        *v65 = *(_QWORD *)v6;
        v67 = v65 + 1;
      }
      *(_QWORD *)(a2 + 8) = v67;
      v77 = *(_QWORD *)(a1 + 8);
      v78 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v67 >= v78)
      {
        v80 = ((uint64_t)v67 - *(_QWORD *)a2) >> 3;
        if ((unint64_t)(v80 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v81 = v78 - *(_QWORD *)a2;
        v82 = v81 >> 2;
        if (v81 >> 2 <= (unint64_t)(v80 + 1))
          v82 = v80 + 1;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
          v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v83);
        else
          v84 = 0;
        v85 = &v84[8 * v80];
        v86 = &v84[8 * v83];
        *(_QWORD *)v85 = *(_QWORD *)(v77 - 8);
        v79 = v85 + 8;
        v88 = *(_QWORD **)a2;
        v87 = *(_QWORD **)(a2 + 8);
        if (v87 != *(_QWORD **)a2)
        {
          do
          {
            v89 = *--v87;
            *((_QWORD *)v85 - 1) = v89;
            v85 -= 8;
          }
          while (v87 != v88);
          v87 = *(_QWORD **)a2;
        }
        *(_QWORD *)a2 = v85;
        *(_QWORD *)(a2 + 8) = v79;
        *(_QWORD *)(a2 + 16) = v86;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v67 = *(_QWORD *)(v77 - 8);
        v79 = v67 + 1;
      }
      *(_QWORD *)(a2 + 8) = v79;
    }
    else
    {
      v99 = 0;
      v100 = 0;
      v101 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<std::__wrap_iter<PixelPosition const*>,std::__wrap_iter<PixelPosition const*>>(&v99, v6, (uint64_t)&v6[2 * v11 + 2], (8 * v11 + 8) >> 3);
      v35 = *(_QWORD *)(a1 + 8);
      v36 = (const void *)(*(_QWORD *)a1 + 8 * v11 + 8);
      v97 = 0;
      v98 = 0;
      v96 = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<std::__wrap_iter<PixelPosition const*>,std::__wrap_iter<PixelPosition const*>>(&v96, v36, v35, (v35 - (uint64_t)v36) >> 3);
      v93 = 0;
      v94 = 0;
      v95 = 0;
      __p = 0;
      v91 = 0;
      v92 = 0;
      PolygonApproximateContour(&v99, &v93, a3);
      PolygonApproximateContour(&v96, &__p, a3);
      v37 = *(_QWORD **)a2;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
      if (v94 != v93)
      {
        v38 = 0;
        v39 = (_QWORD *)(a2 + 16);
        if ((unint64_t)((v94 - (_BYTE *)v93) >> 3) <= 1)
          v40 = 1;
        else
          v40 = (v94 - (_BYTE *)v93) >> 3;
        do
        {
          v41 = v93;
          if ((unint64_t)v37 >= *v39)
          {
            v42 = ((uint64_t)v37 - *(_QWORD *)a2) >> 3;
            if ((unint64_t)(v42 + 1) >> 61)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v43 = *v39 - *(_QWORD *)a2;
            v44 = v43 >> 2;
            if (v43 >> 2 <= (unint64_t)(v42 + 1))
              v44 = v42 + 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v45 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v45 = v44;
            if (v45)
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v45);
            else
              v46 = 0;
            v47 = &v46[8 * v42];
            *(_QWORD *)v47 = v41[v38];
            v37 = v47 + 8;
            v49 = *(_QWORD **)a2;
            v48 = *(_QWORD **)(a2 + 8);
            if (v48 != *(_QWORD **)a2)
            {
              do
              {
                v50 = *--v48;
                *((_QWORD *)v47 - 1) = v50;
                v47 -= 8;
              }
              while (v48 != v49);
              v48 = *(_QWORD **)a2;
            }
            *(_QWORD *)a2 = v47;
            *(_QWORD *)(a2 + 8) = v37;
            *(_QWORD *)(a2 + 16) = &v46[8 * v45];
            if (v48)
              operator delete(v48);
          }
          else
          {
            *v37++ = *((_QWORD *)v93 + v38);
          }
          *(_QWORD *)(a2 + 8) = v37;
          ++v38;
        }
        while (v38 != v40);
      }
      v51 = __p;
      if ((unint64_t)(v91 - (_BYTE *)__p) >= 9)
      {
        v52 = (_QWORD *)(a2 + 16);
        if ((unint64_t)((v91 - (_BYTE *)__p) >> 3) <= 2)
          v53 = 2;
        else
          v53 = (v91 - (_BYTE *)__p) >> 3;
        v54 = 1;
        do
        {
          v55 = __p;
          if ((unint64_t)v37 >= *v52)
          {
            v56 = ((uint64_t)v37 - *(_QWORD *)a2) >> 3;
            if ((unint64_t)(v56 + 1) >> 61)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v57 = *v52 - *(_QWORD *)a2;
            v58 = v57 >> 2;
            if (v57 >> 2 <= (unint64_t)(v56 + 1))
              v58 = v56 + 1;
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v59);
            else
              v60 = 0;
            v61 = &v60[8 * v56];
            *(_QWORD *)v61 = v55[v54];
            v37 = v61 + 8;
            v63 = *(_QWORD **)a2;
            v62 = *(_QWORD **)(a2 + 8);
            if (v62 != *(_QWORD **)a2)
            {
              do
              {
                v64 = *--v62;
                *((_QWORD *)v61 - 1) = v64;
                v61 -= 8;
              }
              while (v62 != v63);
              v62 = *(_QWORD **)a2;
            }
            *(_QWORD *)a2 = v61;
            *(_QWORD *)(a2 + 8) = v37;
            *(_QWORD *)(a2 + 16) = &v60[8 * v59];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *v37++ = *((_QWORD *)__p + v54);
          }
          *(_QWORD *)(a2 + 8) = v37;
          ++v54;
        }
        while (v54 != v53);
        v51 = __p;
      }
      if (v51)
      {
        v91 = v51;
        operator delete(v51);
      }
      if (v93)
      {
        v94 = v93;
        operator delete(v93);
      }
      if (v96)
      {
        v97 = v96;
        operator delete(v96);
      }
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
    }
  }
  else if (a2 != a1)
  {
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)a2, (char *)v6, v5, v8);
  }
}

void sub_1D4FEA34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<PixelPosition>::__init_with_size[abi:ne180100]<std::__wrap_iter<PixelPosition const*>,std::__wrap_iter<PixelPosition const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FEA514(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<PixelPosition>>::__construct_one_at_end[abi:ne180100]<std::vector<PixelPosition> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1D4FEA578(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<PixelPosition>>::__push_back_slow_path<std::vector<PixelPosition> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<PixelPosition>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1D4FEA680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<PixelPosition>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>,std::reverse_iterator<std::vector<PixelPosition>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::reverse_iterator<std::vector<PixelPosition>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FEA838(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>(int32x2_t *result, int32x2_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  int32x2_t *v8;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int32x2_t v16;
  __int32 v17;
  BOOL v18;
  BOOL v19;
  int *v20;
  char v21;
  BOOL v22;
  __int32 v23;
  _BOOL4 v24;
  int32x2_t v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = a2[-1].i32[0];
        v18 = v23 == v9->i32[0];
        v24 = v23 < v9->i32[0];
        if (v18)
          v24 = a2[-1].i32[1] < v9->i32[1];
        if (v24)
        {
          v25 = *v9;
          *v9 = a2[-1];
          a2[-1] = v25;
        }
        return result;
      case 3uLL:
        return (int32x2_t *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v9, (int *)&v9[1], &a2[-1]);
      case 4uLL:
        return (int32x2_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v9, (int *)&v9[1], (int *)&v9[2], (int *)&a2[-1]);
      case 5uLL:
        return (int32x2_t *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v9, (int *)&v9[1], (int *)&v9[2], (int *)&v9[3], (int *)&a2[-1]);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (int32x2_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v9, (int *)a2);
          else
            return (int32x2_t *)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)&v9[v13 >> 1], (int *)v9, &a2[-1]);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v9, (int *)&v9[v13 >> 1], &a2[-1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)&v9[1], v15 - 2, &a2[-2]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)&v9[2], (int *)&v9[v14 + 1], &a2[-3]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(v15 - 2, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *(int32x2_t *)v15;
            *(int32x2_t *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = v9[-1].i32[0];
          v18 = v17 == v9->i32[0];
          v19 = v17 < v9->i32[0];
          if (v18)
            v19 = v9[-1].i32[1] < v9->i32[1];
          if (!v19)
          {
            result = (int32x2_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>((int *)v9, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>((uint64_t *)v9, (uint64_t *)a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((int *)v9, v20);
          v9 = (int32x2_t *)(v20 + 2);
          result = (int32x2_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(v20 + 2, (int *)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = (int32x2_t *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = (int32x2_t *)(v20 + 2);
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (int32x2_t *)v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,PixelPosition *>(v9, a2, a2, a3);
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *result, int *a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  BOOL v17;
  BOOL v18;
  int *v19;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4[2];
        v6 = v4[3];
        v7 = *v4;
        v8 = v4[1];
        v4 = v2;
        v9 = v6 < v8;
        v10 = v5 == v7;
        v11 = v5 < v7;
        if (!v10)
          v9 = v11;
        if (v9)
        {
          v12 = *(_QWORD *)v4;
          v13 = HIDWORD(*(_QWORD *)v4);
          v14 = v3;
          while (1)
          {
            v15 = (char *)result + v14;
            *(_QWORD *)((char *)result + v14 + 8) = *(_QWORD *)((char *)result + v14);
            if (!v14)
              break;
            v16 = *((_DWORD *)v15 - 2);
            v17 = *((_DWORD *)v15 - 1) > (int)v13;
            v10 = v16 == (_DWORD)v12;
            v18 = v16 > (int)v12;
            if (!v10)
              v17 = v18;
            v14 -= 8;
            if (!v17)
            {
              v19 = (int *)((char *)result + v14 + 8);
              goto LABEL_14;
            }
          }
          v19 = result;
LABEL_14:
          *(_QWORD *)v19 = v12;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(_DWORD *result, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  BOOL v16;

  if (result != a2)
  {
    while (result + 2 != a2)
    {
      v2 = result[2];
      v3 = result[3];
      v4 = *result;
      v5 = result[1];
      result += 2;
      v6 = v3 < v5;
      v7 = v2 == v4;
      v8 = v2 < v4;
      if (!v7)
        v6 = v8;
      if (v6)
      {
        v9 = *(_QWORD *)result;
        v10 = HIDWORD(*(_QWORD *)result);
        v11 = result;
        do
        {
          v12 = v11;
          v13 = *--v11;
          *v12 = v13;
          v14 = *((_DWORD *)v12 - 4);
          v15 = *((_DWORD *)v12 - 3) > (int)v10;
          v7 = v14 == (_DWORD)v9;
          v16 = v14 > (int)v9;
          if (!v7)
            v15 = v16;
        }
        while (v15);
        *v11 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2, _DWORD *a3)
{
  int v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a2 < *a1;
  if (*a2 == *a1)
    v5 = v4 < a1[1];
  v6 = a3[1] < v4;
  v7 = *a3 == v3;
  v8 = *a3 < v3;
  if (!v7)
    v6 = v8;
  if (v5)
  {
    v9 = *(_QWORD *)a1;
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v9;
    v13 = *a3 < (int)v9;
    if (*a3 == (_DWORD)v9)
      v13 = a3[1] < SHIDWORD(v9);
    if (!v13)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v9;
    return 2;
  }
  if (v6)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v10;
    v11 = *a2 < *a1;
    if (*a2 == *a1)
      v11 = a2[1] < a1[1];
    if (!v11)
      return 1;
    v12 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v12;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>(int *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  int *v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  int v26;
  BOOL v27;
  BOOL v28;

  v2 = *(_QWORD *)a1;
  v3 = HIDWORD(*(_QWORD *)a1);
  v4 = *((_DWORD *)a2 - 2);
  v5 = v4 == *(_QWORD *)a1;
  v6 = v4 > (int)*(_QWORD *)a1;
  if (v5)
    v6 = *((_DWORD *)a2 - 1) > (int)v3;
  if (v6)
  {
    v7 = a1;
    do
    {
      v8 = v7[2];
      v9 = v7[3];
      v7 += 2;
      v10 = v9 > (int)v3;
      v5 = v8 == (_DWORD)v2;
      v11 = v8 > (int)v2;
      if (v5)
        v11 = v10;
    }
    while (!v11);
  }
  else
  {
    v12 = a1 + 2;
    do
    {
      v7 = v12;
      if (v12 >= (int *)a2)
        break;
      v13 = *v12;
      v14 = v7[1] > (int)v3;
      v5 = v13 == (_DWORD)v2;
      v15 = v13 > (int)v2;
      if (!v5)
        v14 = v15;
      v12 = v7 + 2;
    }
    while (!v14);
  }
  if (v7 < (int *)a2)
  {
    do
    {
      v16 = *((_DWORD *)a2 - 2);
      v17 = *((_DWORD *)a2-- - 1);
      v18 = v17 > (int)v3;
      v5 = v16 == (_DWORD)v2;
      v19 = v16 > (int)v2;
      if (v5)
        v19 = v18;
    }
    while (v19);
  }
  while (v7 < (int *)a2)
  {
    v20 = *(_QWORD *)v7;
    *(_QWORD *)v7 = *a2;
    *a2 = v20;
    do
    {
      v21 = v7[2];
      v22 = v7[3];
      v7 += 2;
      v23 = v22 > (int)v3;
      v5 = v21 == (_DWORD)v2;
      v24 = v21 > (int)v2;
      if (v5)
        v24 = v23;
    }
    while (!v24);
    do
    {
      v25 = *((_DWORD *)a2 - 2);
      v26 = *((_DWORD *)a2-- - 1);
      v27 = v26 > (int)v3;
      v5 = v25 == (_DWORD)v2;
      v28 = v25 > (int)v2;
      if (v5)
        v28 = v27;
    }
    while (v28);
  }
  if (v7 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v7 - 1);
  *((_QWORD *)v7 - 1) = v2;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PixelPosition *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;

  v2 = 0;
  v3 = *a1;
  v4 = HIDWORD(*a1);
  do
  {
    v5 = a1[v2 + 1];
    v6 = SHIDWORD(a1[v2 + 1]) < (int)v4;
    v7 = v5 == (_DWORD)v3;
    v8 = v5 < (int)v3;
    if (!v7)
      v6 = v8;
    ++v2;
  }
  while (v6);
  v9 = &a1[v2];
  v10 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v15 = *((_DWORD *)a2 - 2);
      v16 = *((_DWORD *)a2-- - 1);
      v17 = v16 < (int)v4;
      v7 = v15 == (_DWORD)v3;
      v18 = v15 < (int)v3;
      if (v7)
        v18 = v17;
    }
    while (!v18);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)a2 - 2);
      v12 = *((_DWORD *)a2-- - 1);
      v13 = v12 < (int)v4;
      v7 = v11 == (_DWORD)v3;
      v14 = v11 < (int)v3;
      if (v7)
        v14 = v13;
    }
    while (!v14);
  }
  if (v9 < a2)
  {
    v19 = (unint64_t)v9;
    v20 = a2;
    do
    {
      v21 = *(_QWORD *)v19;
      *(_QWORD *)v19 = *v20;
      *v20 = v21;
      do
      {
        v22 = *(_DWORD *)(v19 + 8);
        v23 = *(_DWORD *)(v19 + 12);
        v19 += 8;
        v24 = v23 < (int)v4;
        v7 = v22 == (_DWORD)v3;
        v25 = v22 < (int)v3;
        if (v7)
          v25 = v24;
      }
      while (v25);
      do
      {
        v26 = *((_DWORD *)v20 - 2);
        v27 = *((_DWORD *)v20-- - 1);
        v28 = v27 < (int)v4;
        v7 = v26 == (_DWORD)v3;
        v29 = v26 < (int)v3;
        if (v7)
          v29 = v28;
      }
      while (!v29);
    }
    while (v19 < (unint64_t)v20);
    v10 = (uint64_t *)(v19 - 8);
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v3;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  BOOL v20;
  BOOL v21;
  int *v22;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = v6 == *a1;
      v8 = v6 < *a1;
      if (v7)
        v8 = *(a2 - 1) < a1[1];
      if (v8)
      {
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v11 < *v10;
    if (*v11 == *v10)
      v14 = v11[1] < v10[1];
    if (v14)
    {
      v15 = *(_QWORD *)v11;
      v16 = HIDWORD(*(_QWORD *)v11);
      v17 = v12;
      while (1)
      {
        v18 = (char *)a1 + v17;
        *(_QWORD *)((char *)a1 + v17 + 24) = *(_QWORD *)((char *)a1 + v17 + 16);
        if (v17 == -16)
          break;
        v19 = *((_DWORD *)v18 + 2);
        v20 = *((_DWORD *)v18 + 3) > (int)v16;
        v7 = v19 == (_DWORD)v15;
        v21 = v19 > (int)v15;
        if (!v7)
          v20 = v21;
        v17 -= 8;
        if (!v20)
        {
          v22 = (int *)((char *)a1 + v17 + 24);
          goto LABEL_18;
        }
      }
      v22 = a1;
LABEL_18:
      *(_QWORD *)v22 = v15;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a2, a3);
  v9 = *a4 < *a3;
  if (*a4 == *a3)
    v9 = a4[1] < a3[1];
  if (v9)
  {
    v10 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v10;
    v11 = *a3 < *a2;
    if (*a3 == *a2)
      v11 = a3[1] < a2[1];
    if (v11)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v13 = *a2 < *a1;
      if (*a2 == *a1)
        v13 = a2[1] < a1[1];
      if (v13)
      {
        v14 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] < a4[1];
  if (v11)
  {
    v12 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v12;
    v13 = *a4 < *a3;
    if (*a4 == *a3)
      v13 = a4[1] < a3[1];
    if (v13)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      v15 = *a3 < *a2;
      if (*a3 == *a2)
        v15 = a3[1] < a2[1];
      if (v15)
      {
        v16 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v16;
        v17 = *a2 < *a1;
        if (*a2 == *a1)
          v17 = a2[1] < a1[1];
        if (v17)
        {
          v18 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v18;
        }
      }
    }
  }
  return result;
}

int32x2_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,PixelPosition *>(int32x2_t *a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x2_t *v12;
  int32x2_t *v13;
  int32x2_t *v14;
  _BOOL4 v15;
  int32x2_t v16;
  uint64_t v17;
  int32x2_t *v18;
  int32x2_t v19;
  int32x2_t *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = v14->i32[0] < a1->i32[0];
        if (v14->i32[0] == a1->i32[0])
          v15 = v14->i32[1] < a1->i32[1];
        if (v15)
        {
          v16 = *v14;
          *v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>((uint64_t)a1, (uint64_t)&v20[1], a4, &v20[1] - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(uint64_t result, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  int32x2_t v10;
  int32x2_t v11;
  __int32 v12;
  __int8 v13;
  BOOL v14;
  BOOL v15;
  int32x2_t v16;
  unint64_t v17;
  int32x2_t *v18;
  uint64_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int v22;
  __int8 v23;
  _BOOL4 v24;
  _BOOL4 v25;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (int32x2_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        v12 = v8->i32[0];
      }
      else
      {
        v10 = v8[1];
        v11 = vcgt_s32(v10, *v8);
        v12 = (__int32)*v8;
        v13 = v11.i8[4];
        if (v12 != v10.i32[0])
          v13 = v11.i8[0];
        if ((v13 & 1) != 0)
        {
          v12 = (__int32)v8[1];
          ++v8;
          v7 = v9;
        }
      }
      v14 = v12 == a4->i32[0];
      v15 = v12 < a4->i32[0];
      if (v14)
        v15 = v8->i32[1] < a4->i32[1];
      if (!v15)
      {
        v16 = *a4;
        v17 = HIDWORD(*(unint64_t *)a4);
        do
        {
          v18 = a4;
          a4 = v8;
          *v18 = *v8;
          if (v5 < v7)
            break;
          v19 = (2 * v7) | 1;
          v8 = (int32x2_t *)(result + 8 * v19);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v22 = v8->i32[0];
            v7 = v19;
          }
          else
          {
            v20 = v8[1];
            v21 = vcgt_s32(v20, *v8);
            v22 = (int)*v8;
            v23 = v21.i8[4];
            if (v22 != v20.i32[0])
              v23 = v21.i8[0];
            if ((v23 & 1) != 0)
            {
              v22 = (int)v8[1];
              ++v8;
            }
            else
            {
              v7 = v19;
            }
          }
          v24 = v8->i32[1] < (int)v17;
          v14 = v22 == v16.i32[0];
          v25 = v22 < v16.i32[0];
          if (!v14)
            v24 = v25;
        }
        while (!v24);
        *a4 = v16;
      }
    }
  }
  return result;
}

int32x2_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  unsigned __int8 v10;
  int32x2_t v11;
  __int8 v12;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3 + 1];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = v6[1];
      v10 = vceq_s32(*v6, v9).u8[0];
      v11 = vcgt_s32(v9, *v6);
      if ((v10 & 1) != 0)
        v12 = v11.i8[4];
      else
        v12 = v11.i8[0];
      if ((v12 & 1) != 0)
      {
        ++v6;
        v7 = v8;
      }
    }
    *a1 = *v6;
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int32x2_t *v5;
  int32x2_t *v6;
  int32x2_t v7;
  int32x2_t v8;
  __int8 v9;
  int32x2_t v10;
  unint64_t v11;
  int32x2_t *v12;
  BOOL v13;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (int32x2_t *)(result + 8 * v4);
    v7 = *(int32x2_t *)(a2 - 8);
    v6 = (int32x2_t *)(a2 - 8);
    v8 = vcgt_s32(v7, *v5);
    v9 = (vceq_s32(*v5, v7).u8[0] & 1) != 0 ? v8.i8[4] : v8.i8[0];
    if ((v9 & 1) != 0)
    {
      v10 = *v6;
      v11 = HIDWORD(*(unint64_t *)v6);
      do
      {
        v12 = v6;
        v6 = v5;
        *v12 = *v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (int32x2_t *)(result + 8 * v4);
        v13 = v5->i32[0] < v10.i32[0];
        if (v5->i32[0] == v10.i32[0])
          v13 = v5->i32[1] < (int)v11;
      }
      while (v13);
      *v6 = v10;
    }
  }
  return result;
}

_QWORD *std::vector<std::vector<PixelPosition>>::__init_with_size[abi:ne180100]<std::vector<PixelPosition>*,std::vector<PixelPosition>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D4FEB7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1D4FEB860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

id *CRTextTokenPath::operator=(id *location, uint64_t a2)
{
  if (location != (id *)a2)
  {
    objc_storeStrong(location, *(id *)a2);
    location[1] = *(id *)(a2 + 8);
  }
  return location;
}

void CRTextTokenPath::CRTextTokenPath(CRTextTokenPath *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void CRTextTokenPath::CRTextTokenPath(CRTextTokenPath *this, void *a2)
{
  *(_QWORD *)this = a2;
}

{
  *(_QWORD *)this = a2;
}

void CRTextTokenPath::CRTextTokenPath(CRTextTokenPath *this, NSIndexPath *a2, double a3)
{
  *(_QWORD *)this = a2;
  *((double *)this + 1) = a3;
}

{
  *(_QWORD *)this = a2;
  *((double *)this + 1) = a3;
}

double CRTextTokenPath::getScore(CRTextTokenPath *this)
{
  return *((double *)this + 1);
}

uint64_t operator==(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 8) == *(double *)(a2 + 8))
    return objc_msgSend(*(id *)a1, "isEqual:", *(_QWORD *)a2);
  else
    return 0;
}

BOOL operator<(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

void sub_1D4FEBAF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FEBC08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FEBE0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FEC088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D4FEC1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FEC650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  void *v37;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D4FEDB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  void *v53;
  void *v54;

  if (__p)
    operator delete(__p);
  if (a45)
    operator delete(a45);
  if (a49)
    operator delete(a49);
  if (a52)
    operator delete(a52);

  _Unwind_Resume(a1);
}

void std::vector<`anonymous namespace'::FieldCandidateEntry>::reserve(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v4 = (char *)*a1;
    v3 = (char *)a1[1];
    v5 = v11;
    if (v3 == (char *)*a1)
    {
      v8 = (char *)a1[1];
    }
    else
    {
      do
      {
        v6 = *((_OWORD *)v3 - 3);
        v7 = *((_OWORD *)v3 - 1);
        *((_OWORD *)v5 - 2) = *((_OWORD *)v3 - 2);
        *((_OWORD *)v5 - 1) = v7;
        *((_OWORD *)v5 - 3) = v6;
        v5 -= 48;
        v3 -= 48;
      }
      while (v3 != v4);
      v8 = (char *)*a1;
      v3 = (char *)a1[1];
    }
    *a1 = v5;
    v9 = a1[2];
    *(_OWORD *)(a1 + 1) = v12;
    *(_QWORD *)&v12 = v3;
    *((_QWORD *)&v12 + 1) = v9;
    v10 = v8;
    v11 = v8;
    if (v3 != v8)
      *(_QWORD *)&v12 = &v8[(v3 - v8 - 48) % 0x30uLL];
    if (v8)
      operator delete(v8);
  }
}

void `anonymous namespace'::applyGeometryFiltering(void **a1, double **a2, double *a3)
{
  double *v6;
  __int128 *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  _BYTE *v30;
  unint64_t v31;
  NSObject *v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE v35[24];
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *a2;
  v7 = (__int128 *)a2[1];
  if (*a2 != (double *)v7)
  {
    do
    {
      v8 = v6[4] / a3[1];
      if (v8 >= 0.005)
      {
        v9 = v6[3] / *a3;
        if (v9 >= 0.005)
        {
          v10 = v9 >= v8 ? v6[3] / *a3 : v6[4] / a3[1];
          v11 = v8 >= v9 ? v6[3] / *a3 : v6[4] / a3[1];
          v12 = v10 <= v11 * 50.0 && v9 <= 1.0;
          if (v12 && v8 <= 0.3)
          {
            v13 = a1[1];
            v14 = (unint64_t)a1[2];
            if ((unint64_t)v13 >= v14)
            {
              v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (_BYTE *)*a1) >> 4);
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) > 0x555555555555555)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)*a1) >> 4);
              if (2 * v20 > v19)
                v19 = 2 * v20;
              if (v20 >= 0x2AAAAAAAAAAAAAALL)
                v21 = 0x555555555555555;
              else
                v21 = v19;
              v22 = *(_OWORD **)&v35[16];
              v23 = *(_OWORD *)v6;
              v24 = *((_OWORD *)v6 + 2);
              *(_OWORD *)(*(_QWORD *)&v35[16] + 16) = *((_OWORD *)v6 + 1);
              v22[2] = v24;
              *v22 = v23;
              v26 = (char *)*a1;
              v25 = (char *)a1[1];
              v27 = *(char **)&v35[8];
              if (v25 == *a1)
              {
                v30 = a1[1];
              }
              else
              {
                do
                {
                  v28 = *((_OWORD *)v25 - 3);
                  v29 = *((_OWORD *)v25 - 1);
                  *((_OWORD *)v27 - 2) = *((_OWORD *)v25 - 2);
                  *((_OWORD *)v27 - 1) = v29;
                  *((_OWORD *)v27 - 3) = v28;
                  v27 -= 48;
                  v25 -= 48;
                }
                while (v25 != v26);
                v30 = *a1;
                v25 = (char *)a1[1];
              }
              v17 = v22 + 3;
              *a1 = v27;
              a1[1] = v22 + 3;
              v31 = (unint64_t)a1[2];
              a1[2] = (void *)v36;
              *(_QWORD *)&v35[16] = v25;
              v36 = v31;
              *(_QWORD *)v35 = v30;
              *(_QWORD *)&v35[8] = v30;
              if (v25 != v30)
                *(_QWORD *)&v35[16] = &v25[-48 - 48 * ((v25 - v30 - 48) / 0x30uLL)];
              if (v30)
                operator delete(v30);
            }
            else
            {
              v15 = *(_OWORD *)v6;
              v16 = *((_OWORD *)v6 + 2);
              v13[1] = *((_OWORD *)v6 + 1);
              v13[2] = v16;
              *v13 = v15;
              v17 = v13 + 3;
            }
            a1[1] = v17;
          }
        }
      }
      v6 += 6;
    }
    while (v6 != (double *)v7);
  }
  CROSLogForCategory(6);
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4);
    v34 = v33 + 0x5555555555555555 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
    *(_DWORD *)v35 = 136315650;
    *(_QWORD *)&v35[4] = "applyGeometryFiltering";
    *(_WORD *)&v35[12] = 2048;
    *(_QWORD *)&v35[14] = v34;
    *(_WORD *)&v35[22] = 2048;
    v36 = v33;
    _os_log_impl(&dword_1D4FB8000, v32, OS_LOG_TYPE_DEBUG, "%s: Filtered %lu/%lu candidates based on geometrical rules.", v35, 0x20u);
  }

}

void sub_1D4FEE1F0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::vector<`anonymous namespace'::FieldCandidateEntry>::insert<std::__wrap_iter<`anonymous namespace'::FieldCandidateEntry*>,0>(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  char *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  int64_t v28;
  char *v29;
  char *v30;
  __int128 *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  if (a4 - __src < 1)
    return;
  v4 = __src;
  v6 = (a4 - __src) / 48;
  v7 = *(char **)a1;
  v8 = (a2 - *(_QWORD *)a1) / 48;
  v9 = (char *)(*(_QWORD *)a1 + 48 * v8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v11) >> 4)) < v6)
  {
    v12 = v6 - 0x5555555555555555 * ((uint64_t)(v11 - (_QWORD)v7) >> 4);
    if (v12 > 0x555555555555555)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v7) >> 4);
    v14 = 2 * v13;
    if (2 * v13 <= v12)
      v14 = v12;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v15 = 0x555555555555555;
    else
      v15 = v14;
    v16 = v41;
    v17 = &v41[48 * v6];
    v18 = 48 * v6;
    do
    {
      v19 = *(_OWORD *)v4;
      v20 = *((_OWORD *)v4 + 2);
      v16[1] = *((_OWORD *)v4 + 1);
      v16[2] = v20;
      *v16 = v19;
      v16 += 3;
      v4 += 48;
      v18 -= 48;
    }
    while (v18);
    v21 = v40;
    v22 = *(char **)a1;
    if (*(char **)a1 == v9)
    {
      v26 = v40;
    }
    else
    {
      v23 = v9;
      do
      {
        v24 = *((_OWORD *)v23 - 3);
        v25 = *((_OWORD *)v23 - 1);
        v26 = v21 - 48;
        *((_OWORD *)v21 - 2) = *((_OWORD *)v23 - 2);
        *((_OWORD *)v21 - 1) = v25;
        *((_OWORD *)v21 - 3) = v24;
        v23 -= 48;
        v21 -= 48;
      }
      while (v23 != v22);
    }
    v40 = v26;
    v35 = *(_BYTE **)(a1 + 8);
    v36 = v35 - v9;
    if (v35 != v9)
    {
      memmove(v17, v9, v35 - v9);
      v26 = v40;
      v9 = *(char **)(a1 + 8);
    }
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v17[v36];
    v38 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42;
    v41 = v9;
    v42 = v38;
    v39 = v37;
    v40 = v37;
    if (v9 != v37)
      v41 = &v37[(v9 - v37 - 48) % 0x30uLL];
    if (v37)
      operator delete(v37);
    return;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v9) >> 4)) >= v6)
  {
    v27 = &v4[48 * v6];
    v29 = *(char **)(a1 + 8);
LABEL_21:
    v30 = &v9[48 * v6];
    v31 = (__int128 *)&v29[-48 * v6];
    v32 = v29;
    if ((unint64_t)v31 < v11)
    {
      v32 = v29;
      do
      {
        v33 = *v31;
        v34 = v31[2];
        *((_OWORD *)v32 + 1) = v31[1];
        *((_OWORD *)v32 + 2) = v34;
        *(_OWORD *)v32 = v33;
        v32 += 48;
        v31 += 3;
      }
      while ((unint64_t)v31 < v11);
    }
    *(_QWORD *)(a1 + 8) = v32;
    if (v29 != v30)
      memmove(&v9[48 * v6], v9, v29 - v30);
    if (v27 != v4)
      memmove(v9, v4, v27 - v4);
    return;
  }
  v27 = &v4[16 * ((uint64_t)(v11 - (_QWORD)v9) >> 4)];
  v28 = a4 - v27;
  if (a4 != v27)
    memmove(*(void **)(a1 + 8), &v4[16 * ((uint64_t)(v11 - (_QWORD)v9) >> 4)], a4 - v27);
  v29 = (char *)(v11 + v28);
  *(_QWORD *)(a1 + 8) = v11 + v28;
  if ((uint64_t)(v11 - (_QWORD)v9) >= 1)
    goto LABEL_21;
}

void `anonymous namespace'::applyNonMaximaSuppression(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat *v13;
  CGFloat *v14;
  CGFloat *v15;
  uint64_t v16;
  CGFloat *v17;
  CGFloat *v18;
  uint64_t v19;
  double width;
  double height;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _BYTE *v43;
  unint64_t v44;
  NSObject *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  void *__p;
  _BYTE buf[24];
  unint64_t v52;
  uint64_t v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  buf[0] = 1;
  std::vector<BOOL>::vector(&__p, v5, buf);
  v6 = *v4;
  v7 = *a2;
  v48 = a1;
  if (*v4 == *a2)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((*v4 - *a2) >> 4);
  }
  else
  {
    v8 = 0;
    do
    {
      if (((*(_QWORD *)((char *)__p + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        v9 = v8 + 1;
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
        if (v8 + 1 < v10)
        {
          v11 = v7 + 48 * v8;
          v12 = 3 * v8;
          v13 = (CGFloat *)(v7 + 16 * v12);
          v14 = (CGFloat *)(v11 + 8);
          v15 = v13 + 2;
          v16 = 16 * v12;
          v17 = v13 + 3;
          v18 = v13 + 4;
          v49 = v9;
          do
          {
            if ((*((_QWORD *)__p + (v9 >> 6)) & (1 << v9)) != 0)
            {
              v19 = v7 + v16;
              v54.origin.x = *v14;
              v54.origin.y = *v15;
              v54.size.width = *v17;
              v54.size.height = *v18;
              v55 = CGRectIntersection(v54, *(CGRect *)(v7 + v16 + 56));
              width = v55.size.width;
              height = v55.size.height;
              v55.origin.x = *v14;
              v55.origin.y = *v15;
              v55.size.width = *v17;
              v55.size.height = *v18;
              v56 = CGRectUnion(v55, *(CGRect *)(v19 + 56));
              if (v56.size.width != 0.0
                && v56.size.height != 0.0
                && (width * height / (v56.size.width * v56.size.height) >= 0.074928
                 || width * height / fmin(*v17 * *v18, *(double *)(v19 + 72) * *(double *)(v19 + 80)) >= 0.358648))
              {
                *((_QWORD *)__p + (v9 >> 6)) &= ~(1 << v9);
              }
            }
            ++v9;
            v7 = *a2;
            v6 = a2[1];
            v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 4);
            v16 += 48;
          }
          while (v9 < v10);
          a1 = v48;
          v9 = v49;
        }
      }
      else
      {
        v9 = v8 + 1;
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
      }
      v8 = v9;
    }
    while (v9 < v10);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v23 = *a2;
  v22 = a2[1];
  if (v22 != *a2)
  {
    v24 = 0;
    do
    {
      if (((*(_QWORD *)((char *)__p + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
      {
        v25 = (__int128 *)(v23 + 48 * v24);
        v26 = (_OWORD *)a1[1];
        v27 = a1[2];
        if ((unint64_t)v26 >= v27)
        {
          v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - *a1) >> 4);
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) > 0x555555555555555)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a1) >> 4);
          if (2 * v33 > v32)
            v32 = 2 * v33;
          if (v33 >= 0x2AAAAAAAAAAAAAALL)
            v34 = 0x555555555555555;
          else
            v34 = v32;
          v35 = *(_OWORD **)&buf[16];
          v36 = *v25;
          v37 = v25[2];
          *(_OWORD *)(*(_QWORD *)&buf[16] + 16) = v25[1];
          v35[2] = v37;
          *v35 = v36;
          v39 = (char *)*a1;
          v38 = (char *)a1[1];
          v40 = *(_QWORD *)&buf[8];
          if (v38 == (char *)*a1)
          {
            v43 = (_BYTE *)a1[1];
          }
          else
          {
            do
            {
              v41 = *((_OWORD *)v38 - 3);
              v42 = *((_OWORD *)v38 - 1);
              *(_OWORD *)(v40 - 32) = *((_OWORD *)v38 - 2);
              *(_OWORD *)(v40 - 16) = v42;
              *(_OWORD *)(v40 - 48) = v41;
              v40 -= 48;
              v38 -= 48;
            }
            while (v38 != v39);
            v43 = (_BYTE *)*a1;
            v38 = (char *)a1[1];
          }
          v30 = v35 + 3;
          *a1 = v40;
          a1[1] = v35 + 3;
          v44 = a1[2];
          a1[2] = v52;
          *(_QWORD *)&buf[16] = v38;
          v52 = v44;
          *(_QWORD *)buf = v43;
          *(_QWORD *)&buf[8] = v43;
          if (v38 != v43)
            *(_QWORD *)&buf[16] = &v38[-48 - 48 * ((v38 - v43 - 48) / 0x30uLL)];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v28 = *v25;
          v29 = v25[2];
          v26[1] = v25[1];
          v26[2] = v29;
          *v26 = v28;
          v30 = v26 + 3;
        }
        a1[1] = v30;
        v23 = *a2;
        v22 = a2[1];
      }
      ++v24;
    }
    while (v24 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 4));
  }
  CROSLogForCategory(6);
  v45 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    v46 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
    v47 = v46 + 0x5555555555555555 * ((uint64_t)(a1[1] - *a1) >> 4);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "applyNonMaximaSuppression";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v47;
    *(_WORD *)&buf[22] = 2048;
    v52 = v46;
    _os_log_impl(&dword_1D4FB8000, v45, OS_LOG_TYPE_DEBUG, "%s: Filtered %lu/%lu candidates.", buf, 0x20u);
  }

  if (__p)
    operator delete(__p);
}

void sub_1D4FEE970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  void *v13;

  v13 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<`anonymous namespace'::FieldCandidateEntry>::emplace_back<float &,CGRect,unsigned long &>(char **a1, _DWORD *a2, _OWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  v8 = (unint64_t)a1[2];
  v9 = (unint64_t)a1[1];
  if (v9 >= v8)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)*a1) >> 4);
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) > 0x555555555555555)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)*a1) >> 4);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x2AAAAAAAAAAAAAALL)
      v16 = 0x555555555555555;
    else
      v16 = v14;
    v17 = v29;
    v18 = *a4;
    *(_DWORD *)v29 = *a2;
    v19 = a3[1];
    *(_OWORD *)(v17 + 8) = *a3;
    *(_OWORD *)(v17 + 24) = v19;
    *((_QWORD *)v17 + 5) = v18;
    v12 = v17 + 48;
    v21 = *a1;
    v20 = a1[1];
    v22 = v28;
    if (v20 == *a1)
    {
      v25 = a1[1];
    }
    else
    {
      do
      {
        v23 = *((_OWORD *)v20 - 3);
        v24 = *((_OWORD *)v20 - 1);
        *((_OWORD *)v22 - 2) = *((_OWORD *)v20 - 2);
        *((_OWORD *)v22 - 1) = v24;
        *((_OWORD *)v22 - 3) = v23;
        v22 -= 48;
        v20 -= 48;
      }
      while (v20 != v21);
      v25 = *a1;
      v20 = a1[1];
    }
    *a1 = v22;
    a1[1] = v12;
    v26 = a1[2];
    a1[2] = v30;
    v29 = v20;
    v30 = v26;
    v27 = v25;
    v28 = v25;
    if (v20 != v25)
      v29 = &v25[(v20 - v25 - 48) % 0x30uLL];
    if (v25)
      operator delete(v25);
  }
  else
  {
    v10 = *a4;
    *(_DWORD *)v9 = *a2;
    v11 = a3[1];
    *(_OWORD *)(v9 + 8) = *a3;
    *(_OWORD *)(v9 + 24) = v11;
    *(_QWORD *)(v9 + 40) = v10;
    v12 = (char *)(v9 + 48);
  }
  a1[1] = v12;
}

_QWORD *std::__split_buffer<`anonymous namespace'::FieldCandidateEntry>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[48 * a2];
  return a1;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_QWORD *std::vector<CGRect>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGRect>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1D4FEEECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGRect>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<`anonymous namespace'::FieldCandidateEntry>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(48 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<`anonymous namespace'::FieldCandidateEntry *>,std::__wrap_iter<`anonymous namespace'::FieldCandidateEntry *>>(char *__src, char *a2, char *a3)
{
  unint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  BOOL v12;
  int64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  char *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 48 == a2)
    {
      v33 = *(_OWORD *)__src;
      v36 = *((_OWORD *)__src + 1);
      v38 = *((_OWORD *)__src + 2);
      v13 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      a3 = &__src[v13];
      *(_OWORD *)a3 = v33;
      *((_OWORD *)a3 + 1) = v36;
      *((_OWORD *)a3 + 2) = v38;
    }
    else if (a2 + 48 == a3)
    {
      v34 = *((_OWORD *)a3 - 3);
      v37 = *((_OWORD *)a3 - 2);
      v39 = *((_OWORD *)a3 - 1);
      v14 = a3 - 48 - __src;
      if (v14)
        memmove(__src + 48, __src, v14);
      *(_OWORD *)__src = v34;
      *((_OWORD *)__src + 1) = v37;
      *((_OWORD *)__src + 2) = v39;
      return __src + 48;
    }
    else
    {
      v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
      if (v4 == 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4))
      {
        v5 = __src + 48;
        v6 = a2 + 48;
        do
        {
          v7 = *((_OWORD *)v5 - 3);
          v8 = *((_OWORD *)v5 - 2);
          v9 = *((_OWORD *)v5 - 1);
          v11 = *((_OWORD *)v6 - 2);
          v10 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v5 - 3) = *((_OWORD *)v6 - 3);
          *((_OWORD *)v5 - 2) = v11;
          *((_OWORD *)v5 - 1) = v10;
          *((_OWORD *)v6 - 2) = v8;
          *((_OWORD *)v6 - 1) = v9;
          *((_OWORD *)v6 - 3) = v7;
          if (v5 == a2)
            break;
          v5 += 48;
          v12 = v6 == a3;
          v6 += 48;
        }
        while (!v12);
        return a2;
      }
      else
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
        v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
        do
        {
          v17 = v16;
          v16 = v15;
          v15 = v17 % v15;
        }
        while (v15);
        if (v16)
        {
          v18 = &__src[48 * v16];
          do
          {
            v19 = *((_OWORD *)v18 - 3);
            v20 = *((_OWORD *)v18 - 2);
            v21 = *((_OWORD *)v18 - 1);
            v18 -= 48;
            v35 = v19;
            v40 = v21;
            v22 = &v18[16 * ((a2 - __src) >> 4)];
            v23 = v18;
            do
            {
              v24 = v22;
              v25 = *(_OWORD *)v22;
              v26 = *((_OWORD *)v22 + 2);
              *((_OWORD *)v23 + 1) = *((_OWORD *)v22 + 1);
              *((_OWORD *)v23 + 2) = v26;
              *(_OWORD *)v23 = v25;
              v27 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v22) >> 4);
              v22 += 16 * ((a2 - __src) >> 4);
              v28 = __OFSUB__(v4, v27);
              v30 = v4 - v27;
              v29 = (v30 < 0) ^ v28;
              v31 = &__src[48 * v30];
              if (!v29)
                v22 = v31;
              v23 = v24;
            }
            while (v22 != v18);
            *((_OWORD *)v24 + 1) = v20;
            *((_OWORD *)v24 + 2) = v40;
            *(_OWORD *)v24 = v35;
          }
          while (v18 != __src);
        }
        return &__src[16 * ((a3 - a2) >> 4)];
      }
    }
  }
  return a3;
}

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v44 = *(a2 - 12);
        v43 = a2 - 12;
        if (v44 > *(float *)v8)
        {
          v129 = *(_OWORD *)(v8 + 16);
          v139 = *(_OWORD *)(v8 + 32);
          v120 = *(_OWORD *)v8;
          v45 = *(_OWORD *)v43;
          v46 = *((_OWORD *)v43 + 2);
          *(_OWORD *)(v8 + 16) = *((_OWORD *)v43 + 1);
          *(_OWORD *)(v8 + 32) = v46;
          *(_OWORD *)v8 = v45;
          *((_OWORD *)v43 + 1) = v129;
          *((_OWORD *)v43 + 2) = v139;
          *(_OWORD *)v43 = v120;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        v47 = (__int128 *)(v8 + 48);
        v48 = (__int128 *)(v8 + 96);
        v49 = (__int128 *)(v8 + 144);
        v51 = *(a2 - 12);
        v50 = a2 - 12;
        if (v51 > *(float *)(v8 + 144))
        {
          v52 = *v49;
          v130 = *(_OWORD *)(v8 + 160);
          v53 = *(_OWORD *)(v8 + 176);
          v54 = *(_OWORD *)v50;
          v55 = *((_OWORD *)v50 + 2);
          *(_OWORD *)(v8 + 160) = *((_OWORD *)v50 + 1);
          *(_OWORD *)(v8 + 176) = v55;
          *v49 = v54;
          *((_OWORD *)v50 + 1) = v130;
          *((_OWORD *)v50 + 2) = v53;
          *(_OWORD *)v50 = v52;
          if (*(float *)v49 > *(float *)v48)
          {
            v57 = *(_OWORD *)(v8 + 112);
            v56 = *(_OWORD *)(v8 + 128);
            v58 = *v48;
            v59 = *(_OWORD *)(v8 + 160);
            *v48 = *v49;
            *(_OWORD *)(v8 + 112) = v59;
            *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 176);
            *v49 = v58;
            *(_OWORD *)(v8 + 160) = v57;
            *(_OWORD *)(v8 + 176) = v56;
            if (*(float *)v48 > *(float *)v47)
            {
              v61 = *(_OWORD *)(v8 + 64);
              v60 = *(_OWORD *)(v8 + 80);
              v62 = *v47;
              v63 = *(_OWORD *)(v8 + 112);
              *v47 = *v48;
              *(_OWORD *)(v8 + 64) = v63;
              *(_OWORD *)(v8 + 80) = *(_OWORD *)(v8 + 128);
              *v48 = v62;
              *(_OWORD *)(v8 + 112) = v61;
              *(_OWORD *)(v8 + 128) = v60;
              if (*(float *)(v8 + 48) > *(float *)v8)
              {
                v131 = *(_OWORD *)(v8 + 16);
                v140 = *(_OWORD *)(v8 + 32);
                v121 = *(_OWORD *)v8;
                v64 = *(_OWORD *)(v8 + 64);
                *(_OWORD *)v8 = *v47;
                *(_OWORD *)(v8 + 16) = v64;
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 80);
                *v47 = v121;
                *(_OWORD *)(v8 + 64) = v131;
                *(_OWORD *)(v8 + 80) = v140;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1151)
        {
          v65 = (float *)(v8 + 48);
          v67 = (float *)v8 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v8;
              do
              {
                v70 = v65;
                v71 = *(float *)(v69 + 48);
                if (v71 > *(float *)v69)
                {
                  v122 = *(_OWORD *)(v69 + 52);
                  *(_OWORD *)v132 = *(_OWORD *)(v69 + 68);
                  *(_OWORD *)&v132[12] = *(_OWORD *)(v69 + 80);
                  v72 = v68;
                  while (1)
                  {
                    v73 = (float *)(v8 + v72);
                    v74 = *(_OWORD *)(v8 + v72 + 16);
                    *((_OWORD *)v73 + 3) = *(_OWORD *)(v8 + v72);
                    *((_OWORD *)v73 + 4) = v74;
                    *((_OWORD *)v73 + 5) = *(_OWORD *)(v8 + v72 + 32);
                    if (!v72)
                      break;
                    v72 -= 48;
                    if (v71 <= *(v73 - 12))
                    {
                      v75 = v8 + v72 + 48;
                      goto LABEL_75;
                    }
                  }
                  v75 = v8;
LABEL_75:
                  *(float *)v75 = v71;
                  *(_OWORD *)(v75 + 32) = *(_OWORD *)&v132[12];
                  *(_OWORD *)(v75 + 20) = *(_OWORD *)v132;
                  *(_OWORD *)(v75 + 4) = v122;
                }
                v65 = v70 + 12;
                v68 += 48;
                v69 = (unint64_t)v70;
              }
              while (v70 + 12 != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v106 = (uint64_t)v65;
              v107 = *(float *)(a1 + 48);
              if (v107 > *(float *)a1)
              {
                v125 = *(_OWORD *)(a1 + 52);
                *(_OWORD *)v135 = *(_OWORD *)(a1 + 68);
                *(_OWORD *)&v135[12] = *(_OWORD *)(a1 + 80);
                v108 = v65;
                do
                {
                  v109 = *((_OWORD *)v108 - 2);
                  *(_OWORD *)v108 = *((_OWORD *)v108 - 3);
                  *((_OWORD *)v108 + 1) = v109;
                  *((_OWORD *)v108 + 2) = *((_OWORD *)v108 - 1);
                  v110 = *(v108 - 24);
                  v108 -= 12;
                }
                while (v107 > v110);
                *v108 = v107;
                *((_OWORD *)v108 + 2) = *(_OWORD *)&v135[12];
                *(_OWORD *)(v108 + 5) = *(_OWORD *)v135;
                *(_OWORD *)(v108 + 1) = v125;
              }
              v65 += 12;
              a1 = v106;
            }
            while ((float *)(v106 + 48) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v76 = (unint64_t)(v10 - 2) >> 1;
            v77 = v76;
            do
            {
              v78 = v77;
              if (v76 >= v77)
              {
                v79 = (2 * v77) | 1;
                v80 = v8 + 48 * v79;
                if (2 * v78 + 2 < v10 && *(float *)v80 > *(float *)(v80 + 48))
                {
                  v80 += 48;
                  v79 = 2 * v78 + 2;
                }
                v81 = v8 + 48 * v78;
                v82 = *(float *)v81;
                if (*(float *)v80 <= *(float *)v81)
                {
                  *(_OWORD *)&v133[12] = *(_OWORD *)(v81 + 32);
                  v123 = *(_OWORD *)(v81 + 4);
                  *(_OWORD *)v133 = *(_OWORD *)(v81 + 20);
                  do
                  {
                    v83 = (_OWORD *)v81;
                    v81 = v80;
                    v84 = *(_OWORD *)v80;
                    v85 = *(_OWORD *)(v80 + 32);
                    v83[1] = *(_OWORD *)(v80 + 16);
                    v83[2] = v85;
                    *v83 = v84;
                    if (v76 < v79)
                      break;
                    v86 = 2 * v79;
                    v79 = (2 * v79) | 1;
                    v80 = v8 + 48 * v79;
                    v87 = v86 + 2;
                    if (v87 < v10 && *(float *)v80 > *(float *)(v80 + 48))
                    {
                      v80 += 48;
                      v79 = v87;
                    }
                  }
                  while (*(float *)v80 <= v82);
                  *(float *)v81 = v82;
                  *(_OWORD *)(v81 + 32) = *(_OWORD *)&v133[12];
                  *(_OWORD *)(v81 + 20) = *(_OWORD *)v133;
                  *(_OWORD *)(v81 + 4) = v123;
                }
              }
              v77 = v78 - 1;
            }
            while (v78);
            v88 = v9 / 0x30uLL;
            do
            {
              v89 = 0;
              v134 = *(_OWORD *)(v8 + 16);
              v141 = *(_OWORD *)(v8 + 32);
              v124 = *(_OWORD *)v8;
              v90 = (float *)v8;
              do
              {
                v91 = v90;
                v90 += 12 * v89 + 12;
                v92 = 2 * v89;
                v89 = (2 * v89) | 1;
                v93 = v92 + 2;
                if (v93 < v88 && *v90 > v90[12])
                {
                  v90 += 12;
                  v89 = v93;
                }
                v94 = *(_OWORD *)v90;
                v95 = *((_OWORD *)v90 + 2);
                *((_OWORD *)v91 + 1) = *((_OWORD *)v90 + 1);
                *((_OWORD *)v91 + 2) = v95;
                *(_OWORD *)v91 = v94;
              }
              while (v89 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
              a2 -= 12;
              if (v90 == a2)
              {
                *((_OWORD *)v90 + 1) = v134;
                *((_OWORD *)v90 + 2) = v141;
                *(_OWORD *)v90 = v124;
              }
              else
              {
                v96 = *(_OWORD *)a2;
                v97 = *((_OWORD *)a2 + 2);
                *((_OWORD *)v90 + 1) = *((_OWORD *)a2 + 1);
                *((_OWORD *)v90 + 2) = v97;
                *(_OWORD *)v90 = v96;
                *((_OWORD *)a2 + 1) = v134;
                *((_OWORD *)a2 + 2) = v141;
                *(_OWORD *)a2 = v124;
                v98 = (uint64_t)v90 - v8 + 48;
                if (v98 >= 49)
                {
                  v99 = (v98 / 0x30uLL - 2) >> 1;
                  v100 = (float *)(v8 + 48 * v99);
                  v101 = *v90;
                  if (*v100 > *v90)
                  {
                    *(_OWORD *)&v116[12] = *((_OWORD *)v90 + 2);
                    v113 = *(_OWORD *)(v90 + 1);
                    *(_OWORD *)v116 = *(_OWORD *)(v90 + 5);
                    do
                    {
                      v102 = v90;
                      v90 = v100;
                      v103 = *(_OWORD *)v100;
                      v104 = *((_OWORD *)v100 + 2);
                      *((_OWORD *)v102 + 1) = *((_OWORD *)v100 + 1);
                      *((_OWORD *)v102 + 2) = v104;
                      *(_OWORD *)v102 = v103;
                      if (!v99)
                        break;
                      v99 = (v99 - 1) >> 1;
                      v100 = (float *)(v8 + 48 * v99);
                    }
                    while (*v100 > v101);
                    *v90 = v101;
                    *((_OWORD *)v90 + 2) = *(_OWORD *)&v116[12];
                    *(_OWORD *)(v90 + 5) = *(_OWORD *)v116;
                    *(_OWORD *)(v90 + 1) = v113;
                  }
                }
              }
            }
            while (v88-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 48 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1801)
        {
        }
        else
        {
          v13 = 3 * v11;
          v14 = (float *)(a1 + 48 * v11 - 48);
          v15 = (float *)(a1 + 48 + 16 * v13);
          v126 = *(_OWORD *)(a1 + 16);
          v136 = *(_OWORD *)(a1 + 32);
          v117 = *(_OWORD *)a1;
          v16 = *(_OWORD *)(v12 + 32);
          v17 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v12 + 16);
          *(_OWORD *)(a1 + 32) = v16;
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(v12 + 16) = v126;
          *(_OWORD *)(v12 + 32) = v136;
          *(_OWORD *)v12 = v117;
        }
        --a3;
        v18 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 48) <= v18)
        {
          *(_OWORD *)&v115[12] = *(_OWORD *)(a1 + 32);
          v112 = *(_OWORD *)(a1 + 4);
          *(_OWORD *)v115 = *(_OWORD *)(a1 + 20);
          if (v18 <= *(a2 - 12))
          {
            v34 = a1 + 48;
            do
            {
              v8 = v34;
              if (v34 >= (unint64_t)a2)
                break;
              v34 += 48;
            }
            while (v18 <= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v33 = *(float *)(v8 + 48);
              v8 += 48;
            }
            while (v18 <= v33);
          }
          v35 = a2;
          if (v8 < (unint64_t)a2)
          {
            v35 = a2;
            do
            {
              v36 = *(v35 - 12);
              v35 -= 12;
            }
            while (v18 > v36);
          }
          while (v8 < (unint64_t)v35)
          {
            v128 = *(_OWORD *)(v8 + 16);
            v138 = *(_OWORD *)(v8 + 32);
            v119 = *(_OWORD *)v8;
            v37 = *(_OWORD *)v35;
            v38 = *((_OWORD *)v35 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v35 + 1);
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)v8 = v37;
            *((_OWORD *)v35 + 1) = v128;
            *((_OWORD *)v35 + 2) = v138;
            *(_OWORD *)v35 = v119;
            do
            {
              v39 = *(float *)(v8 + 48);
              v8 += 48;
            }
            while (v18 <= v39);
            do
            {
              v40 = *(v35 - 12);
              v35 -= 12;
            }
            while (v18 > v40);
          }
          if (v8 - 48 != a1)
          {
            v41 = *(_OWORD *)(v8 - 48);
            v42 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 32) = v42;
            *(_OWORD *)a1 = v41;
          }
          a4 = 0;
          *(float *)(v8 - 48) = v18;
          *(_OWORD *)(v8 - 16) = *(_OWORD *)&v115[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v115;
          *(_OWORD *)(v8 - 44) = v112;
          continue;
        }
        v19 = 0;
        *(_OWORD *)&v114[12] = *(_OWORD *)(a1 + 32);
        v111 = *(_OWORD *)(a1 + 4);
        *(_OWORD *)v114 = *(_OWORD *)(a1 + 20);
        do
        {
          v20 = *(float *)(a1 + v19 + 48);
          v19 += 48;
        }
        while (v20 > v18);
        v21 = a1 + v19;
        v22 = a2;
        if (v19 == 48)
        {
          v22 = a2;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v24 = *(v22 - 12);
            v22 -= 12;
          }
          while (v24 <= v18);
        }
        else
        {
          do
          {
            v23 = *(v22 - 12);
            v22 -= 12;
          }
          while (v23 <= v18);
        }
        v8 = a1 + v19;
        if (v21 < (unint64_t)v22)
        {
          v25 = v22;
          do
          {
            v127 = *(_OWORD *)(v8 + 16);
            v137 = *(_OWORD *)(v8 + 32);
            v118 = *(_OWORD *)v8;
            v26 = *(_OWORD *)v25;
            v27 = *((_OWORD *)v25 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v25 + 1);
            *(_OWORD *)(v8 + 32) = v27;
            *(_OWORD *)v8 = v26;
            *((_OWORD *)v25 + 1) = v127;
            *((_OWORD *)v25 + 2) = v137;
            *(_OWORD *)v25 = v118;
            do
            {
              v28 = *(float *)(v8 + 48);
              v8 += 48;
            }
            while (v28 > v18);
            do
            {
              v29 = *(v25 - 12);
              v25 -= 12;
            }
            while (v29 <= v18);
          }
          while (v8 < (unint64_t)v25);
        }
        if (v8 - 48 != a1)
        {
          v30 = *(_OWORD *)(v8 - 48);
          v31 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 32) = v31;
          *(_OWORD *)a1 = v30;
        }
        *(float *)(v8 - 48) = v18;
        *(_OWORD *)(v8 - 16) = *(_OWORD *)&v114[12];
        *(_OWORD *)(v8 - 28) = *(_OWORD *)v114;
        *(_OWORD *)(v8 - 44) = v111;
        if (v21 < (unint64_t)v22)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = (float *)(v8 - 48);
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v44 = *(a2 - 12);
        v43 = a2 - 12;
        if (v44 > *(float *)v8)
        {
          v129 = *(_OWORD *)(v8 + 16);
          v139 = *(_OWORD *)(v8 + 32);
          v120 = *(_OWORD *)v8;
          v45 = *(_OWORD *)v43;
          v46 = *((_OWORD *)v43 + 2);
          *(_OWORD *)(v8 + 16) = *((_OWORD *)v43 + 1);
          *(_OWORD *)(v8 + 32) = v46;
          *(_OWORD *)v8 = v45;
          *((_OWORD *)v43 + 1) = v129;
          *((_OWORD *)v43 + 2) = v139;
          *(_OWORD *)v43 = v120;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        v47 = (__int128 *)(v8 + 48);
        v48 = (__int128 *)(v8 + 96);
        v49 = (__int128 *)(v8 + 144);
        v51 = *(a2 - 12);
        v50 = a2 - 12;
        if (v51 > *(float *)(v8 + 144))
        {
          v52 = *v49;
          v130 = *(_OWORD *)(v8 + 160);
          v53 = *(_OWORD *)(v8 + 176);
          v54 = *(_OWORD *)v50;
          v55 = *((_OWORD *)v50 + 2);
          *(_OWORD *)(v8 + 160) = *((_OWORD *)v50 + 1);
          *(_OWORD *)(v8 + 176) = v55;
          *v49 = v54;
          *((_OWORD *)v50 + 1) = v130;
          *((_OWORD *)v50 + 2) = v53;
          *(_OWORD *)v50 = v52;
          if (*(float *)v49 > *(float *)v48)
          {
            v57 = *(_OWORD *)(v8 + 112);
            v56 = *(_OWORD *)(v8 + 128);
            v58 = *v48;
            v59 = *(_OWORD *)(v8 + 160);
            *v48 = *v49;
            *(_OWORD *)(v8 + 112) = v59;
            *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 176);
            *v49 = v58;
            *(_OWORD *)(v8 + 160) = v57;
            *(_OWORD *)(v8 + 176) = v56;
            if (*(float *)v48 > *(float *)v47)
            {
              v61 = *(_OWORD *)(v8 + 64);
              v60 = *(_OWORD *)(v8 + 80);
              v62 = *v47;
              v63 = *(_OWORD *)(v8 + 112);
              *v47 = *v48;
              *(_OWORD *)(v8 + 64) = v63;
              *(_OWORD *)(v8 + 80) = *(_OWORD *)(v8 + 128);
              *v48 = v62;
              *(_OWORD *)(v8 + 112) = v61;
              *(_OWORD *)(v8 + 128) = v60;
              if (*(float *)(v8 + 48) > *(float *)v8)
              {
                v131 = *(_OWORD *)(v8 + 16);
                v140 = *(_OWORD *)(v8 + 32);
                v121 = *(_OWORD *)v8;
                v64 = *(_OWORD *)(v8 + 64);
                *(_OWORD *)v8 = *v47;
                *(_OWORD *)(v8 + 16) = v64;
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 80);
                *v47 = v121;
                *(_OWORD *)(v8 + 64) = v131;
                *(_OWORD *)(v8 + 80) = v140;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1151)
        {
          v65 = (float *)(v8 + 48);
          v67 = (float *)v8 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v8;
              do
              {
                v70 = v65;
                v71 = *(float *)(v69 + 48);
                if (v71 > *(float *)v69)
                {
                  v122 = *(_OWORD *)(v69 + 52);
                  *(_OWORD *)v132 = *(_OWORD *)(v69 + 68);
                  *(_OWORD *)&v132[12] = *(_OWORD *)(v69 + 80);
                  v72 = v68;
                  while (1)
                  {
                    v73 = (float *)(v8 + v72);
                    v74 = *(_OWORD *)(v8 + v72 + 16);
                    *((_OWORD *)v73 + 3) = *(_OWORD *)(v8 + v72);
                    *((_OWORD *)v73 + 4) = v74;
                    *((_OWORD *)v73 + 5) = *(_OWORD *)(v8 + v72 + 32);
                    if (!v72)
                      break;
                    v72 -= 48;
                    if (v71 <= *(v73 - 12))
                    {
                      v75 = v8 + v72 + 48;
                      goto LABEL_75;
                    }
                  }
                  v75 = v8;
LABEL_75:
                  *(float *)v75 = v71;
                  *(_OWORD *)(v75 + 32) = *(_OWORD *)&v132[12];
                  *(_OWORD *)(v75 + 20) = *(_OWORD *)v132;
                  *(_OWORD *)(v75 + 4) = v122;
                }
                v65 = v70 + 12;
                v68 += 48;
                v69 = (unint64_t)v70;
              }
              while (v70 + 12 != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v106 = (uint64_t)v65;
              v107 = *(float *)(a1 + 48);
              if (v107 > *(float *)a1)
              {
                v125 = *(_OWORD *)(a1 + 52);
                *(_OWORD *)v135 = *(_OWORD *)(a1 + 68);
                *(_OWORD *)&v135[12] = *(_OWORD *)(a1 + 80);
                v108 = v65;
                do
                {
                  v109 = *((_OWORD *)v108 - 2);
                  *(_OWORD *)v108 = *((_OWORD *)v108 - 3);
                  *((_OWORD *)v108 + 1) = v109;
                  *((_OWORD *)v108 + 2) = *((_OWORD *)v108 - 1);
                  v110 = *(v108 - 24);
                  v108 -= 12;
                }
                while (v107 > v110);
                *v108 = v107;
                *((_OWORD *)v108 + 2) = *(_OWORD *)&v135[12];
                *(_OWORD *)(v108 + 5) = *(_OWORD *)v135;
                *(_OWORD *)(v108 + 1) = v125;
              }
              v65 += 12;
              a1 = v106;
            }
            while ((float *)(v106 + 48) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v76 = (unint64_t)(v10 - 2) >> 1;
            v77 = v76;
            do
            {
              v78 = v77;
              if (v76 >= v77)
              {
                v79 = (2 * v77) | 1;
                v80 = v8 + 48 * v79;
                if (2 * v78 + 2 < v10 && *(float *)v80 > *(float *)(v80 + 48))
                {
                  v80 += 48;
                  v79 = 2 * v78 + 2;
                }
                v81 = v8 + 48 * v78;
                v82 = *(float *)v81;
                if (*(float *)v80 <= *(float *)v81)
                {
                  *(_OWORD *)&v133[12] = *(_OWORD *)(v81 + 32);
                  v123 = *(_OWORD *)(v81 + 4);
                  *(_OWORD *)v133 = *(_OWORD *)(v81 + 20);
                  do
                  {
                    v83 = (_OWORD *)v81;
                    v81 = v80;
                    v84 = *(_OWORD *)v80;
                    v85 = *(_OWORD *)(v80 + 32);
                    v83[1] = *(_OWORD *)(v80 + 16);
                    v83[2] = v85;
                    *v83 = v84;
                    if (v76 < v79)
                      break;
                    v86 = 2 * v79;
                    v79 = (2 * v79) | 1;
                    v80 = v8 + 48 * v79;
                    v87 = v86 + 2;
                    if (v87 < v10 && *(float *)v80 > *(float *)(v80 + 48))
                    {
                      v80 += 48;
                      v79 = v87;
                    }
                  }
                  while (*(float *)v80 <= v82);
                  *(float *)v81 = v82;
                  *(_OWORD *)(v81 + 32) = *(_OWORD *)&v133[12];
                  *(_OWORD *)(v81 + 20) = *(_OWORD *)v133;
                  *(_OWORD *)(v81 + 4) = v123;
                }
              }
              v77 = v78 - 1;
            }
            while (v78);
            v88 = v9 / 0x30uLL;
            do
            {
              v89 = 0;
              v134 = *(_OWORD *)(v8 + 16);
              v141 = *(_OWORD *)(v8 + 32);
              v124 = *(_OWORD *)v8;
              v90 = (float *)v8;
              do
              {
                v91 = v90;
                v90 += 12 * v89 + 12;
                v92 = 2 * v89;
                v89 = (2 * v89) | 1;
                v93 = v92 + 2;
                if (v93 < v88 && *v90 > v90[12])
                {
                  v90 += 12;
                  v89 = v93;
                }
                v94 = *(_OWORD *)v90;
                v95 = *((_OWORD *)v90 + 2);
                *((_OWORD *)v91 + 1) = *((_OWORD *)v90 + 1);
                *((_OWORD *)v91 + 2) = v95;
                *(_OWORD *)v91 = v94;
              }
              while (v89 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
              a2 -= 12;
              if (v90 == a2)
              {
                *((_OWORD *)v90 + 1) = v134;
                *((_OWORD *)v90 + 2) = v141;
                *(_OWORD *)v90 = v124;
              }
              else
              {
                v96 = *(_OWORD *)a2;
                v97 = *((_OWORD *)a2 + 2);
                *((_OWORD *)v90 + 1) = *((_OWORD *)a2 + 1);
                *((_OWORD *)v90 + 2) = v97;
                *(_OWORD *)v90 = v96;
                *((_OWORD *)a2 + 1) = v134;
                *((_OWORD *)a2 + 2) = v141;
                *(_OWORD *)a2 = v124;
                v98 = (uint64_t)v90 - v8 + 48;
                if (v98 >= 49)
                {
                  v99 = (v98 / 0x30uLL - 2) >> 1;
                  v100 = (float *)(v8 + 48 * v99);
                  v101 = *v90;
                  if (*v100 > *v90)
                  {
                    *(_OWORD *)&v116[12] = *((_OWORD *)v90 + 2);
                    v113 = *(_OWORD *)(v90 + 1);
                    *(_OWORD *)v116 = *(_OWORD *)(v90 + 5);
                    do
                    {
                      v102 = v90;
                      v90 = v100;
                      v103 = *(_OWORD *)v100;
                      v104 = *((_OWORD *)v100 + 2);
                      *((_OWORD *)v102 + 1) = *((_OWORD *)v100 + 1);
                      *((_OWORD *)v102 + 2) = v104;
                      *(_OWORD *)v102 = v103;
                      if (!v99)
                        break;
                      v99 = (v99 - 1) >> 1;
                      v100 = (float *)(v8 + 48 * v99);
                    }
                    while (*v100 > v101);
                    *v90 = v101;
                    *((_OWORD *)v90 + 2) = *(_OWORD *)&v116[12];
                    *(_OWORD *)(v90 + 5) = *(_OWORD *)v116;
                    *(_OWORD *)(v90 + 1) = v113;
                  }
                }
              }
            }
            while (v88-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 48 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1801)
        {
        }
        else
        {
          v13 = 3 * v11;
          v14 = (float *)(a1 + 48 * v11 - 48);
          v15 = (float *)(a1 + 48 + 16 * v13);
          v126 = *(_OWORD *)(a1 + 16);
          v136 = *(_OWORD *)(a1 + 32);
          v117 = *(_OWORD *)a1;
          v16 = *(_OWORD *)(v12 + 32);
          v17 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v12 + 16);
          *(_OWORD *)(a1 + 32) = v16;
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(v12 + 16) = v126;
          *(_OWORD *)(v12 + 32) = v136;
          *(_OWORD *)v12 = v117;
        }
        --a3;
        v18 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 48) <= v18)
        {
          *(_OWORD *)&v115[12] = *(_OWORD *)(a1 + 32);
          v112 = *(_OWORD *)(a1 + 4);
          *(_OWORD *)v115 = *(_OWORD *)(a1 + 20);
          if (v18 <= *(a2 - 12))
          {
            v34 = a1 + 48;
            do
            {
              v8 = v34;
              if (v34 >= (unint64_t)a2)
                break;
              v34 += 48;
            }
            while (v18 <= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v33 = *(float *)(v8 + 48);
              v8 += 48;
            }
            while (v18 <= v33);
          }
          v35 = a2;
          if (v8 < (unint64_t)a2)
          {
            v35 = a2;
            do
            {
              v36 = *(v35 - 12);
              v35 -= 12;
            }
            while (v18 > v36);
          }
          while (v8 < (unint64_t)v35)
          {
            v128 = *(_OWORD *)(v8 + 16);
            v138 = *(_OWORD *)(v8 + 32);
            v119 = *(_OWORD *)v8;
            v37 = *(_OWORD *)v35;
            v38 = *((_OWORD *)v35 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v35 + 1);
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)v8 = v37;
            *((_OWORD *)v35 + 1) = v128;
            *((_OWORD *)v35 + 2) = v138;
            *(_OWORD *)v35 = v119;
            do
            {
              v39 = *(float *)(v8 + 48);
              v8 += 48;
            }
            while (v18 <= v39);
            do
            {
              v40 = *(v35 - 12);
              v35 -= 12;
            }
            while (v18 > v40);
          }
          if (v8 - 48 != a1)
          {
            v41 = *(_OWORD *)(v8 - 48);
            v42 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 32) = v42;
            *(_OWORD *)a1 = v41;
          }
          a4 = 0;
          *(float *)(v8 - 48) = v18;
          *(_OWORD *)(v8 - 16) = *(_OWORD *)&v115[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v115;
          *(_OWORD *)(v8 - 44) = v112;
          continue;
        }
        v19 = 0;
        *(_OWORD *)&v114[12] = *(_OWORD *)(a1 + 32);
        v111 = *(_OWORD *)(a1 + 4);
        *(_OWORD *)v114 = *(_OWORD *)(a1 + 20);
        do
        {
          v20 = *(float *)(a1 + v19 + 48);
          v19 += 48;
        }
        while (v20 > v18);
        v21 = a1 + v19;
        v22 = a2;
        if (v19 == 48)
        {
          v22 = a2;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v24 = *(v22 - 12);
            v22 -= 12;
          }
          while (v24 <= v18);
        }
        else
        {
          do
          {
            v23 = *(v22 - 12);
            v22 -= 12;
          }
          while (v23 <= v18);
        }
        v8 = a1 + v19;
        if (v21 < (unint64_t)v22)
        {
          v25 = v22;
          do
          {
            v127 = *(_OWORD *)(v8 + 16);
            v137 = *(_OWORD *)(v8 + 32);
            v118 = *(_OWORD *)v8;
            v26 = *(_OWORD *)v25;
            v27 = *((_OWORD *)v25 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v25 + 1);
            *(_OWORD *)(v8 + 32) = v27;
            *(_OWORD *)v8 = v26;
            *((_OWORD *)v25 + 1) = v127;
            *((_OWORD *)v25 + 2) = v137;
            *(_OWORD *)v25 = v118;
            do
            {
              v28 = *(float *)(v8 + 48);
              v8 += 48;
            }
            while (v28 > v18);
            do
            {
              v29 = *(v25 - 12);
              v25 -= 12;
            }
            while (v29 <= v18);
          }
          while (v8 < (unint64_t)v25);
        }
        if (v8 - 48 != a1)
        {
          v30 = *(_OWORD *)(v8 - 48);
          v31 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 32) = v31;
          *(_OWORD *)a1 = v30;
        }
        *(float *)(v8 - 48) = v18;
        *(_OWORD *)(v8 - 16) = *(_OWORD *)&v114[12];
        *(_OWORD *)(v8 - 28) = *(_OWORD *)v114;
        *(_OWORD *)(v8 - 44) = v111;
        if (v21 < (unint64_t)v22)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = (float *)(v8 - 48);
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a1;
  v196 = (double *)(a1 + 80);
  v197 = (double *)(a1 + 40);
  while (2)
  {
    v8 = a2 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v82 = *(_DWORD *)(a2 - 40);
        v81 = a2 - 40;
        v83 = v82 < *(_DWORD *)v7;
        if (v82 == *(_DWORD *)v7)
          v83 = *(double *)(v81 + 32) < *(double *)(v7 + 32);
        if (v83)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)v7, (uint64_t *)v81);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v7, (double *)(v7 + 40), a2 - 40);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v7, (double *)(v7 + 40), v7 + 80, a2 - 40);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v7, (double *)(v7 + 40), v7 + 80, v7 + 120, a2 - 40);
        return;
      default:
        if (v8 > 959)
        {
          if (!a3)
          {
            if (v7 == a2)
              return;
            v107 = (unint64_t)(v9 - 2) >> 1;
            v108 = v107;
            do
            {
              v109 = v108;
              if (v107 >= v108)
              {
                v110 = (2 * v108) | 1;
                v111 = v7 + 40 * v110;
                if (2 * v109 + 2 >= v9)
                {
                  v112 = *(_DWORD *)v111;
                }
                else
                {
                  v112 = *(_DWORD *)v111;
                  v113 = *(_DWORD *)(v111 + 40);
                  v114 = *(double *)(v7 + 40 * v110 + 32) < *(double *)(v111 + 72);
                  if (*(_DWORD *)v111 != v113)
                    v114 = *(_DWORD *)v111 < v113;
                  if (v114)
                  {
                    v112 = *(_DWORD *)(v111 + 40);
                    v111 += 40;
                    v110 = 2 * v109 + 2;
                  }
                }
                v115 = v7 + 40 * v109;
                v116 = *(_DWORD *)v115;
                v117 = *(double *)(v115 + 32);
                v85 = v112 == *(_DWORD *)v115;
                v118 = v112 < *(_DWORD *)v115;
                if (v85)
                  v118 = *(double *)(v111 + 32) < v117;
                if (!v118)
                {
                  v119 = v7 + 40 * v109;
                  v198 = *(_QWORD *)(v119 + 16);
                  v200 = *(_QWORD *)(v115 + 4);
                  v202 = *(_QWORD *)(v119 + 24);
                  *(_QWORD *)(v119 + 16) = 0;
                  *(_QWORD *)(v119 + 24) = 0;
                  do
                  {
                    v120 = v115;
                    v115 = v111;
                    v121 = *(_QWORD *)v111;
                    *(_DWORD *)(v120 + 8) = *(_DWORD *)(v115 + 8);
                    *(_QWORD *)v120 = v121;
                    v122 = *(_QWORD *)(v115 + 16);
                    *(_QWORD *)(v115 + 16) = 0;
                    v123 = *(void **)(v120 + 16);
                    *(_QWORD *)(v120 + 16) = v122;

                    v124 = *(_QWORD *)(v115 + 24);
                    *(_QWORD *)(v115 + 24) = 0;
                    v125 = *(void **)(v120 + 24);
                    *(_QWORD *)(v120 + 24) = v124;

                    *(_QWORD *)(v120 + 32) = *(_QWORD *)(v115 + 32);
                    if (v107 < v110)
                      break;
                    v126 = (2 * v110) | 1;
                    v111 = v7 + 40 * v126;
                    if (2 * v110 + 2 >= v9)
                    {
                      v127 = *(_DWORD *)v111;
                      v110 = (2 * v110) | 1;
                    }
                    else
                    {
                      v127 = *(_DWORD *)v111;
                      v128 = *(_DWORD *)(v111 + 40);
                      v129 = *(double *)(v7 + 40 * v126 + 32) < *(double *)(v111 + 72);
                      if (*(_DWORD *)v111 != v128)
                        v129 = *(_DWORD *)v111 < v128;
                      if (v129)
                      {
                        v127 = *(_DWORD *)(v111 + 40);
                        v111 += 40;
                        v110 = 2 * v110 + 2;
                      }
                      else
                      {
                        v110 = (2 * v110) | 1;
                      }
                    }
                    v130 = *(double *)(v111 + 32) < v117;
                    if (v127 != v116)
                      v130 = v127 < v116;
                  }
                  while (!v130);
                  *(_DWORD *)v115 = v116;
                  *(_QWORD *)(v115 + 4) = v200;
                  v131 = *(void **)(v115 + 16);
                  *(_QWORD *)(v115 + 16) = v198;

                  v132 = *(void **)(v115 + 24);
                  *(_QWORD *)(v115 + 24) = v202;

                  *(double *)(v115 + 32) = v117;
                }
              }
              v108 = v109 - 1;
            }
            while (v109);
            v133 = v8 / 0x28uLL;
            while (1)
            {
              if (v133 >= 2)
              {
                v134 = 0;
                v207 = *(_DWORD *)(v7 + 8);
                v205 = *(_QWORD *)v7;
                v136 = *(_QWORD *)(v7 + 16);
                v135 = *(_QWORD *)(v7 + 24);
                *(_QWORD *)(v7 + 16) = 0;
                *(_QWORD *)(v7 + 24) = 0;
                v137 = *(double *)(v7 + 32);
                v138 = v7;
                do
                {
                  v139 = v134 + 1;
                  v140 = v138 + 40 * (v134 + 1);
                  v141 = (2 * v134) | 1;
                  v142 = 2 * v134 + 2;
                  if (v142 < v133)
                  {
                    v143 = *(_DWORD *)(v140 + 40);
                    v144 = *(double *)(v138 + 40 * v139 + 32) < *(double *)(v140 + 72);
                    v85 = *(_DWORD *)v140 == v143;
                    v145 = *(_DWORD *)v140 < v143;
                    if (!v85)
                      v144 = v145;
                    if (v144)
                    {
                      v140 += 40;
                      v141 = v142;
                    }
                  }
                  v146 = *(_QWORD *)v140;
                  *(_DWORD *)(v138 + 8) = *(_DWORD *)(v140 + 8);
                  *(_QWORD *)v138 = v146;
                  v147 = *(_QWORD *)(v140 + 16);
                  *(_QWORD *)(v140 + 16) = 0;
                  v148 = *(void **)(v138 + 16);
                  *(_QWORD *)(v138 + 16) = v147;

                  v149 = *(_QWORD *)(v140 + 24);
                  *(_QWORD *)(v140 + 24) = 0;
                  v150 = *(void **)(v138 + 24);
                  *(_QWORD *)(v138 + 24) = v149;

                  *(_QWORD *)(v138 + 32) = *(_QWORD *)(v140 + 32);
                  v138 = v140;
                  v134 = v141;
                }
                while (v141 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                v151 = (uint64_t *)(a2 - 40);
                if (v140 == a2 - 40)
                {
                  *(_DWORD *)(v140 + 8) = v207;
                  *(_QWORD *)v140 = v205;
                  v175 = *(void **)(v140 + 16);
                  *(_QWORD *)(v140 + 16) = v136;

                  v174 = *(void **)(v140 + 24);
                  *(_QWORD *)(v140 + 24) = v135;
                }
                else
                {
                  v152 = *v151;
                  *(_DWORD *)(v140 + 8) = *(_DWORD *)(a2 - 32);
                  *(_QWORD *)v140 = v152;
                  v153 = *(_QWORD *)(a2 - 24);
                  *(_QWORD *)(a2 - 24) = 0;
                  v154 = *(void **)(v140 + 16);
                  *(_QWORD *)(v140 + 16) = v153;

                  v155 = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(a2 - 16) = 0;
                  v156 = *(void **)(v140 + 24);
                  *(_QWORD *)(v140 + 24) = v155;

                  *(_QWORD *)(v140 + 32) = *(_QWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 32) = v207;
                  *v151 = v205;
                  v157 = *(void **)(a2 - 24);
                  *(_QWORD *)(a2 - 24) = v136;

                  v158 = *(void **)(a2 - 16);
                  *(_QWORD *)(a2 - 16) = v135;

                  *(double *)(a2 - 8) = v137;
                  v159 = v140 - v7 + 40;
                  if (v159 < 41)
                    goto LABEL_154;
                  v160 = (v159 / 0x28uLL - 2) >> 1;
                  v161 = v7 + 40 * v160;
                  v162 = *(_DWORD *)v140;
                  v137 = *(double *)(v140 + 32);
                  v163 = *(_DWORD *)v161 < *(_DWORD *)v140;
                  if (*(_DWORD *)v161 == *(_DWORD *)v140)
                    v163 = *(double *)(v161 + 32) < v137;
                  if (!v163)
                    goto LABEL_154;
                  v164 = *(_QWORD *)(v140 + 4);
                  v165 = *(_QWORD *)(v140 + 16);
                  v203 = *(_QWORD *)(v140 + 24);
                  *(_QWORD *)(v140 + 16) = 0;
                  *(_QWORD *)(v140 + 24) = 0;
                  do
                  {
                    v166 = v140;
                    v140 = v161;
                    v167 = *(_QWORD *)v161;
                    *(_DWORD *)(v166 + 8) = *(_DWORD *)(v140 + 8);
                    *(_QWORD *)v166 = v167;
                    v168 = *(_QWORD *)(v140 + 16);
                    *(_QWORD *)(v140 + 16) = 0;
                    v169 = *(void **)(v166 + 16);
                    *(_QWORD *)(v166 + 16) = v168;

                    v170 = *(_QWORD *)(v140 + 24);
                    *(_QWORD *)(v140 + 24) = 0;
                    v171 = *(void **)(v166 + 24);
                    *(_QWORD *)(v166 + 24) = v170;

                    *(_QWORD *)(v166 + 32) = *(_QWORD *)(v140 + 32);
                    if (!v160)
                      break;
                    v160 = (v160 - 1) >> 1;
                    v161 = v7 + 40 * v160;
                    v172 = *(_DWORD *)v161 < v162;
                    if (*(_DWORD *)v161 == v162)
                      v172 = *(double *)(v161 + 32) < v137;
                  }
                  while (v172);
                  *(_DWORD *)v140 = v162;
                  *(_QWORD *)(v140 + 4) = v164;
                  v173 = *(void **)(v140 + 16);
                  *(_QWORD *)(v140 + 16) = v165;

                  v174 = *(void **)(v140 + 24);
                  *(_QWORD *)(v140 + 24) = v203;
                }

                *(double *)(v140 + 32) = v137;
              }
LABEL_154:
              a2 -= 40;
              if ((unint64_t)v133-- <= 2)
                return;
            }
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = v7 + 40 * ((unint64_t)v9 >> 1);
          v12 = a2 - 40;
          if ((unint64_t)v8 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v11, (double *)v7, v12);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)v7, (double *)v11, v12);
            v13 = v7 + 40 * v10;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(v197, (double *)(v13 - 40), a2 - 80);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(v196, (double *)(v13 + 40), a2 - 120);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)(v13 - 40), (double *)v11, v13 + 40);
            v206 = *(_DWORD *)(v7 + 8);
            v204 = *(_QWORD *)v7;
            v14 = *(_QWORD *)(v7 + 16);
            v15 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            v16 = *(_QWORD *)(v7 + 32);
            v17 = *(_DWORD *)(v11 + 8);
            *(_QWORD *)v7 = *(_QWORD *)v11;
            *(_DWORD *)(v7 + 8) = v17;
            v18 = *(_QWORD *)(v13 + 16);
            *(_QWORD *)(v13 + 16) = 0;
            v19 = *(void **)(v7 + 16);
            *(_QWORD *)(v7 + 16) = v18;

            v20 = *(_QWORD *)(v13 + 24);
            *(_QWORD *)(v13 + 24) = 0;
            v21 = *(void **)(v7 + 24);
            *(_QWORD *)(v7 + 24) = v20;

            *(_QWORD *)(v7 + 32) = *(_QWORD *)(v13 + 32);
            *(_DWORD *)(v11 + 8) = v206;
            *(_QWORD *)v11 = v204;
            v22 = *(void **)(v13 + 16);
            *(_QWORD *)(v13 + 16) = v14;

            v23 = *(void **)(v13 + 24);
            *(_QWORD *)(v13 + 24) = v15;

            *(_QWORD *)(v13 + 32) = v16;
          }
          v24 = a3 - 1;
          v25 = *(_DWORD *)v7;
          v201 = v24;
          if ((a4 & 1) != 0)
          {
            v26 = *(double *)(v7 + 32);
LABEL_13:
            v29 = 0;
            v30 = *(_QWORD *)(v7 + 4);
            v32 = *(_QWORD *)(v7 + 16);
            v31 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            do
            {
              v33 = *(_DWORD *)(v7 + v29 + 40);
              v34 = *(double *)(v7 + v29 + 72) < v26;
              v85 = v33 == v25;
              v35 = v33 < v25;
              if (!v85)
                v34 = v35;
              v29 += 40;
            }
            while (v34);
            v36 = v7 + v29;
            v37 = a2;
            if (v29 == 40)
            {
              v37 = a2;
              do
              {
                if (v36 >= v37)
                  break;
                v40 = *(_DWORD *)(v37 - 40);
                v37 -= 40;
                v41 = v40 < v25;
                if (v40 == v25)
                  v41 = *(double *)(v37 + 32) < v26;
              }
              while (!v41);
            }
            else
            {
              do
              {
                v38 = *(_DWORD *)(v37 - 40);
                v37 -= 40;
                v39 = v38 < v25;
                if (v38 == v25)
                  v39 = *(double *)(v37 + 32) < v26;
              }
              while (!v39);
            }
            a1 = v36;
            if (v36 < v37)
            {
              v42 = v37;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)v42);
                do
                {
                  v43 = *(_DWORD *)(a1 + 40);
                  a1 += 40;
                  v44 = v43 < v25;
                  if (v43 == v25)
                    v44 = *(double *)(a1 + 32) < v26;
                }
                while (v44);
                do
                {
                  v45 = *(_DWORD *)(v42 - 40);
                  v42 -= 40;
                  v46 = v45 < v25;
                  if (v45 == v25)
                    v46 = *(double *)(v42 + 32) < v26;
                }
                while (!v46);
              }
              while (a1 < v42);
            }
            if (a1 - 40 != v7)
            {
              v47 = *(_QWORD *)(a1 - 40);
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(a1 - 32);
              *(_QWORD *)v7 = v47;
              v48 = *(_QWORD *)(a1 - 24);
              *(_QWORD *)(a1 - 24) = 0;
              v49 = *(void **)(v7 + 16);
              *(_QWORD *)(v7 + 16) = v48;

              v50 = *(_QWORD *)(a1 - 16);
              *(_QWORD *)(a1 - 16) = 0;
              v51 = *(void **)(v7 + 24);
              *(_QWORD *)(v7 + 24) = v50;

              *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 - 8);
            }
            *(_DWORD *)(a1 - 40) = v25;
            *(_QWORD *)(a1 - 36) = v30;
            v52 = *(void **)(a1 - 24);
            *(_QWORD *)(a1 - 24) = v32;

            v53 = *(void **)(a1 - 16);
            *(_QWORD *)(a1 - 16) = v31;

            *(double *)(a1 - 8) = v26;
            a3 = v201;
            if (v36 >= v37)
            {
              v54 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(v7, a1 - 40);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(a1, a2))
              {
                a2 = a1 - 40;
                if (!v54)
                  continue;
                return;
              }
              if (v54)
                goto LABEL_1;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *,false>(v7, a1 - 40, v201, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v27 = *(_DWORD *)(v7 - 40);
          v26 = *(double *)(v7 + 32);
          v85 = v27 == v25;
          v28 = v27 < v25;
          if (v85)
            v28 = *(double *)(v7 - 8) < v26;
          if (v28)
            goto LABEL_13;
          v55 = v24;
          v56 = *(_QWORD *)(v7 + 4);
          v58 = *(_QWORD *)(v7 + 16);
          v57 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          v59 = *(_DWORD *)(a2 - 40);
          v85 = v25 == v59;
          v60 = v25 < v59;
          if (v85)
            v60 = v26 < *(double *)(a2 - 8);
          if (v60)
          {
            a1 = v7;
            do
            {
              v61 = *(_DWORD *)(a1 + 40);
              a1 += 40;
              v62 = v25 < v61;
              if (v25 == v61)
                v62 = v26 < *(double *)(a1 + 32);
            }
            while (!v62);
          }
          else
          {
            v63 = (int *)(v7 + 40);
            do
            {
              a1 = (unint64_t)v63;
              if ((unint64_t)v63 >= a2)
                break;
              v64 = *v63;
              v65 = v26 < *(double *)(a1 + 32);
              v85 = v25 == v64;
              v66 = v25 < v64;
              if (!v85)
                v65 = v66;
              v63 = (int *)(a1 + 40);
            }
            while (!v65);
          }
          v67 = a2;
          if (a1 < a2)
          {
            v67 = a2;
            do
            {
              v68 = *(_DWORD *)(v67 - 40);
              v67 -= 40;
              v69 = v25 < v68;
              if (v25 == v68)
                v69 = v26 < *(double *)(v67 + 32);
            }
            while (v69);
          }
          while (a1 < v67)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)v67);
            do
            {
              v70 = *(_DWORD *)(a1 + 40);
              a1 += 40;
              v71 = v25 < v70;
              if (v25 == v70)
                v71 = v26 < *(double *)(a1 + 32);
            }
            while (!v71);
            do
            {
              v72 = *(_DWORD *)(v67 - 40);
              v67 -= 40;
              v73 = v25 < v72;
              if (v25 == v72)
                v73 = v26 < *(double *)(v67 + 32);
            }
            while (v73);
          }
          if (a1 - 40 != v7)
          {
            v74 = *(_QWORD *)(a1 - 40);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(a1 - 32);
            *(_QWORD *)v7 = v74;
            v75 = *(_QWORD *)(a1 - 24);
            *(_QWORD *)(a1 - 24) = 0;
            v76 = *(void **)(v7 + 16);
            *(_QWORD *)(v7 + 16) = v75;

            v77 = *(_QWORD *)(a1 - 16);
            *(_QWORD *)(a1 - 16) = 0;
            v78 = *(void **)(v7 + 24);
            *(_QWORD *)(v7 + 24) = v77;

            *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 - 8);
          }
          *(_DWORD *)(a1 - 40) = v25;
          *(_QWORD *)(a1 - 36) = v56;
          v79 = *(void **)(a1 - 24);
          *(_QWORD *)(a1 - 24) = v58;

          v80 = *(void **)(a1 - 16);
          *(_QWORD *)(a1 - 16) = v57;

          a4 = 0;
          *(double *)(a1 - 8) = v26;
          a3 = v55;
          goto LABEL_1;
        }
        v84 = v7 + 40;
        v85 = v7 == a2 || v84 == a2;
        v86 = v85;
        if ((a4 & 1) != 0)
        {
          if ((v86 & 1) == 0)
          {
            v87 = 0;
            v88 = v7;
            do
            {
              v89 = v84;
              v90 = *(_DWORD *)(v88 + 40);
              v91 = *(double *)(v88 + 72);
              v92 = v90 < *(_DWORD *)v88;
              if (v90 == *(_DWORD *)v88)
                v92 = v91 < *(double *)(v88 + 32);
              if (v92)
              {
                v93 = *(_QWORD *)(v88 + 44);
                v95 = *(_QWORD *)(v88 + 56);
                v94 = *(_QWORD *)(v88 + 64);
                v96 = v87;
                *(_QWORD *)(v88 + 56) = 0;
                *(_QWORD *)(v88 + 64) = 0;
                while (1)
                {
                  v97 = v7 + v96;
                  *(_QWORD *)(v97 + 40) = *(_QWORD *)(v7 + v96);
                  *(_DWORD *)(v97 + 48) = *(_DWORD *)(v7 + v96 + 8);
                  v98 = *(_QWORD *)(v7 + v96 + 16);
                  *(_QWORD *)(v97 + 16) = 0;
                  v99 = *(void **)(v7 + v96 + 56);
                  *(_QWORD *)(v97 + 56) = v98;

                  v100 = *(_QWORD *)(v7 + v96 + 24);
                  *(_QWORD *)(v97 + 24) = 0;
                  v101 = *(void **)(v7 + v96 + 64);
                  *(_QWORD *)(v97 + 64) = v100;

                  *(_QWORD *)(v97 + 72) = *(_QWORD *)(v97 + 32);
                  if (!v96)
                    break;
                  v102 = *(_DWORD *)(v97 - 40);
                  v85 = v90 == v102;
                  v103 = v90 < v102;
                  if (v85)
                    v103 = v91 < *(double *)(v97 - 8);
                  v96 -= 40;
                  if (!v103)
                  {
                    v104 = v7 + v96 + 40;
                    goto LABEL_102;
                  }
                }
                v104 = v7;
LABEL_102:
                *(_DWORD *)v104 = v90;
                *(_QWORD *)(v104 + 4) = v93;
                v105 = *(void **)(v104 + 16);
                *(_QWORD *)(v104 + 16) = v95;

                v106 = *(void **)(v104 + 24);
                *(_QWORD *)(v104 + 24) = v94;

                *(double *)(v104 + 32) = v91;
              }
              v84 = v89 + 40;
              v87 += 40;
              v88 = v89;
            }
            while (v89 + 40 != a2);
          }
        }
        else if ((v86 & 1) == 0)
        {
          v177 = (double *)(v7 + 72);
          do
          {
            v178 = v84;
            v179 = *(_DWORD *)(v7 + 40);
            v180 = *(double *)(v7 + 72);
            v181 = v179 < *(_DWORD *)v7;
            if (v179 == *(_DWORD *)v7)
              v181 = v180 < *(double *)(v7 + 32);
            if (v181)
            {
              v182 = *(_QWORD *)(v7 + 44);
              v184 = *(_QWORD *)(v7 + 56);
              v183 = *(_QWORD *)(v7 + 64);
              v185 = v177;
              *(_QWORD *)(v7 + 56) = 0;
              *(_QWORD *)(v7 + 64) = 0;
              do
              {
                v186 = v185;
                *(v185 - 4) = *(v185 - 9);
                *((_DWORD *)v185 - 6) = *((_DWORD *)v185 - 16);
                v187 = *((_QWORD *)v185 - 7);
                *(v185 - 7) = 0.0;
                v188 = (void *)*((_QWORD *)v185 - 2);
                *((_QWORD *)v185 - 2) = v187;

                v189 = *((_QWORD *)v185 - 6);
                *(v185 - 6) = 0.0;
                v190 = (void *)*((_QWORD *)v185 - 1);
                *((_QWORD *)v185 - 1) = v189;

                v191 = *((_QWORD *)v185 - 5);
                v185 -= 5;
                *(_QWORD *)v186 = v191;
                v192 = *((_DWORD *)v186 - 28);
                v85 = v179 == v192;
                v193 = v179 < v192;
                if (v85)
                  v193 = v180 < *(v186 - 10);
              }
              while (v193);
              *((_DWORD *)v185 - 8) = v179;
              *(_QWORD *)((char *)v185 - 28) = v182;
              v194 = (void *)*((_QWORD *)v185 - 2);
              *((_QWORD *)v185 - 2) = v184;

              v195 = (void *)*((_QWORD *)v185 - 1);
              *((_QWORD *)v185 - 1) = v183;

              *v185 = v180;
            }
            v84 = v178 + 40;
            v177 += 5;
            v7 = v178;
          }
          while (v178 + 40 != a2);
        }
        return;
    }
  }
}

  v9 = (uint64_t)a1;
  v54 = (NetworkEdge *)((char *)a1 + 160);
  v55 = (NetworkEdge *)((char *)a1 + 80);
  v53 = (NetworkEdge *)((char *)a1 - 80);
  v10 = a2;
  while (2)
  {
    v11 = (uint64_t)v10 - v9;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v10 - v9) >> 4);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((const NetworkEdge *)((char *)v10 - 80), (NetworkEdge *)v9))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>((NetworkEdge *)v9, (uint64_t)v10 - 80);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v9, (NetworkEdge *)(v9 + 80), (uint64_t)v10 - 80, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v9, (NetworkEdge *)(v9 + 80), (NetworkEdge *)(v9 + 160), (uint64_t)v10 - 80, a3);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v9, (NetworkEdge *)(v9 + 80), (NetworkEdge *)(v9 + 160), (NetworkEdge *)(v9 + 240), (uint64_t)v10 - 80, a3);
        return;
      default:
        if (v11 > 1919)
        {
          a2 = v10;
          if (!a4)
          {
            if ((const NetworkEdge *)v9 != v10)
            {
              v32 = (unint64_t)(v12 - 2) >> 1;
              v56 = v32;
              do
              {
                v33 = v32;
                if (v56 >= v32)
                {
                  v34 = (2 * v32) | 1;
                  v35 = v9 + 80 * v34;
                  if (2 * v32 + 2 < v12
                    && (*a3)((NetworkEdge *)(v9 + 80 * v34), (NetworkEdge *)(v35 + 80)))
                  {
                    v35 += 80;
                    v34 = 2 * v33 + 2;
                  }
                  v36 = v9 + 80 * v33;
                  if (((*a3)((NetworkEdge *)v35, (NetworkEdge *)v36) & 1) == 0)
                  {
                    NetworkEdge::NetworkEdge((NetworkEdge *)v62, (const NetworkEdge *)(v9 + 80 * v33));
                    do
                    {
                      v37 = v35;
                      NetworkEdge::operator=(v36, v35);
                      if (v56 < v34)
                        break;
                      v38 = (2 * v34) | 1;
                      v35 = v9 + 80 * v38;
                      v34 = 2 * v34 + 2;
                      if (v34 >= v12)
                      {
                        v34 = v38;
                      }
                      else if ((*a3)((NetworkEdge *)(v9 + 80 * v38), (NetworkEdge *)(v35 + 80)))
                      {
                        v35 += 80;
                      }
                      else
                      {
                        v34 = v38;
                      }
                      v36 = v37;
                    }
                    while (!(*a3)((NetworkEdge *)v35, (NetworkEdge *)v62));
                    NetworkEdge::operator=(v37, (uint64_t)v62);
                    if (__p)
                    {
                      v64 = __p;
                      operator delete(__p);
                    }
                  }
                }
                v32 = v33 - 1;
              }
              while (v33);
              v39 = v11 / 0x50uLL;
              v40 = a2;
              do
              {
                if (v39 >= 2)
                {
                  v58 = v40;
                  NetworkEdge::NetworkEdge((NetworkEdge *)v59, (const NetworkEdge *)v9);
                  v41 = 0;
                  v42 = v9;
                  do
                  {
                    v43 = (const NetworkEdge *)(v42 + 80 * v41 + 80);
                    v44 = 2 * v41;
                    v41 = (2 * v41) | 1;
                    v45 = v44 + 2;
                    if (v44 + 2 < v39 && (*a3)(v43, (const NetworkEdge *)((char *)v43 + 80)))
                    {
                      v43 = (const NetworkEdge *)((char *)v43 + 80);
                      v41 = v45;
                    }
                    NetworkEdge::operator=(v42, (uint64_t)v43);
                    v42 = (uint64_t)v43;
                  }
                  while (v41 <= (uint64_t)((unint64_t)(v39 - 2) >> 1));
                  v40 = v58;
                  if (v43 == (const NetworkEdge *)((char *)v58 - 80))
                  {
                    NetworkEdge::operator=((uint64_t)v43, (uint64_t)v59);
                  }
                  else
                  {
                    NetworkEdge::operator=((uint64_t)v43, (uint64_t)v58 - 80);
                    NetworkEdge::operator=((uint64_t)v58 - 80, (uint64_t)v59);
                    v46 = (uint64_t)v43 - v9 + 80;
                    if (v46 >= 81)
                    {
                      v47 = (v46 / 0x50uLL - 2) >> 1;
                      v48 = v9 + 80 * v47;
                      if ((*a3)((NetworkEdge *)v48, v43))
                      {
                        NetworkEdge::NetworkEdge((NetworkEdge *)v62, v43);
                        do
                        {
                          v49 = v48;
                          NetworkEdge::operator=((uint64_t)v43, v48);
                          if (!v47)
                            break;
                          v47 = (v47 - 1) >> 1;
                          v48 = v9 + 80 * v47;
                          v43 = (const NetworkEdge *)v49;
                        }
                        while (((*a3)((NetworkEdge *)v48, (NetworkEdge *)v62) & 1) != 0);
                        NetworkEdge::operator=(v49, (uint64_t)v62);
                        if (__p)
                        {
                          v64 = __p;
                          operator delete(__p);
                        }
                      }
                    }
                  }
                  if (v60)
                  {
                    v61 = v60;
                    operator delete(v60);
                  }
                }
                v40 = (const NetworkEdge *)((char *)v40 - 80);
              }
              while ((unint64_t)v39-- > 2);
            }
            return;
          }
          v13 = (NetworkEdge *)(v9 + 80 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 < 0x2801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v13, (NetworkEdge *)v9, (uint64_t)v10 - 80, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)v9, v13, (uint64_t)v10 - 80, a3);
            v14 = v9 + 80 * ((unint64_t)v12 >> 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v55, (NetworkEdge *)(v14 - 80), (uint64_t)v10 - 160, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v54, (NetworkEdge *)(v14 + 80), (uint64_t)v10 - 240, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)(v14 - 80), v13, v14 + 80, a3);
            NetworkEdge::NetworkEdge((NetworkEdge *)v62, (const NetworkEdge *)v9);
            NetworkEdge::operator=(v9, (uint64_t)v13);
            NetworkEdge::operator=((uint64_t)v13, (uint64_t)v62);
            if (__p)
            {
              v64 = __p;
              operator delete(__p);
            }
          }
          --a4;
          if ((a5 & 1) != 0 || ((*a3)(v53, (NetworkEdge *)v9) & 1) != 0)
          {
            NetworkEdge::NetworkEdge((NetworkEdge *)v62, (const NetworkEdge *)v9);
            v15 = 0;
            do
            {
              v16 = (*a3)((NetworkEdge *)(v9 + v15 + 80), (NetworkEdge *)v62);
              v15 += 80;
            }
            while ((v16 & 1) != 0);
            v17 = v9 + v15;
            v18 = v10;
            if (v15 == 80)
            {
              v18 = v10;
              do
              {
                if (v17 >= (unint64_t)v18)
                  break;
                v18 = (NetworkEdge *)((char *)v18 - 80);
              }
              while (((*a3)(v18, (NetworkEdge *)v62) & 1) == 0);
            }
            else
            {
              do
                v18 = (NetworkEdge *)((char *)v18 - 80);
              while (!(*a3)(v18, (NetworkEdge *)v62));
            }
            if (v17 >= (unint64_t)v18)
            {
              v10 = (const NetworkEdge *)(v17 - 80);
            }
            else
            {
              v19 = (NetworkEdge *)(v9 + v15);
              v20 = (unint64_t)v18;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(v19, v20);
                do
                  v19 = (NetworkEdge *)((char *)v19 + 80);
                while (((*a3)(v19, (NetworkEdge *)v62) & 1) != 0);
                do
                  v20 -= 80;
                while (!(*a3)((NetworkEdge *)v20, (NetworkEdge *)v62));
              }
              while ((unint64_t)v19 < v20);
              v10 = (NetworkEdge *)((char *)v19 - 80);
            }
            if (v10 != (const NetworkEdge *)v9)
              NetworkEdge::operator=(v9, (uint64_t)v10);
            NetworkEdge::operator=((uint64_t)v10, (uint64_t)v62);
            if (__p)
            {
              v64 = __p;
              operator delete(__p);
            }
            if (v17 >= (unint64_t)v18)
            {
              v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(v9, v10, a3);
              a1 = (const NetworkEdge *)((char *)v10 + 80);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((uint64_t)v10 + 80, a2, a3))
              {
                if (!v21)
                  continue;
                return;
              }
              if (v21)
                goto LABEL_1;
            }
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(v9, v10, a3, a4, a5 & 1);
            a5 = 0;
            a1 = (const NetworkEdge *)((char *)v10 + 80);
            goto LABEL_1;
          }
          NetworkEdge::NetworkEdge((NetworkEdge *)v62, (const NetworkEdge *)v9);
          if (((*a3)((NetworkEdge *)v62, (const NetworkEdge *)((char *)v10 - 80)) & 1) != 0)
          {
            a1 = (NetworkEdge *)v9;
            do
              a1 = (NetworkEdge *)((char *)a1 + 80);
            while (((*a3)((NetworkEdge *)v62, a1) & 1) == 0);
          }
          else
          {
            v22 = (NetworkEdge *)(v9 + 80);
            do
            {
              a1 = v22;
              if (v22 >= v10)
                break;
              v23 = (*a3)((NetworkEdge *)v62, v22);
              v22 = (NetworkEdge *)((char *)a1 + 80);
            }
            while (!v23);
          }
          v24 = (unint64_t)v10;
          if (a1 < v10)
          {
            v24 = (unint64_t)v10;
            do
              v24 -= 80;
            while (((*a3)((NetworkEdge *)v62, (NetworkEdge *)v24) & 1) != 0);
          }
          while ((unint64_t)a1 < v24)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, v24);
            do
              a1 = (NetworkEdge *)((char *)a1 + 80);
            while (!(*a3)((NetworkEdge *)v62, a1));
            do
              v24 -= 80;
            while (((*a3)((NetworkEdge *)v62, (NetworkEdge *)v24) & 1) != 0);
          }
          if ((NetworkEdge *)((char *)a1 - 80) != (NetworkEdge *)v9)
            NetworkEdge::operator=(v9, (uint64_t)a1 - 80);
          NetworkEdge::operator=((uint64_t)a1 - 80, (uint64_t)v62);
          if (__p)
          {
            v64 = __p;
            operator delete(__p);
          }
          a5 = 0;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          if ((const NetworkEdge *)v9 != v10)
          {
            v25 = (const NetworkEdge *)(v9 + 80);
            if ((const NetworkEdge *)(v9 + 80) != v10)
            {
              v26 = 0;
              v27 = (const NetworkEdge *)v9;
              do
              {
                v28 = v27;
                v27 = v25;
                if ((*a3)(v25, v28))
                {
                  NetworkEdge::NetworkEdge((NetworkEdge *)v62, v27);
                  v29 = v26;
                  while (1)
                  {
                    NetworkEdge::operator=(v9 + v29 + 80, v9 + v29);
                    if (!v29)
                      break;
                    v30 = (*a3)((NetworkEdge *)v62, (NetworkEdge *)(v9 + v29 - 80));
                    v29 -= 80;
                    if ((v30 & 1) == 0)
                    {
                      v31 = v9 + v29 + 80;
                      goto LABEL_74;
                    }
                  }
                  v31 = v9;
LABEL_74:
                  NetworkEdge::operator=(v31, (uint64_t)v62);
                  if (__p)
                  {
                    v64 = __p;
                    operator delete(__p);
                  }
                }
                v25 = (const NetworkEdge *)((char *)v27 + 80);
                v26 += 80;
              }
              while ((const NetworkEdge *)((char *)v27 + 80) != v10);
            }
          }
        }
        else if ((const NetworkEdge *)v9 != v10)
        {
          v51 = (const NetworkEdge *)(v9 + 80);
          while (v51 != v10)
          {
            v52 = v51;
            if ((*a3)(v51, (NetworkEdge *)v9))
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)v62, v52);
              do
              {
                NetworkEdge::operator=(v9 + 80, v9);
                v9 -= 80;
              }
              while (((*a3)((NetworkEdge *)v62, (NetworkEdge *)v9) & 1) != 0);
              NetworkEdge::operator=(v9 + 80, (uint64_t)v62);
              if (__p)
              {
                v64 = __p;
                operator delete(__p);
              }
            }
            v51 = (const NetworkEdge *)((char *)v52 + 80);
            v9 = (uint64_t)v52;
          }
        }
        return;
    }
  }
}

  v9 = (uint64_t)a1;
  v57 = (CRCHLatticePath *)((char *)a1 + 896);
  v58 = (CRCHLatticePath *)((char *)a1 + 448);
  v56 = (CRCHLatticePath *)((char *)a1 - 448);
  v10 = a2;
  while (2)
  {
    v11 = (uint64_t)v10 - v9;
    v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v10 - v9) >> 6);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((const CRCHLatticePath *)((char *)v10 - 448), (CRCHLatticePath *)v9))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>((CRCHLatticePath *)v9, (uint64_t)v10 - 448);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v9, (CRCHLatticePath *)(v9 + 448), (uint64_t)v10 - 448, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v9, (CRCHLatticePath *)(v9 + 448), (CRCHLatticePath *)(v9 + 896), (uint64_t)v10 - 448, a3);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v9, (CRCHLatticePath *)(v9 + 448), (CRCHLatticePath *)(v9 + 896), (CRCHLatticePath *)(v9 + 1344), (uint64_t)v10 - 448, a3);
        return;
      default:
        if (v11 > 10751)
        {
          a2 = v10;
          if (!a4)
          {
            if ((const CRCHLatticePath *)v9 != v10)
            {
              v34 = (unint64_t)(v12 - 2) >> 1;
              v59 = v34;
              do
              {
                v35 = v34;
                if (v59 >= v34)
                {
                  v36 = (2 * v34) | 1;
                  v37 = v9 + 448 * v36;
                  if (2 * v34 + 2 < v12
                    && (*a3)((CRCHLatticePath *)(v9 + 448 * v36), (CRCHLatticePath *)(v37 + 448)))
                  {
                    v37 += 448;
                    v36 = 2 * v35 + 2;
                  }
                  v38 = v9 + 448 * v35;
                  if (((*a3)((CRCHLatticePath *)v37, (CRCHLatticePath *)v38) & 1) == 0)
                  {
                    CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v63, (const CRCHLatticePath *)(v9 + 448 * v35));
                    do
                    {
                      v39 = v37;
                      CRCHLatticePath::operator=(v38, v37);
                      if (v59 < v36)
                        break;
                      v40 = (2 * v36) | 1;
                      v37 = v9 + 448 * v40;
                      v36 = 2 * v36 + 2;
                      if (v36 >= v12)
                      {
                        v36 = v40;
                      }
                      else if ((*a3)((CRCHLatticePath *)(v9 + 448 * v40), (CRCHLatticePath *)(v37 + 448)))
                      {
                        v37 += 448;
                      }
                      else
                      {
                        v36 = v40;
                      }
                      v38 = v39;
                    }
                    while (!(*a3)((CRCHLatticePath *)v37, (CRCHLatticePath *)v63));
                    CRCHLatticePath::operator=(v39, (uint64_t)v63);
                    CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v63);
                  }
                }
                v34 = v35 - 1;
              }
              while (v35);
              v41 = (((unint64_t)v11 >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              v42 = (uint64_t)a2;
              do
              {
                v61 = v42;
                CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v62, (const CRCHLatticePath *)v9);
                v43 = 0;
                v44 = v41 - 2;
                if (v41 < 2)
                  v44 = v41 - 1;
                v45 = v44 >> 1;
                v46 = v9;
                do
                {
                  v47 = (const CRCHLatticePath *)(v46 + 448 * v43 + 448);
                  v48 = 2 * v43;
                  v43 = (2 * v43) | 1;
                  v49 = v48 + 2;
                  if (v48 + 2 < v41 && (*a3)(v47, (const CRCHLatticePath *)((char *)v47 + 448)))
                  {
                    v47 = (const CRCHLatticePath *)((char *)v47 + 448);
                    v43 = v49;
                  }
                  CRCHLatticePath::operator=(v46, (uint64_t)v47);
                  v46 = (uint64_t)v47;
                }
                while (v43 <= v45);
                v42 = v61 - 448;
                if (v47 == (const CRCHLatticePath *)(v61 - 448))
                {
                  CRCHLatticePath::operator=((uint64_t)v47, (uint64_t)v62);
                }
                else
                {
                  CRCHLatticePath::operator=((uint64_t)v47, v61 - 448);
                  CRCHLatticePath::operator=(v42, (uint64_t)v62);
                  v50 = (uint64_t)v47 - v9 + 448;
                  if (v50 >= 449)
                  {
                    v51 = (unint64_t)(((((unint64_t)v50 >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                           - 2) >> 1;
                    v52 = v9 + 448 * v51;
                    if ((*a3)((CRCHLatticePath *)v52, v47))
                    {
                      CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v63, v47);
                      do
                      {
                        v53 = v52;
                        CRCHLatticePath::operator=((uint64_t)v47, v52);
                        if (!v51)
                          break;
                        v51 = (v51 - 1) >> 1;
                        v52 = v9 + 448 * v51;
                        v47 = (const CRCHLatticePath *)v53;
                      }
                      while (((*a3)((CRCHLatticePath *)v52, (CRCHLatticePath *)v63) & 1) != 0);
                      CRCHLatticePath::operator=(v53, (uint64_t)v63);
                      CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v63);
                    }
                  }
                }
                CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v62);
              }
              while (v41-- > 2);
            }
            return;
          }
          v13 = (CRCHLatticePath *)(v9 + 448 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 <= 0xE000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v13, (CRCHLatticePath *)v9, (uint64_t)v10 - 448, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)v9, v13, (uint64_t)v10 - 448, a3);
            v14 = v9 + 448 * ((unint64_t)v12 >> 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v58, (CRCHLatticePath *)(v14 - 448), (uint64_t)v10 - 896, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v57, (CRCHLatticePath *)(v14 + 448), (uint64_t)v10 - 1344, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)(v14 - 448), v13, v14 + 448, a3);
            CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v63, (const CRCHLatticePath *)v9);
            CRCHLatticePath::operator=(v9, (uint64_t)v13);
            CRCHLatticePath::operator=((uint64_t)v13, (uint64_t)v63);
            CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v63);
          }
          --a4;
          if ((a5 & 1) != 0 || ((*a3)(v56, (CRCHLatticePath *)v9) & 1) != 0)
          {
            CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v63, (const CRCHLatticePath *)v9);
            v15 = 0;
            do
            {
              v16 = (*a3)((CRCHLatticePath *)(v9 + v15 + 448), (CRCHLatticePath *)v63);
              v15 += 448;
            }
            while ((v16 & 1) != 0);
            v17 = v9 + v15;
            v18 = v10;
            if (v15 == 448)
            {
              v18 = v10;
              do
              {
                if (v17 >= (unint64_t)v18)
                  break;
                v18 = (CRCHLatticePath *)((char *)v18 - 448);
              }
              while (((*a3)(v18, (CRCHLatticePath *)v63) & 1) == 0);
            }
            else
            {
              do
                v18 = (CRCHLatticePath *)((char *)v18 - 448);
              while (!(*a3)(v18, (CRCHLatticePath *)v63));
            }
            if (v17 >= (unint64_t)v18)
            {
              v10 = (const CRCHLatticePath *)(v17 - 448);
            }
            else
            {
              v19 = (CRCHLatticePath *)(v9 + v15);
              v20 = (unint64_t)v18;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(v19, v20);
                do
                  v19 = (CRCHLatticePath *)((char *)v19 + 448);
                while (((*a3)(v19, (CRCHLatticePath *)v63) & 1) != 0);
                do
                  v20 -= 448;
                while (!(*a3)((CRCHLatticePath *)v20, (CRCHLatticePath *)v63));
              }
              while ((unint64_t)v19 < v20);
              v10 = (CRCHLatticePath *)((char *)v19 - 448);
            }
            if (v10 != (const CRCHLatticePath *)v9)
              CRCHLatticePath::operator=(v9, (uint64_t)v10);
            CRCHLatticePath::operator=((uint64_t)v10, (uint64_t)v63);
            CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v63);
            if (v17 >= (unint64_t)v18)
            {
              v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(v9, v10, a3);
              a1 = (const CRCHLatticePath *)((char *)v10 + 448);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((uint64_t)v10 + 448, a2, a3))
              {
                if ((v21 & 1) == 0)
                  continue;
                return;
              }
              if ((v21 & 1) != 0)
                goto LABEL_1;
            }
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*,false>(v9, v10, a3, a4, a5 & 1);
            a5 = 0;
            a1 = (const CRCHLatticePath *)((char *)v10 + 448);
            goto LABEL_1;
          }
          CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v63, (const CRCHLatticePath *)v9);
          if (((*a3)((CRCHLatticePath *)v63, (const CRCHLatticePath *)((char *)v10 - 448)) & 1) != 0)
          {
            a1 = (CRCHLatticePath *)v9;
            do
              a1 = (CRCHLatticePath *)((char *)a1 + 448);
            while (((*a3)((CRCHLatticePath *)v63, a1) & 1) == 0);
          }
          else
          {
            v22 = (CRCHLatticePath *)(v9 + 448);
            do
            {
              a1 = v22;
              if (v22 >= v10)
                break;
              v23 = (*a3)((CRCHLatticePath *)v63, v22);
              v22 = (CRCHLatticePath *)((char *)a1 + 448);
            }
            while (!v23);
          }
          v24 = (unint64_t)v10;
          if (a1 < v10)
          {
            v24 = (unint64_t)v10;
            do
              v24 -= 448;
            while (((*a3)((CRCHLatticePath *)v63, (CRCHLatticePath *)v24) & 1) != 0);
          }
          while ((unint64_t)a1 < v24)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, v24);
            do
              a1 = (CRCHLatticePath *)((char *)a1 + 448);
            while (!(*a3)((CRCHLatticePath *)v63, a1));
            do
              v24 -= 448;
            while (((*a3)((CRCHLatticePath *)v63, (CRCHLatticePath *)v24) & 1) != 0);
          }
          if ((CRCHLatticePath *)((char *)a1 - 448) != (CRCHLatticePath *)v9)
            CRCHLatticePath::operator=(v9, (uint64_t)a1 - 448);
          CRCHLatticePath::operator=((uint64_t)a1 - 448, (uint64_t)v63);
          CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v63);
          a5 = 0;
          goto LABEL_1;
        }
        v25 = (const CRCHLatticePath *)(v9 + 448);
        v27 = (const CRCHLatticePath *)v9 == v10 || v25 == v10;
        if ((a5 & 1) != 0)
        {
          if (!v27)
          {
            v28 = 0;
            v29 = (const CRCHLatticePath *)v9;
            do
            {
              v30 = v29;
              v29 = v25;
              if ((*a3)(v25, v30))
              {
                CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v63, v29);
                v31 = v28;
                while (1)
                {
                  CRCHLatticePath::operator=(v9 + v31 + 448, v9 + v31);
                  if (!v31)
                    break;
                  v32 = (*a3)((CRCHLatticePath *)v63, (CRCHLatticePath *)(v9 + v31 - 448));
                  v31 -= 448;
                  if ((v32 & 1) == 0)
                  {
                    v33 = v9 + v31 + 448;
                    goto LABEL_73;
                  }
                }
                v33 = v9;
LABEL_73:
                CRCHLatticePath::operator=(v33, (uint64_t)v63);
                CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v63);
              }
              v25 = (const CRCHLatticePath *)((char *)v29 + 448);
              v28 += 448;
            }
            while ((const CRCHLatticePath *)((char *)v29 + 448) != v10);
          }
        }
        else if (!v27)
        {
          do
          {
            v55 = v25;
            if ((*a3)(v25, (CRCHLatticePath *)v9))
            {
              CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v63, v55);
              do
              {
                CRCHLatticePath::operator=(v9 + 448, v9);
                v9 -= 448;
              }
              while (((*a3)((CRCHLatticePath *)v63, (CRCHLatticePath *)v9) & 1) != 0);
              CRCHLatticePath::operator=(v9 + 448, (uint64_t)v63);
              CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v63);
            }
            v25 = (const CRCHLatticePath *)((char *)v55 + 448);
            v9 = (uint64_t)v55;
          }
          while ((const CRCHLatticePath *)((char *)v55 + 448) != v10);
        }
        return;
    }
  }
}

  v10 = a2 - 2;
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*a3)
          v48 = a2 - 2;
        else
          v48 = a2 - 1;
        v49 = *v48;
        if (*a3)
          v50 = v11;
        else
          v50 = v11 + 1;
        if (v49 < *v50)
        {
          v135 = *(_OWORD *)v11;
          *(_OWORD *)v11 = *(_OWORD *)v10;
          *(_OWORD *)v10 = v135;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(v11, v11 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(v11, v11 + 2, v11 + 4, (unint64_t *)a2 - 2, a3);
        return;
      case 5uLL:
        v51 = (__int128 *)(v11 + 2);
        v52 = (__int128 *)(v11 + 4);
        v53 = (__int128 *)(v11 + 6);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(v11, v11 + 2, v11 + 4, (unint64_t *)v11 + 6, a3);
        v54 = v11 + 7;
        if (*a3)
          v55 = a2 - 2;
        else
          v55 = a2 - 1;
        v56 = *v55;
        if (*a3)
          v57 = v11 + 6;
        else
          v57 = v11 + 7;
        if (v56 < *v57)
        {
          v58 = *v53;
          *v53 = *(_OWORD *)v10;
          *(_OWORD *)v10 = v58;
          v59 = v11 + 5;
          if (*a3)
            v54 = v11 + 6;
          v60 = *v54;
          if (*a3)
            v61 = v11 + 4;
          else
            v61 = v11 + 5;
          if (v60 < *v61)
          {
            v62 = *v52;
            *v52 = *v53;
            *v53 = v62;
            v63 = v11 + 2;
            if (*a3)
              v59 = v11 + 4;
            v64 = *v59;
            if (*a3)
              v65 = v11 + 2;
            else
              v65 = v11 + 3;
            if (v64 < *v65)
            {
              v66 = *v51;
              *v51 = *v52;
              *v52 = v66;
              if (!*a3)
                v63 = v11 + 3;
              v67 = *v63;
              if (*a3)
                v68 = v11;
              else
                v68 = v11 + 1;
              if (v67 < *v68)
              {
                v136 = *(_OWORD *)v11;
                *(_OWORD *)v11 = *v51;
                *v51 = v136;
              }
            }
          }
        }
        return;
      default:
        if (v12 <= 383)
        {
          v69 = v11 + 2;
          v71 = v11 == a2 || v69 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v71)
            {
              v72 = 0;
              v73 = v11;
              do
              {
                v75 = v73[2];
                v74 = v73[3];
                if (*a3)
                  v76 = v73;
                else
                  v76 = v73 + 1;
                v73 = v69;
                if (*a3)
                  v77 = v75;
                else
                  v77 = v74;
                if (v77 < *v76)
                {
                  v78 = v72;
                  while (1)
                  {
                    v79 = (char *)v11 + v78;
                    *(_OWORD *)((char *)v11 + v78 + 16) = *(_OWORD *)((char *)v11 + v78);
                    if (!v78)
                      break;
                    v80 = (double *)(v79 - 16);
                    v81 = (double *)(v79 - 8);
                    if (*a3)
                      v82 = v75;
                    else
                      v82 = v74;
                    if (*a3)
                      v81 = v80;
                    v78 -= 16;
                    if (v82 >= *v81)
                    {
                      v83 = (double *)((char *)v11 + v78 + 16);
                      goto LABEL_152;
                    }
                  }
                  v83 = v11;
LABEL_152:
                  *v83 = v75;
                  v83[1] = v74;
                }
                v69 = v73 + 2;
                v72 += 16;
              }
              while (v73 + 2 != a2);
            }
          }
          else if (!v71)
          {
            v124 = *a3;
            do
            {
              v125 = a1 + 1;
              v127 = a1[2];
              v126 = a1[3];
              if (v124)
                v125 = a1;
              a1 = v69;
              if (v124)
                v128 = v127;
              else
                v128 = v126;
              if (v128 < *v125)
              {
                do
                {
                  *(_OWORD *)v69 = *((_OWORD *)v69 - 1);
                  v129 = v69 - 4;
                  v130 = v69 - 3;
                  v69 -= 2;
                  v124 = *a3;
                  if (*a3)
                    v131 = v127;
                  else
                    v131 = v126;
                  if (!*a3)
                    v129 = v130;
                }
                while (v131 < *v129);
                *v69 = v127;
                v69[1] = v126;
              }
              v69 = a1 + 2;
            }
            while (a1 + 2 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v84 = (v13 - 2) >> 1;
            v85 = v84;
            do
            {
              v86 = v85;
              if (v84 >= v85)
              {
                v87 = (2 * v85) | 1;
                v88 = &v11[2 * v87];
                if (2 * v86 + 2 < (uint64_t)v13)
                {
                  v89 = v88 + 1;
                  if (*a3)
                    v89 = &v11[2 * v87];
                  v90 = *v89;
                  if (*a3)
                    v91 = v88 + 2;
                  else
                    v91 = v88 + 3;
                  if (v90 < *v91)
                  {
                    v88 += 2;
                    v87 = 2 * v86 + 2;
                  }
                }
                v92 = &v11[2 * v86];
                if (*a3)
                  v93 = v88;
                else
                  v93 = v88 + 1;
                v94 = *(_OWORD *)v92;
                v95 = v92[1];
                if (*a3)
                  v96 = *v92;
                else
                  v96 = v92[1];
                if (*v93 >= v96)
                {
                  do
                  {
                    v97 = v92;
                    v92 = v88;
                    *(_OWORD *)v97 = *(_OWORD *)v88;
                    if (v84 < v87)
                      break;
                    v98 = 2 * v87;
                    v87 = (2 * v87) | 1;
                    v88 = &v11[2 * v87];
                    if (v98 + 2 < (uint64_t)v13)
                    {
                      v99 = v88 + 1;
                      if (*a3)
                        v99 = &v11[2 * v87];
                      v100 = *v99;
                      if (*a3)
                        v101 = v88 + 2;
                      else
                        v101 = v88 + 3;
                      if (v100 < *v101)
                      {
                        v88 += 2;
                        v87 = v98 + 2;
                      }
                    }
                    v102 = *a3 ? v88 : v88 + 1;
                    v103 = *a3 ? *(double *)&v94 : v95;
                  }
                  while (*v102 >= v103);
                  *(_OWORD *)v92 = v94;
                }
              }
              v85 = v86 - 1;
            }
            while (v86);
            v104 = (unint64_t)v12 >> 4;
            do
            {
              v105 = 0;
              v137 = *(_OWORD *)v11;
              v106 = v11;
              do
              {
                v107 = v106;
                v106 += 2 * v105 + 2;
                v108 = 2 * v105;
                v105 = (2 * v105) | 1;
                v109 = v108 + 2;
                if (v109 < v104)
                {
                  v110 = *a3 ? v106 : v106 + 1;
                  v111 = *v110;
                  v112 = *a3 ? v106 + 2 : v106 + 3;
                  if (v111 < *v112)
                  {
                    v106 += 2;
                    v105 = v109;
                  }
                }
                *(_OWORD *)v107 = *(_OWORD *)v106;
              }
              while (v105 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
              a2 -= 2;
              if (v106 == a2)
              {
                *(_OWORD *)v106 = v137;
              }
              else
              {
                *(_OWORD *)v106 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v137;
                v113 = (char *)v106 - (char *)v11 + 16;
                if (v113 >= 17)
                {
                  v114 = (((unint64_t)v113 >> 4) - 2) >> 1;
                  v115 = &v11[2 * v114];
                  v116 = *a3 ? &v11[2 * v114] : v115 + 1;
                  v118 = *v106;
                  v117 = v106[1];
                  v119 = *a3 ? *v106 : v106[1];
                  if (*v116 < v119)
                  {
                    do
                    {
                      v120 = v106;
                      v106 = v115;
                      *(_OWORD *)v120 = *(_OWORD *)v115;
                      if (!v114)
                        break;
                      v114 = (v114 - 1) >> 1;
                      v115 = &v11[2 * v114];
                      v121 = *a3 ? &v11[2 * v114] : v115 + 1;
                      v122 = *a3 ? v118 : v117;
                    }
                    while (*v121 < v122);
                    *v106 = v118;
                    v106[1] = v117;
                  }
                }
              }
            }
            while (v104-- > 2);
          }
          return;
        }
        v14 = v13 >> 1;
        v15 = &v11[2 * (v13 >> 1)];
        if ((unint64_t)v12 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(&a1[2 * (v13 >> 1)], a1, a2 - 2, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(a1, &a1[2 * (v13 >> 1)], a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(a1 + 2, v15 - 2, a2 - 4, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(a1 + 4, &a1[2 * v14 + 2], a2 - 6, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>(v15 - 2, v15, &a1[2 * v14 + 2], a3);
          v132 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v15;
          *(_OWORD *)v15 = v132;
        }
        --a4;
        v16 = *a1;
        if ((a5 & 1) == 0)
        {
          v19 = a1 - 2;
          v18 = *a3;
          if (!*a3)
            v19 = a1 - 1;
          v17 = a1[1];
          if (*a3)
            v20 = *a1;
          else
            v20 = a1[1];
          if (*v19 < v20)
            goto LABEL_16;
          v36 = a2 - 1;
          if (*a3)
            v36 = a2 - 2;
          if (v20 >= *v36)
          {
            v39 = a1 + 2;
            do
            {
              v11 = v39;
              if (v39 >= a2)
                break;
              v40 = v39 + 1;
              if (*a3)
                v40 = v11;
              v41 = *v40;
              v39 = v11 + 2;
            }
            while (v20 >= v41);
          }
          else
          {
            v37 = a1;
            do
            {
              v11 = v37 + 2;
              v38 = v37 + 3;
              if (*a3)
                v38 = v11;
              v28 = v20 < *v38;
              v37 = v11;
            }
            while (!v28);
          }
          v42 = a2;
          if (v11 < a2)
          {
            v43 = a2;
            do
            {
              v42 = v43 - 2;
              v44 = v43 - 1;
              if (*a3)
                v44 = v42;
              v28 = v20 < *v44;
              v43 = v42;
            }
            while (v28);
          }
          while (v11 < v42)
          {
            v134 = *(_OWORD *)v11;
            *(_OWORD *)v11 = *(_OWORD *)v42;
            *(_OWORD *)v42 = v134;
            if (*a3)
              v45 = v16;
            else
              v45 = v17;
            do
            {
              v46 = v11 + 3;
              v11 += 2;
              if (*a3)
                v46 = v11;
            }
            while (v45 >= *v46);
            do
            {
              v47 = v42 - 1;
              v42 -= 2;
              if (*a3)
                v47 = v42;
            }
            while (v45 < *v47);
          }
          if (v11 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
          a5 = 0;
          *(v11 - 2) = v16;
          *(v11 - 1) = v17;
          continue;
        }
        v17 = a1[1];
        v18 = *a3;
LABEL_16:
        v21 = 0;
        if (v18)
          v22 = *a1;
        else
          v22 = v17;
        do
        {
          v23 = &a1[v21 + 3];
          if (v18)
            v23 = &a1[v21 + 2];
          v21 += 2;
        }
        while (*v23 < v22);
        v24 = &a1[v21];
        v25 = a2;
        if (v21 == 2)
        {
          v29 = a2;
          while (v24 < v29)
          {
            v26 = v29 - 2;
            v30 = v29 - 1;
            if (v18)
              v30 = v26;
            v28 = *v30 < v22;
            v29 = v26;
            if (v28)
              goto LABEL_36;
          }
          v26 = v29;
        }
        else
        {
          do
          {
            v26 = v25 - 2;
            v27 = v25 - 1;
            if (v18)
              v27 = v26;
            v28 = *v27 < v22;
            v25 = v26;
          }
          while (!v28);
        }
LABEL_36:
        v11 = v24;
        if (v24 < v26)
        {
          v31 = v26;
          do
          {
            v133 = *(_OWORD *)v11;
            *(_OWORD *)v11 = *(_OWORD *)v31;
            *(_OWORD *)v31 = v133;
            if (*a3)
              v32 = v16;
            else
              v32 = v17;
            do
            {
              v33 = v11 + 3;
              v11 += 2;
              if (*a3)
                v33 = v11;
            }
            while (*v33 < v32);
            do
            {
              v34 = v31 - 1;
              v31 -= 2;
              if (*a3)
                v34 = v31;
            }
            while (*v34 >= v32);
          }
          while (v11 < v31);
        }
        if (v11 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
        *(v11 - 2) = v16;
        *(v11 - 1) = v17;
        if (v24 < v26)
        {
LABEL_53:
          std::__introsort<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *,false>(a1, v11 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((__int128 *)a1, v11 - 2, a3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRNeuralTextDetectorV3 getBorderPoints:sourceImageSize:outP1:outP2:isHorizontal:]::$_0 &,CGPoint *>((__int128 *)v11, a2, a3))
        {
          if (v35)
            continue;
          goto LABEL_53;
        }
        a2 = v11 - 2;
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 2;
  i = (unint64_t)a1;
  while (2)
  {
    a1 = (float *)i;
    v10 = (uint64_t)a2 - i;
    v11 = (uint64_t)((uint64_t)a2 - i) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v43 = *(a2 - 2);
        v44 = *(float *)i;
        if (v43 < *(float *)i || v44 >= v43 && *(a2 - 1) < *(float *)(i + 4))
        {
          *(float *)i = v43;
          *(a2 - 2) = v44;
          v45 = *(_DWORD *)(i + 4);
          *(float *)(i + 4) = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v45;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)i, (float *)(i + 8), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)i, i + 8, i + 16, (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((float *)i, i + 8, i + 16, i + 24, (uint64_t)(a2 - 2));
        return;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((float *)i == a2)
              return;
            v60 = (v11 - 2) >> 1;
            v61 = v60;
            while (1)
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = (float *)(i + 8 * v63);
                if (2 * v62 + 2 < (uint64_t)v11)
                {
                  v65 = v64[2];
                  if (*v64 < v65 || v65 >= *v64 && *(float *)(i + 8 * v63 + 4) < v64[3])
                  {
                    v64 += 2;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = (float *)(i + 8 * v62);
                v67 = *v64;
                v68 = *v66;
                if (*v64 >= *v66)
                {
                  if (v68 < v67)
                  {
                    v69 = v66[1];
LABEL_128:
                    *v66 = v67;
                    v66[1] = v64[1];
                    if (v60 >= v63)
                    {
                      while (1)
                      {
                        v71 = 2 * v63;
                        v63 = (2 * v63) | 1;
                        v70 = (float *)(i + 8 * v63);
                        v72 = v71 + 2;
                        if (v72 < (uint64_t)v11)
                        {
                          v73 = v70[2];
                          if (*v70 < v73 || v73 >= *v70 && *(float *)(i + 8 * v63 + 4) < v70[3])
                          {
                            v70 += 2;
                            v63 = v72;
                          }
                        }
                        v74 = *v70;
                        if (*v70 < v68 || v68 >= v74 && v70[1] < v69)
                          break;
                        *v64 = v74;
                        v64[1] = v70[1];
                        v64 = v70;
                        if (v60 < v63)
                          goto LABEL_130;
                      }
                    }
                    v70 = v64;
LABEL_130:
                    *v70 = v68;
                    v70[1] = v69;
                    goto LABEL_131;
                  }
                  v69 = *(float *)(i + 8 * v62 + 4);
                  if (v64[1] >= v69)
                    goto LABEL_128;
                }
              }
LABEL_131:
              v61 = v62 - 1;
              if (!v62)
              {
                v75 = (unint64_t)v10 >> 3;
                while (1)
                {
                  v76 = 0;
                  v78 = *(float *)i;
                  v77 = *(_DWORD *)(i + 4);
                  v79 = v75 - 2;
                  if (v75 < 2)
                    v79 = v75 - 1;
                  v80 = v79 >> 1;
                  v81 = i;
                  do
                  {
                    v82 = (_DWORD *)v81;
                    v83 = v76 + 1;
                    v81 += 8 * (v76 + 1);
                    v84 = 2 * v76;
                    v76 = (2 * v76) | 1;
                    v85 = v84 + 2;
                    if (v85 < v75)
                    {
                      v86 = *(float *)(v81 + 8);
                      if (*(float *)v81 < v86
                        || v86 >= *(float *)v81 && *(float *)&v82[2 * v83 + 1] < *(float *)(v81 + 12))
                      {
                        v81 += 8;
                        v76 = v85;
                      }
                    }
                    *v82 = *(_DWORD *)v81;
                    v82[1] = *(_DWORD *)(v81 + 4);
                  }
                  while (v76 <= v80);
                  if ((float *)v81 == a2 - 2)
                  {
                    *(float *)v81 = v78;
                    *(_DWORD *)(v81 + 4) = v77;
                  }
                  else
                  {
                    *(float *)v81 = *(a2 - 2);
                    *(float *)(v81 + 4) = *(a2 - 1);
                    *(a2 - 2) = v78;
                    *((_DWORD *)a2 - 1) = v77;
                    v87 = v81 - i + 8;
                    if (v87 >= 9)
                    {
                      v88 = ((unint64_t)v87 >> 3) - 2;
                      v89 = v88 >> 1;
                      v90 = (float *)(i + 8 * (v88 >> 1));
                      v91 = *v90;
                      v92 = *(float *)v81;
                      if (*v90 < *(float *)v81)
                      {
                        v93 = *(float *)(v81 + 4);
LABEL_159:
                        *(float *)v81 = v91;
                        *(_DWORD *)(v81 + 4) = *(_DWORD *)(i + 8 * v89 + 4);
                        if (v88 >= 2)
                        {
                          while (1)
                          {
                            v95 = v89 - 1;
                            v89 = (v89 - 1) >> 1;
                            v94 = (float *)(i + 8 * v89);
                            v96 = *v94;
                            if (*v94 >= v92)
                            {
                              if (v92 < v96)
                                break;
                              v97 = *(float *)(i + 8 * v89 + 4);
                              if (v97 >= v93)
                                break;
                            }
                            else
                            {
                              v97 = v94[1];
                            }
                            *v90 = v96;
                            v90[1] = v97;
                            v90 = (float *)(i + 8 * v89);
                            if (v95 <= 1)
                              goto LABEL_166;
                          }
                        }
                        v94 = v90;
LABEL_166:
                        *v94 = v92;
                        v94[1] = v93;
                        goto LABEL_167;
                      }
                      if (v92 >= v91)
                      {
                        v93 = *(float *)(v81 + 4);
                        if (*(float *)(i + 8 * v89 + 4) < v93)
                          goto LABEL_159;
                      }
                    }
                  }
LABEL_167:
                  a2 -= 2;
                  if (v75-- <= 2)
                    return;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = (float *)(i + 8 * (v11 >> 1));
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(&a1[2 * (v11 >> 1)], a1, a2 - 2);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1, &a1[2 * (v11 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1 + 2, v13 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(a1 + 4, &a1[2 * v12 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(v13 - 2, v13, &a1[2 * v12 + 2]);
            v14 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v14;
          }
          --a3;
          v15 = *a1;
          if ((a4 & 1) == 0)
          {
            v16 = *(a1 - 2);
            if (v16 >= v15)
            {
              if (v15 < v16)
              {
                v17 = a1[1];
              }
              else
              {
                v17 = a1[1];
                if (*(a1 - 1) < v17)
                  goto LABEL_12;
              }
              v33 = *v8;
              if (v15 >= *v8 && (v33 < v15 || v17 >= *(a2 - 1)))
              {
                for (i = (unint64_t)(a1 + 2);
                      i < (unint64_t)a2 && v15 >= *(float *)i && (*(float *)i < v15 || v17 >= *(float *)(i + 4));
              }
              else
              {
                i = (unint64_t)a1;
                do
                {
                  v34 = *(float *)(i + 8);
                  i += 8;
                  v35 = v34;
                }
                while (v15 >= v34 && (v35 < v15 || v17 >= *(float *)(i + 4)));
              }
              j = a2;
              if (i < (unint64_t)a2)
              {
                for (j = a2 - 2; v15 < v33 || v33 >= v15 && v17 < j[1]; j -= 2)
                {
                  v37 = *(j - 2);
                  v33 = v37;
                }
              }
              if (i < (unint64_t)j)
              {
                v38 = *(float *)i;
                v39 = *j;
                do
                {
                  *(float *)i = v39;
                  *j = v38;
                  v40 = *(_DWORD *)(i + 4);
                  *(float *)(i + 4) = j[1];
                  *((_DWORD *)j + 1) = v40;
                  do
                  {
                    v41 = *(float *)(i + 8);
                    i += 8;
                    v38 = v41;
                  }
                  while (v15 >= v41 && (v38 < v15 || v17 >= *(float *)(i + 4)));
                  do
                  {
                    do
                    {
                      v42 = *(j - 2);
                      j -= 2;
                      v39 = v42;
                    }
                    while (v15 < v42);
                  }
                  while (v39 >= v15 && v17 < j[1]);
                }
                while (i < (unint64_t)j);
              }
              if ((float *)(i - 8) != a1)
              {
                *a1 = *(float *)(i - 8);
                a1[1] = *(float *)(i - 4);
              }
              a4 = 0;
              *(float *)(i - 8) = v15;
              *(float *)(i - 4) = v17;
              continue;
            }
          }
LABEL_12:
          v18 = 0;
          v19 = a1[1];
          while (1)
          {
            v20 = a1[v18 + 2];
            if (v20 >= v15 && (v15 < v20 || a1[v18 + 3] >= v19))
              break;
            v18 += 2;
          }
          v21 = (unint64_t)&a1[v18 + 2];
          if (v18 * 4)
          {
            v22 = *v8;
            v23 = a2 - 2;
            if (*v8 >= v15)
            {
              do
              {
                if (v15 >= v22 && v23[1] < v19)
                  break;
                v24 = *(v23 - 2);
                v23 -= 2;
                v22 = v24;
              }
              while (v24 >= v15);
            }
          }
          else
          {
            v23 = a2;
            if (v21 < (unint64_t)a2)
            {
              v25 = *v8;
              v23 = a2 - 2;
              if (*v8 >= v15)
              {
                v23 = a2 - 2;
                do
                {
                  if (v15 >= v25)
                  {
                    if (v21 >= (unint64_t)v23 || v23[1] < v19)
                      break;
                  }
                  else if (v21 >= (unint64_t)v23)
                  {
                    break;
                  }
                  v26 = *(v23 - 2);
                  v23 -= 2;
                  v25 = v26;
                }
                while (v26 >= v15);
              }
            }
          }
          if (v21 >= (unint64_t)v23)
          {
            i = v21;
          }
          else
          {
            v27 = *v23;
            i = v21;
            v28 = v23;
            do
            {
              *(float *)i = v27;
              *v28 = v20;
              v29 = *(_DWORD *)(i + 4);
              *(float *)(i + 4) = v28[1];
              *((_DWORD *)v28 + 1) = v29;
              do
              {
                do
                {
                  v30 = *(float *)(i + 8);
                  i += 8;
                  v20 = v30;
                }
                while (v30 < v15);
              }
              while (v15 >= v20 && *(float *)(i + 4) < v19);
              do
              {
                v31 = *(v28 - 2);
                v28 -= 2;
                v27 = v31;
              }
              while (v31 >= v15 && (v15 < v27 || v28[1] >= v19));
            }
            while (i < (unint64_t)v28);
          }
          if ((float *)(i - 8) != a1)
          {
            *a1 = *(float *)(i - 8);
            a1[1] = *(float *)(i - 4);
          }
          *(float *)(i - 8) = v15;
          *(float *)(i - 4) = v19;
          if (v21 < (unint64_t)v23)
          {
LABEL_49:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *,false>(a1, i - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>((uint64_t)a1, (float *)(i - 8));
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,float> *>(i, a2))
          {
            if (v32)
              continue;
            goto LABEL_49;
          }
          a2 = (float *)(i - 8);
          if (v32)
            return;
          goto LABEL_1;
        }
        v46 = (float *)(i + 8);
        v48 = (float *)i == a2 || v46 == a2;
        if ((a4 & 1) == 0)
        {
          if (v48)
            return;
          for (k = i + 4; ; k += 8)
          {
            v100 = a1;
            a1 = v46;
            v101 = v100[2];
            v102 = *v100;
            if (v101 < *v100)
              break;
            if (v102 >= v101)
            {
              v103 = v100[3];
              if (v103 < v100[1])
                goto LABEL_179;
            }
LABEL_185:
            v46 += 2;
            if (a1 + 2 == a2)
              return;
          }
          v103 = v100[3];
LABEL_179:
          for (m = (float *)k; ; m -= 2)
          {
            v105 = *m;
            m[1] = v102;
            m[2] = v105;
            v102 = *(m - 3);
            if (v101 >= v102 && (v102 < v101 || v103 >= *(m - 2)))
              break;
          }
          *(m - 1) = v101;
          *m = v103;
          goto LABEL_185;
        }
        if (v48)
          return;
        v49 = 0;
        v50 = (float *)i;
        do
        {
          v51 = v50;
          v50 = v46;
          v52 = v51[2];
          v53 = *v51;
          if (v52 >= *v51)
          {
            if (v53 < v52)
              goto LABEL_114;
            v54 = v51[3];
            if (v54 >= v51[1])
              goto LABEL_114;
          }
          else
          {
            v54 = v51[3];
          }
          v51[2] = v53;
          v46[1] = v51[1];
          v55 = (float *)i;
          if (v51 == (float *)i)
            goto LABEL_113;
          v56 = v49;
          while (1)
          {
            v57 = *(float *)(i + v56 - 8);
            if (v52 >= v57)
              break;
            v58 = *(float *)(i + v56 - 4);
LABEL_110:
            v51 -= 2;
            v59 = (float *)(i + v56);
            *v59 = v57;
            v59[1] = v58;
            v56 -= 8;
            if (!v56)
            {
              v55 = (float *)i;
              goto LABEL_113;
            }
          }
          if (v57 >= v52)
          {
            v55 = (float *)(i + v56);
            v58 = *(float *)(i + v56 - 4);
            if (v54 >= v58)
              goto LABEL_113;
            goto LABEL_110;
          }
          v55 = v51;
LABEL_113:
          *v55 = v52;
          v55[1] = v54;
LABEL_114:
          v46 = v50 + 2;
          v49 += 8;
        }
        while (v50 + 2 != a2);
        return;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_2 &,`anonymous namespace'::FieldCandidateEntry *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *a2;
  v4 = *a3;
  if (*a2 <= *result)
  {
    if (v4 > v3)
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v12 = *((_OWORD *)a2 + 2);
      v14 = *((_OWORD *)a3 + 1);
      v13 = *((_OWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((_OWORD *)a2 + 2) = v13;
      *((_OWORD *)a3 + 1) = v11;
      *((_OWORD *)a3 + 2) = v12;
      *(_OWORD *)a3 = v10;
      if (*a2 > *result)
      {
        v15 = *(_OWORD *)result;
        v16 = *((_OWORD *)result + 1);
        v17 = *((_OWORD *)result + 2);
        v19 = *((_OWORD *)a2 + 1);
        v18 = *((_OWORD *)a2 + 2);
        *(_OWORD *)result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v19;
        *((_OWORD *)result + 2) = v18;
        *((_OWORD *)a2 + 1) = v16;
        *((_OWORD *)a2 + 2) = v17;
        *(_OWORD *)a2 = v15;
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      v20 = *(_OWORD *)result;
      v21 = *((_OWORD *)result + 1);
      v22 = *((_OWORD *)result + 2);
      v24 = *((_OWORD *)a2 + 1);
      v23 = *((_OWORD *)a2 + 2);
      *(_OWORD *)result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v24;
      *((_OWORD *)result + 2) = v23;
      *((_OWORD *)a2 + 1) = v21;
      *((_OWORD *)a2 + 2) = v22;
      *(_OWORD *)a2 = v20;
      if (*a3 <= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      v6 = *((_OWORD *)a2 + 1);
      v7 = *((_OWORD *)a2 + 2);
      v26 = *((_OWORD *)a3 + 1);
      v25 = *((_OWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((_OWORD *)a2 + 2) = v25;
    }
    else
    {
      v5 = *(_OWORD *)result;
      v6 = *((_OWORD *)result + 1);
      v7 = *((_OWORD *)result + 2);
      v9 = *((_OWORD *)a3 + 1);
      v8 = *((_OWORD *)a3 + 2);
      *(_OWORD *)result = *(_OWORD *)a3;
      *((_OWORD *)result + 1) = v9;
      *((_OWORD *)result + 2) = v8;
    }
    *((_OWORD *)a3 + 1) = v6;
    *((_OWORD *)a3 + 2) = v7;
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_2 &,`anonymous namespace'::FieldCandidateEntry *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  _OWORD *v24;
  float v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[28];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 48);
      if (*(float *)(a2 - 48) > *(float *)a1)
      {
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a1 + 32);
        v11 = *(_OWORD *)(a2 - 32);
        v10 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v9;
        *v6 = v7;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v21 = (float *)(a1 + 48);
      v22 = (float *)(a1 + 96);
      v23 = (float *)(a1 + 144);
      v25 = *(float *)(a2 - 48);
      v24 = (_OWORD *)(a2 - 48);
      if (v25 <= *(float *)(a1 + 144))
        return 1;
      v26 = *(_OWORD *)v23;
      v27 = *(_OWORD *)(a1 + 160);
      v28 = *(_OWORD *)(a1 + 176);
      v30 = v24[1];
      v29 = v24[2];
      *(_OWORD *)v23 = *v24;
      *(_OWORD *)(a1 + 160) = v30;
      *(_OWORD *)(a1 + 176) = v29;
      v24[1] = v27;
      v24[2] = v28;
      *v24 = v26;
      if (*v23 <= *v22)
        return 1;
      v32 = *(_OWORD *)(a1 + 112);
      v31 = *(_OWORD *)(a1 + 128);
      v33 = *(_OWORD *)v22;
      v34 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 112) = v34;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)v23 = v33;
      *(_OWORD *)(a1 + 160) = v32;
      *(_OWORD *)(a1 + 176) = v31;
      if (*v22 <= *v21)
        return 1;
      v36 = *(_OWORD *)(a1 + 64);
      v35 = *(_OWORD *)(a1 + 80);
      v37 = *(_OWORD *)v21;
      v38 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(a1 + 64) = v38;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)v22 = v37;
      *(_OWORD *)(a1 + 112) = v36;
      *(_OWORD *)(a1 + 128) = v35;
      if (*(float *)(a1 + 48) <= *(float *)a1)
        return 1;
      v40 = *(_OWORD *)(a1 + 16);
      v39 = *(_OWORD *)(a1 + 32);
      v41 = *(_OWORD *)a1;
      v42 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)a1 = *(_OWORD *)v21;
      *(_OWORD *)(a1 + 16) = v42;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)v21 = v41;
      *(_OWORD *)(a1 + 64) = v40;
      result = 1;
      *(_OWORD *)(a1 + 80) = v39;
      return result;
    default:
      v12 = (float *)(a1 + 96);
      v13 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(float *)v13;
    if (*(float *)v13 > *v12)
    {
      v43 = *(_OWORD *)(v13 + 4);
      *(_OWORD *)v44 = *(_OWORD *)(v13 + 20);
      *(_OWORD *)&v44[12] = *(_OWORD *)(v13 + 32);
      v17 = v14;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 112);
        *(_OWORD *)(v18 + 144) = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 160) = v19;
        *(_OWORD *)(v18 + 176) = *(_OWORD *)(a1 + v17 + 128);
        if (v17 == -96)
          break;
        v17 -= 48;
        if (v16 <= *(float *)(v18 + 48))
        {
          v20 = a1 + v17 + 144;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(float *)v20 = v16;
      *(_OWORD *)(v20 + 4) = v43;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)v44;
      *(_OWORD *)(v20 + 32) = *(_OWORD *)&v44[12];
      if (++v15 == 8)
        return v13 + 48 == a2;
    }
    v12 = (float *)v13;
    v14 += 48;
    v13 += 48;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_2 &,`anonymous namespace'::FieldCandidateEntry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  result.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 > *(float *)a3)
  {
    result = *(__n128 *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v10 = *(_OWORD *)(a3 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    v11 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a4 + 16) = v9;
    *(_OWORD *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)a3;
    if (*(float *)a3 > *(float *)a2)
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)(a2 + 16);
      v14 = *(_OWORD *)(a2 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      v15 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)(a2 + 32) = v15;
      *(_OWORD *)(a3 + 16) = v13;
      *(_OWORD *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)a2;
      if (*(float *)a2 > *(float *)a1)
      {
        result = *(__n128 *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_OWORD *)(a1 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        v19 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_OWORD *)(a1 + 32) = v19;
        *(_OWORD *)(a2 + 16) = v17;
        *(_OWORD *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRFormDetector detectFormFieldsInImage:document:outputCandidateResults:]::$_3 &,`anonymous namespace'::FieldCandidateEntry *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  _OWORD *v24;
  float v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[28];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 48);
      if (*(float *)(a2 - 48) > *(float *)a1)
      {
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_OWORD *)(a1 + 32);
        v11 = *(_OWORD *)(a2 - 32);
        v10 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v9;
        *v6 = v7;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v21 = (float *)(a1 + 48);
      v22 = (float *)(a1 + 96);
      v23 = (float *)(a1 + 144);
      v25 = *(float *)(a2 - 48);
      v24 = (_OWORD *)(a2 - 48);
      if (v25 <= *(float *)(a1 + 144))
        return 1;
      v26 = *(_OWORD *)v23;
      v27 = *(_OWORD *)(a1 + 160);
      v28 = *(_OWORD *)(a1 + 176);
      v30 = v24[1];
      v29 = v24[2];
      *(_OWORD *)v23 = *v24;
      *(_OWORD *)(a1 + 160) = v30;
      *(_OWORD *)(a1 + 176) = v29;
      v24[1] = v27;
      v24[2] = v28;
      *v24 = v26;
      if (*v23 <= *v22)
        return 1;
      v32 = *(_OWORD *)(a1 + 112);
      v31 = *(_OWORD *)(a1 + 128);
      v33 = *(_OWORD *)v22;
      v34 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 112) = v34;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)v23 = v33;
      *(_OWORD *)(a1 + 160) = v32;
      *(_OWORD *)(a1 + 176) = v31;
      if (*v22 <= *v21)
        return 1;
      v36 = *(_OWORD *)(a1 + 64);
      v35 = *(_OWORD *)(a1 + 80);
      v37 = *(_OWORD *)v21;
      v38 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(a1 + 64) = v38;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)v22 = v37;
      *(_OWORD *)(a1 + 112) = v36;
      *(_OWORD *)(a1 + 128) = v35;
      if (*(float *)(a1 + 48) <= *(float *)a1)
        return 1;
      v40 = *(_OWORD *)(a1 + 16);
      v39 = *(_OWORD *)(a1 + 32);
      v41 = *(_OWORD *)a1;
      v42 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)a1 = *(_OWORD *)v21;
      *(_OWORD *)(a1 + 16) = v42;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)v21 = v41;
      *(_OWORD *)(a1 + 64) = v40;
      result = 1;
      *(_OWORD *)(a1 + 80) = v39;
      return result;
    default:
      v12 = (float *)(a1 + 96);
      v13 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(float *)v13;
    if (*(float *)v13 > *v12)
    {
      v43 = *(_OWORD *)(v13 + 4);
      *(_OWORD *)v44 = *(_OWORD *)(v13 + 20);
      *(_OWORD *)&v44[12] = *(_OWORD *)(v13 + 32);
      v17 = v14;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 112);
        *(_OWORD *)(v18 + 144) = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 160) = v19;
        *(_OWORD *)(v18 + 176) = *(_OWORD *)(a1 + v17 + 128);
        if (v17 == -96)
          break;
        v17 -= 48;
        if (v16 <= *(float *)(v18 + 48))
        {
          v20 = a1 + v17 + 144;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(float *)v20 = v16;
      *(_OWORD *)(v20 + 4) = v43;
      *(_OWORD *)(v20 + 20) = *(_OWORD *)v44;
      *(_OWORD *)(v20 + 32) = *(_OWORD *)&v44[12];
      if (++v15 == 8)
        return v13 + 48 == a2;
    }
    v12 = (float *)v13;
    v14 += 48;
    v13 += 48;
    if (v13 == a2)
      return 1;
  }
}

void sub_1D4FF2174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,void **a29)
{
  a29 = a27;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a29);

  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_1D4FF2518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void sub_1D4FF27D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FF2840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FF2A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D4FF2B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FF2C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FF2D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FF2E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FF2FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4FF314C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4FF357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D4FF3840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FF39D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<PixelPosition>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1D4FF3B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FF3C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FF3D54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1D4FF3E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_1D4FF4FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;
  void *v55;

  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FF5628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FF57FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FF5A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a13);
  v18 = v17;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FF5B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FF60C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FF619C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4FF68C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D4FF6AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FF6EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FF6FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4FF7858(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CRTableStructureRecognizerInputFeatures::freeImageBuffer(CRTableStructureRecognizerInputFeatures *this)
{
  void *data;

  data = this->var2.data;
  if (data)
  {
    free(data);
    this->var2.data = 0;
  }
}

void CRTableStructureRecognizerInputFeatures::~CRTableStructureRecognizerInputFeatures(CRTableStructureRecognizerInputFeatures *this)
{
  void *data;
  float *var0;
  float *v4;

  data = this->var2.data;
  if (data)
  {
    free(data);
    this->var2.data = 0;
  }
  var0 = this->var1.var0;
  if (var0)
  {
    this->var1.var1 = var0;
    operator delete(var0);
  }
  v4 = this->var0.var0;
  if (this->var0.var0)
  {
    this->var0.var1 = v4;
    operator delete(v4);
  }
}

void sub_1D4FF8940(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4FF8ADC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4FF8DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void sub_1D4FF8DFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void sub_1D4FF906C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void CRTableStructureRecognizerResultParsed::~CRTableStructureRecognizerResultParsed(CRTableStructureRecognizerResultParsed *this)
{
  CRTableStructureMerge *begin;
  double *v3;
  double *v4;

  begin = this->merges.__begin_;
  if (begin)
  {
    this->merges.__end_ = begin;
    operator delete(begin);
  }
  v3 = this->columnWidths.__begin_;
  if (v3)
  {
    this->columnWidths.__end_ = v3;
    operator delete(v3);
  }
  v4 = this->rowHeights.__begin_;
  if (v4)
  {
    this->rowHeights.__end_ = v4;
    operator delete(v4);
  }
}

void sub_1D4FF934C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4FF9AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void sub_1D4FF9CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4FF9DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4FFA090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D4FFA244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4FFA464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D4FFB208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, CRTableStructureRecognizerResultParsed *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, CRTableStructureRecognizerResultParsed *a20,CRTableStructureRecognizerInputFeatures *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,CRTableStructureRecognizerResultParsed *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__pa;
  void *a69;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;

  CRTableStructureRecognizerResultParsed::~CRTableStructureRecognizerResultParsed((CRTableStructureRecognizerResultParsed *)&STACK[0x220]);
  CRTableStructureRecognizerInputFeatures::~CRTableStructureRecognizerInputFeatures((CRTableStructureRecognizerInputFeatures *)&a51);

  if (__pa)
  {
    a69 = __pa;
    operator delete(__pa);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1D4FFC0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 256);
  if (v40)
  {
    *(_QWORD *)(v38 - 248) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void sub_1D4FFC484(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4FFCD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  CRTableStructureRecognizerResultParsed *v30;
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 160);
  if (v33)
  {
    *(_QWORD *)(v31 - 152) = v33;
    operator delete(v33);
  }
  if (v29)
    operator delete(v29);
  if (a21)
    operator delete(a21);
  if (a28)
    operator delete(a28);
  CRTableStructureRecognizerResultParsed::~CRTableStructureRecognizerResultParsed(v30);

  _Unwind_Resume(a1);
}

void sub_1D4FFDAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{

  _Unwind_Resume(a1);
}

void sub_1D4FFE24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

CRNormalizedQuad *transformRectWithHomography(CGRect a1, CGSize a2, simd_float3x3 a3)
{
  int32x2_t v11;
  float x;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  double v16;
  double y;
  double v18;
  float v19;
  float32x4_t v20;
  double v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  float32x4_t v28;
  double v29;
  double v30;
  double v31;
  float32x4_t v32;
  double v33;
  double v34;
  CGFloat width;

  width = a2.width;
  x = a1.origin.x;
  *(float *)v11.i32 = a1.origin.y;
  v13 = (float32x4_t)vdupq_lane_s32(v11, 0);
  v14 = vmulq_n_f32((float32x4_t)a3.columns[0], x);
  v15 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_n_f32(v14, (float32x4_t)a3.columns[1], *(float *)v11.i32));
  if (v15.f32[2] == 0.0)
  {
    v16 = a1.origin.x;
    y = a1.origin.y;
  }
  else
  {
    v16 = (float)(v15.f32[0] / v15.f32[2]);
    y = (float)(v15.f32[1] / v15.f32[2]);
  }
  v18 = a1.origin.x + a1.size.width;
  v19 = v18;
  v20 = vmulq_n_f32((float32x4_t)a3.columns[0], v19);
  v22 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_f32(v20, v13, (float32x4_t)a3.columns[1]));
  v21 = (float)(v22.f32[0] / v22.f32[2]);
  *(double *)v22.i64 = (float)(v22.f32[1] / v22.f32[2]);
  if (v22.f32[2] == 0.0)
    v23 = v18;
  else
    v23 = v21;
  if (v22.f32[2] == 0.0)
    v24 = a1.origin.y;
  else
    v24 = *(double *)v22.i64;
  v25 = a1.origin.y + a1.size.height;
  *(float *)&a1.size.height = v25;
  v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a1.size.height, 0);
  v28 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_n_f32(v20, (float32x4_t)a3.columns[1], *(float *)&a1.size.height));
  v27 = (float)(v28.f32[0] / v28.f32[2]);
  *(double *)v28.i64 = (float)(v28.f32[1] / v28.f32[2]);
  if (v28.f32[2] == 0.0)
    v29 = v18;
  else
    v29 = v27;
  if (v28.f32[2] == 0.0)
    v30 = v25;
  else
    v30 = *(double *)v28.i64;
  v32 = vaddq_f32((float32x4_t)a3.columns[2], vmlaq_f32(v14, v26, (float32x4_t)a3.columns[1]));
  v31 = (float)(v32.f32[0] / v32.f32[2]);
  *(double *)v32.i64 = (float)(v32.f32[1] / v32.f32[2]);
  if (v32.f32[2] == 0.0)
    v33 = a1.origin.x;
  else
    v33 = v31;
  if (v32.f32[2] == 0.0)
    v34 = v25;
  else
    v34 = *(double *)v32.i64;
  return -[CRNormalizedQuad initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:]([CRNormalizedQuad alloc], "initWithNormalizedTopLeft:topRight:bottomRight:bottomLeft:size:", v16, y, v23, v24, v29, v30, v33, v34, *(_QWORD *)&width, *(_QWORD *)&a2.height);
}

void sub_1D4FFE610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4FFE9C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;

  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FFEB34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

char *std::vector<CRTableStructureRow>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_QWORD *std::vector<CRTableStructureMerge>::__init_with_size[abi:ne180100]<CRTableStructureMerge*,CRTableStructureMerge*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CRTableStructureRow>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FFEC1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CRTableStructureMerge>::__assign_with_size[abi:ne180100]<CRTableStructureMerge*,CRTableStructureMerge*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CRTableStructureRow>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D4FFEDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1D4FFEE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::vector<CGRect>::__init_with_size[abi:ne180100]<CGRect*,CGRect*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CGRect>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FFEF94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<_NSRange>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4FFF00C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<_NSRange>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

char *std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<_NSRange>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void **std::unique_ptr<CoreRecognition::EspressoModelWrapper>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreRecognition::EspressoModelWrapper::~EspressoModelWrapper(result);
    JUMPOUT(0x1D826E294);
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D4FFF2C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<_NSRange>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1D4FFF33C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D4FFF3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void BreakPoint::BreakPoint(BreakPoint *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t BreakPoint::BreakPoint(uint64_t a1, int a2, int a3, int a4, void *a5, void *a6, double a7)
{
  id v13;
  id v14;

  v13 = a5;
  v14 = a6;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  *(double *)(a1 + 32) = a7;
  return a1;
}

{
  id v13;
  id v14;

  v13 = a5;
  v14 = a6;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  *(double *)(a1 + 32) = a7;
  return a1;
}

BOOL BreakPoint::operator<(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return *(double *)(a1 + 32) < *(double *)(a2 + 32);
  else
    return *(_DWORD *)a1 < *(_DWORD *)a2;
}

void Segmenter::Segmenter(Segmenter *this, NSArray *a2, CRImage *a3, NSString *a4, char a5, char a6, char a7, char a8, int a9)
{
  NSArray *v16;
  CRImage *v17;
  NSString *v18;
  NSArray *v19;
  CRImage *v20;
  NSString *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;

  v16 = a2;
  v17 = a3;
  v18 = a4;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0;
  v19 = v16;
  *((_QWORD *)this + 5) = v19;
  v20 = v17;
  *((_QWORD *)this + 6) = v20;
  v21 = v18;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 7) = v21;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_BYTE *)this + 112) = a5;
  *((_BYTE *)this + 113) = a6;
  *((_BYTE *)this + 114) = a7;
  *((_BYTE *)this + 116) = a8;
  *((_DWORD *)this + 30) = a9;
  *((_BYTE *)this + 115) = 1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v22;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v24;

  Segmenter::presegmentFeatures((id *)this);
  Segmenter::addSegmentationLayer((id *)this, 0, 0);

}

{
  Segmenter::Segmenter(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1D4FFF634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  void *v16;
  void *v17;

  v16 = *(void **)(v10 + 88);
  if (v16)
  {
    *(_QWORD *)(v10 + 96) = v16;
    operator delete(v16);
  }
  v17 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 72) = v17;
    operator delete(v17);
  }

  a10 = (void **)v10;
  std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](&a10);

  _Unwind_Resume(a1);
}

void Segmenter::presegmentFeatures(id *this)
{
  id *v1;
  unint64_t v2;
  _BYTE *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CRTextFeature *v24;
  void *v25;
  unint64_t i;
  void *v27;
  BOOL v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  void *v35;
  unint64_t j;
  void *v37;
  BOOL v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  void *v45;
  _BOOL4 v46;
  double v47;
  void *v48;
  uint64_t k;
  void *v50;
  BOOL v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  char **v72;
  char *v73;
  char *v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char **v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  char *v94;
  id obj;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  id *v100;
  void *__p;
  _BYTE *v102;
  void *v103;
  _BYTE *v104;
  void *v105;
  _BYTE *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  CRTextFeature *v111;
  _BYTE v112[128];
  uint64_t v113;

  v1 = this;
  v113 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(this[5], "count");
  v3 = *v1;
  v4 = (char *)v1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*v1) >> 3);
  v6 = v2 - v5;
  v100 = v1;
  if (v2 <= v5)
  {
    if (v2 < v5)
    {
      v20 = &v3[24 * v2];
      while (v4 != v20)
      {
        v4 -= 24;
        v105 = v4;
        std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
      }
      v1[1] = v20;
    }
  }
  else
  {
    v7 = v1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      bzero(v4, 24 * ((24 * v6 - 24) / 0x18) + 24);
      v1[1] = &v4[24 * ((24 * v6 - 24) / 0x18) + 24];
    }
    else
    {
      if (v2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= v2)
        v9 = v2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v1 + 2), v10);
      v12 = &v11[24 * v5];
      v14 = &v11[24 * v13];
      bzero(v12, 24 * ((24 * v6 - 24) / 0x18) + 24);
      v15 = &v12[24 * ((24 * v6 - 24) / 0x18) + 24];
      v16 = (char *)*v100;
      v17 = (char *)v100[1];
      if (v17 == *v100)
      {
        *v100 = v12;
        v100[1] = v15;
        v100[2] = v14;
        v1 = v100;
      }
      else
      {
        do
        {
          *((_QWORD *)v12 - 3) = 0;
          *((_QWORD *)v12 - 2) = 0;
          v12 -= 24;
          *((_QWORD *)v12 + 2) = 0;
          v18 = *(_OWORD *)(v17 - 24);
          v17 -= 24;
          *(_OWORD *)v12 = v18;
          *((_QWORD *)v12 + 2) = *((_QWORD *)v17 + 2);
          *(_QWORD *)v17 = 0;
          *((_QWORD *)v17 + 1) = 0;
          *((_QWORD *)v17 + 2) = 0;
        }
        while (v17 != v16);
        v17 = (char *)*v100;
        v19 = (char *)v100[1];
        *v100 = v12;
        v100[1] = v15;
        v100[2] = v14;
        v1 = v100;
        while (v19 != v17)
        {
          v19 -= 24;
          v105 = v19;
          std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
        }
      }
      if (v17)
        operator delete(v17);
    }
  }
  v98 = v1 + 8;
  std::vector<double>::resize((uint64_t)(v1 + 8), objc_msgSend(v1[5], "count"));
  v97 = v1 + 11;
  std::vector<double>::resize((uint64_t)(v1 + 11), objc_msgSend(v1[5], "count"));
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  obj = v1[5];
  v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v112, 16);
  if (v21)
  {
    v22 = 0;
    v96 = *(_QWORD *)v108;
    do
    {
      v23 = 0;
      v99 = v21;
      do
      {
        if (*(_QWORD *)v108 != v96)
          objc_enumerationMutation(obj);
        v24 = *(CRTextFeature **)(*((_QWORD *)&v107 + 1) + 8 * v23);
        -[CRTextFeature updateSizeHints](v24, "updateSizeHints");
        -[CRTextFeature subFeatures](v24, "subFeatures");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        std::vector<double>::vector(&v105, objc_msgSend(v25, "count"));

        for (i = 0; ; ++i)
        {
          -[CRTextFeature subFeatures](v24, "subFeatures");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = i < objc_msgSend(v27, "count");

          if (!v28)
            break;
          -[CRTextFeature subFeatures](v24, "subFeatures");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "objectAtIndexedSubscript:", i);
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v30, "bounds");
          *((_QWORD *)v105 + i) = v31;

        }
        std::__sort<std::__less<double,double> &,double *>();
        v32 = v106 - (_BYTE *)v105;
        if (v106 == v105)
        {
          v34 = 0.0;
        }
        else
        {
          v33 = (unint64_t)(v32 >> 3) >> 1;
          v34 = *((double *)v105 + v33);
          if ((v32 & 8) == 0)
            v34 = (v34 + *((double *)v105 + v33 - 1)) * 0.5;
        }
        -[CRTextFeature subFeatures](v24, "subFeatures");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        std::vector<double>::vector(&v103, objc_msgSend(v35, "count"));

        for (j = 0; ; ++j)
        {
          -[CRTextFeature subFeatures](v24, "subFeatures");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = j < objc_msgSend(v37, "count");

          if (!v38)
            break;
          -[CRTextFeature subFeatures](v24, "subFeatures");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "objectAtIndexedSubscript:", j);
          v40 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v40, "bounds");
          *((_QWORD *)v103 + j) = v41;

        }
        std::__sort<std::__less<double,double> &,double *>();
        v42 = v104 - (_BYTE *)v103;
        if (v104 == v103)
        {
          v44 = 0.0;
        }
        else
        {
          v43 = (unint64_t)(v42 >> 3) >> 1;
          v44 = *((double *)v103 + v43);
          if ((v42 & 8) == 0)
            v44 = (v44 + *((double *)v103 + v43 - 1)) * 0.5;
        }
        -[CRTextFeature subFeatures](v24, "subFeatures");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = (unint64_t)objc_msgSend(v45, "count") > 1;

        v47 = 0.0;
        if (v46)
        {
          -[CRTextFeature subFeatures](v24, "subFeatures");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          std::vector<double>::vector(&__p, objc_msgSend(v48, "count") - 1);

          for (k = 0; ; ++k)
          {
            -[CRTextFeature subFeatures](v24, "subFeatures");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            v51 = k + 1 < (unint64_t)objc_msgSend(v50, "count");

            if (!v51)
              break;
            -[CRTextFeature subFeatures](v24, "subFeatures");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "objectAtIndexedSubscript:", k);
            v53 = (void *)objc_claimAutoreleasedReturnValue();

            -[CRTextFeature subFeatures](v24, "subFeatures");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "objectAtIndexedSubscript:", k + 1);
            v55 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v55, "bounds");
            v57 = v56;
            objc_msgSend(v53, "bounds");
            v59 = v58;
            objc_msgSend(v53, "bounds");
            *((double *)__p + k) = v57 - (v59 + v60);

          }
          std::__sort<std::__less<double,double> &,double *>();
          v61 = v102 - (_BYTE *)__p;
          if (v102 == __p)
          {
            v63 = 0.0;
          }
          else
          {
            v62 = (unint64_t)(v61 >> 3) >> 1;
            v63 = *((double *)__p + v62);
            if ((v61 & 8) == 0)
              v63 = (v63 + *((double *)__p + v62 - 1)) * 0.5;
          }
          v64 = objc_msgSend(v1[6], "width");
          v65 = objc_msgSend(v1[6], "height");
          v66 = objc_msgSend(v1[6], "width");
          if (__p)
          {
            v102 = __p;
            operator delete(__p);
          }
          v47 = fmax(v63 * (double)v64, v44 * 0.136363636 * (double)v65) / (double)v66;
        }
        if (*((_BYTE *)v1 + 112))
        {
          Segmenter::textPiecesAfterGeometricPresegmentationOfTextFeature((Segmenter *)v1, v24, (CRImage *)v1[6]);
          v67 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (*((_BYTE *)v1 + 113))
          {
            v111 = v24;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v111, 1);
          }
          else
          {
            -[CRTextFeature wordFeatures](v24, "wordFeatures");
          }
          v67 = objc_claimAutoreleasedReturnValue();
        }
        v68 = (void *)v67;
        objc_msgSend(v100[3], "addObject:", v67);
        v69 = (char *)*v100;
        v70 = objc_msgSend(v68, "count");
        v71 = &v69[24 * v22];
        v72 = (char **)(v71 + 8);
        v73 = (char *)*((_QWORD *)v71 + 1);
        v74 = *(char **)v71;
        v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v73[-*(_QWORD *)v71] >> 3);
        v76 = v70 >= v75;
        v77 = v70 - v75;
        if (v70 <= v75)
        {
          v1 = v100;
          if (!v76)
          {
            v94 = &v74[24 * v70];
            while (v73 != v94)
            {
              v73 -= 24;
              __p = v73;
              std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            }
            *v72 = v94;
          }
        }
        else
        {
          v78 = &v69[24 * v22];
          v81 = *((_QWORD *)v78 + 2);
          v80 = (char **)(v78 + 16);
          v79 = v81;
          if (0xAAAAAAAAAAAAAAABLL * ((v81 - (uint64_t)v73) >> 3) >= v77)
          {
            bzero(v73, 24 * ((24 * v77 - 24) / 0x18) + 24);
            *v72 = &v73[24 * ((24 * v77 - 24) / 0x18) + 24];
            v1 = v100;
            goto LABEL_83;
          }
          if (v70 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
          v82 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (uint64_t)v74) >> 3);
          v83 = 2 * v82;
          if (2 * v82 <= v70)
            v83 = v70;
          if (v82 >= 0x555555555555555)
            v84 = 0xAAAAAAAAAAAAAAALL;
          else
            v84 = v83;
          v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v80, v84);
          v86 = &v85[24 * v75];
          v88 = &v85[24 * v87];
          bzero(v86, 24 * ((24 * v77 - 24) / 0x18) + 24);
          v89 = &v86[24 * ((24 * v77 - 24) / 0x18) + 24];
          v90 = *v72;
          v91 = *(char **)v71;
          if (*v72 == *(char **)v71)
          {
            *(_QWORD *)v71 = v86;
            *v72 = v89;
            *v80 = v88;
LABEL_81:
            v1 = v100;
            if (!v90)
              goto LABEL_83;
LABEL_82:
            operator delete(v90);
            goto LABEL_83;
          }
          do
          {
            *((_QWORD *)v86 - 3) = 0;
            *((_QWORD *)v86 - 2) = 0;
            v86 -= 24;
            *((_QWORD *)v86 + 2) = 0;
            v92 = *(_OWORD *)(v90 - 24);
            v90 -= 24;
            *(_OWORD *)v86 = v92;
            *((_QWORD *)v86 + 2) = *((_QWORD *)v90 + 2);
            *(_QWORD *)v90 = 0;
            *((_QWORD *)v90 + 1) = 0;
            *((_QWORD *)v90 + 2) = 0;
          }
          while (v90 != v91);
          v90 = *(char **)v71;
          v93 = *v72;
          *(_QWORD *)v71 = v86;
          *v72 = v89;
          *v80 = v88;
          if (v93 == v90)
            goto LABEL_81;
          v1 = v100;
          do
          {
            v93 -= 24;
            __p = v93;
            std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          while (v93 != v90);
          if (v90)
            goto LABEL_82;
        }
LABEL_83:
        *(double *)(*v98 + 8 * v22) = v34;
        *(double *)(*v97 + 8 * v22) = v47;

        if (v103)
        {
          v104 = v103;
          operator delete(v103);
        }
        if (v105)
        {
          v106 = v105;
          operator delete(v105);
        }
        ++v22;
        ++v23;
      }
      while (v23 != v99);
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v107, v112, 16);
    }
    while (v21);
  }

}

void sub_1D4FFFF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{

  _Unwind_Resume(a1);
}

void Segmenter::addSegmentationLayer(id *this, int a2, int a3)
{
  unint64_t v5;
  unint64_t i;
  void *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;

  if (a2 == 1)
  {
    Segmenter::addSegmentationLayerOfTypeFixed(this, a3);
  }
  else if (!a2)
  {
    Segmenter::addSegmentationLayerOfTypeNone(this);
  }
  if (objc_msgSend(this[3], "count"))
  {
    v5 = 0;
    do
    {
      for (i = 0; ; ++i)
      {
        objc_msgSend(this[3], "objectAtIndexedSubscript:", v5);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "count");

        if (i >= v8)
          break;
        v9 = (unint64_t *)(*((_QWORD *)*this + 3 * v5) + 24 * i);
        v10 = v9[1];
        v11 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *v9) >> 3));
        if (v10 == *v9)
          v12 = 0;
        else
          v12 = v11;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *,false>(*v9, v10, v12, 1);
        v13 = (_DWORD *)*v9;
        v14 = (_DWORD *)v9[1];
        if ((_DWORD *)*v9 != v14)
        {
          v15 = 0;
          do
          {
            *v13 = v15;
            v13 += 10;
            ++v15;
          }
          while (v13 != v14);
        }
      }
      ++v5;
    }
    while (v5 < objc_msgSend(this[3], "count"));
  }
  if (a2)
    Segmenter::calculateSubRegions(this);
  else
    Segmenter::initSubRegionsWithInitialFeatures((Segmenter *)this);
}

void sub_1D5000238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Segmenter::Segmenter(Segmenter *this)
{
  *((_BYTE *)this + 115) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
}

{
  *((_BYTE *)this + 115) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
}

void Segmenter::~Segmenter(Segmenter *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }

  v4 = (void **)this;
  std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

double Segmenter::medianOfVectorDouble(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a2;
  v3 = a2[1] - *a2;
  if (!v3)
    return 0.0;
  v4 = (unint64_t)(v3 >> 3) >> 1;
  result = *(double *)(v2 + 8 * v4);
  if ((v3 & 8) == 0)
    return (result + *(double *)(v2 + 8 * v4 - 8)) * 0.5;
  return result;
}

id Segmenter::textPiecesAfterGeometricPresegmentationOfTextFeature(Segmenter *this, CRTextFeature *a2, CRImage *a3)
{
  CRTextFeature *v4;
  void *v5;
  unint64_t v6;
  int v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t i;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSUInteger v32;
  uint64_t v33;
  NSUInteger v34;
  Segmenter *v35;
  double v36;
  void *v37;
  CRTextFeature *v38;
  _BOOL4 isNarrowChar;
  Segmenter *v40;
  double v41;
  unint64_t v42;
  double v43;
  double v44;
  void *v45;
  CRTextFeature *v46;
  Segmenter *v47;
  double v48;
  CRTextFeature *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  CRTextFeature *v53;
  id v55;
  CRTextFeature *v56;
  void *v58;
  CRImage *v59;
  _QWORD v60[2];
  _NSRange v61;
  _NSRange v62;
  _NSRange v63;

  v60[1] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v59 = a3;
  -[CRTextFeature subFeatures](v4, "subFeatures");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6 > 5)
  {
    v7 = *((_DWORD *)this + 30);
    if (v7)
      v8 = 1.5;
    else
      v8 = 1.0;
    if (v7)
      v9 = 1.0;
    else
      v9 = 0.833333333;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v55 = (id)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1E0C99DE8];
    -[CRTextFeature subFeatures](v4, "subFeatures");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = v4;
    objc_msgSend(v11, "objectAtIndexedSubscript:", 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "arrayWithObject:", v12);
    v58 = (void *)objc_claimAutoreleasedReturnValue();

    for (i = 0; ; ++i)
    {
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "count");

      if (i + 1 >= v15)
        break;
      v16 = -[CRImage width](v59, "width");
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "objectAtIndexedSubscript:", i + 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "bounds");
      v20 = v19;
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "objectAtIndexedSubscript:", i);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "bounds");
      v24 = v23;
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "objectAtIndexedSubscript:", i);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "bounds");
      v28 = v27;

      if (i + 1 <= 5)
        v29 = 5;
      else
        v29 = i + 1;
      v4 = v56;
      -[CRTextFeature subFeatures](v56, "subFeatures");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v30, "count");
      v32 = v29 - 5;
      if (v31 >= i + 6)
        v33 = i + 6;
      else
        v33 = v31;

      v34 = v33 - v29 + 6;
      v61.location = v29 - 5;
      v61.length = v34;
      v36 = fmax(Segmenter::medianInterSubfeatureSpacingForFeature(v35, v56, v61), 0.0);
      if (*((_BYTE *)this + 116))
      {
        -[CRTextFeature subFeatures](v56, "subFeatures");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "objectAtIndexedSubscript:", i + 1);
        v38 = (CRTextFeature *)objc_claimAutoreleasedReturnValue();
        if (Segmenter::isNarrowChar(this, v38, v59))
        {
          isNarrowChar = 1;
        }
        else
        {
          -[CRTextFeature subFeatures](v56, "subFeatures");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "objectAtIndexedSubscript:", i);
          v46 = (CRTextFeature *)objc_claimAutoreleasedReturnValue();
          isNarrowChar = Segmenter::isNarrowChar(this, v46, v59);

        }
        v4 = v56;

        v47 = -[CRImage width](v59, "width");
        v63.location = v32;
        v63.length = v34;
        v41 = Segmenter::medianSubfeatureHeightForFeature(v47, v56, v63);
        if (isNarrowChar)
          v48 = v8;
        else
          v48 = v9;
        v42 = -[CRImage height](v59, "height");
        v43 = v36 * (v48 * 3.0);
        v44 = (double)(unint64_t)v47;
      }
      else
      {
        v40 = -[CRImage width](v59, "width");
        v62.location = v29 - 5;
        v62.length = v33 - v29 + 6;
        v41 = Segmenter::medianSubfeatureHeightForFeature(v40, v56, v62);
        v42 = -[CRImage height](v59, "height");
        v43 = v36 * 3.0;
        v44 = (double)(unint64_t)v40;
      }
      if ((v20 - (v24 + v28)) * (double)v16 > fmax(v43 * v44, v41 * 0.5 * (double)v42))
      {
        v49 = -[CRTextFeature initWithSubfeatures:]([CRTextFeature alloc], "initWithSubfeatures:", v58);
        objc_msgSend(v55, "addObject:", v49);

        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v50 = objc_claimAutoreleasedReturnValue();

        v58 = (void *)v50;
      }
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "objectAtIndexedSubscript:", i + 1);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "addObject:", v52);

    }
    v53 = -[CRTextFeature initWithSubfeatures:]([CRTextFeature alloc], "initWithSubfeatures:", v58);
    objc_msgSend(v55, "addObject:", v53);

  }
  else
  {
    v60[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v60, 1);
    v55 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v55;
}

void sub_1D50007FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void Segmenter::addSegmentationLayerOfTypeNone(id *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  id v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  BOOL v42;
  uint64_t i;
  void *v44;
  BOOL v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  id v56;
  id v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  id obj;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t *v94;
  _BYTE v95[128];
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  obj = this[3];
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v96, 16);
  if (v1)
  {
    v74 = 0;
    v69 = *(_QWORD *)v87;
    do
    {
      v2 = 0;
      v68 = v1;
      do
      {
        if (*(_QWORD *)v87 != v69)
          objc_enumerationMutation(obj);
        v70 = v2;
        v3 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v2);
        v82 = 0u;
        v83 = 0u;
        v84 = 0u;
        v85 = 0u;
        v71 = v3;
        v4 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v82, v95, 16);
        if (v4)
        {
          v79 = 0;
          v73 = *(_QWORD *)v83;
          do
          {
            v80 = 0;
            v75 = v4;
            do
            {
              if (*(_QWORD *)v83 != v73)
                objc_enumerationMutation(v71);
              v5 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * v80);
              v6 = *((_QWORD *)*this + 3 * v74);
              objc_msgSend(v5, "subFeatures");
              v7 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "firstObject");
              v76 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v76, "bounds");
              v9 = v8;
              v11 = v76;
              v10 = (uint64_t *)(v6 + 24 * v79);
              v13 = (unint64_t *)(v10 + 1);
              v12 = v10[1];
              v15 = (unint64_t *)(v10 + 2);
              v14 = v10[2];
              v81 = v10;
              v78 = v11;
              if (v12 >= v14)
              {
                v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v10) >> 3);
                v18 = v17 + 1;
                if (v17 + 1 > 0x666666666666666)
                  std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - *v10) >> 3);
                if (2 * v19 > v18)
                  v18 = 2 * v19;
                if (v19 >= 0x333333333333333)
                  v20 = 0x666666666666666;
                else
                  v20 = v18;
                v94 = v10 + 2;
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(v10 + 2), v20);
                v22 = &v21[40 * v17];
                v90 = v21;
                v91 = v22;
                v93 = &v21[40 * v23];
                *(_QWORD *)v22 = 0;
                *((_DWORD *)v22 + 2) = 0;
                *((_QWORD *)v22 + 2) = 0;
                *((_QWORD *)v22 + 3) = v78;
                *((_QWORD *)v22 + 4) = v9;
                v92 = v22 + 40;
                std::vector<BreakPoint>::__swap_out_circular_buffer(v10, &v90);
                v16 = *v13;
                std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)&v90);
              }
              else
              {
                *(_QWORD *)v12 = 0;
                *(_DWORD *)(v12 + 8) = 0;
                *(_QWORD *)(v12 + 16) = 0;
                *(_QWORD *)(v12 + 24) = v11;
                v16 = v12 + 40;
                *(_QWORD *)(v12 + 32) = v9;
              }
              *v13 = v16;
              objc_msgSend(v5, "subFeatures");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "lastObject");
              v25 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v5, "subFeatures");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = objc_msgSend(v26, "count");
              objc_msgSend(v25, "bounds");
              v29 = v28;
              objc_msgSend(v25, "bounds");
              v31 = v29 + v30;
              v32 = v25;
              v33 = *v13;
              v77 = v32;
              if (*v13 >= *v15)
              {
                v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - *v10) >> 3);
                v36 = v35 + 1;
                if (v35 + 1 > 0x666666666666666)
                  std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                if (0x999999999999999ALL * ((uint64_t)(*v15 - *v10) >> 3) > v36)
                  v36 = 0x999999999999999ALL * ((uint64_t)(*v15 - *v10) >> 3);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v15 - *v10) >> 3) >= 0x333333333333333)
                  v37 = 0x666666666666666;
                else
                  v37 = v36;
                v94 = v10 + 2;
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(v10 + 2), v37);
                v39 = &v38[40 * v35];
                v90 = v38;
                v91 = v39;
                v93 = &v38[40 * v40];
                *((_DWORD *)v39 + 1) = 0;
                *((_DWORD *)v39 + 2) = 0;
                *(_DWORD *)v39 = v27;
                *((_QWORD *)v39 + 2) = v77;
                *((_QWORD *)v39 + 3) = 0;
                *((double *)v39 + 4) = v31;
                v92 = v39 + 40;
                std::vector<BreakPoint>::__swap_out_circular_buffer(v10, &v90);
                v34 = *v13;
                std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)&v90);
              }
              else
              {
                *(_DWORD *)(v33 + 4) = 0;
                *(_DWORD *)(v33 + 8) = 0;
                *(_DWORD *)v33 = v27;
                *(_QWORD *)(v33 + 16) = v32;
                *(_QWORD *)(v33 + 24) = 0;
                v34 = v33 + 40;
                *(double *)(v33 + 32) = v31;
              }
              *v13 = v34;

              objc_msgSend(v5, "subFeatures");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              v42 = objc_msgSend(v41, "count") == 0;

              if (!v42)
              {
                for (i = 1; ; ++i)
                {
                  objc_msgSend(v5, "subFeatures");
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  v45 = objc_msgSend(v44, "count") - 1 > (unint64_t)(i - 1);

                  if (!v45)
                    break;
                  objc_msgSend(v5, "subFeatures");
                  v46 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v46, "objectAtIndexedSubscript:", i - 1);
                  v47 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend(v5, "subFeatures");
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v48, "objectAtIndexedSubscript:", i);
                  v49 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend(v47, "bounds");
                  v51 = v50;
                  objc_msgSend(v47, "bounds");
                  v53 = v52;
                  objc_msgSend(v49, "bounds");
                  v55 = (v51 + v53 + v54) * 0.5;
                  v56 = v47;
                  v57 = v49;
                  v58 = v57;
                  v59 = *v13;
                  if (*v13 >= *v15)
                  {
                    v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - *v81) >> 3);
                    v62 = v61 + 1;
                    if (v61 + 1 > 0x666666666666666)
                      std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                    if (0x999999999999999ALL * ((uint64_t)(*v15 - *v81) >> 3) > v62)
                      v62 = 0x999999999999999ALL * ((uint64_t)(*v15 - *v81) >> 3);
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v15 - *v81) >> 3) >= 0x333333333333333)
                      v63 = 0x666666666666666;
                    else
                      v63 = v62;
                    v94 = (uint64_t *)(v13 + 1);
                    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)(v13 + 1), v63);
                    v65 = &v64[40 * v61];
                    v90 = v64;
                    v91 = v65;
                    v93 = &v64[40 * v66];
                    *((_DWORD *)v65 + 1) = 0;
                    *((_DWORD *)v65 + 2) = 0;
                    *(_DWORD *)v65 = i;
                    *((_QWORD *)v65 + 2) = v56;
                    *((_QWORD *)v65 + 3) = v58;
                    *((double *)v65 + 4) = v55;
                    v92 = v65 + 40;
                    std::vector<BreakPoint>::__swap_out_circular_buffer(v81, &v90);
                    v60 = *v13;
                    std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)&v90);
                  }
                  else
                  {
                    *(_DWORD *)(v59 + 4) = 0;
                    *(_DWORD *)(v59 + 8) = 0;
                    *(_DWORD *)v59 = i;
                    *(_QWORD *)(v59 + 16) = v56;
                    *(_QWORD *)(v59 + 24) = v57;
                    v60 = v59 + 40;
                    *(double *)(v59 + 32) = v55;
                  }
                  *v13 = v60;

                }
              }

              ++v79;
              ++v80;
            }
            while (v80 != v75);
            v4 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v82, v95, 16);
          }
          while (v4);
        }

        ++v74;
        v2 = v70 + 1;
      }
      while (v70 + 1 != v68);
      v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v96, 16);
    }
    while (v1);
  }

}

void sub_1D5000F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void Segmenter::addSegmentationLayerOfTypeFixed(id *this, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  void *v15;
  BOOL v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  float v27;
  float v28;
  int v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  int64x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id obj;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  void *v62;
  int64x2_t v63;
  uint64_t *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[5];
  _BYTE v74[128];
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 114))
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    obj = this[3];
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
    if (v3)
    {
      v56 = 0;
      v50 = *(_QWORD *)v70;
      v60 = a2 ^ 1;
      do
      {
        v52 = 0;
        v49 = v3;
        do
        {
          if (*(_QWORD *)v70 != v50)
            objc_enumerationMutation(obj);
          v4 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * v52);
          v65 = 0u;
          v66 = 0u;
          v67 = 0u;
          v68 = 0u;
          v53 = v4;
          v5 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v65, v74, 16);
          if (v5)
          {
            v6 = 0;
            v55 = *(_QWORD *)v66;
            do
            {
              v7 = 0;
              v54 = v5;
              do
              {
                if (*(_QWORD *)v66 != v55)
                  objc_enumerationMutation(v53);
                v57 = v7;
                v58 = v6;
                v62 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * v7);
                v8 = *((_QWORD *)*this + 3 * v56) + 24 * v6;
                v9 = (uint64_t *)(v8 + 8);
                v64 = (uint64_t *)v8;
                v10 = (_QWORD *)(v8 + 16);
                v11 = 1;
                v12 = 2;
                do
                {
                  v59 = v12;
                  v13 = 0;
                  v14 = v11 + 1;
                  while (1)
                  {
                    objc_msgSend(v62, "subFeatures");
                    v15 = (void *)objc_claimAutoreleasedReturnValue();
                    v16 = objc_msgSend(v15, "count") > v13;

                    if (!v16)
                      break;
                    v17 = this[7];
                    objc_msgSend(v62, "subFeatures");
                    v18 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v18, "objectAtIndexedSubscript:", v13);
                    v19 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v19, "stringValueCandidates");
                    v20 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v20, "objectAtIndexedSubscript:", 0);
                    v21 = (void *)objc_claimAutoreleasedReturnValue();
                    v22 = objc_msgSend(v17, "isEqualToString:", v21);

                    objc_msgSend(v62, "subFeatures");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v23, "objectAtIndexedSubscript:", v13);
                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v24, "candidateProbs");
                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v25, "objectAtIndexedSubscript:", 0);
                    v26 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v26, "floatValue");
                    v28 = v27;

                    if (v28 < 0.9)
                      v29 = 1;
                    else
                      v29 = v22;
                    if ((v29 | v60) == 1)
                    {
                      objc_msgSend(v62, "subFeatures", v28);
                      v30 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v30, "objectAtIndexedSubscript:", v13);
                      v31 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v31, "bounds");
                      v33 = v32;
                      v34 = objc_msgSend(this[6], "width");
                      objc_msgSend(v31, "bounds");
                      v35 = v33 / (double)v14;
                      if (v35 * (double)v34 >= v36 * 0.3 * (double)(unint64_t)objc_msgSend(this[6], "height"))
                      {
                        v37 = 0;
                        v63 = vdupq_n_s64((unint64_t)v31);
                        do
                        {
                          objc_msgSend(v31, "bounds");
                          v39 = v38 + (double)(v37 + 1) * v35;
                          v40 = v31;
                          v41 = *v9;
                          if ((unint64_t)*v9 >= *v10)
                          {
                            v43 = 0xCCCCCCCCCCCCCCCDLL * ((v41 - *v64) >> 3);
                            v44 = v43 + 1;
                            if (v43 + 1 > 0x666666666666666)
                              std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]();
                            if (0x999999999999999ALL * ((*v10 - *v64) >> 3) > v44)
                              v44 = 0x999999999999999ALL * ((*v10 - *v64) >> 3);
                            if (0xCCCCCCCCCCCCCCCDLL * ((*v10 - *v64) >> 3) >= 0x333333333333333)
                              v45 = 0x666666666666666;
                            else
                              v45 = v44;
                            v73[4] = v10;
                            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>((uint64_t)v10, v45);
                            v47 = (int64x2_t *)&v46[40 * v43];
                            v73[0] = v46;
                            v73[1] = v47;
                            v73[3] = &v46[40 * v48];
                            v47->i32[0] = v13;
                            v47->i32[1] = 1;
                            v47->i32[2] = v14;
                            v47[1] = v63;
                            *(double *)v47[2].i64 = v39;
                            v73[2] = (char *)v47 + 40;
                            std::vector<BreakPoint>::__swap_out_circular_buffer(v64, v73);
                            v42 = *v9;
                            std::__split_buffer<BreakPoint>::~__split_buffer((uint64_t)v73);
                          }
                          else
                          {
                            *(_DWORD *)v41 = v13;
                            *(_DWORD *)(v41 + 4) = 1;
                            *(_DWORD *)(v41 + 8) = v14;
                            *(_QWORD *)(v41 + 16) = v40;
                            *(_QWORD *)(v41 + 24) = v40;
                            v42 = v41 + 40;
                            *(double *)(v41 + 32) = v39;
                          }
                          *v9 = v42;
                          ++v37;
                        }
                        while (v11 != v37);
                      }

                    }
                    ++v13;
                  }
                  v12 = v59 + 1;
                  ++v11;
                }
                while (v59 != 4);
                v6 = v58 + 1;
                v7 = v57 + 1;
              }
              while (v57 + 1 != v54);
              v5 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v65, v74, 16);
            }
            while (v5);
          }

          ++v56;
          ++v52;
        }
        while (v52 != v49);
        v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
      }
      while (v3);
    }

  }
}

void sub_1D50015A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void Segmenter::initSubRegionsWithInitialFeatures(Segmenter *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  void *v20;
  void *v21;
  id obj;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 4);
  v3 = (void *)objc_opt_new();
  objc_msgSend(v2, "addObject:", v3);

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = *((id *)this + 5);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v4)
  {
    v23 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v29 != v23)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        objc_msgSend(v6, "subFeatures");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v25;
          do
          {
            for (j = 0; j != v8; ++j)
            {
              if (*(_QWORD *)v25 != v9)
                objc_enumerationMutation(v7);
              v11 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * j);
              objc_msgSend(v11, "bounds");
              v13 = v12;
              v15 = v14;
              v17 = v16;
              v19 = v18;
              objc_msgSend(v11, "stringValueCandidates");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "candidateProbs");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              Segmenter::addRegionToLayer((uint64_t)this, 0, v20, v21, v6, v13, v15, v17, v19);

            }
            v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
          }
          while (v8);
        }

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    }
    while (v4);
  }

}

void sub_1D50018BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void Segmenter::calculateSubRegions(id *this)
{
  uint64_t v2;
  id v3;
  void *v4;
  unint64_t i;
  double v6;
  double v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int *v16;
  uint64_t v17;
  double v18;
  int *v19;
  double v20;
  CGFloat v21;
  double v22;
  double v23;
  int *v24;

  v2 = objc_msgSend(this[4], "count");
  v3 = this[4];
  v4 = (void *)objc_opt_new();
  objc_msgSend(v3, "addObject:", v4);

  if (this[1] != *this)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)this[1] - (_BYTE *)*this) >> 3); ++i)
    {
      if (*((_BYTE *)this + 114))
      {
        v6 = *((double *)this[8] + i);
        v7 = v6 + v6;
      }
      else
      {
        v7 = -1.0;
      }
      objc_msgSend(this[5], "objectAtIndex:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *this;
      v10 = *((_QWORD *)*this + 3 * i);
      if (*((_QWORD *)*this + 3 * i + 1) == v10)
        goto LABEL_29;
      v11 = 0;
      do
      {
        v12 = (uint64_t *)(v10 + 24 * v11);
        v13 = *v12;
        v15 = v12 + 1;
        v14 = v12[1];
        if (*v12 == v14)
          goto LABEL_28;
        v16 = (int *)v12[1];
        do
        {
          v17 = v13;
          v13 += 40;
          if ((int *)v13 == v16)
          {
            v24 = v16;
            goto LABEL_26;
          }
          v18 = 1.79769313e308;
          v19 = (int *)v13;
          while (*(_DWORD *)(v17 + 4) == 1 && v19[1] == 1 && v19[2] != *(_DWORD *)(v17 + 8))
          {
LABEL_22:
            v19 += 10;
            v24 = (int *)v14;
            if (v19 == v16)
              goto LABEL_26;
          }
          v20 = Segmenter::imageRegionBetweenBreakpoints((double *)v17, v19, v12);
          if (v22 <= 0.0 || v23 <= 0.0)
            goto LABEL_19;
          if (v22 <= v18)
          {
            Segmenter::addRegionToLayer((uint64_t)this, v2, 0, 0, v8, v20, v21, v22, v23);
LABEL_19:
            if (!v19[2])
              v18 = v7;
            v14 = *v15;
            v16 = (int *)*v15;
            goto LABEL_22;
          }
          v14 = *v15;
          v24 = (int *)*v15;
LABEL_26:
          v16 = v24;
        }
        while ((int *)v13 != v24);
        v9 = *this;
LABEL_28:
        ++v11;
        v10 = v9[3 * i];
      }
      while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v9[3 * i + 1] - v10) >> 3));
LABEL_29:

    }
  }
}

void sub_1D5001B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double Segmenter::maxWidthForFeatureIndex(Segmenter *this, uint64_t a2)
{
  if (*((_BYTE *)this + 114))
    return *(double *)(*((_QWORD *)this + 8) + 8 * a2) + *(double *)(*((_QWORD *)this + 8) + 8 * a2);
  else
    return -1.0;
}

double Segmenter::imageRegionBetweenBreakpoints(double *a1, int *a2, uint64_t *a3)
{
  void *v6;
  double v7;
  double v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;

  v6 = (void *)*((_QWORD *)a1 + 3);
  if (v6 == *((void **)a1 + 2))
  {
    v8 = a1[4];
  }
  else
  {
    objc_msgSend(v6, "bounds");
    v8 = v7;
  }
  v9 = *(int *)a1;
  v10 = *a2;
  if (v9 <= *a2)
  {
    v11 = 40 * v9;
    v12 = 2.22507386e-308;
    v13 = 1.79769313e308;
    do
    {
      v14 = *a3;
      if (v9 > *(int *)a1)
      {
        v15 = v14 + v11;
        v16 = *(void **)(v14 + v11 + 16);
        if (v16)
        {
          objc_msgSend(v16, "bounds");
          v18 = v17;
          objc_msgSend(*(id *)(v15 + 16), "bounds");
          v20 = v19;
          objc_msgSend(*(id *)(v15 + 16), "bounds");
          v13 = fmin(v13, v18);
          v12 = fmax(v12, v20 + v21);
          v10 = *a2;
        }
      }
      v22 = v10;
      if (v9 < v10)
      {
        v23 = v14 + v11;
        v24 = *(void **)(v23 + 24);
        if (v24)
        {
          objc_msgSend(v24, "bounds");
          v26 = v25;
          objc_msgSend(*(id *)(v23 + 24), "bounds");
          v28 = v27;
          objc_msgSend(*(id *)(v23 + 24), "bounds");
          v13 = fmin(v13, v26);
          v12 = fmax(v12, v28 + v29);
          v10 = *a2;
          v22 = *a2;
        }
      }
      ++v9;
      v11 += 40;
    }
    while (v9 <= v22);
  }
  v30 = (void *)*((_QWORD *)a2 + 2);
  if (*((void **)a2 + 3) != v30)
  {
    objc_msgSend(v30, "bounds");
    objc_msgSend(*((id *)a2 + 2), "bounds");
  }
  return v8;
}

void Segmenter::addRegionToLayer(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  CRTextFeature *v24;
  void *v25;
  CRTextFeature *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[2];
  NSRect v41;

  v40[1] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v41.origin.x = a6;
  v41.origin.y = a7;
  v41.size.width = a8;
  v41.size.height = a9;
  NSStringFromRect(v41);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    v21 = 0;
    while (1)
    {
      objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "objectForKey:", v20);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v23)
        break;
      if (a2 == ++v21)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v24 = [CRTextFeature alloc];
    v40[0] = v20;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = -[CRTextFeature initWithFeatureRect:subFeatureRects:](v24, "initWithFeatureRect:subFeatureRects:", v20, v25);

    if (v19)
    {
      objc_msgSend(v19, "baselineOrigin");
      v28 = v27;
      v30 = v29;
      objc_msgSend(v19, "toplineOrigin");
      v32 = v31;
      v34 = v33;
      objc_msgSend(v19, "baselineAngle");
      LODWORD(v36) = v35;
      -[CRTextFeature setBaselineOrigin:toplineOrigin:slope:](v26, "setBaselineOrigin:toplineOrigin:slope:", v28, v30, v32, v34, v36);
      -[CRTextFeature updateSizeHints](v26, "updateSizeHints");
    }
    -[CRTextFeature subFeatures](v26, "subFeatures");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "objectAtIndex:", 0);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v38, "setStringValueCandidates:", v17);
    objc_msgSend(v38, "setCandidateProbs:", v18);
    objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a2);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "setObject:forKey:", v26, v20);

  }
}

void sub_1D5001F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

id Segmenter::textFeaturesForLayer(id *this, uint64_t a2)
{
  void *v2;
  void *v3;

  objc_msgSend(this[4], "objectAtIndexedSubscript:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "allValues");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1D5001FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double Segmenter::medianCharSpacingForFeatureIndex(Segmenter *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (a2 >= (*((_QWORD *)this + 12) - v2) >> 3)
    std::vector<double>::__throw_out_of_range[abi:ne180100]();
  return *(double *)(v2 + 8 * a2);
}

uint64_t Segmenter::optimizeWordSegmentation(Segmenter *this)
{
  return *((unsigned __int8 *)this + 113);
}

BOOL Segmenter::isNarrowChar(Segmenter *this, CRTextFeature *a2, CRImage *a3)
{
  CRTextFeature *v5;
  CRImage *v6;
  int v7;
  double v8;
  double v9;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  double v14;
  _BOOL8 v15;

  v5 = a2;
  v6 = a3;
  v7 = *((_DWORD *)this + 30);
  -[CRTextFeature bounds](v5, "bounds");
  v9 = v8;
  v10 = -[CRImage width](v6, "width");
  -[CRTextFeature bounds](v5, "bounds");
  v12 = v11;
  v13 = -[CRImage height](v6, "height");
  v14 = 0.4;
  if (v7 != 1)
    v14 = 0.5;
  v15 = v9 * (double)v10 / (v12 * (double)v13) <= v14;

  return v15;
}

void sub_1D50020B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double Segmenter::medianInterSubfeatureSpacingForFeature(Segmenter *this, CRTextFeature *a2, _NSRange a3)
{
  NSUInteger length;
  CRTextFeature *v4;
  uint64_t v5;
  NSUInteger v6;
  void *v7;
  unint64_t v8;
  NSUInteger v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  NSUInteger location;
  double *v28;
  double *v29;

  length = a3.length;
  location = a3.location;
  v4 = a2;
  if (length)
  {
    std::vector<double>::vector(&v28, length);
    v5 = 0;
    v6 = location + length;
    while (1)
    {
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "count");
      v9 = location + v5;
      v10 = location + v5 + 1;
      v11 = v8 >= v6 ? v6 : v8;

      if (v10 >= v11)
        break;
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectAtIndexedSubscript:", v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "bounds");
      v15 = v14;
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectAtIndexedSubscript:", v9);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "bounds");
      v19 = v18;
      -[CRTextFeature subFeatures](v4, "subFeatures");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectAtIndexedSubscript:", v9);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "bounds");
      v28[v5] = v15 - (v19 + v22);

      ++v5;
    }
    std::__sort<std::__less<double,double> &,double *>();
    v23 = (char *)v29 - (char *)v28;
    if (v29 != v28)
    {
      v24 = (unint64_t)(v23 >> 3) >> 1;
      v25 = v28[v24];
      if ((v23 & 8) == 0)
        v25 = (v25 + v28[v24 - 1]) * 0.5;
      goto LABEL_13;
    }
    v25 = 0.0;
    if (v29)
    {
LABEL_13:
      v29 = v28;
      operator delete(v28);
    }
  }
  else
  {
    v25 = 0.0;
  }

  return v25;
}

void sub_1D500227C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

double Segmenter::medianSubfeatureHeightForFeature(Segmenter *this, CRTextFeature *a2, _NSRange a3)
{
  NSUInteger length;
  NSUInteger location;
  CRTextFeature *v5;
  uint64_t v6;
  NSUInteger v7;
  void *v8;
  unint64_t v9;
  NSUInteger v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  _QWORD *v18;
  _BYTE *v19;

  length = a3.length;
  location = a3.location;
  v5 = a2;
  std::vector<double>::vector(&v18, length);
  v6 = 0;
  v7 = location + length;
  while (1)
  {
    -[CRTextFeature subFeatures](v5, "subFeatures");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count");
    v10 = v9 >= v7 ? v7 : v9;

    if (location + v6 >= v10)
      break;
    -[CRTextFeature subFeatures](v5, "subFeatures");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectAtIndexedSubscript:", location + v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "bounds");
    v18[v6] = v13;

    ++v6;
  }
  std::__sort<std::__less<double,double> &,double *>();
  v14 = v19 - (_BYTE *)v18;
  if (v19 != (_BYTE *)v18)
  {
    v15 = (unint64_t)(v14 >> 3) >> 1;
    v16 = *(double *)&v18[v15];
    if ((v14 & 8) == 0)
      v16 = (v16 + *(double *)&v18[v15 - 1]) * 0.5;
    goto LABEL_11;
  }
  v16 = 0.0;
  if (v19)
  {
LABEL_11:
    v19 = v18;
    operator delete(v18);
  }

  return v16;
}

void sub_1D5002428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id Segmenter::textFeatureForRegion(id *this, CGRect a2)
{
  void *v3;
  unint64_t v4;
  void *v5;
  void *v6;

  NSStringFromRect(a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 0;
  while (v4 < objc_msgSend(this[4], "count"))
  {
    objc_msgSend(this[4], "objectAtIndexedSubscript:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    ++v4;
    if (v6)
      goto LABEL_6;
  }
  v6 = 0;
LABEL_6:

  return v6;
}

void sub_1D5002500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<BreakPoint>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<BreakPoint>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<BreakPoint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<BreakPoint>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<BreakPoint>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {

  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::vector<std::vector<BreakPoint>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  double v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _BOOL4 v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  int *v63;
  int v64;
  _BOOL4 v65;
  _BOOL4 v66;
  unint64_t v67;
  int v68;
  BOOL v69;
  int v70;
  _BOOL4 v71;
  int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  unint64_t v81;
  int v82;
  _BOOL4 v83;
  uint64_t v84;
  BOOL v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  double v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  void *v105;
  void *v106;
  int64_t v107;
  int64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  _BOOL4 v114;
  uint64_t v115;
  int v116;
  double v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  int v127;
  int v128;
  _BOOL4 v129;
  _BOOL4 v130;
  void *v131;
  void *v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _BOOL4 v144;
  _BOOL4 v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  _BOOL4 v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  void *v171;
  BOOL v172;
  void *v173;
  void *v174;
  void *v175;
  double *v177;
  uint64_t v178;
  int v179;
  double v180;
  _BOOL4 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double *v185;
  double *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  void *v194;
  void *v195;
  double *v196;
  double *v197;
  uint64_t v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;

  v14 = *a1;
  v15 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = a1[3];
  a1[2] = 0;
  a1[3] = 0;
  v6 = a1[4];
  v7 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *a1 = v7;
  v8 = a2[2];
  a2[2] = 0;
  v9 = (void *)a1[2];
  a1[2] = v8;

  v10 = a2[3];
  a2[3] = 0;
  v11 = (void *)a1[3];
  a1[3] = v10;

  a1[4] = a2[4];
  *a2 = v14;
  *((_DWORD *)a2 + 2) = v15;
  v12 = (void *)a2[2];
  a2[2] = v4;

  v13 = (void *)a2[3];
  a2[3] = v5;

  a2[4] = v6;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(double *a1, double *a2, uint64_t a3)
{
  double *v5;
  int v6;
  double v7;
  BOOL v8;
  BOOL v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t *v12;
  _BOOL4 v13;

  v5 = a1;
  v6 = *(_DWORD *)a2;
  v7 = a2[4];
  v8 = *(_DWORD *)a2 < *(_DWORD *)a1;
  if (*(_DWORD *)a2 == *(_DWORD *)a1)
    v8 = v7 < a1[4];
  v9 = *(_DWORD *)a3 == v6;
  v10 = *(_DWORD *)a3 < v6;
  if (v9)
    v10 = *(double *)(a3 + 32) < v7;
  if (v8)
  {
    if (v10)
    {
LABEL_11:
      v12 = (uint64_t *)a3;
LABEL_17:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, v12);
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)a2);
    v11 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2)
      v11 = *(double *)(a3 + 32) < a2[4];
    if (v11)
    {
      a1 = a2;
      goto LABEL_11;
    }
  }
  else if (v10)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a2, (uint64_t *)a3);
    v13 = *(_DWORD *)a2 < *(_DWORD *)v5;
    if (*(_DWORD *)a2 == *(_DWORD *)v5)
      v13 = a2[4] < v5[4];
    if (v13)
    {
      a1 = v5;
      v12 = (uint64_t *)a2;
      goto LABEL_17;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 40);
      v7 = v6 == *(_DWORD *)a1;
      v8 = v6 < *(_DWORD *)a1;
      if (v7)
        v8 = *(double *)(a2 - 8) < *(double *)(a1 + 32);
      if (v8)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)(a2 - 40));
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v9 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>((double *)a1, (double *)(a1 + 40), a1 + 80);
      v10 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    v14 = *(double *)(v10 + 32);
    v15 = *(_DWORD *)v10 < *(_DWORD *)v9;
    if (*(_DWORD *)v10 == *(_DWORD *)v9)
      v15 = v14 < *(double *)(v9 + 32);
    if (v15)
    {
      v16 = *(_QWORD *)(v10 + 4);
      v17 = *(_QWORD *)(v10 + 24);
      v29 = *(_QWORD *)(v10 + 16);
      v18 = v11;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      while (1)
      {
        v19 = a1 + v18;
        *(_QWORD *)(v19 + 120) = *(_QWORD *)(a1 + v18 + 80);
        *(_DWORD *)(v19 + 128) = *(_DWORD *)(a1 + v18 + 88);
        v20 = *(_QWORD *)(a1 + v18 + 96);
        *(_QWORD *)(v19 + 96) = 0;
        v21 = *(void **)(a1 + v18 + 136);
        *(_QWORD *)(v19 + 136) = v20;

        v22 = *(_QWORD *)(a1 + v18 + 104);
        *(_QWORD *)(v19 + 104) = 0;
        v23 = *(void **)(a1 + v18 + 144);
        *(_QWORD *)(v19 + 144) = v22;

        *(_QWORD *)(v19 + 152) = *(_QWORD *)(v19 + 112);
        if (v18 == -80)
          break;
        v24 = *(_DWORD *)(v19 + 40);
        v7 = v13 == v24;
        v25 = v13 < v24;
        if (v7)
          v25 = v14 < *(double *)(v19 + 72);
        v18 -= 40;
        if (!v25)
        {
          v26 = a1 + v18 + 120;
          goto LABEL_18;
        }
      }
      v26 = a1;
LABEL_18:
      *(_DWORD *)v26 = v13;
      *(_QWORD *)(v26 + 4) = v16;
      v27 = *(void **)(v26 + 16);
      *(_QWORD *)(v26 + 16) = v29;

      v28 = *(void **)(v26 + 24);
      *(_QWORD *)(v26 + 24) = v17;

      *(double *)(v26 + 32) = v14;
      if (++v12 == 8)
        return v10 + 40 == a2;
    }
    v9 = v10;
    v11 += 40;
    v10 += 40;
    if (v10 == a2)
      return 1;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(a1, a2, a3);
  v8 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3)
    v8 = *(double *)(a4 + 32) < *(double *)(a3 + 32);
  if (v8)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a3, (uint64_t *)a4);
    v9 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2)
      v9 = *(double *)(a3 + 32) < a2[4];
    if (v9)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a2, (uint64_t *)a3);
      v10 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1)
        v10 = a2[4] < a1[4];
      if (v10)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,BreakPoint *>(a1, a2, a3, a4);
  v10 = *(_DWORD *)a5 < *(_DWORD *)a4;
  if (*(_DWORD *)a5 == *(_DWORD *)a4)
    v10 = *(double *)(a5 + 32) < *(double *)(a4 + 32);
  if (v10)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a4, (uint64_t *)a5);
    v11 = *(_DWORD *)a4 < *(_DWORD *)a3;
    if (*(_DWORD *)a4 == *(_DWORD *)a3)
      v11 = *(double *)(a4 + 32) < *(double *)(a3 + 32);
    if (v11)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a3, (uint64_t *)a4);
      v12 = *(_DWORD *)a3 < *(_DWORD *)a2;
      if (*(_DWORD *)a3 == *(_DWORD *)a2)
        v12 = *(double *)(a3 + 32) < a2[4];
      if (v12)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a2, (uint64_t *)a3);
        v13 = *(_DWORD *)a2 < *(_DWORD *)a1;
        if (*(_DWORD *)a2 == *(_DWORD *)a1)
          v13 = a2[4] < a1[4];
        if (v13)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<BreakPoint *&,BreakPoint *&>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

uint64_t *std::vector<BreakPoint>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_QWORD *)(v2 + v5 - 40);
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 40) = v8;
      v9 = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v6 - 24) = v9;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<BreakPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<BreakPoint>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<double>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void sub_1D5003D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5003E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D5003EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D5003F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5004CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1D50061F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(exception_object);
}

double CRDetectorUtils::makeCenterPoint(CRDetectorUtils *this, CGPoint *a2)
{
  uint64_t v2;
  float32x2_t v3;
  double result;

  v2 = 0;
  v3 = 0;
  do
  {
    v3 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)((char *)this + v2), vcvtq_f64_f32(v3)));
    v2 += 16;
  }
  while (v2 != 64);
  __asm { FMOV            V1.2D, #0.25 }
  *(_QWORD *)&result = *(_OWORD *)&vmulq_f64(vcvtq_f64_f32(v3), _Q1);
  return result;
}

float CRDetectorUtils::rectIntersectionOverUnion(CGRect *this, const CGRect *a2, const CGRect *a3)
{
  CGRect v6;

  v6 = CGRectIntersection(*this, *a2);
  *(float *)&v6.origin.x = v6.size.width * v6.size.height;
  *(float *)&v6.origin.y = a2->size.width * a2->size.height
                         + this->size.width * this->size.height
                         - *(float *)&v6.origin.x;
  return *(float *)&v6.origin.x / *(float *)&v6.origin.y;
}

uint64_t CRDetectorUtils::convertPointToRect(uint64_t this, const CGPoint *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = 0;
  v3 = 1.79769313e308;
  v4 = 2.22507386e-308;
  v5 = 2.22507386e-308;
  v6 = 1.79769313e308;
  do
  {
    v7 = *(double *)(this + v2);
    v8 = *(double *)(this + v2 + 8);
    if (v7 >= v5)
      v5 = *(double *)(this + v2);
    if (v7 <= v6)
      v6 = *(double *)(this + v2);
    if (v8 >= v4)
      v4 = *(double *)(this + v2 + 8);
    if (v8 <= v3)
      v3 = *(double *)(this + v2 + 8);
    v2 += 16;
  }
  while (v2 != 64);
  return this;
}

void CRDetectorUtils::rotatePolygon(CRDetectorUtils *this, const CGPoint *a2, const CGPoint *a3, double a4, CGPoint *a5)
{
  float v8;
  __float2 v9;
  uint64_t v10;
  double cosval;
  double sinval;
  double y;
  double v14;
  double v15;
  CGPoint *v16;

  v8 = a4;
  v9 = __sincosf_stret(v8);
  v10 = 0;
  cosval = v9.__cosval;
  sinval = v9.__sinval;
  do
  {
    y = a2->y;
    v14 = *(double *)((char *)this + v10 * 16) - a2->x;
    v15 = *(double *)((char *)this + v10 * 16 + 8) - y;
    v16 = (CGPoint *)&a3[v10];
    v16->x = a2->x + v14 * cosval - v15 * sinval;
    v16->y = y + v15 * cosval + v14 * sinval;
    ++v10;
  }
  while (v10 != 4);
}

void CRDetectorUtils::rotateContour(uint64_t *a1, double *a2, _QWORD *a3, double a4)
{
  float v7;
  __float2 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  double v13;
  float v14;
  float v15;

  v7 = a4;
  v8 = __sincosf_stret(v7);
  v9 = *a1;
  if (a1[1] != *a1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (int *)(v9 + v10);
      v13 = a2[1];
      v14 = (float)(int)((double)*v12 - *a2);
      v15 = (float)(int)((double)v12[1] - v13);
      *(_QWORD *)(*a3 + 8 * v11++) = (int)(*a2
                                                       + (float)((float)((float)-v8.__sinval * v15)
                                                               + (float)(v14 * v8.__cosval))) | ((unint64_t)(int)(v13 + (float)((float)(v8.__cosval * v15) + (float)(v14 * v8.__sinval))) << 32);
      v9 = *a1;
      v10 += 8;
    }
    while (v11 < (a1[1] - *a1) >> 3);
  }
}

CGFloat CRDetectorUtils::rotatePointBasedOnCenter(CRDetectorUtils *this, const CGPoint *a2, const CGPoint *a3, double a4)
{
  float v6;
  __float2 v7;

  v6 = a4;
  v7 = __sincosf_stret(v6);
  return a2->x + (*(double *)this - a2->x) * v7.__cosval - (*((double *)this + 1) - a2->y) * v7.__sinval;
}

double CRDetectorUtils::smoothAngleForPointPairBetweenNeighbors(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  long double v18;
  long double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  double v29;
  __float2 v30;
  double result;
  long double __x;

  v18 = a2 - a4;
  v19 = a3 - a5;
  v20 = *a1;
  v21 = a1[1];
  v23 = a1[2];
  v22 = a1[3];
  __x = a6 - a8;
  v24 = a7 - a9;
  v25 = atan2(v21 - v22, *a1 - v23);
  v26 = atan2(v19, v18);
  v27 = ((atan2(v24, __x) - v26) * 0.5 - (v25 - v26)) * a10;
  v28 = (v20 + v23) * 0.5;
  v29 = (v21 + v22) * 0.5;
  *(float *)&v27 = v27;
  v30 = __sincosf_stret(*(float *)&v27);
  *a1 = v28 + (v20 - v28) * v30.__cosval - (v21 - v29) * v30.__sinval;
  a1[1] = v29 + (v21 - v29) * v30.__cosval + (v20 - v28) * v30.__sinval;
  result = v29 + (v22 - v29) * v30.__cosval + (v23 - v28) * v30.__sinval;
  a1[2] = v28 + (v23 - v28) * v30.__cosval - (v22 - v29) * v30.__sinval;
  a1[3] = result;
  return result;
}

uint64_t CRDetectorUtils::connectComponentLabel(CRDetectorUtils *this, float *a2, unint64_t a3, float64x2_t **a4, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a5)
{
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  float64x2_t *v32;
  unint64_t v33;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v42 = 0u;
  v43 = 0u;
  v41 = 0u;
  if (a3)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (a2)
      {
        v11 = 0;
        v12 = v9 * (_DWORD)a2;
        v36 = v9;
        v37 = v9;
        v35 = v9 * (_DWORD)a2;
        do
        {
          if (*((float *)this + (int)v11 + v12) >= 0.8
            && (!*(_QWORD *)&(*a4)->f64[v11 + (_QWORD)a4[13] * v9] || v10 == 0))
          {
            v14 = *((_QWORD *)&v41 + 1);
            v15 = (((_QWORD)v42 - *((_QWORD *)&v41 + 1)) << 6) - 1;
            if ((_QWORD)v42 == *((_QWORD *)&v41 + 1))
              v15 = 0;
            v16 = v43;
            if (v15 == (_QWORD)v43)
            {
              std::deque<std::pair<int,int>>::__add_back_capacity(&v41);
              v14 = *((_QWORD *)&v41 + 1);
              v16 = *((_QWORD *)&v43 + 1) + v43;
            }
            ++v10;
            *(_QWORD *)(*(_QWORD *)(v14 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF)) = v37 | (v11 << 32);
            ++*((_QWORD *)&v43 + 1);
            v40 = v10;
            CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)a4, v9, v11, v10);
            v17 = *((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1))
            {
              v38 = v11;
              v39 = v10;
              do
              {
                v18 = (int *)(*(_QWORD *)(*((_QWORD *)&v41 + 1) + (((unint64_t)v43 >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * (v43 & 0x1FF));
                v19 = *v18;
                v20 = v18[1];
                *(_QWORD *)&v43 = v43 + 1;
                *((_QWORD *)&v43 + 1) = v17 - 1;
                if ((unint64_t)v43 > 0x3FF)
                {
                  operator delete(**((void ***)&v41 + 1));
                  *((_QWORD *)&v41 + 1) += 8;
                  *(_QWORD *)&v43 = v43 - 512;
                }
                for (i = 0; i != 8; ++i)
                {
                  v22 = dword_1D513A954[i] + (uint64_t)v19;
                  if ((v22 & 0x80000000) == 0 && v22 < a3)
                  {
                    v23 = dword_1D513A974[i] + (uint64_t)v20;
                    if ((v23 & 0x80000000) == 0
                      && v23 < (unint64_t)a2
                      && *((float *)this + (int)v23 + (int)v22 * (int)a2) >= 0.8
                      && !*(_QWORD *)&(*a4)->f64[v23 + (_QWORD)a4[13] * v22])
                    {
                      v24 = *((_QWORD *)&v41 + 1);
                      if ((_QWORD)v42 == *((_QWORD *)&v41 + 1))
                        v25 = 0;
                      else
                        v25 = (((_QWORD)v42 - *((_QWORD *)&v41 + 1)) << 6) - 1;
                      v26 = *((_QWORD *)&v43 + 1);
                      v27 = *((_QWORD *)&v43 + 1) + v43;
                      if (v25 == *((_QWORD *)&v43 + 1) + (_QWORD)v43)
                      {
                        std::deque<std::pair<int,int>>::__add_back_capacity(&v41);
                        v26 = *((_QWORD *)&v43 + 1);
                        v24 = *((_QWORD *)&v41 + 1);
                        v27 = v43 + *((_QWORD *)&v43 + 1);
                      }
                      v28 = (_DWORD *)(*(_QWORD *)(v24 + ((v27 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v27 & 0x1FF));
                      *v28 = v22;
                      v28[1] = v23;
                      *((_QWORD *)&v43 + 1) = v26 + 1;
                      CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)a4, v22, v23, v40);
                    }
                  }
                }
                v17 = *((_QWORD *)&v43 + 1);
              }
              while (*((_QWORD *)&v43 + 1));
              v12 = v35;
              v9 = v36;
              v11 = v38;
              v10 = v39;
            }
          }
          ++v11;
        }
        while ((float *)v11 != a2);
      }
      ++v9;
    }
    while (v9 != a3);
  }
  if (*((_BYTE *)a4 + 137))
  {
    v29 = (unint64_t *)a4[1];
    v30 = (char *)a4[2] - (char *)v29;
    if (v30)
    {
      v31 = v30 >> 3;
      v32 = a4[7];
      if (v31 <= 1)
        v31 = 1;
      do
      {
        v33 = *v29++;
        *v32 = vdivq_f64(*v32, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0));
        ++v32;
        --v31;
      }
      while (v31);
    }
  }
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v41);
}

void sub_1D50087B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(CRDetectorUtils::CRTextDetectorConnectedComponentResult *this, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double **v17;
  unint64_t v18;
  char **v19;
  double *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  double *v39;
  double v40;
  double *v41;
  uint64_t v42;

  *(_QWORD *)(*(_QWORD *)this + 8 * (a3 + *((_QWORD *)this + 13) * a2)) = a4;
  v8 = a4 - *((int *)this + 30);
  v10 = (uint64_t *)((char *)this + 8);
  v9 = *((_QWORD *)this + 1);
  if (v8 >= (*((_QWORD *)this + 2) - v9) >> 3)
  {
    v42 = 0;
    std::vector<unsigned long>::resize((uint64_t)this + 8, v8 + 1, &v42);
    v9 = *v10;
    v11 = 1;
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 8 * v8) + 1;
  }
  *(_QWORD *)(v9 + 8 * v8) = v11;
  v12 = *((_QWORD *)this + 10);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 11) - v12) >> 3) <= v8)
  {
    std::vector<std::vector<CGPoint>>::resize((uint64_t *)this + 10, v8 + 1);
    v12 = *((_QWORD *)this + 10);
  }
  v13 = v12 + 24 * v8;
  v14 = (double)a3;
  v15 = (double)a2;
  v17 = (double **)(v13 + 8);
  v16 = *(double **)(v13 + 8);
  v19 = (char **)(v13 + 16);
  v18 = *(_QWORD *)(v13 + 16);
  if ((unint64_t)v16 >= v18)
  {
    v21 = *(double **)v13;
    v22 = ((uint64_t)v16 - *(_QWORD *)v13) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v24 = v18 - (_QWORD)v21;
    if (v24 >> 3 > v23)
      v23 = v24 >> 3;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)v19, v25);
      v16 = *v17;
      v21 = *(double **)v13;
    }
    else
    {
      v26 = 0;
    }
    v27 = (double *)&v26[16 * v22];
    v28 = &v26[16 * v25];
    *v27 = v14;
    v27[1] = v15;
    v20 = v27 + 2;
    if (v16 != v21)
    {
      do
      {
        *((_OWORD *)v27 - 1) = *((_OWORD *)v16 - 1);
        v27 -= 2;
        v16 -= 2;
      }
      while (v16 != v21);
      v21 = *(double **)v13;
    }
    *(_QWORD *)v13 = v27;
    *v17 = v20;
    *v19 = v28;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v16 = v14;
    v16[1] = v15;
    v20 = v16 + 2;
  }
  *v17 = v20;
  ++*((_QWORD *)this + 16);
  if (*((_BYTE *)this + 136))
  {
    v29 = *((_QWORD *)this + 4);
    if (v8 >= (*((_QWORD *)this + 5) - v29) >> 5)
    {
      std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::resize((uint64_t)this + 32, a4);
      v35 = (int64x2_t *)(*((_QWORD *)this + 4) + 32 * v8);
      *v35 = vdupq_n_s64(a2);
      v35[1] = vdupq_n_s64(a3);
    }
    else
    {
      v30 = (unint64_t *)(v29 + 32 * v8);
      v31 = v30[2];
      v32 = v30[3];
      if (v31 >= a3)
        v31 = a3;
      if (v32 <= a3)
        v32 = a3;
      v30[2] = v31;
      v30[3] = v32;
      v33 = *v30;
      v34 = v30[1];
      if (*v30 >= a2)
        v33 = a2;
      if (v34 <= a2)
        v34 = a2;
      *v30 = v33;
      v30[1] = v34;
    }
  }
  if (*((_BYTE *)this + 137))
  {
    v36 = *((_QWORD *)this + 7);
    v37 = *((_QWORD *)this + 8);
    v38 = (_QWORD *)((char *)this + 56);
    if (v8 >= (v37 - v36) >> 4)
    {
      std::vector<CGPoint>::resize((uint64_t)v38, a4);
      v41 = (double *)(*v38 + 16 * v8);
      *v41 = v14;
      v41[1] = v15;
    }
    else
    {
      v39 = (double *)(v36 + 16 * v8);
      v40 = v39[1] + v15;
      *v39 = *v39 + v14;
      v39[1] = v40;
    }
  }
}

void CRDetectorUtils::growConnectedComponents(uint64_t a1, uint64_t *a2, int **a3, CRDetectorUtils::CRTextDetectorConnectedComponentResult *a4, _QWORD *a5, float a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t **v21;
  void **v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int v40;
  int *v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  void **v46;
  unint64_t v47;
  unsigned int **v48;
  void **v49;
  unsigned int *v50;
  uint64_t v51;
  double v52;
  double v53;
  void **v54;
  void **v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int64_t v61;
  int64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  int64_t *v70;
  char *v71;
  char *v72;
  int64_t v73;
  int v74;
  int v75;
  int64_t v76;
  int64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  void *v97;
  void *v98;
  int *v99;
  int v101;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  void **v111;
  void **v112;
  int v113[2];
  char *v114;
  uint64_t v115;
  void ***v116;

  v6 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v11 = *(_QWORD *)(a1 + 104);
    v10 = *(_QWORD *)(a1 + 112);
    v12 = v6 >> 3;
    std::vector<std::vector<PixelPosition>>::vector(v113, v6 >> 3);
    std::vector<std::vector<PixelPosition>>::vector(&v111, v12);
    v13 = 0;
    v14 = 0;
    v105 = v10;
    v15 = v11;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      std::vector<PixelPosition>::reserve((void **)(*(_QWORD *)v113 + v13), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14++));
      v13 += 24;
    }
    while (v12 != v14);
    if ((int)v10 >= 1)
    {
      v16 = v11;
      v17 = 0;
      do
      {
        if (v16 >= 1)
        {
          v18 = 0;
          v108 = v17 << 32;
          do
          {
            v19 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v18 + *(_QWORD *)(a1 + 104) * v17));
            if (v19)
            {
              v20 = v19 - *(int *)(a1 + 120);
              if (((*(_QWORD *)(*a5 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
              {
                v21 = (unint64_t **)(*(_QWORD *)v113 + 24 * v20);
                v22 = (void **)(v21 + 1);
                v23 = v21[1];
                v25 = v21 + 2;
                v24 = (unint64_t)v21[2];
                if ((unint64_t)v23 >= v24)
                {
                  v27 = v23 - *v21;
                  if ((unint64_t)(v27 + 1) >> 61)
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  v28 = v24 - (_QWORD)*v21;
                  v29 = v28 >> 2;
                  if (v28 >> 2 <= (unint64_t)(v27 + 1))
                    v29 = v27 + 1;
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                    v30 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v30 = v29;
                  if (v30)
                    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v25, v30);
                  else
                    v31 = 0;
                  v32 = (unint64_t *)&v31[8 * v27];
                  *v32 = v18 | v108;
                  v26 = v32 + 1;
                  v33 = (char *)*v22;
                  v34 = *v21;
                  if (*v22 != *v21)
                  {
                    do
                    {
                      v35 = *((_QWORD *)v33 - 1);
                      v33 -= 8;
                      *--v32 = v35;
                    }
                    while (v33 != (char *)v34);
                    v33 = (char *)*v21;
                  }
                  *v21 = v32;
                  *v22 = v26;
                  *v25 = &v31[8 * v30];
                  if (v33)
                    operator delete(v33);
                }
                else
                {
                  *v23 = v18 | v108;
                  v26 = v23 + 1;
                }
                *v22 = v26;
                CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(a4, v17, v18, *(_QWORD *)(*(_QWORD *)a1 + 8 * (v18 + *(_QWORD *)(a1 + 104) * v17)));
              }
            }
            ++v18;
          }
          while (v18 != v15);
        }
        ++v17;
      }
      while (v17 != v105);
    }
    v37 = *a3;
    v36 = a3[1];
    v38 = (uint64_t)(*a3 + 1);
    if (*a3 != v36 && v38 != (_QWORD)v36)
    {
      v40 = *v37;
      v41 = *a3 + 1;
      do
      {
        v43 = *v41++;
        v42 = v43;
        v44 = v40 < v43;
        if (v40 <= v43)
          v40 = v42;
        if (v44)
          v37 = (int *)v38;
        v38 = (uint64_t)v41;
      }
      while (v41 != v36);
    }
    if (*v37 >= 1)
    {
      v101 = 0;
      v99 = v37;
      do
      {
        v46 = v111;
        v45 = (uint64_t)v112;
        if (v112 == v111)
        {
          v89 = 0xAAAAAAAAAAAAAAABLL * (v112 - v111);
          v46 = v112;
        }
        else
        {
          v47 = 0;
          do
          {
            v109 = v47;
            if ((*a3)[v47] >= v101 && ((*(_QWORD *)(*a5 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47) & 1) != 0)
            {
              v48 = (unsigned int **)(*(_QWORD *)v113 + 24 * v47);
              v49 = &v46[3 * v47];
              std::vector<PixelPosition>::reserve(v49, v48[1] - *v48);
              v50 = *v48;
              v103 = v48[1];
              if (*v48 != v103)
              {
                v51 = *a2;
                v52 = (double)(*((_DWORD *)a4 + 28) - 1);
                v53 = (double)(*((_DWORD *)a4 + 26) - 1);
                v54 = &v46[3 * v109];
                v55 = v54 + 1;
                v56 = v54 + 2;
                do
                {
                  v58 = (int)*v50;
                  v57 = (int)v50[1];
                  v104 = v50;
                  v59 = (int)fmax((double)((int)v57 - 1), 0.0);
                  v60 = (int)fmin(v52, (double)((int)v57 + 1));
                  if (v59 <= v60)
                  {
                    v106 = *v50;
                    v61 = v59;
                    v62 = v60;
                    do
                    {
                      if (*(float *)(v51 + 4 * (v58 + a2[2] * v61)) >= a6
                        && *(_QWORD *)(*(_QWORD *)a4 + 8 * (v58 + *((_QWORD *)a4 + 13) * v61)) < (unint64_t)*((int *)a4 + 30))
                      {
                        v63 = (char *)*v55;
                        if ((unint64_t)*v55 >= *v56)
                        {
                          v65 = (v63 - (_BYTE *)*v49) >> 3;
                          if ((unint64_t)(v65 + 1) >> 61)
LABEL_117:
                            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                          v66 = *v56 - (_QWORD)*v49;
                          v67 = v66 >> 2;
                          if (v66 >> 2 <= (unint64_t)(v65 + 1))
                            v67 = v65 + 1;
                          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
                            v68 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v68 = v67;
                          if (v68)
                            v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v56, v68);
                          else
                            v69 = 0;
                          v70 = (int64_t *)&v69[8 * v65];
                          *v70 = v106 | (v61 << 32);
                          v64 = v70 + 1;
                          v71 = (char *)*v55;
                          v72 = (char *)*v49;
                          if (*v55 != *v49)
                          {
                            do
                            {
                              v73 = *((_QWORD *)v71 - 1);
                              v71 -= 8;
                              *--v70 = v73;
                            }
                            while (v71 != v72);
                            v71 = (char *)*v49;
                          }
                          *v49 = v70;
                          *v55 = v64;
                          *v56 = &v69[8 * v68];
                          if (v71)
                            operator delete(v71);
                        }
                        else
                        {
                          *(_QWORD *)v63 = v106 | (v61 << 32);
                          v64 = v63 + 8;
                        }
                        *v55 = v64;
                        CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(a4, v61, v58, *((int *)a4 + 30) + (uint64_t)(int)v109);
                      }
                      v61 += 2;
                    }
                    while (v61 <= v62);
                  }
                  v74 = (int)fmax((double)((int)v58 - 1), 0.0);
                  v75 = (int)fmin(v53, (double)((int)v58 + 1));
                  if (v74 <= v75)
                  {
                    v107 = v57 << 32;
                    v76 = v74;
                    v77 = v75;
                    do
                    {
                      if (*(float *)(v51 + 4 * (v76 + a2[2] * v57)) >= a6
                        && *(_QWORD *)(*(_QWORD *)a4 + 8 * (v76 + *((_QWORD *)a4 + 13) * v57)) < (unint64_t)*((int *)a4 + 30))
                      {
                        v78 = (char *)*v55;
                        if ((unint64_t)*v55 >= *v56)
                        {
                          v80 = (v78 - (_BYTE *)*v49) >> 3;
                          if ((unint64_t)(v80 + 1) >> 61)
                            goto LABEL_117;
                          v81 = *v56 - (_QWORD)*v49;
                          v82 = v81 >> 2;
                          if (v81 >> 2 <= (unint64_t)(v80 + 1))
                            v82 = v80 + 1;
                          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                            v83 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v83 = v82;
                          if (v83)
                            v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v56, v83);
                          else
                            v84 = 0;
                          v85 = (unint64_t *)&v84[8 * v80];
                          *v85 = v76 | v107;
                          v79 = v85 + 1;
                          v86 = (char *)*v55;
                          v87 = (char *)*v49;
                          if (*v55 != *v49)
                          {
                            do
                            {
                              v88 = *((_QWORD *)v86 - 1);
                              v86 -= 8;
                              *--v85 = v88;
                            }
                            while (v86 != v87);
                            v86 = (char *)*v49;
                          }
                          *v49 = v85;
                          *v55 = v79;
                          *v56 = &v84[8 * v83];
                          if (v86)
                            operator delete(v86);
                        }
                        else
                        {
                          *(_QWORD *)v78 = v76 | v107;
                          v79 = v78 + 8;
                        }
                        *v55 = v79;
                        CRDetectorUtils::CRTextDetectorConnectedComponentResult::setLabel(a4, v57, v76, *((int *)a4 + 30) + (uint64_t)(int)v109);
                      }
                      v76 += 2;
                    }
                    while (v76 <= v77);
                  }
                  v50 = v104 + 2;
                }
                while (v104 + 2 != v103);
              }
            }
            v47 = v109 + 1;
            v46 = v111;
            v45 = (uint64_t)v112;
            v89 = 0xAAAAAAAAAAAAAAABLL * (v112 - v111);
          }
          while (v89 > v109 + 1);
          v37 = v99;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v115 - *(_QWORD *)v113) >> 3) >= v89)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v114[-*(_QWORD *)v113] >> 3) >= v89)
          {
            v94 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((uint64_t)v46, v45, *(char **)v113);
            v95 = v114;
            if (v114 != v94)
            {
              v96 = v114;
              do
              {
                v98 = (void *)*((_QWORD *)v96 - 3);
                v96 -= 24;
                v97 = v98;
                if (v98)
                {
                  *((_QWORD *)v95 - 2) = v97;
                  operator delete(v97);
                }
                v95 = v96;
              }
              while (v96 != v94);
            }
            goto LABEL_107;
          }
          v93 = (uint64_t)&v46[(uint64_t)&v114[-*(_QWORD *)v113] >> 3];
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((uint64_t)v46, v93, *(char **)v113);
          v92 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>((uint64_t)&v115, v93, v45, v114);
        }
        else
        {
          std::vector<std::vector<PixelPosition>>::__vdeallocate((uint64_t *)v113);
          if (v89 > 0xAAAAAAAAAAAAAAALL)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v90 = 0x5555555555555556 * ((v115 - *(_QWORD *)v113) >> 3);
          if (v90 <= v89)
            v90 = v89;
          if (0xAAAAAAAAAAAAAAABLL * ((v115 - *(_QWORD *)v113) >> 3) >= 0x555555555555555)
            v91 = 0xAAAAAAAAAAAAAAALL;
          else
            v91 = v90;
          std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](v113, v91);
          v92 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<PixelPosition>>,std::vector<PixelPosition>*,std::vector<PixelPosition>*,std::vector<PixelPosition>*>((uint64_t)&v115, (uint64_t)v46, v45, v114);
        }
        v94 = v92;
LABEL_107:
        v114 = v94;
        ++v101;
      }
      while (v101 < *v37);
    }
    v116 = &v111;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    v111 = (void **)v113;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v111);
  }
}

void sub_1D5009258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,char a22)
{
  a19 = (void **)&a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void std::vector<PixelPosition>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

vImage_Error CRDetectorUtils::erodeImageMap@<X0>(const vImage_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  vImagePixelCount height;
  vImagePixelCount width;
  _OWORD v9[2];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9[0] = __const__ZN15CRDetectorUtils13erodeImageMapEP13vImage_Buffer_kernel;
  v9[1] = unk_1D513A9A4;
  v10 = 1065353216;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v5 = malloc_type_calloc(this->height * this->width, 4uLL, 0x100004052888210uLL);
  height = this->height;
  width = this->width;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = height;
  *(_QWORD *)(a2 + 16) = width;
  *(_QWORD *)(a2 + 24) = 4 * width;
  return vImageErode_PlanarF(this, (const vImage_Buffer *)a2, 0, 0, (const float *)v9, 3uLL, 3uLL, 8u);
}

vImage_Error CRDetectorUtils::dilateImageMap@<X0>(const vImage_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  void *v5;
  vImagePixelCount height;
  vImagePixelCount width;
  _OWORD v9[2];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9[0] = __const__ZN15CRDetectorUtils14dilateImageMapEP13vImage_Buffer_kernel;
  v9[1] = unk_1D513A9C8;
  v10 = 1065353216;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v5 = malloc_type_calloc(this->height * this->width, 4uLL, 0x100004052888210uLL);
  height = this->height;
  width = this->width;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = height;
  *(_QWORD *)(a2 + 16) = width;
  *(_QWORD *)(a2 + 24) = 4 * width;
  return vImageDilate_PlanarF(this, (const vImage_Buffer *)a2, 0, 0, (const float *)v9, 3uLL, 3uLL, 8u);
}

double CRDetectorUtils::predictHoughGlobalAngle(CRDetectorUtils *this, const vImage_Buffer *a2)
{
  float *v3;
  unint64_t v4;
  CRDetectorUtils::CRTextDetectorConnectedComponentResult *v5;
  unint64_t *v6;
  double v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t i;
  float *j;
  float64_t v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  char v23;
  float64x2_t *v24;
  void (**v26)(cv::Mat *__hidden);
  uint64_t v27;
  int v28;
  void (**v29)(cv::SmartPtr *__hidden);
  int v30;
  int v31;
  int v32;
  float64x2_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[5];
  int v41;

  v4 = *((_QWORD *)this + 1);
  v3 = (float *)*((_QWORD *)this + 2);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)&v33, (uint64_t)v3, v4, 1, 0, 0);
  CRDetectorUtils::connectComponentLabel(*(CRDetectorUtils **)this, v3, v4, &v33, v5);
  v6 = v34;
  v7 = -1000.0;
  if (v34 != v35)
  {
    v8 = v34 + 1;
    v9 = *v34;
    if (v34 + 1 != v35)
    {
      v10 = v34;
      v11 = v34 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v9 >= v13;
        if (v9 <= v13)
          v9 = v12;
        if (!v14)
          v10 = v8;
        v8 = v11;
      }
      while (v11 != v35);
      v9 = *v10;
    }
    v15 = 0;
    v16 = v35 - v34;
    if (v16 <= 1)
      v16 = 1;
    do
    {
      if ((float)((float)v9 * 0.15) >= (float)*v6)
        *v6 = 0;
      else
        ++v15;
      ++v6;
      --v16;
    }
    while (v16);
    if (v15 > 0x32)
    {
      cv::Mat::Mat(&v26, v4, (int)v3, 1);
      cv::Mat::clear((cv::Mat *)&v26);
      if (v4)
      {
        for (i = 0; i != v4; ++i)
        {
          if (v3)
          {
            for (j = 0; j != v3; j = (float *)((char *)j + 1))
            {
              v19 = v33->f64[(_QWORD)j + i * v40[3]];
              v20 = __OFSUB__(LODWORD(v19), v41);
              v21 = LODWORD(v19) - v41;
              if (v21 < 0 != v20)
                v22 = 0;
              else
                v22 = v34[v21];
              if (v22)
                v23 = -1;
              else
                v23 = 0;
              *(_BYTE *)(v27 + v30 * (uint64_t)((int)j + v32 + v28 * ((int)i + v31))) = v23;
            }
          }
        }
      }
      v7 = houghTransformGlobalAngle(v27, (unint64_t)v3, v4, 0.3);
      v26 = &off_1E98D92A0;
      v29 = &off_1E98D92C0;
      cv::SmartPtr::release((cv::SmartPtr *)&v29);
    }
  }
  v26 = (void (**)(cv::Mat *__hidden))v40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v24 = v33;
  v33 = 0;
  if (v24)
    MEMORY[0x1D826E270](v24, 0x1000C8000313F17);
  return v7;
}

void sub_1D5009738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void (**a46)(cv::SmartPtr *__hidden this))
{
  uint64_t v46;

  a46 = &off_1E98D92C0;
  cv::SmartPtr::release((cv::SmartPtr *)&a46);
  CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult((CRDetectorUtils::CRTextDetectorConnectedComponentResult *)(v46 - 192));
  _Unwind_Resume(a1);
}

void CRDetectorUtils::CRTextDetectorConnectedComponentResult::~CRTextDetectorConnectedComponentResult(CRDetectorUtils::CRTextDetectorConnectedComponentResult *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void **v6;

  v6 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    MEMORY[0x1D826E270](v5, 0x1000C8000313F17);
}

void CRDetectorUtils::sortQuadWithRotation(uint64_t a1, uint64_t a2, uint64_t a3, CGPoint *a4)
{
  _OWORD *v4;
  CGFloat x;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat *v9;
  CGFloat y;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGFloat *v14;
  int *begin;
  int *end;
  int v17;
  std::vector<int>::pointer v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::vector<int>::pointer v22;
  uint64_t v23;
  double v24;
  std::vector<int>::pointer v25;
  double v26;
  std::vector<int>::pointer v27;
  std::vector<int>::pointer v28;
  int *v29;
  int v30;
  uint64_t v31;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;
  std::vector<int> v36;
  std::vector<int> v37;
  void *__p;
  void *v39;
  _QWORD *v40;
  _OWORD v41[4];
  CGPoint v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = (_OWORD *)a1;
  v49 = *MEMORY[0x1E0C80C00];
  CRDetectorUtils::rotatePolygon((CRDetectorUtils *)a1, (const CGPoint *)(a1 + 88), &v42, *(double *)(a1 + 104), a4);
  x = v42.x;
  v6 = v43;
  v7 = v45;
  v8 = v47;
  v9 = (CGFloat *)operator new(0x20uLL);
  v39 = v9 + 4;
  v40 = v9 + 4;
  *v9 = x;
  *((_QWORD *)v9 + 1) = v6;
  *((_QWORD *)v9 + 2) = v7;
  *((_QWORD *)v9 + 3) = v8;
  __p = v9;
  y = v42.y;
  v11 = v44;
  v12 = v46;
  v13 = v48;
  v14 = (CGFloat *)operator new(0x20uLL);
  *v14 = y;
  *((_QWORD *)v14 + 1) = v11;
  *((_QWORD *)v14 + 2) = v12;
  *((_QWORD *)v14 + 3) = v13;
  std::vector<int>::vector(&v37, 4uLL);
  begin = v37.__begin_;
  end = v37.__end_;
  if (v37.__begin_ != v37.__end_)
  {
    v17 = 0;
    v18 = v37.__begin_;
    do
      *v18++ = v17++;
    while (v18 != end);
  }
  v19 = 126 - 2 * __clz(end - begin);
  *(_QWORD *)&v41[0] = &__p;
  if (end == begin)
    v20 = 0;
  else
    v20 = v19;
  std::__introsort<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *,false>(begin, end, (uint64_t **)v41, v20, 1);
  std::vector<int>::vector(&v36, 4uLL);
  v21 = 0;
  v22 = v37.__begin_;
  v23 = *v37.__begin_;
  v24 = v14[v23];
  v25 = v37.__begin_ + 1;
  v26 = v14[v37.__begin_[1]];
  v27 = v36.__begin_;
  if (v24 >= v26)
    LODWORD(v23) = v37.__begin_[1];
  *v36.__begin_ = v23;
  if (v24 >= v26)
    v28 = v22;
  else
    v28 = v25;
  v27[3] = *v28;
  v31 = v22[3];
  v29 = v22 + 3;
  v30 = v31;
  v32 = v14[*(v29 - 1)];
  v33 = v14[v31];
  if (v32 < v33)
    v30 = *(v29 - 1);
  v27[1] = v30;
  if (v32 >= v33)
    --v29;
  v27[2] = *v29;
  v34 = v4[1];
  v41[0] = *v4;
  v41[1] = v34;
  v35 = v4[3];
  v41[2] = v4[2];
  v41[3] = v35;
  do
    *v4++ = v41[v27[v21++]];
  while (v21 != 4);
  v36.__end_ = v27;
  operator delete(v27);
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  operator delete(v14);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
}

void sub_1D50099FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (__p)
    operator delete(__p);
  operator delete(v17);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void CRDetectorUtils::generateConvexHull(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  int32x2_t *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t v10;
  __int32 v11;
  int32x2_t *v13;
  int32x2_t *v15;
  int64_t v16;
  int32x2_t *v17;
  int64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void *__p;
  int32x2_t *v57;
  uint64_t v58;
  char v59;

  __p = 0;
  v57 = 0;
  v58 = 0;
  std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(&__p, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = (char *)v57 - (_BYTE *)__p;
  std::vector<PixelPosition>::vector(a2, ((char *)v57 - (_BYTE *)__p) >> 2);
  if (v3 < 0x19)
  {
    if (&__p == (void **)a2)
      goto LABEL_73;
    v6 = (char *)__p;
    v7 = v57;
    v19 = ((char *)v57 - (_BYTE *)__p) >> 3;
LABEL_54:
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(a2, v6, (uint64_t)v7, v19);
    goto LABEL_73;
  }
  v4 = 126 - 2 * __clz(((char *)v57 - (_BYTE *)__p) >> 3);
  if (v57 == __p)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PixelPosition *,false>((int32x2_t *)__p, v57, (uint64_t)&v59, v5, 1);
  v6 = (char *)__p;
  v7 = v57;
  v8 = (int32x2_t *)__p;
  if (__p == v57)
  {
LABEL_28:
    v7 = v8;
  }
  else
  {
    v9 = (int32x2_t *)((char *)__p - 8);
    do
    {
      if (&v9[2] == v57)
      {
        v8 = v57;
        goto LABEL_28;
      }
      v11 = v9[1].i32[0];
      ++v9;
      v10.i32[0] = v11;
    }
    while (v11 != v9[1].i32[0] || v9->i32[1] != v9[1].i32[1]);
    v13 = v9 + 2;
    if (&v9[2] != v57)
    {
      do
      {
        if (v10.i32[0] != v13->i32[0] || v9->i32[1] != v13->i32[1])
        {
          v10 = *v13;
          v9[1] = *v13;
          ++v9;
        }
        ++v13;
      }
      while (v13 != v7);
      v7 = v57;
    }
    v15 = v9 + 1;
    v16 = (char *)v7 - (char *)&v9[1];
    if (v16)
    {
      v17 = (int32x2_t *)((char *)v15 + v16);
      v18 = (char *)v7 - (char *)v17;
      if (v7 != v17)
      {
        memmove(v15, v17, (char *)v7 - (char *)v17);
        v6 = (char *)__p;
      }
      v7 = (int32x2_t *)((char *)v15 + v18);
      v57 = (int32x2_t *)((char *)v15 + v18);
    }
  }
  v19 = ((char *)v7 - v6) >> 3;
  if ((unint64_t)((char *)v7 - v6) < 0x19)
  {
    if (&__p == (void **)a2)
      goto LABEL_73;
    goto LABEL_54;
  }
  v20 = 0;
  v21 = 0;
  if (v19 <= 1)
    v22 = 1;
  else
    v22 = ((char *)v7 - v6) >> 3;
  do
  {
    v23 = *(char **)a2;
    if (v20 >= 1)
      v24 = 1;
    else
      v24 = v20;
    v25 = *((_QWORD *)__p + v21);
    v26 = (uint64_t *)&v23[8 * v20 - 8];
    v27 = v20 + 4294967294;
    while (1)
    {
      v28 = __OFSUB__(v20--, 1);
      if ((v20 < 0) ^ v28 | (v20 == 0))
        break;
      v29 = *(_DWORD *)&v23[8 * v27 + 4];
      v30 = *v26--;
      v31 = (HIDWORD(v25) - v29) * (v30 - *(_DWORD *)&v23[8 * v27])
          + (HIDWORD(v30) - v29) * (*(_DWORD *)&v23[8 * v27] - v25);
      --v27;
      if (v31 >= 1)
      {
        v24 = v20 + 1;
        break;
      }
    }
    v20 = v24 + 1;
    *(_QWORD *)&v23[8 * v24] = v25;
    ++v21;
  }
  while (v21 != v22);
  v32 = v19 - 1;
  if (v19 == 1)
  {
    v41 = v24;
  }
  else
  {
    v33 = v24 + 1;
    do
    {
      v34 = (char *)__p + 8 * v19;
      v19 = v32;
      v35 = *(char **)a2;
      v36 = v33;
      if (v33 >= v20)
        v37 = v20;
      else
        v37 = v33;
      v38 = *((_QWORD *)v34 - 2);
      v39 = v33 + 1;
      while (v36 > v20)
      {
        v40 = &v35[8 * v36--];
        --v39;
        if ((HIDWORD(v38) - *((_DWORD *)v40 - 3)) * (*((_DWORD *)v40 - 2) - *((_DWORD *)v40 - 4))
           + (*((_DWORD *)v40 - 1) - *((_DWORD *)v40 - 3)) * (*((_DWORD *)v40 - 4) - (int)v38) >= 1)
          goto LABEL_51;
      }
      v39 = v37;
LABEL_51:
      v33 = v39 + 1;
      *(_QWORD *)&v35[8 * v39] = v38;
      v32 = v19 - 1;
    }
    while (v19 != 1);
    v41 = v39;
  }
  std::vector<PixelPosition>::resize((uint64_t)a2, v41);
  v42 = __p;
  v43 = *((_QWORD *)a2 + 2);
  v44 = (_QWORD *)*((_QWORD *)a2 + 1);
  if ((unint64_t)v44 >= v43)
  {
    v46 = ((uint64_t)v44 - *(_QWORD *)a2) >> 3;
    if ((unint64_t)(v46 + 1) >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v47 = v43 - *(_QWORD *)a2;
    v48 = v47 >> 2;
    if (v47 >> 2 <= (unint64_t)(v46 + 1))
      v48 = v46 + 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    if (v49)
      v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 16), v49);
    else
      v50 = 0;
    v51 = &v50[8 * v46];
    v52 = &v50[8 * v49];
    *(_QWORD *)v51 = *v42;
    v45 = v51 + 8;
    v54 = *(char **)a2;
    v53 = (char *)*((_QWORD *)a2 + 1);
    if (v53 != *(char **)a2)
    {
      do
      {
        v55 = *((_QWORD *)v53 - 1);
        v53 -= 8;
        *((_QWORD *)v51 - 1) = v55;
        v51 -= 8;
      }
      while (v53 != v54);
      v53 = *(char **)a2;
    }
    *(_QWORD *)a2 = v51;
    *((_QWORD *)a2 + 1) = v45;
    *((_QWORD *)a2 + 2) = v52;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v44 = *(_QWORD *)__p;
    v45 = v44 + 1;
  }
  *((_QWORD *)a2 + 1) = v45;
LABEL_73:
  if (__p)
  {
    v57 = (int32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_1D5009DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<PixelPosition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<PixelPosition>::__append((void **)a1, a2 - v2);
  }
}

uint64_t CRDetectorUtils::findRoot(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t Root;

  v2 = a1;
  if (*(_QWORD *)(*a2 + 8 * a1) != a1)
  {
    Root = CRDetectorUtils::findRoot();
    *(_QWORD *)(*a2 + 8 * v2) = Root;
    return Root;
  }
  return v2;
}

BOOL CRDetectorUtils::isContourInQuad(int **a1, CGFloat *a2, int a3, float a4)
{
  int *v4;
  int *v5;
  __int128 v10;
  double v11;
  double v12;
  int *v13;
  int v14;
  int v15;
  double v16;
  double v17;
  __int128 v18;
  double v19;
  CGPath *Mutable;
  uint64_t i;
  int *v22;
  int *v23;
  int **v24;
  int v25;
  int v26;
  int v27;
  _BOOL8 v28;
  int v29;
  int v30;
  _BOOL8 v31;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGAffineTransform m;
  CGPoint v39;
  CGPoint v40;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
    return 0;
  v10 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&m.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&m.c = v10;
  *(_OWORD *)&m.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v11 = 0.0;
  v12 = 0.0;
  v13 = v4;
  do
  {
    v14 = *v13;
    v15 = v13[1];
    v13 += 2;
    v11 = v11 + (double)v14;
    v12 = v12 + (double)v15;
  }
  while (v13 != v5);
  v16 = (double)(unint64_t)(((char *)v5 - (char *)v4) >> 3);
  v17 = v11 / v16;
  v18 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v37.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v37.c = v18;
  *(_OWORD *)&v37.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v19 = v12 / v16;
  CGAffineTransformTranslate(&m, &v37, v11 / v16, v12 / v16);
  v35 = m;
  CGAffineTransformScale(&v36, &v35, (float)(1.0 - a4), (float)(1.0 - a4));
  m = v36;
  v34 = v36;
  CGAffineTransformTranslate(&v36, &v34, -v17, -v19);
  m = v36;
  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *a2, a2[1]);
  for (i = 0; i != 6; i += 2)
    CGPathAddLineToPoint(Mutable, 0, a2[i + 2], a2[i + 3]);
  CGPathCloseSubpath(Mutable);
  v24 = a1;
  v22 = *a1;
  v23 = v24[1];
  if (a3 >= (unint64_t)(((char *)v23 - (char *)v22) >> 3))
  {
    if (v22 == v23)
    {
      v28 = 1;
    }
    else
    {
      do
      {
        v29 = *v22;
        v30 = v22[1];
        v22 += 2;
        v40.x = (double)v29;
        v40.y = (double)v30;
        v31 = CGPathContainsPoint(Mutable, &m, v40, 0);
      }
      while (v31 && v22 != v23);
      v28 = v31;
    }
  }
  else
  {
    if (v22 == v23)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      do
      {
        v26 = *v22;
        v27 = v22[1];
        v22 += 2;
        v39.x = (double)v26;
        v39.y = (double)v27;
        v25 += CGPathContainsPoint(Mutable, &m, v39, 0);
      }
      while (v22 != v23);
    }
    v28 = v25 >= a3;
  }
  CGPathRelease(Mutable);
  return v28;
}

void CRDetectorUtils::writeImageBufferToFile(CRDetectorUtils *this, vImage_Buffer *a2, NSString *a3)
{
  void *v4;
  void *v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t i;
  float v14;
  CGColorSpace *DeviceRGB;
  CGContext *v16;
  CGImage *Image;
  CRImage *v18;
  vImage_Buffer *v19;

  v19 = a2;
  v4 = malloc_type_malloc(4 * *((_QWORD *)this + 2) * *((_QWORD *)this + 1), 0x100004052888210uLL);
  v5 = v4;
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  if (v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)this;
    v10 = *((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 2);
    v12 = v4;
    do
    {
      if (v11)
      {
        for (i = 0; i < v11; ++i)
        {
          v14 = *(float *)(v9 + 4 * (i + v8 * v11)) * 255.0;
          *v12 = (int)v14;
          v12[1] = (int)v14;
          v12[2] = (int)v14;
          v12[3] = -1;
          v12 += 4;
          v11 = *((_QWORD *)this + 2);
        }
        v10 = *((_QWORD *)this + 1);
      }
      ++v8;
    }
    while (v10 > v8);
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v16 = CGBitmapContextCreate(v5, v7, v6, 8uLL, 4 * v7, DeviceRGB, 5u);
  Image = CGBitmapContextCreateImage(v16);
  v18 = -[CRImage initWithCGImage:toColorSpace:]([CRImage alloc], "initWithCGImage:toColorSpace:", Image, 1);
  -[CRImage writeToFile:](v18, "writeToFile:", v19);
  CGImageRelease(Image);
  CGContextRelease(v16);
  CGColorSpaceRelease(DeviceRGB);
  free(v5);

}

void sub_1D500A1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CRDetectorUtils::writeVectorToFile(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  NSString *v10;
  vImage_Buffer *v11;
  _QWORD v12[4];

  v11 = a4;
  v7 = malloc_type_calloc(a3 * a2, 4uLL, 0x100004052888210uLL);
  v8 = v7;
  v12[0] = v7;
  v12[1] = a3;
  v12[2] = a2;
  v12[3] = 4 * a2;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (NSString *)(v9 - *(_QWORD *)a1);
  if (v9 != *(_QWORD *)a1)
    memmove(v7, *(const void **)a1, (size_t)v10);
  CRDetectorUtils::writeImageBufferToFile((CRDetectorUtils *)v12, v11, v10);
  free(v8);

}

void sub_1D500A2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

float CRDetectorUtils::distPointToLine(CRDetectorUtils *this, const CGPoint *a2, const CGPoint *a3, const CGPoint *a4)
{
  double y;
  double v5;
  float result;

  y = a2->y;
  v5 = a3->y;
  result = 0.0;
  if (a2->x != a3->x || y != v5)
    return fabs((a3->x - a2->x) * (y - *((double *)this + 1)) - (a2->x - *(double *)this) * (v5 - y))
         / sqrt((v5 - y) * (v5 - y) + (a3->x - a2->x) * (a3->x - a2->x));
  return result;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<std::vector<CGPoint>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<CGPoint>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<CGPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<CGPoint>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void std::vector<std::vector<CGPoint>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<CGPoint>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1D500A698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CGPoint>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>,std::reverse_iterator<std::vector<CGPoint>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CGPoint>>,std::reverse_iterator<std::vector<CGPoint>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<CRDetectorUtils::CRTextDetectorCCBoundary>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<CGPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::deque<std::pair<int,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1D500ACD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::pair<int,int>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

CRDetectorUtils::CRTextDetectorConnectedComponentResult *CRDetectorUtils::CRTextDetectorConnectedComponentResult::CRTextDetectorConnectedComponentResult(CRDetectorUtils::CRTextDetectorConnectedComponentResult *this, uint64_t a2, uint64_t a3, int a4, char a5, char a6)
{
  size_t v7;
  void *v8;
  uint64_t v9;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = a2;
  *((_QWORD *)this + 14) = a3;
  *((_DWORD *)this + 30) = a4;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = a5;
  *((_BYTE *)this + 137) = a6;
  if ((unint64_t)(a3 * a2) >> 61)
    v7 = -1;
  else
    v7 = 8 * a3 * a2;
  v8 = (void *)operator new[]();
  bzero(v8, v7);
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = v8;
  if (v9)
    MEMORY[0x1D826E270](v9, 0x1000C8000313F17);
  return this;
}

void sub_1D500B308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  a10 = (void **)(v10 + 10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = (void *)v10[7];
  if (v12)
  {
    v10[8] = (uint64_t)v12;
    operator delete(v12);
  }
  v13 = (void *)v10[4];
  if (v13)
  {
    v10[5] = (uint64_t)v13;
    operator delete(v13);
  }
  v14 = (void *)v10[1];
  if (v14)
  {
    v10[2] = (uint64_t)v14;
    operator delete(v14);
  }
  v15 = *v10;
  *v10 = 0;
  if (v15)
    MEMORY[0x1D826E270](v15, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<PixelPosition>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D500B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

int *std::__introsort<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  BOOL v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int64_t v65;
  uint64_t *v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  int *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  int *v94;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v43 = *(a2 - 1);
        v44 = *v10;
        if (*(double *)(**a3 + 8 * v43) < *(double *)(**a3 + 8 * v44))
        {
          *v10 = v43;
          *(a2 - 1) = v44;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v10, v10 + 1, a2 - 1, **a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5:
        v45 = v10 + 2;
        v46 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v47 = *(a2 - 1);
        v48 = v10[3];
        v49 = **a3;
        if (*(double *)(v49 + 8 * v47) < *(double *)(v49 + 8 * v48))
        {
          *v46 = v47;
          *(a2 - 1) = v48;
          v50 = *v46;
          v51 = *v45;
          v52 = *(double *)(v49 + 8 * v50);
          if (v52 < *(double *)(v49 + 8 * v51))
          {
            *v45 = v50;
            *v46 = v51;
            v53 = v10[1];
            if (v52 < *(double *)(v49 + 8 * v53))
            {
              v10[1] = v50;
              v10[2] = v53;
              v54 = *v10;
              if (v52 < *(double *)(v49 + 8 * v54))
              {
                *v10 = v50;
                v10[1] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v55 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v56 = **a3;
                v57 = 4;
                v58 = v10;
                do
                {
                  v60 = *v58;
                  v59 = v58[1];
                  v58 = v55;
                  v61 = *(double *)(v56 + 8 * v59);
                  if (v61 < *(double *)(v56 + 8 * v60))
                  {
                    v62 = v57;
                    while (1)
                    {
                      *(int *)((char *)v10 + v62) = v60;
                      v63 = v62 - 4;
                      if (v62 == 4)
                        break;
                      v60 = *(int *)((char *)v10 + v62 - 8);
                      v62 -= 4;
                      if (v61 >= *(double *)(v56 + 8 * v60))
                      {
                        v64 = (int *)((char *)v10 + v63);
                        goto LABEL_75;
                      }
                    }
                    v64 = v10;
LABEL_75:
                    *v64 = v59;
                  }
                  v55 = v58 + 1;
                  v57 += 4;
                }
                while (v58 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v96 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v97 = **a3;
              do
              {
                v99 = *v9;
                v98 = v9[1];
                v9 = v96;
                v100 = *(double *)(v97 + 8 * v98);
                if (v100 < *(double *)(v97 + 8 * v99))
                {
                  do
                  {
                    *v96 = v99;
                    v99 = *(v96 - 2);
                    --v96;
                  }
                  while (v100 < *(double *)(v97 + 8 * v99));
                  *v96 = v98;
                }
                v96 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v65 = (unint64_t)(v12 - 2) >> 1;
            v66 = *a3;
            v67 = v65;
            do
            {
              v68 = v67;
              if (v65 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v10[v69];
                v71 = 2 * v67 + 2;
                v72 = *v66;
                if (v71 < v12 && *(double *)(v72 + 8 * *v70) < *(double *)(v72 + 8 * v70[1]))
                {
                  ++v70;
                  v69 = 2 * v68 + 2;
                }
                result = &v10[v68];
                v73 = *v70;
                v74 = *result;
                v75 = *(double *)(v72 + 8 * v74);
                if (*(double *)(v72 + 8 * v73) >= v75)
                {
                  do
                  {
                    v76 = v70;
                    *result = v73;
                    if (v65 < v69)
                      break;
                    v77 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v70 = &v10[v69];
                    v78 = v77 + 2;
                    if (v78 < v12 && *(double *)(v72 + 8 * *v70) < *(double *)(v72 + 8 * v70[1]))
                    {
                      ++v70;
                      v69 = v78;
                    }
                    v73 = *v70;
                    result = v76;
                  }
                  while (*(double *)(v72 + 8 * v73) >= v75);
                  *v76 = v74;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v79 = (unint64_t)v11 >> 2;
            do
            {
              v80 = 0;
              v81 = *v10;
              v82 = *a3;
              v83 = v10;
              do
              {
                v84 = v83;
                v83 += v80 + 1;
                v85 = 2 * v80;
                v80 = (2 * v80) | 1;
                v86 = v85 + 2;
                if (v86 < v79)
                {
                  result = (int *)v83[1];
                  if (*(double *)(*v82 + 8 * *v83) < *(double *)(*v82 + 8 * (_QWORD)result))
                  {
                    ++v83;
                    v80 = v86;
                  }
                }
                *v84 = *v83;
              }
              while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
              if (v83 == --a2)
              {
                *v83 = v81;
              }
              else
              {
                *v83 = *a2;
                *a2 = v81;
                v87 = (char *)v83 - (char *)v10 + 4;
                if (v87 >= 5)
                {
                  v88 = (((unint64_t)v87 >> 2) - 2) >> 1;
                  v89 = &v10[v88];
                  v90 = *v89;
                  v91 = *v83;
                  v92 = *v82;
                  v93 = *(double *)(v92 + 8 * v91);
                  if (*(double *)(v92 + 8 * v90) < v93)
                  {
                    do
                    {
                      v94 = v89;
                      *v83 = v90;
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                      v89 = &v10[v88];
                      v90 = *v89;
                      v83 = v94;
                    }
                    while (*(double *)(v92 + 8 * v90) < v93);
                    *v94 = v91;
                  }
                }
              }
            }
            while (v79-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        v15 = **a3;
        if ((unint64_t)v11 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v14, v9, a2 - 1, v15);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v9, v14, a2 - 1, v15);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v9 + 1, v14 - 1, a2 - 2, **a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v9 + 2, &v9[v13 + 1], a2 - 3, **a3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v14 - 1, v14, &v9[v13 + 1], **a3);
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = **a3;
        if ((a5 & 1) == 0)
        {
          v19 = *(double *)(v18 + 8 * v17);
          if (*(double *)(v18 + 8 * *(v9 - 1)) < v19)
            goto LABEL_12;
          if (v19 >= *(double *)(v18 + 8 * *(a2 - 1)))
          {
            v35 = v9 + 1;
            do
            {
              v10 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v19 >= *(double *)(v18 + 8 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v34 = v10[1];
              ++v10;
            }
            while (v19 >= *(double *)(v18 + 8 * v34));
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v19 < *(double *)(v18 + 8 * v37));
          }
          if (v10 < v36)
          {
            v38 = *v10;
            v39 = *v36;
            do
            {
              *v10 = v39;
              *v36 = v38;
              do
              {
                v40 = v10[1];
                ++v10;
                v38 = v40;
              }
              while (v19 >= *(double *)(v18 + 8 * v40));
              do
              {
                v41 = *--v36;
                v39 = v41;
              }
              while (v19 < *(double *)(v18 + 8 * v41));
            }
            while (v10 < v36);
          }
          v42 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v42;
          a5 = 0;
          *v42 = v17;
          continue;
        }
        v19 = *(double *)(v18 + 8 * v17);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while (*(double *)(v18 + 8 * v21) < v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(double *)(v18 + 8 * v25) >= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(double *)(v18 + 8 * v24) >= v19);
        }
        if (v22 >= v23)
        {
          v32 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = v21;
          v28 = &v9[v20];
          v29 = v23;
          do
          {
            *v28 = v26;
            *v29 = v27;
            do
            {
              v30 = v28[1];
              ++v28;
              v27 = v30;
            }
            while (*(double *)(v18 + 8 * v30) < v19);
            do
            {
              v31 = *--v29;
              v26 = v31;
            }
            while (*(double *)(v18 + 8 * v31) >= v19);
          }
          while (v28 < v29);
          v32 = v28 - 1;
        }
        if (v32 != v9)
          *v9 = *v32;
        *v32 = v17;
        if (v22 < v23)
        {
LABEL_33:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *,false>(v9, v32, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v32 + 1;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v9, v32, a3);
        v10 = v32 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(v32 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v32;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(double *)(a4 + 8 * v4);
  v7 = *(double *)(a4 + 8 * v5);
  v8 = *a3;
  v9 = *(double *)(a4 + 8 * v8);
  if (v6 >= v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(double *)(a4 + 8 * v10) < *(double *)(a4 + 8 * v11))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(double *)(a4 + 8 * v12) >= v7)
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(double *)(**a3 + 8 * v8) < *(double *)(**a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = **a3;
      if (*(double *)(v25 + 8 * v23) < *(double *)(v25 + 8 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = *(double *)(v25 + 8 * v26);
        if (v28 < *(double *)(v25 + 8 * v27))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 < *(double *)(v25 + 8 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 < *(double *)(v25 + 8 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(double *)(v13 + 8 * v15);
    if (v17 < *(double *)(v13 + 8 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(double *)(v13 + 8 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorUtils::sortQuadWithRotation(CRDetectorUtils::CRTextDetectorQuad &)::$_0 &,int *>(a1, a2, a3, **a5);
  v11 = *a4;
  v12 = *a3;
  v13 = **a5;
  if (*(double *)(v13 + 8 * v11) < *(double *)(v13 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(double *)(v13 + 8 * v14) < *(double *)(v13 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(double *)(v13 + 8 * v16) < *(double *)(v13 + 8 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

_QWORD *std::vector<PixelPosition>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D500BF54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<PixelPosition>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_1D500C180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D500C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D500C370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D500CE38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v1);
  _Unwind_Resume(a1);
}

void sub_1D500D1E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((_QWORD *)v9 + 5) = 0;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void sub_1D500D674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D500D7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D500D7D8()
{
  JUMPOUT(0x1D500D7C8);
}

void sub_1D500D7E0()
{
  JUMPOUT(0x1D500D7CCLL);
}

void sub_1D500D910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D500D948()
{
  JUMPOUT(0x1D500D938);
}

void sub_1D500D950()
{
  JUMPOUT(0x1D500D93CLL);
}

void sub_1D500DA08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D500DD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id customHalfWidthToFullWidthMapping()
{
  if (qword_1ED0B4430 != -1)
    dispatch_once(&qword_1ED0B4430, &__block_literal_global_11);
  return (id)qword_1ED0B4438;
}

void __customHalfWidthToFullWidthMapping_block_invoke()
{
  void *v0;

  v0 = (void *)qword_1ED0B4438;
  qword_1ED0B4438 = (uint64_t)&unk_1E993F9B8;

}

id customRegexToIgnoreHalfWidthToFullWidthMapping()
{
  if (qword_1ED0B4440 != -1)
    dispatch_once(&qword_1ED0B4440, &__block_literal_global_45);
  return (id)qword_1ED0B4448;
}

void __customRegexToIgnoreHalfWidthToFullWidthMapping_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", CFSTR("[a-zA-Z0-9]\\s*[!,:?;]\\s*[a-zA-Z0-9/]"),
    0,
    0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ED0B4448;
  qword_1ED0B4448 = v0;

}

id unicodeToNSString(int a1)
{
  unsigned int v1;
  uint64_t v2;
  _WORD v4[2];

  if ((a1 - 0x10000) >> 20)
  {
    v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    v1 = ((a1 + 67043328) >> 10) - 10240;
    v4[1] = a1 & 0x3FF | 0xDC00;
    v2 = 2;
  }
  v4[0] = v1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", v4, v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

double CRRoundCGRect(double a1)
{
  return round(a1);
}

id nms1DNonFilter(void *a1, float a2)
{
  id v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  float v11;
  float v12;
  void *v13;
  float v14;
  float v15;
  void *v16;
  float v17;
  float v18;
  void *v19;
  float v20;
  float v21;
  double v22;
  void *v23;
  uint64_t v24;
  void *v25;
  float v26;
  float v27;
  void *v28;
  float v29;
  float v30;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v3, "count") >= 2)
  {
    v5 = objc_msgSend(v3, "count");
    v6 = v5;
    if (v5 >= 3)
    {
      v7 = v5 - 1;
      v8 = 1;
      v9 = 2;
      while (1)
      {
        objc_msgSend(v3, "objectAtIndexedSubscript:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "floatValue");
        v12 = v11;
        objc_msgSend(v3, "objectAtIndexedSubscript:", v9);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "floatValue");
        v15 = v14;

        if (v12 <= v15)
          break;
        objc_msgSend(v3, "objectAtIndexedSubscript:", v8);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "floatValue");
        v18 = v17;
        objc_msgSend(v3, "objectAtIndexedSubscript:", v8 - 1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "floatValue");
        v21 = v20;

        if (v18 >= v21)
          goto LABEL_6;
LABEL_13:
        v9 = v8 + 3;
        v8 += 2;
        if (v9 >= v6)
          goto LABEL_14;
      }
      if (v9 + 1 >= v6)
      {
        v8 = v9;
        goto LABEL_13;
      }
      v24 = v9 + 1;
      v8 = v9;
      while (1)
      {
        objc_msgSend(v3, "objectAtIndexedSubscript:", v8);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "floatValue");
        v27 = v26;
        objc_msgSend(v3, "objectAtIndexedSubscript:", v24);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "floatValue");
        v30 = v29;

        if (v27 > v30)
          break;
        ++v24;
        if (v7 == ++v8)
          goto LABEL_13;
      }
LABEL_6:
      *(float *)&v22 = (float)v8 / a2;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v23);

      goto LABEL_13;
    }
  }
LABEL_14:

  return v4;
}

id maxPoint1D(void *a1, float a2)
{
  id v3;
  int v4;
  int v5;
  void *v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  void *v11;
  float v12;
  float v13;
  void *v14;
  double v15;
  void *v16;
  id v18;
  _QWORD v19[6];
  int v20;
  _QWORD v21[5];
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v3, "count") >= 2)
  {
    v4 = objc_msgSend(v3, "count");
    if (v4 >= 1)
    {
      v5 = 0;
      do
      {
        objc_msgSend(v3, "objectAtIndexedSubscript:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "floatValue");
        v8 = v7;

        if (v8 <= 0.0)
        {
          v10 = v5;
        }
        else
        {
          v9 = 0;
          if (v5 + 1 > v4)
            v10 = v5 + 1;
          else
            v10 = v4;
          while (v5 + 1 + v9 < v4)
          {
            objc_msgSend(v3, "objectAtIndexedSubscript:");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "floatValue");
            v13 = v12;

            ++v9;
            if (v13 <= 0.0)
            {
              v10 = v5 + v9;
              break;
            }
          }
          objc_msgSend(v3, "subarrayWithRange:", v5, v10 - v5);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 0;
          v24 = &v23;
          v25 = 0x2020000000;
          v26 = 0;
          v21[0] = 0;
          v21[1] = v21;
          v21[2] = 0x3032000000;
          v21[3] = __Block_byref_object_copy__6;
          v21[4] = __Block_byref_object_dispose__6;
          objc_msgSend(v14, "objectAtIndexedSubscript:", 0);
          v22 = (id)objc_claimAutoreleasedReturnValue();
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 3221225472;
          v19[2] = __maxPoint1D_block_invoke;
          v19[3] = &unk_1E98DA828;
          v19[4] = v21;
          v19[5] = &v23;
          v20 = v5;
          objc_msgSend(v14, "enumerateObjectsUsingBlock:", v19);
          *(float *)&v15 = (float)(unint64_t)v24[3] / a2;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "addObject:", v16);

          _Block_object_dispose(v21, 8);
          _Block_object_dispose(&v23, 8);

        }
        v5 = v10 + 1;
      }
      while (v10 + 1 < v4);
    }
  }

  return v18;
}

void sub_1D500F7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __maxPoint1D_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  id v9;

  v9 = a2;
  objc_msgSend(v9, "floatValue");
  v7 = v6;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "floatValue");
  if (v7 > v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(int *)(a1 + 48) + a3;
  }

}

id smoothing1D(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  unint64_t v4;
  id v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  float v14;
  void *v15;
  float v16;
  float v17;
  void *v18;
  float v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v1 = a1;
  v2 = (void *)objc_msgSend(v1, "mutableCopy");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", &unk_1E9944998, &unk_1E99449A8, &unk_1E9944998, &unk_1E9944988, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v1, "count");
  if (v4 >= objc_msgSend(v3, "count"))
  {
    v6 = objc_msgSend(v3, "count");
    if (v6 >= 0)
      v7 = v6;
    else
      v7 = v6 + 1;
    if (objc_msgSend(v1, "count") - (v7 >> 1) > (unint64_t)(v7 >> 1))
    {
      v8 = 0;
      v9 = (uint64_t)v7 >> 1;
      v10 = v9;
      do
      {
        v11 = v8;
        if (objc_msgSend(v3, "count"))
        {
          v13 = 0;
          v14 = 0.0;
          do
          {
            objc_msgSend(v1, "objectAtIndexedSubscript:", v11 + v13);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "floatValue");
            v17 = v16;
            objc_msgSend(v3, "objectAtIndexedSubscript:", v13);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "floatValue");
            v14 = v14 + (float)(v17 * v19);

            ++v13;
          }
          while (objc_msgSend(v3, "count") > v13);
        }
        else
        {
          v14 = 0.0;
        }
        *(float *)&v12 = v14;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:atIndexedSubscript:", v20, v10);

        ++v10;
        v21 = objc_msgSend(v1, "count");
        v8 = v11 + 1;
      }
      while (v21 - v9 > v10);
    }
    v5 = v2;
  }
  else
  {
    v5 = (id)objc_msgSend(v1, "mutableCopy");
  }
  v22 = v5;

  return v22;
}

id nms1D(void *a1, int a2, float a3)
{
  void *v4;
  void *v5;

  if (a2)
  {
    nms1DNonFilter(a1, a3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    smoothing1D(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    maxPoint1D(v5, a3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

double rotatedPointAroundPoint(double a1, double a2, double a3, double a4, double a5)
{
  __double2 v9;
  float v10;

  v9 = __sincos_stret(a5);
  v10 = (a1 - a3) * v9.__cosval - (a2 - a4) * v9.__sinval;
  return a3 + v10;
}

void rotatePolygon(_QWORD *a1, double *a2, double a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  __float2 v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  _QWORD v23[4];
  _QWORD v24[5];
  float64x2x2_t v25;

  v24[4] = *MEMORY[0x1E0C80C00];
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v24[0] = *a1;
  v24[1] = v7;
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v24[2] = a1[4];
  v24[3] = v10;
  v23[0] = v6;
  v23[1] = v8;
  v23[2] = v9;
  v23[3] = v11;
  v12 = a5;
  v13 = __sincosf_stret(v12);
  v14 = 0;
  v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
  v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
  v17 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13.__sinval), 0);
  v18 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13.__cosval), 0);
  do
  {
    v19 = vsubq_f64(*(float64x2_t *)&v24[v14], v15);
    v20 = vsubq_f64(*(float64x2_t *)&v23[v14], v16);
    v25.val[0] = vaddq_f64(v15, vcvtq_f64_f32(vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vnegq_f64(v20), v13.__sinval), v18, v19))));
    v25.val[1] = vaddq_f64(v16, vcvtq_f64_f32(vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v20, v13.__cosval), v17, v19))));
    *(float64x2_t *)&v24[v14] = v25.val[0];
    *(float64x2_t *)&v23[v14] = v25.val[1];
    vst2q_f64(a2, v25);
    a2 += 4;
    v14 += 2;
  }
  while (v14 != 4);
}

double denormalizedPointForSize(double a1, double a2, double a3)
{
  return a1 * a3;
}

uint64_t denormalizedPolygonForSize(uint64_t result, uint64_t a2, float64x2_t a3, float64_t a4)
{
  uint64_t v4;

  v4 = 0;
  a3.f64[1] = a4;
  do
  {
    *(float64x2_t *)(a2 + v4) = vmulq_f64(a3, *(float64x2_t *)(result + v4));
    v4 += 16;
  }
  while (v4 != 64);
  return result;
}

double normalizedPointForSize(double result, double a2, double a3, double a4)
{
  if (a4 != 0.0 && a3 != 0.0)
    return result / a3;
  return result;
}

double denormalizedRectForSize(double a1, double a2, double a3, double a4, double a5)
{
  return a1 * a5;
}

double normalizedRectForSize(double result, double a2, double a3, double a4, double a5, double a6)
{
  if (a6 != 0.0 && a5 != 0.0)
    return result / a5;
  return result;
}

double normalizedSizeForSize(double result, double a2, double a3, double a4)
{
  if (a4 != 0.0 && a3 != 0.0)
    return result / a3;
  return result;
}

BOOL pointEqualsPointWithAccuracy(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v5;

  v5 = vabdd_f64(a1, a3) <= a5;
  return vabdd_f64(a2, a4) <= a5 && v5;
}

BOOL sizeEqualsSizeWithAccuracy(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v5;

  v5 = vabdd_f64(a1, a3) <= a5;
  return vabdd_f64(a2, a4) <= a5 && v5;
}

BOOL rectEqualsRectWithAccuracy(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17;
  _BOOL4 v20;

  v17 = vabdd_f64(a4, a8);
  if (vabdd_f64(a3, a7) > a9 || v17 > a9)
    return 0;
  v20 = vabdd_f64(a1, a5) <= a9;
  return vabdd_f64(a2, a6) <= a9 && v20;
}

uint64_t deviceHasModernNeuralEngine()
{
  if (qword_1ED0B44D8 != -1)
    dispatch_once(&qword_1ED0B44D8, &__block_literal_global_196);
  return byte_1ED0B4429;
}

void __deviceHasModernNeuralEngine_block_invoke()
{
  if (qword_1ED0B44D0 != -1)
    dispatch_once(&qword_1ED0B44D0, &__block_literal_global_195);
  if (_MergedGlobals_15)
    byte_1ED0B4429 = MGGetSInt64Answer() > 31;
}

id unicodeArrayToNSStringArray(int *a1, uint64_t a2)
{
  uint64_t v2;
  void *i;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _WORD v12[2];

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", a2);
  for (i = (void *)objc_claimAutoreleasedReturnValue(); v2; --v2)
  {
    v6 = *a1++;
    v5 = v6;
    if ((v6 - 0x10000) >> 20)
    {
      LOWORD(v7) = v5;
      v8 = 1;
    }
    else
    {
      v7 = ((v5 + 67043328) >> 10) - 10240;
      v12[1] = v5 & 0x3FF | 0xDC00;
      v8 = 2;
    }
    v12[0] = v7;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", v12, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(i, "addObject:", v9);

  }
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", i);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id lmConfig()
{
  if (qword_1ED0B44E8 != -1)
    dispatch_once(&qword_1ED0B44E8, &__block_literal_global_199);
  return (id)qword_1ED0B44E0;
}

void __lmConfig_block_invoke()
{
  uint64_t v0;
  void *v1;

  getLMConfig();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ED0B44E0;
  qword_1ED0B44E0 = v0;

}

id confidenceThresholds()
{
  if (qword_1ED0B44F8 != -1)
    dispatch_once(&qword_1ED0B44F8, &__block_literal_global_200);
  return (id)qword_1ED0B44F0;
}

void __confidenceThresholds_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  float v20;
  float v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  float v26;
  float v27;
  CRConfidenceThresholds *v28;
  double v29;
  double v30;
  CRConfidenceThresholds *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id obj;
  void *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  getConfidenceThresholds();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v0, "count"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  obj = v0;
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
  if (v40)
  {
    v38 = *(_QWORD *)v60;
    do
    {
      v1 = 0;
      do
      {
        if (*(_QWORD *)v60 != v38)
          objc_enumerationMutation(obj);
        v41 = v1;
        v2 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * v1);
        v3 = (void *)MEMORY[0x1E0C99E08];
        objc_msgSend(obj, "objectForKeyedSubscript:", v2, v38);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "dictionaryWithCapacity:", objc_msgSend(v4, "count"));
        v44 = (void *)objc_claimAutoreleasedReturnValue();

        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v49 = v2;
        objc_msgSend(obj, "objectForKeyedSubscript:", v2);
        v42 = (id)objc_claimAutoreleasedReturnValue();
        v45 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
        if (v45)
        {
          v43 = *(_QWORD *)v56;
          do
          {
            v5 = 0;
            do
            {
              if (*(_QWORD *)v56 != v43)
                objc_enumerationMutation(v42);
              v46 = v5;
              v6 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * v5);
              v7 = (void *)MEMORY[0x1E0C99E08];
              objc_msgSend(obj, "objectForKeyedSubscript:", v49);
              v8 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "objectForKeyedSubscript:", v6);
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "dictionaryWithCapacity:", objc_msgSend(v9, "count"));
              v50 = (void *)objc_claimAutoreleasedReturnValue();

              v53 = 0u;
              v54 = 0u;
              v51 = 0u;
              v52 = 0u;
              objc_msgSend(obj, "objectForKeyedSubscript:", v49);
              v10 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "objectForKeyedSubscript:", v6);
              v11 = (void *)objc_claimAutoreleasedReturnValue();

              v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
              if (v12)
              {
                v13 = v12;
                v47 = *(_QWORD *)v52;
                do
                {
                  for (i = 0; i != v13; ++i)
                  {
                    if (*(_QWORD *)v52 != v47)
                      objc_enumerationMutation(v11);
                    v15 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
                    objc_msgSend(obj, "objectForKeyedSubscript:", v49);
                    v16 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v16, "objectForKeyedSubscript:", v6);
                    v17 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v17, "objectForKeyedSubscript:", v15);
                    v18 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("medium"));
                    v19 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v19, "floatValue");
                    v21 = v20 / 100.0;

                    objc_msgSend(obj, "objectForKeyedSubscript:", v49);
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v22, "objectForKeyedSubscript:", v6);
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v23, "objectForKeyedSubscript:", v15);
                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("high"));
                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v25, "floatValue");
                    v27 = v26 / 100.0;

                    v28 = [CRConfidenceThresholds alloc];
                    *(float *)&v29 = v21;
                    *(float *)&v30 = v27;
                    v31 = -[CRConfidenceThresholds initWithMediumThreshold:highThreshold:](v28, "initWithMediumThreshold:highThreshold:", v29, v30);
                    objc_msgSend(v50, "setObject:forKeyedSubscript:", v31, v15);

                  }
                  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
                }
                while (v13);
              }

              v32 = (void *)objc_msgSend(v50, "copy");
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v6, "isEqualToString:", CFSTR("true")));
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v44, "setObject:forKeyedSubscript:", v32, v33);

              v5 = v46 + 1;
            }
            while (v46 + 1 != v45);
            v45 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
          }
          while (v45);
        }

        v34 = (void *)objc_msgSend(v44, "copy");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v49, "intValue"));
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "setObject:forKeyedSubscript:", v34, v35);

        v1 = v41 + 1;
      }
      while (v41 + 1 != v40);
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
    }
    while (v40);
  }

  v36 = objc_msgSend(v39, "copy");
  v37 = (void *)qword_1ED0B44F0;
  qword_1ED0B44F0 = v36;

}

id lineWrappingConfig()
{
  if (qword_1ED0B4508 != -1)
    dispatch_once(&qword_1ED0B4508, &__block_literal_global_209);
  return (id)qword_1ED0B4500;
}

void __lineWrappingConfig_block_invoke()
{
  uint64_t v0;
  void *v1;

  getLineWrappingConfig();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ED0B4500;
  qword_1ED0B4500 = v0;

}

id compressData(void *a1)
{
  id v1;
  size_t v2;
  uint8_t *v3;
  id v4;
  const uint8_t *v5;
  size_t v6;
  void *v7;

  v1 = a1;
  v2 = objc_msgSend(v1, "length") + 100;
  v3 = (uint8_t *)malloc_type_malloc(v2, 0x65F7223uLL);
  v4 = objc_retainAutorelease(v1);
  v5 = (const uint8_t *)objc_msgSend(v4, "bytes");
  v6 = objc_msgSend(v4, "length");

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v3, compression_encode_buffer(v3, v2, v5, v6, 0, COMPRESSION_LZFSE));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  free(v3);
  return v7;
}

id uncompressDataOfSize(void *a1, int64_t a2)
{
  id v3;
  uint8_t *v4;
  id v5;
  const uint8_t *v6;
  size_t v7;
  void *v8;

  if (a2 < 1)
  {
    v8 = 0;
  }
  else
  {
    v3 = a1;
    v4 = (uint8_t *)malloc_type_malloc(a2, 0xDC347E5DuLL);
    v5 = objc_retainAutorelease(v3);
    v6 = (const uint8_t *)objc_msgSend(v5, "bytes");
    v7 = objc_msgSend(v5, "length");

    v8 = 0;
    if (compression_decode_buffer(v4, a2, v6, v7, 0, COMPRESSION_LZFSE) == a2)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v4, a2);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    free(v4);
  }
  return v8;
}

uint64_t characterCount(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = objc_msgSend(v1, "length");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __characterCount_block_invoke;
  v5[3] = &unk_1E98D9D00;
  v5[4] = &v6;
  objc_msgSend(v1, "enumerateSubstringsInRange:options:usingBlock:", 0, v2, 2, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_1D50106D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __characterCount_block_invoke(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

double normalizeProbabilityForLength(uint64_t a1, double result)
{
  if (a1)
    return pow(result, 1.0 / (double)a1);
  return result;
}

double boundedAngle(double result)
{
  double v1;

  if (result <= 3.14159265)
  {
    if (result > -3.14159265)
      return result;
    v1 = 6.28318531;
  }
  else
  {
    v1 = -6.28318531;
  }
  return result + v1;
}

double weightedAverageAngleFromEuclideanSpace(double a1, double a2, double a3, double a4)
{
  __double2 v7;
  __double2 v8;

  v7 = __sincos_stret(a1);
  v8 = __sincos_stret(a2);
  return atan2(v8.__sinval * a4 + v7.__sinval * a3, v8.__cosval * a4 + v7.__cosval * a3);
}

double distanceFromPointToPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  if (a5 > 0.0 && a6 > 0.0)
  {
    a1 = a1 * a5;
    a2 = a2 * a6;
    a3 = a3 * a5;
    a4 = a4 * a6;
  }
  return sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
}

double squaredDistanceFromPointToPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  if (a5 > 0.0 && a6 > 0.0)
  {
    a1 = a1 * a5;
    a2 = a2 * a6;
    a3 = a3 * a5;
    a4 = a4 * a6;
  }
  return (a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3);
}

double squaredDistanceFromPointToLineDefinedByPoints(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;

  if (a7 > 0.0 && a8 > 0.0)
  {
    a3 = a3 * a7;
    a4 = a4 * a8;
    a5 = a5 * a7;
    a6 = a6 * a8;
  }
  v8 = a5 - a3;
  v9 = v8 * (a4 - a2) - (a3 - a1) * (a6 - a4);
  return v9 * v9 / (v8 * v8 + (a6 - a4) * (a6 - a4));
}

BOOL arePointsClockwise(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return (a3 - a1) * (a6 - a2) > (a4 - a2) * (a5 - a1);
}

uint64_t doesLineSegmentIntersectLineSegment(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if ((a5 - a1) * (a8 - a2) > (a6 - a2) * (a7 - a1) == (a5 - a3) * (a8 - a4) > (a6 - a4) * (a7 - a3))
    return 0;
  else
    return ((a3 - a1) * (a6 - a2) > (a4 - a2) * (a5 - a1)) ^ ((a3 - a1) * (a8 - a2) > (a4 - a2) * (a7 - a1));
}

double vectorMagnitude(double a1, double a2)
{
  return sqrt(a2 * a2 + a1 * a1);
}

double averageAngle(double a1, double a2)
{
  __double2 v3;
  __double2 v4;

  v3 = __sincos_stret(a1);
  v4 = __sincos_stret(a2);
  return atan2(v3.__sinval + v4.__sinval, v3.__cosval + v4.__cosval);
}

double weightedAverageAngle(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double result;
  double v6;

  v3 = a1 - a2;
  if (v3 <= 3.14159265)
  {
    if (v3 > -3.14159265)
      goto LABEL_6;
    v4 = 6.28318531;
  }
  else
  {
    v4 = -6.28318531;
  }
  v3 = v3 + v4;
LABEL_6:
  result = v3 * a3 + a2;
  if (result <= 3.14159265)
  {
    if (result > -3.14159265)
      return result;
    v6 = 6.28318531;
  }
  else
  {
    v6 = -6.28318531;
  }
  return result + v6;
}

double angleBetweenPoints(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v6 = *MEMORY[0x1E0C9D820];
  if (*MEMORY[0x1E0C9D820] > 0.0)
  {
    v7 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    if (v7 > 0.0)
    {
      a1 = a1 * v6;
      a2 = a2 * v7;
      a3 = a3 * v6;
      a4 = a4 * v7;
      a5 = a5 * v6;
      a6 = a6 * v7;
    }
  }
  v8 = sqrt((a4 - a6) * (a4 - a6) + (a3 - a5) * (a3 - a5));
  v9 = sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
  v10 = sqrt((a6 - a2) * (a6 - a2) + (a5 - a1) * (a5 - a1));
  return acos((v8 * v8 + v9 * v9 - v10 * v10) / (v8 * (v9 + v9)));
}

uint64_t CIImageCoordinateFromCGPoint(double a1, double a2, double a3, double a4)
{
  return objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithCGPoint:", a1 * a3, (1.0 - a2) * a4);
}

double applyHomography(void *a1, double a2, double a3)
{
  id v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  void *v12;
  float v13;
  double v14;
  void *v15;
  float v16;
  double v17;
  void *v18;
  float v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v28;
  void *v29;
  void *v30;

  v5 = a1;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "floatValue");
  v7 = v6;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "floatValue");
  v9 = a3 * v8 + a2 * v7;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 2);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "floatValue");
  v11 = v9 + v10;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "floatValue");
  v14 = v13;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 7);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "floatValue");
  v17 = a3 * v16 + a2 * v14;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 8);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "floatValue");
  v20 = v11 / (v17 + v19);
  objc_msgSend(v5, "objectAtIndexedSubscript:", 3);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "floatValue");
  objc_msgSend(v5, "objectAtIndexedSubscript:", 4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "floatValue");
  objc_msgSend(v5, "objectAtIndexedSubscript:", 5);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "floatValue");
  objc_msgSend(v5, "objectAtIndexedSubscript:", 6);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "floatValue");
  objc_msgSend(v5, "objectAtIndexedSubscript:", 7);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "floatValue");
  objc_msgSend(v5, "objectAtIndexedSubscript:", 8);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v26, "floatValue");
  return v20;
}

id computeHomography(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[10];

  v21[9] = *MEMORY[0x1E0C80C00];
  *(float32x2_t *)&v1 = computeHomographyMatrix(a1);
  v18 = v1;
  v19 = v2;
  v20 = v3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", *(double *)&v19);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v21[1] = v5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", *(double *)&v20);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v21[2] = v6;
  HIDWORD(v7) = DWORD1(v18);
  LODWORD(v7) = DWORD1(v18);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v21[3] = v8;
  HIDWORD(v9) = DWORD1(v19);
  LODWORD(v9) = DWORD1(v19);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v21[4] = v10;
  HIDWORD(v11) = DWORD1(v20);
  LODWORD(v11) = DWORD1(v20);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v21[5] = v12;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v18), DWORD2(v18))));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v21[6] = v13;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v19), DWORD2(v19))));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v21[7] = v14;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v20), DWORD2(v20))));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v21[8] = v15;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

float32x2_t computeHomographyMatrix(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  _BYTE *v7;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  _BYTE v12[576];
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;

  v1 = (float64x2_t *)MEMORY[0x1E0C80A78](a1);
  v2 = 0;
  v16 = *MEMORY[0x1E0C80C00];
  v4 = (double *)(v3 + 8);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = &v12[v2];
    *(_OWORD *)v7 = 0uLL;
    *((_QWORD *)v7 + 2) = 0;
    v8 = *v1++;
    *(float64x2_t *)(v7 + 24) = vnegq_f64(v8);
    *((_QWORD *)v7 + 5) = 0xBFF0000000000000;
    *((float64x2_t *)v7 + 3) = vmulq_n_f64(v8, v6);
    *((double *)v7 + 8) = v6;
    *(float64x2_t *)(v7 + 72) = v8;
    *(_OWORD *)(v7 + 88) = xmmword_1D513A880;
    *(_OWORD *)(v7 + 104) = 0uLL;
    v9 = -v5;
    *(float64x2_t *)(v7 + 120) = vmulq_n_f64(v8, v9);
    *((double *)v7 + 17) = v9;
    v2 += 144;
    v4 += 2;
  }
  while (v2 != 576);
  dgeqrf_NEWLAPACK();
  dorgqr_NEWLAPACK();
  *(_QWORD *)&v10.f64[0] = v13;
  v10.f64[1] = *((float64_t *)&v14 + 1);
  return vcvt_f32_f64(vmulq_n_f64(v10, 1.0 / v15));
}

double applyHomographyMatrix(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5)
{
  float v5;
  float v6;
  float32x4_t v7;

  v5 = a4;
  v6 = a5;
  v7 = vaddq_f32(a3, vmlaq_n_f32(vmulq_n_f32(a1, v5), a2, v6));
  if (v7.f32[2] != 0.0)
    return (float)(v7.f32[0] / v7.f32[2]);
  return a4;
}

double applyHomographyMatrixWithDownscale(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5, double a6)
{
  double v6;
  float v7;
  float v8;
  float32x4_t v9;

  v6 = a4 / a6;
  v7 = v6;
  v8 = a5 / a6;
  v9 = vaddq_f32(a3, vmlaq_n_f32(vmulq_n_f32(a1, v7), a2, v8));
  if (v9.f32[2] != 0.0)
    v6 = (float)(v9.f32[0] / v9.f32[2]);
  return v6 * a6;
}

uint64_t checkIsZeroMatrix(int32x4_t a1, int32x4_t a2, int8x16_t a3)
{
  uint8x8_t v3;

  v3 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32((float32x4_t)vextq_s8((int8x16_t)vzip1q_s32(a1, a1), (int8x16_t)vuzp1q_s32(a1, a2), 0xCuLL)), (int16x8_t)vceqzq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), a3, 8uLL)))));
  v3.i8[0] = vmaxv_u8(v3);
  return (*(float *)&a3.i32[2] == 0.0) & ~v3.i32[0];
}

uint64_t CRTextRecognition::CRCTLD::order::TarjansSCC::unfolded_strongconnect(CRTextRecognition::CRCTLD::order::TarjansSCC *this, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t i;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _DWORD *v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  void *v145;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  int v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  int v154;
  void *__p;
  char *v156;
  char *v157;

  v154 = a2;
  LODWORD(__p) = 0;
  v152 = 0u;
  v153 = 0u;
  v151 = 0u;
  std::deque<std::pair<int,int>>::emplace_back<int &,int>(&v151, &v154, &__p);
  v3 = *((_QWORD *)&v153 + 1);
  if (!*((_QWORD *)&v153 + 1))
    return std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v151);
  v4 = (uint64_t *)((char *)this + 160);
  do
  {
    while (1)
    {
      v5 = (((_QWORD)v152 - *((_QWORD *)&v151 + 1)) << 6) - 1;
      if ((_QWORD)v152 == *((_QWORD *)&v151 + 1))
        v5 = 0;
      v6 = v3 - 1;
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v151 + 1) + (((unint64_t)(v153 + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v153 + v6) & 0x1FF));
      *((_QWORD *)&v153 + 1) = v6;
      if ((unint64_t)(v5 - (v153 + v6)) >= 0x400)
      {
        operator delete(*(void **)(v152 - 8));
        *(_QWORD *)&v152 = v152 - 8;
      }
      v8 = HIDWORD(v7);
      if (!HIDWORD(v7))
      {
        v9 = (char *)*((_QWORD *)this + 4);
        v10 = (char *)*((_QWORD *)this + 3);
        v11 = v9 - v10;
        v12 = 4 * (int)v7;
        *(_DWORD *)(*((_QWORD *)this + 8) + v12) = *((_DWORD *)this + 2);
        *(_DWORD *)(*((_QWORD *)this + 11) + v12) = (*((_DWORD *)this + 2))++;
        if (v9 == v10)
          v13 = 0;
        else
          v13 = ((v9 - v10) << 7) - 1;
        v15 = *((_QWORD *)this + 6);
        v14 = *((_QWORD *)this + 7);
        v16 = v14 + v15;
        if (v13 != v14 + v15)
          goto LABEL_74;
        if (v15 < 0x400)
        {
          v29 = (char *)*((_QWORD *)this + 5);
          v30 = (char *)*((_QWORD *)this + 2);
          if (v11 >> 3 >= (unint64_t)((v29 - v30) >> 3))
          {
            v148 = v11 >> 3;
            if (v29 == v30)
              v33 = 1;
            else
              v33 = (v29 - v30) >> 2;
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v33);
            v147 = v35;
            v36 = operator new(0x1000uLL);
            v37 = &v34[8 * v148];
            v38 = &v34[8 * v147];
            if (v148 == v147)
            {
              v39 = 8 * v148;
              if (v11 < 1)
              {
                v55 = v36;
                v56 = v39 >> 2;
                if (v9 == v10)
                  v57 = 1;
                else
                  v57 = v56;
                v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v57);
                v37 = &v59[8 * (v57 >> 2)];
                v38 = &v59[8 * v58];
                if (v34)
                {
                  v60 = &v59[8 * v58];
                  operator delete(v34);
                  v38 = v60;
                }
                v34 = v59;
                v36 = v55;
              }
              else
              {
                v40 = v39 >> 3;
                if (v40 >= -1)
                  v41 = v40 + 1;
                else
                  v41 = v40 + 2;
                v37 -= 8 * (v41 >> 1);
              }
            }
            *(_QWORD *)v37 = v36;
            v61 = v37 + 8;
            for (i = *((_QWORD *)this + 4); i != *((_QWORD *)this + 3); i -= 8)
            {
              if (v37 == v34)
              {
                if (v61 >= v38)
                {
                  if (v38 == v34)
                    v67 = 1;
                  else
                    v67 = (v38 - v34) >> 2;
                  v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v67);
                  v70 = v68;
                  v37 = &v68[(2 * v67 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v71 = v61 - v34;
                  v42 = v61 == v34;
                  v61 = v37;
                  if (!v42)
                  {
                    v61 = &v37[v71 & 0xFFFFFFFFFFFFFFF8];
                    v72 = 8 * (v71 >> 3);
                    v73 = v37;
                    v74 = (uint64_t *)v34;
                    do
                    {
                      v75 = *v74++;
                      *(_QWORD *)v73 = v75;
                      v73 += 8;
                      v72 -= 8;
                    }
                    while (v72);
                  }
                  v38 = &v68[8 * v69];
                  if (v34)
                  {
                    v76 = v34;
                    v77 = &v70[8 * v69];
                    operator delete(v76);
                    v38 = v77;
                  }
                  v34 = v70;
                }
                else
                {
                  v63 = (v38 - v61) >> 3;
                  if (v63 >= -1)
                    v64 = v63 + 1;
                  else
                    v64 = v63 + 2;
                  v65 = v64 >> 1;
                  v37 = &v34[8 * (v64 >> 1)];
                  v66 = v34;
                  if (v61 != v34)
                  {
                    v149 = v38;
                    memmove(v37, v34, v61 - v34);
                    v38 = v149;
                    v66 = v61;
                  }
                  v61 = &v66[8 * v65];
                }
              }
              v78 = *(_QWORD *)(i - 8);
              *((_QWORD *)v37 - 1) = v78;
              v37 -= 8;
            }
            v79 = (void *)*((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = v34;
            *((_QWORD *)this + 3) = v37;
            *((_QWORD *)this + 4) = v61;
            *((_QWORD *)this + 5) = v38;
            v4 = (uint64_t *)((char *)this + 160);
            if (v79)
              operator delete(v79);
            goto LABEL_73;
          }
          v31 = operator new(0x1000uLL);
          v32 = v31;
          if (v29 != v9)
          {
            *(_QWORD *)v9 = v31;
            *((_QWORD *)this + 4) += 8;
            v4 = (uint64_t *)((char *)this + 160);
LABEL_73:
            v10 = (char *)*((_QWORD *)this + 3);
            v14 = *((_QWORD *)this + 7);
            v16 = *((_QWORD *)this + 6) + v14;
LABEL_74:
            *(_DWORD *)(*(_QWORD *)&v10[(v16 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v16 & 0x3FF)) = v7;
            *((_QWORD *)this + 7) = v14 + 1;
            *(_QWORD *)(*((_QWORD *)this + 14) + (((unint64_t)(int)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
            goto LABEL_75;
          }
          if (v10 == v30)
          {
            if (v9 == v10)
              v114 = 1;
            else
              v114 = (v29 - v10) >> 2;
            v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v114);
            v10 = &v115[(2 * v114 + 6) & 0xFFFFFFFFFFFFFFF8];
            v117 = (uint64_t *)*((_QWORD *)this + 3);
            v118 = v10;
            v119 = *((_QWORD *)this + 4) - (_QWORD)v117;
            v4 = (uint64_t *)((char *)this + 160);
            if (v119)
            {
              v118 = &v10[v119 & 0xFFFFFFFFFFFFFFF8];
              v120 = 8 * (v119 >> 3);
              v121 = v10;
              do
              {
                v122 = *v117++;
                *(_QWORD *)v121 = v122;
                v121 += 8;
                v120 -= 8;
              }
              while (v120);
            }
            v123 = (void *)*((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = v115;
            *((_QWORD *)this + 3) = v10;
            *((_QWORD *)this + 4) = v118;
            *((_QWORD *)this + 5) = &v115[8 * v116];
            if (v123)
            {
              operator delete(v123);
              v10 = (char *)*((_QWORD *)this + 3);
            }
          }
          else
          {
            v4 = (uint64_t *)((char *)this + 160);
          }
          *((_QWORD *)v10 - 1) = v32;
          v124 = (char *)*((_QWORD *)this + 3);
          v125 = (char *)*((_QWORD *)this + 4);
          *((_QWORD *)this + 3) = v124 - 8;
          v126 = *((_QWORD *)v124 - 1);
          *((_QWORD *)this + 3) = v124;
          if (v125 == *((char **)this + 5))
          {
            v127 = *((_QWORD *)this + 2);
            v128 = (uint64_t)&v124[-v127];
            if ((unint64_t)v124 <= v127)
            {
              v134 = (uint64_t)&v125[-v127];
              v42 = v134 == 0;
              v135 = v134 >> 2;
              if (v42)
                v136 = 1;
              else
                v136 = v135;
              v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v136);
              v139 = &v137[8 * (v136 >> 2)];
              v140 = (uint64_t *)*((_QWORD *)this + 3);
              v125 = v139;
              v141 = *((_QWORD *)this + 4) - (_QWORD)v140;
              v4 = (uint64_t *)((char *)this + 160);
              if (v141)
              {
                v125 = &v139[v141 & 0xFFFFFFFFFFFFFFF8];
                v142 = 8 * (v141 >> 3);
                v143 = &v137[8 * (v136 >> 2)];
                do
                {
                  v144 = *v140++;
                  *(_QWORD *)v143 = v144;
                  v143 += 8;
                  v142 -= 8;
                }
                while (v142);
              }
              v145 = (void *)*((_QWORD *)this + 2);
              *((_QWORD *)this + 2) = v137;
              *((_QWORD *)this + 3) = v139;
              *((_QWORD *)this + 4) = v125;
              *((_QWORD *)this + 5) = &v137[8 * v138];
              if (v145)
              {
                operator delete(v145);
                v125 = (char *)*((_QWORD *)this + 4);
              }
            }
            else
            {
              v129 = v128 >> 3;
              v23 = v128 >> 3 < -1;
              v130 = (v128 >> 3) + 2;
              if (v23)
                v131 = v130;
              else
                v131 = v129 + 1;
              v132 = &v124[-8 * (v131 >> 1)];
              v133 = v125 - v124;
              if (v125 != v124)
              {
                memmove(&v124[-8 * (v131 >> 1)], v124, v125 - v124);
                v124 = (char *)*((_QWORD *)this + 3);
              }
              v125 = &v132[v133];
              *((_QWORD *)this + 3) = &v124[-8 * (v131 >> 1)];
              *((_QWORD *)this + 4) = &v132[v133];
              v4 = (uint64_t *)((char *)this + 160);
            }
          }
          *(_QWORD *)v125 = v126;
        }
        else
        {
          *((_QWORD *)this + 6) = v15 - 1024;
          v19 = *(_QWORD *)v10;
          v17 = v10 + 8;
          v18 = v19;
          *((_QWORD *)this + 3) = v17;
          if (v9 == *((char **)this + 5))
          {
            v20 = *((_QWORD *)this + 2);
            v21 = (uint64_t)&v17[-v20];
            if ((unint64_t)v17 <= v20)
            {
              v43 = (uint64_t)&v9[-v20];
              v42 = v43 == 0;
              v44 = v43 >> 2;
              if (v42)
                v45 = 1;
              else
                v45 = v44;
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v45);
              v48 = &v46[8 * (v45 >> 2)];
              v49 = (uint64_t *)*((_QWORD *)this + 3);
              v9 = v48;
              v50 = *((_QWORD *)this + 4) - (_QWORD)v49;
              v4 = (uint64_t *)((char *)this + 160);
              if (v50)
              {
                v9 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
                v51 = 8 * (v50 >> 3);
                v52 = &v46[8 * (v45 >> 2)];
                do
                {
                  v53 = *v49++;
                  *(_QWORD *)v52 = v53;
                  v52 += 8;
                  v51 -= 8;
                }
                while (v51);
              }
              v54 = (void *)*((_QWORD *)this + 2);
              *((_QWORD *)this + 2) = v46;
              *((_QWORD *)this + 3) = v48;
              *((_QWORD *)this + 4) = v9;
              *((_QWORD *)this + 5) = &v46[8 * v47];
              if (v54)
              {
                operator delete(v54);
                v9 = (char *)*((_QWORD *)this + 4);
              }
            }
            else
            {
              v22 = v21 >> 3;
              v23 = v21 >> 3 < -1;
              v24 = (v21 >> 3) + 2;
              if (v23)
                v25 = v24;
              else
                v25 = v22 + 1;
              v26 = &v17[-8 * (v25 >> 1)];
              v27 = v9 - v17;
              if (v9 != v17)
              {
                memmove(&v17[-8 * (v25 >> 1)], v17, v9 - v17);
                v26 = &v17[-8 * (v25 >> 1)];
                v9 = (char *)*((_QWORD *)this + 3);
              }
              v28 = &v9[-8 * (v25 >> 1)];
              v9 = &v26[v27];
              *((_QWORD *)this + 3) = v28;
              *((_QWORD *)this + 4) = &v26[v27];
              v4 = (uint64_t *)((char *)this + 160);
            }
          }
          *(_QWORD *)v9 = v18;
        }
        *((_QWORD *)this + 4) += 8;
        goto LABEL_73;
      }
LABEL_75:
      v80 = *(_QWORD *)this;
      if (*(_QWORD *)this > v7 >> 32)
        break;
LABEL_84:
      if (*(_DWORD *)(*((_QWORD *)this + 11) + 4 * (int)v7) == *(_DWORD *)(*((_QWORD *)this + 8) + 4 * (int)v7))
      {
        __p = 0;
        v156 = 0;
        v157 = 0;
        do
        {
          v87 = *((_QWORD *)this + 7) + *((_QWORD *)this + 6) - 1;
          v88 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + ((v87 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v87 & 0x3FF));
          v89 = v156;
          if (v156 >= v157)
          {
            v91 = (char *)__p;
            v92 = (v156 - (_BYTE *)__p) >> 2;
            v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v94 = v157 - (_BYTE *)__p;
            if ((v157 - (_BYTE *)__p) >> 1 > v93)
              v93 = v94 >> 1;
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
              v95 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v95 = v93;
            if (v95)
            {
              v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v157, v95);
              v91 = (char *)__p;
              v89 = v156;
            }
            else
            {
              v96 = 0;
            }
            v97 = &v96[4 * v92];
            *(_DWORD *)v97 = v88;
            v90 = v97 + 4;
            while (v89 != v91)
            {
              v98 = *((_DWORD *)v89 - 1);
              v89 -= 4;
              *((_DWORD *)v97 - 1) = v98;
              v97 -= 4;
            }
            __p = v97;
            v156 = v90;
            v157 = &v96[4 * v95];
            if (v91)
              operator delete(v91);
          }
          else
          {
            *(_DWORD *)v156 = v88;
            v90 = v89 + 4;
          }
          v100 = *((_QWORD *)this + 3);
          v99 = *((_QWORD *)this + 4);
          v156 = v90;
          if (v99 == v100)
            v101 = 0;
          else
            v101 = ((v99 - v100) << 7) - 1;
          v102 = *((_QWORD *)this + 6);
          v103 = *((_QWORD *)this + 7) - 1;
          *((_QWORD *)this + 7) = v103;
          if ((unint64_t)(v101 - (v103 + v102)) >= 0x800)
          {
            operator delete(*(void **)(v99 - 8));
            *((_QWORD *)this + 4) -= 8;
          }
          *(_QWORD *)(*((_QWORD *)this + 14) + (((unint64_t)v88 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v88);
        }
        while (v88 != (_DWORD)v7);
        v104 = *((_QWORD *)this + 21);
        if (v104 >= *((_QWORD *)this + 22))
        {
          v105 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(v4, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)v4, (uint64_t)&__p);
          v105 = v104 + 24;
        }
        *((_QWORD *)this + 21) = v105;
        if (__p)
        {
          v156 = (char *)__p;
          operator delete(__p);
        }
      }
      v3 = *((_QWORD *)&v153 + 1);
      if (*((_QWORD *)&v153 + 1))
      {
        v106 = *(int *)(*(_QWORD *)(*((_QWORD *)&v151 + 1)
                                  + (((unint64_t)(*((_QWORD *)&v153 + 1) + v153 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((_QWORD *)&v153 + 1) + v153 - 1) & 0x1FF));
        v107 = *((_QWORD *)this + 11);
        v108 = *(_DWORD *)(v107 + 4 * (int)v7);
        if (v108 >= *(_DWORD *)(v107 + 4 * v106))
          v108 = *(_DWORD *)(v107 + 4 * v106);
        *(_DWORD *)(v107 + 4 * v106) = v108;
        if (v3)
          continue;
      }
      return std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v151);
    }
    v81 = v7 >> 32;
    v82 = *(_QWORD *)(*((_QWORD *)this + 17) + 24 * (int)v7);
    while (1)
    {
      v83 = v81 >> 6;
      v84 = 1 << v81;
      if ((*(_QWORD *)(v82 + 8 * (v81 >> 6)) & (1 << v81)) != 0)
        break;
LABEL_83:
      LODWORD(v8) = v8 + 1;
      v81 = (int)v8;
      if (v80 <= (int)v8)
        goto LABEL_84;
    }
    v85 = *(_DWORD *)(*((_QWORD *)this + 8) + 4 * v81);
    if ((v85 & 0x80000000) == 0)
    {
      if ((*(_QWORD *)(*((_QWORD *)this + 14) + 8 * v83) & v84) != 0)
      {
        v86 = *((_QWORD *)this + 11);
        if (v85 >= *(_DWORD *)(v86 + 4 * (int)v7))
          v85 = *(_DWORD *)(v86 + 4 * (int)v7);
        *(_DWORD *)(v86 + 4 * (int)v7) = v85;
      }
      goto LABEL_83;
    }
    v109 = *((_QWORD *)&v151 + 1);
    LODWORD(__p) = v8;
    if ((_QWORD)v152 == *((_QWORD *)&v151 + 1))
      v110 = 0;
    else
      v110 = (((_QWORD)v152 - *((_QWORD *)&v151 + 1)) << 6) - 1;
    v111 = *((_QWORD *)&v153 + 1);
    v112 = *((_QWORD *)&v153 + 1) + v153;
    if (v110 == *((_QWORD *)&v153 + 1) + (_QWORD)v153)
    {
      std::deque<std::pair<int,int>>::__add_back_capacity(&v151);
      v111 = *((_QWORD *)&v153 + 1);
      v109 = *((_QWORD *)&v151 + 1);
      v112 = v153 + *((_QWORD *)&v153 + 1);
    }
    v113 = (_DWORD *)(*(_QWORD *)(v109 + ((v112 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v112 & 0x1FF));
    *v113 = v7;
    v113[1] = v8 + 1;
    *((_QWORD *)&v153 + 1) = v111 + 1;
    v150 = 0;
    std::deque<std::pair<int,int>>::emplace_back<int &,int>(&v151, &__p, &v150);
    v3 = *((_QWORD *)&v153 + 1);
  }
  while (*((_QWORD *)&v153 + 1));
  return std::deque<std::pair<int,int>>::~deque[abi:ne180100](&v151);
}

void sub_1D5011A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;

  operator delete(v24);
  if (v23)
    operator delete(v23);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(uint64_t a1, int a2, void *a3, float a4, float a5, float a6, float a7)
{
  id v13;

  v13 = a3;
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v13;
  *(float *)(a1 + 16) = a6;
  *(float *)(a1 + 20) = a7;
  *(float *)(a1 + 24) = a4;
  *(float *)(a1 + 28) = a5;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a5;
  *(double *)(a1 + 56) = a6;
  *(double *)(a1 + 64) = a4;
  *(double *)(a1 + 72) = a7;
  *(double *)(a1 + 80) = a5;
  *(double *)(a1 + 88) = a7;
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

{
  id v13;

  v13 = a3;
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v13;
  *(float *)(a1 + 16) = a6;
  *(float *)(a1 + 20) = a7;
  *(float *)(a1 + 24) = a4;
  *(float *)(a1 + 28) = a5;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a5;
  *(double *)(a1 + 56) = a6;
  *(double *)(a1 + 64) = a4;
  *(double *)(a1 + 72) = a7;
  *(double *)(a1 + 80) = a5;
  *(double *)(a1 + 88) = a7;
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, int a6, void *a7)
{
  id v13;
  double v14;
  double v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v13 = a7;
  *(_DWORD *)a1 = a6;
  *(_QWORD *)(a1 + 8) = v13;
  *(_OWORD *)(a1 + 32) = *a2;
  *(_OWORD *)(a1 + 48) = *a3;
  *(_OWORD *)(a1 + 64) = *a4;
  *(_OWORD *)(a1 + 80) = *a5;
  v14 = *(double *)(a1 + 40);
  v15 = *(double *)(a1 + 48);
  if (*(double *)(a1 + 56) < v14)
    v14 = *(double *)(a1 + 56);
  v16 = v14;
  v17 = *(double *)(a1 + 64);
  v18 = *(double *)(a1 + 72);
  if (v17 >= *(double *)(a1 + 32))
    v19 = *(double *)(a1 + 32);
  else
    v19 = *(double *)(a1 + 64);
  v20 = *(double *)(a1 + 80);
  v21 = *(double *)(a1 + 88);
  if (v18 >= v21)
    v22 = *(double *)(a1 + 72);
  else
    v22 = *(double *)(a1 + 88);
  v23 = v22;
  *(float *)(a1 + 16) = v16;
  *(float *)(a1 + 20) = v23;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (v15 < v20)
    v15 = v20;
  v25 = v15;
  v24 = v19;
  *(float *)(a1 + 24) = v24;
  *(float *)(a1 + 28) = v25;
  v26 = 0.0;
  if (v21 != v18)
  {
    v28 = v20 - v17;
    if (v28 == 0.0)
      v28 = 1.0;
    v27 = v21 - v18;
    v26 = atanf(v27 / v28);
  }
  *(float *)(a1 + 96) = v26;
  return a1;
}

float CRTextRecognition::CRCTLD::CTLDRegion::height(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return *((float *)this + 5) - *((float *)this + 4);
}

float CRTextRecognition::CRCTLD::CTLDRegion::width(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return *((float *)this + 7) - *((float *)this + 6);
}

float CRTextRecognition::CRCTLD::CTLDRegion::area(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return (float)(*((float *)this + 7) - *((float *)this + 6)) * (float)(*((float *)this + 5) - *((float *)this + 4));
}

double CRTextRecognition::CRCTLD::CTLDRegion::center(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  return (float)(*((float *)this + 6) + *((float *)this + 7)) * 0.5;
}

float CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea(CRTextRecognition::CRCTLD::CTLDRegion *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  float v2;
  float v3;
  float result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v2 = *((float *)a2 + 6);
  v3 = *((float *)this + 7);
  result = 0.0;
  if (v2 < v3)
  {
    v5 = *((float *)a2 + 7);
    v6 = *((float *)this + 6);
    if (v5 > v6)
    {
      v7 = *((float *)a2 + 4);
      v8 = *((float *)this + 5);
      if (v7 < v8)
      {
        v9 = *((float *)a2 + 5);
        v10 = *((float *)this + 4);
        if (v9 > v10)
        {
          if (v6 >= v2)
            v11 = *((float *)this + 6);
          else
            v11 = *((float *)a2 + 6);
          if (v10 >= v7)
            v12 = *((float *)this + 4);
          else
            v12 = *((float *)a2 + 4);
          if (v5 < v3)
            v3 = *((float *)a2 + 7);
          if (v9 >= v8)
            v13 = *((float *)this + 5);
          else
            v13 = *((float *)a2 + 5);
          return (float)(v3 - v11) * (float)(v13 - v12);
        }
      }
    }
  }
  return result;
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::intersects(CRTextRecognition::CRCTLD::CTLDRegion *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  return *((float *)a2 + 6) < *((float *)this + 7)
      && *((float *)a2 + 7) > *((float *)this + 6)
      && *((float *)a2 + 4) < *((float *)this + 5)
      && *((float *)a2 + 5) > *((float *)this + 4);
}

float CRTextRecognition::CRCTLD::CTLDRegion::rotate(CRTextRecognition::CRCTLD::CTLDRegion *this, float a2)
{
  CGPoint v3;

  v3.x = (float)(*((float *)this + 6) + *((float *)this + 7)) * 0.5;
  v3.y = (float)(*((float *)this + 4) + *((float *)this + 5)) * 0.5;
  return CRTextRecognition::CRCTLD::CTLDRegion::rotate(this, a2, v3);
}

float CRTextRecognition::CRCTLD::CTLDRegion::rotate(CRTextRecognition::CRCTLD::CTLDRegion *this, float a2, CGPoint a3)
{
  double y;
  double x;
  __float2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  double v27;
  float v28;
  float v29;
  float result;

  y = a3.y;
  x = a3.x;
  v7 = __sincosf_stret(a2);
  v8 = *((double *)this + 4) - x;
  v9 = *((double *)this + 5) - y;
  v10 = x + v8 * v7.__cosval - v9 * v7.__sinval;
  v11 = y + v9 * v7.__cosval + v8 * v7.__sinval;
  *((double *)this + 4) = v10;
  *((double *)this + 5) = v11;
  v12 = *((double *)this + 6) - x;
  v13 = *((double *)this + 7) - y;
  v14 = x + v12 * v7.__cosval - v13 * v7.__sinval;
  v15 = y + v13 * v7.__cosval + v12 * v7.__sinval;
  *((double *)this + 6) = v14;
  *((double *)this + 7) = v15;
  v16 = *((double *)this + 8) - x;
  v17 = *((double *)this + 9) - y;
  v18 = x + v16 * v7.__cosval - v17 * v7.__sinval;
  v19 = y + v17 * v7.__cosval + v16 * v7.__sinval;
  *((double *)this + 8) = v18;
  *((double *)this + 9) = v19;
  v20 = *((double *)this + 10) - x;
  v21 = *((double *)this + 11) - y;
  v22 = x + v20 * v7.__cosval - v21 * v7.__sinval;
  v23 = y + v21 * v7.__cosval + v20 * v7.__sinval;
  *((double *)this + 10) = v22;
  *((double *)this + 11) = v23;
  if (v18 >= v10)
    v24 = v10;
  else
    v24 = v18;
  v25 = v24;
  if (v15 < v11)
    v11 = v15;
  v26 = v11;
  if (v14 >= v22)
    v27 = v14;
  else
    v27 = x + v20 * v7.__cosval - v21 * v7.__sinval;
  v28 = v27;
  *((float *)this + 6) = v25;
  *((float *)this + 7) = v28;
  if (v19 >= v23)
    v23 = v19;
  v29 = v23;
  *((float *)this + 4) = v26;
  *((float *)this + 5) = v29;
  result = *((float *)this + 24) + a2;
  *((float *)this + 24) = result;
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::updateBoundingBox(uint64_t this, float a2, float a3, float a4, float a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  *(float *)(this + 24) = a2;
  *(float *)(this + 28) = a3;
  v5 = a2;
  v6 = *(double *)(this + 32);
  v7 = *(double *)(this + 40);
  if (v6 < v5)
    v6 = v5;
  if (v7 < a4)
    v7 = a4;
  *(double *)(this + 32) = v6;
  *(double *)(this + 40) = v7;
  v8 = a3;
  v9 = *(double *)(this + 48);
  v10 = *(double *)(this + 56);
  if (v9 > v8)
    v9 = v8;
  if (v10 < a4)
    v10 = a4;
  *(float *)(this + 16) = a4;
  *(float *)(this + 20) = a5;
  *(double *)(this + 48) = v9;
  *(double *)(this + 56) = v10;
  if (*(double *)(this + 64) >= v5)
    v5 = *(double *)(this + 64);
  v11 = a5;
  if (*(double *)(this + 72) <= a5)
    v12 = *(double *)(this + 72);
  else
    v12 = a5;
  *(double *)(this + 64) = v5;
  *(double *)(this + 72) = v12;
  v13 = *(double *)(this + 80);
  if (v13 > v8)
    v13 = v8;
  if (*(double *)(this + 88) <= v11)
    v14 = *(double *)(this + 88);
  else
    v14 = v11;
  *(double *)(this + 80) = v13;
  *(double *)(this + 88) = v14;
  return this;
}

void CRTextRecognition::CRCTLD::CTLDRegion::splitRegionIntoSubRectangles(float64x2_t *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  int v5;
  float64x2_t v6;
  float64x2_t v7;
  float v8;
  int v9;
  int v10;
  float64x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float64x2_t v14;
  int v15;
  float64x2_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  _QWORD v41[5];
  CGPoint v42;

  v5 = 0;
  v6 = vsubq_f64(this[3], this[2]);
  v7 = vsubq_f64(this[5], this[4]);
  v8 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v7, v7).f64[1]), v7.f64[0], v7.f64[0]));
  v9 = (int)(float)(v8 / a2);
  if (v9 >= 15)
    v9 = 15;
  if (v9 <= 2)
    v10 = 2;
  else
    v10 = v9;
  v11 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v10), 0);
  v12 = vcvt_f32_f64(vdivq_f64(v6, v11));
  v13 = vcvt_f32_f64(vdivq_f64(v7, v11));
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  do
  {
    v14 = this[2];
    v15 = v5 + 1;
    v39 = vaddq_f64(v14, vcvtq_f64_f32(vmul_n_f32(v12, (float)(v5 + 1))));
    v40 = vaddq_f64(v14, vcvtq_f64_f32(vmul_n_f32(v12, (float)v5)));
    v16 = this[4];
    v37 = vaddq_f64(v16, vcvtq_f64_f32(vmul_n_f32(v13, (float)(v5 + 1))));
    v38 = vaddq_f64(v16, vcvtq_f64_f32(vmul_n_f32(v13, (float)v5)));
    v17 = a3[1];
    v18 = a3[2];
    if (v17 >= v18)
    {
      v20 = (uint64_t)(v17 - *a3) >> 7;
      if ((unint64_t)(v20 + 1) >> 57)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v21 = v18 - *a3;
      v22 = v21 >> 6;
      if (v21 >> 6 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFF80)
        v23 = 0x1FFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      v41[4] = a3 + 2;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a3 + 2), v23);
      else
        v24 = 0;
      v25 = (uint64_t)&v24[128 * v20];
      v41[0] = v24;
      v41[1] = v25;
      v41[3] = &v24[128 * v23];
      CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(v25, &v40, &v39, &v38, &v37, LODWORD(this->f64[0]), 0);
      v41[2] = v25 + 128;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a3, v41);
      v19 = a3[1];
      std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v41);
    }
    else
    {
      v19 = CRTextRecognition::CRCTLD::CTLDRegion::CTLDRegion(v17, &v40, &v39, &v38, &v37, LODWORD(this->f64[0]), 0)
          + 128;
      a3[1] = v19;
    }
    a3[1] = v19;
    v42.x = (float)(*(float *)(v19 - 104) + *(float *)(v19 - 100)) * 0.5;
    v42.y = (float)(*(float *)(v19 - 112) + *(float *)(v19 - 108)) * 0.5;
    CRTextRecognition::CRCTLD::CTLDRegion::rotate((CRTextRecognition::CRCTLD::CTLDRegion *)(v19 - 128), -*(float *)this[6].f64, v42);
    if (v15 != 1)
    {
      v26 = *a3;
      v27 = a3[1] - *a3;
      v28 = (v27 << 25) - 0x100000000;
      v29 = *a3 + (v28 >> 25);
      v31 = *(float *)(v29 + 16);
      v30 = (float *)(v29 + 16);
      v32 = v31;
      v33 = (v27 << 25) - 0x200000000;
      v34 = *(float *)(*a3 + (v33 >> 25) + 16);
      if (v31 >= v34)
      {
        v34 = *(float *)(v26 + (v33 >> 32 << 7) + 20);
        if (v32 <= v34)
          goto LABEL_25;
LABEL_24:
        *v30 = v34;
        goto LABEL_25;
      }
      v35 = v26 + (v28 >> 32 << 7);
      v36 = *(float *)(v35 + 20);
      v30 = (float *)(v35 + 20);
      if (v36 < v34)
        goto LABEL_24;
    }
LABEL_25:
    v5 = v15;
  }
  while (v15 != v10);
}

void sub_1D5012208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::containsPoint(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2)
{
  double y;

  if (a2->x >= *((float *)this + 6) && a2->x <= *((float *)this + 7) && (y = a2->y, y >= *((float *)this + 4)))
    return y <= *((float *)this + 5);
  else
    return 0;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::segmentIntersectsRegion(float *a1, CGPoint *a2)
{
  double x;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double y;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double *v15;
  BOOL v19;
  double *v20;
  char *v21;
  uint64_t v22;
  BOOL v23;

  x = a2[1].x;
  v3 = a2->x;
  if (x >= a2->x)
    v4 = a2->x;
  else
    v4 = a2[1].x;
  v5 = a1[7];
  if (v4 > v5)
    return 0;
  v6 = v3 >= x ? a2->x : a2[1].x;
  v7 = a1[6];
  if (v6 < v7)
    return 0;
  y = a2[1].y;
  v10 = a2->y;
  v11 = y >= v10 ? a2->y : a2[1].y;
  v12 = a1[5];
  if (v11 > v12)
    return 0;
  v13 = v10 >= y ? a2->y : a2[1].y;
  v14 = a1[4];
  if (v13 < v14)
    return 0;
  v19 = v10 > v12 || v3 > v5 || v3 < v7 || v10 < v14;
  if (!v19 || x <= v5 && x >= v7 && y <= v12 && y >= v14)
    return 1;
  v20 = (double *)operator new(0x80uLL);
  v21 = (char *)v20;
  v22 = 0;
  *v20 = v7;
  v20[1] = v14;
  v20[2] = v5;
  v20[3] = v14;
  v20[4] = v7;
  v20[5] = v14;
  v20[6] = v7;
  v20[7] = v12;
  v20[8] = v5;
  v20[9] = v14;
  v20[10] = v5;
  v20[11] = v12;
  v20[12] = v7;
  v20[13] = v12;
  v20[14] = v5;
  v20[15] = v12;
  do
  {
    v20 = (double *)CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersect((_BOOL8)v20, a2, (CGPoint *)&v21[v22]);
    v15 = v20;
    if ((v20 & 1) != 0)
      break;
    v23 = v22 == 96;
    v22 += 32;
  }
  while (!v23);
  operator delete(v21);
  return (uint64_t)v15;
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersect(_BOOL8 a1, CGPoint *a2, CGPoint *a3)
{
  const CGPoint *v3;
  double x;
  double y;
  double v6;
  double v7;
  double v8;
  float v9;
  int v10;
  const CGPoint *v11;
  double v12;
  double v13;
  float v14;
  int v15;
  double v16;
  float v17;
  int v18;
  float v19;
  int v20;
  BOOL v21;
  _BOOL8 result;

  v3 = a2 + 1;
  x = a2[1].x;
  y = a2[1].y;
  v6 = a2->y;
  v7 = a3->y;
  v8 = x - a2->x;
  v9 = (y - v6) * (a3->x - x) - v8 * (v7 - y);
  v10 = 2 * (v9 < 0.0);
  if (v9 > 0.0)
    v10 = 1;
  v11 = a3 + 1;
  v12 = a3[1].x;
  v13 = a3[1].y;
  v14 = (y - v6) * (v12 - x) - v8 * (v13 - y);
  if (v14 > 0.0)
    v15 = 1;
  else
    v15 = 2 * (v14 < 0.0);
  v16 = v12 - a3->x;
  v17 = (v13 - v7) * (a2->x - v12) - v16 * (v6 - v13);
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = 2 * (v17 < 0.0);
  v19 = (v13 - v7) * (x - v12) - v16 * (y - v13);
  if (v19 > 0.0)
    v20 = 1;
  else
    v20 = 2 * (v19 < 0.0);
  v21 = v10 == v15 || v18 == v20;
  result = 1;
  if (v21
    && (v10
     || !(a1 = CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1, a2, a3, a2 + 1)))&& (v15|| !(a1 = CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1, a2, v11, v3)))&& (v18|| !(a1 = CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1, a3, a2, v11)))&& (v20|| !CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment((CRTextRecognition::CRCTLD::CTLDRegion *)a1,
           a3,
           v3,
           v11)))
  {
    return 0;
  }
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOrientation(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2, const CGPoint *a3, const CGPoint *a4)
{
  float v4;

  v4 = (a3->y - a2->y) * (a4->x - a3->x) - (a3->x - a2->x) * (a4->y - a3->y);
  if (v4 > 0.0)
    return 1;
  else
    return 2 * (v4 < 0.0);
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::segmentsIntersectionOnSegment(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2, const CGPoint *a3, const CGPoint *a4)
{
  double x;
  double v5;
  double v6;
  double y;
  double v8;
  double v9;
  double v10;

  x = a3->x;
  v5 = a2->x;
  if (a2->x >= a4->x)
    v6 = a2->x;
  else
    v6 = a4->x;
  if (x > v6)
    return 0;
  if (a4->x < v5)
    v5 = a4->x;
  if (x < v5)
    return 0;
  y = a3->y;
  v8 = a2->y;
  v9 = a4->y;
  v10 = v8 >= v9 ? a2->y : a4->y;
  if (y > v10)
    return 0;
  if (v9 < v8)
    v8 = a4->y;
  return y >= v8;
}

float CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(float a1, uint64_t a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  float v6;
  double v7;
  float v8;

  v3 = a1;
  v4 = *a3;
  if (*a3 >= v3)
    return a3[1];
  v5 = a3[2];
  if (v5 <= v3)
    return a3[3];
  v6 = v5 - v4;
  if (v6 <= 0.0)
  {
    return a3[1];
  }
  else
  {
    v7 = a3[1];
    v8 = a3[3] - v7;
    return v7 + (v3 - v4) / v6 * v8;
  }
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(uint64_t a1, double *a2, double *a3)
{
  double v5;
  float v6;
  double v7;
  float v8;
  double v9;
  double v10;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;

  v5 = *a2;
  if (*a2 < *a3)
    v5 = *a3;
  v6 = v5;
  v7 = a3[2];
  if (v7 >= a2[2])
    v7 = a2[2];
  v8 = v7;
  if (v6 <= v8)
  {
    v12 = CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v6, a1, a2);
    if (v12 >= CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v6, v13, a3))
      return 0;
    v15 = CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v8, v14, a2);
    return v15 < CRTextRecognition::CRCTLD::CTLDRegion::yPointOnSegment(v8, v16, a3);
  }
  else
  {
    v9 = a2[1];
    if (v9 < a2[3])
      v9 = a2[3];
    v10 = a3[3];
    if (v10 >= a3[1])
      v10 = a3[1];
    return v9 < v10;
  }
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::pointIsAboveCenterline(CRTextRecognition::CRCTLD::CTLDRegion *this, const CGPoint *a2)
{
  double v2;
  double v3;
  float v4;

  v2 = (*((double *)this + 6) + *((double *)this + 10)) * 0.5;
  v3 = (*((double *)this + 7) + *((double *)this + 11)) * 0.5;
  v4 = (v3 - (*((double *)this + 9) + *((double *)this + 5)) * 0.5) * (a2->x - v2)
     - (v2 - (*((double *)this + 8) + *((double *)this + 4)) * 0.5) * (a2->y - v3);
  return v4 > 0.0;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::operator<(uint64_t a1, uint64_t a2)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;
  _BOOL8 IsAbove;
  __int128 v20;
  __int128 v21;
  _BOOL8 v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  _BOOL8 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BOOL8 v42;
  __int128 v43;
  __int128 v44;
  float IntersectionArea;
  float v46;
  BOOL IsAboveCenterline;
  float v48;
  _BOOL4 v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  CGPoint v62;
  __int128 v63;

  v4 = (float *)(a1 + 16);
  v5 = *(float *)(a1 + 16);
  v6 = *(float *)(a2 + 16);
  if (v5 == v6
    && *(float *)(a1 + 24) == *(float *)(a2 + 24)
    && *(float *)(a1 + 20) == *(float *)(a2 + 20)
    && *(float *)(a1 + 28) == *(float *)(a2 + 28))
  {
    return 0;
  }
  v7 = *(float *)(a1 + 20);
  if (v7 < v6)
    return 1;
  v9 = *(float *)(a2 + 20);
  if (v5 > v9)
    return 0;
  if (v9 >= v7)
    v10 = *(float *)(a1 + 20);
  else
    v10 = *(float *)(a2 + 20);
  if (v5 < v6)
    v4 = (float *)(a2 + 16);
  v11 = v10 - *v4;
  if (v11 <= 0.0)
  {
    if (*(float *)(a1 + 28) < *(float *)(a2 + 24))
      return 1;
    if (*(float *)(a1 + 24) > *(float *)(a2 + 28))
      return 0;
  }
  v12 = v7 - v5;
  if ((float)(v7 - v5) == 0.0)
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  v13 = v9 - v6;
  if ((float)(v9 - v6) == 0.0)
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  v14 = *(float *)(a1 + 28) - *(float *)(a1 + 24);
  if (v14 == 0.0)
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  v16 = *(float *)(a2 + 24);
  v15 = *(float *)(a2 + 28);
  if ((float)(v15 - v16) == 0.0)
    return *(float *)(a1 + 24) < *(float *)(a2 + 24);
  v53 = v15 - v16;
  v55 = *(float *)(a2 + 24);
  v51 = *(float *)(a2 + 28);
  v52 = *(float *)(a1 + 24);
  v50 = *(float *)(a1 + 28);
  v17 = *(_OWORD *)(a1 + 80);
  v62 = *(CGPoint *)(a1 + 64);
  v63 = v17;
  v18 = *(_OWORD *)(a2 + 48);
  v60 = *(_OWORD *)(a2 + 32);
  v61 = v18;
  IsAbove = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(a1, &v62.x, (double *)&v60);
  if (IsAbove)
    return 1;
  v20 = *(_OWORD *)(a2 + 80);
  v62 = *(CGPoint *)(a2 + 64);
  v63 = v20;
  v21 = *(_OWORD *)(a1 + 48);
  v60 = *(_OWORD *)(a1 + 32);
  v61 = v21;
  v22 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(IsAbove, &v62.x, (double *)&v60);
  if (v22)
    return 0;
  if (v13 >= v12)
    v23 = v7 - v5;
  else
    v23 = v9 - v6;
  v24 = v11 / v23;
  v25 = v50;
  if (v51 < v50)
    v25 = v51;
  if (v52 >= v55)
    v26 = (float *)(a1 + 24);
  else
    v26 = (float *)(a2 + 24);
  v27 = v25 - *v26;
  v28 = v53;
  if (v53 >= v14)
    v28 = v14;
  v29 = v27 / v28;
  if (v29 > 0.5 && v29 >= v24)
  {
    v31 = (__int128 *)(a1 + 64);
    v32 = (__int128 *)(a1 + 80);
    v33 = (__int128 *)(a2 + 64);
    v34 = (__int128 *)(a2 + 80);
    v35 = *(_OWORD *)(a1 + 48);
    v62 = *(CGPoint *)(a1 + 32);
    v63 = v35;
    v36 = *(_OWORD *)(a2 + 48);
    v60 = *(_OWORD *)(a2 + 32);
    v61 = v36;
    v37 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v22, &v62.x, (double *)&v60);
    if (v37)
    {
      v38 = *v32;
      v58 = *v31;
      v59 = v38;
      v39 = *v34;
      v56 = *v33;
      v57 = v39;
      v37 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v37, (double *)&v58, (double *)&v56);
      if (v37)
        return 1;
    }
    v40 = *(_OWORD *)(a2 + 48);
    v62 = *(CGPoint *)(a2 + 32);
    v63 = v40;
    v41 = *(_OWORD *)(a1 + 48);
    v60 = *(_OWORD *)(a1 + 32);
    v61 = v41;
    v42 = CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v37, &v62.x, (double *)&v60);
    if (v42)
    {
      v43 = *v34;
      v58 = *v33;
      v59 = v43;
      v44 = *v32;
      v56 = *v31;
      v57 = v44;
      if (CRTextRecognition::CRCTLD::CTLDRegion::segmentIsAbove(v42, (double *)&v58, (double *)&v56))
        return 0;
    }
  }
  IntersectionArea = CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea((CRTextRecognition::CRCTLD::CTLDRegion *)a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)a2);
  if ((float)(IntersectionArea / (float)(v13 * v53)) >= 0.95)
  {
    v54 = v24;
    v46 = IntersectionArea;
    v62.x = (float)(v51 + v55) * 0.5;
    v62.y = (float)(v6 + v9) * 0.5;
    IsAboveCenterline = CRTextRecognition::CRCTLD::CTLDRegion::pointIsAboveCenterline((CRTextRecognition::CRCTLD::CTLDRegion *)a1, &v62);
    IntersectionArea = v46;
    v24 = v54;
    if (IsAboveCenterline)
      return 0;
  }
  if ((float)(IntersectionArea / (float)(v12 * v14)) >= 0.95)
  {
    v62.x = (float)(v50 + v52) * 0.5;
    v62.y = (float)(v5 + v7) * 0.5;
    if (CRTextRecognition::CRCTLD::CTLDRegion::pointIsAboveCenterline((CRTextRecognition::CRCTLD::CTLDRegion *)a2, &v62))
    {
      return 1;
    }
  }
  if (v24 <= 0.5)
  {
    v48 = v52;
    if (v5 < v6)
      return 1;
    goto LABEL_54;
  }
  v48 = v52;
  if (v52 < v55)
    return 1;
  result = v55 >= v52;
  if (v5 >= v6 && v55 >= v52)
  {
LABEL_54:
    result = v6 >= v5;
    if (v6 < v5 || v48 < v55)
      return result;
    if (v55 >= v48)
    {
      v49 = v50 < v51;
      if (v7 < v9)
        v49 = 1;
      if (v7 <= v9)
        return v49;
      else
        return v7 < v9;
    }
    return 0;
  }
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CTLDRegion::addMember(CRTextRecognition::CRCTLD::CTLDRegion *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  double v15;
  double v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;

  v4 = *((_QWORD *)this + 13);
  v6 = *((_QWORD *)this + 14);
  v5 = (uint64_t *)((char *)this + 104);
  v7 = v6 - v4;
  if (v6 == v4)
  {
    *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
    v17 = *((_DWORD *)a2 + 24);
  }
  else
  {
    v8 = *((float *)a2 + 6);
    v9 = *((float *)this + 7);
    if (v8 >= *((float *)this + 6))
      v8 = *((float *)this + 6);
    *((float *)this + 6) = v8;
    v10 = *((float *)a2 + 7);
    if (v9 >= v10)
      v10 = v9;
    *((float *)this + 7) = v10;
    v11 = *((float *)a2 + 4);
    v12 = *((float *)this + 5);
    if (v11 >= *((float *)this + 4))
      v11 = *((float *)this + 4);
    *((float *)this + 4) = v11;
    v13 = *((float *)a2 + 5);
    if (v12 >= v13)
      v13 = v12;
    *((float *)this + 5) = v13;
    v14 = v8;
    v15 = v11;
    *((double *)this + 4) = v14;
    *((double *)this + 5) = v15;
    v16 = v10;
    *((double *)this + 6) = v16;
    *((double *)this + 7) = v15;
    *((double *)this + 8) = v14;
    *((double *)this + 9) = v13;
    *((double *)this + 10) = v16;
    *((double *)this + 11) = v13;
    v17 = 0;
  }
  v18 = (char *)this + 120;
  v19 = *((_QWORD *)this + 15);
  *((_DWORD *)this + 24) = v17;
  if (v6 >= v19)
  {
    v22 = v7 >> 7;
    v23 = (v7 >> 7) + 1;
    if (v23 >> 57)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v24 = v19 - v4;
    if (v24 >> 6 > v23)
      v23 = v24 >> 6;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFF80)
      v25 = 0x1FFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    v31 = (char *)this + 120;
    if (v25)
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)v18, v25);
    else
      v26 = 0;
    v27 = v26;
    v28 = &v26[128 * v22];
    v30 = &v26[128 * v25];
    std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v28, (uint64_t)a2);
    v29 = v28 + 128;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(v5, &v27);
    v21 = *((_QWORD *)this + 14);
    result = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    result = (uint64_t)std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v6, (uint64_t)a2);
    v21 = v6 + 128;
    *((_QWORD *)this + 14) = v6 + 128;
  }
  *((_QWORD *)this + 14) = v21;
  return result;
}

void sub_1D5012D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 112) = v11;
  _Unwind_Resume(exception_object);
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::isFlat(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v2 = *((_QWORD *)this + 13);
  v1 = *((_QWORD *)this + 14);
  if (v2 == v1)
    return 1;
  v3 = v2 + 128;
  do
  {
    v4 = *(_QWORD *)(v3 - 24);
    v5 = *(_QWORD *)(v3 - 16);
    result = v4 == v5;
    v7 = v4 != v5 || v3 == v1;
    v3 += 128;
  }
  while (!v7);
  return result;
}

BOOL CRTextRecognition::CRCTLD::CTLDRegion::isOrdered(CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 14);
  if (v1 == v2)
    return 1;
  while (1)
  {
    v3 = v1 + 128;
    if (v1 + 128 == v2)
      break;
    v4 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v1 + 128, v1);
    v1 = v3;
    if (v4)
      return v3 == v2;
  }
  v3 = v2;
  return v3 == v2;
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getCharacterSize(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  uint64_t v4;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  float *v44;
  float *v45;
  unint64_t v46;
  float *v47;
  unint64_t v48;
  float *v49;
  float *v50;
  int v51;
  float v52;
  float *v53;
  float *v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float *v79;
  float v80;
  float v81;
  float *v82;
  float *v83;
  float *v84;
  float v85;
  float v86;
  float *__p;
  float *v89;
  float *v90;
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 1.0;
  v90 = 0;
  v4 = (char *)v3 - (char *)v2;
  if (v4 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  __p = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90, v4 >> 7);
  v89 = __p;
  v90 = &__p[v6];
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = v7[6];
      v10 = v7[7];
      v11 = v7[4];
      v12 = v7[5];
      v13 = v9 - v11;
      v14 = v10 - v12;
      v15 = sqrtf((float)(v14 * v14) + (float)(v13 * v13));
      v16 = v7[10];
      v17 = v7[11];
      v18 = v7[8];
      v19 = v7[9];
      v20 = v16 - v18;
      v21 = v17 - v19;
      v22 = (float)(v15 + sqrtf((float)(v21 * v21) + (float)(v20 * v20))) * 0.5;
      *(float *)&v11 = v11 - v18;
      *(float *)&v12 = v12 - v19;
      *(float *)&v9 = v9 - v16;
      *(float *)&v10 = v10 - v17;
      v23 = (float)(sqrtf((float)(*(float *)&v10 * *(float *)&v10) + (float)(*(float *)&v9 * *(float *)&v9))
                  + sqrtf((float)(*(float *)&v12 * *(float *)&v12) + (float)(*(float *)&v11 * *(float *)&v11)))
          * 0.5;
      if (v23 >= v22)
        v24 = v22;
      else
        v24 = v23;
      if (v24 <= 0.0)
      {
        CROSLogForCategory(0);
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v28 = *((_QWORD *)v7 + 4);
          v29 = *((_QWORD *)v7 + 5);
          v30 = *((_QWORD *)v7 + 6);
          v31 = *((_QWORD *)v7 + 7);
          v32 = *((_QWORD *)v7 + 10);
          v33 = *((_QWORD *)v7 + 11);
          v34 = *((_QWORD *)v7 + 8);
          v35 = *((_QWORD *)v7 + 9);
          *(_DWORD *)buf = 134219776;
          v92 = v28;
          v93 = 2048;
          v94 = v29;
          v95 = 2048;
          v96 = v30;
          v97 = 2048;
          v98 = v31;
          v99 = 2048;
          v100 = v32;
          v101 = 2048;
          v102 = v33;
          v103 = 2048;
          v104 = v34;
          v105 = 2048;
          v106 = v35;
          _os_log_impl(&dword_1D4FB8000, v27, OS_LOG_TYPE_DEBUG, "Got collapsed region: [tl=(%f, %f), tr=(%f, %f), br=(%f, %f), bl=(%f, %f)]", buf, 0x52u);
        }

      }
      else
      {
        v25 = v89;
        if (v89 >= v90)
        {
          v36 = __p;
          v37 = v89 - __p;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v39 = (char *)v90 - (char *)__p;
          if (((char *)v90 - (char *)__p) >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90, v40);
            v36 = __p;
            v25 = v89;
          }
          else
          {
            v41 = 0;
          }
          v42 = (float *)&v41[4 * v37];
          *v42 = v24;
          v26 = v42 + 1;
          while (v25 != v36)
          {
            v43 = *((_DWORD *)v25-- - 1);
            *((_DWORD *)v42-- - 1) = v43;
          }
          __p = v42;
          v90 = (float *)&v41[4 * v40];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *v89 = v24;
          v26 = v89 + 1;
        }
        v89 = v26;
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
  v44 = __p;
  v45 = v89;
  if (__p == v89)
  {
    v76 = 1.0;
    if (!__p)
      return v76;
  }
  else
  {
    v46 = (unint64_t)(v89 - __p) >> 1;
    v47 = &__p[v46];
    if (v47 != v89)
    {
      do
      {
        v48 = v45 - v44;
        if (v48 < 2)
          break;
        if (v48 == 3)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v44, v44 + 1, v45 - 1);
          break;
        }
        if (v48 == 2)
        {
          v77 = *(v45 - 1);
          v78 = *v44;
          if (v77 < *v44)
          {
            *v44 = v77;
            *(v45 - 1) = v78;
          }
          break;
        }
        if ((char *)v45 - (char *)v44 <= 31)
        {
          while (v44 != v45 - 1)
          {
            v79 = v44++;
            if (v79 != v45 && v44 != v45)
            {
              v80 = *v79;
              v81 = *v79;
              v82 = v44;
              v83 = v79;
              v84 = v44;
              do
              {
                v85 = *v84++;
                v86 = v85;
                if (v85 < v81)
                {
                  v81 = v86;
                  v83 = v82;
                }
                v82 = v84;
              }
              while (v84 != v45);
              if (v83 != v79)
              {
                *v79 = *v83;
                *v83 = v80;
              }
            }
          }
          break;
        }
        v49 = &v44[v48 >> 1];
        v50 = v45 - 1;
        v51 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v44, v49, v45 - 1);
        v52 = *v44;
        if (*v44 >= *v49)
        {
          v53 = v45 - 1;
          while (--v53 != v44)
          {
            if (*v53 < *v49)
            {
              *v44 = *v53;
              *v53 = v52;
              ++v51;
              goto LABEL_41;
            }
          }
          v65 = v44 + 1;
          if (v52 >= *v50)
          {
            while (v65 != v50)
            {
              v66 = *v65;
              if (v52 < *v65)
              {
                *v65++ = *v50;
                *v50 = v66;
                goto LABEL_73;
              }
              ++v65;
            }
            break;
          }
LABEL_73:
          if (v65 == v50)
            break;
          while (1)
          {
            v70 = *v44;
            do
            {
              v71 = *v65++;
              v72 = v71;
            }
            while (v70 >= v71);
            v73 = v65 - 1;
            do
            {
              v74 = *--v50;
              v75 = v74;
            }
            while (v70 < v74);
            if (v73 >= v50)
              break;
            *v73 = v75;
            *v50 = v72;
          }
          v44 = v65 - 1;
          if (v73 > v47)
            break;
        }
        else
        {
          v53 = v45 - 1;
LABEL_41:
          v54 = v44 + 1;
          if (v44 + 1 >= v53)
          {
            v59 = v44 + 1;
          }
          else
          {
            v55 = v44 + 1;
            while (1)
            {
              v56 = *v49;
              do
              {
                v57 = *v55++;
                v58 = v57;
              }
              while (v57 < v56);
              v59 = v55 - 1;
              do
              {
                v60 = *--v53;
                v61 = v60;
              }
              while (v60 >= v56);
              if (v59 >= v53)
                break;
              *v59 = v61;
              *v53 = v58;
              ++v51;
              if (v59 == v49)
                v49 = v53;
            }
          }
          if (v59 != v49)
          {
            v62 = *v59;
            if (*v49 < *v59)
            {
              *v59 = *v49;
              *v49 = v62;
              ++v51;
            }
          }
          if (v59 == v47)
            break;
          if (!v51)
          {
            if (v59 <= v47)
            {
              v67 = v59 + 1;
              while (v67 != v45)
              {
                v69 = *(v67 - 1);
                v68 = *v67++;
                if (v68 < v69)
                  goto LABEL_57;
              }
            }
            else
            {
              while (v54 != v59)
              {
                v64 = *(v54 - 1);
                v63 = *v54++;
                if (v63 < v64)
                  goto LABEL_57;
              }
            }
            break;
          }
LABEL_57:
          if (v59 <= v47)
            v44 = v59 + 1;
          else
            v45 = v59;
        }
      }
      while (v45 != v47);
      v44 = __p;
    }
    v76 = v44[v46];
  }
  operator delete(v44);
  return v76;
}

void sub_1D50133A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getRegionQuality(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2)
{
  float v4;

  v4 = powf(*((float *)a2 + 5) - *((float *)a2 + 4), *((float *)this + 10));
  return v4 * powf(*((float *)a2 + 7) - *((float *)a2 + 6), *((float *)this + 11));
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getInitialNodeWithObstacles@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _QWORD *v11;
  char *v12;
  _BYTE *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  uint64_t v30;
  char v31;
  float v32;
  float result;

  v5 = *a2;
  v6 = a2[1];
  v8 = *(float *)(*a2 + 24);
  v7 = *(float *)(*a2 + 28);
  v9 = *(float *)(*a2 + 16);
  v10 = *(float *)(*a2 + 20);
  *(_QWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 16) = v9;
  *(float *)(a3 + 20) = v10;
  *(float *)(a3 + 24) = v8;
  *(float *)(a3 + 28) = v7;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(double *)(a3 + 32) = v8;
  *(double *)(a3 + 40) = v9;
  *(double *)(a3 + 48) = v7;
  *(double *)(a3 + 56) = v9;
  *(double *)(a3 + 64) = v8;
  *(double *)(a3 + 72) = v10;
  *(double *)(a3 + 80) = v7;
  *(double *)(a3 + 88) = v10;
  *(_DWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  v11 = (_QWORD *)(a3 + 128);
  *(_DWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_DWORD *)a3 = *(_DWORD *)v5;
  if (v5 != v6)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(float *)(v5 + 24);
      v15 = *(float *)(a3 + 28);
      if (v14 >= *(float *)(a3 + 24))
        v14 = *(float *)(a3 + 24);
      *(float *)(a3 + 24) = v14;
      v16 = *(float *)(v5 + 28);
      if (v15 >= v16)
        v16 = v15;
      *(float *)(a3 + 28) = v16;
      v17 = *(float *)(v5 + 16);
      v18 = *(float *)(a3 + 20);
      if (v17 >= *(float *)(a3 + 16))
        v17 = *(float *)(a3 + 16);
      *(float *)(a3 + 16) = v17;
      v19 = *(float *)(v5 + 20);
      if (v18 >= v19)
        v19 = v18;
      *(float *)(a3 + 20) = v19;
      v20 = *(_QWORD *)(a3 + 144);
      if ((unint64_t)v13 >= v20)
      {
        v22 = (v13 - v12) >> 4;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v24 = v20 - (_QWORD)v12;
        if (v24 >> 3 > v23)
          v23 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v25);
        v28 = &v26[16 * v22];
        *(_QWORD *)v28 = v5;
        v28[8] = 0;
        v29 = (_BYTE *)*v11;
        v12 = v28;
        if (v13 != (_BYTE *)*v11)
        {
          do
          {
            v30 = *((_QWORD *)v13 - 2);
            v13 -= 16;
            v31 = v13[8];
            *((_QWORD *)v12 - 2) = v30;
            v12 -= 16;
            v12[8] = v31;
          }
          while (v13 != v29);
          v13 = v29;
        }
        v21 = v28 + 16;
        *(_QWORD *)(a3 + 128) = v12;
        *(_QWORD *)(a3 + 136) = v28 + 16;
        *(_QWORD *)(a3 + 144) = &v26[16 * v27];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v13 = v5;
        v13[8] = 0;
        v21 = v13 + 16;
      }
      *(_QWORD *)(a3 + 136) = v21;
      v5 += 128;
      v13 = v21;
    }
    while (v5 != v6);
    v9 = *(float *)(a3 + 16);
    v10 = *(float *)(a3 + 20);
    v8 = *(float *)(a3 + 24);
    v7 = *(float *)(a3 + 28);
  }
  v32 = powf(v10 - v9, *(float *)(a1 + 40));
  result = v32 * powf(v7 - v8, *(float *)(a1 + 44));
  *(float *)(a3 + 152) = result;
  return result;
}

void sub_1D5013610(_Unwind_Exception *a1)
{
  CRTextRecognition::CRCTLD::CTLDNode *v1;

  CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode(v1);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode(CRTextRecognition::CRCTLD::CTLDNode *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 104);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v3);

}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findWhitespaceRegions(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v6;
  unint64_t v8;
  void **v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  id v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  id v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  uint64_t isWhitespaceCandidate;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  const CRTextRecognition::CRCTLD::CTLDRegion *v63;
  void **v64;
  void **v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void **v97[3];
  int v98;
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  void *v106[3];
  void *v107[3];
  int v108;
  char v109[8];
  id v110;
  uint64_t v111;
  void *v112;
  void *v113;
  int64x2_t v114;
  uint64_t v115;
  int v116;
  int64x2_t *v117;
  id v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  int v124;
  __int128 v125;
  uint64_t v126;
  void *__p[2];
  uint64_t v128;
  float v129;

  v6 = a1;
  v115 = 0;
  v114 = 0uLL;
  v8 = *(int *)(a1 + 4);
  v116 = *(_DWORD *)(a1 + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve(a3, v8);
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getInitialNodeWithObstacles(v6, a2, (uint64_t)v109);
  v92 = a3;
  CRTextRecognition::CRCTLD::CTLDPriorityQueue::push(&v114, (CRTextRecognition::CRCTLD::CTLDNode *)v109);
  v9 = v107;
  v91 = (uint64_t)(a3 + 2);
  v93 = v6;
  do
  {
    v10 = v114.i64[0];
    if (v114.i64[1] == v114.i64[0])
      break;
    v98 = *(_DWORD *)v114.i64[0];
    v99 = *(id *)(v114.i64[0] + 8);
    v11 = *(_OWORD *)(v10 + 32);
    v100 = *(_OWORD *)(v10 + 16);
    v101 = v11;
    v12 = *(_OWORD *)(v10 + 48);
    v13 = *(_OWORD *)(v10 + 64);
    v14 = *(_OWORD *)(v10 + 80);
    v105 = *(_DWORD *)(v10 + 96);
    v103 = v13;
    v104 = v14;
    v102 = v12;
    memset(v106, 0, sizeof(v106));
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v106, *(_QWORD *)(v10 + 104), *(_QWORD *)(v10 + 112), (uint64_t)(*(_QWORD *)(v10 + 112) - *(_QWORD *)(v10 + 104)) >> 7);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    std::vector<CRTextRecognition::CRCTLD::CTLDObstacle>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDObstacle*,CRTextRecognition::CRCTLD::CTLDObstacle*>(v9, *(const void **)(v10 + 128), *(_QWORD *)(v10 + 136), (uint64_t)(*(_QWORD *)(v10 + 136) - *(_QWORD *)(v10 + 128)) >> 4);
    v108 = *(_DWORD *)(v10 + 152);
    v15 = v114.i64[1];
    v16 = v114.i64[0];
    if (v114.i64[1] - v114.i64[0] >= 161)
    {
      v94 = v114.i64[1];
      v17 = 0;
      LODWORD(v117) = *(_DWORD *)v114.i64[0];
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((v114.i64[1] - v114.i64[0]) >> 5);
      v19 = *(void **)(v114.i64[0] + 8);
      *(_QWORD *)(v114.i64[0] + 8) = 0;
      v20 = *(_OWORD *)(v16 + 32);
      v119 = *(_OWORD *)(v16 + 16);
      v120 = v20;
      v22 = *(_OWORD *)(v16 + 64);
      v21 = *(_OWORD *)(v16 + 80);
      v23 = *(_OWORD *)(v16 + 48);
      v124 = *(_DWORD *)(v16 + 96);
      v122 = v22;
      v123 = v21;
      v121 = v23;
      v125 = *(_OWORD *)(v16 + 104);
      v24 = *(_QWORD *)(v16 + 120);
      v118 = v19;
      v126 = v24;
      *(_QWORD *)(v16 + 104) = 0;
      *(_QWORD *)(v16 + 112) = 0;
      *(_QWORD *)(v16 + 120) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v16 + 128);
      v128 = *(_QWORD *)(v16 + 144);
      *(_QWORD *)(v16 + 128) = 0;
      *(_QWORD *)(v16 + 136) = 0;
      *(_QWORD *)(v16 + 144) = 0;
      v25 = v16;
      v129 = *(float *)(v16 + 152);
      do
      {
        v26 = v25;
        v27 = v17 + 1;
        v25 += 160 * (v17 + 1);
        v28 = 2 * v17;
        v17 = (2 * v17) | 1;
        v29 = v28 + 2;
        if (v29 < v18 && *(float *)(v26 + 160 * v27 + 152) < *(float *)(v25 + 312))
        {
          v25 += 160;
          v17 = v29;
        }
        *(_DWORD *)v26 = *(_DWORD *)v25;
        v30 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)(v25 + 8) = 0;
        v31 = *(void **)(v26 + 8);
        *(_QWORD *)(v26 + 8) = v30;

        v32 = *(_OWORD *)(v25 + 32);
        *(_OWORD *)(v26 + 16) = *(_OWORD *)(v25 + 16);
        *(_OWORD *)(v26 + 32) = v32;
        v33 = *(_OWORD *)(v25 + 48);
        v34 = *(_OWORD *)(v25 + 64);
        v35 = *(_OWORD *)(v25 + 80);
        *(_DWORD *)(v26 + 96) = *(_DWORD *)(v25 + 96);
        *(_OWORD *)(v26 + 64) = v34;
        *(_OWORD *)(v26 + 80) = v35;
        *(_OWORD *)(v26 + 48) = v33;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v26 + 104));
        *(_OWORD *)(v26 + 104) = *(_OWORD *)(v25 + 104);
        *(_QWORD *)(v26 + 120) = *(_QWORD *)(v25 + 120);
        *(_QWORD *)(v25 + 104) = 0;
        *(_QWORD *)(v25 + 112) = 0;
        *(_QWORD *)(v25 + 120) = 0;
        std::vector<int>::__move_assign(v26 + 128, (__n128 *)(v25 + 128));
        *(_DWORD *)(v26 + 152) = *(_DWORD *)(v25 + 152);
      }
      while (v17 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
      v36 = (_OWORD *)(v25 + 16);
      if (v94 - 160 == v25)
      {
        *(_DWORD *)v25 = (_DWORD)v117;
        v51 = v118;
        v118 = 0;
        v52 = *(void **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = v51;

        v53 = v120;
        *v36 = v119;
        *(_OWORD *)(v25 + 32) = v53;
        v54 = v121;
        v55 = v122;
        v56 = v123;
        *(_DWORD *)(v25 + 96) = v124;
        *(_OWORD *)(v25 + 64) = v55;
        *(_OWORD *)(v25 + 80) = v56;
        *(_OWORD *)(v25 + 48) = v54;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v25 + 104));
        *(_OWORD *)(v25 + 104) = v125;
        *(_QWORD *)(v25 + 120) = v126;
        v125 = 0uLL;
        v126 = 0;
        v57 = *(void **)(v25 + 128);
        v6 = v93;
        if (v57)
        {
          *(_QWORD *)(v25 + 136) = v57;
          operator delete(v57);
          *(_QWORD *)(v25 + 128) = 0;
          *(_QWORD *)(v25 + 136) = 0;
          *(_QWORD *)(v25 + 144) = 0;
        }
        *(_OWORD *)(v25 + 128) = *(_OWORD *)__p;
        *(_QWORD *)(v25 + 144) = v128;
        __p[0] = 0;
        __p[1] = 0;
        v128 = 0;
        *(float *)(v25 + 152) = v129;
      }
      else
      {
        *(_DWORD *)v25 = *(_DWORD *)(v94 - 160);
        v37 = *(_QWORD *)(v94 - 152);
        *(_QWORD *)(v94 - 152) = 0;
        v38 = *(void **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = v37;

        v39 = *(_OWORD *)(v94 - 128);
        *v36 = *(_OWORD *)(v94 - 144);
        *(_OWORD *)(v25 + 32) = v39;
        v40 = *(_OWORD *)(v94 - 112);
        v41 = *(_OWORD *)(v94 - 96);
        v42 = *(_OWORD *)(v94 - 80);
        *(_DWORD *)(v25 + 96) = *(_DWORD *)(v94 - 64);
        *(_OWORD *)(v25 + 64) = v41;
        *(_OWORD *)(v25 + 80) = v42;
        *(_OWORD *)(v25 + 48) = v40;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v25 + 104));
        v43 = (_QWORD *)(v94 - 56);
        *(_OWORD *)(v25 + 104) = *(_OWORD *)(v94 - 56);
        *(_QWORD *)(v25 + 120) = *(_QWORD *)(v94 - 40);
        *v43 = 0;
        v43[1] = 0;
        v43[2] = 0;
        std::vector<int>::__move_assign(v25 + 128, (__n128 *)(v94 - 32));
        *(_DWORD *)(v25 + 152) = *(_DWORD *)(v94 - 8);
        *(_DWORD *)(v94 - 160) = (_DWORD)v117;
        v44 = v118;
        v118 = 0;
        v45 = *(void **)(v94 - 152);
        *(_QWORD *)(v94 - 152) = v44;

        v46 = v120;
        *(_OWORD *)(v94 - 144) = v119;
        *(_OWORD *)(v94 - 128) = v46;
        v47 = v121;
        v48 = v122;
        v49 = v123;
        *(_DWORD *)(v94 - 64) = v124;
        *(_OWORD *)(v94 - 96) = v48;
        *(_OWORD *)(v94 - 80) = v49;
        *(_OWORD *)(v94 - 112) = v47;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v94 - 56));
        *(_OWORD *)v43 = v125;
        *(_QWORD *)(v94 - 40) = v126;
        v125 = 0uLL;
        v126 = 0;
        v50 = *(void **)(v94 - 32);
        v6 = v93;
        if (v50)
        {
          *(_QWORD *)(v94 - 24) = v50;
          operator delete(v50);
        }
        *(_OWORD *)(v94 - 32) = *(_OWORD *)__p;
        *(_QWORD *)(v94 - 16) = v128;
        __p[0] = 0;
        __p[1] = 0;
        v128 = 0;
        *(float *)(v94 - 8) = v129;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDNode *>>(v16, v25 + 160, 0xCCCCCCCCCCCCCCCDLL * ((v25 + 160 - v16) >> 5));
      }
      v9 = v107;
      v97[0] = (void **)&v125;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v97);

      v15 = v114.i64[1];
    }
    v58 = v15 - 160;
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](v15 - 160);
    v114.i64[1] = v58;
    isWhitespaceCandidate = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::isWhitespaceCandidate((float *)v6, (CRTextRecognition::CRCTLD::CTLDRegion *)&v98);
    if ((_DWORD)isWhitespaceCandidate)
    {
      if ((float)(*((float *)&v100 + 1) - *(float *)&v100) >= (float)(*(float *)(v6 + 16) * a4)
        && (float)(*((float *)&v100 + 3) - *((float *)&v100 + 2)) >= (float)(*(float *)(v6 + 12) * a4))
      {
        v60 = v92[1];
        if (v60 >= v92[2])
        {
          v61 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(v92, (uint64_t)&v98);
          v62 = v92;
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>(v91, v92[1], (uint64_t)&v98);
          v61 = v60 + 128;
          v62 = v92;
          v92[1] = v61;
        }
        v62[1] = v61;
        if (*(int *)(v6 + 4) <= (unint64_t)((v61 - *v62) >> 7))
        {
          v71 = 1;
          goto LABEL_31;
        }
        v73 = v114.i64[1];
        v72 = v114.i64[0];
        if (v114.i64[0] != v114.i64[1])
        {
          v74 = v9;
          v75 = v61 - 128;
          do
          {
            if (*(float *)(v61 - 104) < *(float *)(v72 + 28)
              && *(float *)(v61 - 100) > *(float *)(v72 + 24)
              && *(float *)(v61 - 112) < *(float *)(v72 + 20)
              && *(float *)(v61 - 108) > *(float *)(v72 + 16))
            {
              v77 = *(_QWORD *)(v72 + 136);
              v76 = *(_QWORD *)(v72 + 144);
              if (v77 >= v76)
              {
                v79 = *(_QWORD *)(v72 + 128);
                v80 = (uint64_t)(v77 - v79) >> 4;
                v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 60)
                  std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                v82 = v76 - v79;
                if (v82 >> 3 > v81)
                  v81 = v82 >> 3;
                if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
                  v83 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v83 = v81;
                if (v83)
                  v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v83);
                else
                  v84 = 0;
                v85 = v83 + 16 * v80;
                *(_QWORD *)v85 = v75;
                *(_BYTE *)(v85 + 8) = 1;
                v87 = *(_BYTE **)(v72 + 128);
                v86 = *(_BYTE **)(v72 + 136);
                v88 = v85;
                if (v86 != v87)
                {
                  do
                  {
                    v89 = *((_QWORD *)v86 - 2);
                    v86 -= 16;
                    v90 = v86[8];
                    *(_QWORD *)(v88 - 16) = v89;
                    v88 -= 16;
                    *(_BYTE *)(v88 + 8) = v90;
                  }
                  while (v86 != v87);
                  v86 = *(_BYTE **)(v72 + 128);
                }
                v78 = v85 + 16;
                *(_QWORD *)(v72 + 128) = v88;
                *(_QWORD *)(v72 + 136) = v85 + 16;
                *(_QWORD *)(v72 + 144) = v83 + 16 * v84;
                if (v86)
                  operator delete(v86);
              }
              else
              {
                *(_QWORD *)v77 = v75;
                *(_BYTE *)(v77 + 8) = 1;
                v78 = v77 + 16;
              }
              *(_QWORD *)(v72 + 136) = v78;
            }
            v72 += 160;
          }
          while (v72 != v73);
          v71 = 0;
          v9 = v74;
          goto LABEL_31;
        }
      }
    }
    else
    {
      v63 = (const CRTextRecognition::CRCTLD::CTLDRegion *)CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::pickPivot(isWhitespaceCandidate, (uint64_t)&v98);
      CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getSubregions((const CRTextRecognition::CRCTLD::CTLDRegion *)&v98, v63, (uint64_t *)v97);
      v65 = v97[0];
      v64 = v97[1];
      while (v65 != v64)
      {
        v66 = *((float *)v65 + 6);
        v67 = *((float *)v65 + 7);
        v68 = *((float *)v65 + 4);
        v69 = *((float *)v65 + 5);
        LODWORD(v117) = -1;
        v118 = 0;
        *(_QWORD *)&v119 = __PAIR64__(LODWORD(v69), LODWORD(v68));
        *((_QWORD *)&v119 + 1) = __PAIR64__(LODWORD(v67), LODWORD(v66));
        v126 = 0;
        v125 = 0uLL;
        *(double *)&v120 = v66;
        *((double *)&v120 + 1) = v68;
        *(double *)&v121 = v67;
        *((double *)&v121 + 1) = v68;
        *(double *)&v122 = v66;
        *((double *)&v122 + 1) = v69;
        *(double *)&v123 = v67;
        *((double *)&v123 + 1) = v69;
        v124 = 0;
        __p[0] = 0;
        __p[1] = 0;
        v129 = 0.0;
        v128 = 0;
        LODWORD(v117) = *(_DWORD *)v65;
        v70 = powf(*((float *)v65 + 5) - *((float *)v65 + 4), *(float *)(v6 + 40));
        v129 = v70 * powf(*((float *)v65 + 7) - *((float *)v65 + 6), *(float *)(v6 + 44));
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getIntersectingObstacles((float *)v65, (float ***)v9, &v95);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)__p = v95;
        v128 = v96;
        CRTextRecognition::CRCTLD::CTLDPriorityQueue::push(&v114, (CRTextRecognition::CRCTLD::CTLDNode *)&v117);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_QWORD *)&v95 = &v125;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);

        v65 += 16;
      }
      v117 = (int64x2_t *)v97;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    }
    v71 = 0;
LABEL_31:
    if (v107[0])
    {
      v107[1] = v107[0];
      operator delete(v107[0]);
    }
    v117 = (int64x2_t *)v106;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);

  }
  while ((v71 & 1) == 0);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  v117 = (int64x2_t *)&v111;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);

  v117 = &v114;
  std::vector<CRTextRecognition::CRCTLD::CTLDNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
}

void sub_1D5013ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void **a67;

  CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode((CRTextRecognition::CRCTLD::CTLDNode *)&a23);
  CRTextRecognition::CRCTLD::CTLDNode::~CTLDNode((CRTextRecognition::CRCTLD::CTLDNode *)&a43);
  a67 = a10;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&a67);
  a67 = (void **)&a63;
  std::vector<CRTextRecognition::CRCTLD::CTLDNode>::__destroy_vector::operator()[abi:ne180100](&a67);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 7)
  {
    if (a2 >> 57)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 7);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1D5014008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CTLDPriorityQueue::push(int64x2_t *this, CRTextRecognition::CRCTLD::CTLDNode *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  char *v26;
  int64x2_t v27;
  char *v28;
  int64x2_t *v29;

  v4 = this[1].u32[2];
  v5 = this->u64[1];
  if ((int)v4 >= 1 && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - this->i64[0]) >> 5) == v4)
  {
    v5 -= 160;
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](v5);
    this->i64[1] = v5;
  }
  v6 = this[1].u64[0];
  if (v5 >= v6)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - this->i64[0]) >> 5);
    if (v8 + 1 > 0x199999999999999)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - this->i64[0]) >> 5);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0xCCCCCCCCCCCCCCLL)
      v11 = 0x199999999999999;
    else
      v11 = v10;
    v29 = this + 1;
    if (v11)
    {
      if (v11 > 0x199999999999999)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(160 * v11);
    }
    else
    {
      v12 = 0;
    }
    v26 = v12;
    v27.i64[0] = (uint64_t)&v12[160 * v8];
    v28 = &v12[160 * v11];
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDNode,CRTextRecognition::CRCTLD::CTLDNode&>(v27.i64[0], (uint64_t)a2);
    v13 = v27.i64[0];
    v7 = v27.i64[0] + 160;
    v27.i64[1] = v27.i64[0] + 160;
    v15 = this->i64[0];
    v14 = this->u64[1];
    if (v14 == this->i64[0])
    {
      v24 = vdupq_n_s64(v14);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = v14 + v16;
        v18 = v13 + v16;
        *(_DWORD *)(v18 - 160) = *(_DWORD *)(v14 + v16 - 160);
        v19 = *(_QWORD *)(v14 + v16 - 152);
        *(_QWORD *)(v17 - 152) = 0;
        *(_QWORD *)(v18 - 152) = v19;
        v20 = *(_OWORD *)(v14 + v16 - 128);
        *(_OWORD *)(v18 - 144) = *(_OWORD *)(v14 + v16 - 144);
        *(_OWORD *)(v18 - 128) = v20;
        v21 = *(_OWORD *)(v14 + v16 - 112);
        v22 = *(_OWORD *)(v14 + v16 - 96);
        v23 = *(_OWORD *)(v14 + v16 - 80);
        *(_DWORD *)(v18 - 64) = *(_DWORD *)(v14 + v16 - 64);
        *(_OWORD *)(v18 - 96) = v22;
        *(_OWORD *)(v18 - 80) = v23;
        *(_QWORD *)(v18 - 48) = 0;
        *(_QWORD *)(v18 - 40) = 0;
        *(_OWORD *)(v18 - 112) = v21;
        *(_QWORD *)(v18 - 56) = 0;
        *(_OWORD *)(v18 - 56) = *(_OWORD *)(v14 + v16 - 56);
        *(_QWORD *)(v18 - 40) = *(_QWORD *)(v14 + v16 - 40);
        *(_QWORD *)(v17 - 56) = 0;
        *(_QWORD *)(v17 - 48) = 0;
        *(_QWORD *)(v17 - 40) = 0;
        *(_QWORD *)(v18 - 32) = 0;
        *(_QWORD *)(v18 - 24) = 0;
        *(_QWORD *)(v18 - 16) = 0;
        *(_OWORD *)(v18 - 32) = *(_OWORD *)(v14 + v16 - 32);
        *(_QWORD *)(v18 - 16) = *(_QWORD *)(v14 + v16 - 16);
        *(_QWORD *)(v17 - 32) = 0;
        *(_QWORD *)(v17 - 24) = 0;
        *(_QWORD *)(v17 - 16) = 0;
        *(_DWORD *)(v18 - 8) = *(_DWORD *)(v14 + v16 - 8);
        v16 -= 160;
      }
      while (v14 + v16 != v15);
      v24 = *this;
      v7 = v27.i64[1];
      v13 += v16;
    }
    this->i64[0] = v13;
    this->i64[1] = v7;
    v27 = v24;
    v25 = (char *)this[1].i64[0];
    this[1].i64[0] = (uint64_t)v28;
    v28 = v25;
    v26 = (char *)v24.i64[0];
    std::__split_buffer<CRTextRecognition::CRCTLD::CTLDNode>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDNode,CRTextRecognition::CRCTLD::CTLDNode&>(v5, (uint64_t)a2);
    v7 = v5 + 160;
    this->i64[1] = v5 + 160;
  }
  this->i64[1] = v7;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDNode *>>(this->i64[0], v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - this->i64[0]) >> 5));
}

void sub_1D5014260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::isWhitespaceCandidate(float *a1, CRTextRecognition::CRCTLD::CTLDRegion *this)
{
  uint64_t v2;
  uint64_t v3;
  float v6;
  float v7;
  float *v8;
  float IntersectionArea;
  float v10;
  float v11;
  float v12;

  v3 = *((_QWORD *)this + 16);
  v2 = *((_QWORD *)this + 17);
  if (v2 == v3)
    return 1;
  v6 = (float)(*((float *)this + 7) - *((float *)this + 6)) * (float)(*((float *)this + 5) - *((float *)this + 4));
  v7 = 0.0;
  while (1)
  {
    v8 = *(float **)v3;
    IntersectionArea = CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea(this, *(const CRTextRecognition::CRCTLD::CTLDRegion **)v3);
    if (*(_BYTE *)(v3 + 8))
      break;
    if (IntersectionArea > 0.0)
      return 0;
    v12 = *a1;
LABEL_11:
    v7 = v7 + IntersectionArea;
    if (v7 > (float)(v6 * v12))
      return 0;
    v3 += 16;
    if (v3 == v2)
      return 1;
  }
  v10 = v8[5] - v8[4];
  if ((float)((float)(v8[7] - v8[6]) * v10) >= v6)
    v11 = v6;
  else
    v11 = (float)(v8[7] - v8[6]) * v10;
  v12 = *a1;
  if (IntersectionArea <= (float)(*a1 * v11))
    goto LABEL_11;
  return 0;
}

BOOL CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::filterWhitespaceCandidate(uint64_t a1, float *a2, float a3)
{
  return (float)(a2[5] - a2[4]) < (float)(*(float *)(a1 + 16) * a3)
      || (float)(a2[7] - a2[6]) < (float)(*(float *)(a1 + 12) * a3);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::pickPivot(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float **v9;
  float *v10;
  float v11;
  float v12;
  float v13;

  v2 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 136);
  v4 = v3 - v2;
  if (v3 == v2)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 4;
    if (v7 <= 1)
      v7 = 1;
    v8 = 3.4028e38;
    v9 = *(float ***)(a2 + 128);
    do
    {
      v10 = *v9;
      v9 += 2;
      v11 = (float)((float)(v10[6] + v10[7]) * 0.5) - (float)((float)(*(float *)(a2 + 24) + *(float *)(a2 + 28)) * 0.5);
      v12 = (float)((float)(v10[4] + v10[5]) * 0.5) - (float)((float)(*(float *)(a2 + 16) + *(float *)(a2 + 20)) * 0.5);
      v13 = (float)(v12 * v12) + (float)(v11 * v11);
      if (v13 < v8)
      {
        v6 = v5;
        v8 = v13;
      }
      ++v5;
    }
    while (v7 != v5);
  }
  return *(_QWORD *)(v2 + 16 * v6);
}

unint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getSubregions@<X0>(const CRTextRecognition::CRCTLD::CTLDRegion *a1@<X1>, const CRTextRecognition::CRCTLD::CTLDRegion *a2@<X2>, uint64_t *a3@<X8>)
{
  unint64_t result;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float *v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  double v36;
  double v37;
  double v38;

  result = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v8 = (float *)((char *)a1 + 28);
  if (*((float *)a1 + 7) > *((float *)a2 + 7))
  {
    result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, (float *)a2 + 7, v8, (float *)a1 + 4, (float *)a1 + 5);
    a3[1] = result;
  }
  v9 = (float *)((char *)a1 + 24);
  v10 = *((float *)a1 + 6);
  v11 = *((float *)a2 + 6);
  if (v10 < v11)
  {
    v12 = (float *)((char *)a1 + 16);
    v13 = (float *)((char *)a1 + 20);
    if (result >= a3[2])
    {
      result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, (float *)a1 + 6, (float *)a2 + 6, v12, v13);
    }
    else
    {
      v14 = *v12;
      v15 = *v13;
      *(_DWORD *)result = -1;
      *(_QWORD *)(result + 8) = 0;
      *(float *)(result + 16) = v14;
      *(float *)(result + 20) = v15;
      *(float *)(result + 24) = v10;
      *(float *)(result + 28) = v11;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 0;
      *(_QWORD *)(result + 104) = 0;
      v16 = v10;
      v17 = v14;
      *(double *)(result + 32) = v16;
      *(double *)(result + 40) = v17;
      v18 = v11;
      *(double *)(result + 48) = v18;
      *(double *)(result + 56) = v17;
      *(double *)(result + 64) = v16;
      *(double *)(result + 72) = v15;
      *(double *)(result + 80) = v18;
      *(double *)(result + 88) = v15;
      *(_DWORD *)(result + 96) = 0;
      result += 128;
      a3[1] = result;
    }
    a3[1] = result;
  }
  v19 = *((float *)a1 + 5);
  v20 = *((float *)a2 + 5);
  if (v19 > v20)
  {
    if (result >= a3[2])
    {
      result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, (float *)a1 + 6, v8, (float *)a2 + 5, (float *)a1 + 5);
    }
    else
    {
      v21 = *v9;
      v22 = *v8;
      *(_DWORD *)result = -1;
      *(_QWORD *)(result + 8) = 0;
      *(float *)(result + 16) = v20;
      *(float *)(result + 20) = v19;
      *(float *)(result + 24) = v21;
      *(float *)(result + 28) = v22;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 0;
      *(_QWORD *)(result + 104) = 0;
      v23 = v21;
      v24 = v20;
      *(double *)(result + 32) = v23;
      *(double *)(result + 40) = v24;
      v25 = v22;
      *(double *)(result + 48) = v25;
      *(double *)(result + 56) = v24;
      v26 = v19;
      *(double *)(result + 64) = v23;
      *(double *)(result + 72) = v26;
      *(double *)(result + 80) = v25;
      *(double *)(result + 88) = v26;
      *(_DWORD *)(result + 96) = 0;
      result += 128;
      a3[1] = result;
    }
    a3[1] = result;
  }
  v28 = *((float *)a1 + 4);
  v27 = (float *)((char *)a1 + 16);
  v29 = v28;
  v31 = *((float *)a2 + 4);
  v30 = (float *)((char *)a2 + 16);
  v32 = v31;
  if (v29 < v31)
  {
    if (result >= a3[2])
    {
      result = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(a3, v9, v8, v27, v30);
    }
    else
    {
      v33 = *v9;
      v34 = *v8;
      *(_DWORD *)result = -1;
      *(_QWORD *)(result + 8) = 0;
      *(float *)(result + 16) = v29;
      *(float *)(result + 20) = v32;
      *(float *)(result + 24) = v33;
      *(float *)(result + 28) = v34;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 0;
      *(_QWORD *)(result + 104) = 0;
      v35 = v33;
      v36 = v29;
      *(double *)(result + 32) = v35;
      *(double *)(result + 40) = v36;
      v37 = v34;
      *(double *)(result + 48) = v37;
      *(double *)(result + 56) = v36;
      v38 = v32;
      *(double *)(result + 64) = v35;
      *(double *)(result + 72) = v38;
      *(double *)(result + 80) = v37;
      *(double *)(result + 88) = v38;
      *(_DWORD *)(result + 96) = 0;
      result += 128;
      a3[1] = result;
    }
    a3[1] = result;
  }
  return result;
}

void sub_1D5014658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getIntersectingObstacles(float *a1@<X1>, float ***a2@<X2>, _QWORD *a3@<X8>)
{
  float **v3;
  float **v4;
  _BYTE *v7;
  float *v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  char v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v7 = 0;
    do
    {
      v8 = *v3;
      if (a1[6] < (*v3)[7] && a1[7] > v8[6] && a1[4] < v8[5] && a1[5] > v8[4])
      {
        v9 = a3[2];
        if ((unint64_t)v7 >= v9)
        {
          v11 = (_BYTE *)*a3;
          v12 = (uint64_t)&v7[-*a3] >> 4;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v14 = v9 - (_QWORD)v11;
          if (v14 >> 3 > v13)
            v13 = v14 >> 3;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
            v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(v15);
          else
            v16 = 0;
          v17 = (_OWORD *)(v15 + 16 * v12);
          *v17 = *(_OWORD *)v3;
          v18 = v17;
          if (v7 != v11)
          {
            do
            {
              v19 = *((_QWORD *)v7 - 2);
              v7 -= 16;
              v20 = v7[8];
              *((_QWORD *)v18-- - 2) = v19;
              *((_BYTE *)v18 + 8) = v20;
            }
            while (v7 != v11);
            v7 = (_BYTE *)*a3;
          }
          v10 = v17 + 1;
          *a3 = v18;
          a3[1] = v17 + 1;
          a3[2] = v15 + 16 * v16;
          if (v7)
            operator delete(v7);
        }
        else
        {
          *(_OWORD *)v7 = *(_OWORD *)v3;
          v10 = v7 + 16;
        }
        a3[1] = v10;
        v7 = v10;
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void sub_1D50147DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findConstrainedBlockRegions(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, float **a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint8x8_t v36;
  unint64_t v37;
  uint64_t **v38;
  uint64_t *i;
  unint64_t v40;
  char *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  _QWORD *v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  void *v62;
  void *__p[3];
  _BYTE *v64;
  char *v65;
  uint64_t v66;
  _QWORD v67[13];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  __int128 v73;
  int v74;
  void **v75[3];

  v14 = a6;
  v62 = v14;
  v16 = *a3;
  v15 = a3[1];
  v65 = 0;
  v66 = 0;
  v64 = 0;
  *(_QWORD *)&v72 = &v64;
  BYTE8(v72) = 0;
  if (v15 == v16)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](&v64, (v15 - v16) >> 7);
    __p[0] = v65;
    v75[0] = (void **)v65;
    v67[0] = &v66;
    v67[1] = v75;
    v67[2] = __p;
    LOBYTE(v67[3]) = 0;
    v17 = v65;
    do
    {
      std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v17, v16);
      v16 += 128;
      v17 = (char *)__p[0] + 128;
      __p[0] = (char *)__p[0] + 128;
    }
    while (v16 != v15);
    LOBYTE(v67[3]) = 1;
    v14 = (id)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v67);
    v65 = v17;
    v18 = (uint64_t)v64;
  }
  v60 = a2;
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions((uint64_t)v14, v18, (uint64_t)v17);
  v59 = a7;
  CRTextRecognition::CRCTLD::CTLDMFSet::CTLDMFSet((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, (unint64_t)(v65 - v64) >> 7);
  v19 = v64;
  v20 = v65;
  if (v65 != v64)
  {
    v21 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    v23 = 1;
    v24 = 128;
    do
    {
      v25 = v21 + 1;
      v26 = v22 + v21;
      v27 = v20 - v19;
      if (v22 + (int)v21 >= (int)((unint64_t)(v20 - v19) >> 7))
        v26 = (unint64_t)(v20 - v19) >> 7;
      if ((uint64_t)v25 < v26)
      {
        v28 = v24;
        v29 = v23;
        do
        {
          v30 = CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)&v19[128 * v21]);
          if (v30 != CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)&v64[v28])&& CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsInBlock(a1, (uint64_t)&v64[128 * v21], (uint64_t)&v64[v28], a4, a5, v62, a8))
          {
            CRTextRecognition::CRCTLD::CTLDMFSet::merge((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)&v64[128 * v21], *(unsigned int *)&v64[v28]);
          }
          v22 = *(_DWORD *)(a1 + 32);
          v31 = v22 + v21;
          v19 = v64;
          v20 = v65;
          v27 = v65 - v64;
          if (v22 + (int)v21 >= (int)((unint64_t)(v65 - v64) >> 7))
            v31 = (unint64_t)(v65 - v64) >> 7;
          ++v29;
          v28 += 128;
        }
        while (v31 > v29);
      }
      ++v23;
      v24 += 128;
      ++v21;
    }
    while (v25 < v27 >> 7);
  }
  v72 = 0u;
  v73 = 0u;
  v74 = 1065353216;
  v32 = *v60;
  if (v60[1] == *v60)
  {
    v48 = a7;
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  else
  {
    v33 = 0;
    do
    {
      v34 = CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)__p, *(unsigned int *)(v32 + (v33 << 7)));
      v71 = v34;
      v35 = v34;
      if (*((_QWORD *)&v72 + 1))
      {
        v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v72 + 8));
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          v37 = v34;
          if (*((_QWORD *)&v72 + 1) <= (unint64_t)v34)
            v37 = (unint64_t)v34 % *((_QWORD *)&v72 + 1);
        }
        else
        {
          v37 = (*((_QWORD *)&v72 + 1) - 1) & v34;
        }
        v38 = *(uint64_t ***)(v72 + 8 * v37);
        if (v38)
        {
          for (i = *v38; i; i = (uint64_t *)*i)
          {
            v40 = i[1];
            if (v40 == v34)
            {
              if (*((_DWORD *)i + 4) == v34)
                goto LABEL_40;
            }
            else
            {
              if (v36.u32[0] > 1uLL)
              {
                if (v40 >= *((_QWORD *)&v72 + 1))
                  v40 %= *((_QWORD *)&v72 + 1);
              }
              else
              {
                v40 &= *((_QWORD *)&v72 + 1) - 1;
              }
              if (v40 != v37)
                break;
            }
          }
        }
      }
      LODWORD(v67[0]) = -1;
      v69 = 0;
      v70 = 0;
      v68 = 0;
      memset(&v67[1], 0, 92);
      v41 = std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&v72, v34, &v71);
      *((_DWORD *)v41 + 6) = v67[0];
      objc_storeStrong((id *)v41 + 4, (id)v67[1]);
      v42 = v67[12];
      v44 = *(_OWORD *)&v67[8];
      v43 = *(_OWORD *)&v67[10];
      *(_OWORD *)(v41 + 72) = *(_OWORD *)&v67[6];
      *(_OWORD *)(v41 + 88) = v44;
      *(_OWORD *)(v41 + 104) = v43;
      *((_DWORD *)v41 + 30) = v42;
      v45 = *(_OWORD *)&v67[4];
      *(_OWORD *)(v41 + 40) = *(_OWORD *)&v67[2];
      *(_OWORD *)(v41 + 56) = v45;
      if (v41 + 24 != (char *)v67)
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t *)v41 + 16, v68, v69, (v69 - v68) >> 7);
      v75[0] = (void **)&v68;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v75);

LABEL_40:
      v46 = std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&v72, v35, &v71);
      CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)(v46 + 24), (const CRTextRecognition::CRCTLD::CTLDRegion *)(*v60 + (v33++ << 7)));
      v32 = *v60;
    }
    while (v33 < (v60[1] - *v60) >> 7);
    v47 = (_QWORD *)v73;
    v48 = v59;
    v59[1] = 0;
    v59[2] = 0;
    *v59 = 0;
    if (v47)
    {
      v49 = 0;
      v50 = (unint64_t *)(v59 + 2);
      do
      {
        if (v49 >= *v50)
        {
          v51 = (uint64_t)(v49 - *v59) >> 7;
          if ((unint64_t)(v51 + 1) >> 57)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v52 = *v50 - *v59;
          v53 = v52 >> 6;
          if (v52 >> 6 <= (unint64_t)(v51 + 1))
            v53 = v51 + 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFF80)
            v54 = 0x1FFFFFFFFFFFFFFLL;
          else
            v54 = v53;
          v67[4] = v59 + 2;
          if (v54)
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(v59 + 2), v54);
          else
            v55 = 0;
          v67[0] = v55;
          v67[1] = &v55[128 * v51];
          v67[2] = v67[1];
          v67[3] = &v55[128 * v54];
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v67[1], (uint64_t)(v47 + 3));
          v67[2] += 128;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(v59, v67);
          v49 = v59[1];
          std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v67);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v49, (uint64_t)(v47 + 3));
          v49 += 128;
          v59[1] = v49;
        }
        v59[1] = v49;
        v47 = (_QWORD *)*v47;
      }
      while (v47);
    }
  }
  v56 = std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::~__hash_table((uint64_t)&v72);
  v57 = *v48;
  v58 = v48[1];
  while (v57 != v58)
  {
    v56 = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v56, *(_QWORD *)(v57 + 104), *(_QWORD *)(v57 + 112));
    v57 += 128;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v67[0] = &v64;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);

}

void sub_1D5014D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 160));

  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(uint64_t a1, uint64_t *a2)
{
  return CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(a1, *a2, a2[1]);
}

uint64_t CRTextRecognition::CRCTLD::CTLDMFSet::find(CRTextRecognition::CRCTLD::CTLDMFSet *this, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;

  v2 = a2;
  v3 = *(_DWORD *)(*(_QWORD *)this + 4 * (int)a2);
  if ((v3 & 0x80000000) == 0)
  {
    v5 = (int)v2;
    v2 = CRTextRecognition::CRCTLD::CTLDMFSet::find(this, v3);
    *(_DWORD *)(*(_QWORD *)this + 4 * v5) = v2;
  }
  return v2;
}

BOOL CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsInBlock(uint64_t a1, uint64_t a2, uint64_t a3, float **a4, uint64_t a5, void *a6, float a7)
{
  id v12;
  void *v13;
  _BOOL8 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double *v23;
  char *v24;
  char *v25;
  float v26;
  float v27;
  float64x2_t *v28;
  float64x2_t *v29;
  int v30;
  float64x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int v34;
  double *v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float64x2_t *v51;
  float64x2_t *v52;
  int v53;
  float64x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  float64x2_t *v64;
  unint64_t v65;
  char *v66;
  __int128 v67;
  CGPoint *v68;
  float *v69;
  float *v70;
  float v72;
  float **v73;
  void *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;

  v12 = a6;
  v13 = v12;
  if (!v12)
    goto LABEL_5;
  v12 = (id)objc_msgSend(v12, "groupingConstraintForRegion1:region2:", *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8));
  if (v12 == (id)1)
    goto LABEL_42;
  if (v12 != (id)2)
  {
LABEL_5:
    if (CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsLayoutDirection((CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *)v12, (id *)a2, (id *)a3))
    {
      v72 = a7;
      v74 = v13;
      v16 = *(float *)(a2 + 24);
      v15 = *(float *)(a2 + 28);
      v18 = *(float *)(a2 + 16);
      v17 = *(float *)(a2 + 20);
      v19 = *(float *)(a3 + 24);
      v20 = *(float *)(a3 + 28);
      v22 = *(float *)(a3 + 16);
      v21 = *(float *)(a3 + 20);
      v23 = (double *)operator new(0x20uLL);
      v24 = (char *)v23;
      v25 = (char *)(v23 + 4);
      *v23 = (float)(v16 + v15) * 0.5;
      v23[1] = (float)(v18 + v17) * 0.5;
      v23[2] = (float)(v19 + v20) * 0.5;
      v23[3] = (float)(v22 + v21) * 0.5;
      if (v16 >= v19)
        v26 = v16;
      else
        v26 = v19;
      if (v20 >= v15)
        v27 = v15;
      else
        v27 = v20;
      v73 = a4;
      if ((float)(v27 - v26) <= 0.0
        || (v18 >= v22 ? (v28 = (float64x2_t *)a3) : (v28 = (float64x2_t *)a2),
            v18 >= v22 ? (v29 = (float64x2_t *)a2) : (v29 = (float64x2_t *)a3),
            v30 = *(_DWORD *)(a1 + 36),
            v30 < 1))
      {
        v35 = v23 + 4;
      }
      else
      {
        v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v30 + 1)), 0);
        v32 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v28[5], v28[4]), v31));
        v33 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v29[3], v29[2]), v31));
        v34 = 1;
        v35 = v23 + 4;
        do
        {
          v36 = vaddq_f64(v28[4], vcvtq_f64_f32(vmul_n_f32(v32, (float)v34)));
          v37 = vaddq_f64(v29[2], vcvtq_f64_f32(vmul_n_f32(v33, (float)v34)));
          if (v25 >= (char *)v35)
          {
            v75 = v37;
            v77 = v36;
            v38 = (v25 - v24) >> 5;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 59)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            if (((char *)v35 - v24) >> 4 > v39)
              v39 = ((char *)v35 - v24) >> 4;
            if ((unint64_t)((char *)v35 - v24) >= 0x7FFFFFFFFFFFFFE0)
              v40 = 0x7FFFFFFFFFFFFFFLL;
            else
              v40 = v39;
            if (v40)
              v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(v40);
            else
              v41 = 0;
            v42 = (float64x2_t *)(v40 + 32 * v38);
            *v42 = v77;
            v42[1] = v75;
            if (v25 == v24)
            {
              v44 = (char *)(v40 + 32 * v38);
            }
            else
            {
              v43 = v40 + 32 * v38;
              do
              {
                v44 = (char *)(v43 - 32);
                v45 = *((_OWORD *)v25 - 1);
                *(_OWORD *)(v43 - 32) = *((_OWORD *)v25 - 2);
                *(_OWORD *)(v43 - 16) = v45;
                v25 -= 32;
                v43 -= 32;
              }
              while (v25 != v24);
            }
            v35 = (double *)(v40 + 32 * v41);
            v25 = (char *)&v42[2];
            if (v24)
              operator delete(v24);
            v24 = v44;
          }
          else
          {
            *(float64x2_t *)v25 = v36;
            *((float64x2_t *)v25 + 1) = v37;
            v25 += 32;
          }
          v46 = v34++ < *(_DWORD *)(a1 + 36);
        }
        while (v46);
        v22 = *(float *)(a3 + 16);
        v21 = *(float *)(a3 + 20);
        v18 = *(float *)(a2 + 16);
        v17 = *(float *)(a2 + 20);
      }
      if (v18 >= v22)
        v47 = v18;
      else
        v47 = v22;
      if (v21 >= v17)
        v48 = v17;
      else
        v48 = v21;
      if ((float)(v48 - v47) > 0.0)
      {
        v49 = *(float *)(a2 + 24);
        v50 = *(float *)(a3 + 24);
        v51 = (float64x2_t *)(v49 >= v50 ? a3 : a2);
        v52 = (float64x2_t *)(v49 >= v50 ? a2 : a3);
        v53 = *(_DWORD *)(a1 + 36);
        if (v53 >= 1)
        {
          v54 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v53 + 1)), 0);
          v55 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v51[3], v51[5]), v54));
          v56 = vcvt_f32_f64(vdivq_f64(vsubq_f64(v52[2], v52[4]), v54));
          v57 = 1;
          do
          {
            v58 = vaddq_f64(v51[5], vcvtq_f64_f32(vmul_n_f32(v55, (float)v57)));
            v59 = vaddq_f64(v52[4], vcvtq_f64_f32(vmul_n_f32(v56, (float)v57)));
            if (v25 >= (char *)v35)
            {
              v76 = v59;
              v78 = v58;
              v60 = (v25 - v24) >> 5;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 59)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              if (((char *)v35 - v24) >> 4 > v61)
                v61 = ((char *)v35 - v24) >> 4;
              if ((unint64_t)((char *)v35 - v24) >= 0x7FFFFFFFFFFFFFE0)
                v62 = 0x7FFFFFFFFFFFFFFLL;
              else
                v62 = v61;
              if (v62)
                v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTableStructureColumn>>(v62);
              else
                v63 = 0;
              v64 = (float64x2_t *)(v62 + 32 * v60);
              *v64 = v78;
              v64[1] = v76;
              if (v25 == v24)
              {
                v66 = (char *)(v62 + 32 * v60);
              }
              else
              {
                v65 = v62 + 32 * v60;
                do
                {
                  v66 = (char *)(v65 - 32);
                  v67 = *((_OWORD *)v25 - 1);
                  *(_OWORD *)(v65 - 32) = *((_OWORD *)v25 - 2);
                  *(_OWORD *)(v65 - 16) = v67;
                  v25 -= 32;
                  v65 -= 32;
                }
                while (v25 != v24);
              }
              v35 = (double *)(v62 + 32 * v63);
              v25 = (char *)&v64[2];
              if (v24)
                operator delete(v24);
              v24 = v66;
            }
            else
            {
              *(float64x2_t *)v25 = v58;
              *((float64x2_t *)v25 + 1) = v59;
              v25 += 32;
            }
            v46 = v57++ < *(_DWORD *)(a1 + 36);
          }
          while (v46);
        }
      }
      if (v24 == v25)
      {
        v14 = 0;
        if (!v24)
          goto LABEL_91;
      }
      else
      {
        v68 = (CGPoint *)v24;
        while (1)
        {
          v70 = *v73;
          v69 = v73[1];
          v14 = *v73 == v69;
          if (*v73 == v69)
            break;
          while (!CRTextRecognition::CRCTLD::CTLDRegion::segmentIntersectsRegion(v70, v68)
               || (CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::skipWhitespaceDueToDirectionsSwapped(a1, a2, a3, v70, a5, v72) & 1) != 0)
          {
            v70 += 32;
            if (v70 == v69)
              goto LABEL_88;
          }
          v68 += 2;
          if (v68 == (CGPoint *)v25)
            goto LABEL_89;
        }
LABEL_88:
        v14 = 1;
LABEL_89:
        if (!v24)
          goto LABEL_91;
      }
      operator delete(v24);
LABEL_91:
      v13 = v74;
      goto LABEL_92;
    }
LABEL_42:
    v14 = 0;
    goto LABEL_92;
  }
  v14 = 1;
LABEL_92:

  return v14;
}

void sub_1D50152D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CTLDMFSet::merge(CRTextRecognition::CRCTLD::CTLDMFSet *this, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;

  v5 = CRTextRecognition::CRCTLD::CTLDMFSet::find(this, a2);
  result = CRTextRecognition::CRCTLD::CTLDMFSet::find(this, a3);
  if (v5 != (_DWORD)result)
    *(_DWORD *)(*(_QWORD *)this + 4 * (int)result) = v5;
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::vector<int>::size_type v5;
  void *v6;
  unint64_t v7;
  unint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int64x2_t v46;
  unint64_t v47;
  int64_t v48;
  int64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  __n128 *v53;
  int *v54;
  int *v55;
  __n128 *v56;
  int *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  float v65;
  float v66;
  float *v67;
  int *v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  std::vector<int>::size_type v74;
  std::vector<int>::size_type __sz;
  int v76;
  _OWORD v77[3];
  void *v78[2];
  void *v79[2];
  __int128 v80;
  void *__p[2];
  _OWORD v82[2];
  __int128 v83;
  uint64_t v84;
  void **v85[3];
  std::vector<int>::value_type __x[2];
  int64x2_t v87;
  unint64_t v88;
  char *v89;

  v84 = 0;
  v83 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v82, 0, sizeof(v82));
  *(_OWORD *)v79 = 0u;
  v80 = 0u;
  *(_OWORD *)v78 = 0u;
  memset(v77, 0, sizeof(v77));
  v76 = 0;
  v74 = (a3 - a2) >> 7;
  __sz = v74;
  __x[0] = -1;
  std::vector<int>::resize((std::vector<int> *)v78, v74, __x);
  __x[0] = -1;
  std::vector<int>::resize((std::vector<int> *)&v79[1], v74, __x);
  v5 = v74;
  v6 = __p[1];
  v7 = v74 - (unint64_t)__p[1];
  if ((void *)v74 <= __p[1])
  {
    __p[1] = (void *)__sz;
  }
  else
  {
    if (*(_QWORD *)&v82[0] << 6 < v7 || __p[1] > (void *)((*(_QWORD *)&v82[0] << 6) - v7))
    {
      *(_QWORD *)__x = 0;
      v87 = 0uLL;
      if ((__sz & 0x8000000000000000) != 0)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v10 = *(_QWORD *)&v82[0] << 7;
      if (*(_QWORD *)&v82[0] << 7 <= ((v74 + 63) & 0xFFFFFFFFFFFFFFC0))
        v10 = (v74 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (*(_QWORD *)&v82[0] << 6 <= 0x3FFFFFFFFFFFFFFEuLL)
        v11 = v10;
      else
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((char **)__x, v11);
      v12 = __p[0];
      v13 = __p[1];
      v14 = (char *)__p[1] + v7;
      v87.i64[0] = (uint64_t)__p[1] + v7;
      v15 = *(unint64_t **)__x;
      if ((uint64_t)__p[1] < 1)
      {
        v9 = 0;
        v8 = *(unint64_t **)__x;
      }
      else
      {
        v16 = (unint64_t)__p[1] >> 6;
        if (__p[1] >= (void *)0x40)
          memmove(*(void **)__x, __p[0], 8 * v16);
        v8 = &v15[v16];
        v9 = v13 & 0x3F;
        if ((v13 & 0x3F) != 0)
          *v8 = *v8 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v9) | v12[v16] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9);
        v12 = __p[0];
        v13 = __p[1];
        v15 = *(unint64_t **)__x;
        v14 = (char *)v87.i64[0];
      }
      __p[0] = v15;
      __p[1] = v14;
      *(_QWORD *)__x = v12;
      v87.i64[0] = (uint64_t)v13;
      v17 = *(_QWORD *)&v82[0];
      *(_QWORD *)&v82[0] = v87.i64[1];
      v87.i64[1] = v17;
      if (v12)
      {
        v18 = v12;
        v19 = v9;
        operator delete(v18);
        v9 = v19;
      }
    }
    else
    {
      v8 = (unint64_t *)((char *)__p[0] + 8 * ((unint64_t)__p[1] >> 6));
      v9 = (uint64_t)__p[1] & 0x3F;
      __p[1] = (void *)__sz;
    }
    if ((void *)v74 != v6)
    {
      *(_QWORD *)__x = v8;
      v87.i32[0] = v9;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__x, v7);
    }
    v5 = __sz;
  }
  v20 = *((_QWORD *)&v82[0] + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v82[1] + 1) - *((_QWORD *)&v82[0] + 1)) >> 3) < v5)
  {
    if (v5 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v21 = *(_QWORD *)&v82[1];
    v89 = (char *)&v82[1] + 8;
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v5);
    v23 = &v22[v21 - v20];
    *(_QWORD *)__x = v22;
    v87.i64[0] = (uint64_t)v23;
    v25 = &v22[24 * v24];
    v87.i64[1] = (uint64_t)v23;
    v88 = (unint64_t)v25;
    v27 = (_QWORD *)*((_QWORD *)&v82[0] + 1);
    v26 = *(_QWORD **)&v82[1];
    if (*(_QWORD *)&v82[1] == *((_QWORD *)&v82[0] + 1))
    {
      v30 = vdupq_n_s64(*(unint64_t *)&v82[1]);
      v28 = &v22[v21 - v20];
    }
    else
    {
      v28 = &v22[v21 - v20];
      do
      {
        v29 = *(v26 - 3);
        v26 -= 3;
        *((_QWORD *)v28 - 3) = v29;
        v28 -= 24;
        *((_QWORD *)v28 + 1) = v26[1];
        *((_QWORD *)v28 + 2) = v26[2];
        *v26 = 0;
        v26[1] = 0;
        v26[2] = 0;
      }
      while (v26 != v27);
      v30 = *(int64x2_t *)((char *)v82 + 8);
      v23 = (char *)v87.i64[1];
      v25 = (char *)v88;
    }
    *((_QWORD *)&v82[0] + 1) = v28;
    *(_QWORD *)&v82[1] = v23;
    v87 = v30;
    v31 = *((_QWORD *)&v82[1] + 1);
    *((_QWORD *)&v82[1] + 1) = v25;
    v88 = v31;
    *(_QWORD *)__x = v30.i64[0];
    std::__split_buffer<std::vector<BOOL>>::~__split_buffer((uint64_t)__x);
  }
  if (a2 != a3)
  {
    v32 = 0;
    v33 = a2;
    do
    {
      memset(v85, 0, sizeof(v85));
      std::vector<BOOL>::reserve((char **)v85, __sz);
      v34 = v32;
      v35 = a2;
      do
      {
        if (v34)
          LOBYTE(__x[0]) = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v33, v35);
        else
          LOBYTE(__x[0]) = 0;
        std::vector<BOOL>::push_back((uint64_t)v85, __x);
        v35 += 128;
        v34 -= 128;
      }
      while (v35 != a3);
      v36 = *(_QWORD *)&v82[1];
      if (*(_QWORD *)&v82[1] >= *((_QWORD *)&v82[1] + 1))
      {
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v82[1] - *((_QWORD *)&v82[0] + 1)) >> 3);
        v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v82[1] + 1) - *((_QWORD *)&v82[0] + 1)) >> 3) > v39)
          v39 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v82[1] + 1) - *((_QWORD *)&v82[0] + 1)) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v82[1] + 1) - *((_QWORD *)&v82[0] + 1)) >> 3) >= 0x555555555555555)
          v40 = 0xAAAAAAAAAAAAAAALL;
        else
          v40 = v39;
        v89 = (char *)&v82[1] + 8;
        if (v40)
          v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v40);
        else
          v41 = 0;
        *(_QWORD *)__x = v40;
        v87.i64[0] = v40 + 24 * v38;
        v87.i64[1] = v87.i64[0];
        v88 = v40 + 24 * v41;
        std::vector<BOOL>::vector(v87.i64[0], (uint64_t)v85);
        v42 = v87.i64[0];
        v37 = v87.i64[1] + 24;
        v87.i64[1] += 24;
        v44 = (_QWORD *)*((_QWORD *)&v82[0] + 1);
        v43 = *(_QWORD **)&v82[1];
        if (*(_QWORD *)&v82[1] == *((_QWORD *)&v82[0] + 1))
        {
          v46 = vdupq_n_s64(*(unint64_t *)&v82[1]);
        }
        else
        {
          do
          {
            v45 = *(v43 - 3);
            v43 -= 3;
            *(_QWORD *)(v42 - 24) = v45;
            v42 -= 24;
            *(_QWORD *)(v42 + 8) = v43[1];
            *(_QWORD *)(v42 + 16) = v43[2];
            *v43 = 0;
            v43[1] = 0;
            v43[2] = 0;
          }
          while (v43 != v44);
          v46 = *(int64x2_t *)((char *)v82 + 8);
          v37 = v87.i64[1];
        }
        *((_QWORD *)&v82[0] + 1) = v42;
        *(_QWORD *)&v82[1] = v37;
        v87 = v46;
        v47 = *((_QWORD *)&v82[1] + 1);
        *((_QWORD *)&v82[1] + 1) = v88;
        v88 = v47;
        *(_QWORD *)__x = v46.i64[0];
        std::__split_buffer<std::vector<BOOL>>::~__split_buffer((uint64_t)__x);
      }
      else
      {
        std::vector<BOOL>::vector(*(_QWORD **)&v82[1], (uint64_t)v85);
        v37 = v36 + 24;
      }
      *(_QWORD *)&v82[1] = v37;
      if (v85[0])
        operator delete(v85[0]);
      v33 += 128;
      v32 += 128;
    }
    while (v33 != a3);
  }
  v48 = __sz;
  if ((uint64_t)__sz >= 1)
  {
    v49 = 0;
    do
    {
      if ((*((_DWORD *)v78[0] + v49) & 0x80000000) != 0)
      {
        CRTextRecognition::CRCTLD::order::TarjansSCC::unfolded_strongconnect((CRTextRecognition::CRCTLD::order::TarjansSCC *)&__sz, v49);
        v48 = __sz;
      }
      ++v49;
    }
    while (v48 > v49);
  }
  *(_QWORD *)__x = 0;
  v87 = 0uLL;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve((uint64_t *)__x, v74);
  v51 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
  {
    v52 = *((_QWORD *)&v83 + 1);
    do
    {
      v53 = (__n128 *)v87.i64[0];
      v54 = *(int **)(v52 - 24);
      v55 = *(int **)(v52 - 16);
      v52 -= 24;
      v56 = (__n128 *)v87.i64[0];
      v57 = v54;
      if (v54 != v55)
      {
        do
        {
          if ((unint64_t)v56 >= v87.i64[1])
          {
            v56 = (__n128 *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)__x, a2 + ((uint64_t)*v54 << 7));
          }
          else
          {
            std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v87.i64[1], (uint64_t)v56, a2 + ((uint64_t)*v54 << 7));
            v56 += 8;
          }
          v87.i64[0] = (uint64_t)v56;
          ++v54;
        }
        while (v54 != v55);
        v54 = *(int **)(v51 - 24);
        v57 = *(int **)(v51 - 16);
      }
      if ((unint64_t)((char *)v57 - (char *)v54) > 4)
      {
        if ((char *)v56 - (char *)v53 < 1)
        {
          v58 = 0;
          v60 = 0;
        }
        else
        {
          v58 = std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(((char *)v56 - (char *)v53) >> 7);
          v60 = v59;
        }
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(v53, v56, ((char *)v56 - (char *)v53) >> 7, (uint64_t)v58, v60, v50);
        if (v58)
          operator delete(v58);
        if (v53 != v56)
        {
          v61 = (uint64_t)v53;
          while (1)
          {
            v62 = v61 + 128;
            if ((__n128 *)(v61 + 128) == v56)
              break;
            v63 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v61 + 128, v61);
            v61 = v62;
            if (v63)
            {
              CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>((int *)v53, v56, 0, v50);
              v64 = CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&v56[-8], (uint64_t)v53);
              if (&v56[-8] != v53 && v64)
              {
                v65 = (float)((float)(v53[1].n128_f32[2] + v53[1].n128_f32[3]) * 0.5)
                    - (float)((float)(v56[-7].n128_f32[2] + v56[-7].n128_f32[3]) * 0.5);
                v66 = (float)((float)(v53[1].n128_f32[0] + v53[1].n128_f32[1]) * 0.5)
                    - (float)((float)(v56[-7].n128_f32[0] + v56[-7].n128_f32[1]) * 0.5);
                v50.n128_f32[0] = (float)(v66 * v66) + (float)(v65 * v65);
                v67 = (float *)&v53[8];
                v68 = (int *)v53;
                do
                {
                  v69 = (float)((float)(*(v67 - 26) + *(v67 - 25)) * 0.5) - (float)((float)(v67[6] + v67[7]) * 0.5);
                  v70 = (float)((float)(*(v67 - 28) + *(v67 - 27)) * 0.5) - (float)((float)(v67[4] + v67[5]) * 0.5);
                  v71 = (float)(v70 * v70) + (float)(v69 * v69);
                  if (v50.n128_f32[0] < v71)
                  {
                    v68 = (int *)v67;
                    v50.n128_f32[0] = v71;
                  }
                  v72 = v67 == (float *)&v56[-8];
                  v67 += 32;
                }
                while (!v72);
                v72 = v68 == (int *)v53 || v68 == (int *)v56;
                if (!v72)
                  std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((int *)v53, v68, (int *)v56);
              }
              break;
            }
          }
        }
      }
      v51 = v52;
    }
    while (v52 != (_QWORD)v83);
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(*(uint64_t **)__x, (uint64_t *)v87.i64[0], a2);
  v85[0] = (void **)__x;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v85);
  *(_QWORD *)__x = &v83;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  *(_QWORD *)__x = (char *)v82 + 8;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  if (__p[0])
    operator delete(__p[0]);
  if (v79[1])
  {
    *(void **)&v80 = v79[1];
    operator delete(v79[1]);
  }
  if (v78[0])
  {
    v78[1] = v78[0];
    operator delete(v78[0]);
  }
  return std::deque<int>::~deque[abi:ne180100]((uint64_t)v77);
}

void sub_1D5015AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  v5 = *(void **)(v3 - 144);
  if (v5)
    operator delete(v5);
  CRTextRecognition::CRCTLD::order::TarjansSCC::~TarjansSCC((CRTextRecognition::CRCTLD::order::TarjansSCC *)va);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::order::TarjansSCC::~TarjansSCC(CRTextRecognition::CRCTLD::order::TarjansSCC *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)((char *)this + 160);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 136);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 16);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::filterWhitespacesForReadingOrder@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  int *v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;

  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v13 = -INFINITY;
  }
  else
  {
    v8 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    do
    {
      v9 = *(int **)(v6 + 104);
      while (v9 != *(int **)(v6 + 112))
      {
        v10 = *v9;
        v9 += 32;
        v11.i32[0] = *(_QWORD *)(*a3 + (v10 << 7) + 16);
        v11.i32[1] = v8.i32[1];
        v12.i32[0] = v8.i32[0];
        v12.i32[1] = HIDWORD(*(_QWORD *)(*a3 + (v10 << 7) + 16));
        v8 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v12, v11), *(int8x8_t *)(*a3 + (v10 << 7) + 16), (int8x8_t)v8);
      }
      v6 += 128;
    }
    while (v6 != v7);
    LODWORD(v13) = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v8, 1), v8).u32[0];
  }
  v14 = *(float *)(result + 28);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v15 = *a4;
  v16 = a4[1];
  if (*a4 != v16)
  {
    v17 = 0;
    v18 = v13 * v14;
    v19 = (unint64_t *)(a5 + 2);
    do
    {
      if ((float)(*(float *)(v15 + 20) - *(float *)(v15 + 16)) > v18)
      {
        if (v17 >= *v19)
        {
          v20 = (uint64_t)(v17 - *a5) >> 7;
          if ((unint64_t)(v20 + 1) >> 57)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v21 = *v19 - *a5;
          v22 = v21 >> 6;
          if (v21 >> 6 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFF80)
            v23 = 0x1FFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v29 = a5 + 2;
          if (v23)
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a5 + 2), v23);
          else
            v24 = 0;
          v25 = v24;
          v26 = &v24[128 * v20];
          v27 = (uint64_t)v26;
          v28 = &v24[128 * v23];
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v26, v15);
          v27 += 128;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a5, &v25);
          v17 = a5[1];
          result = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v25);
        }
        else
        {
          result = (uint64_t)std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v17, v15);
          v17 += 128;
          a5[1] = v17;
        }
        a5[1] = v17;
      }
      v15 += 128;
    }
    while (v15 != v16);
  }
  return result;
}

void sub_1D5015D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t k;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float IntersectionArea;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *prime;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  char **v33;
  char *i;
  unint64_t v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  _QWORD **v43;
  size_t v44;
  uint8x8_t v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *j;
  size_t v49;
  _QWORD *v50;
  char **v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  int **v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *v74;
  void *v75;
  int v76;
  const CRTextRecognition::CRCTLD::CTLDRegion *v77;
  const CRTextRecognition::CRCTLD::CTLDRegion *v78;
  void *v79;
  void *v80;
  int v81;
  float *v82;
  float *v83;
  float *m;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  uint64_t **v102;
  uint64_t *n;
  unint64_t v104;
  _QWORD *v105;
  float v106;
  _BOOL8 v107;
  unint64_t v108;
  unint64_t v109;
  int8x8_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  _QWORD **v114;
  unint64_t v115;
  uint8x8_t v116;
  unint64_t v117;
  uint8x8_t v118;
  uint64_t v119;
  _QWORD *ii;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  void *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  _DWORD *v140;
  id v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _DWORD *v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint8x8_t v151;
  unint64_t v152;
  uint64_t **v153;
  uint64_t *jj;
  unint64_t v155;
  _DWORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  id v167;
  unsigned int v168;
  int v169;
  int v170;
  _DWORD *v171;
  _DWORD *v172;
  void **v173;
  _DWORD *v174;
  unint64_t v175;
  void *v176;
  id v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  int v183;
  __int128 v184;
  uint64_t v185;
  void *v186[2];
  __int128 v187;
  float v188;
  void *__p[2];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  int v195;
  __int128 v196;
  uint64_t v197;
  _QWORD v198[13];
  __int128 v199;
  uint64_t v200;
  void **v201;

  v167 = a6;
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::filterWhitespacesForReadingOrder((uint64_t)a1, a2, a3, a4, (uint64_t *)&v171);
  v10 = (uint64_t)v171;
  v11 = (uint64_t)v172;
  if (v171 != v172)
  {
    v12 = v171;
    do
    {
      *v12 = -100;
      v12 += 32;
    }
    while (v12 != (_DWORD *)v11);
  }
  v13 = v167;
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(std::vector<CRTextRecognition::CRCTLD::CTLDRegion> &,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,CRLayoutDirection,objc_object  {objcproto14CRCTLDDelegate}*)::$_0::operator()(v10, v11, a2);
  v14 = 0;
  LOBYTE(v170) = 0;
  while (1)
  {
    k = v14;
    CRTextRecognition::CRCTLD::CTLDMFSet::CTLDMFSet((CRTextRecognition::CRCTLD::CTLDMFSet *)&v176, (unint64_t)(a2[1] - *a2) >> 7);
    if ((unint64_t)(a2[1] - *a2) < 0x81)
    {
      v63 = 0;
      goto LABEL_136;
    }
    v168 = v14;
    v16 = 0;
    v17 = 1;
    do
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (float *)(*a2 + (v17 << 7));
        v21 = (float *)(*a2 + v18);
        IntersectionArea = CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea((CRTextRecognition::CRCTLD::CTLDRegion *)v20, (const CRTextRecognition::CRCTLD::CTLDRegion *)v21);
        if (IntersectionArea > 0.0)
        {
          v23 = (float)(v20[7] - v20[6]) * (float)(v20[5] - v20[4]);
          v24 = v21[5] - v21[4];
          if ((float)((float)(v21[7] - v21[6]) * v24) < v23)
            v23 = (float)(v21[7] - v21[6]) * v24;
          if ((float)(IntersectionArea / v23) > 0.5
            && CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkGroupsMergeConsistency(a1, v13, (const CRTextRecognition::CRCTLD::CTLDRegion *)v20, (const CRTextRecognition::CRCTLD::CTLDRegion *)v21))
          {
            CRTextRecognition::CRCTLD::CTLDMFSet::merge((CRTextRecognition::CRCTLD::CTLDMFSet *)&v176, v17, v19);
            v16 = 1;
          }
        }
        ++v19;
        v18 += 128;
      }
      while (v17 != v19);
      ++v17;
      v26 = *a2;
      v25 = a2[1];
    }
    while (v17 < (v25 - *a2) >> 7);
    if ((v16 & 1) == 0)
    {
      v63 = 0;
      k = v168;
      goto LABEL_136;
    }
    *(_OWORD *)__p = 0u;
    v190 = 0u;
    LODWORD(v191) = 1065353216;
    if (v25 == v26)
    {
      v186[0] = 0;
      v186[1] = 0;
      *(_QWORD *)&v187 = 0;
      k = v168;
      goto LABEL_133;
    }
    v27 = 0;
    do
    {
      prime = (char *)CRTextRecognition::CRCTLD::CTLDMFSet::find((CRTextRecognition::CRCTLD::CTLDMFSet *)&v176, v27);
      v29 = (int)prime;
      v30 = (int)prime;
      v31 = (unint64_t)__p[1];
      if (__p[1])
      {
        v32 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          v18 = (int)prime;
          if (__p[1] <= (void *)(int)prime)
            v18 = (int)prime % (unint64_t)__p[1];
        }
        else
        {
          v18 = ((unint64_t)__p[1] - 1) & (int)prime;
        }
        v33 = (char **)*((_QWORD *)__p[0] + v18);
        if (v33)
        {
          for (i = *v33; i; i = *(char **)i)
          {
            v35 = *((_QWORD *)i + 1);
            if (v35 == (int)prime)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)prime)
                goto LABEL_91;
            }
            else
            {
              if (v32.u32[0] > 1uLL)
              {
                if ((void *)v35 >= __p[1])
                  v35 %= (unint64_t)__p[1];
              }
              else
              {
                v35 &= (unint64_t)__p[1] - 1;
              }
              if (v35 != v18)
                break;
            }
          }
        }
      }
      prime = (char *)operator new(0x30uLL);
      i = prime;
      *(_QWORD *)prime = 0;
      *((_QWORD *)prime + 1) = v30;
      *((_DWORD *)prime + 4) = v29;
      *((_QWORD *)prime + 4) = 0;
      *((_QWORD *)prime + 5) = 0;
      *((_QWORD *)prime + 3) = 0;
      v36 = (float)(unint64_t)(*((_QWORD *)&v190 + 1) + 1);
      if (!v31 || (float)(*(float *)&v191 * (float)v31) < v36)
      {
        v37 = (v31 & (v31 - 1)) != 0;
        if (v31 < 3)
          v37 = 1;
        v38 = v37 | (2 * v31);
        v39 = vcvtps_u32_f32(v36 / *(float *)&v191);
        if (v38 <= v39)
          v40 = v39;
        else
          v40 = v38;
        if (v40 == 1)
        {
          v40 = 2;
        }
        else if ((v40 & (v40 - 1)) != 0)
        {
          prime = (char *)std::__next_prime(v40);
          v40 = (size_t)prime;
          v31 = (unint64_t)__p[1];
        }
        if (v40 > v31)
          goto LABEL_47;
        if (v40 < v31)
        {
          prime = (char *)vcvtps_u32_f32((float)*((unint64_t *)&v190 + 1) / *(float *)&v191);
          if (v31 < 3 || (v46 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
          {
            prime = (char *)std::__next_prime((size_t)prime);
          }
          else
          {
            v47 = 1 << -(char)__clz((unint64_t)(prime - 1));
            if ((unint64_t)prime >= 2)
              prime = (char *)v47;
          }
          if (v40 <= (unint64_t)prime)
            v40 = (size_t)prime;
          if (v40 >= v31)
          {
            v31 = (unint64_t)__p[1];
          }
          else
          {
            if (v40)
            {
LABEL_47:
              if (v40 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v41 = operator new(8 * v40);
              prime = (char *)__p[0];
              __p[0] = v41;
              if (prime)
                operator delete(prime);
              v42 = 0;
              __p[1] = (void *)v40;
              do
                *((_QWORD *)__p[0] + v42++) = 0;
              while (v40 != v42);
              v43 = (_QWORD **)v190;
              if ((_QWORD)v190)
              {
                v44 = *(_QWORD *)(v190 + 8);
                v45 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
                v45.i16[0] = vaddlv_u8(v45);
                if (v45.u32[0] > 1uLL)
                {
                  if (v44 >= v40)
                    v44 %= v40;
                }
                else
                {
                  v44 &= v40 - 1;
                }
                *((_QWORD *)__p[0] + v44) = &v190;
                for (j = *v43; j; v44 = v49)
                {
                  v49 = j[1];
                  if (v45.u32[0] > 1uLL)
                  {
                    if (v49 >= v40)
                      v49 %= v40;
                  }
                  else
                  {
                    v49 &= v40 - 1;
                  }
                  if (v49 != v44)
                  {
                    if (!*((_QWORD *)__p[0] + v49))
                    {
                      *((_QWORD *)__p[0] + v49) = v43;
                      goto LABEL_72;
                    }
                    *v43 = (_QWORD *)*j;
                    *j = **((_QWORD **)__p[0] + v49);
                    **((_QWORD **)__p[0] + v49) = j;
                    j = v43;
                  }
                  v49 = v44;
LABEL_72:
                  v43 = (_QWORD **)j;
                  j = (_QWORD *)*j;
                }
              }
              v31 = v40;
              goto LABEL_76;
            }
            prime = (char *)__p[0];
            __p[0] = 0;
            if (prime)
              operator delete(prime);
            v31 = 0;
            __p[1] = 0;
          }
        }
LABEL_76:
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v31 <= v30)
            v18 = v30 % v31;
          else
            v18 = v30;
        }
        else
        {
          v18 = (v31 - 1) & v30;
        }
      }
      v50 = __p[0];
      v51 = (char **)*((_QWORD *)__p[0] + v18);
      if (v51)
      {
        *(_QWORD *)i = *v51;
LABEL_89:
        *v51 = i;
        goto LABEL_90;
      }
      *(_QWORD *)i = v190;
      *(_QWORD *)&v190 = i;
      v50[v18] = &v190;
      if (*(_QWORD *)i)
      {
        v52 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v52 >= v31)
            v52 %= v31;
        }
        else
        {
          v52 &= v31 - 1;
        }
        v51 = (char **)((char *)__p[0] + 8 * v52);
        goto LABEL_89;
      }
LABEL_90:
      ++*((_QWORD *)&v190 + 1);
LABEL_91:
      v53 = *((_QWORD *)i + 5);
      v54 = (char *)*((_QWORD *)i + 4);
      if ((unint64_t)v54 >= v53)
      {
        prime = (char *)*((_QWORD *)i + 3);
        v56 = (v54 - prime) >> 2;
        if ((unint64_t)(v56 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v57 = v53 - (_QWORD)prime;
        v58 = (uint64_t)(v53 - (_QWORD)prime) >> 1;
        if (v58 <= v56 + 1)
          v58 = v56 + 1;
        if (v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(i + 40), v59);
          prime = (char *)*((_QWORD *)i + 3);
          v54 = (char *)*((_QWORD *)i + 4);
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[4 * v56];
        *(_DWORD *)v61 = v27;
        v55 = v61 + 4;
        while (v54 != prime)
        {
          v62 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        *((_QWORD *)i + 3) = v61;
        *((_QWORD *)i + 4) = v55;
        *((_QWORD *)i + 5) = &v60[4 * v59];
        if (prime)
          operator delete(prime);
      }
      else
      {
        *(_DWORD *)v54 = v27;
        v55 = v54 + 4;
      }
      *((_QWORD *)i + 4) = v55;
      ++v27;
    }
    while (v27 < (a2[1] - *a2) >> 7);
    v64 = (int **)v190;
    v186[0] = 0;
    v186[1] = 0;
    *(_QWORD *)&v187 = 0;
    for (k = v168; v64; v64 = (int **)*v64)
    {
      v65 = (char *)v64[3];
      if ((char *)v64[4] - v65 == 4)
      {
        v66 = *a2 + ((uint64_t)*(int *)v65 << 7);
        v67 = (char *)v186[1];
        if (v186[1] >= (void *)v187)
        {
          prime = (char *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)v186, v66);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v187, (uint64_t)v186[1], v66);
          prime = v67 + 128;
        }
        v186[1] = prime;
      }
      else
      {
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::mergeOverlappingGroups((uint64_t)prime, a2, v64 + 3, (uint64_t)v198);
        v68 = (char *)v186[1];
        if (v186[1] >= (void *)v187)
        {
          v74 = (void *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion>((uint64_t *)v186, (uint64_t)v198);
        }
        else
        {
          *(_DWORD *)v186[1] = v198[0];
          v69 = v198[1];
          v198[1] = 0;
          *((_QWORD *)v68 + 1) = v69;
          v70 = *(_OWORD *)&v198[4];
          *((_OWORD *)v68 + 1) = *(_OWORD *)&v198[2];
          *((_OWORD *)v68 + 2) = v70;
          v71 = *(_OWORD *)&v198[6];
          v72 = *(_OWORD *)&v198[8];
          v73 = *(_OWORD *)&v198[10];
          *((_DWORD *)v68 + 24) = v198[12];
          *((_OWORD *)v68 + 4) = v72;
          *((_OWORD *)v68 + 5) = v73;
          *((_OWORD *)v68 + 3) = v71;
          *((_QWORD *)v68 + 13) = 0;
          *((_QWORD *)v68 + 14) = 0;
          *((_QWORD *)v68 + 15) = 0;
          *(_OWORD *)(v68 + 104) = v199;
          *((_QWORD *)v68 + 15) = v200;
          v199 = 0uLL;
          v200 = 0;
          v74 = v68 + 128;
        }
        v186[1] = v74;
        v173 = (void **)&v199;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v173);

      }
    }
LABEL_133:
    if (v186 != (void **)a2)
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(a2, (uint64_t)v186[0], (uint64_t)v186[1], ((char *)v186[1] - (char *)v186[0]) >> 7);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(std::vector<CRTextRecognition::CRCTLD::CTLDRegion> &,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,CRLayoutDirection,objc_object  {objcproto14CRCTLDDelegate}*)::$_0::operator()((uint64_t)v171, (uint64_t)v172, a2);
    v198[0] = v186;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);
    std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::~__hash_table((uint64_t)__p);
    v63 = 1;
LABEL_136:
    v75 = v176;
    if (v176)
    {
      v177 = v176;
      operator delete(v176);
    }
    if ((_BYTE)v170)
      v76 = 1;
    else
      v76 = v63;
    v170 = v76;
    v14 = 1;
    if ((v63 & 1) == 0)
    {
      v14 = k;
      if (*((_BYTE *)a1 + 48))
      {
        while (2)
        {
          LODWORD(v198[0]) = -1;
          v200 = 0;
          v199 = 0uLL;
          memset(&v198[1], 0, 92);
          v77 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*a2;
          v78 = (const CRTextRecognition::CRCTLD::CTLDRegion *)a2[1];
          while (v77 != v78)
          {
            CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)v198, v77);
            v77 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v77 + 128);
          }
          CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)v198, (uint64_t)__p);
          v169 = v14;
          LODWORD(v198[0]) = __p[0];
          v79 = __p[1];
          __p[1] = 0;
          v80 = (void *)v198[1];
          v198[1] = v79;

          *(_OWORD *)&v198[6] = v192;
          *(_OWORD *)&v198[8] = v193;
          *(_OWORD *)&v198[10] = v194;
          LODWORD(v198[12]) = v195;
          *(_OWORD *)&v198[2] = v190;
          *(_OWORD *)&v198[4] = v191;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)&v199);
          v199 = v196;
          v200 = v197;
          v197 = 0;
          v196 = 0uLL;
          v176 = &v196;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);

          v81 = 0;
          v82 = (float *)*((_QWORD *)&v199 + 1);
          v83 = (float *)v199;
          if ((_QWORD)v199 == *((_QWORD *)&v199 + 1))
            goto LABEL_264;
          for (m = (float *)(v199 + 128); ; m += 32)
          {
            if (m == v82)
              goto LABEL_264;
            v86 = v83[6];
            v85 = v83[7];
            v88 = v83[38];
            v87 = v83[39];
            if ((float)(v88 + v87) * 0.5 - (float)(v86 + v85) * 0.5 < 0.0)
            {
              v89 = v83[4];
              v90 = v83[5];
              v91 = v83[36];
              v92 = v83[37];
              if ((float)(v91 + v92) * 0.5 - (float)(v89 + v90) * 0.5 < 0.0)
                break;
            }
LABEL_260:
            v81 = 0;
            v83 += 32;
            if (v83 == v82)
              goto LABEL_264;
          }
          if (v88 < v86)
            v86 = v83[38];
          if (v85 < v87)
            v85 = v83[39];
          LODWORD(__p[0]) = -1;
          __p[1] = 0;
          if (v91 >= v89)
            v93 = v89;
          else
            v93 = v91;
          if (v90 >= v92)
            v94 = v90;
          else
            v94 = v92;
          *(_QWORD *)&v190 = __PAIR64__(LODWORD(v94), LODWORD(v93));
          *((_QWORD *)&v190 + 1) = __PAIR64__(LODWORD(v85), LODWORD(v86));
          v197 = 0;
          v196 = 0uLL;
          *(double *)&v191 = v86;
          *((double *)&v191 + 1) = v93;
          *(double *)&v192 = v85;
          *((double *)&v192 + 1) = v93;
          *(double *)&v193 = v86;
          *((double *)&v193 + 1) = v94;
          *(double *)&v194 = v85;
          *((double *)&v194 + 1) = v94;
          v195 = 0;
          *(_OWORD *)v186 = 0u;
          v187 = 0u;
          v188 = 1.0;
          v95 = *a2;
          if (a2[1] == *a2)
          {
LABEL_259:
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v186);
            v176 = &v196;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);

            v82 = (float *)*((_QWORD *)&v199 + 1);
            goto LABEL_260;
          }
          v96 = 0;
LABEL_163:
          v97 = v95 + (v96 << 7);
          if (*((float *)&v190 + 2) >= *(float *)(v97 + 28))
            goto LABEL_242;
          if (*((float *)&v190 + 3) <= *(float *)(v97 + 24))
            goto LABEL_242;
          v98 = v95 + (v96 << 7);
          if (*(float *)&v190 >= *(float *)(v98 + 20) || *((float *)&v190 + 1) <= *(float *)(v98 + 16))
            goto LABEL_242;
          v99 = v187;
          if ((_QWORD)v187)
          {
            while ((CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkGroupsMergeConsistency(a1, v13, (const CRTextRecognition::CRCTLD::CTLDRegion *)(*a2 + (v96 << 7)), (const CRTextRecognition::CRCTLD::CTLDRegion *)(*a2 + ((uint64_t)*(int *)(v99 + 16) << 7))) & 1) != 0)
            {
              v99 = *(_QWORD *)v99;
              if (!v99)
                goto LABEL_170;
            }
            goto LABEL_242;
          }
LABEL_170:
          v100 = (unint64_t)v186[1];
          if (v186[1])
          {
            v101 = (uint8x8_t)vcnt_s8((int8x8_t)v186[1]);
            v101.i16[0] = vaddlv_u8(v101);
            if (v101.u32[0] > 1uLL)
            {
              v99 = v96;
              if (v186[1] <= (void *)v96)
                v99 = v96 % (unint64_t)v186[1];
            }
            else
            {
              v99 = ((unint64_t)v186[1] + 0x7FFFFFFF) & v96;
            }
            v102 = (uint64_t **)*((_QWORD *)v186[0] + v99);
            if (v102)
            {
              for (n = *v102; n; n = (uint64_t *)*n)
              {
                v104 = n[1];
                if (v104 == v96)
                {
                  if (v96 == *((_DWORD *)n + 4))
                    goto LABEL_242;
                }
                else
                {
                  if (v101.u32[0] > 1uLL)
                  {
                    if ((void *)v104 >= v186[1])
                      v104 %= (unint64_t)v186[1];
                  }
                  else
                  {
                    v104 &= (unint64_t)v186[1] - 1;
                  }
                  if (v104 != v99)
                    break;
                }
              }
            }
          }
          v105 = operator new(0x18uLL);
          *v105 = 0;
          v105[1] = v96;
          *((_DWORD *)v105 + 4) = v96;
          v106 = (float)(unint64_t)(*((_QWORD *)&v187 + 1) + 1);
          if (!v100 || (float)(v188 * (float)v100) < v106)
          {
            v107 = (v100 & (v100 - 1)) != 0;
            if (v100 < 3)
              v107 = 1;
            v108 = v107 | (2 * v100);
            v109 = vcvtps_u32_f32(v106 / v188);
            if (v108 <= v109)
              v110 = (int8x8_t)v109;
            else
              v110 = (int8x8_t)v108;
            if (*(_QWORD *)&v110 == 1)
            {
              v110 = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&v110 & (*(_QWORD *)&v110 - 1)) != 0)
            {
              v110 = (int8x8_t)std::__next_prime(*(_QWORD *)&v110);
              v100 = (unint64_t)v186[1];
            }
            if (*(_QWORD *)&v110 <= v100)
            {
              if (*(_QWORD *)&v110 < v100)
              {
                v117 = vcvtps_u32_f32((float)*((unint64_t *)&v187 + 1) / v188);
                if (v100 < 3
                  || (v118 = (uint8x8_t)vcnt_s8((int8x8_t)v100), v118.i16[0] = vaddlv_u8(v118), v118.u32[0] > 1uLL))
                {
                  v117 = std::__next_prime(v117);
                }
                else
                {
                  v119 = 1 << -(char)__clz(v117 - 1);
                  if (v117 >= 2)
                    v117 = v119;
                }
                if (*(_QWORD *)&v110 <= v117)
                  v110 = (int8x8_t)v117;
                if (*(_QWORD *)&v110 >= v100)
                {
                  v100 = (unint64_t)v186[1];
                }
                else
                {
                  if (v110)
                    goto LABEL_198;
                  v126 = v186[0];
                  v186[0] = 0;
                  if (v126)
                    operator delete(v126);
                  v100 = 0;
                  v186[1] = 0;
                }
              }
            }
            else
            {
LABEL_198:
              if (*(_QWORD *)&v110 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v111 = operator new(8 * *(_QWORD *)&v110);
              v112 = v186[0];
              v186[0] = v111;
              if (v112)
                operator delete(v112);
              v113 = 0;
              v186[1] = (void *)v110;
              do
                *((_QWORD *)v186[0] + v113++) = 0;
              while (*(_QWORD *)&v110 != v113);
              v114 = (_QWORD **)v187;
              if ((_QWORD)v187)
              {
                v115 = *(_QWORD *)(v187 + 8);
                v116 = (uint8x8_t)vcnt_s8(v110);
                v116.i16[0] = vaddlv_u8(v116);
                if (v116.u32[0] > 1uLL)
                {
                  if (v115 >= *(_QWORD *)&v110)
                    v115 %= *(_QWORD *)&v110;
                }
                else
                {
                  v115 &= *(_QWORD *)&v110 - 1;
                }
                *((_QWORD *)v186[0] + v115) = &v187;
                for (ii = *v114; ii; v115 = v121)
                {
                  v121 = ii[1];
                  if (v116.u32[0] > 1uLL)
                  {
                    if (v121 >= *(_QWORD *)&v110)
                      v121 %= *(_QWORD *)&v110;
                  }
                  else
                  {
                    v121 &= *(_QWORD *)&v110 - 1;
                  }
                  if (v121 != v115)
                  {
                    if (!*((_QWORD *)v186[0] + v121))
                    {
                      *((_QWORD *)v186[0] + v121) = v114;
                      goto LABEL_223;
                    }
                    *v114 = (_QWORD *)*ii;
                    *ii = **((_QWORD **)v186[0] + v121);
                    **((_QWORD **)v186[0] + v121) = ii;
                    ii = v114;
                  }
                  v121 = v115;
LABEL_223:
                  v114 = (_QWORD **)ii;
                  ii = (_QWORD *)*ii;
                }
              }
              v100 = (unint64_t)v110;
            }
            if ((v100 & (v100 - 1)) != 0)
            {
              if (v100 <= v96)
                v99 = v96 % v100;
              else
                v99 = v96;
            }
            else
            {
              v99 = (v100 + 0x7FFFFFFF) & v96;
            }
          }
          v122 = v186[0];
          v123 = (_QWORD *)*((_QWORD *)v186[0] + v99);
          if (v123)
          {
            *v105 = *v123;
            goto LABEL_240;
          }
          *v105 = v187;
          *(_QWORD *)&v187 = v105;
          v122[v99] = &v187;
          if (*v105)
          {
            v124 = *(_QWORD *)(*v105 + 8);
            if ((v100 & (v100 - 1)) != 0)
            {
              if (v124 >= v100)
                v124 %= v100;
            }
            else
            {
              v124 &= v100 - 1;
            }
            v123 = (char *)v186[0] + 8 * v124;
LABEL_240:
            *v123 = v105;
          }
          ++*((_QWORD *)&v187 + 1);
LABEL_242:
          ++v96;
          v95 = *a2;
          v125 = (a2[1] - *a2) >> 7;
          if (v125 <= v96)
          {
            if (!*((_QWORD *)&v187 + 1))
              goto LABEL_259;
            if (*((_QWORD *)&v187 + 1) == 1)
            {
              v127 = *(int *)(v187 + 16);
              v128 = v95 + (v127 << 7);
              v129 = *(_QWORD *)(v128 + 104);
              v130 = *(_QWORD *)(v128 + 112);
              while (v129 != v130)
              {
                if (*(_QWORD *)(v129 + 104) != *(_QWORD *)(v129 + 112))
                {
                  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)(v95 + (v127 << 7)), (uint64_t)&v176);
                  v131 = *a2 + (v127 << 7);
                  *(_DWORD *)v131 = (_DWORD)v176;
                  v132 = v177;
                  v177 = 0;
                  v133 = *(void **)(v131 + 8);
                  *(_QWORD *)(v131 + 8) = v132;

                  v134 = v179;
                  *(_OWORD *)(v131 + 16) = v178;
                  *(_OWORD *)(v131 + 32) = v134;
                  v135 = v180;
                  v136 = v181;
                  v137 = v182;
                  *(_DWORD *)(v131 + 96) = v183;
                  *(_OWORD *)(v131 + 64) = v136;
                  *(_OWORD *)(v131 + 80) = v137;
                  *(_OWORD *)(v131 + 48) = v135;
                  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v131 + 104));
                  *(_OWORD *)(v131 + 104) = v184;
                  *(_QWORD *)(v131 + 120) = v185;
                  v184 = 0uLL;
                  v185 = 0;
                  v173 = (void **)&v184;
                  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v173);

                  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v138, *(_QWORD *)(*a2 + (v127 << 7) + 104), *(_QWORD *)(*a2 + (v127 << 7) + 112));
                  goto LABEL_263;
                }
                v129 += 128;
              }
              goto LABEL_259;
            }
            v173 = 0;
            v174 = 0;
            v175 = 0;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::reserve((uint64_t *)&v173, v125 - *((_QWORD *)&v187 + 1) + 1);
            CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::flatMergeGroups(a1, a2, (uint64_t)v186, (uint64_t)&v176);
            v140 = v174;
            if ((unint64_t)v174 >= v175)
            {
              v146 = (_DWORD *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion>((uint64_t *)&v173, (uint64_t)&v176);
            }
            else
            {
              *v174 = (_DWORD)v176;
              v141 = v177;
              v177 = 0;
              *((_QWORD *)v140 + 1) = v141;
              v142 = v179;
              *((_OWORD *)v140 + 1) = v178;
              *((_OWORD *)v140 + 2) = v142;
              v143 = v180;
              v144 = v181;
              v145 = v182;
              v140[24] = v183;
              *((_OWORD *)v140 + 4) = v144;
              *((_OWORD *)v140 + 5) = v145;
              *((_OWORD *)v140 + 3) = v143;
              *((_QWORD *)v140 + 13) = 0;
              *((_QWORD *)v140 + 14) = 0;
              *((_QWORD *)v140 + 15) = 0;
              *(_OWORD *)(v140 + 26) = v184;
              *((_QWORD *)v140 + 15) = v185;
              v184 = 0uLL;
              v185 = 0;
              v146 = v140 + 32;
            }
            v174 = v146;
            v201 = (void **)&v184;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v201);

            v148 = *a2;
            v149 = a2[1];
            if (v149 == *a2)
            {
              v148 = a2[1];
            }
            else
            {
              v150 = 0;
              do
              {
                if (v186[1])
                {
                  v151 = (uint8x8_t)vcnt_s8((int8x8_t)v186[1]);
                  v151.i16[0] = vaddlv_u8(v151);
                  if (v151.u32[0] > 1uLL)
                  {
                    v152 = v150;
                    if (v186[1] <= (void *)v150)
                      v152 = v150 % (unint64_t)v186[1];
                  }
                  else
                  {
                    v152 = ((unint64_t)v186[1] + 0x7FFFFFFF) & v150;
                  }
                  v153 = (uint64_t **)*((_QWORD *)v186[0] + v152);
                  if (v153)
                  {
                    for (jj = *v153; jj; jj = (uint64_t *)*jj)
                    {
                      v155 = jj[1];
                      if (v155 == v150)
                      {
                        if (v150 == *((_DWORD *)jj + 4))
                          goto LABEL_295;
                      }
                      else
                      {
                        if (v151.u32[0] > 1uLL)
                        {
                          if ((void *)v155 >= v186[1])
                            v155 %= (unint64_t)v186[1];
                        }
                        else
                        {
                          v155 &= (unint64_t)v186[1] - 1;
                        }
                        if (v155 != v152)
                          break;
                      }
                    }
                  }
                }
                v156 = v174;
                if ((unint64_t)v174 >= v175)
                {
                  v147 = (_DWORD *)std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)&v173, v148 + (v150 << 7));
                }
                else
                {
                  std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v175, (uint64_t)v174, v148 + (v150 << 7));
                  v147 = v156 + 32;
                }
                v174 = v147;
                v148 = *a2;
                v149 = a2[1];
LABEL_295:
                ++v150;
              }
              while (v150 < (v149 - v148) >> 7);
            }
            if (&v173 != (void ***)a2)
            {
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(a2, (uint64_t)v173, (uint64_t)v174, ((char *)v174 - (char *)v173) >> 7);
              v148 = *a2;
              v149 = a2[1];
            }
            CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions((uint64_t)v147, v148, v149);
            v176 = &v173;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
LABEL_263:
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v186);
            v176 = &v196;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);

            v81 = 1;
LABEL_264:
            __p[0] = &v199;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);

            if ((_BYTE)v170)
              v139 = 1;
            else
              v139 = v81;
            v170 = v139;
            v14 = v169 | v81;
            if (!v81 || !*((_BYTE *)a1 + 48))
              break;
            continue;
          }
          goto LABEL_163;
        }
      }
      v157 = v170;
      LOBYTE(v170) = 0;
      if (!v157)
        break;
    }
  }
  if ((v14 & 1) != 0)
  {
    v158 = *a2;
    v159 = a2[1];
    if (*a2 != v159)
    {
      do
      {
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, (const CRTextRecognition::CRCTLD::CTLDRegion *)v158, (uint64_t)v198);
        *(_DWORD *)v158 = v198[0];
        v160 = v198[1];
        v198[1] = 0;
        v161 = *(void **)(v158 + 8);
        *(_QWORD *)(v158 + 8) = v160;

        v162 = *(_OWORD *)&v198[4];
        *(_OWORD *)(v158 + 16) = *(_OWORD *)&v198[2];
        *(_OWORD *)(v158 + 32) = v162;
        v163 = *(_OWORD *)&v198[6];
        v164 = *(_OWORD *)&v198[8];
        v165 = *(_OWORD *)&v198[10];
        *(_DWORD *)(v158 + 96) = v198[12];
        *(_OWORD *)(v158 + 64) = v164;
        *(_OWORD *)(v158 + 80) = v165;
        *(_OWORD *)(v158 + 48) = v163;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v158 + 104));
        *(_OWORD *)(v158 + 104) = v199;
        *(_QWORD *)(v158 + 120) = v200;
        v199 = 0uLL;
        v200 = 0;
        __p[0] = &v199;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);

        v158 += 128;
      }
      while (v158 != v159);
    }
  }
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::repairOrder((uint64_t)v75, (int **)a2, a5);

  v198[0] = &v171;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v198);

}

void sub_1D5017098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  void *v50;
  uint64_t v51;

  *(_QWORD *)(v51 - 248) = &a21;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 248));

  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(std::vector<CRTextRecognition::CRCTLD::CTLDRegion> &,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,std::vector<CRTextRecognition::CRCTLD::CTLDRegion> const&,CRLayoutDirection,objc_object  {objcproto14CRCTLDDelegate}*)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  char *v65;
  uint64_t *v66;
  _QWORD v67[3];
  char v68;
  uint64_t v69;
  uint64_t v70;

  if (a2 - a1 < 1)
    goto LABEL_29;
  v4 = (uint64_t *)a1;
  v5 = (a2 - a1) >> 7;
  v7 = *a3;
  v6 = a3[1];
  v8 = v6 - *a3;
  v9 = v8 >> 7;
  v10 = *a3 + (v8 & 0xFFFFFFFFFFFFFF80);
  v11 = a3[2];
  if (v5 > (uint64_t)(v11 - v6) >> 7)
  {
    v12 = v9 + v5;
    if ((unint64_t)(v9 + v5) >> 57)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v13 = v11 - v7;
    if (v13 >> 6 > v12)
      v12 = v13 >> 6;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFF80)
      v14 = 0x1FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v66 = a3 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a3 + 2), v14);
    else
      v15 = 0;
    v39 = (uint64_t)&v15[128 * v9];
    v63 = v15;
    *(_QWORD *)&v64 = v39;
    *((_QWORD *)&v64 + 1) = v39;
    v65 = &v15[128 * v14];
    v40 = v5 << 7;
    v41 = v39 + (v5 << 7);
    do
    {
      std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)v66, v39, (uint64_t)v4);
      v39 += 128;
      v4 += 16;
      v40 -= 128;
    }
    while (v40);
    *((_QWORD *)&v64 + 1) = v41;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>((uint64_t)(a3 + 2), v10, v10, *a3, *a3, v64, v64);
    *(_QWORD *)&v64 = v42;
    v43 = a3[1];
    v44 = v41;
    v69 = v41;
    v70 = v41;
    v67[0] = a3 + 2;
    v67[1] = &v69;
    v67[2] = &v70;
    if (v43 != v10)
    {
      do
      {
        *(_DWORD *)v44 = *(_DWORD *)v10;
        v45 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v44 + 8) = v45;
        v46 = *(_OWORD *)(v10 + 32);
        *(_OWORD *)(v44 + 16) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v44 + 32) = v46;
        v47 = *(_OWORD *)(v10 + 48);
        v48 = *(_OWORD *)(v10 + 64);
        v49 = *(_OWORD *)(v10 + 80);
        *(_DWORD *)(v44 + 96) = *(_DWORD *)(v10 + 96);
        *(_OWORD *)(v44 + 64) = v48;
        *(_OWORD *)(v44 + 80) = v49;
        *(_OWORD *)(v44 + 48) = v47;
        *(_QWORD *)(v44 + 112) = 0;
        *(_QWORD *)(v44 + 120) = 0;
        *(_QWORD *)(v44 + 104) = 0;
        *(_OWORD *)(v44 + 104) = *(_OWORD *)(v10 + 104);
        *(_QWORD *)(v44 + 120) = *(_QWORD *)(v10 + 120);
        *(_QWORD *)(v10 + 104) = 0;
        *(_QWORD *)(v10 + 112) = 0;
        *(_QWORD *)(v10 + 120) = 0;
        v44 += 128;
        v10 += 128;
      }
      while (v10 != v43);
      v70 = v44;
    }
    v68 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v67);
    v50 = *(_OWORD *)a3;
    v51 = (uint64_t)v65;
    *a3 = v64;
    a3[1] = v44;
    v64 = v50;
    v52 = a3[2];
    a3[2] = v51;
    v65 = (char *)v52;
    v63 = (char *)v50;
    a1 = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v63);
    goto LABEL_29;
  }
  v16 = (uint64_t)(v6 - v10) >> 7;
  if (v16 >= v5)
  {
    v17 = (uint64_t *)(a1 + (v5 << 7));
    v18 = a3[1];
    goto LABEL_15;
  }
  v17 = (uint64_t *)(a1 + (v16 << 7));
  a1 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t)(a3 + 2), (uint64_t)v17, a2, a3[1]);
  v18 = a1;
  a3[1] = a1;
  if ((uint64_t)(v6 - v10) >= 1)
  {
LABEL_15:
    v19 = v10 + (v5 << 7);
    v20 = v18 - (v5 << 7);
    v21 = v18;
    if (v20 < v6)
    {
      v21 = v18;
      do
      {
        *(_DWORD *)v21 = *(_DWORD *)v20;
        v22 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v21 + 8) = v22;
        v23 = *(_OWORD *)(v20 + 32);
        *(_OWORD *)(v21 + 16) = *(_OWORD *)(v20 + 16);
        *(_OWORD *)(v21 + 32) = v23;
        v24 = *(_OWORD *)(v20 + 48);
        v25 = *(_OWORD *)(v20 + 64);
        v26 = *(_OWORD *)(v20 + 80);
        *(_DWORD *)(v21 + 96) = *(_DWORD *)(v20 + 96);
        *(_OWORD *)(v21 + 64) = v25;
        *(_OWORD *)(v21 + 80) = v26;
        *(_OWORD *)(v21 + 48) = v24;
        *(_QWORD *)(v21 + 112) = 0;
        *(_QWORD *)(v21 + 120) = 0;
        *(_QWORD *)(v21 + 104) = 0;
        *(_OWORD *)(v21 + 104) = *(_OWORD *)(v20 + 104);
        *(_QWORD *)(v21 + 120) = *(_QWORD *)(v20 + 120);
        *(_QWORD *)(v20 + 104) = 0;
        *(_QWORD *)(v20 + 112) = 0;
        *(_QWORD *)(v20 + 120) = 0;
        v21 += 128;
        v20 += 128;
      }
      while (v20 < v6);
    }
    a3[1] = v21;
    if (v18 != v19)
    {
      v27 = 0;
      v28 = (v18 - v19) >> 7;
      v29 = v7 + (v9 << 7) + (v28 << 7);
      v30 = -128 * v28;
      do
      {
        v31 = v29 + v27;
        v32 = v18 + v27;
        *(_DWORD *)(v32 - 128) = *(_DWORD *)(v29 + v27 - 128);
        v33 = *(_QWORD *)(v29 + v27 - 120);
        *(_QWORD *)(v29 + v27 - 120) = 0;
        v34 = *(void **)(v18 + v27 - 120);
        *(_QWORD *)(v32 - 120) = v33;

        v35 = *(_OWORD *)(v29 + v27 - 96);
        *(_OWORD *)(v32 - 112) = *(_OWORD *)(v29 + v27 - 112);
        *(_OWORD *)(v32 - 96) = v35;
        v36 = *(_OWORD *)(v29 + v27 - 80);
        v37 = *(_OWORD *)(v29 + v27 - 64);
        v38 = *(_OWORD *)(v29 + v27 - 48);
        *(_DWORD *)(v32 - 32) = *(_DWORD *)(v29 + v27 - 32);
        *(_OWORD *)(v32 - 64) = v37;
        *(_OWORD *)(v32 - 48) = v38;
        *(_OWORD *)(v32 - 80) = v36;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v18 + v27 - 24));
        *(_OWORD *)(v32 - 24) = *(_OWORD *)(v29 + v27 - 24);
        *(_QWORD *)(v32 - 8) = *(_QWORD *)(v29 + v27 - 8);
        *(_QWORD *)(v31 - 24) = 0;
        *(_QWORD *)(v31 - 16) = 0;
        *(_QWORD *)(v31 - 8) = 0;
        v27 -= 128;
      }
      while (v30 != v27);
    }
    a1 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v4, v17, v10);
  }
LABEL_29:
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(a1, *a3, a3[1]);
  v53 = *a3;
  v54 = a3[1];
  while (v53 != v54)
  {
    if (*(_DWORD *)v53 == -100)
    {
      if (v53 != v54)
      {
        v55 = v53 + 128;
        if (v53 + 128 != v54)
        {
          do
          {
            if (*(_DWORD *)v55 != -100)
            {
              *(_DWORD *)v53 = *(_DWORD *)v55;
              v56 = *(_QWORD *)(v55 + 8);
              *(_QWORD *)(v55 + 8) = 0;
              v57 = *(void **)(v53 + 8);
              *(_QWORD *)(v53 + 8) = v56;

              v58 = *(_OWORD *)(v55 + 32);
              *(_OWORD *)(v53 + 16) = *(_OWORD *)(v55 + 16);
              *(_OWORD *)(v53 + 32) = v58;
              v59 = *(_OWORD *)(v55 + 48);
              v60 = *(_OWORD *)(v55 + 64);
              v61 = *(_OWORD *)(v55 + 80);
              *(_DWORD *)(v53 + 96) = *(_DWORD *)(v55 + 96);
              *(_OWORD *)(v53 + 64) = v60;
              *(_OWORD *)(v53 + 80) = v61;
              *(_OWORD *)(v53 + 48) = v59;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v53 + 104));
              *(_OWORD *)(v53 + 104) = *(_OWORD *)(v55 + 104);
              *(_QWORD *)(v53 + 120) = *(_QWORD *)(v55 + 120);
              *(_QWORD *)(v55 + 104) = 0;
              *(_QWORD *)(v55 + 112) = 0;
              *(_QWORD *)(v55 + 120) = 0;
              v53 += 128;
            }
            v55 += 128;
          }
          while (v55 != v54);
          v54 = a3[1];
        }
      }
      if (v53 != v54)
      {
        v62 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v54, v54, v53);
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100]((uint64_t)a3, v62);
      }
      return;
    }
    v53 += 128;
  }
}

void sub_1D5017650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this@<X0>, const CRTextRecognition::CRCTLD::CTLDRegion *a2@<X1>, uint64_t a3@<X8>)
{
  const CRTextRecognition::CRCTLD::CTLDRegion *v5;
  const CRTextRecognition::CRCTLD::CTLDRegion *v6;
  const CRTextRecognition::CRCTLD::CTLDRegion *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  const CRTextRecognition::CRCTLD::CTLDRegion *v14;
  const CRTextRecognition::CRCTLD::CTLDRegion *v15;
  uint64_t v16[13];
  _QWORD v17[3];
  void **v18;

  v5 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*((_QWORD *)a2 + 13);
  v6 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*((_QWORD *)a2 + 14);
  if (v5 == v6)
  {
LABEL_5:
    *(_DWORD *)a3 = *(_DWORD *)a2;
    v9 = *((id *)a2 + 1);
    *(_QWORD *)(a3 + 104) = 0;
    v10 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a3 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a3 + 64) = v10;
    *(_OWORD *)(a3 + 80) = *((_OWORD *)a2 + 5);
    v11 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a3 + 16) = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 96) = *((_DWORD *)a2 + 24);
    *(_OWORD *)(a3 + 32) = v11;
    v12 = *((_QWORD *)a2 + 13);
    v13 = *((_QWORD *)a2 + 14);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((_QWORD *)(a3 + 104), v12, v13, (v13 - v12) >> 7);
  }
  else
  {
    v8 = (const CRTextRecognition::CRCTLD::CTLDRegion *)*((_QWORD *)a2 + 13);
    while (*((_QWORD *)v8 + 13) == *((_QWORD *)v8 + 14))
    {
      v8 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v8 + 128);
      if (v8 == v6)
        goto LABEL_5;
    }
    *(_DWORD *)a3 = -1;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 84) = 0u;
    do
    {
      if (*((_QWORD *)v5 + 14) == *((_QWORD *)v5 + 13))
      {
        CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)a3, v5);
      }
      else
      {
        CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(v16, this, v5);
        v14 = (const CRTextRecognition::CRCTLD::CTLDRegion *)v17[0];
        v15 = (const CRTextRecognition::CRCTLD::CTLDRegion *)v17[1];
        while (v14 != v15)
        {
          CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)a3, v14);
          v14 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v14 + 128);
        }
        v18 = (void **)v17;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v18);

      }
      v5 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v5 + 128);
    }
    while (v5 != v6);
  }
}

void sub_1D50177E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion(id *this)
{
  void **v2;

  v2 = this + 13;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v2);

}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::repairOrder(uint64_t a1, int **a2, uint64_t a3)
{
  unint64_t v4;
  int *v5;
  int *v6;
  unint64_t v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  float *v25;
  float *v26;
  float v27;
  uint64_t v28;
  char *v29;
  double v30;
  double v31;
  CRTextRecognition::CRCTLD::CTLDRegion *v32;
  uint64_t v33;
  CRTextRecognition::CRCTLD::CTLDRegion *v34;
  uint64_t v35;
  float *v36;
  double v37;
  double v38;
  CRTextRecognition::CRCTLD::CTLDRegion *v39;
  uint64_t v40;
  void *__p;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  CGPoint v45;
  CGPoint v46;
  CGPoint v47;
  CGPoint v48;

  if (a3 != 5)
  {
    __p = 0;
    v42 = 0;
    v43 = 0;
    std::vector<BOOL>::reserve((char **)&__p, ((char *)a2[1] - (char *)*a2) >> 7);
    v6 = *a2;
    v5 = a2[1];
    if (v5 == *a2)
    {
      v6 = a2[1];
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = &v6[32 * v7];
        *v8 = v7;
        if (objc_msgSend(*((id *)v8 + 1), "layoutDirection") == 5)
        {
          v9 = 1;
        }
        else
        {
          v10 = &v6[32 * v7];
          v13 = *((_QWORD *)v10 + 13);
          v12 = (uint64_t *)(v10 + 26);
          v11 = v13;
          v14 = v12[1];
          v15 = v13;
          if (v13 == v14)
          {
LABEL_10:
            v9 = v15 != v11;
          }
          else
          {
            while (objc_msgSend(*(id *)(v11 + 8), "layoutDirection") == 5)
            {
              v11 += 128;
              if (v11 == v14)
              {
                v15 = *v12;
                v11 = v12[1];
                goto LABEL_10;
              }
            }
            v9 = 0;
          }
        }
        v44 = v9;
        std::vector<BOOL>::push_back((uint64_t)&__p, &v44);
        ++v7;
        v6 = *a2;
        v5 = a2[1];
      }
      while (v7 < ((char *)v5 - (char *)*a2) >> 7);
    }
    v16 = v42;
    if (v42 >= 3)
    {
      v17 = __p;
      v18 = 2;
      v19 = 1;
      do
      {
        v20 = v19;
        v19 = v18;
        v21 = v20 >> 6;
        v22 = 1 << v20;
        v23 = v17[v20 >> 6];
        if (((1 << v20) & v23) == 0)
        {
          v4 = *(_QWORD *)((char *)v17 + (((v20 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v4 >> (v20 - 1)) & 1) != 0
            && ((*(_QWORD *)((char *)v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          {
            v24 = &v6[32 * v20];
            v25 = (float *)*((_QWORD *)v24 + 13);
            v26 = (float *)*((_QWORD *)v24 + 14);
            while (1)
            {
              if (v25 == v26)
              {
                v28 = v22 | v23;
                goto LABEL_30;
              }
              v27 = v25[7] - v25[6];
              if (v27 <= 0.0)
                v27 = 1.0;
              if ((float)((float)(v25[5] - v25[4]) / v27) <= 3.0)
                break;
              v25 += 32;
            }
            v28 = v23 & ~v22;
LABEL_30:
            v17[v21] = v28;
            v16 = v42;
          }
        }
        v18 = v19 + 1;
      }
      while (v19 + 1 < v16);
    }
    for (; v6 != v5; v5 = a2[1])
    {
      v29 = (char *)v6;
      if (((*(_QWORD *)((char *)__p + (((unint64_t)*v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v6) & 1) != 0)
      {
        while (((*(_QWORD *)((char *)__p + (((unint64_t)*(int *)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)v29) & 1) != 0)
        {
          v29 += 128;
          if (v29 == (char *)v5)
          {
            v29 = (char *)v5;
            break;
          }
        }
        if (v29 - (char *)v6 >= 256)
        {
          if (v6 == (int *)v29)
          {
            v4 = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v4, (uint64_t)v6, (uint64_t)v29);
          }
          else
          {
            v30 = (float)(*((float *)v6 + 6) + *((float *)v6 + 7)) * 0.5;
            v31 = (float)(*((float *)v6 + 4) + *((float *)v6 + 5)) * 0.5;
            v32 = (CRTextRecognition::CRCTLD::CTLDRegion *)v6;
            do
            {
              v45.x = v30;
              v45.y = v31;
              CRTextRecognition::CRCTLD::CTLDRegion::rotate(v32, -1.5708, v45);
              v32 = (CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v32 + 128);
            }
            while (v32 != (CRTextRecognition::CRCTLD::CTLDRegion *)v29);
            CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v33, (uint64_t)v6, (uint64_t)v29);
            v34 = (CRTextRecognition::CRCTLD::CTLDRegion *)v6;
            do
            {
              v46.x = v30;
              v46.y = v31;
              CRTextRecognition::CRCTLD::CTLDRegion::rotate(v34, 1.5708, v46);
              v34 = (CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v34 + 128);
            }
            while (v34 != (CRTextRecognition::CRCTLD::CTLDRegion *)v29);
          }
        }
        if (v6 != (int *)v29)
        {
          do
          {
            v36 = (float *)*((_QWORD *)v6 + 13);
            v35 = *((_QWORD *)v6 + 14);
            if (v35 - (uint64_t)v36 >= 256)
            {
              if (v36 == (float *)v35)
              {
                v4 = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v4, *((_QWORD *)v6 + 13), *((_QWORD *)v6 + 14));
              }
              else
              {
                v37 = (float)(v36[6] + v36[7]) * 0.5;
                v38 = (float)(v36[4] + v36[5]) * 0.5;
                v39 = (CRTextRecognition::CRCTLD::CTLDRegion *)*((_QWORD *)v6 + 13);
                do
                {
                  v47.x = v37;
                  v47.y = v38;
                  CRTextRecognition::CRCTLD::CTLDRegion::rotate(v39, -1.5708, v47);
                  v39 = (CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v39 + 128);
                }
                while (v39 != (CRTextRecognition::CRCTLD::CTLDRegion *)v35);
                CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v40, (uint64_t)v36, v35);
                do
                {
                  v48.x = v37;
                  v48.y = v38;
                  CRTextRecognition::CRCTLD::CTLDRegion::rotate((CRTextRecognition::CRCTLD::CTLDRegion *)v36, 1.5708, v48);
                  v36 += 32;
                }
                while (v36 != (float *)v35);
              }
            }
            v6 += 32;
          }
          while (v6 != (int *)v29);
          v6 = (int *)v29;
        }
      }
      else
      {
        while (((*(_QWORD *)((char *)__p + (((unint64_t)*v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v6) & 1) == 0)
        {
          v6 += 32;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_1D5017C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::mergeOverlappingGroups(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  float v8;
  int *v9;
  int v10;
  uint64_t v11;
  float *v12;
  float v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  const CRTextRecognition::CRCTLD::CTLDRegion *v34;
  unint64_t v35;
  void **v37;
  void **v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _QWORD v45[3];
  const CRTextRecognition::CRCTLD::CTLDRegion *v46;
  unint64_t v47;
  unint64_t v48;
  void **v49;

  v4 = a4;
  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v33 = 0;
    v32 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v7 = -1;
    v8 = 0.0;
    v9 = *a3;
    do
    {
      v11 = *v9++;
      v10 = v11;
      v12 = (float *)(*a2 + (v11 << 7));
      v13 = v12[5] - v12[4];
      if ((float)((float)(v12[7] - v12[6]) * v13) > v8)
      {
        v7 = v10;
        v8 = (float)(v12[7] - v12[6]) * v13;
      }
    }
    while (v9 != v6);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v14 = a2;
    do
    {
      v15 = *v5;
      if ((_DWORD)v15 == v7)
      {
        v16 = *a2 + ((uint64_t)v7 << 7);
        v18 = *(_QWORD *)(v16 + 104);
        v17 = *(_QWORD *)(v16 + 112);
        while (v18 != v17)
        {
          LODWORD(v37) = *(_DWORD *)v18;
          v38 = (void **)*(id *)(v18 + 8);
          v19 = *(_OWORD *)(v18 + 32);
          v39 = *(_OWORD *)(v18 + 16);
          v40 = v19;
          v20 = *(_OWORD *)(v18 + 48);
          v21 = *(_OWORD *)(v18 + 64);
          v22 = *(_OWORD *)(v18 + 80);
          v44 = *(_DWORD *)(v18 + 96);
          v42 = v21;
          v43 = v22;
          v41 = v20;
          memset(v45, 0, sizeof(v45));
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v45, *(_QWORD *)(v18 + 104), *(_QWORD *)(v18 + 112), (uint64_t)(*(_QWORD *)(v18 + 112) - *(_QWORD *)(v18 + 104)) >> 7);
          v23 = v47;
          if (v47 >= v48)
          {
            v24 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t *)&v46, (uint64_t)&v37);
          }
          else
          {
            std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)&v48, v47, (uint64_t)&v37);
            v24 = v23 + 128;
          }
          v47 = v24;
          v49 = (void **)v45;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v49);

          v18 += 128;
        }
      }
      else
      {
        v25 = *a2 + (v15 << 7);
        v26 = v47;
        if (v47 >= v48)
        {
          v28 = (uint64_t)(v47 - (_QWORD)v46) >> 7;
          if ((unint64_t)(v28 + 1) >> 57)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v29 = (uint64_t)(v48 - (_QWORD)v46) >> 6;
          if (v29 <= v28 + 1)
            v29 = v28 + 1;
          if (v48 - (unint64_t)v46 >= 0x7FFFFFFFFFFFFF80)
            v30 = 0x1FFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          *(_QWORD *)&v40 = &v48;
          if (v30)
            v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)&v48, v30);
          else
            v31 = 0;
          v37 = v31;
          v38 = &v31[16 * v28];
          *(_QWORD *)&v39 = v38;
          *((_QWORD *)&v39 + 1) = &v31[16 * v30];
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v38, v25);
          *(_QWORD *)&v39 = v39 + 128;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer((uint64_t *)&v46, &v37);
          v27 = v47;
          a1 = std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v37);
        }
        else
        {
          a1 = (uint64_t)std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v47, v25);
          v27 = v26 + 128;
        }
        v47 = v27;
      }
      ++v5;
      a2 = v14;
    }
    while (v5 != v6);
    v32 = (uint64_t)v46;
    v33 = v47;
    v4 = a4;
  }
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(a1, v32, v33);
  *(_DWORD *)v4 = -1;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 84) = 0u;
  v34 = v46;
  v35 = v47;
  while (v34 != (const CRTextRecognition::CRCTLD::CTLDRegion *)v35)
  {
    CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)v4, v34);
    v34 = (const CRTextRecognition::CRCTLD::CTLDRegion *)((char *)v34 + 128);
  }
  v37 = (void **)&v46;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v37);
}

void sub_1D5017F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v1 - 120;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::flatMergeGroups@<X0>(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v7;
  id v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  void **v24;

  *(_DWORD *)a4 = -1;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  v7 = (uint64_t **)(a3 + 16);
  *(_OWORD *)(a4 + 84) = 0u;
  while (1)
  {
    v7 = (uint64_t **)*v7;
    if (!v7)
      break;
    CRTextRecognition::CRCTLD::CTLDRegion::addMember((CRTextRecognition::CRCTLD::CTLDRegion *)a4, (const CRTextRecognition::CRCTLD::CTLDRegion *)(*a2 + ((uint64_t)*((int *)v7 + 4) << 7)));
  }
  CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(this, (const CRTextRecognition::CRCTLD::CTLDRegion *)a4, (uint64_t)&v14);
  *(_DWORD *)a4 = v14;
  v8 = v15;
  v15 = 0;
  v9 = *(void **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v8;

  v10 = v19;
  *(_OWORD *)(a4 + 48) = v18;
  *(_OWORD *)(a4 + 64) = v10;
  *(_OWORD *)(a4 + 80) = v20;
  *(_DWORD *)(a4 + 96) = v21;
  v11 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  *(_OWORD *)(a4 + 32) = v11;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a4 + 104));
  *(_OWORD *)(a4 + 104) = v22;
  *(_QWORD *)(a4 + 120) = v23;
  v23 = 0;
  v22 = 0uLL;
  v24 = (void **)&v22;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v24);

  return CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortRegions(v12, *(_QWORD *)(a4 + 104), *(_QWORD *)(a4 + 112));
}

void sub_1D50180D8(_Unwind_Exception *a1)
{
  id *v1;

  CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion(v1);
  _Unwind_Resume(a1);
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::distanceBetweenCenterOfRegions(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2, const CRTextRecognition::CRCTLD::CTLDRegion *a3)
{
  float v3;
  float v4;
  float v5;

  v3 = (float)(*((float *)a2 + 4) + *((float *)a2 + 5)) * 0.5;
  v4 = *((float *)a3 + 4) + *((float *)a3 + 5);
  v5 = (float)((float)(*((float *)a2 + 6) + *((float *)a2 + 7)) * 0.5)
     - (float)((float)(*((float *)a3 + 6) + *((float *)a3 + 7)) * 0.5);
  return (float)((float)(v3 - (float)(v4 * 0.5)) * (float)(v3 - (float)(v4 * 0.5))) + (float)(v5 * v5);
}

BOOL CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkRegionsLayoutDirection(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, id *a2, id *a3)
{
  uint64_t v5;

  if (!objc_msgSend(a2[1], "layoutDirection")
    || !objc_msgSend(a3[1], "layoutDirection")
    || objc_msgSend(a2[1], "layoutDirection") != 5 && objc_msgSend(a3[1], "layoutDirection") != 5)
  {
    return 1;
  }
  v5 = objc_msgSend(a2[1], "layoutDirection");
  return v5 == objc_msgSend(a3[1], "layoutDirection");
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::skipWhitespaceDueToDirectionsSwapped(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, float a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = objc_msgSend(*(id *)(a2 + 8), "layoutDirection");
  if (result)
  {
    v13 = objc_msgSend(*(id *)(a3 + 8), "layoutDirection");
    result = 0;
    if (a5)
    {
      if (v13)
      {
        v14 = objc_msgSend(*(id *)(a2 + 8), "layoutDirection");
        result = (v14 == objc_msgSend(*(id *)(a3 + 8), "layoutDirection")
               && objc_msgSend(*(id *)(a2 + 8), "layoutDirection") != a5
               && objc_msgSend(*(id *)(a2 + 8), "layoutDirection") == 5
               || (unint64_t)(objc_msgSend(*(id *)(a2 + 8), "layoutDirection") - 1) <= 1
               && (v15 = objc_msgSend(*(id *)(a3 + 8), "layoutDirection"), a5 == 5)
               && (unint64_t)(v15 - 1) <= 1)
              && ((float)(a4[7] - a4[6]) < (float)(*(float *)(a1 + 16) * a6)
               || (float)(a4[5] - a4[4]) < (float)(*(float *)(a1 + 12) * a6));
      }
    }
  }
  return result;
}

uint64_t CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::checkGroupsMergeConsistency(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *a1, void *a2, const CRTextRecognition::CRCTLD::CTLDRegion *a3, const CRTextRecognition::CRCTLD::CTLDRegion *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v14[13];
  _QWORD v15[3];
  _BYTE v16[8];
  id v17;
  _QWORD v18[3];
  void **v19;

  v7 = a2;
  if (v7)
  {
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, a3, (uint64_t)v16);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::unfoldHierarchicalGroups(a1, a4, (uint64_t)v14);
    v8 = v18[0];
    v9 = v18[1];
LABEL_3:
    if (v8 == v9)
    {
      v12 = 1;
    }
    else
    {
      v10 = v15[0];
      v11 = v15[1];
      while (1)
      {
        if (v10 == v11)
        {
          v8 += 128;
          goto LABEL_3;
        }
        if (objc_msgSend(v7, "groupingConstraintForRegion1:region2:", *(_QWORD *)(v8 + 8), *(_QWORD *)(v10 + 8)) == 1)
          break;
        v10 += 128;
      }
      v12 = 0;
    }
    v19 = (void **)v15;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v19);

    v14[0] = (void **)v18;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v14);

  }
  else
  {
    v12 = 1;
  }

  return v12;
}

void sub_1D50183C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion(&a26);

  _Unwind_Resume(a1);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::preprocessTextRegions(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  void **v35;
  void **v36;
  void ***v37;
  void **v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _QWORD v45[5];
  CGPoint v46;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v8 = a1;
    v9 = 0;
    v10 = (unint64_t *)(a3 + 2);
    do
    {
      v11 = v5 + (v9 << 7);
      v12 = *(float *)(v11 + 96);
      if (v12 == 0.0)
      {
        v13 = a3[1];
        if (v13 >= a3[2])
        {
          v14 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(a3, v11);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)(a3 + 2), a3[1], v11);
          v14 = v13 + 128;
          a3[1] = v13 + 128;
        }
        a3[1] = v14;
      }
      else if (fabsf(v12) <= *(float *)(v8 + 24))
      {
        LODWORD(v37) = *(_DWORD *)v11;
        v27 = v5 + (v9 << 7);
        v38 = (void **)*(id *)(v27 + 8);
        v28 = *(_OWORD *)(v27 + 32);
        v39 = *(_OWORD *)(v27 + 16);
        v40 = v28;
        v29 = *(_OWORD *)(v27 + 48);
        v30 = *(_OWORD *)(v27 + 64);
        v31 = *(_OWORD *)(v27 + 80);
        v44 = *(_DWORD *)(v27 + 96);
        v42 = v30;
        v43 = v31;
        v41 = v29;
        memset(v45, 0, 24);
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v45, *(_QWORD *)(v27 + 104), *(_QWORD *)(v27 + 112), (uint64_t)(*(_QWORD *)(v27 + 112) - *(_QWORD *)(v27 + 104)) >> 7);
        v46.x = (float)(*((float *)&v39 + 2) + *((float *)&v39 + 3)) * 0.5;
        v46.y = (float)(*(float *)&v39 + *((float *)&v39 + 1)) * 0.5;
        CRTextRecognition::CRCTLD::CTLDRegion::rotate((CRTextRecognition::CRCTLD::CTLDRegion *)&v37, -*(float *)(*a2 + (v9 << 7) + 96), v46);
        v32 = a3[1];
        if (v32 >= a3[2])
        {
          v33 = std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(a3, (uint64_t)&v37);
        }
        else
        {
          std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)(a3 + 2), a3[1], (uint64_t)&v37);
          v33 = v32 + 128;
          a3[1] = v32 + 128;
        }
        a3[1] = v33;
        CRTextRecognition::CRCTLD::CTLDRegion::updateBoundingBox(*a2 + (v9 << 7), *((float *)&v39 + 2), *((float *)&v39 + 3), *(float *)&v39, *((float *)&v39 + 1));
        v35 = (void **)v45;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v35);

      }
      else
      {
        CRTextRecognition::CRCTLD::CTLDRegion::splitRegionIntoSubRectangles((float64x2_t *)v11, *(float *)(v8 + 20) * a4, (uint64_t *)&v35);
        v15 = (float *)v35;
        v16 = (float *)v36;
        if (v35 == v36)
        {
          v20 = -3.4028e38;
          v21 = 3.4028e38;
          v18 = -3.4028e38;
          v19 = 3.4028e38;
        }
        else
        {
          v17 = a3[1];
          v18 = -3.4028e38;
          v19 = 3.4028e38;
          v20 = -3.4028e38;
          v21 = 3.4028e38;
          do
          {
            if (v17 >= *v10)
            {
              v22 = (uint64_t)(v17 - *a3) >> 7;
              if ((unint64_t)(v22 + 1) >> 57)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              v23 = *v10 - *a3;
              v24 = v23 >> 6;
              if (v23 >> 6 <= (unint64_t)(v22 + 1))
                v24 = v22 + 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF80)
                v25 = 0x1FFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              *(_QWORD *)&v40 = a3 + 2;
              if (v25)
                v26 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a3 + 2), v25);
              else
                v26 = 0;
              v37 = (void ***)v26;
              v38 = &v26[16 * v22];
              *(_QWORD *)&v39 = v38;
              *((_QWORD *)&v39 + 1) = &v26[16 * v25];
              std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>((uint64_t)v38, (uint64_t)v15);
              *(_QWORD *)&v39 = v39 + 128;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a3, &v37);
              v17 = a3[1];
              std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v37);
            }
            else
            {
              std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(v17, (uint64_t)v15);
              v17 += 128;
              a3[1] = v17;
            }
            a3[1] = v17;
            if (v19 >= v15[4])
              v19 = v15[4];
            if (v21 >= v15[6])
              v21 = v15[6];
            if (v15[5] >= v20)
              v20 = v15[5];
            if (v15[7] >= v18)
              v18 = v15[7];
            v15 += 32;
          }
          while (v15 != v16);
        }
        CRTextRecognition::CRCTLD::CTLDRegion::updateBoundingBox(*a2 + (v9 << 7), v21, v18, v19, v20);
        v37 = &v35;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        v8 = a1;
      }
      ++v9;
      v5 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 7);
  }
}

void sub_1D501876C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  *(_QWORD *)(v2 + 8) = v3;
  CRTextRecognition::CRCTLD::CTLDRegion::~CTLDRegion((id *)va1);
  v5 = (void **)v2;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::distanceBetweenGroups(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *this, const CRTextRecognition::CRCTLD::CTLDRegion *a2, const CRTextRecognition::CRCTLD::CTLDRegion *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  if (CRTextRecognition::CRCTLD::CTLDRegion::getIntersectionArea(a2, a3) > 0.0)
    return 0.0;
  v6 = *((float *)a2 + 6);
  v7 = *((float *)a2 + 7);
  v9 = *((float *)a3 + 6);
  v8 = *((float *)a3 + 7);
  v10 = v6 - v8;
  v11 = v6 <= v8;
  v12 = 0.0;
  if (!v11)
    v12 = (float)(v10 * v10) + 0.0;
  if (v7 < v9)
    v12 = v12 + (float)((float)(v9 - v7) * (float)(v9 - v7));
  v13 = *((float *)a2 + 4);
  v14 = *((float *)a2 + 5);
  v16 = *((float *)a3 + 4);
  v15 = *((float *)a3 + 5);
  v11 = v13 <= v15;
  v17 = v12 + (float)((float)(v13 - v15) * (float)(v13 - v15));
  if (!v11)
    v12 = v17;
  if (v14 < v16)
    v12 = v12 + (float)((float)(v16 - v14) * (float)(v16 - v14));
  return sqrtf(v12);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1D5018930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::groupRegions(CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  id v9;
  void *v10;
  float CharacterSize;
  float *v12[3];
  void **v13[3];
  uint64_t v14[3];
  float **v15;

  v9 = a4;
  v10 = v9;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  else
  {
    CharacterSize = CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::getCharacterSize((uint64_t)v9, (double **)a2);
    memset(v14, 0, sizeof(v14));
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v14, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 7);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::preprocessTextRegions((uint64_t)a1, v14, (uint64_t *)v13, CharacterSize);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findWhitespaceRegions((uint64_t)a1, v13, (uint64_t *)v12, CharacterSize);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::findConstrainedBlockRegions((uint64_t)a1, (uint64_t *)a2, v14, v12, a3, v10, a5, CharacterSize);
    CRTextRecognition::CRCTLD::CRConstrainedTextLineDetectionImpl::sortBlocks(a1, a5, v14, (uint64_t *)v12, a3, v10);
    v15 = v12;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    v12[0] = (float *)v13;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
    v13[0] = (void **)v14;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v13);
  }

}

void sub_1D5018A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void ***a18)
{
  void *v18;

  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = (void ***)&a9;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a9 = &a12;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a12 = (void **)&a15;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void std::deque<std::pair<int,int>>::emplace_back<int &,int>(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;

  v6 = a1[2];
  v7 = a1[1];
  if (v6 == v7)
    v8 = 0;
  else
    v8 = ((v6 - v7) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  if (v8 == v10)
  {
    std::deque<std::pair<int,int>>::__add_back_capacity(a1);
    v9 = a1[5];
    v7 = a1[1];
    v10 = a1[4] + v9;
  }
  v11 = (_DWORD *)(*(_QWORD *)(v7 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF));
  *v11 = *a2;
  v11[1] = *a3;
  a1[5] = v9 + 1;
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1D5018BC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1D5018CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 104);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v3);

}

float std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDNode,CRTextRecognition::CRCTLD::CTLDNode&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  float result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_DWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 7);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<CRTextRecognition::CRCTLD::CTLDObstacle>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDObstacle*,CRTextRecognition::CRCTLD::CTLDObstacle*>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4);
  result = *(float *)(a2 + 152);
  *(float *)(a1 + 152) = result;
  return result;
}

void sub_1D5018DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<CRTextRecognition::CRCTLD::CTLDNode>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](i - 160);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDNode *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  unint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  void **v45[16];

  if (a3 >= 2)
  {
    v45[2] = v6;
    v45[3] = v5;
    v45[14] = v3;
    v45[15] = v4;
    v8 = (unint64_t)(a3 - 2) >> 1;
    v9 = *(float *)(a2 - 8);
    if (*(float *)(a1 + 160 * v8 + 152) < v9)
    {
      v10 = a2 - 160;
      v28 = *(_DWORD *)(a2 - 160);
      v11 = *(_QWORD *)(a2 - 152);
      *(_QWORD *)(v10 + 8) = 0;
      v27 = v11;
      v32 = *(_OWORD *)(a2 - 144);
      v33 = *(_OWORD *)(a2 - 128);
      v37 = *(_DWORD *)(a2 - 64);
      v35 = *(_OWORD *)(a2 - 96);
      v36 = *(_OWORD *)(a2 - 80);
      v34 = *(_OWORD *)(a2 - 112);
      v26 = *(_QWORD *)(a2 - 56);
      v38 = v26;
      v25 = *(_QWORD *)(a2 - 48);
      v39 = v25;
      v24 = *(_QWORD *)(a2 - 40);
      v40 = v24;
      *(_QWORD *)(v10 + 112) = 0;
      *(_QWORD *)(v10 + 120) = 0;
      *(_QWORD *)(v10 + 104) = 0;
      v30 = *(void **)(a2 - 32);
      v41 = v30;
      v31 = *(_QWORD *)(a2 - 24);
      v42 = v31;
      v29 = *(_QWORD *)(a2 - 16);
      v43 = v29;
      *(_QWORD *)(v10 + 128) = 0;
      *(_QWORD *)(v10 + 136) = 0;
      *(_QWORD *)(v10 + 144) = 0;
      v44 = v9;
      do
      {
        v12 = v8;
        v13 = v10;
        v10 = a1 + 160 * v8;
        *(_DWORD *)v13 = *(_DWORD *)v10;
        v14 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        v15 = *(void **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v14;

        v16 = *(_OWORD *)(v10 + 32);
        *(_OWORD *)(v13 + 16) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v13 + 32) = v16;
        v17 = *(_OWORD *)(v10 + 48);
        v18 = *(_OWORD *)(v10 + 64);
        v19 = *(_OWORD *)(v10 + 80);
        *(_DWORD *)(v13 + 96) = *(_DWORD *)(v10 + 96);
        *(_OWORD *)(v13 + 64) = v18;
        *(_OWORD *)(v13 + 80) = v19;
        *(_OWORD *)(v13 + 48) = v17;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v13 + 104));
        *(_OWORD *)(v13 + 104) = *(_OWORD *)(v10 + 104);
        *(_QWORD *)(v13 + 120) = *(_QWORD *)(v10 + 120);
        *(_QWORD *)(v10 + 104) = 0;
        *(_QWORD *)(v10 + 112) = 0;
        *(_QWORD *)(v10 + 120) = 0;
        v20 = (void **)(v10 + 128);
        std::vector<int>::__move_assign(v13 + 128, (__n128 *)(v10 + 128));
        *(_DWORD *)(v13 + 152) = *(_DWORD *)(v10 + 152);
        if (!v12)
          break;
        v8 = (v12 - 1) >> 1;
      }
      while (*(float *)(a1 + 160 * v8 + 152) < v9);
      *(_DWORD *)v10 = v28;
      v21 = *(void **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v27;

      *(_OWORD *)(v10 + 16) = v32;
      *(_OWORD *)(v10 + 32) = v33;
      *(_DWORD *)(v10 + 96) = v37;
      *(_OWORD *)(v10 + 64) = v35;
      *(_OWORD *)(v10 + 80) = v36;
      *(_OWORD *)(v10 + 48) = v34;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v10 + 104));
      *(_QWORD *)(v10 + 104) = v26;
      *(_QWORD *)(v10 + 112) = v25;
      *(_QWORD *)(v10 + 120) = v24;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v22 = *v20;
      if (*v20)
      {
        *(_QWORD *)(a1 + 160 * v12 + 136) = v22;
        operator delete(v22);
        *v20 = 0;
        *(_QWORD *)(v10 + 136) = 0;
        *(_QWORD *)(v10 + 144) = 0;
      }
      *v20 = v30;
      v23 = a1 + 160 * v12;
      *(_QWORD *)(v23 + 136) = v31;
      *(_QWORD *)(v23 + 144) = v29;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      *(float *)(v10 + 152) = v9;
      v45[0] = (void **)&v38;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v45);

    }
  }
}

_QWORD *std::vector<CRTextRecognition::CRCTLD::CTLDObstacle>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDObstacle*,CRTextRecognition::CRCTLD::CTLDObstacle*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9 - 7);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1D501914C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDObstacle>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

void std::vector<CRTextRecognition::CRCTLD::CTLDNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<CRTextRecognition::CRCTLD::CTLDNode>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

CRTextRecognition::CRCTLD::CTLDMFSet *CRTextRecognition::CRCTLD::CTLDMFSet::CTLDMFSet(CRTextRecognition::CRCTLD::CTLDMFSet *this, int a2)
{
  void *v3;
  std::vector<int>::value_type __x;
  std::vector<int> v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  __x = -1;
  std::vector<int>::vector(&v6, a2, &__x);
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  *(std::vector<int> *)this = v6;
  return this;
}

void sub_1D501927C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = (char *)operator new(0x98uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 6) = -1;
  *((_QWORD *)v10 + 17) = 0;
  *((_QWORD *)v10 + 18) = 0;
  *((_QWORD *)v10 + 16) = 0;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *(_OWORD *)(v10 + 108) = 0u;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *(_QWORD *)v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1D5019694(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  void **v3;

  if (a1)
  {
    v3 = a2 + 16;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v3);

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (uint64_t)(a1 + 2);
  if (a4 > (a1[2] - *a1) >> 7)
  {
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(a1);
    if (a4 >> 57)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v9 = a1[2] - *a1;
    v10 = v9 >> 6;
    if (v9 >> 6 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80)
      v11 = 0x1FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  v13 = (a1[1] - *a1) >> 7;
  if (v13 < a4)
  {
    v14 = a2 + (v13 << 7);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(a2, v14);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(v8, v14, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  v15 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(a2, a3);
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, v15);
}

void sub_1D501981C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1D5019824(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>(a1, v4, v6);
      v6 += 128;
      v4 = v12 + 128;
      v12 += 128;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1D5019938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = *(id *)(a3 + 8);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 64);
  v7 = *(_OWORD *)(a3 + 80);
  v8 = *(_DWORD *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 16);
  v10 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  return std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((_QWORD *)(a2 + 104), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 112), (uint64_t)(*(_QWORD *)(a3 + 112) - *(_QWORD *)(a3 + 104)) >> 7);
}

void sub_1D50199C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v5;
  void **v6;
  uint64_t v8;
  void **v9[7];

  if (a3 != a5)
  {
    v9[5] = v5;
    v9[6] = v6;
    v8 = a3;
    do
    {
      v9[0] = (void **)(v8 - 24);
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v9);

      v8 -= 128;
    }
    while (v8 != a5);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    v5 = a1 + 14;
    do
    {
      v6 = v5 - 14;
      *(_DWORD *)a3 = *((_DWORD *)v5 - 28);
      objc_storeStrong((id *)(a3 + 8), (id)*(v5 - 13));
      v7 = *((_OWORD *)v5 - 5);
      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 - 6);
      *(_OWORD *)(a3 + 32) = v7;
      v8 = *((_OWORD *)v5 - 4);
      v9 = *((_OWORD *)v5 - 3);
      v10 = *((_OWORD *)v5 - 2);
      *(_DWORD *)(a3 + 96) = *((_DWORD *)v5 - 4);
      *(_OWORD *)(a3 + 64) = v9;
      *(_OWORD *)(a3 + 80) = v10;
      *(_OWORD *)(a3 + 48) = v8;
      if ((uint64_t *)a3 != v5 - 14)
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__assign_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t *)(a3 + 104), *(v5 - 1), *v5, (*v5 - *(v5 - 1)) >> 7);
      a3 += 128;
      v5 += 16;
    }
    while (v6 + 16 != a2);
  }
  return a3;
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 128)
  {
    v5 = (void **)(i - 24);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v5);

  }
  *(_QWORD *)(a1 + 8) = a2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 7);
}

_QWORD *std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_DWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 7);
}

void sub_1D5019C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 128);
      a3 -= 128;
      *(_DWORD *)(v7 - 128) = v8;
      v9 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(v7 - 120) = v9;
      v10 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 112) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v7 - 96) = v10;
      v11 = *(_OWORD *)(a3 + 48);
      v12 = *(_OWORD *)(a3 + 64);
      v13 = *(_OWORD *)(a3 + 80);
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 96);
      *(_OWORD *)(v7 - 64) = v12;
      *(_OWORD *)(v7 - 48) = v13;
      *(_OWORD *)(v7 - 80) = v11;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 104);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 120);
      *(_QWORD *)(a3 + 104) = 0;
      *(_QWORD *)(a3 + 112) = 0;
      *(_QWORD *)(a3 + 120) = 0;
      v7 = *((_QWORD *)&v19 + 1) - 128;
      *((_QWORD *)&v19 + 1) -= 128;
    }
    while (a3 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>,std::reverse_iterator<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  void **v6;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = (void **)(i + 104);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v6);

    i = *(_QWORD *)(a2 + 32) + 128;
  }
}

uint64_t std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 128;
    v5 = (void **)(i - 24);
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v5);

  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::__unordered_map_hasher<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,CRTextRecognition::CRCTLD::CTLDRegion>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;
  void **v6;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;
      v6 = v2 + 16;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v6);

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(int *a1, __n128 *a2, int a3, __n128 a4)
{
  __n128 *v6;
  int *v7;
  __n128 *v8;
  __n128 *v9;
  float v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  void *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  unint64_t *v28;
  void *v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  void *v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __int128 v61;
  unint64_t v62;
  __int128 v63;
  __n128 *v65;
  id v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76[2];

  if (a1 != (int *)a2)
  {
    v6 = (__n128 *)(a1 + 32);
    if (a1 + 32 != (int *)a2)
    {
      if (a3 <= 63)
      {
        v7 = a1;
        do
        {
          if ((float)(*((float *)v7 + 5) - *((float *)v7 + 4)) < (float)(v6[1].n128_f32[1] - v6[1].n128_f32[0]))
            v7 = (int *)v6;
          v6 += 8;
        }
        while (v6 != a2);
        v8 = (__n128 *)(v7 + 4);
        a4.n128_f32[0] = *((float *)v7 + 5) - *((float *)v7 + 4);
        v9 = (__n128 *)a1;
        do
        {
          v10 = v9[1].n128_f32[1] - v9[1].n128_f32[0];
          if (v10 == 0.0)
          {
            if (a4.n128_f32[0] > 0.0)
              goto LABEL_18;
          }
          else if (a4.n128_f32[0] / v10 > 1.1)
          {
LABEL_18:
            LODWORD(v65) = *v7;
            v14 = v65;
            v15 = *((_QWORD *)v7 + 1);
            *((_QWORD *)v7 + 1) = 0;
            v16 = *((__n128 *)v7 + 2);
            v67 = *v8;
            v68 = v16;
            v17 = *((__n128 *)v7 + 3);
            v18 = *((__n128 *)v7 + 4);
            v19 = *((__n128 *)v7 + 5);
            v72 = v7[24];
            v70 = v18;
            v71 = v19;
            v69 = v17;
            v62 = *((_QWORD *)v7 + 15);
            v61 = *(_OWORD *)(v7 + 26);
            *((_QWORD *)v7 + 14) = 0;
            *((_QWORD *)v7 + 15) = 0;
            *((_QWORD *)v7 + 13) = 0;
            v20 = a2 - 8;
            v21 = a2 - 7;
            *v7 = a2[-8].n128_i32[0];
            v22 = a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = 0;
            v23 = (void *)*((_QWORD *)v7 + 1);
            *((_QWORD *)v7 + 1) = v22;

            v24 = a2[-6];
            *v8 = a2[-7];
            *((__n128 *)v7 + 2) = v24;
            v25 = a2[-5];
            v26 = a2[-4];
            v27 = a2[-3];
            v7[24] = a2[-2].n128_i32[0];
            *((__n128 *)v7 + 4) = v26;
            *((__n128 *)v7 + 5) = v27;
            *((__n128 *)v7 + 3) = v25;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v7 + 13);
            v28 = &a2[-2].n128_u64[1];
            *(__n128 *)(v7 + 26) = *(__n128 *)((char *)a2 - 24);
            *((_QWORD *)v7 + 15) = a2[-1].n128_u64[1];
            *v28 = 0;
            v28[1] = 0;
            v28[2] = 0;
            v20->n128_u32[0] = v14;
            v66 = 0;
            v29 = (void *)a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = v15;

            v30 = v68;
            a2[-7] = v67;
            a2[-6] = v30;
            v31 = v69;
            v32 = v70;
            v33 = v71;
            a2[-2].n128_u32[0] = v72;
            a2[-4] = v32;
            a2[-3] = v33;
            a2[-5] = v31;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&a2[-2].n128_i64[1]);
            *(_OWORD *)v28 = v61;
            a2[-1].n128_u64[1] = v62;
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v76[0] = (void **)&v73;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v76);

            v65 = a2 - 8;
            if (v20 == (__n128 *)a1)
            {
              v35 = a1;
            }
            else
            {
              v34 = (uint64_t)a1;
              v35 = a1;
              while ((CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)v35, (uint64_t)&a2[-8]) & 1) != 0)
              {
                v35 += 32;
                v34 += 128;
                if (v35 == (int *)v20)
                {
                  v35 = (int *)&a2[-8];
                  goto LABEL_36;
                }
              }
              v36 = (int *)&a2[-8];
              v37 = (uint64_t)&a2[-16];
              v38 = (uint64_t)&a2[-8] - v34;
              while (v35 != (int *)v37)
              {
                v39 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v37, (uint64_t)&a2[-8]);
                v36 -= 32;
                v38 -= 128;
                v37 -= 128;
                if (v39)
                {
                  if (v38 < 257)
                  {
                    v40 = 0;
                    v42 = 0;
                  }
                  else
                  {
                    v40 = std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>((v38 >> 7) + 1);
                    v42 = v41;
                  }
                  v35 = std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(v34, v36, (uint64_t *)&v65, (v38 >> 7) + 1, (unint64_t)v40, v42);
                  if (v40)
                    operator delete(v40);
                  break;
                }
              }
            }
LABEL_36:
            LODWORD(v65) = a2[-8].n128_u32[0];
            v43 = (int)v65;
            v44 = a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = 0;
            v45 = a2[-6];
            v67 = *v21;
            v68 = v45;
            v46 = a2[-5];
            v47 = a2[-4];
            v48 = a2[-3];
            v72 = a2[-2].n128_i32[0];
            v70 = v47;
            v71 = v48;
            v69 = v46;
            v49 = a2[-1].n128_u64[1];
            v63 = *(__int128 *)((char *)&a2[-2] + 8);
            *v28 = 0;
            a2[-1].n128_u64[0] = 0;
            a2[-1].n128_u64[1] = 0;
            a2[-8].n128_u32[0] = *v35;
            v50 = *((_QWORD *)v35 + 1);
            *((_QWORD *)v35 + 1) = 0;
            v51 = (void *)a2[-8].n128_u64[1];
            a2[-8].n128_u64[1] = v50;

            v52 = *((__n128 *)v35 + 2);
            *v21 = *((__n128 *)v35 + 1);
            a2[-6] = v52;
            v53 = *((__n128 *)v35 + 3);
            v54 = *((__n128 *)v35 + 4);
            v55 = *((__n128 *)v35 + 5);
            a2[-2].n128_u32[0] = v35[24];
            a2[-4] = v54;
            a2[-3] = v55;
            a2[-5] = v53;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&a2[-2].n128_i64[1]);
            *(__n128 *)((char *)a2 - 24) = *(__n128 *)(v35 + 26);
            a2[-1].n128_u64[1] = *((_QWORD *)v35 + 15);
            *((_QWORD *)v35 + 13) = 0;
            *((_QWORD *)v35 + 14) = 0;
            *((_QWORD *)v35 + 15) = 0;
            *v35 = v43;
            v66 = 0;
            v56 = (void *)*((_QWORD *)v35 + 1);
            *((_QWORD *)v35 + 1) = v44;

            v57 = v68;
            *((__n128 *)v35 + 1) = v67;
            *((__n128 *)v35 + 2) = v57;
            v58 = v69;
            v59 = v70;
            v60 = v71;
            v35[24] = v72;
            *((__n128 *)v35 + 4) = v59;
            *((__n128 *)v35 + 5) = v60;
            *((__n128 *)v35 + 3) = v58;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v35 + 13);
            *(_OWORD *)(v35 + 26) = v63;
            *((_QWORD *)v35 + 15) = v49;
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v76[0] = (void **)&v73;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](v76);

            CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(a1, v35, (a3 + 1));
            CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(v35 + 32, a2, (a3 + 1));
            return;
          }
          v9 += 8;
        }
        while (v9 != a2);
        if ((char *)a2 - (char *)a1 >= 1)
          goto LABEL_17;
        v11 = 0;
        v13 = 0;
      }
      else if ((char *)a2 - (char *)a1 < 1)
      {
        v11 = 0;
        v13 = 0;
      }
      else
      {
LABEL_17:
        v11 = std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(((char *)a2 - (char *)a1) >> 7);
        v13 = v12;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(a1, a2, ((char *)a2 - (char *)a1) >> 7, (uint64_t)v11, v13, a4);
      if (v11)
        operator delete(v11);
    }
  }
}

void sub_1D501A470(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(v1 << 7, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  void *v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  id v28;
  void *v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  id v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  unsigned __int32 v78;
  __int128 v79;
  unint64_t v80;
  void **v81;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if (a2[-7].n128_f32[2] < a1[1].n128_f32[2])
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)a1, (int *)&a2[-8]);
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v14 = a1 + 8;
        if (&a1[8] != a2)
        {
          v15 = 0;
          v16 = a1;
          do
          {
            v17 = v14;
            if (v16[9].n128_f32[2] < v16[1].n128_f32[2])
            {
              LODWORD(v71) = v14->n128_u32[0];
              v18 = (void *)v16[8].n128_u64[1];
              v16[8].n128_u64[1] = 0;
              v72 = v18;
              v19 = v16[12];
              v75 = v16[11];
              v76 = v19;
              v77 = v16[13];
              v78 = v16[14].n128_u32[0];
              v20 = v16[10];
              v73 = v16[9];
              v74 = v20;
              v79 = *(__int128 *)((char *)&v16[14] + 8);
              v80 = v16[15].n128_u64[1];
              v16[14].n128_u64[1] = 0;
              v16[15].n128_u64[0] = 0;
              v21 = v15;
              v16[15].n128_u64[1] = 0;
              while (1)
              {
                v22 = (char *)a1 + v21;
                *((_DWORD *)v22 + 32) = *(unsigned __int32 *)((char *)a1->n128_u32 + v21);
                v23 = *(uint64_t *)((char *)&a1->n128_i64[1] + v21);
                *((_QWORD *)v22 + 1) = 0;
                v24 = *(void **)((char *)&a1[8].n128_u64[1] + v21);
                *((_QWORD *)v22 + 17) = v23;

                v25 = *(__int128 *)((char *)&a1[4] + v21);
                *((_OWORD *)v22 + 11) = *((_OWORD *)v22 + 3);
                *((_OWORD *)v22 + 12) = v25;
                *((_OWORD *)v22 + 13) = *((_OWORD *)v22 + 5);
                *((_DWORD *)v22 + 56) = *((_DWORD *)v22 + 24);
                v26 = *(__int128 *)((char *)&a1[2] + v21);
                *((_OWORD *)v22 + 9) = *((_OWORD *)v22 + 1);
                *((_OWORD *)v22 + 10) = v26;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)((char *)&a1[14].n128_i64[1]
                                                                                            + v21));
                *(_OWORD *)(v22 + 232) = *(_OWORD *)(v22 + 104);
                *((_QWORD *)v22 + 31) = *((_QWORD *)v22 + 15);
                *((_QWORD *)v22 + 14) = 0;
                *((_QWORD *)v22 + 15) = 0;
                *((_QWORD *)v22 + 13) = 0;
                if (!v21)
                  break;
                v21 -= 128;
                if (v73.n128_f32[2] >= *((float *)v22 - 26))
                {
                  v27 = (uint64_t)&a1[8] + v21;
                  goto LABEL_17;
                }
              }
              v27 = (uint64_t)a1;
LABEL_17:
              *(_DWORD *)v27 = v71;
              v28 = v72;
              v72 = 0;
              v29 = *(void **)(v27 + 8);
              *(_QWORD *)(v27 + 8) = v28;

              v30 = v74;
              *((__n128 *)v22 + 1) = v73;
              *((__n128 *)v22 + 2) = v30;
              v31 = v75;
              v32 = v76;
              v33 = v77;
              *((_DWORD *)v22 + 24) = v78;
              *((__n128 *)v22 + 4) = v32;
              *((__n128 *)v22 + 5) = v33;
              *((__n128 *)v22 + 3) = v31;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v22 + 13);
              *((_QWORD *)v22 + 13) = v79;
              *(_QWORD *)(v27 + 112) = *((_QWORD *)&v79 + 1);
              *(_QWORD *)(v27 + 120) = v80;
              v79 = 0uLL;
              v80 = 0;
              v81 = (void **)&v79;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v81);

            }
            v14 = v17 + 8;
            v15 += 128;
            v16 = v17;
          }
          while (&v17[8] != a2);
        }
      }
    }
    else
    {
      v11 = a3 >> 1;
      v12 = (uint64_t)&a1[8 * (a3 >> 1)];
      if ((uint64_t)a3 <= a5)
      {
        v34 = _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeE(a1, &a1[8 * (a3 >> 1)], a3 >> 1, a4, a6);
        v35 = a4 + (v11 << 7);
        _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeE(&a1[8 * (a3 >> 1)], a2, a3 - v11, v35, v34);
        v71 = a3;
        v36 = &a1[7].n128_u64[1];
        v37 = v35;
        v38 = a4;
        v39 = (_QWORD *)(a4 + (a3 << 7));
        while ((_QWORD *)v37 != v39)
        {
          v40 = v36 - 13;
          if (*(float *)(v37 + 24) >= *(float *)(v38 + 24))
          {
            *((_DWORD *)v36 - 30) = *(_DWORD *)v38;
            v47 = *(_QWORD *)(v38 + 8);
            *(_QWORD *)(v38 + 8) = 0;
            v48 = (void *)*(v36 - 14);
            *(v36 - 14) = v47;

            v49 = *(_OWORD *)(v38 + 32);
            *(_OWORD *)v40 = *(_OWORD *)(v38 + 16);
            *(_OWORD *)(v36 - 11) = v49;
            v50 = *(_OWORD *)(v38 + 48);
            v51 = *(_OWORD *)(v38 + 64);
            v52 = *(_OWORD *)(v38 + 80);
            *((_DWORD *)v36 - 6) = *(_DWORD *)(v38 + 96);
            *(_OWORD *)(v36 - 7) = v51;
            *(_OWORD *)(v36 - 5) = v52;
            *(_OWORD *)(v36 - 9) = v50;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v36 - 2);
            *((_OWORD *)v36 - 1) = *(_OWORD *)(v38 + 104);
            *v36 = *(_QWORD *)(v38 + 120);
            *(_QWORD *)(v38 + 104) = 0;
            *(_QWORD *)(v38 + 112) = 0;
            *(_QWORD *)(v38 + 120) = 0;
            v38 += 128;
          }
          else
          {
            *((_DWORD *)v36 - 30) = *(_DWORD *)v37;
            v41 = *(_QWORD *)(v37 + 8);
            *(_QWORD *)(v37 + 8) = 0;
            v42 = (void *)*(v36 - 14);
            *(v36 - 14) = v41;

            v43 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)v40 = *(_OWORD *)(v37 + 16);
            *(_OWORD *)(v36 - 11) = v43;
            v44 = *(_OWORD *)(v37 + 48);
            v45 = *(_OWORD *)(v37 + 64);
            v46 = *(_OWORD *)(v37 + 80);
            *((_DWORD *)v36 - 6) = *(_DWORD *)(v37 + 96);
            *(_OWORD *)(v36 - 7) = v45;
            *(_OWORD *)(v36 - 5) = v46;
            *(_OWORD *)(v36 - 9) = v44;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v36 - 2);
            *((_OWORD *)v36 - 1) = *(_OWORD *)(v37 + 104);
            *v36 = *(_QWORD *)(v37 + 120);
            *(_QWORD *)(v37 + 104) = 0;
            *(_QWORD *)(v37 + 112) = 0;
            *(_QWORD *)(v37 + 120) = 0;
            v37 += 128;
          }
          v36 += 16;
          if (v38 == v35)
          {
            if ((_QWORD *)v37 != v39)
            {
              v53 = 0;
              do
              {
                v54 = (_QWORD *)(v37 + v53);
                v55 = &v36[v53 / 8];
                *((_DWORD *)v55 - 30) = *(_DWORD *)(v37 + v53);
                v56 = *(_QWORD *)(v37 + v53 + 8);
                *(_QWORD *)(v37 + v53 + 8) = 0;
                v57 = (void *)v36[v53 / 8 - 14];
                *(v55 - 14) = v56;

                v58 = *(_OWORD *)(v37 + v53 + 16);
                *(_OWORD *)(v55 - 11) = *(_OWORD *)(v37 + v53 + 32);
                *(_OWORD *)(v55 - 13) = v58;
                v59 = *(_OWORD *)(v37 + v53 + 48);
                v60 = *(_OWORD *)(v37 + v53 + 64);
                v61 = *(_OWORD *)(v37 + v53 + 80);
                *((_DWORD *)v55 - 6) = *(_DWORD *)(v37 + v53 + 96);
                *(_OWORD *)(v55 - 5) = v61;
                *(_OWORD *)(v55 - 7) = v60;
                *(_OWORD *)(v55 - 9) = v59;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)&v36[v53 / 8 - 2]);
                *((_OWORD *)v55 - 1) = *(_OWORD *)(v37 + v53 + 104);
                *v55 = *(_QWORD *)(v37 + v53 + 120);
                v54[13] = 0;
                v54[14] = 0;
                v54[15] = 0;
                v53 += 128;
              }
              while (v54 + 16 != v39);
            }
            goto LABEL_33;
          }
        }
        if (v38 != v35)
        {
          v62 = 0;
          do
          {
            v63 = (_QWORD *)(v38 + v62);
            v64 = &v36[v62 / 8];
            *((_DWORD *)v64 - 30) = *(_DWORD *)(v38 + v62);
            v65 = *(_QWORD *)(v38 + v62 + 8);
            *(_QWORD *)(v38 + v62 + 8) = 0;
            v66 = (void *)v36[v62 / 8 - 14];
            *(v64 - 14) = v65;

            v67 = *(_OWORD *)(v38 + v62 + 16);
            *(_OWORD *)(v64 - 11) = *(_OWORD *)(v38 + v62 + 32);
            *(_OWORD *)(v64 - 13) = v67;
            v68 = *(_OWORD *)(v38 + v62 + 48);
            v69 = *(_OWORD *)(v38 + v62 + 64);
            v70 = *(_OWORD *)(v38 + v62 + 80);
            *((_DWORD *)v64 - 6) = *(_DWORD *)(v38 + v62 + 96);
            *(_OWORD *)(v64 - 5) = v70;
            *(_OWORD *)(v64 - 7) = v69;
            *(_OWORD *)(v64 - 9) = v68;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)&v36[v62 / 8 - 2]);
            *((_OWORD *)v64 - 1) = *(_OWORD *)(v38 + v62 + 104);
            *v64 = *(_QWORD *)(v38 + v62 + 120);
            v63[13] = 0;
            v63[14] = 0;
            v63[15] = 0;
            v62 += 128;
          }
          while (v63 + 16 != (_QWORD *)v35);
        }
LABEL_33:
        if (a4)
          std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v71, a4);
      }
      else
      {
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(a1, &a1[8 * (a3 >> 1)], a3 >> 1, a4, a5);
        v13 = a3 - v11;
        _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(v12, a2, v13, a4, a5);
        _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl((uint64_t)a1, v12, (uint64_t)a2, v11, v13, a4, a5);
      }
    }
  }
}

void sub_1D501A9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(int *a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  _QWORD v22[3];
  void **v23;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  v18 = *((_OWORD *)a1 + 3);
  v19 = *((_OWORD *)a1 + 4);
  v20 = *((_OWORD *)a1 + 5);
  v21 = a1[24];
  v16 = *((_OWORD *)a1 + 1);
  v17 = *((_OWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 15);
  v7 = (uint64_t *)(a1 + 26);
  v15 = *(_OWORD *)(a1 + 26);
  *((_QWORD *)a1 + 13) = 0;
  *((_QWORD *)a1 + 14) = 0;
  *((_QWORD *)a1 + 15) = 0;
  *a1 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v9 = (void *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v8;

  v10 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v10;
  v11 = *((_OWORD *)a2 + 3);
  v12 = *((_OWORD *)a2 + 4);
  v13 = *((_OWORD *)a2 + 5);
  a1[24] = a2[24];
  *((_OWORD *)a1 + 4) = v12;
  *((_OWORD *)a1 + 5) = v13;
  *((_OWORD *)a1 + 3) = v11;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v7);
  *(_OWORD *)v7 = *(_OWORD *)(a2 + 26);
  *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *a2 = v4;
  v14 = (void *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;

  *((_OWORD *)a2 + 3) = v18;
  *((_OWORD *)a2 + 4) = v19;
  *((_OWORD *)a2 + 5) = v20;
  a2[24] = v21;
  *((_OWORD *)a2 + 1) = v16;
  *((_OWORD *)a2 + 2) = v17;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)a2 + 13);
  *(_OWORD *)(a2 + 26) = v15;
  *((_QWORD *)a2 + 15) = v6;
  memset(v22, 0, sizeof(v22));
  v23 = (void **)v22;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v23);

}

__n128 _ZNSt3__118__stable_sort_moveINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeE(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  __n128 *v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  unsigned __int32 v13;
  __n128 v14;
  __n128 v15;
  __n128 *v16;
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  unint64_t *v52;
  __int128 v53;
  uint64_t v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __int128 v58;
  uint64_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  uint64_t v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 *v70;
  __n128 *v71;
  __n128 *v72;
  __int8 *v73;
  __n128 *v74;
  unint64_t v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  unint64_t v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  unint64_t v85;
  __n128 *v86;
  __n128 *v87;
  unint64_t v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  unint64_t v93;
  __n128 *v94;
  __n128 *v95;
  unint64_t v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;

  if (a3)
  {
    v8 = a1;
    if (a3 == 2)
    {
      v17 = (_OWORD *)(a4 + 16);
      v18 = (_QWORD *)(a4 + 104);
      if (a2[-7].n128_f32[2] >= a1[1].n128_f32[2])
      {
        *(_DWORD *)a4 = a1->n128_u32[0];
        v59 = a1->n128_i64[1];
        a1->n128_u64[1] = 0;
        *(_QWORD *)(a4 + 8) = v59;
        v60 = a1[2];
        *v17 = a1[1];
        *(__n128 *)(a4 + 32) = v60;
        v61 = a1[3];
        v62 = a1[4];
        v63 = a1[5];
        *(_DWORD *)(a4 + 96) = a1[6].n128_u32[0];
        *(__n128 *)(a4 + 64) = v62;
        *(__n128 *)(a4 + 80) = v63;
        *(__n128 *)(a4 + 48) = v61;
        *(_QWORD *)(a4 + 112) = 0;
        *(_QWORD *)(a4 + 120) = 0;
        *v18 = 0;
        *(__n128 *)(a4 + 104) = *(__n128 *)((char *)a1 + 104);
        *(_QWORD *)(a4 + 120) = a1[7].n128_u64[1];
        a1[6].n128_u64[1] = 0;
        a1[7].n128_u64[0] = 0;
        a1[7].n128_u64[1] = 0;
        *(_DWORD *)(a4 + 128) = a2[-8].n128_u32[0];
        v64 = a2[-8].n128_i64[1];
        a2[-8].n128_u64[1] = 0;
        *(_QWORD *)(a4 + 136) = v64;
        v65 = a2[-5];
        v66 = a2[-4];
        v67 = a2[-3];
        LODWORD(v64) = a2[-2].n128_u32[0];
        v68 = a2[-7];
        v69 = a2[-6];
        *(_QWORD *)(a4 + 248) = 0;
        v16 = (__n128 *)(a4 + 248);
        *(__n128 *)(a4 + 160) = v69;
        *(__n128 *)(a4 + 144) = v68;
        *(_DWORD *)(a4 + 224) = v64;
        *(__n128 *)(a4 + 208) = v67;
        *(__n128 *)(a4 + 192) = v66;
        *(__n128 *)(a4 + 176) = v65;
        *(_QWORD *)(a4 + 232) = 0;
        *(_QWORD *)(a4 + 240) = 0;
        result = *(__n128 *)((char *)a2 - 24);
        *(__n128 *)(a4 + 232) = result;
        v26 = &a2[-1].n128_u64[1];
        v25 = &a2[-2].n128_u64[1];
        goto LABEL_23;
      }
      *(_DWORD *)a4 = a2[-8].n128_u32[0];
      v19 = a2[-8].n128_i64[1];
      a2[-8].n128_u64[1] = 0;
      *(_QWORD *)(a4 + 8) = v19;
      v20 = a2[-6];
      *v17 = a2[-7];
      *(__n128 *)(a4 + 32) = v20;
      v21 = a2[-5];
      v22 = a2[-4];
      v23 = a2[-3];
      *(_DWORD *)(a4 + 96) = a2[-2].n128_u32[0];
      *(__n128 *)(a4 + 64) = v22;
      *(__n128 *)(a4 + 80) = v23;
      *(__n128 *)(a4 + 48) = v21;
      *(_QWORD *)(a4 + 112) = 0;
      *(_QWORD *)(a4 + 120) = 0;
      *v18 = 0;
      *(__n128 *)(a4 + 104) = *(__n128 *)((char *)a2 - 24);
      *(_QWORD *)(a4 + 120) = a2[-1].n128_u64[1];
      a2[-2].n128_u64[1] = 0;
      a2[-1].n128_u64[0] = 0;
      a2[-1].n128_u64[1] = 0;
      *(_DWORD *)(a4 + 128) = a1->n128_u32[0];
      v24 = a1->n128_i64[1];
      a1->n128_u64[1] = 0;
      *(_QWORD *)(a4 + 136) = v24;
      v10 = a1[3];
      v11 = a1[4];
      v12 = a1[5];
      v13 = a1[6].n128_u32[0];
      v14 = a1[1];
      v15 = a1[2];
      *(_QWORD *)(a4 + 248) = 0;
      v16 = (__n128 *)(a4 + 248);
LABEL_7:
      *(__n128 *)((char *)v16 - 88) = v15;
      *(__n128 *)((char *)v16 - 104) = v14;
      v16[-2].n128_u32[2] = v13;
      *(__n128 *)((char *)v16 - 40) = v12;
      *(__n128 *)((char *)v16 - 56) = v11;
      *(__n128 *)((char *)v16 - 72) = v10;
      v16[-1].n128_u64[0] = 0;
      v16[-1].n128_u64[1] = 0;
      v25 = &a1[6].n128_u64[1];
      result = *(__n128 *)((char *)a1 + 104);
      v16[-1] = result;
      v26 = &a1[7].n128_u64[1];
LABEL_23:
      v16->n128_u64[0] = *v26;
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      *(_DWORD *)a4 = a1->n128_u32[0];
      v9 = a1->n128_i64[1];
      a1->n128_u64[1] = 0;
      *(_QWORD *)(a4 + 8) = v9;
      v10 = a1[3];
      v11 = a1[4];
      v12 = a1[5];
      v13 = a1[6].n128_u32[0];
      v14 = a1[1];
      v15 = a1[2];
      *(_QWORD *)(a4 + 120) = 0;
      v16 = (__n128 *)(a4 + 120);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      v70 = &a1[8 * (a3 >> 1)];
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(a1, v70, a3 >> 1, a4, a3 >> 1);
      _ZNSt3__113__stable_sortINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SD_NS_15iterator_traitsISI_E15difference_typeEPNSK_10value_typeEl(&v8[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), a4 + (a3 >> 1 << 7), a3 - (a3 >> 1));
      v71 = (__n128 *)(a4 + 120);
      v72 = &v8[8 * (a3 >> 1)];
      while (v72 != a2)
      {
        v73 = &v71[-7].n128_i8[8];
        v74 = v71 - 1;
        if (v72[1].n128_f32[2] >= v8[1].n128_f32[2])
        {
          v71[-8].n128_u32[2] = v8->n128_u32[0];
          v80 = v8->n128_u64[1];
          v8->n128_u64[1] = 0;
          v71[-7].n128_u64[0] = v80;
          v81 = v8[2];
          *(__n128 *)v73 = v8[1];
          *(__n128 *)((char *)v71 - 88) = v81;
          v82 = v8[3];
          v83 = v8[4];
          v84 = v8[5];
          v71[-2].n128_u32[2] = v8[6].n128_u32[0];
          *(__n128 *)((char *)v71 - 56) = v83;
          *(__n128 *)((char *)v71 - 40) = v84;
          *(__n128 *)((char *)v71 - 72) = v82;
          v71[-1].n128_u64[1] = 0;
          v71->n128_u64[0] = 0;
          v74->n128_u64[0] = 0;
          result = *(__n128 *)((char *)v8 + 104);
          v71[-1] = result;
          v71->n128_u64[0] = v8[7].n128_u64[1];
          v8[6].n128_u64[1] = 0;
          v8[7].n128_u64[0] = 0;
          v8[7].n128_u64[1] = 0;
          v8 += 8;
        }
        else
        {
          v71[-8].n128_u32[2] = v72->n128_u32[0];
          v75 = v72->n128_u64[1];
          v72->n128_u64[1] = 0;
          v71[-7].n128_u64[0] = v75;
          v76 = v72[2];
          *(__n128 *)v73 = v72[1];
          *(__n128 *)((char *)v71 - 88) = v76;
          v77 = v72[3];
          v78 = v72[4];
          v79 = v72[5];
          v71[-2].n128_u32[2] = v72[6].n128_u32[0];
          *(__n128 *)((char *)v71 - 56) = v78;
          *(__n128 *)((char *)v71 - 40) = v79;
          *(__n128 *)((char *)v71 - 72) = v77;
          v71[-1].n128_u64[1] = 0;
          v71->n128_u64[0] = 0;
          v74->n128_u64[0] = 0;
          result = *(__n128 *)((char *)v72 + 104);
          v71[-1] = result;
          v71->n128_u64[0] = v72[7].n128_u64[1];
          v72[6].n128_u64[1] = 0;
          v72[7].n128_u64[0] = 0;
          v72[7].n128_u64[1] = 0;
          v72 += 8;
        }
        v71 += 8;
        if (v8 == v70)
        {
          if (v72 != a2)
          {
            v85 = 0;
            do
            {
              v86 = &v72[v85];
              v87 = &v71[v85];
              v87[-8].n128_u32[2] = v72[v85].n128_u32[0];
              v88 = v72[v85].n128_u64[1];
              v86->n128_u64[1] = 0;
              v87[-7].n128_u64[0] = v88;
              v89 = v72[v85 + 1];
              *(__n128 *)((char *)v87 - 88) = v72[v85 + 2];
              *(__n128 *)((char *)v87 - 104) = v89;
              v90 = v72[v85 + 3];
              v91 = v72[v85 + 4];
              v92 = v72[v85 + 5];
              v87[-2].n128_u32[2] = v72[v85 + 6].n128_u32[0];
              *(__n128 *)((char *)v87 - 40) = v92;
              *(__n128 *)((char *)v87 - 56) = v91;
              *(__n128 *)((char *)v87 - 72) = v90;
              v87[-1].n128_u64[1] = 0;
              v87->n128_u64[0] = 0;
              v87[-1].n128_u64[0] = 0;
              result = *(__n128 *)((char *)&v72[v85 + 6] + 8);
              v87[-1] = result;
              v87->n128_u64[0] = v72[v85 + 7].n128_u64[1];
              v86[6].n128_u64[1] = 0;
              v86[7].n128_u64[0] = 0;
              v86[7].n128_u64[1] = 0;
              v85 += 8;
            }
            while (&v86[8] != a2);
          }
          return result;
        }
      }
      if (v8 != v70)
      {
        v93 = 0;
        do
        {
          v94 = &v71[v93];
          v95 = &v8[v93];
          v94[-8].n128_u32[2] = v8[v93].n128_u32[0];
          v96 = v8[v93].n128_u64[1];
          v95->n128_u64[1] = 0;
          v94[-7].n128_u64[0] = v96;
          v97 = v8[v93 + 1];
          *(__n128 *)((char *)v94 - 88) = v8[v93 + 2];
          *(__n128 *)((char *)v94 - 104) = v97;
          v98 = v8[v93 + 3];
          v99 = v8[v93 + 4];
          v100 = v8[v93 + 5];
          v94[-2].n128_u32[2] = v8[v93 + 6].n128_u32[0];
          *(__n128 *)((char *)v94 - 40) = v100;
          *(__n128 *)((char *)v94 - 56) = v99;
          *(__n128 *)((char *)v94 - 72) = v98;
          v94[-1].n128_u64[1] = 0;
          v94->n128_u64[0] = 0;
          v94[-1].n128_u64[0] = 0;
          result = *(__n128 *)((char *)&v8[v93 + 6] + 8);
          v94[-1] = result;
          v94->n128_u64[0] = v8[v93 + 7].n128_u64[1];
          v95[6].n128_u64[1] = 0;
          v95[7].n128_u64[0] = 0;
          v95[7].n128_u64[1] = 0;
          v93 += 8;
        }
        while (&v95[8] != v70);
      }
    }
    else if (a1 != a2)
    {
      *(_DWORD *)a4 = a1->n128_u32[0];
      v27 = a1->n128_i64[1];
      a1->n128_u64[1] = 0;
      *(_QWORD *)(a4 + 8) = v27;
      v28 = a1[2];
      *(__n128 *)(a4 + 16) = a1[1];
      *(__n128 *)(a4 + 32) = v28;
      v29 = a1[3];
      v30 = a1[4];
      v31 = a1[5];
      *(_DWORD *)(a4 + 96) = a1[6].n128_u32[0];
      *(__n128 *)(a4 + 64) = v30;
      *(__n128 *)(a4 + 80) = v31;
      *(__n128 *)(a4 + 48) = v29;
      *(_QWORD *)(a4 + 112) = 0;
      *(_QWORD *)(a4 + 120) = 0;
      *(_QWORD *)(a4 + 104) = 0;
      result = *(__n128 *)((char *)a1 + 104);
      *(__n128 *)(a4 + 104) = result;
      *(_QWORD *)(a4 + 120) = a1[7].n128_u64[1];
      a1[6].n128_u64[1] = 0;
      a1[7].n128_u64[0] = 0;
      a1[7].n128_u64[1] = 0;
      v32 = a1 + 8;
      if (&a1[8] != a2)
      {
        v33 = 0;
        v34 = a4;
        do
        {
          v35 = v32;
          v36 = (_OWORD *)(v34 + 144);
          if (v8[9].n128_f32[2] >= *(float *)(v34 + 24))
          {
            *(_DWORD *)(v34 + 128) = v35->n128_u32[0];
            v54 = v8[8].n128_i64[1];
            v8[8].n128_u64[1] = 0;
            *(_QWORD *)(v34 + 136) = v54;
            v55 = v8[10];
            *v36 = v8[9];
            *(__n128 *)(v34 + 160) = v55;
            result = v8[11];
            v56 = v8[12];
            v57 = v8[13];
            *(_DWORD *)(v34 + 224) = v8[14].n128_u32[0];
            *(__n128 *)(v34 + 192) = v56;
            *(__n128 *)(v34 + 208) = v57;
            *(__n128 *)(v34 + 176) = result;
            *(_QWORD *)(v34 + 240) = 0;
            *(_QWORD *)(v34 + 248) = 0;
            *(_QWORD *)(v34 + 232) = 0;
            v58 = *(__int128 *)((char *)&v8[14] + 8);
            v52 = &v8[14].n128_u64[1];
            result.n128_u64[0] = v58;
            *(_OWORD *)(v34 + 232) = v58;
            *(_QWORD *)(v34 + 248) = v52[2];
          }
          else
          {
            *(_DWORD *)(v34 + 128) = *(_DWORD *)v34;
            v37 = *(_QWORD *)(v34 + 8);
            *(_QWORD *)(v34 + 8) = 0;
            *(_QWORD *)(v34 + 136) = v37;
            v38 = *(_OWORD *)(v34 + 64);
            *(_OWORD *)(v34 + 176) = *(_OWORD *)(v34 + 48);
            *(_OWORD *)(v34 + 192) = v38;
            *(_OWORD *)(v34 + 208) = *(_OWORD *)(v34 + 80);
            *(_DWORD *)(v34 + 224) = *(_DWORD *)(v34 + 96);
            v39 = *(_OWORD *)(v34 + 32);
            *v36 = *(_OWORD *)(v34 + 16);
            *(_OWORD *)(v34 + 160) = v39;
            *(_OWORD *)(v34 + 232) = *(_OWORD *)(v34 + 104);
            *(_QWORD *)(v34 + 248) = *(_QWORD *)(v34 + 120);
            *(_QWORD *)(v34 + 104) = 0;
            *(_QWORD *)(v34 + 112) = 0;
            v40 = a4;
            *(_QWORD *)(v34 + 120) = 0;
            if (v34 != a4)
            {
              v41 = v33;
              while (1)
              {
                v40 = a4 + v41;
                if (v8[9].n128_f32[2] >= *(float *)(a4 + v41 - 104))
                  break;
                *(_DWORD *)v40 = *(_DWORD *)(v40 - 128);
                v42 = *(_QWORD *)(v40 - 120);
                *(_QWORD *)(v40 - 120) = 0;
                v43 = *(void **)(v40 + 8);
                *(_QWORD *)(v40 + 8) = v42;

                v44 = *(_OWORD *)(v40 - 64);
                *(_OWORD *)(v40 + 48) = *(_OWORD *)(v40 - 80);
                *(_OWORD *)(v40 + 64) = v44;
                *(_OWORD *)(v40 + 80) = *(_OWORD *)(v40 - 48);
                *(_DWORD *)(v40 + 96) = *(_DWORD *)(v40 - 32);
                v45 = *(_OWORD *)(v40 - 96);
                *(_OWORD *)(v40 + 16) = *(_OWORD *)(v40 - 112);
                *(_OWORD *)(v40 + 32) = v45;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v40 + 104));
                *(_OWORD *)(v40 + 104) = *(_OWORD *)(v40 - 24);
                *(_QWORD *)(v40 + 120) = *(_QWORD *)(v40 - 8);
                *(_QWORD *)(v40 - 16) = 0;
                *(_QWORD *)(v40 - 8) = 0;
                *(_QWORD *)(v40 - 24) = 0;
                v41 -= 128;
                if (!v41)
                {
                  v40 = a4;
                  break;
                }
              }
            }
            *(_DWORD *)v40 = v35->n128_u32[0];
            v46 = v8[8].n128_i64[1];
            v8[8].n128_u64[1] = 0;
            v47 = *(void **)(v40 + 8);
            *(_QWORD *)(v40 + 8) = v46;

            v48 = v8[10];
            *(__n128 *)(v40 + 16) = v8[9];
            *(__n128 *)(v40 + 32) = v48;
            v49 = v8[11];
            v50 = v8[12];
            v51 = v8[13];
            *(_DWORD *)(v40 + 96) = v8[14].n128_u32[0];
            *(__n128 *)(v40 + 64) = v50;
            *(__n128 *)(v40 + 80) = v51;
            *(__n128 *)(v40 + 48) = v49;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v40 + 104));
            v53 = *(__int128 *)((char *)&v8[14] + 8);
            v52 = &v8[14].n128_u64[1];
            result.n128_u64[0] = v53;
            *(_OWORD *)(v40 + 104) = v53;
            *(_QWORD *)(v40 + 120) = v52[2];
          }
          v34 += 128;
          *v52 = 0;
          v52[1] = 0;
          v52[2] = 0;
          v32 = v35 + 8;
          v33 += 128;
          v8 = v35;
        }
        while (&v35[8] != a2);
      }
    }
  }
  return result;
}

void _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97[4];

  if (!a5)
    return;
  v8 = a5;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4)
      return;
    v12 = 0;
    v13 = -a4;
    while (1)
    {
      v14 = a1 + v12;
      if (*(float *)(a2 + 24) < *(float *)(a1 + v12 + 24))
        break;
      v12 += 128;
      if (__CFADD__(v13++, 1))
        return;
    }
    v16 = -v13;
    v95 = a6;
    if (-v13 >= v8)
    {
      if (v13 == -1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)(a1 + v12), (int *)a2);
        return;
      }
      if (v13 > 0)
        v16 = 1 - v13;
      v27 = v16 >> 1;
      v20 = a1 + (v16 >> 1 << 7) + v12;
      if (a3 == a2)
      {
        v19 = a3;
      }
      else
      {
        v28 = (a3 - a2) >> 7;
        v19 = a2;
        do
        {
          v29 = v28 >> 1;
          v30 = v19 + (v28 >> 1 << 7);
          v31 = *(float *)(v30 + 24);
          v32 = v30 + 128;
          v28 += ~(v28 >> 1);
          if (v31 < *(float *)(v20 + 24))
            v19 = v32;
          else
            v28 = v29;
        }
        while (v28);
      }
      v18 = (v19 - a2) >> 7;
    }
    else
    {
      if (v8 >= 0)
        v17 = v8;
      else
        v17 = v8 + 1;
      v18 = v17 >> 1;
      v19 = a2 + (v17 >> 1 << 7);
      v20 = a2;
      v21 = a2 - a1 - v12;
      if (v21)
      {
        v22 = v21 >> 7;
        v20 = a1 + v12;
        do
        {
          v23 = v22 >> 1;
          v24 = v20 + (v22 >> 1 << 7);
          v25 = *(float *)(v24 + 24);
          v26 = v24 + 128;
          v22 += ~(v22 >> 1);
          if (*(float *)(v19 + 24) < v25)
            v22 = v23;
          else
            v20 = v26;
        }
        while (v22);
      }
      v27 = (v20 - a1 - v12) >> 7;
    }
    if (v20 == a2)
    {
      v37 = (int *)v19;
    }
    else if (v19 == a2)
    {
      v37 = (int *)v20;
    }
    else
    {
      v33 = a3;
      v34 = a7;
      v35 = v27;
      v36 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((int *)v20, (int *)a2, (int *)v19);
      v27 = v35;
      a7 = v34;
      a3 = v33;
      v37 = v36;
    }
    a4 = -(v27 + v13);
    v38 = v8 - v18;
    if (v27 + v18 >= v8 - (v27 + v18) - v13)
    {
      v42 = v19;
      v43 = v27;
      a6 = v95;
      v41 = a7;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl(v37, v42, a3, a4, v8 - v18, v95);
      a2 = v20;
      v38 = v18;
      a4 = v43;
      a3 = (uint64_t)v37;
    }
    else
    {
      v39 = v18;
      v40 = a3;
      v41 = a7;
      _ZNSt3__115__inplace_mergeINS_17_ClassicAlgPolicyERZZNK17CRTextRecognition6CRCTLD34CRConstrainedTextLineDetectionImpl11sortRegionsENS_11__wrap_iterIPNS3_10CTLDRegionEEES8_ENK3__1clES8_S8_EUlRKT_RKT0_E_S8_EEvT1_SI_SI_OSD_NS_15iterator_traitsISI_E15difference_typeESM_PNSL_10value_typeEl(v14, v20, v37, v27, v39, v95);
      a3 = v40;
      v14 = (uint64_t)v37;
      a2 = v19;
      a6 = v95;
    }
    a1 = v14;
    v8 = v38;
    a7 = v41;
    if (!v38)
      return;
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      v67 = 0;
      v68 = 0;
      do
      {
        v69 = a6 + v67;
        v70 = (_QWORD *)(a1 + v67);
        *(_DWORD *)v69 = *(_DWORD *)(a1 + v67);
        v71 = *(_QWORD *)(a1 + v67 + 8);
        v70[1] = 0;
        *(_QWORD *)(v69 + 8) = v71;
        v72 = *(_OWORD *)(a1 + v67 + 32);
        *(_OWORD *)(v69 + 16) = *(_OWORD *)(a1 + v67 + 16);
        *(_OWORD *)(v69 + 32) = v72;
        v73 = *(_OWORD *)(a1 + v67 + 48);
        v74 = *(_OWORD *)(a1 + v67 + 64);
        v75 = *(_OWORD *)(a1 + v67 + 80);
        *(_DWORD *)(v69 + 96) = *(_DWORD *)(a1 + v67 + 96);
        *(_OWORD *)(v69 + 64) = v74;
        *(_OWORD *)(v69 + 80) = v75;
        *(_OWORD *)(v69 + 48) = v73;
        *(_QWORD *)(v69 + 112) = 0;
        *(_QWORD *)(v69 + 120) = 0;
        *(_QWORD *)(v69 + 104) = 0;
        *(_OWORD *)(v69 + 104) = *(_OWORD *)(a1 + v67 + 104);
        *(_QWORD *)(v69 + 120) = *(_QWORD *)(a1 + v67 + 120);
        v70[13] = 0;
        v70[14] = 0;
        v70[15] = 0;
        ++v68;
        v67 += 128;
      }
      while (v70 + 16 != (_QWORD *)a2);
      v96 = v68;
      if (v67)
      {
        v76 = a6 + v67;
        v77 = a6;
        while (a2 != a3)
        {
          v78 = a3;
          v79 = (_OWORD *)(a1 + 16);
          if (*(float *)(a2 + 24) >= *(float *)(v77 + 24))
          {
            *(_DWORD *)a1 = *(_DWORD *)v77;
            v87 = *(_QWORD *)(v77 + 8);
            *(_QWORD *)(v77 + 8) = 0;
            v88 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v87;
            v89 = a2;

            v90 = *(_OWORD *)(v77 + 32);
            *v79 = *(_OWORD *)(v77 + 16);
            *(_OWORD *)(a1 + 32) = v90;
            v91 = *(_OWORD *)(v77 + 48);
            v92 = *(_OWORD *)(v77 + 64);
            v93 = *(_OWORD *)(v77 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(v77 + 96);
            *(_OWORD *)(a1 + 64) = v92;
            *(_OWORD *)(a1 + 80) = v93;
            *(_OWORD *)(a1 + 48) = v91;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            a2 = v89;
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v77 + 104);
            *(_QWORD *)(a1 + 120) = *(_QWORD *)(v77 + 120);
            *(_QWORD *)(v77 + 104) = 0;
            *(_QWORD *)(v77 + 112) = 0;
            *(_QWORD *)(v77 + 120) = 0;
            v77 += 128;
          }
          else
          {
            *(_DWORD *)a1 = *(_DWORD *)a2;
            v80 = *(_QWORD *)(a2 + 8);
            *(_QWORD *)(a2 + 8) = 0;
            v81 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v80;
            v82 = a2;

            v83 = *(_OWORD *)(v82 + 32);
            *v79 = *(_OWORD *)(v82 + 16);
            *(_OWORD *)(a1 + 32) = v83;
            v84 = *(_OWORD *)(v82 + 48);
            v85 = *(_OWORD *)(v82 + 64);
            v86 = *(_OWORD *)(v82 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(v82 + 96);
            *(_OWORD *)(a1 + 64) = v85;
            *(_OWORD *)(a1 + 80) = v86;
            *(_OWORD *)(a1 + 48) = v84;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v82 + 104);
            *(_QWORD *)(a1 + 120) = *(_QWORD *)(v82 + 120);
            *(_QWORD *)(v82 + 104) = 0;
            *(_QWORD *)(v82 + 112) = 0;
            *(_QWORD *)(v82 + 120) = 0;
            a2 = v82 + 128;
          }
          a1 += 128;
          a3 = v78;
          if (v76 == v77)
            goto LABEL_71;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v77, v76, a1);
      }
      goto LABEL_71;
    }
  }
  else if (a3 != a2)
  {
    v44 = 0;
    v45 = 0;
    do
    {
      v46 = a6 + v44;
      v47 = (_QWORD *)(a2 + v44);
      *(_DWORD *)v46 = *(_DWORD *)(a2 + v44);
      v48 = *(_QWORD *)(a2 + v44 + 8);
      v47[1] = 0;
      *(_QWORD *)(v46 + 8) = v48;
      v49 = *(_OWORD *)(a2 + v44 + 32);
      *(_OWORD *)(v46 + 16) = *(_OWORD *)(a2 + v44 + 16);
      *(_OWORD *)(v46 + 32) = v49;
      v50 = *(_OWORD *)(a2 + v44 + 48);
      v51 = *(_OWORD *)(a2 + v44 + 64);
      v52 = *(_OWORD *)(a2 + v44 + 80);
      *(_DWORD *)(v46 + 96) = *(_DWORD *)(a2 + v44 + 96);
      *(_OWORD *)(v46 + 64) = v51;
      *(_OWORD *)(v46 + 80) = v52;
      *(_OWORD *)(v46 + 48) = v50;
      *(_QWORD *)(v46 + 112) = 0;
      *(_QWORD *)(v46 + 120) = 0;
      *(_QWORD *)(v46 + 104) = 0;
      *(_OWORD *)(v46 + 104) = *(_OWORD *)(a2 + v44 + 104);
      *(_QWORD *)(v46 + 120) = *(_QWORD *)(a2 + v44 + 120);
      v47[13] = 0;
      v47[14] = 0;
      v47[15] = 0;
      ++v45;
      v44 += 128;
    }
    while (v47 + 16 != (_QWORD *)a3);
    v96 = v45;
    if (v44)
    {
      v53 = 0;
      v54 = a6 + v44;
      v94 = a6 + v44;
      while (a2 != a1)
      {
        if (*(float *)(v54 - 104) >= *(float *)(a2 - 104))
        {
          v56 = a2;
          v55 = v54;
          v54 -= 128;
        }
        else
        {
          v55 = a2;
          v56 = a2 - 128;
        }
        v57 = a3 + v53;
        v58 = a3 + v53 - 112;
        v59 = (uint64_t *)(a3 + v53 - 24);
        *(_DWORD *)(v57 - 128) = *(_DWORD *)(v55 - 128);
        v60 = *(_QWORD *)(v55 - 120);
        *(_QWORD *)(v55 - 120) = 0;
        v61 = *(void **)(a3 + v53 - 120);
        *(_QWORD *)(v57 - 120) = v60;
        v62 = a3;

        v63 = *(_OWORD *)(v55 - 96);
        *(_OWORD *)v58 = *(_OWORD *)(v55 - 112);
        *(_OWORD *)(v58 + 16) = v63;
        v64 = *(_OWORD *)(v55 - 80);
        v65 = *(_OWORD *)(v55 - 64);
        v66 = *(_OWORD *)(v55 - 48);
        *(_DWORD *)(v58 + 80) = *(_DWORD *)(v55 - 32);
        *(_OWORD *)(v58 + 48) = v65;
        *(_OWORD *)(v58 + 64) = v66;
        *(_OWORD *)(v58 + 32) = v64;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v59);
        a3 = v62;
        *(_OWORD *)v59 = *(_OWORD *)(v55 - 24);
        *(_QWORD *)(v57 - 8) = *(_QWORD *)(v55 - 8);
        *(_QWORD *)(v55 - 24) = 0;
        *(_QWORD *)(v55 - 16) = 0;
        *(_QWORD *)(v55 - 8) = 0;
        v53 -= 128;
        a2 = v56;
        if (v54 == a6)
          goto LABEL_71;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>>(v97, v94, v54, a6, a6, a3, a3 + v53);
    }
    goto LABEL_71;
  }
  v96 = 0;
LABEL_71:
  if (a6)
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v96, a6);
}

void std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  void **v4;
  void **v5;

  if (*a1)
  {
    v3 = 0;
    v4 = (void **)(a2 + 104);
    do
    {
      v5 = v4;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v5);

      ++v3;
      v4 += 16;
    }
    while (v3 < *a1);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      v6 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      v7 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v6;

      v8 = *(_OWORD *)(v5 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a3 + 32) = v8;
      v9 = *(_OWORD *)(v5 + 48);
      v10 = *(_OWORD *)(v5 + 64);
      v11 = *(_OWORD *)(v5 + 80);
      *(_DWORD *)(a3 + 96) = *(_DWORD *)(v5 + 96);
      *(_OWORD *)(a3 + 64) = v10;
      *(_OWORD *)(a3 + 80) = v11;
      *(_OWORD *)(a3 + 48) = v9;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a3 + 104));
      *(_OWORD *)(a3 + 104) = *(_OWORD *)(v5 + 104);
      *(_QWORD *)(a3 + 120) = *(_QWORD *)(v5 + 120);
      *(_QWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 112) = 0;
      *(_QWORD *)(v5 + 120) = 0;
      a3 += 128;
      v5 += 128;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v9 = a3;
  if (a3 != a5)
  {
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v15 = a7 + v13;
      *(_DWORD *)(v15 - 128) = *(_DWORD *)(v9 + v13 - 128);
      v16 = *(_QWORD *)(v9 + v13 - 120);
      *(_QWORD *)(v9 + v13 - 120) = 0;
      v17 = *(void **)(a7 + v13 - 120);
      *(_QWORD *)(v15 - 120) = v16;

      v18 = *(_OWORD *)(v9 + v13 - 96);
      *(_OWORD *)(v15 - 112) = *(_OWORD *)(v9 + v13 - 112);
      *(_OWORD *)(v15 - 96) = v18;
      v19 = *(_OWORD *)(v9 + v13 - 80);
      v20 = *(_OWORD *)(v9 + v13 - 64);
      v21 = *(_OWORD *)(v9 + v13 - 48);
      *(_DWORD *)(v15 - 32) = *(_DWORD *)(v9 + v13 - 32);
      *(_OWORD *)(v15 - 64) = v20;
      *(_OWORD *)(v15 - 48) = v21;
      *(_OWORD *)(v15 - 80) = v19;
      std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a7 + v13 - 24));
      *(_OWORD *)(v15 - 24) = *(_OWORD *)(v9 + v13 - 24);
      *(_QWORD *)(v15 - 8) = *(_QWORD *)(v9 + v13 - 8);
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 8) = 0;
      v13 -= 128;
    }
    while (v9 + v13 != a5);
    a7 += v13;
    v9 = a5;
  }
  *a1 = a2;
  a1[1] = v9;
  a1[2] = a6;
  a1[3] = a7;
}

int *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(int *a1, int *a2, int *a3)
{
  int *v4;
  int *v6;
  int *i;
  int *v8;
  int *v9;

  v4 = a2;
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(a1, a2);
  v6 = a1 + 32;
  for (i = v4 + 32; i != a3; i += 32)
  {
    if (v6 == v4)
      v4 = i;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(v6, i);
    v6 += 32;
  }
  if (v6 != v4)
  {
    v8 = v6;
    v9 = v4;
    do
    {
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(v8, v4);
        v8 += 32;
        v4 += 32;
        if (v4 == a3)
          break;
        if (v8 == v9)
          v9 = v4;
      }
      v4 = v9;
    }
    while (v8 != v9);
  }
  return v6;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(int *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  id v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __n128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  id v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  void **v81;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      if (CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&a2[-8], (uint64_t)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>(a1, (int *)&a2[-8]);
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (int *)a2)
      {
        v14 = (uint64_t)(a1 + 32);
        if (a1 + 32 != (int *)a2)
        {
          v15 = 0;
          v16 = (uint64_t)a1;
          do
          {
            v17 = (_DWORD *)v14;
            if (CRTextRecognition::CRCTLD::CTLDRegion::operator<(v14, v16))
            {
              LODWORD(v71) = *v17;
              v18 = *(void **)(v16 + 136);
              *(_QWORD *)(v16 + 136) = 0;
              v72 = v18;
              v19 = *(_OWORD *)(v16 + 192);
              v75 = *(_OWORD *)(v16 + 176);
              v76 = v19;
              v77 = *(_OWORD *)(v16 + 208);
              v78 = *(_DWORD *)(v16 + 224);
              v20 = *(_OWORD *)(v16 + 160);
              v73 = *(_OWORD *)(v16 + 144);
              v74 = v20;
              v79 = *(_OWORD *)(v16 + 232);
              v80 = *(_QWORD *)(v16 + 248);
              *(_QWORD *)(v16 + 232) = 0;
              *(_QWORD *)(v16 + 240) = 0;
              v21 = v15;
              *(_QWORD *)(v16 + 248) = 0;
              while (1)
              {
                v22 = (char *)a1 + v21;
                *((_DWORD *)v22 + 32) = *(int *)((char *)a1 + v21);
                v23 = *(_QWORD *)((char *)a1 + v21 + 8);
                *((_QWORD *)v22 + 1) = 0;
                v24 = *(void **)((char *)a1 + v21 + 136);
                *((_QWORD *)v22 + 17) = v23;

                v25 = *(_OWORD *)((char *)a1 + v21 + 64);
                *((_OWORD *)v22 + 11) = *((_OWORD *)v22 + 3);
                *((_OWORD *)v22 + 12) = v25;
                *((_OWORD *)v22 + 13) = *((_OWORD *)v22 + 5);
                *((_DWORD *)v22 + 56) = *((_DWORD *)v22 + 24);
                v26 = *(_OWORD *)((char *)a1 + v21 + 32);
                *((_OWORD *)v22 + 9) = *((_OWORD *)v22 + 1);
                *((_OWORD *)v22 + 10) = v26;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)((char *)a1 + v21 + 232));
                *(_OWORD *)(v22 + 232) = *(_OWORD *)(v22 + 104);
                *((_QWORD *)v22 + 31) = *((_QWORD *)v22 + 15);
                *((_QWORD *)v22 + 14) = 0;
                *((_QWORD *)v22 + 15) = 0;
                *((_QWORD *)v22 + 13) = 0;
                if (!v21)
                  break;
                v21 -= 128;
                if ((CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&v71, (uint64_t)a1 + v21) & 1) == 0)
                {
                  v27 = (uint64_t)a1 + v21 + 128;
                  goto LABEL_17;
                }
              }
              v27 = (uint64_t)a1;
LABEL_17:
              *(_DWORD *)v27 = v71;
              v28 = v72;
              v72 = 0;
              v29 = *(void **)(v27 + 8);
              *(_QWORD *)(v27 + 8) = v28;

              v30 = v74;
              *((_OWORD *)v22 + 1) = v73;
              *((_OWORD *)v22 + 2) = v30;
              v31 = v75;
              v32 = v76;
              v33 = v77;
              *((_DWORD *)v22 + 24) = v78;
              *((_OWORD *)v22 + 4) = v32;
              *((_OWORD *)v22 + 5) = v33;
              *((_OWORD *)v22 + 3) = v31;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v22 + 13);
              *((_QWORD *)v22 + 13) = v79;
              *(_QWORD *)(v27 + 112) = *((_QWORD *)&v79 + 1);
              *(_QWORD *)(v27 + 120) = v80;
              v79 = 0uLL;
              v80 = 0;
              v81 = (void **)&v79;
              std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v81);

            }
            v14 = (uint64_t)(v17 + 32);
            v15 += 128;
            v16 = (uint64_t)v17;
          }
          while (v17 + 32 != (_DWORD *)a2);
        }
      }
    }
    else
    {
      v11 = a3 >> 1;
      v12 = (uint64_t)&a1[32 * (a3 >> 1)];
      if ((uint64_t)a3 <= a5)
      {
        v34 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((uint64_t)a1, (__n128 *)&a1[32 * (a3 >> 1)], a3 >> 1, a4, a6);
        v35 = a4 + (v11 << 7);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((uint64_t)&a1[32 * (a3 >> 1)], a2, a3 - v11, v35, v34);
        v71 = a3;
        v36 = a1 + 30;
        v37 = v35;
        v38 = a4;
        v39 = (_QWORD *)(a4 + (a3 << 7));
        while ((_QWORD *)v37 != v39)
        {
          v40 = v36 - 13;
          if (CRTextRecognition::CRCTLD::CTLDRegion::operator<(v37, v38))
          {
            *((_DWORD *)v36 - 30) = *(_DWORD *)v37;
            v41 = *(_QWORD *)(v37 + 8);
            *(_QWORD *)(v37 + 8) = 0;
            v42 = (void *)*(v36 - 14);
            *(v36 - 14) = v41;

            v43 = *(_OWORD *)(v37 + 32);
            *v40 = *(_OWORD *)(v37 + 16);
            *(_OWORD *)(v36 - 11) = v43;
            v44 = *(_OWORD *)(v37 + 48);
            v45 = *(_OWORD *)(v37 + 64);
            v46 = *(_OWORD *)(v37 + 80);
            *((_DWORD *)v36 - 6) = *(_DWORD *)(v37 + 96);
            *(_OWORD *)(v36 - 7) = v45;
            *(_OWORD *)(v36 - 5) = v46;
            *(_OWORD *)(v36 - 9) = v44;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v36 - 2);
            *((_OWORD *)v36 - 1) = *(_OWORD *)(v37 + 104);
            *v36 = *(_QWORD *)(v37 + 120);
            *(_QWORD *)(v37 + 104) = 0;
            *(_QWORD *)(v37 + 112) = 0;
            *(_QWORD *)(v37 + 120) = 0;
            v37 += 128;
          }
          else
          {
            *((_DWORD *)v36 - 30) = *(_DWORD *)v38;
            v47 = *(_QWORD *)(v38 + 8);
            *(_QWORD *)(v38 + 8) = 0;
            v48 = (void *)*(v36 - 14);
            *(v36 - 14) = v47;

            v49 = *(_OWORD *)(v38 + 32);
            *v40 = *(_OWORD *)(v38 + 16);
            *(_OWORD *)(v36 - 11) = v49;
            v50 = *(_OWORD *)(v38 + 48);
            v51 = *(_OWORD *)(v38 + 64);
            v52 = *(_OWORD *)(v38 + 80);
            *((_DWORD *)v36 - 6) = *(_DWORD *)(v38 + 96);
            *(_OWORD *)(v36 - 7) = v51;
            *(_OWORD *)(v36 - 5) = v52;
            *(_OWORD *)(v36 - 9) = v50;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(v36 - 2);
            *((_OWORD *)v36 - 1) = *(_OWORD *)(v38 + 104);
            *v36 = *(_QWORD *)(v38 + 120);
            *(_QWORD *)(v38 + 104) = 0;
            *(_QWORD *)(v38 + 112) = 0;
            *(_QWORD *)(v38 + 120) = 0;
            v38 += 128;
          }
          v36 += 16;
          if (v38 == v35)
          {
            if ((_QWORD *)v37 != v39)
            {
              v53 = 0;
              do
              {
                v54 = (_QWORD *)(v37 + v53);
                v55 = &v36[v53 / 8];
                *((_DWORD *)v55 - 30) = *(_DWORD *)(v37 + v53);
                v56 = *(_QWORD *)(v37 + v53 + 8);
                *(_QWORD *)(v37 + v53 + 8) = 0;
                v57 = (void *)v36[v53 / 8 - 14];
                *(v55 - 14) = v56;

                v58 = *(_OWORD *)(v37 + v53 + 16);
                *(_OWORD *)(v55 - 11) = *(_OWORD *)(v37 + v53 + 32);
                *(_OWORD *)(v55 - 13) = v58;
                v59 = *(_OWORD *)(v37 + v53 + 48);
                v60 = *(_OWORD *)(v37 + v53 + 64);
                v61 = *(_OWORD *)(v37 + v53 + 80);
                *((_DWORD *)v55 - 6) = *(_DWORD *)(v37 + v53 + 96);
                *(_OWORD *)(v55 - 5) = v61;
                *(_OWORD *)(v55 - 7) = v60;
                *(_OWORD *)(v55 - 9) = v59;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&v36[v53 / 8 - 2]);
                *((_OWORD *)v55 - 1) = *(_OWORD *)(v37 + v53 + 104);
                *v55 = *(_QWORD *)(v37 + v53 + 120);
                v54[13] = 0;
                v54[14] = 0;
                v54[15] = 0;
                v53 += 128;
              }
              while (v54 + 16 != v39);
            }
            goto LABEL_33;
          }
        }
        if (v38 != v35)
        {
          v62 = 0;
          do
          {
            v63 = (_QWORD *)(v38 + v62);
            v64 = &v36[v62 / 8];
            *((_DWORD *)v64 - 30) = *(_DWORD *)(v38 + v62);
            v65 = *(_QWORD *)(v38 + v62 + 8);
            *(_QWORD *)(v38 + v62 + 8) = 0;
            v66 = (void *)v36[v62 / 8 - 14];
            *(v64 - 14) = v65;

            v67 = *(_OWORD *)(v38 + v62 + 16);
            *(_OWORD *)(v64 - 11) = *(_OWORD *)(v38 + v62 + 32);
            *(_OWORD *)(v64 - 13) = v67;
            v68 = *(_OWORD *)(v38 + v62 + 48);
            v69 = *(_OWORD *)(v38 + v62 + 64);
            v70 = *(_OWORD *)(v38 + v62 + 80);
            *((_DWORD *)v64 - 6) = *(_DWORD *)(v38 + v62 + 96);
            *(_OWORD *)(v64 - 5) = v70;
            *(_OWORD *)(v64 - 7) = v69;
            *(_OWORD *)(v64 - 9) = v68;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate(&v36[v62 / 8 - 2]);
            *((_OWORD *)v64 - 1) = *(_OWORD *)(v38 + v62 + 104);
            *v64 = *(_QWORD *)(v38 + v62 + 120);
            v63[13] = 0;
            v63[14] = 0;
            v63[15] = 0;
            v62 += 128;
          }
          while (v63 + 16 != (_QWORD *)v35);
        }
LABEL_33:
        if (a4)
          std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v71, a4);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(a1, &a1[32 * (a3 >> 1)], a3 >> 1, a4, a5);
        v13 = a3 - v11;
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v12, a2, v13, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>((uint64_t)a1, v12, (int *)a2, v11, v13, a4, a5);
      }
    }
  }
}

void sub_1D501BF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&a10, v10);
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  int v16;
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  unint64_t *v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  unint64_t *v71;
  __int128 v72;
  _QWORD *v73;
  __n128 *v74;
  uint64_t v75;
  int v76;
  __int8 *v77;
  __n128 *v78;
  unint64_t v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  unint64_t v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  unint64_t v89;
  _QWORD *v90;
  __n128 *v91;
  unint64_t v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  unint64_t v97;
  __n128 *v98;
  _QWORD *v99;
  unint64_t v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;

  if (a3)
  {
    v8 = a1;
    if (a3 == 2)
    {
      v16 = CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)&a2[-8], a1);
      v17 = (_OWORD *)(a4 + 16);
      v18 = (_QWORD *)(a4 + 104);
      if (!v16)
      {
        *(_DWORD *)a4 = *(_DWORD *)v8;
        v61 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(a4 + 8) = v61;
        v62 = *(_OWORD *)(v8 + 32);
        *v17 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(a4 + 32) = v62;
        v63 = *(_OWORD *)(v8 + 48);
        v64 = *(_OWORD *)(v8 + 64);
        v65 = *(_OWORD *)(v8 + 80);
        *(_DWORD *)(a4 + 96) = *(_DWORD *)(v8 + 96);
        *(_OWORD *)(a4 + 64) = v64;
        *(_OWORD *)(a4 + 80) = v65;
        *(_OWORD *)(a4 + 48) = v63;
        *(_QWORD *)(a4 + 112) = 0;
        *(_QWORD *)(a4 + 120) = 0;
        *v18 = 0;
        *(_OWORD *)(a4 + 104) = *(_OWORD *)(v8 + 104);
        *(_QWORD *)(a4 + 120) = *(_QWORD *)(v8 + 120);
        *(_QWORD *)(v8 + 104) = 0;
        *(_QWORD *)(v8 + 112) = 0;
        *(_QWORD *)(v8 + 120) = 0;
        *(_DWORD *)(a4 + 128) = a2[-8].n128_u32[0];
        v66 = a2[-8].n128_i64[1];
        a2[-8].n128_u64[1] = 0;
        *(_QWORD *)(a4 + 136) = v66;
        result = a2[-5];
        v67 = a2[-4];
        v68 = a2[-3];
        LODWORD(v66) = a2[-2].n128_u32[0];
        v69 = a2[-7];
        v70 = a2[-6];
        *(_QWORD *)(a4 + 248) = 0;
        v15 = (_QWORD *)(a4 + 248);
        *(__n128 *)(v15 - 11) = v70;
        *(__n128 *)(v15 - 13) = v69;
        *((_DWORD *)v15 - 6) = v66;
        *(__n128 *)(v15 - 5) = v68;
        *(__n128 *)(v15 - 7) = v67;
        *(__n128 *)(v15 - 9) = result;
        *(v15 - 2) = 0;
        *(v15 - 1) = 0;
        v72 = *(__int128 *)((char *)&a2[-2] + 8);
        v71 = &a2[-2].n128_u64[1];
        result.n128_u64[0] = v72;
        *((_OWORD *)v15 - 1) = v72;
        v27 = v71 + 2;
        v25 = v71;
        goto LABEL_23;
      }
      *(_DWORD *)a4 = a2[-8].n128_u32[0];
      v19 = a2[-8].n128_i64[1];
      a2[-8].n128_u64[1] = 0;
      *(_QWORD *)(a4 + 8) = v19;
      v20 = a2[-6];
      *v17 = a2[-7];
      *(__n128 *)(a4 + 32) = v20;
      v21 = a2[-5];
      v22 = a2[-4];
      v23 = a2[-3];
      *(_DWORD *)(a4 + 96) = a2[-2].n128_u32[0];
      *(__n128 *)(a4 + 64) = v22;
      *(__n128 *)(a4 + 80) = v23;
      *(__n128 *)(a4 + 48) = v21;
      *(_QWORD *)(a4 + 112) = 0;
      *(_QWORD *)(a4 + 120) = 0;
      *v18 = 0;
      *(__n128 *)(a4 + 104) = *(__n128 *)((char *)a2 - 24);
      *(_QWORD *)(a4 + 120) = a2[-1].n128_u64[1];
      a2[-2].n128_u64[1] = 0;
      a2[-1].n128_u64[0] = 0;
      a2[-1].n128_u64[1] = 0;
      *(_DWORD *)(a4 + 128) = *(_DWORD *)v8;
      v24 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(a4 + 136) = v24;
      result = *(__n128 *)(v8 + 48);
      v10 = *(_OWORD *)(v8 + 64);
      v11 = *(_OWORD *)(v8 + 80);
      v12 = *(_DWORD *)(v8 + 96);
      v13 = *(_OWORD *)(v8 + 16);
      v14 = *(_OWORD *)(v8 + 32);
      *(_QWORD *)(a4 + 248) = 0;
      v15 = (_QWORD *)(a4 + 248);
LABEL_7:
      *(_OWORD *)(v15 - 11) = v14;
      *(_OWORD *)(v15 - 13) = v13;
      *((_DWORD *)v15 - 6) = v12;
      *(_OWORD *)(v15 - 5) = v11;
      *(_OWORD *)(v15 - 7) = v10;
      *(__n128 *)(v15 - 9) = result;
      *(v15 - 2) = 0;
      *(v15 - 1) = 0;
      v26 = *(_OWORD *)(v8 + 104);
      v25 = (unint64_t *)(v8 + 104);
      result.n128_u64[0] = v26;
      *((_OWORD *)v15 - 1) = v26;
      v27 = v25 + 2;
LABEL_23:
      *v15 = *v27;
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      *(_DWORD *)a4 = *(_DWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a4 + 8) = v9;
      result = *(__n128 *)(a1 + 48);
      v10 = *(_OWORD *)(a1 + 64);
      v11 = *(_OWORD *)(a1 + 80);
      v12 = *(_DWORD *)(a1 + 96);
      v13 = *(_OWORD *)(a1 + 16);
      v14 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a4 + 120) = 0;
      v15 = (_QWORD *)(a4 + 120);
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      v73 = (_QWORD *)(a1 + (a3 >> 1 << 7));
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(a1, v73, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v8 + (a3 >> 1 << 7), a2, a3 - (a3 >> 1), a4 + (a3 >> 1 << 7), a3 - (a3 >> 1));
      v74 = (__n128 *)(a4 + 120);
      v75 = (uint64_t)v73;
      while ((__n128 *)v75 != a2)
      {
        v76 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v75, v8);
        v77 = &v74[-7].n128_i8[8];
        v78 = v74 - 1;
        if (v76)
        {
          v74[-8].n128_u32[2] = *(_DWORD *)v75;
          v79 = *(_QWORD *)(v75 + 8);
          *(_QWORD *)(v75 + 8) = 0;
          v74[-7].n128_u64[0] = v79;
          v80 = *(__n128 *)(v75 + 32);
          *(_OWORD *)v77 = *(_OWORD *)(v75 + 16);
          *(__n128 *)((char *)v74 - 88) = v80;
          v81 = *(__n128 *)(v75 + 48);
          v82 = *(__n128 *)(v75 + 64);
          v83 = *(__n128 *)(v75 + 80);
          v74[-2].n128_u32[2] = *(_DWORD *)(v75 + 96);
          *(__n128 *)((char *)v74 - 56) = v82;
          *(__n128 *)((char *)v74 - 40) = v83;
          *(__n128 *)((char *)v74 - 72) = v81;
          v74[-1].n128_u64[1] = 0;
          v74->n128_u64[0] = 0;
          v78->n128_u64[0] = 0;
          result = *(__n128 *)(v75 + 104);
          v74[-1] = result;
          v74->n128_u64[0] = *(_QWORD *)(v75 + 120);
          *(_QWORD *)(v75 + 104) = 0;
          *(_QWORD *)(v75 + 112) = 0;
          *(_QWORD *)(v75 + 120) = 0;
          v75 += 128;
        }
        else
        {
          v74[-8].n128_u32[2] = *(_DWORD *)v8;
          v84 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          v74[-7].n128_u64[0] = v84;
          v85 = *(__n128 *)(v8 + 32);
          *(_OWORD *)v77 = *(_OWORD *)(v8 + 16);
          *(__n128 *)((char *)v74 - 88) = v85;
          v86 = *(__n128 *)(v8 + 48);
          v87 = *(__n128 *)(v8 + 64);
          v88 = *(__n128 *)(v8 + 80);
          v74[-2].n128_u32[2] = *(_DWORD *)(v8 + 96);
          *(__n128 *)((char *)v74 - 56) = v87;
          *(__n128 *)((char *)v74 - 40) = v88;
          *(__n128 *)((char *)v74 - 72) = v86;
          v74[-1].n128_u64[1] = 0;
          v74->n128_u64[0] = 0;
          v78->n128_u64[0] = 0;
          result = *(__n128 *)(v8 + 104);
          v74[-1] = result;
          v74->n128_u64[0] = *(_QWORD *)(v8 + 120);
          *(_QWORD *)(v8 + 104) = 0;
          *(_QWORD *)(v8 + 112) = 0;
          *(_QWORD *)(v8 + 120) = 0;
          v8 += 128;
        }
        v74 += 8;
        if ((_QWORD *)v8 == v73)
        {
          if ((__n128 *)v75 != a2)
          {
            v89 = 0;
            do
            {
              v90 = (_QWORD *)(v75 + v89);
              v91 = &v74[v89 / 0x10];
              v91[-8].n128_u32[2] = *(_DWORD *)(v75 + v89);
              v92 = *(_QWORD *)(v75 + v89 + 8);
              v90[1] = 0;
              v91[-7].n128_u64[0] = v92;
              v93 = *(__n128 *)(v75 + v89 + 16);
              *(__n128 *)((char *)v91 - 88) = *(__n128 *)(v75 + v89 + 32);
              *(__n128 *)((char *)v91 - 104) = v93;
              v94 = *(__n128 *)(v75 + v89 + 48);
              v95 = *(__n128 *)(v75 + v89 + 64);
              v96 = *(__n128 *)(v75 + v89 + 80);
              v91[-2].n128_u32[2] = *(_DWORD *)(v75 + v89 + 96);
              *(__n128 *)((char *)v91 - 40) = v96;
              *(__n128 *)((char *)v91 - 56) = v95;
              *(__n128 *)((char *)v91 - 72) = v94;
              v91[-1].n128_u64[1] = 0;
              v91->n128_u64[0] = 0;
              v91[-1].n128_u64[0] = 0;
              result = *(__n128 *)(v75 + v89 + 104);
              v91[-1] = result;
              v91->n128_u64[0] = *(_QWORD *)(v75 + v89 + 120);
              v90[13] = 0;
              v90[14] = 0;
              v90[15] = 0;
              v89 += 128;
            }
            while (v90 + 16 != (_QWORD *)a2);
          }
          return result;
        }
      }
      if ((_QWORD *)v8 != v73)
      {
        v97 = 0;
        do
        {
          v98 = &v74[v97 / 0x10];
          v99 = (_QWORD *)(v8 + v97);
          v98[-8].n128_u32[2] = *(_DWORD *)(v8 + v97);
          v100 = *(_QWORD *)(v8 + v97 + 8);
          v99[1] = 0;
          v98[-7].n128_u64[0] = v100;
          v101 = *(__n128 *)(v8 + v97 + 16);
          *(__n128 *)((char *)v98 - 88) = *(__n128 *)(v8 + v97 + 32);
          *(__n128 *)((char *)v98 - 104) = v101;
          v102 = *(__n128 *)(v8 + v97 + 48);
          v103 = *(__n128 *)(v8 + v97 + 64);
          v104 = *(__n128 *)(v8 + v97 + 80);
          v98[-2].n128_u32[2] = *(_DWORD *)(v8 + v97 + 96);
          *(__n128 *)((char *)v98 - 40) = v104;
          *(__n128 *)((char *)v98 - 56) = v103;
          *(__n128 *)((char *)v98 - 72) = v102;
          v98[-1].n128_u64[1] = 0;
          v98->n128_u64[0] = 0;
          v98[-1].n128_u64[0] = 0;
          result = *(__n128 *)(v8 + v97 + 104);
          v98[-1] = result;
          v98->n128_u64[0] = *(_QWORD *)(v8 + v97 + 120);
          v99[13] = 0;
          v99[14] = 0;
          v99[15] = 0;
          v97 += 128;
        }
        while (v99 + 16 != v73);
      }
    }
    else if ((__n128 *)a1 != a2)
    {
      *(_DWORD *)a4 = *(_DWORD *)a1;
      v28 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a4 + 8) = v28;
      v29 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a4 + 32) = v29;
      v30 = *(_OWORD *)(a1 + 48);
      v31 = *(_OWORD *)(a1 + 64);
      v32 = *(_OWORD *)(a1 + 80);
      *(_DWORD *)(a4 + 96) = *(_DWORD *)(a1 + 96);
      *(_OWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 80) = v32;
      *(_OWORD *)(a4 + 48) = v30;
      *(_QWORD *)(a4 + 112) = 0;
      *(_QWORD *)(a4 + 120) = 0;
      *(_QWORD *)(a4 + 104) = 0;
      result = *(__n128 *)(a1 + 104);
      *(__n128 *)(a4 + 104) = result;
      *(_QWORD *)(a4 + 120) = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      v33 = a1 + 128;
      if ((__n128 *)(a1 + 128) != a2)
      {
        v34 = 0;
        v35 = a4;
        do
        {
          v36 = (_DWORD *)v33;
          v37 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v33, v35);
          v38 = (_OWORD *)(v35 + 144);
          if (v37)
          {
            *(_DWORD *)(v35 + 128) = *(_DWORD *)v35;
            v39 = *(_QWORD *)(v35 + 8);
            *(_QWORD *)(v35 + 8) = 0;
            *(_QWORD *)(v35 + 136) = v39;
            v40 = *(_OWORD *)(v35 + 64);
            *(_OWORD *)(v35 + 176) = *(_OWORD *)(v35 + 48);
            *(_OWORD *)(v35 + 192) = v40;
            *(_OWORD *)(v35 + 208) = *(_OWORD *)(v35 + 80);
            *(_DWORD *)(v35 + 224) = *(_DWORD *)(v35 + 96);
            v41 = *(_OWORD *)(v35 + 32);
            *v38 = *(_OWORD *)(v35 + 16);
            *(_OWORD *)(v35 + 160) = v41;
            *(_OWORD *)(v35 + 232) = *(_OWORD *)(v35 + 104);
            *(_QWORD *)(v35 + 248) = *(_QWORD *)(v35 + 120);
            *(_QWORD *)(v35 + 104) = 0;
            *(_QWORD *)(v35 + 112) = 0;
            v42 = a4;
            *(_QWORD *)(v35 + 120) = 0;
            if (v35 != a4)
            {
              v43 = v34;
              while (1)
              {
                v42 = a4 + v43;
                if (!CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)v36, a4 + v43 - 128))
                  break;
                *(_DWORD *)v42 = *(_DWORD *)(a4 + v43 - 128);
                v44 = *(_QWORD *)(v42 - 120);
                *(_QWORD *)(v42 - 120) = 0;
                v45 = *(void **)(v42 + 8);
                *(_QWORD *)(v42 + 8) = v44;

                v46 = *(_OWORD *)(v42 - 64);
                *(_OWORD *)(v42 + 48) = *(_OWORD *)(v42 - 80);
                *(_OWORD *)(v42 + 64) = v46;
                *(_OWORD *)(v42 + 80) = *(_OWORD *)(v42 - 48);
                *(_DWORD *)(v42 + 96) = *(_DWORD *)(v42 - 32);
                v47 = *(_OWORD *)(v42 - 96);
                *(_OWORD *)(v42 + 16) = *(_OWORD *)(v42 - 112);
                *(_OWORD *)(v42 + 32) = v47;
                std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v42 + 104));
                *(_OWORD *)(v42 + 104) = *(_OWORD *)(v42 - 24);
                *(_QWORD *)(v42 + 120) = *(_QWORD *)(v42 - 8);
                *(_QWORD *)(v42 - 16) = 0;
                *(_QWORD *)(v42 - 8) = 0;
                *(_QWORD *)(v42 - 24) = 0;
                v43 -= 128;
                if (!v43)
                {
                  v42 = a4;
                  break;
                }
              }
            }
            *(_DWORD *)v42 = *v36;
            v48 = *(_QWORD *)(v8 + 136);
            *(_QWORD *)(v8 + 136) = 0;
            v49 = *(void **)(v42 + 8);
            *(_QWORD *)(v42 + 8) = v48;

            v50 = *(_OWORD *)(v8 + 160);
            *(_OWORD *)(v42 + 16) = *(_OWORD *)(v8 + 144);
            *(_OWORD *)(v42 + 32) = v50;
            v51 = *(_OWORD *)(v8 + 176);
            v52 = *(_OWORD *)(v8 + 192);
            v53 = *(_OWORD *)(v8 + 208);
            *(_DWORD *)(v42 + 96) = *(_DWORD *)(v8 + 224);
            *(_OWORD *)(v42 + 64) = v52;
            *(_OWORD *)(v42 + 80) = v53;
            *(_OWORD *)(v42 + 48) = v51;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v42 + 104));
            v55 = *(_OWORD *)(v8 + 232);
            v54 = (_QWORD *)(v8 + 232);
            result.n128_u64[0] = v55;
            *(_OWORD *)(v42 + 104) = v55;
            *(_QWORD *)(v42 + 120) = v54[2];
          }
          else
          {
            *(_DWORD *)(v35 + 128) = *v36;
            v56 = *(_QWORD *)(v8 + 136);
            *(_QWORD *)(v8 + 136) = 0;
            *(_QWORD *)(v35 + 136) = v56;
            v57 = *(_OWORD *)(v8 + 160);
            *v38 = *(_OWORD *)(v8 + 144);
            *(_OWORD *)(v35 + 160) = v57;
            result = *(__n128 *)(v8 + 176);
            v58 = *(_OWORD *)(v8 + 192);
            v59 = *(_OWORD *)(v8 + 208);
            *(_DWORD *)(v35 + 224) = *(_DWORD *)(v8 + 224);
            *(_OWORD *)(v35 + 192) = v58;
            *(_OWORD *)(v35 + 208) = v59;
            *(__n128 *)(v35 + 176) = result;
            *(_QWORD *)(v35 + 240) = 0;
            *(_QWORD *)(v35 + 248) = 0;
            *(_QWORD *)(v35 + 232) = 0;
            v60 = *(_OWORD *)(v8 + 232);
            v54 = (_QWORD *)(v8 + 232);
            result.n128_u64[0] = v60;
            *(_OWORD *)(v35 + 232) = v60;
            *(_QWORD *)(v35 + 248) = v54[2];
          }
          v35 += 128;
          *v54 = 0;
          v54[1] = 0;
          v54[2] = 0;
          v33 = (uint64_t)(v36 + 32);
          v34 += 128;
          v8 = (uint64_t)v36;
        }
        while (v36 + 32 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  unint64_t v88;
  uint64_t v89[4];

  if (!a5)
    return;
  v9 = a5;
  while (a4 > a7 && v9 > a7)
  {
    if (!a4)
      return;
    v14 = 0;
    v15 = -a4;
    while (1)
    {
      v16 = a1 + v14;
      if ((CRTextRecognition::CRCTLD::CTLDRegion::operator<(a2, a1 + v14) & 1) != 0)
        break;
      v14 += 128;
      if (__CFADD__(v15++, 1))
        return;
    }
    v18 = -v15;
    v85 = a7;
    v87 = a3;
    v84 = v9;
    if (-v15 >= v9)
    {
      if (v15 == -1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)(a1 + v14), (int *)a2);
        return;
      }
      if (v15 > 0)
        v18 = 1 - v15;
      v24 = v18 >> 1;
      v21 = (int *)(a1 + (v18 >> 1 << 7) + v14);
      if (a3 != (int *)a2)
      {
        v82 = a6;
        v25 = ((uint64_t)a3 - a2) >> 7;
        a3 = (int *)a2;
        do
        {
          v26 = (uint64_t)&a3[32 * (v25 >> 1)];
          v27 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v26, (uint64_t)v21);
          if (v27)
            v25 += ~(v25 >> 1);
          else
            v25 >>= 1;
          if (v27)
            a3 = (int *)(v26 + 128);
        }
        while (v25);
        a6 = v82;
      }
      v20 = ((uint64_t)a3 - a2) >> 7;
    }
    else
    {
      if (v9 >= 0)
        v19 = v9;
      else
        v19 = v9 + 1;
      v20 = v19 >> 1;
      a3 = (int *)(a2 + (v19 >> 1 << 7));
      v21 = (int *)a2;
      v22 = a2 - a1 - v14;
      if (v22)
      {
        v81 = v19 >> 1;
        v23 = v22 >> 7;
        v21 = (int *)(a1 + v14);
        do
        {
          if (CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)a3, (uint64_t)&v21[32 * (v23 >> 1)]))
          {
            v23 >>= 1;
          }
          else
          {
            v21 += 32 * (v23 >> 1) + 32;
            v23 += ~(v23 >> 1);
          }
        }
        while (v23);
        v20 = v81;
      }
      v24 = ((uint64_t)v21 - a1 - v14) >> 7;
    }
    if (v21 == (int *)a2)
    {
      v31 = a3;
    }
    else if (a3 == (int *)a2)
    {
      v31 = v21;
    }
    else
    {
      v28 = (int *)a2;
      v29 = v20;
      v30 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v21, v28, a3);
      v20 = v29;
      v31 = v30;
    }
    a4 = -(v24 + v15);
    v32 = v84 - v20;
    if (v24 + v20 >= v84 - (v24 + v20) - v15)
    {
      v34 = a3;
      v35 = v20;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v31, v34, v87, a4, v84 - v20, a6, v85);
      a2 = (uint64_t)v21;
      v32 = v35;
      a4 = v24;
      a7 = v85;
      a3 = v31;
    }
    else
    {
      v33 = v24;
      a7 = v85;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::less<void> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v16, v21, v31, v33, v20, a6, v85);
      v16 = (uint64_t)v31;
      a2 = (uint64_t)a3;
      a3 = v87;
    }
    a1 = v16;
    v9 = v32;
    if (!v32)
      return;
  }
  v83 = a6;
  if (a4 <= v9)
  {
    if (a1 != a2)
    {
      v57 = 0;
      v58 = 0;
      do
      {
        v59 = a6 + v57;
        v60 = (_QWORD *)(a1 + v57);
        *(_DWORD *)v59 = *(_DWORD *)(a1 + v57);
        v61 = *(_QWORD *)(a1 + v57 + 8);
        v60[1] = 0;
        *(_QWORD *)(v59 + 8) = v61;
        v62 = *(_OWORD *)(a1 + v57 + 32);
        *(_OWORD *)(v59 + 16) = *(_OWORD *)(a1 + v57 + 16);
        *(_OWORD *)(v59 + 32) = v62;
        v63 = *(_OWORD *)(a1 + v57 + 48);
        v64 = *(_OWORD *)(a1 + v57 + 64);
        v65 = *(_OWORD *)(a1 + v57 + 80);
        *(_DWORD *)(v59 + 96) = *(_DWORD *)(a1 + v57 + 96);
        *(_OWORD *)(v59 + 64) = v64;
        *(_OWORD *)(v59 + 80) = v65;
        *(_OWORD *)(v59 + 48) = v63;
        *(_QWORD *)(v59 + 112) = 0;
        *(_QWORD *)(v59 + 120) = 0;
        *(_QWORD *)(v59 + 104) = 0;
        *(_OWORD *)(v59 + 104) = *(_OWORD *)(a1 + v57 + 104);
        *(_QWORD *)(v59 + 120) = *(_QWORD *)(a1 + v57 + 120);
        v60[13] = 0;
        v60[14] = 0;
        v60[15] = 0;
        ++v58;
        v57 += 128;
      }
      while (v60 + 16 != (_QWORD *)a2);
      v88 = v58;
      if (v57)
      {
        v66 = a6;
        v67 = a6 + v57;
        while ((int *)a2 != a3)
        {
          v68 = (_OWORD *)(a1 + 16);
          if (CRTextRecognition::CRCTLD::CTLDRegion::operator<(a2, v66))
          {
            *(_DWORD *)a1 = *(_DWORD *)a2;
            v69 = *(_QWORD *)(a2 + 8);
            *(_QWORD *)(a2 + 8) = 0;
            v70 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v69;

            v71 = *(_OWORD *)(a2 + 32);
            *v68 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)(a1 + 32) = v71;
            v72 = *(_OWORD *)(a2 + 48);
            v73 = *(_OWORD *)(a2 + 64);
            v74 = *(_OWORD *)(a2 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 64) = v73;
            *(_OWORD *)(a1 + 80) = v74;
            *(_OWORD *)(a1 + 48) = v72;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
            *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
            *(_QWORD *)(a2 + 104) = 0;
            *(_QWORD *)(a2 + 112) = 0;
            *(_QWORD *)(a2 + 120) = 0;
            a2 += 128;
          }
          else
          {
            *(_DWORD *)a1 = *(_DWORD *)v66;
            v75 = *(_QWORD *)(v66 + 8);
            *(_QWORD *)(v66 + 8) = 0;
            v76 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v75;

            v77 = *(_OWORD *)(v66 + 32);
            *v68 = *(_OWORD *)(v66 + 16);
            *(_OWORD *)(a1 + 32) = v77;
            v78 = *(_OWORD *)(v66 + 48);
            v79 = *(_OWORD *)(v66 + 64);
            v80 = *(_OWORD *)(v66 + 80);
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(v66 + 96);
            *(_OWORD *)(a1 + 64) = v79;
            *(_OWORD *)(a1 + 80) = v80;
            *(_OWORD *)(a1 + 48) = v78;
            std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(a1 + 104));
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v66 + 104);
            *(_QWORD *)(a1 + 120) = *(_QWORD *)(v66 + 120);
            *(_QWORD *)(v66 + 104) = 0;
            *(_QWORD *)(v66 + 112) = 0;
            *(_QWORD *)(v66 + 120) = 0;
            v66 += 128;
          }
          a1 += 128;
          if (v67 == v66)
            goto LABEL_76;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *,CRTextRecognition::CRCTLD::CTLDRegion *>(v66, v67, a1);
      }
      goto LABEL_76;
    }
  }
  else if (a3 != (int *)a2)
  {
    v36 = 0;
    v37 = 0;
    do
    {
      v38 = a6 + v36;
      v39 = (_QWORD *)(a2 + v36);
      *(_DWORD *)v38 = *(_DWORD *)(a2 + v36);
      v40 = *(_QWORD *)(a2 + v36 + 8);
      v39[1] = 0;
      *(_QWORD *)(v38 + 8) = v40;
      v41 = *(_OWORD *)(a2 + v36 + 32);
      *(_OWORD *)(v38 + 16) = *(_OWORD *)(a2 + v36 + 16);
      *(_OWORD *)(v38 + 32) = v41;
      v42 = *(_OWORD *)(a2 + v36 + 48);
      v43 = *(_OWORD *)(a2 + v36 + 64);
      v44 = *(_OWORD *)(a2 + v36 + 80);
      *(_DWORD *)(v38 + 96) = *(_DWORD *)(a2 + v36 + 96);
      *(_OWORD *)(v38 + 64) = v43;
      *(_OWORD *)(v38 + 80) = v44;
      *(_OWORD *)(v38 + 48) = v42;
      *(_QWORD *)(v38 + 112) = 0;
      *(_QWORD *)(v38 + 120) = 0;
      *(_QWORD *)(v38 + 104) = 0;
      *(_OWORD *)(v38 + 104) = *(_OWORD *)(a2 + v36 + 104);
      *(_QWORD *)(v38 + 120) = *(_QWORD *)(a2 + v36 + 120);
      v39[13] = 0;
      v39[14] = 0;
      v39[15] = 0;
      ++v37;
      v36 += 128;
    }
    while (v39 + 16 != (_QWORD *)a3);
    v88 = v37;
    if (v36)
    {
      v45 = 0;
      v46 = a6 + v36;
      v86 = a6 + v36;
      while (a2 != a1)
      {
        v47 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v46 - 128, a2 - 128);
        v48 = a3;
        v49 = &a3[v45];
        if (v47)
          v50 = a2;
        else
          v50 = v46;
        if (v47)
          a2 -= 128;
        else
          v46 -= 128;
        *(v49 - 32) = *(_DWORD *)(v50 - 128);
        v51 = *(_QWORD *)(v50 - 120);
        *(_QWORD *)(v50 - 120) = 0;
        v52 = (void *)*((_QWORD *)v49 - 15);
        *((_QWORD *)v49 - 15) = v51;

        v53 = *(_OWORD *)(v50 - 96);
        *((_OWORD *)v49 - 7) = *(_OWORD *)(v50 - 112);
        *((_OWORD *)v49 - 6) = v53;
        v54 = *(_OWORD *)(v50 - 80);
        v55 = *(_OWORD *)(v50 - 64);
        v56 = *(_OWORD *)(v50 - 48);
        *(v49 - 8) = *(_DWORD *)(v50 - 32);
        *((_OWORD *)v49 - 4) = v55;
        *((_OWORD *)v49 - 3) = v56;
        *((_OWORD *)v49 - 5) = v54;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)v49 - 3);
        *(_OWORD *)(v49 - 6) = *(_OWORD *)(v50 - 24);
        *((_QWORD *)v49 - 1) = *(_QWORD *)(v50 - 8);
        a3 = v48;
        *(_QWORD *)(v50 - 24) = 0;
        *(_QWORD *)(v50 - 16) = 0;
        *(_QWORD *)(v50 - 8) = 0;
        v45 -= 32;
        if (v46 == v83)
          goto LABEL_76;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<CRTextRecognition::CRCTLD::CTLDRegion *>,std::reverse_iterator<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>>(v89, v86, v46, v83, v83, (uint64_t)a3, (uint64_t)&a3[v45]);
    }
    goto LABEL_76;
  }
  v88 = 0;
LABEL_76:
  if (v83)
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v88, v83);
}

int *std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char v60;
  int *v61;
  int *v63;
  int *v64;
  unint64_t v65;

  v8 = a1;
  if (a4 == 3)
  {
    v10 = (int *)(a1 + 128);
    if (!CRTextRecognition::CRCTLD::CTLDRegion::operator<(a1 + 128, *a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)(v8 + 128), a2);
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)v8, (int *)(v8 + 128));
      return v10;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)v8, (int *)(v8 + 128));
    a1 = v8 + 128;
    goto LABEL_6;
  }
  if (a4 == 2)
  {
LABEL_6:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> &>((int *)a1, a2);
    return a2;
  }
  if (a6 >= a4)
  {
    *(_DWORD *)a5 = *(_DWORD *)a1;
    v18 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a5 + 8) = v18;
    v19 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a5 + 32) = v19;
    v20 = *(_OWORD *)(a1 + 48);
    v21 = *(_OWORD *)(a1 + 64);
    v22 = *(_OWORD *)(a1 + 80);
    *(_DWORD *)(a5 + 96) = *(_DWORD *)(a1 + 96);
    *(_OWORD *)(a5 + 64) = v21;
    *(_OWORD *)(a5 + 80) = v22;
    *(_OWORD *)(a5 + 48) = v20;
    *(_QWORD *)(a5 + 112) = 0;
    *(_QWORD *)(a5 + 120) = 0;
    *(_QWORD *)(a5 + 104) = 0;
    *(_OWORD *)(a5 + 104) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a5 + 120) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v23 = a5 + 128;
    v24 = a1 + 128;
    v25 = 1;
    if ((int *)(a1 + 128) == a2)
    {
      v39 = a1;
    }
    else
    {
      do
      {
        v26 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v24, *a3);
        v27 = *(_DWORD *)v24;
        if (v26)
        {
          *(_DWORD *)v8 = v27;
          v28 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v29 = *(void **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = v28;

          v30 = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v8 + 16) = *(_OWORD *)(v24 + 16);
          *(_OWORD *)(v8 + 32) = v30;
          v31 = *(_OWORD *)(v24 + 48);
          v32 = *(_OWORD *)(v24 + 64);
          v33 = *(_OWORD *)(v24 + 80);
          *(_DWORD *)(v8 + 96) = *(_DWORD *)(v24 + 96);
          *(_OWORD *)(v8 + 64) = v32;
          *(_OWORD *)(v8 + 80) = v33;
          *(_OWORD *)(v8 + 48) = v31;
          std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v8 + 104));
          *(_OWORD *)(v8 + 104) = *(_OWORD *)(v24 + 104);
          *(_QWORD *)(v8 + 120) = *(_QWORD *)(v24 + 120);
          *(_QWORD *)(v24 + 104) = 0;
          *(_QWORD *)(v24 + 112) = 0;
          *(_QWORD *)(v24 + 120) = 0;
          v8 += 128;
        }
        else
        {
          *(_DWORD *)v23 = v27;
          v34 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v34;
          v35 = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
          *(_OWORD *)(v23 + 32) = v35;
          v36 = *(_OWORD *)(v24 + 48);
          v37 = *(_OWORD *)(v24 + 64);
          v38 = *(_OWORD *)(v24 + 80);
          *(_DWORD *)(v23 + 96) = *(_DWORD *)(v24 + 96);
          *(_OWORD *)(v23 + 64) = v37;
          *(_OWORD *)(v23 + 80) = v38;
          *(_OWORD *)(v23 + 48) = v36;
          *(_QWORD *)(v23 + 112) = 0;
          *(_QWORD *)(v23 + 120) = 0;
          *(_QWORD *)(v23 + 104) = 0;
          *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
          *(_QWORD *)(v23 + 120) = *(_QWORD *)(v24 + 120);
          *(_QWORD *)(v24 + 104) = 0;
          *(_QWORD *)(v24 + 112) = 0;
          *(_QWORD *)(v24 + 120) = 0;
          ++v25;
          v23 += 128;
        }
        v24 += 128;
      }
      while ((int *)v24 != a2);
      v39 = v24 - 128;
    }
    v65 = v25;
    *(_DWORD *)v8 = *a2;
    v43 = *(_QWORD *)(v39 + 136);
    *(_QWORD *)(v39 + 136) = 0;
    v44 = *(void **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v43;

    v45 = *(_OWORD *)(v39 + 160);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v39 + 144);
    *(_OWORD *)(v8 + 32) = v45;
    v46 = *(_OWORD *)(v39 + 176);
    v47 = *(_OWORD *)(v39 + 192);
    v48 = *(_OWORD *)(v39 + 208);
    *(_DWORD *)(v8 + 96) = *(_DWORD *)(v39 + 224);
    *(_OWORD *)(v8 + 64) = v47;
    *(_OWORD *)(v8 + 80) = v48;
    *(_OWORD *)(v8 + 48) = v46;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v8 + 104));
    *(_OWORD *)(v8 + 104) = *(_OWORD *)(v39 + 232);
    *(_QWORD *)(v8 + 120) = *(_QWORD *)(v39 + 248);
    *(_QWORD *)(v39 + 232) = 0;
    *(_QWORD *)(v39 + 240) = 0;
    *(_QWORD *)(v39 + 248) = 0;
    v10 = (int *)(v8 + 128);
    if (v23 > a5)
    {
      v49 = a5;
      v50 = v8 + 128;
      do
      {
        *(_DWORD *)v50 = *(_DWORD *)v49;
        v51 = *(_QWORD *)(v49 + 8);
        *(_QWORD *)(v49 + 8) = 0;
        v52 = *(void **)(v50 + 8);
        *(_QWORD *)(v50 + 8) = v51;

        v53 = *(_OWORD *)(v49 + 32);
        *(_OWORD *)(v50 + 16) = *(_OWORD *)(v49 + 16);
        *(_OWORD *)(v50 + 32) = v53;
        v54 = *(_OWORD *)(v49 + 48);
        v55 = *(_OWORD *)(v49 + 64);
        v56 = *(_OWORD *)(v49 + 80);
        *(_DWORD *)(v50 + 96) = *(_DWORD *)(v49 + 96);
        *(_OWORD *)(v50 + 64) = v55;
        *(_OWORD *)(v50 + 80) = v56;
        *(_OWORD *)(v50 + 48) = v54;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vdeallocate((uint64_t *)(v50 + 104));
        *(_OWORD *)(v50 + 104) = *(_OWORD *)(v49 + 104);
        *(_QWORD *)(v50 + 120) = *(_QWORD *)(v49 + 120);
        *(_QWORD *)(v49 + 104) = 0;
        *(_QWORD *)(v49 + 112) = 0;
        *(_QWORD *)(v49 + 120) = 0;
        v49 += 128;
        v50 += 128;
      }
      while (v49 < v23);
    }
    std::__destruct_n::__process[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion>(&v65, a5);
  }
  else
  {
    if (a4 >= 0)
      v13 = a4;
    else
      v13 = a4 + 1;
    v14 = v13 >> 1;
    v15 = *a3;
    v64 = (int *)(a1 + (v13 >> 1 << 7));
    v16 = (uint64_t)(v64 - 32);
    if ((CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)(v64 - 32), *a3) & 1) != 0)
    {
      v17 = v14;
LABEL_24:
      v63 = (int *)std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(v8, v16, a3, v17, a5, a6);
      v15 = *a3;
    }
    else
    {
      v40 = v14 << 7;
      v17 = v14;
      while (1)
      {
        v41 = v40 - 128;
        if (v40 == 128)
          break;
        --v17;
        v42 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v8 + v40 - 256, v15);
        v40 = v41;
        if (v42)
        {
          v16 = v8 + v41 - 128;
          goto LABEL_24;
        }
      }
      v63 = (int *)v8;
    }
    v57 = a4 - v14;
    if (CRTextRecognition::CRCTLD::CTLDRegion::operator<((uint64_t)v64, v15))
    {
      v10 = a2 + 32;
      v58 = (int *)(v8 + (v14 << 7));
      v59 = (uint64_t)(v58 + 32);
      while ((int *)v59 != a2)
      {
        --v57;
        v60 = CRTextRecognition::CRCTLD::CTLDRegion::operator<(v59, v15);
        v58 += 32;
        v59 += 128;
        if ((v60 & 1) == 0)
          goto LABEL_37;
      }
    }
    else
    {
      v58 = v64;
LABEL_37:
      v10 = (int *)std::__stable_partition_impl<std::_ClassicAlgPolicy,void CRTextRecognition::CRCTLD::order::kwiksort<std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>>(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,std::less<void>,int)::{lambda(std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *> const&)#2} &,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>,long,std::pair<CRTextRecognition::CRCTLD::CTLDRegion *,long>>(v58, a2, a3, v57, a5, a6);
    }
    v61 = v63;
    if (v63 != v64)
    {
      if (v64 != v10)
        return std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CRTextRecognition::CRCTLD::CTLDRegion *>>(v63, v64, v10);
      return v61;
    }
  }
  return v10;
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v4 - 3);
        v4 -= 24;
        v6 = v7;
        if (v7)
          operator delete(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<int>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v20[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 7;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 57)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 6 > v5)
    v5 = v8 >> 6;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
    v9 = 0x1FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(v7, v9);
  v11 = &v10[128 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[128 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v11 + 1) = v13;
  v14 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v11 + 2) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 64);
  v17 = *(_OWORD *)(a2 + 80);
  *((_DWORD *)v11 + 24) = *(_DWORD *)(a2 + 96);
  *((_OWORD *)v11 + 4) = v16;
  *((_OWORD *)v11 + 5) = v17;
  *((_OWORD *)v11 + 3) = v15;
  *((_QWORD *)v11 + 14) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 + 104);
  *((_QWORD *)v11 + 15) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v20[2] = v11 + 128;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_1D501D238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&v6);

        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

_QWORD *std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__init_with_size[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*,CRTextRecognition::CRCTLD::CTLDRegion*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D501D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<CRTextRecognition::CRCTLD::CTLDRegion&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 7;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 6 > v4)
    v4 = v6 >> 6;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80)
    v7 = 0x1FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[128 * v3];
  v14 = &v8[128 * v7];
  std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>::construct[abi:ne180100]<CRTextRecognition::CRCTLD::CTLDRegion,CRTextRecognition::CRCTLD::CTLDRegion&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 128;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1D501D564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v7;
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  unint64_t v11;
  std::vector<int>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  std::vector<int>::size_type v18;
  int *v19;
  int *v20;
  std::vector<int>::pointer v21;
  std::vector<int>::pointer i;
  int v23;
  int *v24;
  std::vector<int>::size_type v25;

  begin = this->__begin_;
  end = this->__end_;
  v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      v24 = &end[__sz - v7];
      v25 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v25 -= 4;
      }
      while (v25);
      this->__end_ = v24;
    }
    else
    {
      if (__sz >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = (char *)value - (char *)begin;
      v12 = ((char *)value - (char *)begin) >> 1;
      if (v12 <= __sz)
        v12 = __sz;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      v16 = (int *)&v14[4 * v7];
      v17 = (int *)&v14[4 * __sz];
      v18 = 4 * __sz - 4 * v7;
      v19 = v16;
      do
      {
        *v19++ = *__x;
        v18 -= 4;
      }
      while (v18);
      v20 = (int *)&v14[4 * v15];
      v21 = this->__begin_;
      for (i = this->__end_; i != v21; --i)
      {
        v23 = *(i - 1);
        *--v16 = v23;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v20;
      if (v21)
        operator delete(v21);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

uint64_t std::__split_buffer<std::vector<BOOL>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(void **)(v2 - 24);
    v2 -= 24;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char v13[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (v6)
  {
    v8 = v7 - 1;
    if (((v7 - 1) ^ (v6 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v8 = v7 - 1;
  }
  v9 = v8 >> 6;
  if (v7 >= 0x41)
    v10 = v9;
  else
    v10 = 0;
  *(_QWORD *)(*a1 + 8 * v10) = 0;
LABEL_9:
  v11 = *a1 + 8 * (v6 >> 6);
  v12 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v11, (uint64_t)v13);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

uint64_t std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__emplace_back_slow_path<float const&,float const&,float const&,float const&>(uint64_t *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  _QWORD v28[5];

  v6 = *a1;
  v7 = (a1[1] - *a1) >> 7;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 57)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v13 = (uint64_t)(a1 + 2);
  v14 = a1[2] - v6;
  if (v14 >> 6 > v8)
    v8 = v14 >> 6;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFF80)
    v15 = 0x1FFFFFFFFFFFFFFLL;
  else
    v15 = v8;
  v28[4] = a1 + 2;
  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>>(v13, v15);
  v17 = &v16[128 * v7];
  v28[0] = v16;
  v28[1] = v17;
  v28[3] = &v16[128 * v18];
  v19 = *a2;
  v20 = *a3;
  v21 = *a4;
  v22 = *a5;
  *(_DWORD *)v17 = -1;
  *((_QWORD *)v17 + 1) = 0;
  *((float *)v17 + 4) = v21;
  *((float *)v17 + 5) = v22;
  *((float *)v17 + 6) = v19;
  *((float *)v17 + 7) = v20;
  *((_QWORD *)v17 + 14) = 0;
  *((_QWORD *)v17 + 15) = 0;
  *((_QWORD *)v17 + 13) = 0;
  v23 = v19;
  v24 = v21;
  *((double *)v17 + 4) = v23;
  *((double *)v17 + 5) = v24;
  v25 = v20;
  *((double *)v17 + 6) = v25;
  *((double *)v17 + 7) = v24;
  *((double *)v17 + 8) = v23;
  *((double *)v17 + 9) = v22;
  *((double *)v17 + 10) = v25;
  *((double *)v17 + 11) = v22;
  *((_DWORD *)v17 + 24) = 0;
  v28[2] = v17 + 128;
  std::vector<CRTextRecognition::CRCTLD::CTLDRegion>::__swap_out_circular_buffer(a1, v28);
  v26 = a1[1];
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)v28);
  return v26;
}

void sub_1D501D9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CRTextRecognition::CRCTLD::CTLDRegion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v6 = v5 - 1;
  }
  v7 = v6 >> 6;
  if (v5 >= 0x41)
    v8 = v7;
  else
    v8 = 0;
  *(_QWORD *)(*a1 + 8 * v8) = 0;
LABEL_9:
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)a3;
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *a1 + 8 * (v4 >> 6);
  v18 = *(_QWORD *)a2;
  v19 = v9;
  v16 = v10;
  v17 = v11;
  v14 = v12;
  v15 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v18, &v16, &v14, (uint64_t)&v13);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void sub_1D501E830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void **v27;

  while (1)
  {
    if (*((char *)v27 - 9) < 0)
      operator delete(*(v27 - 4));
    v27 -= 4;
    if (v27 == &a21)
    {
      if (a14 < 0)
        operator delete(__p);

      _Unwind_Resume(a1);
    }
  }
}

void sub_1D501ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1D501EFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D501F0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CRCastAsClass<CRFormField>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_1D501F134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D501F970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{

  _Unwind_Resume(a1);
}

void sub_1D501FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D50206A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1D5020CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v39;

  if (__p)
    operator delete(__p);

  if (a26)
    operator delete(a26);

  v39 = *(void **)(v37 - 128);
  if (v39)
  {
    *(_QWORD *)(v37 - 120) = v39;
    operator delete(v39);
  }

  if (a29)
    operator delete(a29);

  objc_sync_exit(v32);
  _Unwind_Resume(a1);
}

void sub_1D50211F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

uint64_t std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy((char *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *,false>(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  float *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  unint64_t j;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  float v55;
  float v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  float v61;
  unint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  float v69;
  unint64_t v70;
  float v71;
  float v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  float v80;
  unint64_t v81;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  float v98;
  float v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  float v104;
  unint64_t v105;
  unint64_t k;
  uint64_t v108;
  float v109;
  float v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t m;

  v7 = result;
LABEL_2:
  v8 = (float *)(a2 - 16);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = (uint64_t)(a2 - i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v45 = *(float *)i;
        v46 = *(float *)(a2 - 16);
        if (*(float *)i >= v46)
        {
          if (v46 < v45)
            return result;
          v47 = *(_QWORD *)(i + 8);
          v48 = *(_QWORD *)(a2 - 8);
          if (v47 >= v48)
            return result;
        }
        else
        {
          v47 = *(_QWORD *)(i + 8);
          v48 = *(_QWORD *)(a2 - 8);
        }
        *(float *)i = v46;
        *(float *)(a2 - 16) = v45;
        *(_QWORD *)(i + 8) = v48;
        *(_QWORD *)(a2 - 8) = v47;
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(i, i + 16, a2 - 16);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(i, i + 16, i + 32, a2 - 16);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(i, i + 16, i + 32, i + 48, a2 - 16);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v64 = (v11 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = i + 16 * v67;
                if (2 * v66 + 2 < (uint64_t)v11)
                {
                  v69 = *(float *)(v68 + 16);
                  if (v69 < *(float *)v68 || *(float *)v68 >= v69 && *(_QWORD *)(v68 + 24) < *(_QWORD *)(v68 + 8))
                  {
                    v68 += 16;
                    v67 = 2 * v66 + 2;
                  }
                }
                v70 = i + 16 * v66;
                v71 = *(float *)v70;
                v72 = *(float *)v68;
                if (*(float *)v70 >= *(float *)v68)
                {
                  v73 = *(_QWORD *)(v70 + 8);
                  v74 = *(_QWORD *)(v68 + 8);
                  if (v72 < v71 || v73 >= v74)
                  {
                    *(float *)v70 = v72;
                    *(_QWORD *)(v70 + 8) = v74;
                    if (v64 >= v67)
                    {
                      while (1)
                      {
                        v77 = 2 * v67;
                        v67 = (2 * v67) | 1;
                        v76 = i + 16 * v67;
                        v78 = v77 + 2;
                        if (v78 < (uint64_t)v11)
                        {
                          v79 = *(float *)(v76 + 16);
                          if (v79 < *(float *)v76
                            || *(float *)v76 >= v79 && (result = *(_QWORD *)(v76 + 24), result < *(_QWORD *)(v76 + 8)))
                          {
                            v76 += 16;
                            v67 = v78;
                          }
                        }
                        v80 = *(float *)v76;
                        if (v71 < *(float *)v76)
                          break;
                        v81 = *(_QWORD *)(v76 + 8);
                        if (v80 >= v71 && v73 < v81)
                          break;
                        *(float *)v68 = v80;
                        *(_QWORD *)(v68 + 8) = v81;
                        v68 = v76;
                        if (v64 < v67)
                          goto LABEL_134;
                      }
                    }
                    v76 = v68;
LABEL_134:
                    *(float *)v76 = v71;
                    *(_QWORD *)(v76 + 8) = v73;
                  }
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v83 = (unint64_t)v10 >> 4;
            while (1)
            {
              v84 = 0;
              v85 = *(float *)i;
              v86 = *(_QWORD *)(i + 8);
              v87 = v83 - 2;
              if (v83 < 2)
                v87 = v83 - 1;
              v88 = v87 >> 1;
              v89 = i;
              do
              {
                v90 = v89;
                v89 += 16 * v84 + 16;
                v91 = 2 * v84;
                v84 = (2 * v84) | 1;
                v92 = v91 + 2;
                if (v92 < v83)
                {
                  v93 = *(float *)(v89 + 16);
                  if (v93 < *(float *)v89
                    || *(float *)v89 >= v93 && (result = *(_QWORD *)(v89 + 8), *(_QWORD *)(v89 + 24) < result))
                  {
                    v89 += 16;
                    v84 = v92;
                  }
                }
                *(_DWORD *)v90 = *(_DWORD *)v89;
                *(_QWORD *)(v90 + 8) = *(_QWORD *)(v89 + 8);
              }
              while (v84 <= v88);
              if (v89 == a2 - 16)
              {
                *(float *)v89 = v85;
                *(_QWORD *)(v89 + 8) = v86;
              }
              else
              {
                *(_DWORD *)v89 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v89 + 8) = *(_QWORD *)(a2 - 8);
                *(float *)(a2 - 16) = v85;
                *(_QWORD *)(a2 - 8) = v86;
                v94 = v89 - i + 16;
                if (v94 >= 17)
                {
                  v95 = ((unint64_t)v94 >> 4) - 2;
                  v96 = v95 >> 1;
                  v97 = i + 16 * (v95 >> 1);
                  v98 = *(float *)v89;
                  v99 = *(float *)v97;
                  if (*(float *)v89 < *(float *)v97)
                  {
                    v100 = *(_QWORD *)(v89 + 8);
                    v101 = *(_QWORD *)(v97 + 8);
LABEL_166:
                    *(float *)v89 = v99;
                    *(_QWORD *)(v89 + 8) = v101;
                    if (v95 >= 2)
                    {
                      while (1)
                      {
                        v103 = v96 - 1;
                        v96 = (v96 - 1) >> 1;
                        v102 = i + 16 * v96;
                        v104 = *(float *)v102;
                        if (v98 >= *(float *)v102)
                        {
                          if (v104 < v98)
                            break;
                          v105 = *(_QWORD *)(v102 + 8);
                          if (v100 >= v105)
                            break;
                        }
                        else
                        {
                          v105 = *(_QWORD *)(v102 + 8);
                        }
                        *(float *)v97 = v104;
                        *(_QWORD *)(v97 + 8) = v105;
                        v97 = i + 16 * v96;
                        if (v103 <= 1)
                          goto LABEL_173;
                      }
                    }
                    v102 = v97;
LABEL_173:
                    *(float *)v102 = v98;
                    *(_QWORD *)(v102 + 8) = v100;
                    goto LABEL_174;
                  }
                  if (v99 >= v98)
                  {
                    v100 = *(_QWORD *)(v89 + 8);
                    v101 = *(_QWORD *)(v97 + 8);
                    if (v100 < v101)
                      goto LABEL_166;
                  }
                }
              }
LABEL_174:
              a2 -= 16;
              if (v83-- <= 2)
                return result;
            }
          }
          v12 = v11 >> 1;
          v13 = i + 16 * (v11 >> 1);
          if ((unint64_t)v10 < 0x801)
          {
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v7 + 16 * (v11 >> 1), v7, a2 - 16);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v7, v7 + 16 * (v11 >> 1), a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v7 + 16, v13 - 16, a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v7 + 32, v7 + 16 + 16 * v12, a2 - 48);
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v13 - 16, v13, v7 + 16 + 16 * v12);
            v14 = *(float *)v7;
            *(_DWORD *)v7 = *(_DWORD *)v13;
            *(float *)v13 = v14;
            v15 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = v15;
          }
          --a3;
          v16 = *(float *)v7;
          if ((a4 & 1) == 0)
          {
            v17 = *(float *)(v7 - 16);
            if (v16 >= v17)
            {
              v18 = *(_QWORD *)(v7 + 8);
              if (v17 < v16 || v18 >= *(_QWORD *)(v7 - 8))
              {
                v34 = *v8;
                if (*v8 >= v16 && (v16 < v34 || *(_QWORD *)(a2 - 8) >= v18))
                {
                  for (i = v7 + 16;
                        i < a2 && *(float *)i >= v16 && (v16 < *(float *)i || *(_QWORD *)(i + 8) >= v18);
                }
                else
                {
                  i = v7;
                  do
                  {
                    v35 = *(float *)(i + 16);
                    i += 16;
                    v36 = v35;
                  }
                  while (v35 >= v16 && (v16 < v36 || *(_QWORD *)(i + 8) >= v18));
                }
                j = a2;
                if (i < a2)
                {
                  for (j = a2 - 16; v34 < v16 || v16 >= v34 && *(_QWORD *)(j + 8) < v18; j -= 16)
                  {
                    v38 = *(float *)(j - 16);
                    v34 = v38;
                  }
                }
                if (i < j)
                {
                  v39 = *(float *)i;
                  v40 = *(float *)j;
                  do
                  {
                    *(float *)i = v40;
                    *(float *)j = v39;
                    v41 = *(float *)(i + 16);
                    i += 16;
                    v39 = v41;
                    v42 = *(_QWORD *)(i - 8);
                    *(_QWORD *)(i - 8) = *(_QWORD *)(j + 8);
                    *(_QWORD *)(j + 8) = v42;
                    while (v39 >= v16 && (v16 < v39 || *(_QWORD *)(i + 8) >= v18))
                    {
                      v43 = *(float *)(i + 16);
                      i += 16;
                      v39 = v43;
                    }
                    do
                    {
                      do
                      {
                        v44 = *(float *)(j - 16);
                        j -= 16;
                        v40 = v44;
                      }
                      while (v44 < v16);
                    }
                    while (v16 >= v40 && *(_QWORD *)(j + 8) < v18);
                  }
                  while (i < j);
                }
                if (i - 16 != v7)
                {
                  *(_DWORD *)v7 = *(_DWORD *)(i - 16);
                  *(_QWORD *)(v7 + 8) = *(_QWORD *)(i - 8);
                }
                a4 = 0;
                *(float *)(i - 16) = v16;
                *(_QWORD *)(i - 8) = v18;
                continue;
              }
            }
          }
          v19 = 0;
          v20 = *(_QWORD *)(v7 + 8);
          while (1)
          {
            v21 = *(float *)(v7 + v19 + 16);
            if (v16 >= v21 && (v21 < v16 || v20 >= *(_QWORD *)(v7 + v19 + 24)))
              break;
            v19 += 16;
          }
          v22 = v7 + v19 + 16;
          if (v19)
          {
            v23 = *v8;
            v24 = a2 - 16;
            if (v16 >= *v8)
            {
              do
              {
                if (v23 >= v16 && v20 < *(_QWORD *)(v24 + 8))
                  break;
                v25 = *(float *)(v24 - 16);
                v24 -= 16;
                v23 = v25;
              }
              while (v16 >= v25);
            }
          }
          else
          {
            v24 = a2;
            if (v22 < a2)
            {
              v26 = *v8;
              v24 = a2 - 16;
              if (v16 >= *v8)
              {
                v24 = a2 - 16;
                do
                {
                  if (v26 >= v16)
                  {
                    if (v22 >= v24 || v20 < *(_QWORD *)(v24 + 8))
                      break;
                  }
                  else if (v22 >= v24)
                  {
                    break;
                  }
                  v27 = *(float *)(v24 - 16);
                  v24 -= 16;
                  v26 = v27;
                }
                while (v16 >= v27);
              }
            }
          }
          if (v22 >= v24)
          {
            i = v22;
          }
          else
          {
            v28 = *(float *)v24;
            i = v22;
            v29 = v24;
            do
            {
              *(float *)i = v28;
              *(float *)v29 = v21;
              v30 = *(_QWORD *)(i + 8);
              *(_QWORD *)(i + 8) = *(_QWORD *)(v29 + 8);
              *(_QWORD *)(v29 + 8) = v30;
              do
              {
                do
                {
                  v31 = *(float *)(i + 16);
                  i += 16;
                  v21 = v31;
                }
                while (v16 < v31);
              }
              while (v21 >= v16 && v20 < *(_QWORD *)(i + 8));
              do
              {
                v32 = *(float *)(v29 - 16);
                v29 -= 16;
                v28 = v32;
              }
              while (v16 >= v32 && (v28 < v16 || v20 >= *(_QWORD *)(v29 + 8)));
            }
            while (i < v29);
          }
          if (i - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(i - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(i - 8);
          }
          *(float *)(i - 16) = v16;
          *(_QWORD *)(i - 8) = v20;
          if (v22 < v24)
          {
LABEL_50:
            result = std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *,false>(v7, i - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(v7, i - 16);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v33)
              continue;
            goto LABEL_50;
          }
          a2 = i - 16;
          if (v33)
            return result;
          goto LABEL_2;
        }
        v49 = i + 16;
        v51 = i == a2 || v49 == a2;
        if ((a4 & 1) == 0)
        {
          if (v51)
            return result;
          for (k = i + 8; ; k += 16)
          {
            v108 = v7;
            v7 = v49;
            v109 = *(float *)v108;
            v110 = *(float *)(v108 + 16);
            if (*(float *)v108 < v110)
              break;
            if (v110 >= v109)
            {
              v112 = *(_QWORD *)(v108 + 8);
              v111 = *(_QWORD *)(v108 + 24);
              if (v112 < v111)
                goto LABEL_186;
            }
LABEL_192:
            v49 += 16;
            if (v7 + 16 == a2)
              return result;
          }
          v111 = *(_QWORD *)(v108 + 24);
LABEL_186:
          for (m = k; ; m -= 16)
          {
            *(float *)(m + 8) = v109;
            *(_QWORD *)(m + 16) = *(_QWORD *)m;
            v109 = *(float *)(m - 24);
            if (v109 >= v110 && (v110 < v109 || *(_QWORD *)(m - 16) >= v111))
              break;
          }
          *(float *)(m - 8) = v110;
          *(_QWORD *)m = v111;
          goto LABEL_192;
        }
        if (v51)
          return result;
        v52 = 0;
        v53 = i;
        do
        {
          v54 = v53;
          v53 = v49;
          v55 = *(float *)v54;
          v56 = *(float *)(v54 + 16);
          if (*(float *)v54 >= v56)
          {
            if (v56 < v55)
              goto LABEL_116;
            v58 = *(_QWORD *)(v54 + 8);
            v57 = *(_QWORD *)(v54 + 24);
            if (v58 >= v57)
              goto LABEL_116;
          }
          else
          {
            v57 = *(_QWORD *)(v54 + 24);
            v58 = *(_QWORD *)(v54 + 8);
          }
          *(float *)(v54 + 16) = v55;
          *(_QWORD *)(v53 + 8) = v58;
          v59 = i;
          if (v54 == i)
            goto LABEL_115;
          v60 = v52;
          while (1)
          {
            v61 = *(float *)(i + v60 - 16);
            if (v61 >= v56)
              break;
            v62 = *(_QWORD *)(i + v60 - 8);
LABEL_112:
            v54 -= 16;
            v63 = i + v60;
            *(float *)v63 = v61;
            *(_QWORD *)(v63 + 8) = v62;
            v60 -= 16;
            if (!v60)
            {
              v59 = i;
              goto LABEL_115;
            }
          }
          if (v56 >= v61)
          {
            v59 = i + v60;
            v62 = *(_QWORD *)(i + v60 - 8);
            if (v62 >= v57)
              goto LABEL_115;
            goto LABEL_112;
          }
          v59 = v54;
LABEL_115:
          *(float *)v59 = v56;
          *(_QWORD *)(v59 + 8) = v57;
LABEL_116:
          v49 = v53 + 16;
          v52 += 16;
        }
        while (v53 + 16 != a2);
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  unint64_t v18;

  v3 = *(float *)result;
  v4 = *(float *)a2;
  if (*(float *)result >= *(float *)a2 && (v4 < v3 || *(_QWORD *)(result + 8) >= *(_QWORD *)(a2 + 8)))
  {
    v8 = *(float *)a3;
    if (v4 >= *(float *)a3)
    {
      if (v8 < v4)
        return result;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a3 + 8);
      if (v9 >= v10)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a3 + 8);
    }
    *(float *)a2 = v8;
    *(float *)a3 = v4;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a3 + 8) = v9;
    v11 = *(float *)result;
    v12 = *(float *)a2;
    if (*(float *)result >= *(float *)a2)
    {
      if (v12 < v11)
        return result;
      v13 = *(_QWORD *)(result + 8);
      v14 = *(_QWORD *)(a2 + 8);
      if (v13 >= v14)
        return result;
    }
    else
    {
      v13 = *(_QWORD *)(result + 8);
      v14 = *(_QWORD *)(a2 + 8);
    }
    *(float *)result = v12;
    *(float *)a2 = v11;
    *(_QWORD *)(result + 8) = v14;
    *(_QWORD *)(a2 + 8) = v13;
    return result;
  }
  v5 = *(float *)a3;
  if (v4 < *(float *)a3)
  {
    v6 = *(_QWORD *)(a3 + 8);
LABEL_6:
    *(float *)result = v5;
    *(float *)a3 = v3;
    v7 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = v6;
    *(_QWORD *)(a3 + 8) = v7;
    return result;
  }
  v15 = *(_QWORD *)(a2 + 8);
  if (v5 >= v4)
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v15 < v6)
      goto LABEL_6;
  }
  *(float *)result = v4;
  *(float *)a2 = v3;
  v16 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = v15;
  *(_QWORD *)(a2 + 8) = v16;
  v17 = *(float *)a3;
  if (v3 < *(float *)a3)
  {
    v18 = *(_QWORD *)(a3 + 8);
LABEL_23:
    *(float *)a2 = v17;
    *(float *)a3 = v3;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a3 + 8) = v16;
    return result;
  }
  if (v17 >= v3)
  {
    v18 = *(_QWORD *)(a3 + 8);
    if (v16 < v18)
      goto LABEL_23;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  unint64_t v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)a1;
      v7 = *(float *)(a2 - 16);
      if (*(float *)a1 < v7)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a2 - 8);
LABEL_30:
        *(float *)a1 = v7;
        *(float *)(a2 - 16) = v6;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a2 - 8);
        if (v8 < v9)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a1 + 16, a1 + 32);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(float *)v10;
  v15 = *(float *)v11;
  if (*(float *)v10 >= *(float *)v11)
  {
    if (v15 < v14)
      goto LABEL_21;
    v17 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(v11 + 8);
    if (v17 >= v16)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
  }
  *(float *)v11 = v14;
  *(_QWORD *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(float *)(a1 + v19 + 16);
    if (v21 >= v15)
    {
      if (v15 < v21)
      {
        v18 = a1 + v19 + 32;
        goto LABEL_20;
      }
      v22 = *(_QWORD *)(a1 + v19 + 24);
      if (v22 >= v16)
      {
        v18 = v10;
LABEL_20:
        *(float *)v18 = v15;
        *(_QWORD *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(float *)(v20 + 32) = v21;
    *(_QWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a2, a3);
  v9 = *(float *)a3;
  v10 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v10 < v9)
      return result;
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a4 + 8);
    if (v11 >= v12)
      return result;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a4 + 8);
  }
  *(float *)a3 = v10;
  *(float *)a4 = v9;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a4 + 8) = v11;
  v13 = *(float *)a2;
  v14 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v14 < v13)
      return result;
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a3 + 8);
    if (v15 >= v16)
      return result;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a3 + 8);
  }
  *(float *)a2 = v14;
  *(float *)a3 = v13;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a3 + 8) = v15;
  v17 = *(float *)a1;
  v18 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a2 + 8);
LABEL_15:
    *(float *)a1 = v18;
    *(float *)a2 = v17;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a2 + 8);
    if (v19 < v20)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::tuple<float,unsigned long> *>(a1, a2, a3, a4);
  v11 = *(float *)a4;
  v12 = *(float *)a5;
  if (*(float *)a4 >= *(float *)a5)
  {
    if (v12 < v11)
      return result;
    v13 = *(_QWORD *)(a4 + 8);
    v14 = *(_QWORD *)(a5 + 8);
    if (v13 >= v14)
      return result;
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 8);
    v14 = *(_QWORD *)(a5 + 8);
  }
  *(float *)a4 = v12;
  *(float *)a5 = v11;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a5 + 8) = v13;
  v15 = *(float *)a3;
  v16 = *(float *)a4;
  if (*(float *)a3 >= *(float *)a4)
  {
    if (v16 < v15)
      return result;
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a4 + 8);
    if (v17 >= v18)
      return result;
  }
  else
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a4 + 8);
  }
  *(float *)a3 = v16;
  *(float *)a4 = v15;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a4 + 8) = v17;
  v19 = *(float *)a2;
  v20 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a3)
  {
    if (v20 < v19)
      return result;
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a3 + 8);
    if (v21 >= v22)
      return result;
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a3 + 8);
  }
  *(float *)a2 = v20;
  *(float *)a3 = v19;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a3 + 8) = v21;
  v23 = *(float *)a1;
  v24 = *(float *)a2;
  if (*(float *)a1 < *(float *)a2)
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a2 + 8);
LABEL_9:
    *(float *)a1 = v24;
    *(float *)a2 = v23;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a2 + 8);
    if (v25 < v26)
      goto LABEL_9;
  }
  return result;
}

void sub_1D5025888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5025A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1D5025BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5025DDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5026124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D50263DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1D50264DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D50269E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5026C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void *getJPHepburn()
{
  id v0;

  v0 = &unk_1E9943B30;
  return &unk_1E9943B30;
}

void *getZhHansFN()
{
  id v0;

  v0 = &unk_1E9944698;
  return &unk_1E9944698;
}

void *getZhHansLN()
{
  id v0;

  v0 = &unk_1E99446C0;
  return &unk_1E99446C0;
}

void *getLMConfig()
{
  id v0;

  v0 = &unk_1E9943B08;
  return &unk_1E9943B08;
}

void *getConfidenceThresholds()
{
  id v0;

  v0 = &unk_1E993FD78;
  return &unk_1E993FD78;
}

void *getLineWrappingConfig()
{
  id v0;

  v0 = &unk_1E9944620;
  return &unk_1E9944620;
}

void *getFormContentTypeMappings()
{
  id v0;

  v0 = &unk_1E993F110;
  return &unk_1E993F110;
}

void *getFormContentTypes()
{
  id v0;

  v0 = &unk_1E993F128;
  return &unk_1E993F128;
}

void *getNamePrefixes()
{
  id v0;

  v0 = &unk_1E9944670;
  return &unk_1E9944670;
}

const __int16 *mult(const __int16 *result, int a2, int16x4_t *a3, int a4, int *a5, int a6)
{
  unint64_t v6;
  int *v7;
  int32x4_t v8;
  const __int16 *v9;
  uint64_t v10;
  int16x4_t *v11;
  int16x4_t v12;
  int16x4_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  if ((a2 & 7) == 0)
    return mult8(result, a2, a3, a4, a5, a6);
  if (a6 >= 4)
  {
    v6 = 0;
    do
    {
      if (a2 >= 1)
      {
        v7 = &a5[v6];
        v8 = *(int32x4_t *)v7;
        v9 = result;
        v10 = a2;
        v11 = a3;
        do
        {
          v12 = *v11++;
          v13 = vld1_dup_s16(v9++);
          v8 = vsraq_n_s32(v8, vmull_s16(v13, v12), 0xCuLL);
          --v10;
        }
        while (v10);
        a3 += (a2 - 1) + 1;
        *(int32x4_t *)v7 = v8;
      }
      v6 += 4;
    }
    while (v6 <= (a6 - 4));
  }
  if (a2 >= 1)
  {
    if (a6 <= 0)
      v14 = -(-a6 & 3);
    else
      v14 = a6 & 3;
    v15 = a2;
    while (v14 != 3)
    {
      if (v14 == 2)
      {
        v16 = *result;
LABEL_20:
        v18 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 2] += (v16 * v18) >> 12;
        goto LABEL_21;
      }
      if (v14 == 1)
      {
        v16 = *result;
LABEL_21:
        v19 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 1] += (v16 * v19) >> 12;
      }
      ++result;
      if (!--v15)
        return result;
    }
    v16 = *result;
    v17 = a3->i16[0];
    a3 = (int16x4_t *)((char *)a3 + 2);
    a5[a6 - 3] += (v17 * v16) >> 12;
    goto LABEL_20;
  }
  return result;
}

const __int16 *mult8(const __int16 *result, int a2, int16x4_t *a3, int a4, int *a5, int a6)
{
  unint64_t v6;
  int v7;
  int32x4_t v8;
  int v9;
  int16x4_t *v10;
  const __int16 *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int16x4x4_t v18;

  if (a6 >= 4)
  {
    v6 = 0;
    v7 = a2 - 4;
    do
    {
      v8 = 0uLL;
      if (a2 >= 4)
      {
        v9 = 0;
        v10 = a3;
        v11 = result;
        do
        {
          v18 = vld4_dup_s16(v11);
          v11 += 4;
          v8 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v8, vmull_s16(v18.val[0], *v10), 0xCuLL), vmull_s16(v18.val[1], (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v10->i8, *(int8x16_t *)v10->i8, 8uLL)), 0xCuLL), vmull_s16(v18.val[2], v10[2]), 0xCuLL), vmull_s16(v18.val[3], (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v10[2].i8, *(int8x16_t *)v10[2].i8, 8uLL)), 0xCuLL);
          v9 += 4;
          v10 += 4;
        }
        while (v9 <= v7);
        a3 += 4 * (v7 >> 2) + 4;
      }
      *(int32x4_t *)&a5[v6] = v8;
      v6 += 4;
    }
    while (v6 <= (a6 - 4));
  }
  if (a2 >= 1)
  {
    if (a6 <= 0)
      v12 = -(-a6 & 3);
    else
      v12 = a6 & 3;
    v13 = a2;
    while (v12 != 3)
    {
      if (v12 == 2)
      {
        v14 = *result;
LABEL_19:
        v16 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 2] += (v14 * v16) >> 12;
        goto LABEL_20;
      }
      if (v12 == 1)
      {
        v14 = *result;
LABEL_20:
        v17 = a3->i16[0];
        a3 = (int16x4_t *)((char *)a3 + 2);
        a5[a6 - 1] += (v14 * v17) >> 12;
      }
      ++result;
      if (!--v13)
        return result;
    }
    v14 = *result;
    v15 = a3->i16[0];
    a3 = (int16x4_t *)((char *)a3 + 2);
    a5[a6 - 3] += (v15 * v14) >> 12;
    goto LABEL_19;
  }
  return result;
}

uint64_t convolve(uint64_t result, int a2, int a3, __int16 *a4, int a5, int a6, int *a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 *v17;
  int v18;
  __int16 *v19;
  uint64_t v20;
  int v21;

  if (a3 >= a6)
  {
    v8 = 0;
    v9 = (a2 - a5 + 1);
    v10 = (a3 - a6 + 1);
    v11 = 2 * a2;
    do
    {
      if (((a2 - a5) & 0x80000000) == 0)
      {
        v12 = 0;
        v13 = result;
        do
        {
          if (a6 < 1)
          {
            v15 = 0;
          }
          else
          {
            v14 = 0;
            v15 = 0;
            v16 = a6 * a5 - 1;
            v17 = (__int16 *)v13;
            do
            {
              v18 = v16;
              v19 = v17;
              v20 = a5;
              if (a5 >= 1)
              {
                do
                {
                  v21 = *v19++;
                  v15 += (v21 * a4[v18--]) >> a8;
                  --v20;
                }
                while (v20);
              }
              ++v14;
              v17 = (__int16 *)((char *)v17 + v11);
              v16 -= a5;
            }
            while (v14 != a6);
          }
          a7[v12 + v8 * (int)v9] = v15;
          ++v12;
          v13 += 2;
        }
        while (v12 != v9);
      }
      ++v8;
      result += v11;
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t convolves(uint64_t result, int a2, int a3, __int16 *a4, int a5, int a6, int *a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 *v17;
  int v18;
  __int16 *v19;
  uint64_t v20;
  int v21;

  if (a3 >= a6)
  {
    v8 = 0;
    v9 = (a2 - a5 + 1);
    v10 = (a3 - a6 + 1);
    v11 = 2 * a2;
    do
    {
      if (((a2 - a5) & 0x80000000) == 0)
      {
        v12 = 0;
        v13 = result;
        do
        {
          if (a6 < 1)
          {
            v15 = 0;
          }
          else
          {
            v14 = 0;
            v15 = 0;
            v16 = a6 * a5 - 1;
            v17 = (__int16 *)v13;
            do
            {
              v18 = v16;
              v19 = v17;
              v20 = a5;
              if (a5 >= 1)
              {
                do
                {
                  v21 = *v19++;
                  v15 += (v21 * a4[v18--]) >> a8;
                  --v20;
                }
                while (v20);
              }
              ++v14;
              v17 = (__int16 *)((char *)v17 + v11);
              v16 -= a5;
            }
            while (v14 != a6);
          }
          a7[v12 + v8 * (int)v9] += v15;
          ++v12;
          v13 += 2;
        }
        while (v12 != v9);
      }
      ++v8;
      result += v11;
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t convolves5x5(uint64_t result, int a2, int a3, __int16 *a4, int a5, int *a6)
{
  int v6;
  int v7;
  uint64_t v8;
  int16x4_t *v9;
  uint64_t i;
  _WORD *v11;
  __int16 v12;
  __int16 v13;
  uint64_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  uint64_t v19;
  int16x8_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int16x4_t *v24;
  int16x8_t v25;
  int16x8_t *v26;
  int16x8_t v27;
  int16x4_t *v28;
  int16x8_t v29;
  int32x4_t v30;
  uint64_t v31;
  int16x4_t *v32;
  uint64_t j;
  _WORD *v34;
  __int16 v35;
  __int16 v36;
  uint64_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  uint64_t v48;
  uint64_t v49;
  int16x4_t v50;
  uint64_t v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t *v54;
  int8x16_t v55;
  int16x8_t v56;
  int16x4_t *v57;
  int32x4_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int16x4_t *v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x4_t v78;
  _BYTE v79[56];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = a2 - a5;
  v7 = a2 - a5 + 1;
  if ((v7 & 3) != 0)
  {
    v8 = 0;
    memset(v79, 0, 50);
    do
    {
      v9 = (int16x4_t *)&v79[v8 * 2];
      *v9 = vrev64_s16(*(int16x4_t *)&a4[v8 + 1]);
      v9[1].i16[0] = a4[v8];
      v8 += 5;
    }
    while (v8 != 25);
    for (i = 40; i != 50; i += 2)
    {
      v11 = &v79[i];
      v12 = *(_WORD *)&v79[i - 40];
      *(v11 - 20) = *(_WORD *)&v79[i];
      *v11 = v12;
      v13 = *(_WORD *)&v79[i - 30];
      *(v11 - 15) = *(_WORD *)&v79[i - 10];
      *(v11 - 5) = v13;
    }
    if (a3 >= a5)
    {
      v14 = 0;
      v15 = *(int16x8_t *)&v79[40];
      v16 = *(int16x8_t *)&v79[30];
      v17 = *(int16x8_t *)&v79[20];
      v18 = *(int16x8_t *)&v79[10];
      v19 = 2 * a2;
      v20 = *(int16x8_t *)v79;
      do
      {
        if (v6 < 0)
        {
          v21 = v14 + 1;
        }
        else
        {
          v21 = v14 + 1;
          v22 = (int *)((char *)a6 + 4 * v7 * v14);
          v23 = (v6 + 1);
          v24 = (int16x4_t *)(result + v19 * v14);
          do
          {
            v25 = *(int16x8_t *)&v24->i8[2 * a2];
            v26 = (int16x8_t *)((char *)v24 + v19 + v19);
            v27 = *v26;
            v28 = (int16x4_t *)&v26->i8[v19];
            v29 = *(int16x8_t *)&v28->i8[2 * a2];
            v30 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vshrq_n_s32(vshlq_n_s32(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v25.i8), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v20.i8, *v24), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v27.i8), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v16.i8, *v28), 5uLL), 0x10uLL), vshlq_n_s32(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v29.i8), 5uLL), 0x10uLL);
            *v22++ += vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32(v30), 1), v30).u32[0]
                    + vaddq_s32((int32x4_t)vsraq_n_u32(vsraq_n_u32(vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmull_high_s16(v18, v25), 0xBuLL), (uint32x4_t)vmull_high_s16(v20, *(int16x8_t *)v24->i8), 0xBuLL), (uint32x4_t)vmull_high_s16(v17, v27), 0xBuLL), (uint32x4_t)vmull_high_s16(v16, *(int16x8_t *)v28->i8), 0xBuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vmull_high_s16(v15, v29), 0xBuLL) & __PAIR128__(0xFFE0FFFFFFE0FFFFLL, 0xFFE0FFFFFFE0FFFFLL))).i16[0];
            v24 = (int16x4_t *)((char *)v24 + 2);
            --v23;
          }
          while (v23);
        }
        v14 = v21;
      }
      while (v21 != a3 - a5 + 1);
    }
  }
  else
  {
    v31 = 0;
    memset(v79, 0, 50);
    do
    {
      v32 = (int16x4_t *)&v79[v31 * 2];
      *v32 = vrev64_s16(*(int16x4_t *)&a4[v31 + 1]);
      v32[1].i16[0] = a4[v31];
      v31 += 5;
    }
    while (v31 != 25);
    for (j = 40; j != 50; j += 2)
    {
      v34 = &v79[j];
      v35 = *(_WORD *)&v79[j - 40];
      *(v34 - 20) = *(_WORD *)&v79[j];
      *v34 = v35;
      v36 = *(_WORD *)&v79[j - 30];
      *(v34 - 15) = *(_WORD *)&v79[j - 10];
      *(v34 - 5) = v36;
    }
    if (a3 >= a5)
    {
      v37 = 0;
      v38 = *(int16x4_t *)&v79[8];
      v78 = *(int16x4_t *)v79;
      v39 = *(int16x4_t *)&v79[2];
      v40 = *(int16x4_t *)&v79[4];
      v41 = *(int16x4_t *)&v79[6];
      v42 = *(int16x4_t *)&v79[10];
      v43 = *(int16x4_t *)&v79[12];
      v44 = *(int16x4_t *)&v79[14];
      v45 = *(int16x4_t *)&v79[16];
      v46 = *(int16x4_t *)&v79[28];
      v47 = *(int16x4_t *)&v79[30];
      v72 = *(int16x4_t *)&v79[32];
      v73 = *(int16x4_t *)&v79[22];
      v71 = *(int16x4_t *)&v79[34];
      v70 = *(int16x4_t *)&v79[36];
      v69 = *(int16x4_t *)&v79[38];
      v68 = *(int16x4_t *)&v79[40];
      v48 = 2 * a2;
      v49 = 4 * v7;
      v50 = *(int16x4_t *)&v79[42];
      v76 = *(int16x4_t *)&v79[24];
      v77 = *(int16x4_t *)&v79[18];
      v75 = *(int16x4_t *)&v79[20];
      v74 = *(int16x4_t *)&v79[26];
      do
      {
        if (v6 < 0)
        {
          v52 = v37 + 1;
        }
        else
        {
          v51 = 0;
          v52 = v37 + 1;
          v53 = (int16x4_t *)(result + v48 * v37);
          v54 = (int32x4_t *)((char *)a6 + v49 * v37);
          do
          {
            v55 = *(int8x16_t *)v53->i8;
            v56 = *(int16x8_t *)&v53->i8[2 * a2];
            v57 = (int16x4_t *)((char *)v53 + v48 + v48);
            v58 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(*v54, vmull_lane_s16(*v53, v78, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v55, v55, 2uLL), v39, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v55, v55, 4uLL), v40, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v55, v55, 6uLL), v41, 0), 0xBuLL), vmull_high_lane_s16(*(int16x8_t *)v53->i8, v38, 0), 0xBuLL), vmull_lane_s16(*(int16x4_t *)v56.i8, v42, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 2uLL), v43, 0),
                        0xBuLL),
                      vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL), v44, 0),
                      0xBuLL),
                    vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 6uLL), v45, 0),
                    0xBuLL);
            v59 = *(int8x16_t *)v57->i8;
            v60 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v58, vmull_high_lane_s16(v56, v77, 0), 0xBuLL), vmull_lane_s16(*v57, v75, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 2uLL), v73, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 4uLL), v76, 0), 0xBuLL);
            v61 = vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 6uLL), v74, 0);
            v62 = vmull_high_lane_s16(*(int16x8_t *)v57->i8, v46, 0);
            v63 = (int16x4_t *)((char *)v57 + v48);
            v64 = vsraq_n_s32(v60, v61, 0xBuLL);
            v65 = *(int8x16_t *)v63->i8;
            v66 = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v64, v62, 0xBuLL), vmull_lane_s16(*v63, v47, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 2uLL), v72, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 4uLL), v71, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 6uLL), v70, 0), 0xBuLL);
            v67 = *(int16x8_t *)&v63->i8[2 * a2];
            *v54++ = vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(vsraq_n_s32(v66, vmull_high_lane_s16(*(int16x8_t *)v63->i8, v69, 0), 0xBuLL), vmull_lane_s16(*(int16x4_t *)v67.i8, v68, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 2uLL), v50, 0), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), v50, 1), 0xBuLL), vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 6uLL), v50, 2), 0xBuLL), vmull_high_lane_s16(v67, v50, 3), 0xBuLL);
            v51 += 4;
            ++v53;
          }
          while (v51 <= v6);
        }
        v37 = v52;
      }
      while (v52 != a3 - a5 + 1);
    }
  }
  return result;
}

void sub_1D5028C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D50290D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  if (v20)
    operator delete(v20);
  std::vector<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);

  _Unwind_Resume(a1);
}

void sub_1D50292F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D502932C()
{
  JUMPOUT(0x1D5029318);
}

void ___ZL16isValidLabelTextP8NSString_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("〒$"));
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_MergedGlobals_17;
  _MergedGlobals_17 = v0;

  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("0123456789.０１２３４５６７８９０．"));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ED0B4528;
  qword_1ED0B4528 = v2;

}

uint64_t std::__split_buffer<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t *v8;
  double v9;
  unint64_t v10;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  void **v52;
  void *v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  void **v57;
  void *v58;
  void *v59;
  void **v60;
  void *v61;

  if (a3 < 2)
    return;
  if (a3 == 2)
  {
    v8 = a2 - 3;
    v9 = *((double *)a2 - 3);
    if (v9 < *(double *)a1
      || *(double *)a1 >= v9
      && ((v16 = *(a2 - 2), v17 = a1[1], v16 < v17) || v17 >= v16 && *(a2 - 1) < (unint64_t)a1[2]))
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](a1, v8);
    }
    return;
  }
  v10 = a3;
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2)
      return;
    v18 = (double *)(a1 + 3);
    if (a1 + 3 == a2)
      return;
    v19 = 0;
    v20 = (char *)a1;
    while (1)
    {
      v21 = (uint64_t *)v20;
      v20 = (char *)v18;
      v22 = *v18;
      v23 = *(double *)v21;
      if (*v18 >= *(double *)v21)
      {
        if (v23 < v22)
          goto LABEL_34;
        v24 = v21[4];
        v25 = v21[1];
        if (v24 >= v25 && (v25 < v24 || v21[5] >= (unint64_t)v21[2]))
          goto LABEL_34;
      }
      else
      {
        v24 = v21[4];
        v25 = v21[1];
      }
      v26 = v21[5];
      v21[5] = 0;
      *(double *)v20 = v23;
      *((_QWORD *)v20 + 1) = v25;
      v27 = v21[2];
      v21[2] = 0;
      v28 = (void *)*((_QWORD *)v20 + 2);
      *((_QWORD *)v20 + 2) = v27;

      if (v21 == a1)
      {
LABEL_32:
        v21 = a1;
        goto LABEL_33;
      }
      v29 = v19;
      while (1)
      {
        v30 = *(double *)((char *)a1 + v29 - 24);
        if (v22 >= v30)
          break;
        v31 = *(uint64_t *)((char *)a1 + v29 - 16);
LABEL_31:
        v21 -= 3;
        v32 = (char *)a1 + v29;
        *(double *)v32 = v30;
        v33 = *(uint64_t *)((char *)a1 + v29 - 8);
        *((_QWORD *)v32 - 1) = 0;
        v34 = *(void **)((char *)a1 + v29 + 16);
        *((_QWORD *)v32 + 1) = v31;
        *((_QWORD *)v32 + 2) = v33;

        v29 -= 24;
        if (!v29)
          goto LABEL_32;
      }
      if (v30 < v22)
        goto LABEL_33;
      v31 = *(uint64_t *)((char *)a1 + v29 - 16);
      if (v24 < v31)
        goto LABEL_31;
      if (v31 < v24)
        goto LABEL_33;
      if (v26 < *(uint64_t *)((char *)a1 + v29 - 8))
        goto LABEL_31;
      v21 = (uint64_t *)((char *)a1 + v29);
LABEL_33:
      *(double *)v21 = v22;
      v35 = (void *)v21[2];
      v21[1] = v24;
      v21[2] = v26;

LABEL_34:
      v18 = (double *)(v20 + 24);
      v19 += 24;
      if (v20 + 24 == (char *)a2)
        return;
    }
  }
  v13 = a3 >> 1;
  v14 = (unint64_t *)&a1[3 * (a3 >> 1)];
  v15 = a3 >> 1;
  if ((uint64_t)v10 > a5)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(a1, v14, v15, a4, a5);
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(&a1[3 * (v10 >> 1)], a2, v10 - (v10 >> 1), a4, a5);
    std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(a1, &a1[3 * (v10 >> 1)], a2, v10 >> 1, v10 - (v10 >> 1), a4, a5);
    return;
  }
  v36 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>((uint64_t)a1, v14, v15, a4, a6);
  v37 = a4 + 24 * v13;
  std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>((uint64_t)&a1[3 * (v10 >> 1)], (unint64_t *)a2, v10 - (v10 >> 1), v37, v36);
  v38 = a4 + 24 * v10;
  v39 = (void **)(a1 + 2);
  v40 = v37;
  v41 = a4;
  while (v40 != v38)
  {
    v42 = *(double *)v40;
    v43 = *(double *)v41;
    if (*(double *)v40 >= *(double *)v41)
    {
      if (v43 < v42)
      {
        v47 = *(void **)(v41 + 8);
LABEL_44:
        *((double *)v39 - 2) = v43;
        *(v39 - 1) = v47;
        v48 = *(void **)(v41 + 16);
        *(_QWORD *)(v41 + 16) = 0;
        v49 = *v39;
        *v39 = v48;

        v41 += 24;
        goto LABEL_45;
      }
      v44 = *(void **)(v40 + 8);
      v47 = *(void **)(v41 + 8);
      if (v44 >= v47 && (v47 < v44 || *(_QWORD *)(v40 + 16) >= *(_QWORD *)(v41 + 16)))
        goto LABEL_44;
    }
    else
    {
      v44 = *(void **)(v40 + 8);
    }
    *((double *)v39 - 2) = v42;
    *(v39 - 1) = v44;
    v45 = *(void **)(v40 + 16);
    *(_QWORD *)(v40 + 16) = 0;
    v46 = *v39;
    *v39 = v45;

    v40 += 24;
LABEL_45:
    v39 += 3;
    if (v41 == v37)
    {
      if (v40 != v38)
      {
        v55 = 0;
        do
        {
          v56 = v40 + v55;
          v57 = &v39[v55 / 8];
          *(v57 - 2) = *(void **)(v40 + v55);
          *(v57 - 1) = *(void **)(v40 + v55 + 8);
          v58 = *(void **)(v40 + v55 + 16);
          *(_QWORD *)(v40 + v55 + 16) = 0;
          v59 = v39[v55 / 8];
          *v57 = v58;

          v55 += 24;
        }
        while (v56 + 24 != v38);
      }
      goto LABEL_58;
    }
  }
  if (v41 != v37)
  {
    v50 = 0;
    do
    {
      v51 = v41 + v50;
      v52 = &v39[v50 / 8];
      *(v52 - 2) = *(void **)(v41 + v50);
      *(v52 - 1) = *(void **)(v41 + v50 + 8);
      v53 = *(void **)(v41 + v50 + 16);
      *(_QWORD *)(v41 + v50 + 16) = 0;
      v54 = v39[v50 / 8];
      *v52 = v53;

      v50 += 24;
    }
    while (v51 + 24 != v37);
  }
LABEL_58:
  if (a4)
  {
    v60 = (void **)(a4 + 16);
    do
    {
      v61 = *v60;
      v60 += 3;

      --v10;
    }
    while (v10);
  }
}

void sub_1D50297F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;

  if (v1)
  {
    v4 = (void **)(v1 + 16);
    do
    {
      v5 = *v4;
      v4 += 3;

      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  double *v5;
  double *v8;
  unint64_t *v9;
  unint64_t *v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double *v40;
  unint64_t *v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  double *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  __n128 *v53;
  unint64_t v54;

  if (!a3)
    return result;
  v5 = (double *)a4;
  v8 = (double *)a1;
  if (a3 == 2)
  {
    v11 = *((double *)a2 - 3);
    v12 = *(double *)a1;
    if (v11 < *(double *)a1)
    {
      v13 = *(a2 - 2);
LABEL_7:
      *(double *)a4 = v11;
      v14 = *(a2 - 1);
      *(a2 - 1) = 0;
      *(_QWORD *)(a4 + 8) = v13;
      *(_QWORD *)(a4 + 16) = v14;
      v9 = (unint64_t *)(a1 + 16);
      result = *(__n128 *)a1;
      *(_OWORD *)(a4 + 24) = *(_OWORD *)a1;
      v10 = (unint64_t *)(a4 + 40);
      goto LABEL_36;
    }
    if (v12 >= v11)
    {
      v13 = *(a2 - 2);
      v37 = *(_QWORD *)(a1 + 8);
      if (v13 < v37 || v37 >= v13 && *(a2 - 1) < *(_QWORD *)(a1 + 16))
        goto LABEL_7;
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 8);
    }
    *(double *)a4 = v12;
    v38 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a4 + 8) = v37;
    *(_QWORD *)(a4 + 16) = v38;
    result = *(__n128 *)(a2 - 3);
    *(__n128 *)(a4 + 24) = result;
    v10 = (unint64_t *)(a4 + 40);
    v9 = a2 - 1;
    goto LABEL_36;
  }
  if (a3 == 1)
  {
    v9 = (unint64_t *)(a1 + 16);
    result = *(__n128 *)a1;
    *(_OWORD *)a4 = *(_OWORD *)a1;
    v10 = (unint64_t *)(a4 + 16);
LABEL_36:
    v39 = *v9;
    *v9 = 0;
    *v10 = v39;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v40 = (double *)(a1 + 24 * (a3 >> 1));
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(a1, v40, a3 >> 1, a4, a3 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(&v8[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[3 * (a3 >> 1)], a3 - (a3 >> 1));
    v41 = (unint64_t *)&v8[3 * (a3 >> 1)];
    while (1)
    {
      if (v41 == a2)
      {
        if (v8 != v40)
        {
          v47 = 0;
          do
          {
            v48 = (__n128 *)&v5[v47];
            v49 = &v8[v47];
            result = *(__n128 *)&v8[v47];
            *v48 = result;
            v50 = *(_QWORD *)&v8[v47 + 2];
            v49[2] = 0.0;
            v48[1].n128_u64[0] = v50;
            v47 += 3;
          }
          while (v49 + 3 != v40);
        }
        return result;
      }
      result.n128_u64[0] = *v41;
      v42 = *v8;
      if (*(double *)v41 >= *v8)
      {
        if (v42 < result.n128_f64[0])
        {
          v45 = *((_QWORD *)v8 + 1);
LABEL_45:
          *v5 = v42;
          v46 = *((_QWORD *)v8 + 2);
          v8[2] = 0.0;
          *((_QWORD *)v5 + 1) = v45;
          *((_QWORD *)v5 + 2) = v46;
          v8 += 3;
          goto LABEL_46;
        }
        v43 = v41[1];
        v45 = *((_QWORD *)v8 + 1);
        if (v43 >= v45 && (v45 < v43 || v41[2] >= *((_QWORD *)v8 + 2)))
          goto LABEL_45;
      }
      else
      {
        v43 = v41[1];
      }
      *v5 = result.n128_f64[0];
      v44 = v41[2];
      v41[2] = 0;
      *((_QWORD *)v5 + 1) = v43;
      *((_QWORD *)v5 + 2) = v44;
      v41 += 3;
LABEL_46:
      v5 += 3;
      if (v8 == v40)
      {
        if (v41 != a2)
        {
          v51 = 0;
          do
          {
            v52 = &v41[v51];
            v53 = (__n128 *)&v5[v51];
            result = *(__n128 *)&v41[v51];
            *v53 = result;
            v54 = v41[v51 + 2];
            v52[2] = 0;
            v53[1].n128_u64[0] = v54;
            v51 += 3;
          }
          while (v52 + 3 != a2);
        }
        return result;
      }
    }
  }
  if ((unint64_t *)a1 == a2)
    return result;
  result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a4 + 16) = v15;
  v16 = (double *)(a1 + 24);
  if ((unint64_t *)(a1 + 24) == a2)
    return result;
  v17 = 0;
  v18 = (double *)a4;
  v19 = (double *)a4;
  do
  {
    v20 = v16;
    v21 = *v19;
    v19 += 3;
    result.n128_f64[0] = v21;
    v22 = *v16;
    if (*v16 >= v21)
    {
      v24 = *((_QWORD *)v8 + 4);
      if (result.n128_f64[0] < v22
        || (v23 = *((_QWORD *)v18 + 1), v24 >= v23) && (v23 < v24 || *((_QWORD *)v8 + 5) >= *((_QWORD *)v18 + 2)))
      {
        v18[3] = v22;
        v34 = *((_QWORD *)v8 + 5);
        v8[5] = 0.0;
        *((_QWORD *)v18 + 4) = v24;
        *((_QWORD *)v18 + 5) = v34;
        goto LABEL_31;
      }
    }
    else
    {
      v23 = *((_QWORD *)v18 + 1);
    }
    v18[3] = result.n128_f64[0];
    v25 = *((_QWORD *)v18 + 2);
    v18[2] = 0.0;
    *((_QWORD *)v18 + 4) = v23;
    *((_QWORD *)v18 + 5) = v25;
    v26 = v5;
    if (v18 == v5)
      goto LABEL_30;
    v27 = v17;
    while (1)
    {
      v28 = *(double *)((char *)v5 + v27 - 24);
      if (*v20 < v28)
      {
        v29 = *(_QWORD *)((char *)v5 + v27 - 16);
        goto LABEL_26;
      }
      if (v28 < *v20)
        goto LABEL_29;
      v30 = *((_QWORD *)v8 + 4);
      v29 = *(_QWORD *)((char *)v5 + v27 - 16);
      if (v30 >= v29)
        break;
LABEL_26:
      v18 -= 3;
      v31 = (char *)v5 + v27;
      *(double *)v31 = v28;
      v32 = *(_QWORD *)((char *)v5 + v27 - 8);
      *((_QWORD *)v31 - 1) = 0;
      v33 = *(void **)((char *)v5 + v27 + 16);
      *((_QWORD *)v31 + 1) = v29;
      *((_QWORD *)v31 + 2) = v32;

      v27 -= 24;
      if (!v27)
      {
        v26 = v5;
        goto LABEL_30;
      }
    }
    if (v29 >= v30)
    {
      v26 = (double *)((char *)v5 + v27);
      if (*((_QWORD *)v8 + 5) >= *(_QWORD *)((char *)v5 + v27 - 8))
        goto LABEL_30;
      goto LABEL_26;
    }
LABEL_29:
    v26 = v18;
LABEL_30:
    *v26 = *v20;
    v26[1] = v8[4];
    v35 = *((_QWORD *)v8 + 5);
    v8[5] = 0.0;
    v36 = (void *)*((_QWORD *)v26 + 2);
    *((_QWORD *)v26 + 2) = v35;

LABEL_31:
    v16 = v20 + 3;
    v17 += 24;
    v18 = v19;
    v8 = v20;
  }
  while (v20 + 3 != (double *)a2);
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v13;
  double v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void **v90;
  void *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v97;
  uint64_t v98;

  if (!a5)
    return;
  v7 = a6;
  v8 = a5;
  v98 = a7;
  do
  {
    if (a4 <= a7 || v8 <= a7)
    {
      if (a4 > v8)
      {
        if (a3 == a2)
          return;
        v53 = 0;
        v54 = 0;
        do
        {
          v55 = v7 + v53 * 8;
          v56 = &a2[v53];
          *(_OWORD *)v55 = *(_OWORD *)&a2[v53];
          v57 = a2[v53 + 2];
          v56[2] = 0;
          *(_QWORD *)(v55 + 16) = v57;
          ++v54;
          v53 += 3;
        }
        while (v56 + 3 != a3);
        if (!(v53 * 8))
          goto LABEL_109;
        v58 = v7 + v53 * 8;
        while (1)
        {
          if (a2 == a1)
          {
            v81 = 0;
            do
            {
              v82 = &a3[v81 / 8];
              *(v82 - 3) = *(_QWORD *)(v58 + v81 - 24);
              *(v82 - 2) = *(_QWORD *)(v58 + v81 - 16);
              v83 = *(_QWORD *)(v58 + v81 - 8);
              *(_QWORD *)(v58 + v81 - 8) = 0;
              v84 = (void *)a3[v81 / 8 - 1];
              *(v82 - 1) = v83;

              v81 -= 24;
            }
            while (v58 + v81 != v7);
            goto LABEL_109;
          }
          v59 = *((double *)a2 - 3);
          v60 = *(double *)(v58 - 24);
          if (v60 >= v59)
          {
            v62 = *(_QWORD *)(v58 - 16);
            if (v59 < v60
              || (v61 = *(a2 - 2), v62 >= v61) && (v61 < v62 || *(_QWORD *)(v58 - 8) >= (unint64_t)*(a2 - 1)))
            {
              *((double *)a3 - 3) = v60;
              *(a3 - 2) = v62;
              v65 = *(_QWORD *)(v58 - 8);
              *(_QWORD *)(v58 - 8) = 0;
              v64 = (void *)*(a3 - 1);
              *(a3 - 1) = v65;
              v58 -= 24;
              goto LABEL_83;
            }
          }
          else
          {
            v61 = *(a2 - 2);
          }
          *((double *)a3 - 3) = v59;
          *(a3 - 2) = v61;
          v63 = *(a2 - 1);
          *(a2 - 1) = 0;
          v64 = (void *)*(a3 - 1);
          *(a3 - 1) = v63;
          a2 -= 3;
LABEL_83:

          a3 -= 3;
          if (v58 == v7)
            goto LABEL_109;
        }
      }
      if (a1 == a2)
        return;
      v66 = 0;
      v54 = 0;
      do
      {
        v67 = v7 + v66 * 8;
        v68 = &a1[v66];
        *(_OWORD *)v67 = *(_OWORD *)&a1[v66];
        v69 = a1[v66 + 2];
        v68[2] = 0;
        *(_QWORD *)(v67 + 16) = v69;
        ++v54;
        v66 += 3;
      }
      while (v68 + 3 != a2);
      if (!(v66 * 8))
        goto LABEL_109;
      v70 = v7 + v66 * 8;
      v71 = v7 + v66 * 8 - 24;
      v72 = v7;
      while (1)
      {
        if (a2 == a3)
        {
          if (v70 != v72)
          {
            v85 = 0;
            do
            {
              v86 = &a1[v85 / 8];
              v87 = v72 + v85;
              *v86 = *(_QWORD *)(v72 + v85);
              v86[1] = *(_QWORD *)(v72 + v85 + 8);
              v88 = *(_QWORD *)(v72 + v85 + 16);
              *(_QWORD *)(v72 + v85 + 16) = 0;
              v89 = (void *)a1[v85 / 8 + 2];
              v86[2] = v88;

              v85 += 24;
            }
            while (v71 != v87);
          }
LABEL_109:
          if (v7)
          {
            v90 = (void **)(v7 + 16);
            do
            {
              v91 = *v90;
              v90 += 3;

              --v54;
            }
            while (v54);
          }
          return;
        }
        v73 = *(double *)a2;
        v74 = *(double *)v72;
        if (*(double *)a2 >= *(double *)v72)
        {
          if (v74 < v73)
          {
            v76 = *(_QWORD *)(v72 + 8);
LABEL_99:
            *(double *)a1 = v74;
            a1[1] = v76;
            v79 = *(_QWORD *)(v72 + 16);
            *(_QWORD *)(v72 + 16) = 0;
            v80 = (void *)a1[2];
            a1[2] = v79;

            v72 += 24;
            goto LABEL_100;
          }
          v75 = a2[1];
          v76 = *(_QWORD *)(v72 + 8);
          if (v75 >= v76 && (v76 < v75 || (unint64_t)a2[2] >= *(_QWORD *)(v72 + 16)))
            goto LABEL_99;
        }
        else
        {
          v75 = a2[1];
        }
        *(double *)a1 = v73;
        a1[1] = v75;
        v77 = a2[2];
        a2[2] = 0;
        v78 = (void *)a1[2];
        a1[2] = v77;

        a2 += 3;
LABEL_100:
        a1 += 3;
        if (v70 == v72)
          goto LABEL_109;
      }
    }
    if (!a4)
      return;
    v13 = 0;
    v14 = *(double *)a2;
    v15 = -a4;
    while (1)
    {
      v16 = *(double *)((char *)v13 + (_QWORD)a1);
      if (v14 < v16)
        break;
      if (v16 >= v14)
      {
        v17 = a2[1];
        v18 = *(uint64_t *)((char *)v13 + (_QWORD)a1 + 8);
        if (v17 < v18 || v18 >= v17 && (unint64_t)a2[2] < *(uint64_t *)((char *)v13 + (_QWORD)a1 + 16))
          break;
      }
      v13 += 3;
      if (__CFADD__(v15++, 1))
        return;
    }
    v20 = -v15;
    v97 = a3;
    if (-v15 >= v8)
    {
      if (v15 == -1)
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100]((uint64_t *)((char *)v13 + (_QWORD)a1), a2);
        return;
      }
      if (v15 > 0)
        v20 = 1 - v15;
      v33 = v20 >> 1;
      v24 = (uint64_t *)((char *)&a1[3 * (v20 >> 1)] + (_QWORD)v13);
      if (a2 == a3)
      {
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v44 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
        v45 = *(double *)v24;
        v46 = (char *)&a1[3 * v33] + (_QWORD)v13;
        v47 = *((_QWORD *)v46 + 1);
        v48 = *((_QWORD *)v46 + 2);
        do
        {
          v49 = v44 >> 1;
          v50 = v22 + (v44 >> 1);
          v51 = &a2[3 * v50];
          if (*(double *)v51 < v45
            || v45 >= *(double *)v51 && ((v52 = v51[1], v52 < v47) || v47 >= v52 && v51[2] < v48))
          {
            v22 = v50 + 1;
            v49 = v44 + ~v49;
          }
          v44 = v49;
        }
        while (v49);
      }
      v34 = 0xAAAAAAAAAAAAAAABLL * ((24 * v22) >> 3);
      v23 = (uint64_t *)((char *)&a1[3 * v33] + (_QWORD)v13);
    }
    else
    {
      if (v8 >= 0)
        v21 = v8;
      else
        v21 = v8 + 1;
      v22 = v21 >> 1;
      v23 = (uint64_t *)((char *)v13 + (_QWORD)a1);
      v24 = (uint64_t *)((char *)v13 + (_QWORD)a1);
      if ((uint64_t *)((char *)a2 - (char *)a1) != v13)
      {
        v25 = &a2[3 * v22];
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1 - (uint64_t)v13) >> 3);
        v27 = *(double *)v25;
        v28 = v25[1];
        v29 = v25[2];
        v24 = (uint64_t *)((char *)v13 + (_QWORD)a1);
        do
        {
          v30 = v26 >> 1;
          v31 = &v24[3 * (v26 >> 1)];
          if (v27 >= *(double *)v31)
          {
            if (*(double *)v31 < v27 || (v32 = v31[1], v28 >= v32) && (v32 < v28 || v29 >= v31[2]))
            {
              v24 = v31 + 3;
              v30 = v26 + ~v30;
            }
          }
          v26 = v30;
        }
        while (v30);
        v23 = v24;
      }
      v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)a1 - (uint64_t)v13) >> 3);
      v34 = v22;
    }
    v35 = &a2[3 * v22];
    v95 = (uint64_t *)((char *)v13 + (_QWORD)a1);
    if (v24 == a2)
    {
      v36 = &a2[3 * v22];
    }
    else
    {
      v36 = v23;
      if (v22)
      {
        v92 = v34;
        v93 = v23;
        v94 = v33;
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](v24, a2);
        v36 = v24 + 3;
        if (v22 != 1)
        {
          v37 = a2 + 3;
          v38 = 24 * v22 - 24;
          do
          {
            if (v36 == a2)
              a2 = v37;
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](v36, v37);
            v36 += 3;
            v37 += 3;
            v38 -= 24;
          }
          while (v38);
        }
        if (v36 != a2)
        {
          v39 = v36;
          v40 = a2;
          do
          {
            while (1)
            {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](v39, v40);
              v39 += 3;
              v40 += 3;
              if (v40 == v35)
                break;
              if (v39 == a2)
                a2 = v40;
            }
            v40 = a2;
          }
          while (v39 != a2);
        }
        a7 = v98;
        v23 = v93;
        v33 = v94;
        v34 = v92;
      }
    }
    a4 = -(v33 + v15);
    v41 = v8 - v34;
    if ((uint64_t)(v33 + v34) >= (uint64_t)(v8 - (v33 + v34) - v15))
    {
      a2 = v23;
      v7 = a6;
      v42 = v33;
      v43 = v34;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>(v36, v35, v97, -(v33 + v15), v8 - v34, a6, a7);
      v41 = v43;
      a4 = v42;
      a3 = v36;
      a1 = v95;
    }
    else
    {
      v7 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::tuple<double,CRFormFieldLabelPosition,CROutputRegion * {__strong}> *>>((char *)v13 + (_QWORD)a1, v23, v36, v33, v34, a6, a7);
      a1 = v36;
      a2 = v35;
      a3 = v97;
    }
    v8 = v41;
    a7 = v98;
  }
  while (v41);
}

void std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,double,CRFormFieldLabelPosition,CROutputRegion * {__strong}>::swap[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  v5 = a1[2];
  a1[2] = 0;
  v6 = a2[2];
  a2[2] = 0;
  v7 = (void *)a1[2];
  a1[2] = v6;

  v8 = (void *)a2[2];
  a2[2] = v5;

}

void sub_1D502AC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D502AF54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D502AFD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D502B19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502B538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CRSignpostLog()
{
  if (CRSignpostLog_onceToken != -1)
    dispatch_once(&CRSignpostLog_onceToken, &__block_literal_global_14);
  return CRSignpostLog_signPostOSLog;
}

void sub_1D502B714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502B780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502B7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502B8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502B958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502BA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502BAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502BCA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502C0EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void sub_1D502C29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D502C3AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502C580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D502C62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502C8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D502CE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D502CF4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502D1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a26, 8);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__88(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__89(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1D502D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D502D53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_1D502D6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D502D75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D502D7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502DA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);

  _Block_object_dispose(&a18, 8);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_1D502DCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1D502DDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D502E178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  void *v62;
  void *v63;
  uint64_t v64;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a32, 8);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a41, 8);

  _Block_object_dispose(&a55, 8);
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  _Block_object_dispose((const void *)(v64 - 200), 8);
  _Block_object_dispose((const void *)(v64 - 168), 8);

  _Unwind_Resume(a1);
}

void sub_1D502E42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D502E5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D502E904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502EA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502ED54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1D502EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)CRLineWrappingContext;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D502EEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D502EF80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t consolidateWrapScores(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return a2;
  if (!a2)
    return a1;
  result = -10;
  if (a1 != -10 && a2 != -10)
  {
    v5 = __OFSUB__(a1, 1);
    if (a1 >= 1)
    {
      v5 = __OFSUB__(a2, 1);
      if (a2 >= 1)
      {
        if (a1 <= a2)
          v6 = a2;
        else
          v6 = a1;
        v7 = v6 == 2;
        v8 = 10;
        v9 = 6;
LABEL_20:
        if (v7)
          return v9;
        else
          return v8;
      }
    }
    if ((a2 & a1) < 0 != v5)
    {
      if (a1 >= a2)
        v11 = a2;
      else
        v11 = a1;
      v7 = v11 == -2;
      v8 = -10;
      v9 = -6;
      goto LABEL_20;
    }
    v10 = a2 + a1;
    if (!(a2 + a1))
      return 0;
    if (v10 > 5)
      return 6;
    if (v10 > 1)
      return 2;
    if (v10 < -5)
      return -6;
    if (v10 < -1)
      return -2;
    CROSLogForCategory(0);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = 134218240;
      v14 = a1;
      v15 = 2048;
      v16 = a2;
      _os_log_impl(&dword_1D4FB8000, v12, OS_LOG_TYPE_ERROR, "Error consolidating wrap scores %ld and %ld", (uint8_t *)&v13, 0x16u);
    }

    return a1;
  }
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D502F368(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D502F420(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D502F600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D502F740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D502FB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D502FDA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50302A8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_1D50306FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5030A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void sub_1D5030CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5031660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  void *v39;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a38)
    operator delete(a38);

  _Unwind_Resume(a1);
}

void sub_1D50319F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5031E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D5032214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D50327DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D5032DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D50330D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1D5033354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);

  _Unwind_Resume(a1);
}

void sub_1D5033524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D503367C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D50337EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1D5033954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(a4 + 8 * *a2);
  v7 = *a3;
  v8 = *(_QWORD *)(a4 + 8 * *a3);
  if (v6 >= *(_QWORD *)(a4 + 8 * *result))
  {
    if (v8 < v6)
    {
      *a2 = v7;
      *a3 = v4;
      v9 = *result;
      if (*(_QWORD *)(a4 + 8 * *a2) < *(_QWORD *)(a4 + 8 * *result))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *result = v4;
      *a2 = v5;
      if (*(_QWORD *)(a4 + 8 * *a3) >= *(_QWORD *)(a4 + 8 * v5))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(**a3 + 8 * v8) < *(_QWORD *)(**a3 + 8 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v20 = a1 + 1;
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = **a3;
      if (*(_QWORD *)(v25 + 8 * v23) < *(_QWORD *)(v25 + 8 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        if (*(_QWORD *)(v25 + 8 * *v22) < *(_QWORD *)(v25 + 8 * *v21))
        {
          *v21 = v26;
          *v22 = v27;
          v28 = *v20;
          if (*(_QWORD *)(v25 + 8 * v26) < *(_QWORD *)(v25 + 8 * *v20))
          {
            a1[1] = v26;
            a1[2] = v28;
            v29 = *a1;
            if (*(_QWORD *)(v25 + 8 * v26) < *(_QWORD *)(v25 + 8 * *a1))
            {
              *a1 = v26;
              a1[1] = v29;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (*(_QWORD *)(v13 + 8 * *v11) < *(_QWORD *)(v13 + 8 * *v10))
    {
      v17 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v17) = v16;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (*(_QWORD *)(v13 + 8 * v15) >= *(_QWORD *)(v13 + 8 * v16))
        {
          v19 = (uint64_t *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[CRTextDecodingUtils getTokenPermutationByApplyingReorderingPermutation:toRanges:]::$_0 &,unsigned long *>(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  if (*(_QWORD *)(v12 + 8 * *a4) < *(_QWORD *)(v12 + 8 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(_QWORD *)(v12 + 8 * *a3) < *(_QWORD *)(v12 + 8 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(_QWORD *)(v12 + 8 * *a2) < *(_QWORD *)(v12 + 8 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void sub_1D503573C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<CRNormalizedQuad * {__strong}>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CRNormalizedQuad * {__strong}*,CRNormalizedQuad * {__strong}*,CRNormalizedQuad * {__strong}*>(void **a1, void **a2, id *location)
{
  void **v5;
  void *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5++;
      objc_storeStrong(location++, v6);
    }
    while (v5 != a2);
  }
  return location;
}

void sub_1D50369F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t CRCharacterNormalizer::normalizedCharacter(uint64_t a1)
{
  uint64_t result;
  int8_t v3;
  int v4;

  if (u_isWhitespace(a1))
    return 95;
  result = 57344;
  if ((a1 - 48) >= 0xA
    && (a1 - 188) >= 3
    && (_DWORD)a1 != 8585
    && (a1 & 0xFFFFFFF0) != 0x2150)
  {
    if (u_charType(a1) == 20)
    {
      return 57345;
    }
    else if (u_charType(a1) == 21)
    {
      return 57346;
    }
    else if (a1 <= 0x3F && ((1 << a1) & 0x8C00502200000000) != 0)
    {
      return 57347;
    }
    else
    {
      v3 = u_charType(a1);
      result = 57348;
      if ((_DWORD)a1 != 63743 && ((1 << v3) & 0x3FF80000) == 0)
      {
        v4 = 1 << u_charType(a1);
        result = a1;
        if ((v4 & 0x3E) != 0)
        {
          LODWORD(result) = MEMORY[0x1D826ED38](a1);
          if ((result - 97) >= 0x1A)
            return 57349;
          else
            return result;
        }
      }
    }
  }
  return result;
}

_QWORD *CRCharacterNormalizer::CRCharacterNormalizer(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a3;
  result[9] = 0;
  result[10] = 0;
  return result;
}

{
  *result = a3;
  result[9] = 0;
  result[10] = 0;
  return result;
}

void CRCharacterNormalizer::~CRCharacterNormalizer(CRCharacterNormalizer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  UChar32 v7;
  uint64_t v8;
  UChar32 v9;
  uint64_t v10;
  char v11;

  v11 = 0;
  v2 = *((_QWORD *)this + 10);
  if (v2 == 2)
  {
    v3 = *(_QWORD *)this;
    v7 = *((_DWORD *)this + 2);
    v8 = *((unsigned int *)this + 3);
    if (v7)
      u_isWhitespace(v7);
    v4 = CRCharacterNormalizer::normalizedCharacter(v8);
    v5 = (char *)this + 32;
    v6 = (char *)this + 56;
  }
  else if (v2 == 1)
  {
    v3 = *(_QWORD *)this;
    v4 = CRCharacterNormalizer::normalizedCharacter(*((unsigned int *)this + 2));
    v5 = (char *)this + 24;
    v6 = (char *)this + 48;
  }
  else
  {
    if (v2 < 3)
      return;
    v3 = *(_QWORD *)this;
    v9 = *((_DWORD *)this + 3);
    v10 = *((unsigned int *)this + 4);
    if (v9)
      u_isWhitespace(v9);
    v4 = CRCharacterNormalizer::normalizedCharacter(v10);
    v5 = (char *)this + 40;
    v6 = (char *)this + 64;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(v3 + 16))(v3, v4, *(_QWORD *)v5, *(_QWORD *)v6, &v11);
}

uint64_t CRCharacterNormalizer::push(CRCharacterNormalizer *this, unsigned int c)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  UChar32 v12;
  uint64_t v13;
  uint64_t v14;
  int isWhitespace;
  uint64_t v16;
  char v17;

  v17 = 0;
  if (HIWORD(c))
    v4 = 2;
  else
    v4 = 1;
  if ((unint64_t)(*((_QWORD *)this + 10) - 1) >= 2)
    v5 = 2;
  else
    v5 = *((_QWORD *)this + 10) - 1;
  result = u_isWhitespace(c);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 10);
    if (v7 < 1)
      goto LABEL_12;
    result = u_isWhitespace(*((_DWORD *)this + v5 + 2));
    if ((_DWORD)result)
    {
      *((_QWORD *)this + v5 + 6) += v4;
      return result;
    }
  }
  v7 = *((_QWORD *)this + 10);
LABEL_12:
  if (v7 == 1)
  {
    *((_QWORD *)this + 4) = *((_QWORD *)this + 6) + *((_QWORD *)this + 3);
    *((_QWORD *)this + 7) = v4;
    *((_DWORD *)this + 3) = c;
    v8 = *(_QWORD *)this;
    v9 = CRCharacterNormalizer::normalizedCharacter(*((unsigned int *)this + 2));
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(v8 + 16))(v8, v9, *((_QWORD *)this + 3), *((_QWORD *)this + 6), &v17);
    v7 = *((_QWORD *)this + 10);
    goto LABEL_18;
  }
  if (v7)
  {
    if (v7 > 2)
    {
      v10 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 3) = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v10;
      v11 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 6) = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v11;
      v12 = *((_DWORD *)this + 3);
      v13 = *((unsigned int *)this + 4);
      *((_DWORD *)this + 2) = v12;
      *((_DWORD *)this + 3) = v13;
      goto LABEL_20;
    }
LABEL_18:
    if (v7 < 2)
      goto LABEL_25;
    v10 = *((_QWORD *)this + 4);
    v11 = *((_QWORD *)this + 7);
    v12 = *((_DWORD *)this + 2);
    v13 = *((unsigned int *)this + 3);
LABEL_20:
    *((_QWORD *)this + 5) = v11 + v10;
    *((_QWORD *)this + 8) = v4;
    *((_DWORD *)this + 4) = c;
    v14 = *(_QWORD *)this;
    if (v12)
    {
      isWhitespace = u_isWhitespace(v12);
      if (c)
      {
        if (!isWhitespace)
          u_isWhitespace(c);
      }
    }
    v16 = CRCharacterNormalizer::normalizedCharacter(v13);
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(v14 + 16))(v14, v16, *((_QWORD *)this + 4), *((_QWORD *)this + 7), &v17);
    v7 = *((_QWORD *)this + 10);
    goto LABEL_25;
  }
  *((_QWORD *)this + 3) = *((_QWORD *)this + 9);
  *((_QWORD *)this + 6) = v4;
  *((_DWORD *)this + 2) = c;
LABEL_25:
  *((_QWORD *)this + 10) = v7 + 1;
  return result;
}

void sub_1D503A18C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D503A250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D503A35C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1D826E294](v2, 0x20C40960023A9);

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1D503A408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503A514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;

  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

{

}

void sub_1D503A5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D503A7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503A820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503A964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1D503A9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D503ABF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D503AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D503ADD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D503AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1D503AF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  applesauce::CF::ObjectRef<CGPath *>::~ObjectRef((const void **)va);

  applesauce::CF::ObjectRef<CGPath *>::~ObjectRef((const void **)(v8 - 40));
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c41_ZTSN10applesauce2CF9ObjectRefIP6CGPathEE(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
    result = CFRetain(*(CFTypeRef *)(a2 + 40));
  v2[5] = v3;
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN10applesauce2CF9ObjectRefIP6CGPathEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

const void **applesauce::CF::ObjectRef<CGPath *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1D503B14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D503B1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D503B284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D503B3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D503B52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D503B91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D503BB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D503BD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D503BF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D503C038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_atomic_property_(_QWORD *result, CFTypeRef *a2)
{
  _QWORD *v2;
  CFTypeRef v3;

  v2 = result;
  v3 = *a2;
  if (*a2)
    result = CFRetain(*a2);
  *v2 = v3;
  return result;
}

void __assign_helper_atomic_property_(const void **a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
}

void sub_1D503C1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D503C27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D503C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D503C490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D503C534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D503C6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D503C774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503C800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D503C8C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1D503C9C4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)(v2 - 32));

  _Unwind_Resume(a1);
}

void sub_1D503CA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503CB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D503CB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D503CC14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D503CCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1D503CDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPath const*>::~ObjectRef((const void **)va);

  _Unwind_Resume(a1);
}

void sub_1D503CE4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503CEDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503CFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D503D080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503D130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D503D228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_atomic_property__121(_QWORD *result, CFTypeRef *a2)
{
  _QWORD *v2;
  CFTypeRef v3;

  v2 = result;
  v3 = *a2;
  if (*a2)
    result = CFRetain(*a2);
  *v2 = v3;
  return result;
}

void __assign_helper_atomic_property__122(const void **a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
}

_QWORD *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<_NSRange>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D503D410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CGPoint>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1D503D484(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CGPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_1D503EF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D503F324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1D503F4C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D503F6BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D503F7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D503F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_1D503F9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D50400E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  _Unwind_Resume(a1);
}

void sub_1D5040264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5041644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void sub_1D5041E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_1D50421C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1D5042508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D504418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void CRDetectorPolygonExtractor::CRDetectorPolygonExtractor(CRDetectorPolygonExtractor *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
}

void CRDetectorPolygonExtractor::CRDetectorPolygonExtractor(CRDetectorPolygonExtractor *this, int a2, int a3, int a4)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 7) = a2;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a4;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 7) = a2;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a4;
}

void CRDetectorPolygonExtractor::~CRDetectorPolygonExtractor(CRDetectorPolygonExtractor *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void CRDetectorPolygonExtractor::generateDensePolygonBar(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  char *v19;
  _DWORD *v20;
  int v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int v27;
  uint64_t *v28;
  int *v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t *v36;
  void *v37;
  _QWORD *v38;
  int v39;
  void *__p[2];
  uint64_t v41;

  v5 = *(unsigned int *)(a1 + 28);
  v38 = operator new(8uLL);
  *v38 = v5;
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = (uint64_t **)(a3 + 8);
    do
    {
      v9 = *v8;
      v10 = *(_DWORD *)(v6 + 8 * v7);
      if (!*v8)
        goto LABEL_13;
      v11 = (uint64_t *)(a3 + 8);
      do
      {
        v12 = *((_DWORD *)v9 + 8);
        v13 = v12 < v10;
        if (v12 >= v10)
          v14 = (uint64_t **)v9;
        else
          v14 = (uint64_t **)(v9 + 1);
        if (!v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 == (uint64_t *)v8 || v10 < *((_DWORD *)v11 + 8))
      {
LABEL_13:
        v39 = *(_DWORD *)(v6 + 8 * v7);
        __p[1] = 0;
        v41 = 0;
        __p[0] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v38, (uint64_t)(v38 + 1), 2uLL);
        v15 = *v8;
        v16 = (uint64_t **)(a3 + 8);
        v17 = (uint64_t **)(a3 + 8);
        if (*v8)
        {
          while (1)
          {
            while (1)
            {
              v17 = (uint64_t **)v15;
              v18 = *((_DWORD *)v15 + 8);
              if (v18 <= v39)
                break;
              v15 = *v17;
              v16 = v17;
              if (!*v17)
                goto LABEL_20;
            }
            if (v18 >= v39)
              break;
            v15 = v17[1];
            if (!v15)
            {
              v16 = v17 + 1;
              goto LABEL_20;
            }
          }
        }
        else
        {
LABEL_20:
          v19 = (char *)operator new(0x40uLL);
          *((_DWORD *)v19 + 8) = v39;
          *(_OWORD *)(v19 + 40) = *(_OWORD *)__p;
          *((_QWORD *)v19 + 7) = v41;
          __p[1] = 0;
          v41 = 0;
          __p[0] = 0;
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)a3, (uint64_t)v17, v16, (uint64_t *)v19);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v6 = *a2;
        v10 = *(_DWORD *)(*a2 + 8 * v7);
      }
      v20 = (_DWORD *)(v6 + 8 * v7);
      v21 = v20[1];
      if (v21 < *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, v10, v20)[5])
      {
        v22 = (int *)(*a2 + 8 * v7);
        v23 = v22[1];
        *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, *v22, v22)[5] = v23;
      }
      v24 = (int *)(*a2 + 8 * v7);
      v25 = v24[1];
      if (v25 > *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, *v24, v24)[5]+ 1))
      {
        v26 = (int *)(*a2 + 8 * v7);
        v27 = v26[1];
        *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a3, *v26, v26)[5]+ 1) = v27;
      }
      ++v7;
      v6 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 3);
  }
  v28 = *(uint64_t **)a3;
  if (*(_QWORD *)a3 != a3 + 8)
  {
    do
    {
      v29 = (int *)v28[5];
      v31 = *v29;
      v30 = v29[1];
      v32 = (uint64_t *)v28[1];
      if (v30 == v31)
      {
        v33 = v28;
        if (v32)
        {
          do
          {
            v34 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v34 = (uint64_t *)v33[2];
            v35 = *v34 == (_QWORD)v33;
            v33 = v34;
          }
          while (!v35);
        }
        if (*(uint64_t **)a3 == v28)
          *(_QWORD *)a3 = v34;
        v36 = *(uint64_t **)(a3 + 8);
        --*(_QWORD *)(a3 + 16);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v36, v28);
        v37 = (void *)v28[5];
        if (v37)
        {
          v28[6] = (uint64_t)v37;
          operator delete(v37);
        }
        operator delete(v28);
      }
      else if (v32)
      {
        do
        {
          v34 = v32;
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v34 = (uint64_t *)v28[2];
          v35 = *v34 == (_QWORD)v28;
          v28 = v34;
        }
        while (!v35);
      }
      v28 = v34;
    }
    while (v34 != (uint64_t *)(a3 + 8));
  }
  operator delete(v38);
}

void sub_1D504A67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  operator delete(a10);
  _Unwind_Resume(a1);
}

void CRDetectorPolygonExtractor::generatePivotsCenter(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD **v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  double v22;
  double *v23;
  double v24;
  _QWORD *v25;
  _QWORD **v26;
  BOOL v27;
  _QWORD **v28;
  _QWORD *v29[2];

  v6 = *(_DWORD *)(a2[1] - 8) - *(_DWORD *)*a2;
  v7 = *(_DWORD *)(a1 + 32);
  v8 = (int)fmax((double)v7, (double)((v6 + 1) / *(_DWORD *)(a1 + 36)));
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v8)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a3, v8);
    v9 = (_QWORD *)a3[1];
    v10 = &v9[2 * v8];
    v11 = 16 * v8;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9 += 2;
      v11 -= 16;
    }
    while (v11);
    a3[1] = (uint64_t)v10;
    v7 = *(_DWORD *)(a1 + 32);
  }
  if (v6 >= v7)
  {
    v29[0] = 0;
    v29[1] = 0;
    v28 = v29;
    CRDetectorPolygonExtractor::generateDensePolygonBar(a1, a2, (uint64_t)&v28);
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 40) = 0;
    v12 = v28;
    if (v28 == v29)
      goto LABEL_25;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = *(_DWORD *)*a2;
    v18 = *a3;
    while (1)
    {
      v19 = *((_DWORD *)v12 + 8);
      if (v19 > v17 + (v16 + 1) * ((v6 + 1) / v8))
      {
        v15 = 0;
        if (v14 >= 1)
        {
          *(float64x2_t *)(v18 + 16 * v16) = vdivq_f64(*(float64x2_t *)(v18 + 16 * v16), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v14), 0));
          ++v16;
          v14 = 0;
        }
        else
        {
          v14 = 0;
          ++v16;
        }
      }
      if (v16 == v8)
        break;
      v20 = v12[5];
      v21 = v20[1] - *v20;
      v15 = (int)fmax((double)v15, (double)v21);
      v13 = (int)fmax((double)v15, (double)v13);
      *(_DWORD *)(a1 + 40) = v13;
      if (v21 >= 1)
      {
        v22 = (double)v19;
        v23 = (double *)(v18 + 16 * v16);
        v24 = v23[1];
        *v23 = *v23 + v22;
        v23[1] = v24 + (double)(v20[1] + *v20) * 0.5;
        ++v14;
      }
      v25 = v12[1];
      if (v25)
      {
        do
        {
          v26 = (_QWORD **)v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD **)v12[2];
          v27 = *v26 == v12;
          v12 = v26;
        }
        while (!v27);
      }
      v12 = v26;
      if (v26 == v29)
        goto LABEL_24;
    }
    v16 = v8;
LABEL_24:
    if (v13 <= 3)
    {
LABEL_25:
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 1;
      if (v16 < v8 && v14 >= 1)
        *(float64x2_t *)(v18 + 16 * v16) = vdivq_f64(*(float64x2_t *)(v18 + 16 * v16), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v14), 0));
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29[0]);
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_1D504A900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  void *v13;

  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a11);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void CRDetectorPolygonExtractor::generatePivotBars(uint64_t a1, double **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  float v12;
  double v13;
  double v14;
  double v15;
  __float2 v16;
  double v17;
  double v18;

  v4 = (char *)a2[1] - (char *)*a2;
  v5 = v4 >> 4;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  std::vector<CGPoint>::resize(a1 + 56, v4 >> 4);
  std::vector<CGPoint>::resize(a1 + 80, v4 >> 4);
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = v5 - 1;
    if (v5 <= 1)
      v5 = 1;
    v8 = *a2;
    v9 = (double)*(int *)(a1 + 40);
    v10 = (double *)(*(_QWORD *)(a1 + 80) + 8);
    v11 = (double *)(*(_QWORD *)(a1 + 56) + 8);
    v12 = 0.0;
    do
    {
      v13 = *v8;
      v14 = v8[1];
      if (v7 > v6)
        v12 = atan2(-(v8[3] - v14), v8[2] - v13);
      if (v6)
      {
        if (v7 == v6)
          *(float *)(a1 + 48) = v12;
      }
      else
      {
        *(float *)(a1 + 44) = v12;
      }
      v15 = v14 + -v9 * 0.5;
      v16 = __sincosf_stret(v12 * -0.0);
      *(v11 - 1) = v13 + (v13 - v13) * v16.__cosval - (v15 - v14) * v16.__sinval;
      *v11 = v14 + (v15 - v14) * v16.__cosval + (v13 - v13) * v16.__sinval;
      v17 = *v8;
      v18 = v8[1];
      v8 += 2;
      ++v6;
      *(v10 - 1) = v17 + (v13 - v17) * v16.__cosval - (v14 + v9 - v18) * v16.__sinval;
      *v10 = v18 + (v14 + v9 - v18) * v16.__cosval + (v13 - v17) * v16.__sinval;
      v10 += 2;
      v11 += 2;
    }
    while (v5 != v6);
  }
}

void CRDetectorPolygonExtractor::generateEdgePoints(uint64_t a1, uint64_t a2, double **a3)
{
  double v6;
  double *v7;
  double v8;
  float v9;
  double v10;
  double v11;
  double v12;
  __float2 v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  float v18;
  double v19;
  __float2 v20;
  double v21;
  double v22;
  double cosval;
  double sinval;
  double v25;
  double v26;
  void **v27;
  void **v28;
  unint64_t v29;
  double *v30;
  double *v31;
  double *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  double *v38;
  char *v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  double *v52;
  char *v53;
  double v54[2];
  double v55[2];

  v6 = (double)**(int **)a2;
  v7 = *a3;
  v8 = **a3 - v6;
  v9 = *(float *)(a1 + 44);
  v10 = v7[1] + v8 * tanf(v9);
  v11 = (double)*(int *)(a1 + 40);
  v12 = v10 - v11 * 0.5;
  v13 = __sincosf_stret(v9 * -0.0);
  v55[0] = (v6 - v6) * v13.__cosval - (v12 - v10) * v13.__sinval + v6;
  v55[1] = v10 + (v12 - v10) * v13.__cosval + (v6 - v6) * v13.__sinval;
  v14 = v10 + v11 - v10;
  v54[0] = (v6 - v6) * v13.__cosval - v14 * v13.__sinval + v6;
  v54[1] = v10 + v14 * v13.__cosval + (v6 - v6) * v13.__sinval;
  v15 = (double)*(int *)(*(_QWORD *)(a2 + 8) - 8) + v11 * 0.5;
  v16 = a3[1];
  v17 = *(v16 - 2) - v15;
  v18 = *(float *)(a1 + 48);
  v19 = *(v16 - 1) + v17 * tanf(v18);
  v20 = __sincosf_stret(v18 * -0.0);
  v21 = v15 - v15;
  v22 = v19 - v11 * 0.5 - v19;
  cosval = v20.__cosval;
  sinval = v20.__sinval;
  v25 = v15 + (v15 - v15) * v20.__cosval - v22 * v20.__sinval;
  v26 = v19 + v22 * v20.__cosval + (v15 - v15) * v20.__sinval;
  v27 = (void **)(a1 + 56);
  std::vector<CGPoint>::insert(a1 + 56, *(char **)(a1 + 56), (char *)v55);
  v28 = (void **)(a1 + 80);
  std::vector<CGPoint>::insert(a1 + 80, *(char **)(a1 + 80), (char *)v54);
  v29 = *(_QWORD *)(a1 + 72);
  v30 = *(double **)(a1 + 64);
  if ((unint64_t)v30 >= v29)
  {
    v32 = (double *)*v27;
    v33 = ((char *)v30 - (_BYTE *)*v27) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v35 = v29 - (_QWORD)v32;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 72, v36);
      v32 = *(double **)(a1 + 56);
      v30 = *(double **)(a1 + 64);
    }
    else
    {
      v37 = 0;
    }
    v38 = (double *)&v37[16 * v33];
    v39 = &v37[16 * v36];
    *v38 = v25;
    v38[1] = v26;
    v31 = v38 + 2;
    if (v30 != v32)
    {
      do
      {
        *((_OWORD *)v38 - 1) = *((_OWORD *)v30 - 1);
        v38 -= 2;
        v30 -= 2;
      }
      while (v30 != v32);
      v32 = (double *)*v27;
    }
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v31;
    *(_QWORD *)(a1 + 72) = v39;
    if (v32)
      operator delete(v32);
  }
  else
  {
    *v30 = v25;
    v30[1] = v26;
    v31 = v30 + 2;
  }
  v40 = v19 + v11 - v19;
  v41 = v15 + v21 * cosval - v40 * sinval;
  v42 = v19 + v40 * cosval + v21 * sinval;
  v43 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 64) = v31;
  v44 = *(double **)(a1 + 88);
  if ((unint64_t)v44 >= v43)
  {
    v46 = (double *)*v28;
    v47 = ((char *)v44 - (_BYTE *)*v28) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v49 = v43 - (_QWORD)v46;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 96, v50);
      v46 = *(double **)(a1 + 80);
      v44 = *(double **)(a1 + 88);
    }
    else
    {
      v51 = 0;
    }
    v52 = (double *)&v51[16 * v47];
    v53 = &v51[16 * v50];
    *v52 = v41;
    v52[1] = v42;
    v45 = v52 + 2;
    if (v44 != v46)
    {
      do
      {
        *((_OWORD *)v52 - 1) = *((_OWORD *)v44 - 1);
        v52 -= 2;
        v44 -= 2;
      }
      while (v44 != v46);
      v46 = (double *)*v28;
    }
    *(_QWORD *)(a1 + 80) = v52;
    *(_QWORD *)(a1 + 88) = v45;
    *(_QWORD *)(a1 + 96) = v53;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v44 = v41;
    v44[1] = v42;
    v45 = v44 + 2;
  }
  *(_QWORD *)(a1 + 88) = v45;
}

void std::vector<CGPoint>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v29 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v26 = v20;
    v27 = v20;
    v28 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == __src)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v26 = v20;
        v28 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v26 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v27 = v20 + 16;
    std::vector<CGPoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, __src);
    if (v27 != v26)
      v27 += (v26 - v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (__src <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)__src = *(_OWORD *)v3;
  }
}

void sub_1D504AFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double CRDetectorPolygonExtractor::smoothPivotAngles(CRDetectorPolygonExtractor *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double result;
  __int128 v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 7);
  v2 = *((_QWORD *)this + 8) - v1;
  if ((unint64_t)v2 >= 0x30
    && v2 == *((_QWORD *)this + 11) - *((_QWORD *)this + 10)
    && (unint64_t)((v2 >> 4) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = 1;
    v5 = 40;
    do
    {
      v6 = (double *)(v1 + v5);
      v7 = (double *)(*((_QWORD *)this + 10) + v5);
      v9 = *(_OWORD *)(v6 - 3);
      v10 = *(_OWORD *)(v7 - 3);
      ++v4;
      CRDetectorUtils::smoothAngleForPointPairBetweenNeighbors((double *)&v9, *(v6 - 5), *(v6 - 4), *(v7 - 5), *(v7 - 4), *(v6 - 1), *v6, *(v7 - 1), *v7, 0.5);
      *(_OWORD *)(v6 - 3) = v9;
      result = *(double *)&v10;
      *(_OWORD *)(*((_QWORD *)this + 10) + v5 - 24) = v10;
      v1 = *((_QWORD *)this + 7);
      v5 += 16;
    }
    while (((*((_QWORD *)this + 8) - v1) >> 4) - 1 > v4);
  }
  return result;
}

int32x2_t CRDetectorPolygonExtractor::composePivots(CRDetectorPolygonExtractor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int v11;
  double *v12;
  float64x2_t v13;
  float64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  double *f64;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int32x2_t result;

  v2 = *((_QWORD *)this + 8) - *((_QWORD *)this + 7);
  v3 = v2 >> 4;
  v4 = (v2 >> 4) - 2;
  std::vector<PixelPosition>::resize((uint64_t)this, 2 * v4 + 4);
  v5 = (double *)*((_QWORD *)this + 7);
  v6 = (int)v5[1];
  v7 = *(_DWORD **)this;
  *v7 = (int)*v5;
  v7[1] = v6;
  if (v2 >= 33)
  {
    v8 = 0;
    if (v4 <= 1)
      v9 = 1;
    else
      v9 = (v2 >> 4) - 2;
    do
    {
      v10 = v5[2 * v8];
      v11 = v7[2 * v8];
      if (v10 >= (double)v11)
      {
        v12 = &v5[2 * v8++];
        v7[2 * v8] = (int)v10;
        v6 = (int)v12[1];
      }
      else
      {
        ++v8;
        v7[2 * v8] = v11;
      }
      v7[2 * v8 + 1] = v6;
    }
    while (v8 != v9);
  }
  v13 = *(float64x2_t *)&v5[2 * v3 - 2];
  v14 = (float64x2_t *)*((_QWORD *)this + 10);
  *(int32x4_t *)&v7[2 * v3 - 2] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v13), (int32x4_t)vcvtq_s64_f64(v14[v3 - 1]));
  if (v2 >= 33)
  {
    v15 = 0;
    if (v4 <= 1)
      v16 = 1;
    else
      v16 = (v2 >> 4) - 2;
    v17 = &v7[2 * v3 + 2];
    f64 = v14[v3 - 3].f64;
    v19 = v3 + 1;
    do
    {
      v20 = *(v17 - 2);
      if (*f64 <= (double)v20)
      {
        *v17 = (int)*f64;
        v22 = (int)f64[1];
        v21 = v19;
      }
      else
      {
        v21 = v15 + v3 + 1;
        *v17 = v20;
        v22 = *(v17 - 1);
      }
      ++v15;
      v7[2 * v21 + 1] = v22;
      v17 += 2;
      f64 -= 2;
      ++v19;
      --v16;
    }
    while (v16);
  }
  result = vmovn_s64(vcvtq_s64_f64(*v14));
  *(int32x2_t *)&v7[4 * (v2 >> 4) - 2] = result;
  return result;
}

void CRDetectorPolygonExtractor::generatePivotsPolygon(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  void *__p[3];

  v6 = (uint64_t *)*a2;
  v7 = (uint64_t *)a2[1];
  v8 = 126 - 2 * __clz(v7 - v6);
  if (v7 == v6)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*,false>(v6, v7, v9, 1);
  CRDetectorPolygonExtractor::generatePivotsCenter(a1, a2, (uint64_t *)__p);
  if (*(_BYTE *)(a1 + 24))
  {
    CRDetectorPolygonExtractor::generatePivotBars(a1, (double **)__p);
    CRDetectorPolygonExtractor::generateEdgePoints(a1, (uint64_t)a2, (double **)__p);
    CRDetectorPolygonExtractor::smoothPivotAngles((CRDetectorPolygonExtractor *)a1);
    CRDetectorPolygonExtractor::composePivots((CRDetectorPolygonExtractor *)a1);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<PixelPosition>::__init_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>(a3, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D504B348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x40uLL);
    v9[8] = *a3;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 5) = 0;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  BOOL v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = (uint64_t *)v7;
  while (2)
  {
    v7 = (uint64_t)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((_DWORD *)a2 - 2) < *(_DWORD *)v8)
        {
          v37 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v37;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v8, (int *)v8 + 2, (int *)a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v8, (int *)v8 + 2, (int *)v8 + 4, a2 - 1);
      case 5uLL:
        v38 = v8 + 2;
        v39 = v8 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v8, (int *)v8 + 2, (int *)v8 + 4, v8 + 3);
        if (*((_DWORD *)a2 - 2) < *((_DWORD *)v8 + 6))
        {
          v40 = *v39;
          *v39 = *(a2 - 1);
          *(a2 - 1) = v40;
          if (*(_DWORD *)v39 < *(_DWORD *)v38)
          {
            v41 = *v38;
            v42 = *v39;
            *v38 = *v39;
            *v39 = v41;
            if (*((_DWORD *)v8 + 2) > (int)v42)
            {
              v43 = v8[1];
              v8[1] = v42;
              v8[2] = v43;
              if (*(_DWORD *)v8 > (int)v42)
              {
                v44 = *v8;
                *v8 = v42;
                v8[1] = v44;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v45 = v8 + 1;
          v47 = v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = *((_DWORD *)v49 + 2);
                v51 = *(_DWORD *)v49;
                v49 = v45;
                if (v50 < v51)
                {
                  v52 = *v45;
                  v53 = v48;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v53 + 8) = *(uint64_t *)((char *)v8 + v53);
                    if (!v53)
                      break;
                    v54 = *(_DWORD *)((char *)v8 + v53 - 8);
                    v53 -= 8;
                    if (v54 <= (int)v52)
                    {
                      v55 = (uint64_t *)((char *)v8 + v53 + 8);
                      goto LABEL_78;
                    }
                  }
                  v55 = v8;
LABEL_78:
                  *v55 = v52;
                }
                v45 = v49 + 1;
                v48 += 8;
              }
              while (v49 + 1 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v82 = *(_DWORD *)(v7 + 8);
              v83 = *(_DWORD *)v7;
              v7 = (uint64_t)v45;
              if (v82 < v83)
              {
                v84 = *v45;
                do
                {
                  v85 = v45;
                  v86 = *--v45;
                  *v85 = v86;
                }
                while (*((_DWORD *)v85 - 4) > (int)v84);
                *v45 = v84;
              }
              v45 = (uint64_t *)(v7 + 8);
            }
            while ((uint64_t *)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v8[v59];
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v61 = *(_DWORD *)v60;
                }
                else
                {
                  v61 = *(_DWORD *)v60;
                  v62 = *((_DWORD *)v60 + 2);
                  if (*(_DWORD *)v60 <= v62)
                    v61 = *((_DWORD *)v60 + 2);
                  if (*(_DWORD *)v60 < v62)
                  {
                    ++v60;
                    v59 = 2 * v58 + 2;
                  }
                }
                v63 = &v8[v58];
                if (v61 >= *(_DWORD *)v63)
                {
                  v64 = *v63;
                  do
                  {
                    v65 = v63;
                    v63 = v60;
                    *v65 = *v60;
                    if (v56 < v59)
                      break;
                    v66 = (2 * v59) | 1;
                    v60 = &v8[v66];
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v67 = *(_DWORD *)v60;
                      v59 = v66;
                    }
                    else
                    {
                      v67 = *(_DWORD *)v60;
                      result = v60 + 1;
                      v68 = *((_DWORD *)v60 + 2);
                      if (*(_DWORD *)v60 <= v68)
                        v67 = *((_DWORD *)v60 + 2);
                      if (*(_DWORD *)v60 >= v68)
                        v59 = v66;
                      else
                        ++v60;
                    }
                  }
                  while (v67 >= (int)v64);
                  *v63 = v64;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v69 = (unint64_t)v9 >> 3;
            do
            {
              v70 = 0;
              v71 = *v8;
              v72 = v8;
              do
              {
                v73 = &v72[v70 + 1];
                v74 = (2 * v70) | 1;
                v75 = 2 * v70 + 2;
                if (v75 < v69 && *(_DWORD *)v73 < *((_DWORD *)v73 + 2))
                {
                  ++v73;
                  v74 = v75;
                }
                *v72 = *v73;
                v72 = v73;
                v70 = v74;
              }
              while (v74 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
              if (v73 == --a2)
              {
                *v73 = v71;
              }
              else
              {
                *v73 = *a2;
                *a2 = v71;
                v76 = (char *)v73 - (char *)v8 + 8;
                if (v76 >= 9)
                {
                  v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                  v78 = &v8[v77];
                  if (*(_DWORD *)v78 < *(_DWORD *)v73)
                  {
                    v79 = *v73;
                    do
                    {
                      v80 = v73;
                      v73 = v78;
                      *v80 = *v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &v8[v77];
                    }
                    while (*(_DWORD *)v78 < (int)v79);
                    *v73 = v79;
                  }
                }
              }
            }
            while (v69-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (int *)&v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)(v7 + 8 * (v10 >> 1)), (int *)v7, (int *)a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)v7, (int *)(v7 + 8 * (v10 >> 1)), (int *)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)(v7 + 8), v12 - 2, (int *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)(v7 + 16), (int *)(v7 + 8 + 8 * v11), (int *)a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)v12 - 1, v12, (int *)(v7 + 8 + 8 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 8) >= *(_DWORD *)v7)
        {
          v28 = *(_QWORD *)v7;
          if (*((_DWORD *)a2 - 2) <= (int)*(_QWORD *)v7)
          {
            v30 = v7 + 8;
            do
            {
              v8 = (uint64_t *)v30;
              if (v30 >= (unint64_t)a2)
                break;
              v30 += 8;
            }
            while (*(_DWORD *)v8 <= (int)v28);
          }
          else
          {
            v8 = (uint64_t *)v7;
            do
              v29 = *((_DWORD *)v8++ + 2);
            while (v29 <= (int)v28);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *((_DWORD *)v31-- - 2);
            while (v32 > (int)v28);
          }
          while (v8 < v31)
          {
            v33 = *v8;
            *v8 = *v31;
            *v31 = v33;
            do
              v34 = *((_DWORD *)v8++ + 2);
            while (v34 <= (int)v28);
            do
              v35 = *((_DWORD *)v31-- - 2);
            while (v35 > (int)v28);
          }
          v36 = v8 - 1;
          if (v8 - 1 != (uint64_t *)v7)
            *(_QWORD *)v7 = *v36;
          a4 = 0;
          *v36 = v28;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        do
        {
          v16 = *(_DWORD *)(v7 + v14 + 8);
          v14 += 8;
        }
        while (v16 < (int)v15);
        v17 = v7 + v14;
        v18 = a2;
        if (v14 == 8)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *((_DWORD *)v18-- - 2);
          }
          while (v20 >= (int)v15);
        }
        else
        {
          do
            v19 = *((_DWORD *)v18-- - 2);
          while (v19 >= (int)v15);
        }
        if (v17 >= (unint64_t)v18)
        {
          v26 = (uint64_t *)(v17 - 8);
        }
        else
        {
          v21 = v7 + v14;
          v22 = v18;
          do
          {
            v23 = *(_QWORD *)v21;
            *(_QWORD *)v21 = *v22;
            *v22 = v23;
            do
            {
              v24 = *(_DWORD *)(v21 + 8);
              v21 += 8;
            }
            while (v24 < (int)v15);
            do
              v25 = *((_DWORD *)v22-- - 2);
            while (v25 >= (int)v15);
          }
          while (v21 < (unint64_t)v22);
          v26 = (uint64_t *)(v21 - 8);
        }
        if (v26 != (uint64_t *)v7)
          *(_QWORD *)v7 = *v26;
        *v26 = v15;
        if (v17 < (unint64_t)v18)
        {
LABEL_32:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*,false>(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(v7, v26);
        v8 = v26 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t)(v26 + 1), a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(uint64_t *result, int *a2, int *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v4 < v3)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        v7 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *result;
    if (v4 >= v3)
    {
      *result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      if (*a3 >= (int)v5)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    else
    {
      *result = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((_DWORD *)a2 - 2) < *(_DWORD *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16), a2 - 1);
      return 1;
    case 5:
      v15 = (uint64_t *)(a1 + 16);
      v16 = (uint64_t *)(a1 + 24);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16), (_QWORD *)(a1 + 24));
      if (*((_DWORD *)a2 - 2) < *(_DWORD *)(a1 + 24))
      {
        v17 = *v16;
        *v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (*(_DWORD *)v16 < *(_DWORD *)v15)
        {
          v18 = *v15;
          v19 = *v16;
          *v15 = *v16;
          *v16 = v18;
          if (*(_DWORD *)(a1 + 8) > (int)v19)
          {
            v20 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v19;
            *(_QWORD *)(a1 + 16) = v20;
            if (*(_DWORD *)a1 > (int)v19)
            {
              v21 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v19;
              *(_QWORD *)(a1 + 8) = v21;
            }
          }
        }
      }
      return 1;
    default:
      v7 = (_DWORD *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16));
      v8 = (_QWORD *)(a1 + 24);
      if ((_QWORD *)(a1 + 24) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v8 < *v7)
    {
      v11 = *v8;
      v12 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v12 + 24) = *(_QWORD *)(a1 + v12 + 16);
        if (v12 == -16)
          break;
        v13 = *(_DWORD *)(a1 + v12 + 8);
        v12 -= 8;
        if (v13 <= (int)v11)
        {
          v14 = (_QWORD *)(a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      v14 = (_QWORD *)a1;
LABEL_13:
      *v14 = v11;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(uint64_t *a1, int *a2, int *a3, _QWORD *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CRDetectorPolygonExtractor::generatePivotsPolygon(std::vector<PixelPosition> &)::$_0 &,PixelPosition*>(a1, a2, a3);
  if (*(_DWORD *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *(_DWORD *)a1)
      {
        v11 = *a1;
        *a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

float EvaluateAccuracy@<S0>(CHNeuralNetwork *a1@<X0>, id *a2@<X1>, CTCLayer *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  NSString *v13;
  id v14;
  const __CFString *v15;
  CGImage *CGImageFromFile;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  unsigned __int8 *v22;
  float *v23;
  unint64_t i;
  unsigned int v25;
  float v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  id v36;
  char *v37;
  char *v38;
  void *v39;
  int v40;
  id v41;
  uint64_t **v42;
  uint64_t **v43;
  void *v44;
  int v45;
  id v46;
  int *v47;
  int *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  float v57;
  __int128 v58;
  float64x2_t v59;
  float64x2_t v60;
  float result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  CHNeuralNetwork *v67;
  uint64_t v68;
  CTCLayer *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  __int128 v74;
  float *v75;
  DataHandler *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  int *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  void *__p;
  void *v92;
  uint64_t v93;
  void *v94;
  _BYTE *v95;
  uint64_t v96;
  void *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t **v102;
  uint64_t **v103;
  uint64_t **v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t **v108;
  char *v109;
  _QWORD *v110;
  char v111;
  _QWORD *v112;
  _QWORD *v113;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v76 = (DataHandler *)a2;
  v7 = objc_msgSend(a2[2], "count");
  v66 = a4;
  *(_DWORD *)(a4 + 24) = v7;
  if ((int)v7 <= 0)
  {
    *(_QWORD *)&v72 = 0;
    *(_QWORD *)&v74 = 0;
    v10 = (float)(int)v7;
    v11 = 0.0;
    v12 = 0.0;
  }
  else
  {
    v8 = 0;
    v67 = a1;
    v9 = *((_QWORD *)a1 + 21);
    v65 = (char *)&v85;
    v70 = (int)v7;
    v71 = v7;
    v10 = (float)(int)v7;
    v11 = 0.0;
    v12 = 0.0;
    v72 = 0u;
    v74 = 0u;
    v69 = a3;
    do
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Evaluate accuracies %d samples: [%.2f%%]\r", v71, (float)((float)(int)v8 / v10) * 100.0);
      objc_msgSend(*((id *)v76 + 2), "objectAtIndex:", *(int *)(*(_QWORD *)v76 + 4 * v8));
      v13 = (NSString *)objc_claimAutoreleasedReturnValue();
      characterCodes(v13, &v97);

      v92 = 0;
      v93 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v97, (uint64_t)v98, (v98 - (_BYTE *)v97) >> 2);
      CTCLayer::stringSequence2codeSequence((uint64_t)a3, (int **)&__p, (char **)&v94);
      if (__p)
      {
        v92 = __p;
        operator delete(__p);
      }
      objc_msgSend(*((id *)v76 + 1), "objectAtIndex:", *(int *)(*(_QWORD *)v76 + 4 * v8));
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v15 = CFStringCreateWithCString(0, (const char *)objc_msgSend(v14, "UTF8String"), 0x8000100u);

      CGImageFromFile = localCreateCGImageFromFile(v15, 0);
      v89 = 0u;
      v90 = 0u;
      newPlanar8BufferFromImage(CGImageFromFile, &v89);
      v18 = *((_QWORD *)&v89 + 1);
      v17 = (unsigned __int8 *)v89;
      v19 = v90;
      v75 = (float *)operator new[]();
      if (v18)
      {
        v20 = 0;
        v21 = v75;
        do
        {
          v22 = v17;
          v23 = v21;
          for (i = v19; i; --i)
          {
            v25 = *v22++;
            v26 = (double)v25 / 255.0;
            *v23++ = v26;
          }
          ++v20;
          v21 += v19;
          v17 += v19;
        }
        while (v20 != v18);
      }
      CGImageRelease(CGImageFromFile);
      CFRelease(v15);
      if (v19 > v18)
      {
        CHNeuralNetwork::FeedForward((uint64_t)v67, v75, v19, v18, (uint64_t *)&v86, v62, v63, v64, (uint64_t)v65, v66, (uint64_t)v67, v68, (uint64_t)v69, v70, v71, v72, *((uint64_t *)&v72 + 1), v74, *((uint64_t *)&v74 + 1),
          (uint64_t)v75,
          (uint64_t)v76,
          (uint64_t)v77,
          (uint64_t)v78,
          v79,
          (uint64_t)v80,
          (uint64_t)v81,
          v82,
          (uint64_t)v83,
          (uint64_t)v84,
          (uint64_t)v85,
          (uint64_t)v86,
          (uint64_t)v87,
          v88,
          v89,
          *((uint64_t *)&v89 + 1),
          (void *)v90,
          *((uint64_t *)&v90 + 1),
          (uint64_t (**)())__p,
          (uint64_t)v92,
          v93,
          (uint64_t)v94,
          (uint64_t)v95,
          v96,
          (uint64_t)v97,
          (uint64_t)v98,
          v99,
          (uint64_t)v100,
          v101,
          (uint64_t)v102,
          (uint64_t)v103,
          (uint64_t)v104,
          v105,
          (uint64_t)v106,
          (uint64_t)v107);
        v28 = v86;
        v27 = (uint64_t)v87;
        if (v87 != v86)
        {
          v83 = 0;
          v84 = 0;
          v29 = 0xAAAAAAAAAAAAAAABLL * (v87 - v86);
          v85 = 0;
          v100 = &v83;
          LOBYTE(v101) = 0;
          if (v29 >= 0xAAAAAAAAAAAAAABLL)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v83 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v65, v29);
          v84 = v83;
          v85 = &v83[3 * v30];
          v106 = v83;
          v107 = v83;
          v102 = (uint64_t **)v65;
          v103 = &v106;
          v104 = &v107;
          LOBYTE(v105) = 0;
          v31 = v83;
          do
          {
            *v31 = 0;
            v31[1] = 0;
            v31[2] = 0;
            v33 = *v28;
            v32 = v28[1];
            v80 = v31;
            LOBYTE(v81) = 0;
            if (v32 != v33)
            {
              std::vector<std::vector<float>>::__vallocate[abi:ne180100](v31, 0xAAAAAAAAAAAAAAABLL * ((v32 - v33) >> 3));
              v112 = (_QWORD *)v31[1];
              v113 = v112;
              v108 = (uint64_t **)(v31 + 2);
              v109 = (char *)&v112;
              v110 = &v113;
              v111 = 0;
              v34 = v112;
              do
              {
                *v34 = 0;
                v34[1] = 0;
                v34[2] = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v34, *(const void **)v33, *(_QWORD *)(v33 + 8), (uint64_t)(*(_QWORD *)(v33 + 8) - *(_QWORD *)v33) >> 2);
                v34 = v113 + 3;
                v113 += 3;
                v33 += 24;
              }
              while (v33 != v32);
              v111 = 1;
              std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v108);
              v31[1] = (uint64_t)v34;
              v31 = v107;
            }
            v28 += 3;
            v31 += 3;
            v107 = v31;
          }
          while (v28 != (uint64_t *)v27);
          LOBYTE(v105) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v102);
          v84 = v31;
          CTCLayer::setActivations((uint64_t)v69, &v83);
          v108 = &v83;
          std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
          CTCLayer::getMaxActivations(v69);
          CTCLayer::setCummulativeScores(v69);
          CTCLayer::bestPathDecoding(v69, (char **)&v108);
          CTCLayer::pathDecodingFixedLength(v69, (unint64_t)(v98 - (_BYTE *)v97) >> 2, (char **)&v102);
          CTCLayer::pathDecodingGeometrical(v69, (char **)&v80);
          v35 = v74;
          if (v109 - (char *)v108 == v95 - (_BYTE *)v94 && !memcmp(v108, v94, v109 - (char *)v108))
            v35 = v74 + 1;
          v36 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
          v37 = (char *)v108;
          v38 = v109;
          while (v37 != v38)
          {
            unicodeToNSString(*(_DWORD *)(v9 + 4 * *(int *)v37));
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "appendString:", v39);

            v37 += 4;
          }
          v40 = DWORD1(v74);
          if ((char *)v103 - (char *)v102 == v95 - (_BYTE *)v94 && !memcmp(v102, v94, (char *)v103 - (char *)v102))
            v40 = DWORD1(v74) + 1;
          v41 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
          v42 = v102;
          v43 = v103;
          while (v42 != v43)
          {
            unicodeToNSString(*(_DWORD *)(v9 + 4 * *(int *)v42));
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "appendString:", v44);

            v42 = (uint64_t **)((char *)v42 + 4);
          }
          v45 = v72;
          HIDWORD(v68) = v35;
          if ((char *)v81 - (_BYTE *)v80 == v95 - (_BYTE *)v94 && !memcmp(v80, v94, (char *)v81 - (_BYTE *)v80))
            v45 = v72 + 1;
          LODWORD(v68) = v45;
          v46 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
          v47 = (int *)v80;
          v48 = v81;
          while (v47 != v48)
          {
            unicodeToNSString(*(_DWORD *)(v9 + 4 * *v47));
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "appendString:", v49);

            ++v47;
          }
          objc_msgSend(*((id *)v76 + 1), "objectAtIndex:", *(int *)(*(_QWORD *)v76 + 4 * v8));
          a3 = v69;
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          NSLog(CFSTR("file: %@"), v50);

          objc_msgSend(*((id *)v76 + 2), "objectAtIndex:", *(int *)(*(_QWORD *)v76 + 4 * v8));
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = objc_msgSend(v36, "rangeOfString:", v51);

          v73 = DWORD1(v72);
          if (v52 == 0x7FFFFFFFFFFFFFFFLL)
          {
            NSLog(CFSTR("substringMatch: 0"));
          }
          else
          {
            NSLog(CFSTR("substringMatch: 1"));
            v73 = DWORD1(v72) + 1;
          }
          objc_msgSend(*((id *)v76 + 2), "objectAtIndex:", *(int *)(*(_QWORD *)v76 + 4 * v8));
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          NSLog(CFSTR("trueLabel:   %@"), v53);

          NSLog(CFSTR("ctc:         %@"), v36);
          NSLog(CFSTR("fixedLenght: %@"), v41);
          NSLog(CFSTR("geometrical: %@"), v46);
          objc_msgSend(v36, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E98DC948);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*((id *)v76 + 2), "objectAtIndex:", *(int *)(*(_QWORD *)v76 + 4 * v8));
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = objc_msgSend(v54, "editDistanceFromString:", v55);

          NSLog(CFSTR("editDistance: %d"), v56);
          v77 = 0;
          v78 = 0;
          v79 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v77, v94, (uint64_t)v95, (v95 - (_BYTE *)v94) >> 2);
          v57 = CTCLayer::computeScore(v69, (uint64_t)&v77);
          if (v77)
          {
            v78 = v77;
            operator delete(v77);
          }
          v11 = v11 + (float)(int)v56;
          *(float *)(v66 + 20) = v11;

          if (v80)
          {
            v81 = (int *)v80;
            operator delete(v80);
          }
          if (v102)
          {
            v103 = v102;
            operator delete(v102);
          }
          if (v108)
          {
            v109 = (char *)v108;
            operator delete(v108);
          }
          v12 = v12 + v57;
          *(_QWORD *)&v58 = __PAIR64__(v40, HIDWORD(v68));
          v74 = v58;
          *(_QWORD *)&v58 = __PAIR64__(v73, v68);
          v72 = v58;
        }
        v108 = &v86;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
      }
      MEMORY[0x1D826E270](v75, 0x1000C8052888210);
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      if (v97)
      {
        v98 = v97;
        operator delete(v97);
      }
      ++v8;
    }
    while (v8 != v70);
  }
  fwrite("                                                   \r", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  *(float *)v66 = v12 / v10;
  v59 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
  v60 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v10), 0);
  *(float32x2_t *)(v66 + 4) = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)&v74)), v59), v60));
  *(float32x2_t *)(v66 + 12) = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)&v72)), v59), v60));
  result = v11 / v10;
  *(float *)(v66 + 20) = v11 / v10;
  return result;
}

void sub_1D504CA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v54;
  void *v55;

  if (__p)
    operator delete(__p);
  v54 = *(void **)(v52 - 232);
  if (v54)
  {
    *(_QWORD *)(v52 - 224) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v52 - 184);
  if (v55)
  {
    *(_QWORD *)(v52 - 176) = v55;
    operator delete(v55);
  }
  *(_QWORD *)(v52 - 184) = &a34;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 184));
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  _Unwind_Resume(a1);
}

void characterCodes(NSString *a1@<X0>, _QWORD *a2@<X8>)
{
  NSString *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(__n128 *, __n128 *);
  void (*v11)(uint64_t);
  void *v12;
  void *__p;
  void *v14;
  uint64_t v15;

  v3 = a1;
  v7 = 0;
  v8 = &v7;
  v9 = 0x4812000000;
  v10 = __Block_byref_object_copy__13;
  v11 = __Block_byref_object_dispose__13;
  v12 = &unk_1D5168E96;
  __p = 0;
  v14 = 0;
  v15 = 0;
  v4 = -[NSString length](v3, "length");
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___Z14characterCodesP8NSString_block_invoke;
  v6[3] = &unk_1E98DAF80;
  v6[4] = &v7;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](v3, "enumerateSubstringsInRange:options:usingBlock:", 0, v4, 2, v6);
  v5 = v8;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, (const void *)v5[6], v5[7], (v5[7] - v5[6]) >> 2);
  _Block_object_dispose(&v7, 8);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }

}

void sub_1D504CCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

CGImageRef localCreateCGImageFromFile(const __CFString *a1, const __CFDictionary **a2)
{
  const __CFURL *v3;
  CGImageSource *v4;
  CGImageSource *v5;
  CGImageRef ImageAtIndex;

  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a1);
  v3 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v4 = CGImageSourceCreateWithURL(v3, 0);
  v5 = v4;
  if (v4)
  {
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    if (a2)
      *a2 = CGImageSourceCopyPropertiesAtIndex(v5, 0, 0);
    CFRelease(v5);
  }
  else
  {
    ImageAtIndex = 0;
  }

  return ImageAtIndex;
}

void sub_1D504CDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void newPlanar8BufferFromImage(CGImage *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t Width;
  unint64_t Height;
  CGColorSpace *DeviceGray;
  void *v7;
  CGContext *v8;
  CGRect v9;

  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  DeviceGray = CGColorSpaceCreateDeviceGray();
  v7 = malloc_type_malloc(Height * Width, 0x100004077774924uLL);
  v8 = CGBitmapContextCreate(v7, Width, Height, 8uLL, Width, DeviceGray, 0);
  v9.size.width = (double)Width;
  v9.size.height = (double)Height;
  v9.origin.x = 0.0;
  v9.origin.y = 0.0;
  CGContextDrawImage(v8, v9, a1);
  *a2 = v7;
  a2[1] = Height;
  a2[2] = Width;
  a2[3] = Width;
  CGContextRelease(v8);
  CGColorSpaceRelease(DeviceGray);
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___Z14characterCodesP8NSString_block_invoke(uint64_t a1, void *a2)
{
  NSString *v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  NSString *v19;

  v3 = a2;
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v19 = v3;
  v5 = NSStringToUnicode(v3);
  v6 = v5;
  v7 = v4[8];
  v8 = (char *)v4[7];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v4[6];
    v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)v10;
    v13 = (uint64_t)(v7 - (_QWORD)v10) >> 1;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 8), v14);
      v10 = (char *)v4[6];
      v8 = (char *)v4[7];
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = v6;
    v9 = v16 + 4;
    while (v8 != v10)
    {
      v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    v4[6] = v16;
    v4[7] = v9;
    v4[8] = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = v5;
    v9 = v8 + 4;
  }
  v4[7] = v9;

}

void sub_1D504CFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t NSStringToUnicode(NSString *a1)
{
  NSString *v1;
  uint64_t v2;
  int v3;

  v1 = a1;
  if (-[NSString length](v1, "length") == 1)
  {
    v2 = -[NSString characterAtIndex:](v1, "characterAtIndex:", 0);
  }
  else if (-[NSString length](v1, "length") == 2)
  {
    v3 = -[NSString characterAtIndex:](v1, "characterAtIndex:", 0);
    v2 = -[NSString characterAtIndex:](v1, "characterAtIndex:", 1) + (v3 << 10) - 56613888;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1D504D050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 8);
    v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      v5 = v4;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

void sub_1D504D9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D504DAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D504DF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D504F1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1D504FC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5051F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::unicodeCategory(_anonymous_namespace_ *this, int a2)
{
  UChar32 v3;
  UBlockCode Code;

  v3 = (int)this;
  Code = ublock_getCode((UChar32)this);
  if (Code == UBLOCK_BASIC_LATIN)
  {
    if (u_ispunct(v3))
    {
      return 0;
    }
    else if (u_isdigit(v3))
    {
      return 1;
    }
    else if (u_isupper(v3))
    {
      return 2;
    }
    else if (u_islower(v3))
    {
      return 3;
    }
    else
    {
      return 4;
    }
  }
  else
  {
    if (!a2)
      return 5;
    if (Code > UBLOCK_HIRAGANA)
    {
      if (Code == UBLOCK_HANGUL_SYLLABLES)
        return 9;
      if (Code == UBLOCK_KATAKANA)
        return 7;
    }
    else
    {
      if (Code == UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION)
        return 8;
      if (Code == UBLOCK_HIRAGANA)
        return 6;
    }
    if ((Code & 0xFFFFFFF7) == 0x47)
      return 10;
    if (Code == UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS)
      return 11;
    else
      return 5;
  }
}

void sub_1D5052490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;

  v10 = *(void **)v5;
  if (*(_QWORD *)v5)
  {
    *(_QWORD *)(v5 + 8) = v10;
    operator delete(v10);
  }

  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1D505261C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5052754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5052994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D5052A30()
{
  JUMPOUT(0x1D5052A18);
}

void sub_1D5052A38()
{
  JUMPOUT(0x1D5052A1CLL);
}

void sub_1D5052B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t p2s@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16[8];
  void *__p[2];
  __int128 v18;
  int v19;
  uint64_t v20[20];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = MEMORY[0x1E0DE4FD0];
  v4 = MEMORY[0x1E0DE4FD0] + 104;
  v20[0] = MEMORY[0x1E0DE4FD0] + 104;
  v5 = MEMORY[0x1E0DE4FD0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v15 = MEMORY[0x1E0DE4FD0] + 64;
  v14[0] = v7;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v7 - 24)) = v8;
  v14[1] = 0;
  v9 = (std::ios_base *)((char *)v14 + *(_QWORD *)(v14[0] - 24));
  std::ios_base::init(v9, v16);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v10 = v6[5];
  v15 = v6[4];
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = v10;
  v14[0] = v6[1];
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = v6[6];
  v20[0] = v4;
  v14[0] = v3 + 24;
  v15 = v5;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v19 = 24;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (uint64_t)a1);
  v14[0] = *v6;
  v12 = v6[9];
  *(uint64_t *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = v6[8];
  v15 = v12;
  v16[0] = v11 + 16;
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D826E234](v20);
}

void sub_1D5052DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1D826E234](a10);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x1D826E168](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1D5052FA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1D5052F74);
  }
  __cxa_rethrow();
}

void sub_1D505300C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D826E234](a1 + 128);
  return a1;
}

double ul2s@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  BOOL v5;
  __int128 v6;
  uint64_t v7;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, (char *)&str_0);
  do
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((a1 % 0xA) | 0x30, (const void **)a2, (uint64_t)&v6);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    v5 = a1 >= 0xA;
    a1 /= 0xAuLL;
  }
  while (v5);
  return result;
}

void sub_1D5053148(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  _BYTE *v7;
  void *v8;
  const void *v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (_BYTE *)result;
  else
    v7 = *(_BYTE **)result;
  *v7 = a1;
  v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  *((_BYTE *)v8 + v5) = 0;
  return result;
}

double i2s@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  double result;
  BOOL v6;
  __int128 v7;
  uint64_t v8;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, (char *)&str_0);
  if (a1 >= 0)
    v4 = a1;
  else
    v4 = -a1;
  do
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((v4 % 0xA) | 0x30, (const void **)a2, (uint64_t)&v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v7;
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    v6 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v6);
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v7;
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
  }
  return result;
}

void sub_1D50532D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void d2s(double a1@<D0>, _QWORD *a2@<X8>)
{
  void *__p;
  char v4;
  char __str[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x40uLL, "%.10g", a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __str);
  std::string::basic_string[abi:ne180100]<0>(a2, __str);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1D5053380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t s2i(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  _BOOL4 v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(unsigned __int8 **)a1;
  v2 = *((_QWORD *)a1 + 1);
  if ((a1[23] & 0x80u) == 0)
  {
    v1 = a1;
    v2 = a1[23];
  }
  if (v2)
    v3 = *v1 == 45;
  else
    v3 = 0;
  v4 = v3;
  if (v2 <= v3)
  {
    v6 = 0;
    v9 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v2 - v4;
    v8 = &v1[v4];
    while (1)
    {
      v9 = v6;
      v11 = *v8++;
      v10 = v11;
      if ((v11 - 58) < 0xFFFFFFF6 || v9 < v5)
        break;
      v6 = v10 + 10 * v9 - 48;
      v5 = v9;
      if (!--v7)
        goto LABEL_16;
    }
    v6 = v9;
    v9 = v5;
  }
LABEL_16:
  v13 = !v4;
  if (v4)
    v14 = 0x80000000;
  else
    v14 = 0x7FFFFFFF;
  if (v13)
    v15 = v6;
  else
    v15 = -v6;
  if (v6 >= v9)
    return v15;
  else
    return v14;
}

uint64_t sh2i(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  _BOOL8 v3;
  unint64_t v4;
  uint64_t v5;
  signed int v6;
  int v7;
  int v8;
  signed int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) == 0)
    v2 = (_BYTE *)a1;
  else
    v2 = *(_BYTE **)a1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *v2 == 45;
    if (*v2 == 45)
    {
      if (v1 < 2)
      {
        v4 = 1;
        LODWORD(v3) = 1;
        goto LABEL_19;
      }
      v5 = 2;
    }
    else
    {
      v5 = 1;
    }
    if (v2[v3] == 48 && (v2[v5] | 0x20) == 0x78)
    {
      v4 = 2;
      if (*v2 == 45)
        v4 = 3;
    }
    else
    {
      v4 = *v2 == 45;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    v4 = 0;
  }
LABEL_19:
  if (v4 >= v1)
  {
    v6 = 0;
LABEL_39:
    if (v3)
      return -v6;
    else
      return v6;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = (char)v2[v4];
      if ((v7 - 48) >= 0xA)
      {
        if ((v7 - 97) >= 6)
        {
          if ((v7 - 65) > 5)
            goto LABEL_39;
          v8 = -55;
        }
        else
        {
          v8 = -87;
        }
      }
      else
      {
        v8 = -48;
      }
      v9 = v7 + 16 * v6 + v8;
      ++v4;
      v10 = v9 < v6;
      if (v4 >= v1)
        break;
      v6 = v9;
    }
    while (!v10);
    if (v3)
      v11 = 0x80000000;
    else
      v11 = 0x7FFFFFFF;
    if (v3)
      v12 = -v9;
    else
      v12 = v9;
    if (v10)
      return v11;
    else
      return v12;
  }
}

void w2i(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  __int16 v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string __p;
  char v33;

  v4 = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = __str->__r_.__value_.__r.__words[0];
  size = __str->__r_.__value_.__l.__size_;
  do
  {
    if ((v6 & 0x80u) == 0)
      v9 = __str;
    else
      v9 = (std::string *)v7;
    if ((v6 & 0x80u) == 0)
      v10 = v6;
    else
      v10 = size;
    v11 = v10 - v4;
    if (v10 <= v4)
    {
      v15 = -1;
    }
    else
    {
      v12 = (char *)v9 + v4;
      v13 = (char *)v9 + v10;
      while (*v12 != 95)
      {
        ++v12;
        if (!--v11)
        {
          v12 = v13;
          break;
        }
      }
      v14 = v12 - (_BYTE *)v9;
      if (v12 == v13)
        v15 = -1;
      else
        v15 = v14;
    }
    if (v15 != v4)
    {
      std::string::basic_string(&__p, __str, v4, v15 - v4, (std::allocator<char> *)&v33);
      v16 = sh2i((uint64_t)&__p);
      v17 = v16;
      v19 = a2[1];
      v18 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v18)
      {
        v21 = *a2;
        v22 = v19 - *a2;
        if (v22 <= -3)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v23 = v22 >> 1;
        v24 = v18 - (_QWORD)v21;
        if (v24 <= (v22 >> 1) + 1)
          v25 = v23 + 1;
        else
          v25 = v24;
        if (v24 >= 0x7FFFFFFFFFFFFFFELL)
          v26 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5, v26);
          v21 = *a2;
          v19 = a2[1];
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[2 * v23];
        *(_WORD *)v28 = v17;
        v20 = v28 + 2;
        while (v19 != v21)
        {
          v29 = *((_WORD *)v19 - 1);
          v19 -= 2;
          *((_WORD *)v28 - 1) = v29;
          v28 -= 2;
        }
        *a2 = v28;
        a2[1] = v20;
        a2[2] = &v27[2 * v26];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_WORD *)v19 = v16;
        v20 = v19 + 2;
      }
      a2[1] = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v7 = __str->__r_.__value_.__r.__words[0];
      size = __str->__r_.__value_.__l.__size_;
    }
    if ((v6 & 0x80u) == 0)
      v30 = __str;
    else
      v30 = (std::string *)v7;
    if ((v6 & 0x80u) == 0)
      v31 = v6;
    else
      v31 = size;
    if (v31 <= v15)
      break;
    v4 = v15;
    while (v30->__r_.__value_.__s.__data_[v4] == 95)
    {
      if (v31 == ++v4)
        return;
    }
  }
  while (v4 != -1);
}

void sub_1D505374C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void w2i(std::string *__str@<X0>, __int16 a2@<W1>, char **a3@<X8>)
{
  std::string::size_type v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int16 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string __p;
  char v35;

  v6 = 0;
  a3[2] = 0;
  v7 = (uint64_t)(a3 + 2);
  *a3 = 0;
  a3[1] = 0;
  v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v9 = __str->__r_.__value_.__r.__words[0];
  size = __str->__r_.__value_.__l.__size_;
  do
  {
    if ((v8 & 0x80u) == 0)
      v11 = __str;
    else
      v11 = (std::string *)v9;
    if ((v8 & 0x80u) == 0)
      v12 = v8;
    else
      v12 = size;
    v13 = v12 - v6;
    if (v12 <= v6)
    {
      v17 = -1;
    }
    else
    {
      v14 = (char *)v11 + v6;
      v15 = (char *)v11 + v12;
      while (*v14 != 95)
      {
        ++v14;
        if (!--v13)
        {
          v14 = v15;
          break;
        }
      }
      v16 = v14 - (_BYTE *)v11;
      if (v14 == v15)
        v17 = -1;
      else
        v17 = v16;
    }
    if (v17 != v6)
    {
      std::string::basic_string(&__p, __str, v6, v17 - v6, (std::allocator<char> *)&v35);
      v18 = sh2i((uint64_t)&__p);
      if (v18 < 0x10000)
        v19 = v18;
      else
        v19 = a2;
      v21 = a3[1];
      v20 = (unint64_t)a3[2];
      if ((unint64_t)v21 >= v20)
      {
        v23 = *a3;
        v24 = v21 - *a3;
        if (v24 <= -3)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v25 = v24 >> 1;
        v26 = v20 - (_QWORD)v23;
        if (v26 <= (v24 >> 1) + 1)
          v27 = v25 + 1;
        else
          v27 = v26;
        if (v26 >= 0x7FFFFFFFFFFFFFFELL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v7, v28);
          v23 = *a3;
          v21 = a3[1];
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[2 * v25];
        *(_WORD *)v30 = v19;
        v22 = v30 + 2;
        while (v21 != v23)
        {
          v31 = *((_WORD *)v21 - 1);
          v21 -= 2;
          *((_WORD *)v30 - 1) = v31;
          v30 -= 2;
        }
        *a3 = v30;
        a3[1] = v22;
        a3[2] = &v29[2 * v28];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_WORD *)v21 = v19;
        v22 = v21 + 2;
      }
      a3[1] = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v9 = __str->__r_.__value_.__r.__words[0];
      size = __str->__r_.__value_.__l.__size_;
    }
    if ((v8 & 0x80u) == 0)
      v32 = __str;
    else
      v32 = (std::string *)v9;
    if ((v8 & 0x80u) == 0)
      v33 = v8;
    else
      v33 = size;
    if (v33 <= v17)
      break;
    v6 = v17;
    while (v32->__r_.__value_.__s.__data_[v6] == 95)
    {
      if (v33 == ++v6)
        return;
    }
  }
  while (v6 != -1);
}

void sub_1D5053964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void w2int(uint64_t *a1@<X0>, char **a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  unint64_t v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((char *)a1 + 23) < 0;
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = a2 + 2;
    do
    {
      if (v3)
        v9 = (uint64_t *)*a1;
      else
        v9 = a1;
      v10 = *((char *)v9 + v7);
      if ((unint64_t)v6 >= *v8)
      {
        v12 = *a2;
        v13 = (v6 - *a2) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = *v8 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v16);
          v12 = *a2;
          v6 = a2[1];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v10;
        v11 = v18 + 4;
        while (v6 != v12)
        {
          v19 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *a2 = v18;
        a2[1] = v11;
        a2[2] = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v6 = v10;
        v11 = v6 + 4;
      }
      a2[1] = v11;
      ++v7;
      v3 = *((char *)a1 + 23) < 0;
      v20 = a1[1];
      if (*((char *)a1 + 23) >= 0)
        v20 = *((unsigned __int8 *)a1 + 23);
      v6 = v11;
    }
    while (v20 > v7);
  }
}

void sub_1D5053AEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void w2i32(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  char v32;

  v4 = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = __str->__r_.__value_.__r.__words[0];
  size = __str->__r_.__value_.__l.__size_;
  do
  {
    if ((v6 & 0x80u) == 0)
      v9 = __str;
    else
      v9 = (std::string *)v7;
    if ((v6 & 0x80u) == 0)
      v10 = v6;
    else
      v10 = size;
    v11 = v10 - v4;
    if (v10 <= v4)
    {
      v15 = -1;
    }
    else
    {
      v12 = (char *)v9 + v4;
      v13 = (char *)v9 + v10;
      while (*v12 != 95)
      {
        ++v12;
        if (!--v11)
        {
          v12 = v13;
          break;
        }
      }
      v14 = v12 - (_BYTE *)v9;
      if (v12 == v13)
        v15 = -1;
      else
        v15 = v14;
    }
    if (v15 != v4)
    {
      std::string::basic_string(&__p, __str, v4, v15 - v4, (std::allocator<char> *)&v32);
      v16 = sh2i((uint64_t)&__p);
      v17 = v16;
      v19 = a2[1];
      v18 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v18)
      {
        v21 = *a2;
        v22 = (v19 - *a2) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v5, v25);
          v21 = *a2;
          v19 = a2[1];
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = v17;
        v20 = v27 + 4;
        while (v19 != v21)
        {
          v28 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *a2 = v27;
        a2[1] = v20;
        a2[2] = &v26[4 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_DWORD *)v19 = v16;
        v20 = v19 + 4;
      }
      a2[1] = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v7 = __str->__r_.__value_.__r.__words[0];
      size = __str->__r_.__value_.__l.__size_;
    }
    if ((v6 & 0x80u) == 0)
      v29 = __str;
    else
      v29 = (std::string *)v7;
    if ((v6 & 0x80u) == 0)
      v30 = v6;
    else
      v30 = size;
    if (v30 <= v15)
      break;
    v4 = v15;
    while (v29->__r_.__value_.__s.__data_[v4] == 95)
    {
      if (v30 == ++v4)
        return;
    }
  }
  while (v4 != -1);
}

void sub_1D5053CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void iv2s(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  _QWORD v20[3];

  v3 = a2;
  v20[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 2))
  {
    if ((unint64_t)v6 < 4)
      return;
    v3 = v6 >> 2;
  }
  v7 = 0;
  do
  {
    if (v7)
    {
      v8 = *(char *)(a3 + 23);
      if (v8 >= 0)
        v9 = *(unsigned __int8 *)(a3 + 23);
      else
        v9 = *(_QWORD *)(a3 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v19;
      else
        v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      if (v9)
      {
        if (v8 >= 0)
          v11 = (const void *)a3;
        else
          v11 = *(const void **)a3;
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      i2sh(*(_DWORD *)(*(_QWORD *)a1 + 4 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v13 = v18;
      else
        v13 = (std::string::size_type)__p[1];
      v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v20[0];
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v20 + 7);
      *(_BYTE *)(a3 + 23) = v16;
      if ((char)v18 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
    else
    {
      i2sh(**(_DWORD **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  _QWORD v20[3];

  v3 = a2;
  v20[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 2))
  {
    if ((unint64_t)v6 < 4)
      return;
    v3 = v6 >> 2;
  }
  v7 = 0;
  do
  {
    if (v7)
    {
      v8 = *(char *)(a3 + 23);
      if (v8 >= 0)
        v9 = *(unsigned __int8 *)(a3 + 23);
      else
        v9 = *(_QWORD *)(a3 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v19;
      else
        v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      if (v9)
      {
        if (v8 >= 0)
          v11 = (const void *)a3;
        else
          v11 = *(const void **)a3;
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      i2sh(*(_DWORD *)(*(_QWORD *)a1 + 4 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v13 = v18;
      else
        v13 = (std::string::size_type)__p[1];
      v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v20[0];
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v20 + 7);
      *(_BYTE *)(a3 + 23) = v16;
      if ((char)v18 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
    else
    {
      i2sh(**(_DWORD **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  _QWORD v20[3];

  v3 = a2;
  v20[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 3))
  {
    if ((unint64_t)v6 < 8)
      return;
    v3 = v6 >> 3;
  }
  v7 = 0;
  do
  {
    if (v7)
    {
      v8 = *(char *)(a3 + 23);
      if (v8 >= 0)
        v9 = *(unsigned __int8 *)(a3 + 23);
      else
        v9 = *(_QWORD *)(a3 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v19;
      else
        v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      if (v9)
      {
        if (v8 >= 0)
          v11 = (const void *)a3;
        else
          v11 = *(const void **)a3;
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      ul2sh(*(_QWORD *)(*(_QWORD *)a1 + 8 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v13 = v18;
      else
        v13 = (std::string::size_type)__p[1];
      v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v20[0];
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v20 + 7);
      *(_BYTE *)(a3 + 23) = v16;
      if ((char)v18 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
    else
    {
      ul2sh(**(_QWORD **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  _QWORD v20[3];

  v3 = a2;
  v20[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (a2 - 1 >= (unint64_t)(v6 >> 3))
  {
    if ((unint64_t)v6 < 8)
      return;
    v3 = v6 >> 3;
  }
  v7 = 0;
  do
  {
    if (v7)
    {
      v8 = *(char *)(a3 + 23);
      if (v8 >= 0)
        v9 = *(unsigned __int8 *)(a3 + 23);
      else
        v9 = *(_QWORD *)(a3 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v19;
      else
        v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      if (v9)
      {
        if (v8 >= 0)
          v11 = (const void *)a3;
        else
          v11 = *(const void **)a3;
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
      ul2sh(*(_QWORD *)(*(_QWORD *)a1 + 8 * v7), (uint64_t)__p);
      if ((v18 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v13 = v18;
      else
        v13 = (std::string::size_type)__p[1];
      v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
      v15 = v14->__r_.__value_.__r.__words[0];
      v20[0] = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v8 < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v20[0];
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v20 + 7);
      *(_BYTE *)(a3 + 23) = v16;
      if ((char)v18 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
    else
    {
      ul2sh(**(_QWORD **)a1, (uint64_t)&v19);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(std::string *)a3 = v19;
    }
    ++v7;
  }
  while (v3 != v7);
}

void sub_1D5053EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if ((*(_BYTE *)(v21 + 23) & 0x80) != 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

double i2sh@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  char v5;
  BOOL v6;
  double result;
  __int128 v8;
  uint64_t v9;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, (char *)&str_0);
  if (a1 >= 0)
    v4 = a1;
  else
    v4 = -a1;
  do
  {
    if ((v4 & 0xF) >= 0xA)
      v5 = (v4 & 0xF) + 87;
    else
      v5 = v4 & 0xF | 0x30;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (const void **)a2, (uint64_t)&v8);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v6 = v4 > 0xF;
    v4 >>= 4;
  }
  while (v6);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  if (a1 < 0)
  {
    std::operator+<char>();
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&v8;
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = v9;
  }
  return result;
}

void sub_1D5054050(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1D5054250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if ((*(_BYTE *)(v21 + 23) & 0x80) != 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void sub_1D5054480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if ((*(_BYTE *)(v21 + 23) & 0x80) != 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

double ul2sh@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  BOOL v5;
  double result;
  __int128 v7;
  uint64_t v8;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, (char *)&str_0);
  do
  {
    if ((a1 & 0xF) >= 0xA)
      v4 = (a1 & 0xF) + 87;
    else
      v4 = a1 & 0xF | 0x30;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (const void **)a2, (uint64_t)&v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    v5 = a1 > 0xF;
    a1 >>= 4;
  }
  while (v5);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

void sub_1D5054594(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1D5054790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if ((*(_BYTE *)(v21 + 23) & 0x80) != 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void iv2s(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  int v7;
  size_t v8;
  std::string *v9;
  const void *v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  char v15;
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      if (i)
      {
        v7 = *(char *)(a3 + 23);
        if (v7 >= 0)
          v8 = *(unsigned __int8 *)(a3 + 23);
        else
          v8 = *(_QWORD *)(a3 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v18, v8 + 1);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v18;
        else
          v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
        if (v8)
        {
          if (v7 >= 0)
            v10 = (const void *)a3;
          else
            v10 = *(const void **)a3;
          memmove(v9, v10, v8);
        }
        *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 95;
        short2sh(a1[i], (uint64_t)__p);
        if ((v17 & 0x80u) == 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        if ((v17 & 0x80u) == 0)
          v12 = v17;
        else
          v12 = (std::string::size_type)__p[1];
        v13 = std::string::append(&v18, (const std::string::value_type *)v11, v12);
        v14 = v13->__r_.__value_.__r.__words[0];
        v19[0] = v13->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
        v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (v7 < 0)
          operator delete(*(void **)a3);
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v19[0];
        *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v19 + 7);
        *(_BYTE *)(a3 + 23) = v15;
        if ((char)v17 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
      }
      else
      {
        short2sh(*a1, (uint64_t)&v18);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(std::string *)a3 = v18;
      }
    }
  }
}

void sub_1D505499C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if ((*(_BYTE *)(v21 + 23) & 0x80) != 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

double short2sh@<D0>(unsigned __int16 a1@<W0>, uint64_t a2@<X8>)
{
  char v4;
  unsigned int v5;
  double result;
  __int128 v7;
  uint64_t v8;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, (char *)&str_0);
  do
  {
    if ((a1 & 0xFu) >= 0xA)
      v4 = (a1 & 0xF) + 87;
    else
      v4 = a1 & 0xF | 0x30;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (const void **)a2, (uint64_t)&v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    v5 = a1;
    a1 >>= 4;
  }
  while (v5 > 0xF);
  std::operator+<char>();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

void sub_1D5054AB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

CVPixelBufferRef CRCreateIOSurfacePixelBufferFromPixelBuffer(__CVBuffer *a1)
{
  NSObject *v2;
  const __CFDictionary *v3;
  int Width;
  int Height;
  size_t BytesPerRow;
  void *BaseAddress;
  OSType PixelFormatType;
  void *v9;
  CVPixelBufferRef v10;
  CVPixelBufferRef pixelBuffer;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (CVPixelBufferGetIOSurface(a1))
  {
    CROSLogForCategory(0);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LOWORD(pixelBuffer) = 0;
      _os_log_impl(&dword_1D4FB8000, v2, OS_LOG_TYPE_ERROR, "Avoid calling CRCreateIOSurfacePixelBufferFromPixelBuffer with a pixel buffer that is already backed by an IOSurface!", (uint8_t *)&pixelBuffer, 2u);
    }

  }
  v13 = *MEMORY[0x1E0CA8FF0];
  v14[0] = MEMORY[0x1E0C9AA70];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
  v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  pixelBuffer = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Width, Height, PixelFormatType, v3, &pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  v9 = CVPixelBufferGetBaseAddress(pixelBuffer);
  memcpy(v9, BaseAddress, Height * BytesPerRow);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v10 = pixelBuffer;

  return v10;
}

id CRConvertFloat16BufferToFloat32Buffer(void *a1, void *a2, vImagePixelCount a3, _QWORD *a4)
{
  id result;
  vImage_Buffer v6;
  vImage_Buffer src;

  src.data = a1;
  src.height = 1;
  src.width = a3;
  src.rowBytes = 2 * a3;
  v6.data = a2;
  v6.height = 1;
  v6.width = a3;
  v6.rowBytes = 4 * a3;
  result = (id)vImageConvert_Planar16FtoPlanarF(&src, &v6, 0);
  if (a4)
  {
    if (result)
    {
      +[CRImageReader errorWithErrorCode:](CRImageReader, "errorWithErrorCode:", -8);
      result = (id)objc_claimAutoreleasedReturnValue();
      *a4 = result;
    }
  }
  return result;
}

void CRCropRectangleFromPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CFDictionaryRef DictionaryRepresentation;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  CGRect v14;

  pixelTransferSessionOut = 0;
  VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v14);
  VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED850], DictionaryRepresentation);
  VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, a2);
  VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
  CFRelease(pixelTransferSessionOut);
  CFRelease(DictionaryRepresentation);
}

void sub_1D5055420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5055D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char ***__p,uint64_t a28,uint64_t a29,char **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,char a52)
{
  void *v52;
  void *v53;
  void *v54;

  __p = &a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a30 = &a49;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a49 = &a52;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);

  _Unwind_Resume(a1);
}

CGImageRef createImageFromContour(uint64_t *a1, uint64_t a2)
{
  CGColorSpace *DeviceGray;
  CGContext *v5;
  CGImage *Image;
  unint64_t Width;
  unint64_t Height;
  CGColorSpace *DeviceRGB;
  void *v10;
  CGContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  CGImageRef v29;
  CGRect v31;
  CGRect v32;

  DeviceGray = CGColorSpaceCreateDeviceGray();
  v5 = CGBitmapContextCreate(*(void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 8), 8uLL, *(_QWORD *)(a2 + 24), DeviceGray, 0);
  CGColorSpaceRelease(DeviceGray);
  Image = CGBitmapContextCreateImage(v5);
  CGContextRelease(v5);
  Width = CGImageGetWidth(Image);
  Height = CGImageGetHeight(Image);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v10 = malloc_type_malloc(4 * Width * Height, 0x76F10885uLL);
  v11 = CGBitmapContextCreate(v10, Width, Height, 8uLL, 4 * Width, DeviceRGB, 5u);
  CGColorSpaceRelease(DeviceRGB);
  v31.size.width = (double)Width;
  v31.origin.x = 0.0;
  v31.origin.y = 0.0;
  v31.size.height = (double)Height;
  CGContextDrawImage(v11, v31, Image);
  CGImageRelease(Image);
  CGContextTranslateCTM(v11, 0.0, (double)Height);
  CGContextScaleCTM(v11, 1.0, -1.0);
  v12 = *a1;
  v13 = a1[1] - *a1;
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = v13 / 0x18uLL;
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    do
    {
      if (*(_QWORD *)(v12 + 24 * v14 + 8) - *(_QWORD *)(v12 + 24 * v14) >= 9uLL)
      {
        v17 = (double)rand() / 2147483650.0;
        v18 = (double)rand() / 2147483650.0;
        v19 = (double)rand() / 2147483650.0;
        v20 = v17;
        v21 = v18;
        v22 = v19;
        CGContextSetRGBStrokeColor(v11, v20, v21, v19, 0.0);
        CGContextSetRGBFillColor(v11, v20, v21, v22, 0.0);
        CGContextSetLineWidth(v11, 1.0);
        CGContextBeginPath(v11);
        CGContextMoveToPoint(v11, (double)**(int **)(*a1 + 24 * v14), (double)*(int *)(*(_QWORD *)(*a1 + 24 * v14) + 4));
        CGContextSetRGBStrokeColor(v11, v20, v21, v22, 1.0);
        CGContextSetRGBFillColor(v11, v20, v21, v22, 1.0);
        CGContextSetLineWidth(v11, 1.0);
        v23 = *(_QWORD *)(*a1 + 24 * v14);
        if ((unint64_t)(*(_QWORD *)(*a1 + 24 * v14 + 8) - v23) >= 9)
        {
          v24 = 0;
          v25 = 1;
          do
          {
            CGContextAddLineToPoint(v11, (double)*(int *)(v23 + v24 + 8), (double)*(int *)(v23 + v24 + 12));
            ++v25;
            v23 = *(_QWORD *)(*a1 + 24 * v14);
            v24 += 8;
          }
          while (v25 < (*(_QWORD *)(*a1 + 24 * v14 + 8) - v23) >> 3);
        }
        CGContextStrokePath(v11);
        v12 = *a1;
        v26 = *(_QWORD *)(*a1 + 24 * v14);
        if (*(_QWORD *)(*a1 + 24 * v14 + 8) != v26)
        {
          v27 = 0;
          v28 = 0;
          do
          {
            v32.origin.x = (double)*(int *)(v26 + v27);
            v32.origin.y = (double)*(int *)(v26 + v27 + 4);
            v32.size.width = 3.0;
            v32.size.height = 3.0;
            CGContextFillRect(v11, v32);
            ++v28;
            v12 = *a1;
            v26 = *(_QWORD *)(*a1 + 24 * v14);
            v27 += 8;
          }
          while (v28 < (*(_QWORD *)(*a1 + 24 * v14 + 8) - v26) >> 3);
        }
      }
      ++v14;
    }
    while (v14 != v16);
  }
  v29 = CGBitmapContextCreateImage(v11);
  CGContextRelease(v11);
  free(v10);
  return v29;
}

float64x2_t boxForContour(int32x2_t *a1, int32x2_t *a2)
{
  uint64_t v2;
  int32x2_t v3;
  unint64_t v4;
  unint64_t v5;
  int32x2_t *v6;
  int32x2_t v7;
  int64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int64x2_t v15;

  v2 = (char *)a2 - (char *)a1;
  if (a2 == a1)
  {
    return *(float64x2_t *)MEMORY[0x1E0C9D628];
  }
  else
  {
    v3 = *a1;
    if ((unint64_t)v2 < 9)
    {
      v7 = *a1;
    }
    else
    {
      v4 = v2 >> 3;
      if (v4 <= 2)
        v4 = 2;
      v5 = v4 - 1;
      v6 = a1 + 1;
      v7 = *a1;
      do
      {
        v8.i64[0] = v7.i32[0];
        v8.i64[1] = v7.i32[1];
        v9 = vcvtq_f64_s64(v8);
        v8.i64[0] = v3.i32[0];
        v8.i64[1] = v3.i32[1];
        v10 = vcvtq_f64_s64(v8);
        v11 = (uint64_t)*v6++;
        v8.i64[0] = (int)v11;
        v8.i64[1] = SHIDWORD(v11);
        v12 = vcvtq_f64_s64(v8);
        v13 = vmaxnmq_f64(v10, v12);
        v7 = vmovn_s64(vcvtq_s64_f64(vminnmq_f64(v9, v12)));
        v3 = vmovn_s64(vcvtq_s64_f64(v13));
        --v5;
      }
      while (v5);
    }
    v15.i64[0] = v7.i32[0];
    v15.i64[1] = v7.i32[1];
    return vcvtq_f64_s64(v15);
  }
}

void sub_1D5056358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CHOSLogForCategory(int a1)
{
  if (CHOSLogForCategory_onceToken != -1)
    dispatch_once(&CHOSLogForCategory_onceToken, &__block_literal_global_23);
  return (id)CHOSLogForCategory_logObjects[a1];
}

uint64_t utf16CheckIsWordSeparator(int a1)
{
  _BOOL4 v1;

  v1 = (a1 - 8208) < 6;
  if (a1 == 45)
    v1 = 1;
  return a1 == 32 || v1;
}

uint64_t utf16CheckIsLatin(int a1)
{
  _BOOL4 v1;

  v1 = (a1 & 0xFFFFFFDF) - 65 < 0x1A || (a1 - 248) < 0x158;
  if ((a1 - 192) < 0x17)
    v1 = 1;
  return (a1 - 216) < 0x1F || v1;
}

BOOL utf16CheckIsCyrillic(int a1)
{
  return (a1 - 1024) < 0x130;
}

uint64_t utf16CheckIsCyrillicUkrainianOnly(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if ((a1 - 1108) > 0x3D || ((1 << (a1 - 84)) & 0x300000000000000DLL) == 0)
  {
    v3 = a1 - 1028;
    if (v3 > 3 || v3 == 1)
      return 0;
  }
  return result;
}

BOOL utf16CheckIsGreek(int a1)
{
  return (a1 - 880) < 0x90;
}

uint64_t utf16CheckIsHangul(__int16 a1)
{
  _BOOL4 v1;

  v1 = (unsigned __int16)(a1 - 12592) < 0x60u || (unsigned __int16)(a1 + 10320) < 0x50u;
  return (unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) < 0x2BBu
      || (a1 & 0xFFE0) == 43360
      || (a1 & 0xFF00) == 4352
      || v1;
}

BOOL utf16CheckIsHiragana(int a1)
{
  return (a1 - 12352) < 0x60;
}

BOOL utf16CheckIsKatakana(int a1)
{
  return (a1 - 12448) < 0x60;
}

BOOL utf16CheckIsCJKUnifiedIdiograph(int a1)
{
  return (a1 - 19968) >> 9 < 0x29 || (a1 - 13312) >> 6 < 0x67;
}

uint64_t utf16CheckIsArabic(__int16 a1)
{
  _BOOL4 v1;
  unsigned int v2;

  v1 = (unsigned __int16)(a1 - 1872) < 0x30u || (unsigned __int16)(a1 + 400) < 0x90u;
  v2 = (a1 & 0xFF00) == 0x600 || v1;
  if ((unsigned __int16)(a1 - 2160) < 0x90u)
    v2 = 1;
  if ((unsigned __int16)(a1 + 1200) >= 0x2B0u)
    return v2;
  else
    return 1;
}

BOOL utf16CheckIsArabicDiacritic(int a1)
{
  return (a1 - 1611) < 8;
}

void sub_1D5059554(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 + 704), 8);
  _Unwind_Resume(a1);
}

Class __getFTBipartiteMatcherClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ED0B4670)
  {
    qword_1ED0B4670 = _sl_dlopen();
    if (!qword_1ED0B4670)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("FTBipartiteMatcher");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1D50599AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D5059A44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5059AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5059F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void sub_1D505A57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D505A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D505A934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D505AC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D505AE08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D505AE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D505B128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D505B1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CRLanguageResources;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1D505B448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D505B54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CHNeuralNetwork::SetFragIndeces(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int v5;
  int v6;
  int v7;

  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::__tree<CRCHuint128>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::__tree<CRCHuint128>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v3 = *(int **)a1;
  v4 = *(int **)(a1 + 8);
  while (v3 != v4)
  {
    v5 = *v3++;
    v6 = v5 / (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 84) * *(_DWORD *)(*(_QWORD *)(a1 + 120) + 80));
    std::__tree<int>::__emplace_unique_key_args<int,int>((uint64_t *)(a1 + 48), v6, v6);
    v7 = v5 % (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 84) * *(_DWORD *)(*(_QWORD *)(a1 + 120) + 80));
    std::__tree<int>::__emplace_unique_key_args<int,int>((uint64_t *)(a1 + 72), v7, v7);
  }
}

void CHNeuralNetwork::InitializeFragments(CHNeuralNetwork *this)
{
  unint64_t v2;
  char *v3;
  char **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;

  v3 = (char *)this + 40;
  v2 = *((_QWORD *)this + 5);
  v4 = (char **)((char *)this + 24);
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  if ((unint64_t)v5 >= v2)
  {
    v7 = ((char *)v5 - *v4) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      goto LABEL_258;
    v8 = v2 - (_QWORD)*v4;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 40, v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = 0;
    v6 = v12 + 8;
    v15 = (char *)*((_QWORD *)this + 3);
    v14 = (char *)*((_QWORD *)this + 4);
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = *v4;
    }
    *((_QWORD *)this + 3) = v12;
    *((_QWORD *)this + 4) = v6;
    *((_QWORD *)this + 5) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = 0;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 4) = v6;
  v17 = *((_QWORD *)this + 5);
  if ((unint64_t)v6 >= v17)
  {
    v19 = ((char *)v6 - *v4) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      goto LABEL_258;
    v20 = v17 - (_QWORD)*v4;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v22);
    else
      v23 = 0;
    v24 = &v23[8 * v19];
    v25 = &v23[8 * v22];
    *(_QWORD *)v24 = 0x200000000;
    v18 = v24 + 8;
    v27 = (char *)*((_QWORD *)this + 3);
    v26 = (char *)*((_QWORD *)this + 4);
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      v26 = *v4;
    }
    *((_QWORD *)this + 3) = v24;
    *((_QWORD *)this + 4) = v18;
    *((_QWORD *)this + 5) = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v6 = 0x200000000;
    v18 = v6 + 1;
  }
  *((_QWORD *)this + 4) = v18;
  v29 = *((_QWORD *)this + 5);
  if ((unint64_t)v18 >= v29)
  {
    v31 = ((char *)v18 - *v4) >> 3;
    if ((unint64_t)(v31 + 1) >> 61)
      goto LABEL_258;
    v32 = v29 - (_QWORD)*v4;
    v33 = v32 >> 2;
    if (v32 >> 2 <= (unint64_t)(v31 + 1))
      v33 = v31 + 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v34);
    else
      v35 = 0;
    v36 = &v35[8 * v31];
    v37 = &v35[8 * v34];
    *(_QWORD *)v36 = 2;
    v30 = v36 + 8;
    v39 = (char *)*((_QWORD *)this + 3);
    v38 = (char *)*((_QWORD *)this + 4);
    if (v38 != v39)
    {
      do
      {
        v40 = *((_QWORD *)v38 - 1);
        v38 -= 8;
        *((_QWORD *)v36 - 1) = v40;
        v36 -= 8;
      }
      while (v38 != v39);
      v38 = *v4;
    }
    *((_QWORD *)this + 3) = v36;
    *((_QWORD *)this + 4) = v30;
    *((_QWORD *)this + 5) = v37;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *v18 = 2;
    v30 = v18 + 1;
  }
  *((_QWORD *)this + 4) = v30;
  v41 = *((_QWORD *)this + 5);
  if ((unint64_t)v30 >= v41)
  {
    v43 = ((char *)v30 - *v4) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      goto LABEL_258;
    v44 = v41 - (_QWORD)*v4;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v46);
    else
      v47 = 0;
    v48 = &v47[8 * v43];
    v49 = &v47[8 * v46];
    *(_QWORD *)v48 = 0x200000002;
    v42 = v48 + 8;
    v51 = (char *)*((_QWORD *)this + 3);
    v50 = (char *)*((_QWORD *)this + 4);
    if (v50 != v51)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *((_QWORD *)v48 - 1) = v52;
        v48 -= 8;
      }
      while (v50 != v51);
      v50 = *v4;
    }
    *((_QWORD *)this + 3) = v48;
    *((_QWORD *)this + 4) = v42;
    *((_QWORD *)this + 5) = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v30 = 0x200000002;
    v42 = v30 + 1;
  }
  *((_QWORD *)this + 4) = v42;
  v53 = *((_QWORD *)this + 5);
  if ((unint64_t)v42 >= v53)
  {
    v55 = ((char *)v42 - *v4) >> 3;
    if ((unint64_t)(v55 + 1) >> 61)
      goto LABEL_258;
    v56 = v53 - (_QWORD)*v4;
    v57 = v56 >> 2;
    if (v56 >> 2 <= (unint64_t)(v55 + 1))
      v57 = v55 + 1;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v58 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v58 = v57;
    if (v58)
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v58);
    else
      v59 = 0;
    v60 = &v59[8 * v55];
    v61 = &v59[8 * v58];
    *(_QWORD *)v60 = 0x100000000;
    v54 = v60 + 8;
    v63 = (char *)*((_QWORD *)this + 3);
    v62 = (char *)*((_QWORD *)this + 4);
    if (v62 != v63)
    {
      do
      {
        v64 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *((_QWORD *)v60 - 1) = v64;
        v60 -= 8;
      }
      while (v62 != v63);
      v62 = *v4;
    }
    *((_QWORD *)this + 3) = v60;
    *((_QWORD *)this + 4) = v54;
    *((_QWORD *)this + 5) = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *v42 = 0x100000000;
    v54 = v42 + 1;
  }
  *((_QWORD *)this + 4) = v54;
  v65 = *((_QWORD *)this + 5);
  if ((unint64_t)v54 >= v65)
  {
    v67 = ((char *)v54 - *v4) >> 3;
    if ((unint64_t)(v67 + 1) >> 61)
      goto LABEL_258;
    v68 = v65 - (_QWORD)*v4;
    v69 = v68 >> 2;
    if (v68 >> 2 <= (unint64_t)(v67 + 1))
      v69 = v67 + 1;
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v69;
    if (v70)
      v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v70);
    else
      v71 = 0;
    v72 = &v71[8 * v67];
    v73 = &v71[8 * v70];
    *(_QWORD *)v72 = 0x300000000;
    v66 = v72 + 8;
    v75 = (char *)*((_QWORD *)this + 3);
    v74 = (char *)*((_QWORD *)this + 4);
    if (v74 != v75)
    {
      do
      {
        v76 = *((_QWORD *)v74 - 1);
        v74 -= 8;
        *((_QWORD *)v72 - 1) = v76;
        v72 -= 8;
      }
      while (v74 != v75);
      v74 = *v4;
    }
    *((_QWORD *)this + 3) = v72;
    *((_QWORD *)this + 4) = v66;
    *((_QWORD *)this + 5) = v73;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *v54 = 0x300000000;
    v66 = v54 + 1;
  }
  *((_QWORD *)this + 4) = v66;
  v77 = *((_QWORD *)this + 5);
  if ((unint64_t)v66 >= v77)
  {
    v79 = ((char *)v66 - *v4) >> 3;
    if ((unint64_t)(v79 + 1) >> 61)
      goto LABEL_258;
    v80 = v77 - (_QWORD)*v4;
    v81 = v80 >> 2;
    if (v80 >> 2 <= (unint64_t)(v79 + 1))
      v81 = v79 + 1;
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
      v82 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v82 = v81;
    if (v82)
      v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v82);
    else
      v83 = 0;
    v84 = &v83[8 * v79];
    v85 = &v83[8 * v82];
    *(_QWORD *)v84 = 0x100000002;
    v78 = v84 + 8;
    v87 = (char *)*((_QWORD *)this + 3);
    v86 = (char *)*((_QWORD *)this + 4);
    if (v86 != v87)
    {
      do
      {
        v88 = *((_QWORD *)v86 - 1);
        v86 -= 8;
        *((_QWORD *)v84 - 1) = v88;
        v84 -= 8;
      }
      while (v86 != v87);
      v86 = *v4;
    }
    *((_QWORD *)this + 3) = v84;
    *((_QWORD *)this + 4) = v78;
    *((_QWORD *)this + 5) = v85;
    if (v86)
      operator delete(v86);
  }
  else
  {
    *v66 = 0x100000002;
    v78 = v66 + 1;
  }
  *((_QWORD *)this + 4) = v78;
  v89 = *((_QWORD *)this + 5);
  if ((unint64_t)v78 >= v89)
  {
    v91 = ((char *)v78 - *v4) >> 3;
    if ((unint64_t)(v91 + 1) >> 61)
      goto LABEL_258;
    v92 = v89 - (_QWORD)*v4;
    v93 = v92 >> 2;
    if (v92 >> 2 <= (unint64_t)(v91 + 1))
      v93 = v91 + 1;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
      v94 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v94 = v93;
    if (v94)
      v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v94);
    else
      v95 = 0;
    v96 = &v95[8 * v91];
    v97 = &v95[8 * v94];
    *(_QWORD *)v96 = 0x300000002;
    v90 = v96 + 8;
    v99 = (char *)*((_QWORD *)this + 3);
    v98 = (char *)*((_QWORD *)this + 4);
    if (v98 != v99)
    {
      do
      {
        v100 = *((_QWORD *)v98 - 1);
        v98 -= 8;
        *((_QWORD *)v96 - 1) = v100;
        v96 -= 8;
      }
      while (v98 != v99);
      v98 = *v4;
    }
    *((_QWORD *)this + 3) = v96;
    *((_QWORD *)this + 4) = v90;
    *((_QWORD *)this + 5) = v97;
    if (v98)
      operator delete(v98);
  }
  else
  {
    *v78 = 0x300000002;
    v90 = v78 + 1;
  }
  *((_QWORD *)this + 4) = v90;
  v101 = *((_QWORD *)this + 5);
  if ((unint64_t)v90 >= v101)
  {
    v103 = ((char *)v90 - *v4) >> 3;
    if ((unint64_t)(v103 + 1) >> 61)
      goto LABEL_258;
    v104 = v101 - (_QWORD)*v4;
    v105 = v104 >> 2;
    if (v104 >> 2 <= (unint64_t)(v103 + 1))
      v105 = v103 + 1;
    if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
      v106 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v106 = v105;
    if (v106)
      v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v106);
    else
      v107 = 0;
    v108 = &v107[8 * v103];
    v109 = &v107[8 * v106];
    *(_QWORD *)v108 = 1;
    v102 = v108 + 8;
    v111 = (char *)*((_QWORD *)this + 3);
    v110 = (char *)*((_QWORD *)this + 4);
    if (v110 != v111)
    {
      do
      {
        v112 = *((_QWORD *)v110 - 1);
        v110 -= 8;
        *((_QWORD *)v108 - 1) = v112;
        v108 -= 8;
      }
      while (v110 != v111);
      v110 = *v4;
    }
    *((_QWORD *)this + 3) = v108;
    *((_QWORD *)this + 4) = v102;
    *((_QWORD *)this + 5) = v109;
    if (v110)
      operator delete(v110);
  }
  else
  {
    *v90 = 1;
    v102 = v90 + 1;
  }
  *((_QWORD *)this + 4) = v102;
  v113 = *((_QWORD *)this + 5);
  if ((unint64_t)v102 >= v113)
  {
    v115 = ((char *)v102 - *v4) >> 3;
    if ((unint64_t)(v115 + 1) >> 61)
      goto LABEL_258;
    v116 = v113 - (_QWORD)*v4;
    v117 = v116 >> 2;
    if (v116 >> 2 <= (unint64_t)(v115 + 1))
      v117 = v115 + 1;
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
      v118 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v118 = v117;
    if (v118)
      v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v118);
    else
      v119 = 0;
    v120 = &v119[8 * v115];
    v121 = &v119[8 * v118];
    *(_QWORD *)v120 = 0x200000001;
    v114 = v120 + 8;
    v123 = (char *)*((_QWORD *)this + 3);
    v122 = (char *)*((_QWORD *)this + 4);
    if (v122 != v123)
    {
      do
      {
        v124 = *((_QWORD *)v122 - 1);
        v122 -= 8;
        *((_QWORD *)v120 - 1) = v124;
        v120 -= 8;
      }
      while (v122 != v123);
      v122 = *v4;
    }
    *((_QWORD *)this + 3) = v120;
    *((_QWORD *)this + 4) = v114;
    *((_QWORD *)this + 5) = v121;
    if (v122)
      operator delete(v122);
  }
  else
  {
    *v102 = 0x200000001;
    v114 = v102 + 1;
  }
  *((_QWORD *)this + 4) = v114;
  v125 = *((_QWORD *)this + 5);
  if ((unint64_t)v114 >= v125)
  {
    v127 = ((char *)v114 - *v4) >> 3;
    if ((unint64_t)(v127 + 1) >> 61)
      goto LABEL_258;
    v128 = v125 - (_QWORD)*v4;
    v129 = v128 >> 2;
    if (v128 >> 2 <= (unint64_t)(v127 + 1))
      v129 = v127 + 1;
    if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
      v130 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v130 = v129;
    if (v130)
      v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v130);
    else
      v131 = 0;
    v132 = &v131[8 * v127];
    v133 = &v131[8 * v130];
    *(_QWORD *)v132 = 3;
    v126 = v132 + 8;
    v135 = (char *)*((_QWORD *)this + 3);
    v134 = (char *)*((_QWORD *)this + 4);
    if (v134 != v135)
    {
      do
      {
        v136 = *((_QWORD *)v134 - 1);
        v134 -= 8;
        *((_QWORD *)v132 - 1) = v136;
        v132 -= 8;
      }
      while (v134 != v135);
      v134 = *v4;
    }
    *((_QWORD *)this + 3) = v132;
    *((_QWORD *)this + 4) = v126;
    *((_QWORD *)this + 5) = v133;
    if (v134)
      operator delete(v134);
  }
  else
  {
    *v114 = 3;
    v126 = v114 + 1;
  }
  *((_QWORD *)this + 4) = v126;
  v137 = *((_QWORD *)this + 5);
  if ((unint64_t)v126 >= v137)
  {
    v139 = ((char *)v126 - *v4) >> 3;
    if ((unint64_t)(v139 + 1) >> 61)
      goto LABEL_258;
    v140 = v137 - (_QWORD)*v4;
    v141 = v140 >> 2;
    if (v140 >> 2 <= (unint64_t)(v139 + 1))
      v141 = v139 + 1;
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
      v142 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v142 = v141;
    if (v142)
      v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v142);
    else
      v143 = 0;
    v144 = &v143[8 * v139];
    v145 = &v143[8 * v142];
    *(_QWORD *)v144 = 0x200000003;
    v138 = v144 + 8;
    v147 = (char *)*((_QWORD *)this + 3);
    v146 = (char *)*((_QWORD *)this + 4);
    if (v146 != v147)
    {
      do
      {
        v148 = *((_QWORD *)v146 - 1);
        v146 -= 8;
        *((_QWORD *)v144 - 1) = v148;
        v144 -= 8;
      }
      while (v146 != v147);
      v146 = *v4;
    }
    *((_QWORD *)this + 3) = v144;
    *((_QWORD *)this + 4) = v138;
    *((_QWORD *)this + 5) = v145;
    if (v146)
      operator delete(v146);
  }
  else
  {
    *v126 = 0x200000003;
    v138 = v126 + 1;
  }
  *((_QWORD *)this + 4) = v138;
  v149 = *((_QWORD *)this + 5);
  if ((unint64_t)v138 >= v149)
  {
    v151 = ((char *)v138 - *v4) >> 3;
    if ((unint64_t)(v151 + 1) >> 61)
      goto LABEL_258;
    v152 = v149 - (_QWORD)*v4;
    v153 = v152 >> 2;
    if (v152 >> 2 <= (unint64_t)(v151 + 1))
      v153 = v151 + 1;
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
      v154 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v154 = v153;
    if (v154)
      v155 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v154);
    else
      v155 = 0;
    v156 = &v155[8 * v151];
    v157 = &v155[8 * v154];
    *(_QWORD *)v156 = 0x100000001;
    v150 = v156 + 8;
    v159 = (char *)*((_QWORD *)this + 3);
    v158 = (char *)*((_QWORD *)this + 4);
    if (v158 != v159)
    {
      do
      {
        v160 = *((_QWORD *)v158 - 1);
        v158 -= 8;
        *((_QWORD *)v156 - 1) = v160;
        v156 -= 8;
      }
      while (v158 != v159);
      v158 = *v4;
    }
    *((_QWORD *)this + 3) = v156;
    *((_QWORD *)this + 4) = v150;
    *((_QWORD *)this + 5) = v157;
    if (v158)
      operator delete(v158);
  }
  else
  {
    *v138 = 0x100000001;
    v150 = v138 + 1;
  }
  *((_QWORD *)this + 4) = v150;
  v161 = *((_QWORD *)this + 5);
  if ((unint64_t)v150 >= v161)
  {
    v163 = ((char *)v150 - *v4) >> 3;
    if ((unint64_t)(v163 + 1) >> 61)
      goto LABEL_258;
    v164 = v161 - (_QWORD)*v4;
    v165 = v164 >> 2;
    if (v164 >> 2 <= (unint64_t)(v163 + 1))
      v165 = v163 + 1;
    if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8)
      v166 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v166 = v165;
    if (v166)
      v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v166);
    else
      v167 = 0;
    v168 = &v167[8 * v163];
    v169 = &v167[8 * v166];
    *(_QWORD *)v168 = 0x300000001;
    v162 = v168 + 8;
    v171 = (char *)*((_QWORD *)this + 3);
    v170 = (char *)*((_QWORD *)this + 4);
    if (v170 != v171)
    {
      do
      {
        v172 = *((_QWORD *)v170 - 1);
        v170 -= 8;
        *((_QWORD *)v168 - 1) = v172;
        v168 -= 8;
      }
      while (v170 != v171);
      v170 = *v4;
    }
    *((_QWORD *)this + 3) = v168;
    *((_QWORD *)this + 4) = v162;
    *((_QWORD *)this + 5) = v169;
    if (v170)
      operator delete(v170);
  }
  else
  {
    *v150 = 0x300000001;
    v162 = v150 + 1;
  }
  *((_QWORD *)this + 4) = v162;
  v173 = *((_QWORD *)this + 5);
  if ((unint64_t)v162 >= v173)
  {
    v175 = ((char *)v162 - *v4) >> 3;
    if ((unint64_t)(v175 + 1) >> 61)
      goto LABEL_258;
    v176 = v173 - (_QWORD)*v4;
    v177 = v176 >> 2;
    if (v176 >> 2 <= (unint64_t)(v175 + 1))
      v177 = v175 + 1;
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
      v178 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v178 = v177;
    if (v178)
      v179 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v178);
    else
      v179 = 0;
    v180 = &v179[8 * v175];
    v181 = &v179[8 * v178];
    *(_QWORD *)v180 = 0x100000003;
    v174 = v180 + 8;
    v183 = (char *)*((_QWORD *)this + 3);
    v182 = (char *)*((_QWORD *)this + 4);
    if (v182 != v183)
    {
      do
      {
        v184 = *((_QWORD *)v182 - 1);
        v182 -= 8;
        *((_QWORD *)v180 - 1) = v184;
        v180 -= 8;
      }
      while (v182 != v183);
      v182 = *v4;
    }
    *((_QWORD *)this + 3) = v180;
    *((_QWORD *)this + 4) = v174;
    *((_QWORD *)this + 5) = v181;
    if (v182)
      operator delete(v182);
  }
  else
  {
    *v162 = 0x100000003;
    v174 = v162 + 1;
  }
  *((_QWORD *)this + 4) = v174;
  v185 = *((_QWORD *)this + 5);
  if ((unint64_t)v174 < v185)
  {
    *v174 = 0x300000003;
    v186 = v174 + 1;
    goto LABEL_257;
  }
  v187 = ((char *)v174 - *v4) >> 3;
  if ((unint64_t)(v187 + 1) >> 61)
LABEL_258:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v188 = v185 - (_QWORD)*v4;
  v189 = v188 >> 2;
  if (v188 >> 2 <= (unint64_t)(v187 + 1))
    v189 = v187 + 1;
  if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8)
    v190 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v190 = v189;
  if (v190)
    v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v3, v190);
  else
    v191 = 0;
  v192 = &v191[8 * v187];
  v193 = &v191[8 * v190];
  *(_QWORD *)v192 = 0x300000003;
  v186 = v192 + 8;
  v195 = (char *)*((_QWORD *)this + 3);
  v194 = (char *)*((_QWORD *)this + 4);
  if (v194 != v195)
  {
    do
    {
      v196 = *((_QWORD *)v194 - 1);
      v194 -= 8;
      *((_QWORD *)v192 - 1) = v196;
      v192 -= 8;
    }
    while (v194 != v195);
    v194 = *v4;
  }
  *((_QWORD *)this + 3) = v192;
  *((_QWORD *)this + 4) = v186;
  *((_QWORD *)this + 5) = v193;
  if (v194)
    operator delete(v194);
LABEL_257:
  *((_QWORD *)this + 4) = v186;
}

uint64_t CHNeuralNetwork::WriteBinaryModelToFile(int *a1, char *__filename)
{
  const char *v2;
  FILE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t __ptr;

  v2 = __filename;
  if (__filename[23] < 0)
    v2 = *(const char **)__filename;
  v4 = fopen(v2, "w");
  fwrite(&BINARY_FILE_VERSION_MAJOR, 4uLL, 1uLL, v4);
  fwrite(&BINARY_FILE_VERSION_MINOR, 4uLL, 1uLL, v4);
  fwrite(&BINARY_FILE_VERSION_REVISON, 4uLL, 1uLL, v4);
  fwrite(a1 + 32, 4uLL, 1uLL, v4);
  fwrite(*((const void **)a1 + 21), 4uLL, a1[32], v4);
  fwrite(a1 + 25, 4uLL, 1uLL, v4);
  fwrite(a1 + 26, 4uLL, 1uLL, v4);
  fwrite(a1 + 28, 4uLL, 1uLL, v4);
  __ptr = 0;
  if (a1[28] >= 1)
  {
    v5 = 0;
    do
    {
      HIDWORD(__ptr) = *(_DWORD *)(*((_QWORD *)a1 + 15) + 56 * v5);
      fwrite((char *)&__ptr + 4, 4uLL, 1uLL, v4);
      LODWORD(__ptr) = *(_DWORD *)(*((_QWORD *)a1 + 15) + 56 * v5 + 4);
      fwrite(&__ptr, 4uLL, 1uLL, v4);
      fwrite((const void *)(*((_QWORD *)a1 + 15) + 56 * v5 + 8), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((_QWORD *)a1 + 15) + 56 * v5 + 12), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((_QWORD *)a1 + 15) + 56 * v5 + 16), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((_QWORD *)a1 + 15) + 56 * v5 + 20), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((_QWORD *)a1 + 15) + 56 * v5 + 24), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((_QWORD *)a1 + 15) + 56 * v5 + 28), 4uLL, 1uLL, v4);
      fwrite((const void *)(*((_QWORD *)a1 + 15) + 56 * v5 + 48), 4uLL, 1uLL, v4);
      if (SHIDWORD(__ptr) >= 1)
      {
        v6 = 0;
        do
          Matrix<short>::writeMatrix(*(const void ***)(*(_QWORD *)(*((_QWORD *)a1 + 15) + 56 * v5 + 32) + 8 * v6++), v4);
        while (v6 < SHIDWORD(__ptr));
      }
      fwrite(*(const void **)(*((_QWORD *)a1 + 15) + 56 * v5++ + 40), 4uLL, (int)__ptr, v4);
    }
    while (v5 < a1[28]);
  }
  Matrix<short>::writeMatrixStrided(*((_QWORD **)a1 + 17), v4);
  fwrite(a1 + 33, 4uLL, 1uLL, v4);
  fwrite(*((const void **)a1 + 18), 2uLL, a1[33], v4);
  Matrix<short>::writeMatrixStrided(*((_QWORD **)a1 + 19), v4);
  Matrix<short>::writeMatrix(*((const void ***)a1 + 19), v4);
  fwrite(a1 + 32, 4uLL, 1uLL, v4);
  fwrite(*((const void **)a1 + 20), 2uLL, a1[32], v4);
  return fclose(v4);
}

size_t Matrix<short>::writeMatrix(const void **a1, FILE *__stream)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int i;
  char v8;
  unsigned int __ptr;

  fwrite(a1 + 17, 4uLL, 1uLL, __stream);
  fwrite((char *)a1 + 140, 4uLL, 1uLL, __stream);
  v4 = MEMORY[0x1D826E6A8](__stream);
  LODWORD(v5) = (v4 + 4) & 0x7F;
  if (v4 + 4 <= 0)
    v5 = -(-(v4 + 4) & 0x7F);
  __ptr = 128 - v5;
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  if (__ptr)
  {
    for (i = 0; i < __ptr; ++i)
    {
      v8 = 0;
      fwrite(&v8, 1uLL, 1uLL, __stream);
    }
  }
  return fwrite(a1[16], 2uLL, (*((_DWORD *)a1 + 35) * *((_DWORD *)a1 + 34)), __stream);
}

size_t Matrix<short>::writeMatrixStrided(_QWORD *a1, FILE *__stream)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  size_t result;
  unsigned int i;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  char v23;
  unsigned int __ptr;

  v4 = (unsigned int *)(a1 + 17);
  fwrite(a1 + 17, 4uLL, 1uLL, __stream);
  v5 = (unsigned int *)a1 + 35;
  fwrite((char *)a1 + 140, 4uLL, 1uLL, __stream);
  v6 = MEMORY[0x1D826E6A8](__stream);
  LODWORD(v7) = (v6 + 4) & 0x7F;
  if (v6 + 4 <= 0)
    v7 = -(-(v6 + 4) & 0x7F);
  __ptr = 128 - v7;
  result = fwrite(&__ptr, 4uLL, 1uLL, __stream);
  if (__ptr)
  {
    for (i = 0; i < __ptr; ++i)
    {
      v23 = 0;
      result = fwrite(&v23, 1uLL, 1uLL, __stream);
    }
  }
  v10 = *v5;
  v11 = *v4;
  if (*v5 >= 4)
  {
    v12 = 0;
    v13 = 4;
    v14 = 3;
    v15 = 2;
    v16 = 1;
    v17 = v11;
    do
    {
      if (v17)
      {
        v18 = 0;
        v11 = v17;
        do
        {
          fwrite((const void *)(a1[16] + 2 * (v18 + v12 * v11)), 2uLL, 1uLL, __stream);
          fwrite((const void *)(a1[16] + 2 * (v18 + v16 * *((_DWORD *)a1 + 34))), 2uLL, 1uLL, __stream);
          fwrite((const void *)(a1[16] + 2 * (v18 + v15 * *((_DWORD *)a1 + 34))), 2uLL, 1uLL, __stream);
          result = fwrite((const void *)(a1[16] + 2 * (v18 + v14 * *((_DWORD *)a1 + 34))), 2uLL, 1uLL, __stream);
          ++v18;
          v11 = *((_DWORD *)a1 + 34);
        }
        while (v18 < v11);
        v10 = *v5;
        v17 = *((_DWORD *)a1 + 34);
      }
      v19 = v13 | 3;
      v13 += 4;
      v14 += 4;
      v15 += 4;
      v16 += 4;
      v12 += 4;
    }
    while (v19 < v10);
  }
  if (v11)
  {
    v20 = 0;
    while (1)
    {
      v21 = *v5;
      v22 = *v5 & 3;
      if (v22 == 1)
        goto LABEL_20;
      if (v22 == 2)
        goto LABEL_19;
      if (v22 == 3)
        break;
LABEL_21:
      if (++v20 >= v11)
        return result;
    }
    fwrite((const void *)(a1[16] + 2 * (v20 + (v21 - 3) * v11)), 2uLL, 1uLL, __stream);
    v11 = *((_DWORD *)a1 + 34);
    v21 = *((_DWORD *)a1 + 35);
LABEL_19:
    fwrite((const void *)(a1[16] + 2 * (v20 + (v21 - 2) * v11)), 2uLL, 1uLL, __stream);
    v11 = *((_DWORD *)a1 + 34);
    v21 = *((_DWORD *)a1 + 35);
LABEL_20:
    result = fwrite((const void *)(a1[16] + 2 * (v20 + (v21 - 1) * v11)), 2uLL, 1uLL, __stream);
    v11 = *((_DWORD *)a1 + 34);
    goto LABEL_21;
  }
  return result;
}

uint64_t CHNeuralNetwork::InitializeFromBinaryFile(int *a1, const char *a2)
{
  const char *v2;
  const char *v4;
  FILE *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  int v22;
  int v23;
  _DWORD __ptr[3];
  uint64_t v25;

  v2 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (a2[23] < 0)
    v4 = *(const char **)a2;
  v5 = fopen(v4, "r");
  *((_BYTE *)a1 + 96) = 0;
  fread(__ptr, 4uLL, 3uLL, v5);
  if (__ptr[0] > 2u || __ptr[1] >= 4u)
  {
    if (v2[23] < 0)
      v2 = *(const char **)v2;
    printf("Unsupported Model Version %s", v2);
  }
  else
  {
    fread(a1 + 32, 4uLL, 1uLL, v5);
    v7 = malloc_type_malloc(4 * a1[32], 0x100004052888210uLL);
    *((_QWORD *)a1 + 21) = v7;
    fread(v7, 4uLL, a1[32], v5);
    fread(a1 + 25, 4uLL, 1uLL, v5);
    fread(a1 + 26, 4uLL, 1uLL, v5);
    fread(a1 + 28, 4uLL, 1uLL, v5);
    is_mul_ok(a1[28], 0x38uLL);
    *((_QWORD *)a1 + 15) = operator new[]();
    v22 = 0;
    v23 = 0;
    if (a1[28] >= 1)
    {
      v8 = 0;
      do
      {
        fread(&v23, 4uLL, 1uLL, v5);
        fread(&v22, 4uLL, 1uLL, v5);
        v9 = 56 * v8;
        fread((void *)(*((_QWORD *)a1 + 15) + 56 * v8 + 8), 4uLL, 1uLL, v5);
        fread((void *)(*((_QWORD *)a1 + 15) + 56 * v8 + 12), 4uLL, 1uLL, v5);
        fread((void *)(*((_QWORD *)a1 + 15) + 56 * v8 + 16), 4uLL, 1uLL, v5);
        fread((void *)(*((_QWORD *)a1 + 15) + 56 * v8 + 20), 4uLL, 1uLL, v5);
        fread((void *)(*((_QWORD *)a1 + 15) + 56 * v8 + 24), 4uLL, 1uLL, v5);
        fread((void *)(*((_QWORD *)a1 + 15) + 56 * v8 + 28), 4uLL, 1uLL, v5);
        fread((void *)(*((_QWORD *)a1 + 15) + 56 * v8 + 48), 4uLL, 1uLL, v5);
        v10 = v22;
        v11 = v23;
        v12 = (int *)(*((_QWORD *)a1 + 15) + 56 * v8);
        *v12 = v23;
        v12[1] = v10;
        *(_QWORD *)(*((_QWORD *)a1 + 15) + 56 * v8 + 32) = operator new[]();
        if (v11 >= 1)
        {
          v13 = 0;
          v14 = 8 * v11;
          do
          {
            v15 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
            *v15 = &off_1E98D8D48;
            v15[16] = 0;
            v15[17] = 0;
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 15) + v9 + 32) + v13) = v15;
            Matrix<short>::readMatrix(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)a1 + 15) + v9 + 32) + v13), v5);
            v13 += 8;
          }
          while (v14 != v13);
        }
        v16 = (void *)operator new[]();
        *(_QWORD *)(*((_QWORD *)a1 + 15) + 56 * v8 + 40) = v16;
        fread(v16, 4uLL, v10, v5);
        ++v8;
      }
      while (v8 < a1[28]);
    }
    v17 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
    *v17 = &off_1E98D8D48;
    v17[16] = 0;
    v17[17] = 0;
    *((_QWORD *)a1 + 17) = v17;
    Matrix<short>::readMatrix(v17, v5);
    fread(a1 + 33, 4uLL, 1uLL, v5);
    v18 = (void *)operator new[]();
    *((_QWORD *)a1 + 18) = v18;
    fread(v18, 2uLL, a1[33], v5);
    v19 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
    *v19 = &off_1E98D8D48;
    v19[16] = 0;
    v19[17] = 0;
    *((_QWORD *)a1 + 19) = v19;
    Matrix<short>::readMatrix(v19, v5);
    fread(a1 + 32, 4uLL, 1uLL, v5);
    v20 = (void *)operator new[]();
    *((_QWORD *)a1 + 20) = v20;
    fread(v20, 2uLL, a1[32], v5);
  }
  return fclose(v5);
}

size_t Matrix<short>::readMatrix(_QWORD *a1, FILE *__stream)
{
  int i;
  void *v5;
  char v7;
  int __ptr;

  fread(a1 + 17, 4uLL, 1uLL, __stream);
  fread((char *)a1 + 140, 4uLL, 1uLL, __stream);
  __ptr = 0;
  fread(&__ptr, 4uLL, 1uLL, __stream);
  for (i = __ptr; i; --i)
  {
    v7 = 0;
    fread(&v7, 1uLL, 1uLL, __stream);
  }
  v5 = (void *)operator new[]();
  a1[16] = v5;
  return fread(v5, 2uLL, (*((_DWORD *)a1 + 35) * *((_DWORD *)a1 + 34)), __stream);
}

void CHNeuralNetwork::CNNUnloadBinaryModel(CHNeuralNetwork *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*((int *)this + 28) >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)this + 15);
    do
    {
      if (*(int *)(v3 + 56 * v2) >= 1)
      {
        v4 = 0;
        do
        {
          v5 = *(_QWORD *)(v3 + 56 * v2 + 32);
          v6 = *(_QWORD *)(v5 + 8 * v4);
          if (v6)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
            v5 = *(_QWORD *)(*((_QWORD *)this + 15) + 56 * v2 + 32);
          }
          *(_QWORD *)(v5 + 8 * v4++) = 0;
          v3 = *((_QWORD *)this + 15);
        }
        while (v4 < *(int *)(v3 + 56 * v2));
      }
      v7 = *(_QWORD *)(v3 + 56 * v2 + 32);
      if (v7)
      {
        MEMORY[0x1D826E270](v7, 0x20C8093837F09);
        v3 = *((_QWORD *)this + 15);
      }
      v8 = *(_QWORD *)(v3 + 56 * v2 + 40);
      if (v8)
      {
        MEMORY[0x1D826E270](v8, 0x1000C8052888210);
        v3 = *((_QWORD *)this + 15);
      }
      *(_QWORD *)(v3 + 56 * v2++ + 32) = 0;
    }
    while (v2 < *((int *)this + 28));
  }
  if (!*((_BYTE *)this + 96))
  {
    v9 = *((_QWORD *)this + 18);
    if (v9)
      MEMORY[0x1D826E294](v9, 0x1000C40BDFB0063);
    v10 = *((_QWORD *)this + 20);
    if (v10)
      MEMORY[0x1D826E294](v10, 0x1000C40BDFB0063);
  }
  v11 = *((_QWORD *)this + 17);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 19);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  free(*((void **)this + 21));
}

uint64_t CHNeuralNetwork::FeedForward@<X0>(uint64_t this@<X0>, float *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t (**a38)(),uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  size_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t *v69;
  int v70;
  int v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  size_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t *v99;
  _DWORD *v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _DWORD *v112;
  int *v113;
  int *v114;
  int v115;
  int v116;
  int v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  char *v130;
  char *v131;
  uint64_t v132;
  int v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  int v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  __int16 *v166;
  uint64_t v167;
  BOOL v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  _DWORD *v186;
  float v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  float v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  float v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  float v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  int *v229;
  uint64_t v230;
  _DWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  float v235;
  float v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  const __int16 *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  _QWORD *v248;
  _DWORD *v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  __int16 *v256;
  unsigned int v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  __int16 *v262;
  int *v263;
  _WORD *v264;
  int v265;
  int v266;
  int *v267;
  uint64_t v268;
  __int16 *v269;
  int *v270;
  uint64_t v271;
  int v272;
  void *v273;
  float *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  float v278;
  float *v279;
  uint64_t v280;
  float v281;
  float v282;
  float *v283;
  uint64_t v284;
  float v285;
  float *v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  _DWORD *v291;
  _DWORD **v292;
  unint64_t v293;
  _QWORD *v294;
  _DWORD *v295;
  _DWORD *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  int v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  __n128 *v307;
  __n128 **v308;
  __n128 *v309;
  __n128 *v310;
  __n128 *v311;
  __n128 *v312;
  __n128 *v313;
  uint64_t v314;
  __n128 *v315;
  void *v316;
  void *v317;
  void **v318;
  uint64_t *v319;
  __n128 *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t *vars0;
  uint64_t vars8;
  uint64_t v343;
  int v344;
  int v345;
  int v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  int *v351;
  uint64_t *v352;
  int v353;
  _QWORD *v354;
  int *v355;
  uint64_t *v356;
  int *v357;
  int v359;
  int v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t *v367;
  int v368;
  uint64_t *v369;
  uint64_t v370;
  _QWORD *v371;
  int v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  int *v377;
  uint64_t v378;
  _DWORD *v379;
  _DWORD *v380;
  int v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t *v384;
  void *v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  int v393;
  float *v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;

  STACK[0x5F8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 100) > a3 || (v54 = this, *(_DWORD *)(this + 104) > (int)a4))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return this;
  }
  vars8 = a4;
  v349 = operator new[]();
  LODWORD(v56) = *(_DWORD *)(v54 + 112);
  v390 = v54;
  if ((int)v56 >= 1)
  {
    v57 = 0;
    do
    {
      if (v57)
        v58 = *(_DWORD *)(v349 + (v57 << 6) - 48);
      else
        v58 = 1;
      v59 = *(_QWORD *)(v54 + 120) + 56 * v57;
      v61 = *(_DWORD *)(v59 + 4);
      v60 = (_DWORD *)(v59 + 4);
      v63 = v60[5];
      v62 = v60[6];
      v64 = v61 * (uint64_t)v58;
      if ((int)v64 < 0)
        v65 = -1;
      else
        v65 = (v64 << 8) | 0x80;
      v66 = operator new(v65, (std::align_val_t)0x80uLL);
      *v66 = 256;
      v66[1] = v64;
      v67 = v66 + 16;
      if ((_DWORD)v64)
      {
        v68 = v66 + 16;
        do
        {
          *v68 = &off_1E98D8CF0;
          v68[16] = 0;
          v68[17] = 0;
          v68 += 32;
        }
        while (v68 != &v67[32 * v64]);
      }
      v69 = (uint64_t *)(v349 + (v57 << 6));
      v69[3] = (uint64_t)v67;
      v70 = v63 * v58 * v62;
      v71 = *v60 * v70;
      if (v71 < 0)
        v72 = -1;
      else
        v72 = ((uint64_t)v71 << 8) | 0x80;
      v73 = operator new(v72, (std::align_val_t)0x80uLL);
      *v73 = 256;
      v73[1] = v71;
      v74 = v73 + 16;
      if (v71)
      {
        v75 = v73 + 16;
        do
        {
          *v75 = &off_1E98D8CF0;
          v75[16] = 0;
          v75[17] = 0;
          v75 += 32;
        }
        while (v75 != &v74[32 * (uint64_t)v71]);
      }
      v69[5] = (uint64_t)v74;
      v76 = *v60 * v70;
      if (v76 < 0)
        v77 = -1;
      else
        v77 = ((uint64_t)v76 << 8) | 0x80;
      v78 = operator new(v77, (std::align_val_t)0x80uLL);
      *v78 = 256;
      v78[1] = v76;
      v79 = v78 + 16;
      if (v76)
      {
        v80 = v78 + 16;
        do
        {
          *v80 = &off_1E98D8D48;
          v80[16] = 0;
          v80[17] = 0;
          v80 += 32;
        }
        while (v80 != &v79[32 * (uint64_t)v76]);
      }
      v81 = v349 + (v57 << 6);
      *(_QWORD *)(v81 + 56) = v79;
      *v69 = operator new[]();
      *(_QWORD *)(v81 + 8) = operator new[]();
      *(_DWORD *)(v81 + 16) = v70;
      ++v57;
      v54 = v390;
      v56 = *(int *)(v390 + 112);
    }
    while (v57 < v56);
  }
  v82 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *v82 = &off_1E98D8CF0;
  v82[16] = 0;
  v82[17] = 0;
  v338 = v82;
  v83 = operator new(0x100uLL, (std::align_val_t)0x80uLL);
  *v83 = &off_1E98D8CF0;
  v83[16] = 0;
  v83[17] = 0;
  v337 = v83;
  if ((int)v56 <= 0)
  {
    v117 = a3 + 1;
    v116 = vars8;
  }
  else
  {
    v84 = 0;
    v344 = a3 + 1;
    v85 = vars8 + 1;
    do
    {
      if (v84)
      {
        v86 = v349 + ((v84 - 1) << 6);
        v87 = *(unsigned int *)(v86 + 16);
        if ((int)v87 >= 1)
        {
          v88 = 0;
          v89 = *(_QWORD *)(v390 + 120);
          v90 = v89 + 56 * v84;
          v92 = *(_DWORD *)(v90 + 24);
          v91 = (_DWORD *)(v90 + 24);
          v93 = v91 + 1;
          v94 = v91[1] * v92;
          v95 = *(_QWORD *)v86;
          v96 = *(_QWORD *)(v86 + 8);
          v97 = v89 + 56 * v84;
          v98 = (_DWORD *)(v97 + 16);
          v99 = (uint64_t *)(v349 + (v84 << 6));
          v100 = (_DWORD *)(v97 + 20);
          do
          {
            if (v94 >= 1)
            {
              v101 = *(_DWORD *)(v95 + 4 * v88);
              v102 = *(_DWORD *)(v96 + 4 * v88);
              v103 = v101 + 1;
              v104 = *v99;
              v105 = v88 * v94;
              v106 = v102 + 1;
              v107 = v99[1];
              v108 = v105 + 1;
              v109 = v105 + 2;
              v110 = v105 + 3;
              v111 = v94;
              do
              {
                *(_DWORD *)(v104 + 4 * v105) = (v103 - *v98) / *v91;
                *(_DWORD *)(v107 + 4 * v105) = (v106 - *v100) / *v93;
                *(_DWORD *)(v104 + 4 * v108) = (v101 - *v98) / *v91;
                *(_DWORD *)(v107 + 4 * v108) = (v106 - *v100) / *v93;
                *(_DWORD *)(v104 + 4 * v109) = (v103 - *v98) / *v91;
                *(_DWORD *)(v107 + 4 * v109) = (v102 - *v100) / *v93;
                *(_DWORD *)(v104 + 4 * v110) = (v101 - *v98) / *v91;
                *(_DWORD *)(v107 + 4 * v110) = (v102 - *v100) / *v93;
                --v111;
              }
              while (v111);
            }
            ++v88;
          }
          while (v88 != v87);
        }
      }
      else
      {
        v112 = *(_DWORD **)(v54 + 120);
        v113 = *(int **)v349;
        *v113 = (v344 - v112[4]) / v112[6];
        v114 = *(int **)(v349 + 8);
        *v114 = (v85 - v112[5]) / v112[7];
        v113[1] = (a3 - v112[4]) / v112[6];
        v114[1] = (v85 - v112[5]) / v112[7];
        v113[2] = (v344 - v112[4]) / v112[6];
        v115 = vars8;
        v114[2] = ((int)vars8 - v112[5]) / v112[7];
        v113[3] = (a3 - v112[4]) / v112[6];
        v114[3] = (v115 - v112[5]) / v112[7];
      }
      ++v84;
      v54 = v390;
    }
    while (v84 < *(int *)(v390 + 112));
    v116 = vars8;
    v117 = a3 + 1;
  }
  v118 = v116 - (uint64_t)*(int *)(v54 + 104) + 1;
  v345 = v117;
  *(_DWORD *)(v54 + 108) = v118 * (v117 - *(_DWORD *)(v54 + 100));
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  std::vector<std::vector<std::vector<float>>>::resize(a5, v118);
  v119 = v345;
  if (*(_DWORD *)(v54 + 104) <= v116)
  {
    v120 = 0;
    v121 = -1;
    do
    {
      std::vector<std::vector<float>>::resize((uint64_t *)(*a5 + v120), v119 - *(_DWORD *)(v54 + 100));
      ++v121;
      v120 += 24;
      v119 = v345;
    }
    while (v121 < (int)vars8 - (uint64_t)*(int *)(v54 + 104));
  }
  v122 = operator new[]();
  v343 = v122;
  if ((int)vars8 >= 1)
  {
    v124 = 0;
    v125 = 0;
    v126 = vars8;
    do
    {
      if (a3 >= 1)
      {
        v123.n128_f32[0] = (float)(1 << *(_DWORD *)(*(_QWORD *)(v54 + 120) + 48));
        v127 = v124;
        v128 = a3;
        do
        {
          *(_WORD *)(v122 + 2 * v127) = (int)(float)(a2[v127] * v123.n128_f32[0]);
          ++v127;
          --v128;
        }
        while (v128);
      }
      ++v125;
      v124 += a3;
    }
    while (v125 != v126);
  }
  v129 = *(_DWORD *)(v54 + 112);
  v130 = " with nil CVPixelBufferRef";
  v131 = " with nil CVPixelBufferRef";
  if (v129 > 0)
  {
    v132 = 0;
    v371 = (_QWORD *)(v54 + 56);
    v375 = (_QWORD *)(v54 + 80);
    HIDWORD(v339) = vars8 + 1;
    while (1)
    {
      v133 = v132 ? *(_DWORD *)(v349 + (v132 << 6) - 48) : 1;
      v353 = v133;
      v134 = *(_DWORD **)(v54 + 120);
      if ((int)v134[14 * v132 + 1] > 0)
        break;
      ++v132;
LABEL_151:
      if (v132 >= v129)
        goto LABEL_154;
    }
    v135 = 0;
    v350 = v132 - 1;
    v136 = (uint64_t *)(v349 + ((v132 - 1) << 6));
    v340 = v136 + 1;
    vars0 = v136;
    v137 = v349 + (v132 << 6);
    v351 = (int *)(v137 + 16);
    v352 = (uint64_t *)(v137 + 24);
    v367 = (uint64_t *)(v137 + 8);
    v369 = (uint64_t *)(v137 + 40);
    v356 = (uint64_t *)v137;
    v386 = (_QWORD *)(v137 + 56);
    v347 = 0;
    v348 = v136 + 7;
    v376 = v132 + 1;
    v398 = v132;
    while (1)
    {
      v378 = v135;
      if (v132)
      {
        v138 = *(_QWORD **)(v54 + 48);
        if (v138 != v371)
        {
          v391 = *v340;
          v387 = *vars0;
          v382 = *v352;
          do
          {
            v139 = *((int *)v138 + 7);
            Matrix<int>::Initialize(v382 + ((uint64_t)((int)v139 + v353 * (int)v378) << 8), *(_DWORD *)(v391 + 4 * v139) - *(_DWORD *)(*(_QWORD *)(v54 + 120) + 56 * v398 + 20) + 1, *(_DWORD *)(v387 + 4 * v139) - *(_DWORD *)(*(_QWORD *)(v54 + 120) + 56 * v398 + 16) + 1);
            v140 = *(_QWORD **)(v54 + 72);
            if (v140 != v375)
            {
              v141 = v139 * v353;
              v142 = *v369;
              v143 = *v367;
              v144 = *v356;
              v145 = *v351 * v378;
              do
              {
                v146 = *((_DWORD *)v140 + 7) + v141;
                v147 = v145 + v146;
                Matrix<int>::Initialize(v142 + (v147 << 8), *(_DWORD *)(v143 + 4 * v146), *(_DWORD *)(v144 + 4 * v146));
                Matrix<short>::Initialize(*v386 + (v147 << 8), *(_DWORD *)(v143 + 4 * v146), *(_DWORD *)(v144 + 4 * v146));
                v148 = (_QWORD *)v140[1];
                if (v148)
                {
                  do
                  {
                    v149 = v148;
                    v148 = (_QWORD *)*v148;
                  }
                  while (v148);
                }
                else
                {
                  do
                  {
                    v149 = (_QWORD *)v140[2];
                    v168 = *v149 == (_QWORD)v140;
                    v140 = v149;
                  }
                  while (!v168);
                }
                v140 = v149;
              }
              while (v149 != v375);
            }
            v150 = (_QWORD *)v138[1];
            if (v150)
            {
              do
              {
                v151 = v150;
                v150 = (_QWORD *)*v150;
              }
              while (v150);
            }
            else
            {
              do
              {
                v151 = (_QWORD *)v138[2];
                v168 = *v151 == (_QWORD)v138;
                v138 = v151;
              }
              while (!v168);
            }
            v138 = v151;
            v54 = v390;
            v130 = "Attempting to initialize CRImage_PixelBuffer with nil CVPixelBufferRef" + 44;
            v131 = "Attempting to initialize CRImage_PixelBuffer with nil CVPixelBufferRef" + 44;
          }
          while (v151 != v371);
          v134 = *(_DWORD **)(v390 + 120);
        }
        if ((int)v134[14 * v350 + 1] >= 1)
        {
          v152 = 0;
          v153 = v347;
          do
          {
            v154 = *(_QWORD **)(v54 + 48);
            if (v154 != v371)
            {
              v155 = *v348;
              v156 = *v352;
              do
              {
                v157 = *((int *)v154 + 7);
                v158 = *(_QWORD *)(v54 + 120) + 56 * v398;
                v159 = *(_QWORD *)(*(_QWORD *)(v158 + 32) + 8 * v153);
                v160 = *(_DWORD *)(v159 + 136);
                v161 = *(_DWORD *)(v159 + 140);
                v162 = v155 + ((v157 + v152 * v353) << 8);
                v163 = *(_QWORD *)(v162 + 128);
                v164 = *(_DWORD *)(v162 + 136);
                v165 = *(_DWORD *)(v162 + 140);
                v166 = *(__int16 **)(v159 + 128);
                v167 = v156 + ((v157 + v353 * (int)v378) << 8);
                v168 = v160 == 5 && v161 == 5;
                if (v168)
                  v122 = convolves5x5(v163, v164, v165, v166, 5, *(int **)(v167 + 128));
                else
                  v122 = convolves(v163, v164, v165, v166, v160, v161, *(int **)(v167 + 128), *(_DWORD *)(v158 + 48));
                v169 = (_QWORD *)v154[1];
                if (v169)
                {
                  do
                  {
                    v170 = v169;
                    v169 = (_QWORD *)*v169;
                  }
                  while (v169);
                }
                else
                {
                  do
                  {
                    v170 = (_QWORD *)v154[2];
                    v168 = *v170 == (_QWORD)v154;
                    v154 = v170;
                  }
                  while (!v168);
                }
                v154 = v170;
              }
              while (v170 != v371);
              v134 = *(_DWORD **)(v54 + 120);
            }
            ++v153;
            ++v152;
          }
          while (v152 < v134[14 * v350 + 1]);
          v347 = v153;
          v130 = "Attempting to initialize CRImage_PixelBuffer with nil CVPixelBufferRef" + 44;
          v131 = "Attempting to initialize CRImage_PixelBuffer with nil CVPixelBufferRef" + 44;
        }
        v171 = *(_QWORD **)(v54 + 48);
        v172 = v378;
        if (v171 == v371)
          goto LABEL_148;
        do
        {
          v354 = v171;
          v173 = *(_QWORD **)(v54 + 72);
          if (v173 != v375)
          {
            v174 = *((_DWORD *)v171 + 7);
            v364 = *v352 + ((uint64_t)(v174 + v353 * (int)v378) << 8);
            v359 = *v351 * v378;
            v361 = v174 * v353;
            do
            {
              v175 = *((_DWORD *)v173 + 7);
              Matrix<int>::MaxPool((uint64_t)&a38, v364, *(_DWORD *)(*(_QWORD *)(v54 + 120) + 56 * v398 + 24), *(_DWORD *)(*(_QWORD *)(v54 + 120) + 56 * v398 + 28), v175);
              v176 = v175 + v361;
              v177 = *v369;
              v388 = v359 + v176;
              (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(*v369 + (v388 << 8)) + 48))(*v369 + (v388 << 8), &a38);
              v373 = v173;
              a38 = &off_1E98D8CF0;
              v122 = a54;
              if (a54)
                v122 = MEMORY[0x1D826E270](a54, 0x1000C8052888210);
              v392 = *(_DWORD *)(*v367 + 4 * v176);
              if (v392 >= 1)
              {
                v178 = 0;
                v395 = *(unsigned int *)(*v356 + 4 * v176);
                v179 = v177 + (v388 << 8);
                v379 = (_DWORD *)(v179 + 136);
                v383 = (uint64_t *)(v179 + 128);
                do
                {
                  if ((int)v395 >= 1)
                  {
                    v180 = *v383;
                    v181 = *(_QWORD *)(v390 + 120);
                    v182 = v395;
                    v183 = v181 + 56 * v398;
                    v184 = *(_DWORD *)(*(_QWORD *)(v183 + 40) + 4 * v378);
                    v185 = (*(_DWORD *)(v390 + 112) - 1);
                    v186 = (_DWORD *)(v181 + 56 * v376 + 48);
                    v187 = (float)(1 << *(_DWORD *)(v183 + 48));
                    v188 = *v386 + (v388 << 8);
                    v189 = *(_QWORD *)(v188 + 128);
                    v190 = *(_DWORD *)(v188 + 136) * v178;
                    v191 = *v379 * v178;
                    do
                    {
                      v192 = v187;
                      if (v398 != v185)
                        v192 = (float)(1 << *v186);
                      v123.n128_f32[0] = v192
                                       * (float)(tanhf((float)((float)(*(_DWORD *)(v180 + 4 * v191) + v184) / v187)* 0.66667)* 1.7159);
                      *(_WORD *)(v189 + 2 * v190++) = (int)v123.n128_f32[0];
                      ++v191;
                      --v182;
                    }
                    while (v182);
                  }
                  ++v178;
                }
                while (v178 != v392);
              }
              v193 = v373;
              v194 = (_QWORD *)v373[1];
              if (v194)
              {
                do
                {
                  v195 = v194;
                  v194 = (_QWORD *)*v194;
                }
                while (v194);
              }
              else
              {
                do
                {
                  v195 = (_QWORD *)v193[2];
                  v168 = *v195 == (_QWORD)v193;
                  v193 = v195;
                }
                while (!v168);
              }
              v173 = v195;
              v54 = v390;
            }
            while (v195 != v375);
          }
          v196 = v354;
          v197 = (_QWORD *)v354[1];
          if (v197)
          {
            do
            {
              v198 = v197;
              v197 = (_QWORD *)*v197;
            }
            while (v197);
          }
          else
          {
            do
            {
              v198 = (_QWORD *)v196[2];
              v168 = *v198 == (_QWORD)v196;
              v196 = v198;
            }
            while (!v168);
          }
          v171 = v198;
        }
        while (v198 != v371);
      }
      else
      {
        v199 = *v352;
        v365 = *v352 + (v135 << 8);
        Matrix<int>::Initialize(v365, HIDWORD(v339) - v134[5], v345 - v134[4]);
        v200 = *(_QWORD **)(v54 + 48);
        if (v200 != v371)
        {
          v201 = *v369;
          v202 = *v367;
          v203 = *v356;
          v204 = *v351 * (uint64_t)(int)v135;
          do
          {
            v205 = *((int *)v200 + 7);
            Matrix<int>::Initialize(v201 + ((v204 + v205) << 8), *(_DWORD *)(v202 + 4 * v205), *(_DWORD *)(v203 + 4 * v205));
            Matrix<short>::Initialize(*v386 + ((v204 + v205) << 8), *(_DWORD *)(v202 + 4 * v205), *(_DWORD *)(v203 + 4 * v205));
            v206 = (_QWORD *)v200[1];
            if (v206)
            {
              do
              {
                v207 = v206;
                v206 = (_QWORD *)*v206;
              }
              while (v206);
            }
            else
            {
              do
              {
                v207 = (_QWORD *)v200[2];
                v168 = *v207 == (_QWORD)v200;
                v200 = v207;
              }
              while (!v168);
            }
            v200 = v207;
          }
          while (v207 != v371);
        }
        v54 = v390;
        v208 = *(_QWORD *)(v390 + 120);
        v209 = *(_QWORD *)(*(_QWORD *)(v208 + 32) + 8 * v135);
        v122 = convolve(v343, a3, vars8, *(__int16 **)(v209 + 128), *(_DWORD *)(v209 + 136), *(_DWORD *)(v209 + 140), *(int **)(v199 + (v135 << 8) + 128), *(_DWORD *)(v208 + 48));
        v210 = *(_QWORD **)(v390 + 48);
        if (v210 != v371)
        {
          v362 = *v351 * (uint64_t)(int)v135;
          do
          {
            v211 = *((_DWORD *)v210 + 7);
            Matrix<int>::MaxPool((uint64_t)&a38, v365, *(_DWORD *)(*(_QWORD *)(v54 + 120) + 24), *(_DWORD *)(*(_QWORD *)(v54 + 120) + 28), v211);
            v212 = *v369;
            v389 = v362 + v211;
            (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(*v369 + (v389 << 8)) + 48))(*v369 + (v389 << 8), &a38);
            v374 = v210;
            a38 = &off_1E98D8CF0;
            v122 = a54;
            if (a54)
              v122 = MEMORY[0x1D826E270](a54, 0x1000C8052888210);
            v393 = *(_DWORD *)(*v367 + 4 * v211);
            if (v393 >= 1)
            {
              v213 = 0;
              v396 = *(unsigned int *)(*v356 + 4 * v211);
              v214 = v212 + (v389 << 8);
              v380 = (_DWORD *)(v214 + 136);
              v384 = (uint64_t *)(v214 + 128);
              do
              {
                if ((int)v396 >= 1)
                {
                  v215 = *v384;
                  v216 = *(_QWORD *)(v390 + 120);
                  v217 = *(_DWORD *)(*(_QWORD *)(v216 + 40) + 4 * v378);
                  v218 = *(_DWORD *)(v390 + 112);
                  v219 = (float)(1 << *(_DWORD *)(v216 + 48));
                  v220 = *v386 + (v389 << 8);
                  v221 = *(_QWORD *)(v220 + 128);
                  v222 = *(_DWORD *)(v220 + 136) * v213;
                  v223 = *v380 * v213;
                  v224 = v396;
                  do
                  {
                    v225 = v219;
                    if (v218 != 1)
                      v225 = (float)(1 << *(_DWORD *)(v216 + 104));
                    v123.n128_f32[0] = v225
                                     * (float)(tanhf((float)((float)(*(_DWORD *)(v215 + 4 * v223) + v217) / v219)* 0.66667)* 1.7159);
                    *(_WORD *)(v221 + 2 * v222++) = (int)v123.n128_f32[0];
                    ++v223;
                    --v224;
                  }
                  while (v224);
                }
                ++v213;
              }
              while (v213 != v393);
            }
            v226 = v374;
            v227 = (_QWORD *)v374[1];
            if (v227)
            {
              do
              {
                v228 = v227;
                v227 = (_QWORD *)*v227;
              }
              while (v227);
            }
            else
            {
              do
              {
                v228 = (_QWORD *)v226[2];
                v168 = *v228 == (_QWORD)v226;
                v226 = v228;
              }
              while (!v168);
            }
            v210 = v228;
            v54 = v390;
          }
          while (v228 != v371);
        }
      }
      v130 = "Attempting to initialize CRImage_PixelBuffer with nil CVPixelBufferRef" + 44;
      v131 = "Attempting to initialize CRImage_PixelBuffer with nil CVPixelBufferRef" + 44;
      v172 = v378;
LABEL_148:
      v135 = v172 + 1;
      v134 = *(_DWORD **)(v54 + 120);
      v132 = v398;
      if (v172 + 1 >= (int)v134[14 * v398 + 1])
      {
        v129 = *(_DWORD *)(v54 + 112);
        v132 = v376;
        goto LABEL_151;
      }
    }
  }
  v134 = *(_DWORD **)(v54 + 120);
LABEL_154:
  v229 = *(int **)v54;
  v355 = *(int **)(v54 + 8);
  if (*(int **)v54 != v355)
  {
    v230 = v129 - 1;
    v231 = &v134[14 * v230];
    v232 = v231[2];
    v233 = v231[3];
    v360 = v134[21] * v134[7];
    v368 = v134[20] * v134[6];
    v234 = *(int *)(v349 + (v230 << 6) + 16);
    v372 = v233 * v232 * v231[1];
    v235 = *((float *)v130 + 903);
    v236 = *((float *)v131 + 904);
    v370 = v234;
    do
    {
      v357 = v229;
      v237 = *(int *)(v390 + 112) - 1;
      v399 = *v229;
      v238 = *(_DWORD *)(*(_QWORD *)(v349 + (v237 << 6) + 8) + 4 * v399);
      if (v238 >= (int)v233)
      {
        v239 = 0;
        v366 = *(_DWORD *)(*(_QWORD *)(v349 + (v237 << 6)) + 4 * v399);
        v363 = (v238 - v233 + 1);
        do
        {
          if (v366 >= v232)
          {
            do
            {
              MEMORY[0x1E0C80A78](v122);
              v242 = (const __int16 *)(((unint64_t)&v336 - ((v241 + 15) & 0x3FFFFFFF0)) & 0xFFFFFFFFFFFFFF80);
              v243 = *(_QWORD *)(v390 + 120);
              v244 = *(int *)(v390 + 112) - 1;
              v245 = *(unsigned int *)(v243 + 56 * v244 + 4);
              if ((int)v245 >= 1)
              {
                v246 = 0;
                v247 = 0;
                v248 = (_QWORD *)(v349 + (v244 << 6) + 56);
                v249 = (_DWORD *)(v243 + 56 * v244 + 48);
                do
                {
                  if (v232 >= 1)
                  {
                    v250 = 0;
                    v251 = v240;
                    do
                    {
                      if ((int)v233 >= 1)
                      {
                        v252 = *v248 + ((v399 + v246 * v234) << 8);
                        v253 = *(_QWORD *)(v252 + 128);
                        v254 = *(_DWORD *)(v252 + 136);
                        v255 = 12 - *v249;
                        v256 = (__int16 *)&v242[v247];
                        v257 = v251 + v239 * v254;
                        v247 += v233;
                        v258 = v233;
                        do
                        {
                          *v256++ = *(unsigned __int16 *)(v253 + 2 * v257) << v255;
                          v257 += v254;
                          --v258;
                        }
                        while (v258);
                      }
                      ++v250;
                      ++v251;
                    }
                    while (v250 != v232);
                  }
                  ++v246;
                }
                while (v246 != v245);
              }
              v381 = v240;
              v385 = (void *)operator new[]();
              v259 = (void *)operator new[]();
              v260 = *(int *)(v390 + 132);
              bzero(v385, 2 * v260);
              bzero(v259, 4 * v260);
              mult(v242, v372, *(int16x4_t **)(*(_QWORD *)(v390 + 136) + 128), v260, (int *)v259, v260);
              v397 = v259;
              v261 = *(unsigned int *)(v390 + 132);
              if ((int)v261 >= 1)
              {
                v262 = *(__int16 **)(v390 + 144);
                v263 = (int *)v259;
                v264 = v385;
                do
                {
                  v265 = *v262++;
                  v266 = *v263 + v265;
                  *v263++ = v266;
                  *v264++ = vcvts_n_s32_f32(tanhf((float)((float)v266 * 0.00024414) * v235) * v236, 0xCuLL);
                  --v261;
                }
                while (v261);
              }
              v267 = (int *)operator new[]();
              v268 = *(int *)(v390 + 128);
              bzero(v267, 4 * v268);
              mult((const __int16 *)v385, *(_DWORD *)(v390 + 132), *(int16x4_t **)(*(_QWORD *)(v390 + 152) + 128), v268, v267, v268);
              if (*(int *)(v390 + 128) >= 1)
              {
                v269 = *(__int16 **)(v390 + 160);
                v270 = v267;
                v271 = *(unsigned int *)(v390 + 128);
                do
                {
                  v272 = *v269++;
                  *v270++ += v272;
                  --v271;
                }
                while (v271);
              }
              v273 = v397;
              v274 = (float *)operator new[]();
              v275 = *(int *)(v390 + 128);
              bzero(v274, 4 * v275);
              v377 = v267;
              v394 = v274;
              v276 = v275;
              if ((_DWORD)v275)
              {
                do
                {
                  v277 = *v267++;
                  *v274++ = (float)v277 * 0.00024414;
                  --v276;
                }
                while (v276);
                v278 = 0.0;
                v279 = v394;
                v280 = v275;
                do
                {
                  v281 = *v279++;
                  v278 = fmaxf(v278, v281);
                  --v280;
                }
                while (v280);
                v282 = 0.0;
                v283 = v394;
                v284 = v275;
                do
                {
                  v285 = expf(*v283 - v278);
                  *v283++ = v285;
                  v282 = v282 + v285;
                  --v284;
                }
                while (v284);
                v286 = v394;
                v287 = v275;
                v273 = v397;
                do
                {
                  *v286 = *v286 / v282;
                  ++v286;
                  --v287;
                }
                while (v287);
                if ((int)v275 >= 1)
                {
                  v288 = 0;
                  v289 = v368 * v381;
                  do
                  {
                    v290 = *(_QWORD *)(*a5 + 24 * (*(_DWORD *)(*(_QWORD *)(v390 + 24) + 8 * v399) + v360 * (int)v239))
                         + 24 * (*(_DWORD *)(*(_QWORD *)(v390 + 24) + 8 * v399 + 4) + v289);
                    v292 = (_DWORD **)(v290 + 8);
                    v291 = *(_DWORD **)(v290 + 8);
                    v294 = (_QWORD *)(v290 + 16);
                    v293 = *(_QWORD *)(v290 + 16);
                    if ((unint64_t)v291 >= v293)
                    {
                      v296 = *(_DWORD **)v290;
                      v297 = ((uint64_t)v291 - *(_QWORD *)v290) >> 2;
                      v298 = v297 + 1;
                      if ((unint64_t)(v297 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v299 = v293 - (_QWORD)v296;
                      if (v299 >> 1 > v298)
                        v298 = v299 >> 1;
                      if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL)
                        v300 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v300 = v298;
                      if (v300)
                      {
                        v301 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v294, v300);
                        v291 = *v292;
                        v296 = *(_DWORD **)v290;
                      }
                      else
                      {
                        v301 = 0;
                      }
                      v302 = &v301[4 * v297];
                      *(float *)v302 = v394[v288];
                      v295 = v302 + 4;
                      while (v291 != v296)
                      {
                        v303 = *--v291;
                        *((_DWORD *)v302 - 1) = v303;
                        v302 -= 4;
                      }
                      *(_QWORD *)v290 = v302;
                      *v292 = v295;
                      *v294 = &v301[4 * v300];
                      if (v296)
                        operator delete(v296);
                      v273 = v397;
                      v289 = v368 * v381;
                    }
                    else
                    {
                      v273 = v397;
                      *v291 = LODWORD(v394[v288]);
                      v295 = v291 + 1;
                    }
                    *v292 = v295;
                    ++v288;
                  }
                  while (v288 < *(int *)(v390 + 128));
                }
              }
              MEMORY[0x1D826E270](v385, 0x1000C80BDFB0063);
              MEMORY[0x1D826E270](v273, 0x1000C8052888210);
              MEMORY[0x1D826E270](v377, 0x1000C8052888210);
              v122 = MEMORY[0x1D826E270](v394, 0x1000C8052888210);
              v234 = v370;
            }
            while (v381 != v366 - v232);
          }
          ++v239;
        }
        while (v239 != v363);
      }
      v229 = v357 + 1;
    }
    while (v357 + 1 != v355);
  }
  v304 = *a5;
  if (a5[1] != *a5)
  {
    v305 = 0;
    do
    {
      v306 = v304 + 24 * v305;
      v307 = *(__n128 **)v306;
      v310 = *(__n128 **)(v306 + 8);
      v308 = (__n128 **)(v306 + 8);
      v309 = v310;
      while (v307 != v309)
      {
        if (v307->n128_u64[0] == v307->n128_u64[1])
        {
          if (v307 != v309)
          {
            v311 = (__n128 *)((char *)v307 + 24);
            if (&v307[1].n128_i8[8] != (__int8 *)v309)
            {
              do
              {
                if (v311->n128_u64[0] != v311->n128_u64[1])
                {
                  v123 = std::vector<int>::__move_assign((uint64_t)v307, v311);
                  v307 = (__n128 *)((char *)v307 + 24);
                }
                v311 = (__n128 *)((char *)v311 + 24);
              }
              while (v311 != v309);
              v304 = *a5;
              v309 = *(__n128 **)(*a5 + 24 * v305 + 8);
            }
          }
          if (v307 != v309)
          {
            v312 = v309;
            v313 = *v308;
            if (v309 != *v308)
            {
              v314 = 8 * (((char *)v309 - (char *)v307) >> 3);
              do
              {
                v123 = std::vector<int>::__move_assign((uint64_t)v307, (__n128 *)((char *)v307 + v314));
                v307 = (__n128 *)((char *)v307 + 24);
              }
              while ((__n128 *)((char *)v307 + v314) != v313);
              v312 = *v308;
            }
            if (v312 != v307)
            {
              v315 = v312;
              do
              {
                v317 = (void *)v315[-2].n128_u64[1];
                v315 = (__n128 *)((char *)v315 - 24);
                v316 = v317;
                if (v317)
                {
                  v312[-1].n128_u64[0] = (unint64_t)v316;
                  operator delete(v316);
                }
                v312 = v315;
              }
              while (v315 != v307);
            }
            *v308 = v307;
            v304 = *a5;
          }
          break;
        }
        v307 = (__n128 *)((char *)v307 + 24);
      }
      ++v305;
      v318 = (void **)a5[1];
    }
    while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v318 - v304) >> 3) > v305);
    if ((void **)v304 != v318)
    {
      v319 = (uint64_t *)v304;
      while (*v319 != v319[1])
      {
        v319 += 3;
        if (v319 == (uint64_t *)v318)
          goto LABEL_245;
      }
      if (v319 != (uint64_t *)v318)
      {
        v320 = (__n128 *)(v319 + 3);
        if (v319 + 3 != (uint64_t *)v318)
        {
          do
          {
            if (v320->n128_u64[0] != v320->n128_u64[1])
            {
              std::vector<std::vector<PixelPosition>>::__vdeallocate(v319);
              v123 = *v320;
              *(__n128 *)v319 = *v320;
              v319[2] = v320[1].n128_i64[0];
              v320->n128_u64[0] = 0;
              v320->n128_u64[1] = 0;
              v320[1].n128_u64[0] = 0;
              v319 += 3;
            }
            v320 = (__n128 *)((char *)v320 + 24);
          }
          while (v320 != (__n128 *)v318);
          v318 = (void **)a5[1];
        }
      }
      if (v319 != (uint64_t *)v318)
      {
        while (v318 != (void **)v319)
        {
          v318 -= 3;
          a38 = (uint64_t (**)())v318;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
        }
        a5[1] = (uint64_t)v319;
      }
    }
  }
LABEL_245:
  if (*(int *)(v390 + 112) >= 1)
  {
    v321 = 0;
    do
    {
      v322 = (_QWORD *)(v349 + (v321 << 6));
      v323 = v322[3];
      if (v323)
      {
        v324 = *(_QWORD *)(v323 - 120);
        if (v324)
        {
          v325 = v324 << 8;
          do
          {
            *(_QWORD *)(v323 + v325 - 256) = &off_1E98D8CF0;
            v326 = *(_QWORD *)(v323 + v325 - 128);
            if (v326)
            {
              MEMORY[0x1D826E270](v326, 0x1000C8052888210, v123);
              *(_QWORD *)(v323 + v325 - 128) = 0;
            }
            v325 -= 256;
          }
          while (v325);
        }
        MEMORY[0x1D826E264](v323 - 128, 128, v123);
      }
      v327 = v322[5];
      if (v327)
      {
        v328 = *(_QWORD *)(v327 - 120);
        if (v328)
        {
          v329 = v328 << 8;
          do
          {
            *(_QWORD *)(v327 + v329 - 256) = &off_1E98D8CF0;
            v330 = *(_QWORD *)(v327 + v329 - 128);
            if (v330)
            {
              MEMORY[0x1D826E270](v330, 0x1000C8052888210, v123);
              *(_QWORD *)(v327 + v329 - 128) = 0;
            }
            v329 -= 256;
          }
          while (v329);
        }
        MEMORY[0x1D826E264](v327 - 128, 128, v123);
      }
      v331 = *(_QWORD *)(v349 + (v321 << 6) + 56);
      if (v331)
      {
        v332 = *(_QWORD *)(v331 - 120);
        if (v332)
        {
          v333 = v332 << 8;
          do
          {
            *(_QWORD *)(v331 + v333 - 256) = &off_1E98D8D48;
            v334 = *(_QWORD *)(v331 + v333 - 128);
            if (v334)
            {
              MEMORY[0x1D826E270](v334, 0x1000C80BDFB0063, v123);
              *(_QWORD *)(v331 + v333 - 128) = 0;
            }
            v333 -= 256;
          }
          while (v333);
        }
        MEMORY[0x1D826E264](v331 - 128, 128, v123);
      }
      if (*v322)
        MEMORY[0x1D826E270](*v322, 0x1000C8052888210, v123);
      v335 = *(_QWORD *)(v349 + (v321 << 6) + 8);
      if (v335)
        MEMORY[0x1D826E270](v335, 0x1000C8052888210, v123);
      ++v321;
    }
    while (v321 < *(int *)(v390 + 112));
  }
  MEMORY[0x1D826E270](v349, 0x1030C8005CF98B3, v123);
  (*(void (**)(_QWORD *))(*v338 + 8))(v338);
  (*(void (**)(_QWORD *))(*v337 + 8))(v337);
  return MEMORY[0x1D826E270](v343, 0x1000C80BDFB0063);
}

void sub_1D505E840(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 384) = *(_QWORD *)(v1 + 232);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 384));
  _Unwind_Resume(a1);
}

_QWORD *Matrix<int>::~Matrix(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E98D8CF0;
  v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1D826E270](v2, 0x1000C8052888210);
    a1[16] = 0;
  }
  return a1;
}

_QWORD *Matrix<short>::~Matrix(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E98D8D48;
  v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1D826E270](v2, 0x1000C80BDFB0063);
    a1[16] = 0;
  }
  return a1;
}

void Matrix<int>::Initialize(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  void *v7;

  v6 = *(_QWORD *)(a1 + 128);
  if (v6)
    MEMORY[0x1D826E270](v6, 0x1000C8052888210);
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = a2;
  v7 = (void *)operator new[]();
  *(_QWORD *)(a1 + 128) = v7;
  bzero(v7, 4 * *(unsigned int *)(a1 + 136) * (unint64_t)*(unsigned int *)(a1 + 140));
}

void Matrix<short>::Initialize(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  void *v7;

  v6 = *(_QWORD *)(a1 + 128);
  if (v6)
    MEMORY[0x1D826E270](v6, 0x1000C80BDFB0063);
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = a2;
  v7 = (void *)operator new[]();
  *(_QWORD *)(a1 + 128) = v7;
  bzero(v7, 2 * *(unsigned int *)(a1 + 136) * (unint64_t)*(unsigned int *)(a1 + 140));
}

uint64_t Matrix<int>::MaxPool(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  switch(a5)
  {
    case 0:
      v9 = 0;
      v10 = 0;
      v11 = *(_DWORD *)(a2 + 136);
      v12 = *(_DWORD *)(a2 + 140);
      goto LABEL_7;
    case 1:
      v9 = 0;
      v12 = *(_DWORD *)(a2 + 140);
      v11 = *(_DWORD *)(a2 + 136) - 1;
      goto LABEL_6;
    case 2:
      v10 = 0;
      v11 = *(_DWORD *)(a2 + 136);
      v12 = *(_DWORD *)(a2 + 140) - 1;
      v9 = 1;
      goto LABEL_7;
    case 3:
      v11 = *(_DWORD *)(a2 + 136) - 1;
      v12 = *(_DWORD *)(a2 + 140) - 1;
      v9 = 1;
LABEL_6:
      v10 = 1;
LABEL_7:
      v13 = v12 / a4;
      *(_QWORD *)a1 = &off_1E98D8CF0;
      v14 = v11 / a3;
      *(_DWORD *)(a1 + 136) = v11 / a3;
      *(_DWORD *)(a1 + 140) = v12 / a4;
      result = operator new[]();
      *(_QWORD *)(a1 + 128) = result;
      if (v9 < v13 * a4)
      {
        v16 = v14 * a3;
        do
        {
          if (v10 < v16)
          {
            v17 = *(_QWORD *)(a2 + 128);
            v18 = *(_DWORD *)(a2 + 136);
            v19 = v10 + v18 * v9;
            v20 = v10;
            do
            {
              v21 = *(_DWORD *)(v17 + 4 * (v20 + v18 * v9));
              if (a4 >= 1)
              {
                v22 = 0;
                v23 = v19;
                do
                {
                  v24 = v23;
                  v25 = a3;
                  if (a3 >= 1)
                  {
                    do
                    {
                      if (*(_DWORD *)(v17 + 4 * v24) > v21)
                        v21 = *(_DWORD *)(v17 + 4 * v24);
                      ++v24;
                      --v25;
                    }
                    while (v25);
                  }
                  ++v22;
                  v23 += v18;
                }
                while (v22 != a4);
              }
              *(_DWORD *)(result + 4 * (v20 / a3 + v9 / a4 * v14)) = v21;
              v20 += a3;
              v19 += a3;
            }
            while (v20 < v16);
          }
          v9 += a4;
        }
        while (v9 < v13 * a4);
      }
      return result;
    default:
      printf("value of fragment: %d unknown", a5);
      exit(0);
  }
}

uint64_t *std::__tree<int>::__emplace_unique_key_args<int,int>(uint64_t *result, int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void Matrix<short>::~Matrix(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E98D8D48;
  v1 = a1[16];
  if (v1)
    MEMORY[0x1D826E270](v1, 0x1000C80BDFB0063);
  JUMPOUT(0x1D826E288);
}

uint64_t Matrix<short>::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 140);
  v7 = *(_DWORD *)(a2 + 136);
  *(_QWORD *)a3 = &off_1E98D8D48;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a2 + 136);
    v12 = *(_QWORD *)(a2 + 128);
    do
    {
      if ((_DWORD)v11)
      {
        v13 = 0;
        v14 = 0;
        v15 = *(unsigned int *)(a1 + 136);
        do
        {
          v16 = v10 + v7 * (_DWORD)v14;
          *(_WORD *)(result + 2 * v16) = 0;
          if ((_DWORD)v15)
          {
            v17 = 0;
            v18 = *(_QWORD *)(a1 + 128);
            v19 = v10;
            v20 = v13;
            v21 = v15;
            do
            {
              v17 += *(unsigned __int16 *)(v12 + 2 * v20) * *(unsigned __int16 *)(v18 + 2 * v19);
              *(_WORD *)(result + 2 * v16) = v17;
              ++v20;
              v19 += v15;
              --v21;
            }
            while (v21);
          }
          ++v14;
          v13 += v11;
        }
        while (v14 != v11);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<short>::operator*@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E98D8D48;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a1 + 136);
    v12 = *a2;
    do
    {
      if ((_DWORD)v11)
      {
        v13 = *(_QWORD *)(a1 + 128);
        v14 = v10;
        v15 = v10;
        v16 = v11;
        do
        {
          *(_WORD *)(result + 2 * v15) = *(_WORD *)(v13 + 2 * v14) * v12;
          v15 += v7;
          v14 += v11;
          --v16;
        }
        while (v16);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<short>::operator+@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E98D8D48;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a1 + 136);
    v12 = *(_QWORD *)(a2 + 128);
    v13 = *(_DWORD *)(a2 + 136);
    do
    {
      if ((_DWORD)v11)
      {
        v14 = *(_QWORD *)(a1 + 128);
        v15 = v10;
        v16 = v10;
        v17 = v10;
        v18 = v11;
        do
        {
          *(_WORD *)(result + 2 * v17) = *(_WORD *)(v12 + 2 * v16) + *(_WORD *)(v14 + 2 * v15);
          v17 += v7;
          v16 += v13;
          v15 += v11;
          --v18;
        }
        while (v18);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<short>::operator+=(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    v3 = 0;
    v4 = *(unsigned int *)(result + 136);
    v5 = *(_QWORD *)(a2 + 128);
    v6 = *(_DWORD *)(a2 + 136);
    do
    {
      if ((_DWORD)v4)
      {
        v7 = *(_QWORD *)(result + 128);
        v8 = v3;
        v9 = v3;
        v10 = v4;
        do
        {
          *(_WORD *)(v7 + 2 * v9) += *(_WORD *)(v5 + 2 * v8);
          v9 += v4;
          v8 += v6;
          --v10;
        }
        while (v10);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t Matrix<short>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    MEMORY[0x1D826E270](v4, 0x1000C80BDFB0063);
  v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  v6 = (void *)operator new[]();
  *(_QWORD *)(a1 + 128) = v6;
  memcpy(v6, *(const void **)(a2 + 128), 2 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

uint64_t Matrix<short>::operator=(uint64_t a1, const void *a2)
{
  memcpy(*(void **)(a1 + 128), a2, 2 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

BOOL Matrix<short>::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140)))
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 2 * (v3 * v2)) == 0;
  else
    return 0;
}

void Matrix<int>::~Matrix(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E98D8CF0;
  v1 = a1[16];
  if (v1)
    MEMORY[0x1D826E270](v1, 0x1000C8052888210);
  JUMPOUT(0x1D826E288);
}

uint64_t Matrix<int>::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 140);
  v7 = *(_DWORD *)(a2 + 136);
  *(_QWORD *)a3 = &off_1E98D8CF0;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a2 + 136);
    v12 = *(_QWORD *)(a2 + 128);
    do
    {
      if ((_DWORD)v11)
      {
        v13 = 0;
        v14 = 0;
        v15 = *(unsigned int *)(a1 + 136);
        do
        {
          v16 = v10 + v7 * (_DWORD)v14;
          *(_DWORD *)(result + 4 * v16) = 0;
          if ((_DWORD)v15)
          {
            v17 = 0;
            v18 = *(_QWORD *)(a1 + 128);
            v19 = v10;
            v20 = v13;
            v21 = v15;
            do
            {
              v17 += *(_DWORD *)(v12 + 4 * v20) * *(_DWORD *)(v18 + 4 * v19);
              *(_DWORD *)(result + 4 * v16) = v17;
              ++v20;
              v19 += v15;
              --v21;
            }
            while (v21);
          }
          ++v14;
          v13 += v11;
        }
        while (v14 != v11);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<int>::operator*@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E98D8CF0;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a1 + 136);
    v12 = *a2;
    do
    {
      if ((_DWORD)v11)
      {
        v13 = *(_QWORD *)(a1 + 128);
        v14 = v10;
        v15 = v10;
        v16 = v11;
        do
        {
          *(_DWORD *)(result + 4 * v15) = *(_DWORD *)(v13 + 4 * v14) * v12;
          v15 += v7;
          v14 += v11;
          --v16;
        }
        while (v16);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<int>::operator+@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E98D8CF0;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a1 + 136);
    v12 = *(_QWORD *)(a2 + 128);
    v13 = *(_DWORD *)(a2 + 136);
    do
    {
      if ((_DWORD)v11)
      {
        v14 = *(_QWORD *)(a1 + 128);
        v15 = v10;
        v16 = v10;
        v17 = v10;
        v18 = v11;
        do
        {
          *(_DWORD *)(result + 4 * v17) = *(_DWORD *)(v12 + 4 * v16) + *(_DWORD *)(v14 + 4 * v15);
          v17 += v7;
          v16 += v13;
          v15 += v11;
          --v18;
        }
        while (v18);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t Matrix<int>::operator+=(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a2 + 128);
    v5 = *(_DWORD *)(result + 136);
    do
    {
      if (v5)
      {
        v6 = 0;
        v7 = *(_QWORD *)(result + 128);
        do
        {
          *(_DWORD *)(v7 + 4 * (v3 + v6 * v5)) += *(_DWORD *)(v4 + 4 * (v3 + *(_DWORD *)(a2 + 136) * v6));
          ++v6;
          v5 = *(_DWORD *)(result + 136);
        }
        while (v6 < v5);
        v2 = *(_DWORD *)(result + 140);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t Matrix<int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    MEMORY[0x1D826E270](v4, 0x1000C8052888210);
  v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  v6 = (void *)operator new[]();
  *(_QWORD *)(a1 + 128) = v6;
  memcpy(v6, *(const void **)(a2 + 128), 4 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

uint64_t Matrix<int>::operator=(uint64_t a1, const void *a2)
{
  memcpy(*(void **)(a1 + 128), a2, 4 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

BOOL Matrix<int>::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140)))
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 4 * (v3 * v2)) == 0;
  else
    return 0;
}

void sub_1D505F610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D505F64C()
{
  JUMPOUT(0x1D505F63CLL);
}

void sub_1D505F654()
{
  JUMPOUT(0x1D505F640);
}

void sub_1D505F98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  if (v14 == 2)
  {

  }
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ContentTypeRefinementContext::shiftOneField(_anonymous_namespace_::ContentTypeRefinementContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;

  v6 = *(id *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 16);
  objc_msgSend(*(id *)this, "addObject:");
  v2 = *((_QWORD *)this + 1);
  v4 = *(uint64_t **)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  v5 = *v4;
  *(_QWORD *)(v5 + 8) = v4[1];
  *(_QWORD *)v4[1] = v5;
  *(_QWORD *)(v2 + 16) = v3 - 1;

  operator delete(v4);
}

void sub_1D505FAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void `anonymous namespace'::ContentTypeRefinementContext::shiftAndGroupFields(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  CRFormFieldOutputRegion *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!objc_msgSend(v3, "count"))
  {

LABEL_26:
    v20 = 0;
    goto LABEL_27;
  }
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "boundingQuad");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  for (i = 0; i < objc_msgSend(v3, "count"); ++i)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", i);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "fieldSource") != 1)
    {
      v20 = 0;
      goto LABEL_16;
    }
    objc_msgSend(v3, "objectAtIndexedSubscript:", i);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "fieldType");

    if (v9 != 1)
    {
      v20 = 0;
      goto LABEL_17;
    }
    if (i)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", i);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "boundingQuad");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "objectAtIndexedSubscript:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "boundingQuad");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "baselineAngle");
      *(float *)&v14 = v14;
      objc_msgSend(v5, "unionWithNormalizedQuad:baselineAngle:", v11, v14);
      v15 = objc_claimAutoreleasedReturnValue();

      v5 = (void *)v15;
    }
  }
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "fieldSource");

  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "fieldSource") == 1)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "labelRegion");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  v20 = -[CRFormFieldOutputRegion initWithQuad:labelRegion:subFields:source:]([CRFormFieldOutputRegion alloc], "initWithQuad:labelRegion:subFields:source:", v5, v7, v3, v17);
LABEL_16:

LABEL_17:
  if (!v20)
    goto LABEL_26;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v21 = v3;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v22)
  {
    v23 = *(_QWORD *)v26;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v26 != v23)
          objc_enumerationMutation(v21);
        v29 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v24);
        std::list<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::remove(*(uint64_t **)(a1 + 8), &v29);
        ++v24;
      }
      while (v22 != v24);
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v22);
  }

  objc_msgSend(*(id *)a1, "addObject:", v20, (_QWORD)v25);
LABEL_27:

}

void sub_1D505FDB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::ContentTypeRefinementContext::shiftFields(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v12, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v3);
        v11 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6);
        std::list<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::remove(*(uint64_t **)(a1 + 8), &v11);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)a1, "addObjectsFromArray:", v3, (_QWORD)v7);
}

void sub_1D505FF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5060220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1D5060784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D5060A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1D5060B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D506108C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D506141C(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a14);

  std::__list_imp<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D5061558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void std::list<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];
  uint64_t v13;

  v12[0] = (uint64_t)v12;
  v12[1] = (uint64_t)v12;
  v13 = 0;
  v2 = (uint64_t *)a1[1];
  if (v2 != a1)
  {
    v3 = 0;
    do
    {
      v4 = (uint64_t *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v4 == a1)
        {
          v6 = 1;
LABEL_9:
          v4 = a1;
        }
        else
        {
          while (1)
          {
            v6 = v4[2] == v5;
            if (v4[2] != v5)
              break;
            v4 = (uint64_t *)v4[1];
            if (v4 == a1)
              goto LABEL_9;
          }
        }
        if (v2 != v4)
        {
          v7 = *v4;
          if (v12 != a1)
          {
            v8 = 1;
            if ((uint64_t *)v7 != v2)
            {
              v9 = v2;
              do
              {
                v9 = (uint64_t *)v9[1];
                ++v8;
              }
              while (v9 != (uint64_t *)v7);
            }
            a1[2] -= v8;
            v3 += v8;
            v13 = v3;
          }
          v10 = *v2;
          *(_QWORD *)(v10 + 8) = *(_QWORD *)(v7 + 8);
          **(_QWORD **)(v7 + 8) = v10;
          v11 = v12[0];
          *(_QWORD *)(v12[0] + 8) = v2;
          *v2 = v11;
          v12[0] = v7;
          *(_QWORD *)(v7 + 8) = v12;
        }
        if (!v6)
          v4 = (uint64_t *)v4[1];
      }
      v2 = v4;
    }
    while (v4 != a1);
  }
  std::__list_imp<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::clear(v12);
}

void std::__list_imp<objc_object  {objcproto20CRFormFieldProviding}* {__strong}>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1D506254C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5062654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D506294C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D5062B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D5062C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5062CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5062E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50631E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50637F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void sub_1D5063CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5063DEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5063F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D50640C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5064860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  void *v43;
  void *v44;
  uint64_t v45;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a38, 8);

  _Block_object_dispose((const void *)(v45 - 232), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_1D5064B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5064FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D50650F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D506533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D5065604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D5066074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NetworkEdge::serialize(NetworkEdge *this@<X0>, const CRCHNetwork *a2@<X1>, std::string *a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string::size_type v35;
  std::string *v36;
  void *__p[2];
  unsigned __int8 v38;
  std::string v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;

  ul2s(*(_QWORD *)this, (uint64_t)&v46);
  v6 = std::string::insert(&v46, 0, "Edge (startNode,endNode)= (");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v47, ", ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((_QWORD *)this + 1), (uint64_t)v44);
  if ((v45 & 0x80u) == 0)
    v10 = v44;
  else
    v10 = (void **)v44[0];
  if ((v45 & 0x80u) == 0)
    v11 = v45;
  else
    v11 = (std::string::size_type)v44[1];
  v12 = std::string::append(&v48, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v49, ") inSym=");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((_QWORD *)this + 2), (uint64_t)v42);
  if ((v43 & 0x80u) == 0)
    v16 = v42;
  else
    v16 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v17 = v43;
  else
    v17 = (std::string::size_type)v42[1];
  v18 = std::string::append(&v50, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v51, " outSym= ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  ul2s(*((_QWORD *)this + 3), (uint64_t)v40);
  if ((v41 & 0x80u) == 0)
    v22 = v40;
  else
    v22 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v23 = v41;
  else
    v23 = (std::string::size_type)v40[1];
  v24 = std::string::append(&v52, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v53, " ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  CRCHNetwork::getSymbol(&v39, (uint64_t)a2, *((_QWORD *)this + 3));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v39;
  else
    v28 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v30 = std::string::append(&v54, (const std::string::value_type *)v28, size);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v55, " weight = ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  d2s(*((double *)this + 4), __p);
  if ((v38 & 0x80u) == 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if ((v38 & 0x80u) == 0)
    v35 = v38;
  else
    v35 = (std::string::size_type)__p[1];
  v36 = std::string::append(&v56, (const std::string::value_type *)v34, v35);
  *a3 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if ((char)v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_1D50664B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  uint64_t v71;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v71 - 57) < 0)
    operator delete(*(void **)(v71 - 80));
  if (*(char *)(v71 - 89) < 0)
    operator delete(*(void **)(v71 - 112));
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v71 - 121) < 0)
    operator delete(*(void **)(v71 - 144));
  if (*(char *)(v71 - 153) < 0)
    operator delete(*(void **)(v71 - 176));
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v71 - 185) < 0)
    operator delete(*(void **)(v71 - 208));
  if (*(char *)(v71 - 217) < 0)
    operator delete(*(void **)(v71 - 240));
  if (a32 < 0)
    operator delete(a27);
  if (a71 < 0)
    operator delete(a66);
  if (a64 < 0)
    operator delete(a59);
  if (a38 < 0)
    operator delete(a33);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_1D50665FC()
{
  JUMPOUT(0x1D5066584);
}

void sub_1D5066604()
{
  JUMPOUT(0x1D5066594);
}

void sub_1D506660C()
{
  JUMPOUT(0x1D50665A4);
}

void sub_1D5066614()
{
  JUMPOUT(0x1D50665B4);
}

void sub_1D506661C()
{
  JUMPOUT(0x1D50665C4);
}

void sub_1D5066624()
{
  JUMPOUT(0x1D50665D4);
}

void sub_1D506662C()
{
  JUMPOUT(0x1D50665E4);
}

void CRCHNetwork::getSymbol(std::string *this, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  __int128 v4;

  if (*(_BYTE *)(a2 + 192))
  {
    if (a3)
    {
      ul2sh(a3, (uint64_t)this);
      return;
    }
    v3 = *(_QWORD *)(a2 + 144);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 144) + 24 * a3;
  }
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v4 = *(_OWORD *)v3;
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t CRCHNetwork::readOneEdge(uint64_t **this, char *a2, NetworkEdge *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  char *p_p;
  unint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  std::string::size_type size;
  uint64_t v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  std::logic_error *exception;
  unint64_t v33;
  double v34;
  std::string __str;
  uint64_t v36[2];
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[4];
  char *v40;
  char *v41;
  __int128 __p;
  __int128 v43;
  int v44;
  uint64_t v45[20];

  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  v45[0] = MEMORY[0x1E0DE4FD0] + 104;
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v37 = MEMORY[0x1E0DE4FD0] + 64;
  v36[0] = v9;
  *(uint64_t *)((char *)v36 + *(_QWORD *)(v9 - 24)) = v10;
  v36[1] = 0;
  v11 = (std::ios_base *)((char *)v36 + *(_QWORD *)(v36[0] - 24));
  std::ios_base::init(v11, v38);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[5];
  v37 = v8[4];
  *(_QWORD *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24)) = v12;
  v36[0] = v8[1];
  *(uint64_t *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = v8[6];
  v45[0] = v6;
  v36[0] = v5 + 24;
  v37 = v7;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  v38[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v43 = 0u;
  v44 = 24;
  std::string::operator=((std::string *)&__p, &__str);
  *((_QWORD *)&v43 + 1) = 0;
  if ((SBYTE7(v43) & 0x80u) == 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  if ((SBYTE7(v43) & 0x80u) == 0)
    v15 = BYTE7(v43);
  else
    v15 = *((_QWORD *)&__p + 1);
  if ((v44 & 8) != 0)
  {
    v39[0] = p_p;
    v39[1] = p_p;
    *((_QWORD *)&v43 + 1) = &p_p[v15];
    v39[2] = &p_p[v15];
  }
  if ((v44 & 0x10) != 0)
  {
    *((_QWORD *)&v43 + 1) = &p_p[v15];
    if ((SBYTE7(v43) & 0x80u) == 0)
      v16 = 22;
    else
      v16 = (v43 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize((std::string *)&__p, v16, 0);
    v17 = BYTE7(v43);
    if (SBYTE7(v43) < 0)
      v17 = *((_QWORD *)&__p + 1);
    v39[3] = p_p;
    v40 = p_p;
    v41 = &p_p[v17];
    if ((v44 & 3) != 0)
    {
      if (v15 >> 31)
      {
        v18 = ((v15 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v19 = 0x7FFFFFFF * ((v18 + ((v15 - 0x80000000 - v18) >> 1)) >> 30);
        p_p += v19 + 0x7FFFFFFF;
        v15 = v15 - v19 - 0x7FFFFFFF;
        v40 = p_p;
      }
      if (v15)
        v40 = &p_p[v15];
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MEMORY[0x1D826E168](&__str, v36, 0);
  if (!__str.__r_.__value_.__s.__data_[0])
  {
    v22 = 0;
    goto LABEL_29;
  }
  v20 = *(_QWORD **)((char *)v39 + *(_QWORD *)(v36[0] - 24));
  v21 = (char *)v20[3];
  if (v21 == (char *)v20[4])
  {
    v23 = (*(uint64_t (**)(_QWORD *))(*v20 + 80))(v20);
    v22 = v23;
    if (v23 == -1)
    {
      v22 = 0;
      v24 = 6;
      goto LABEL_28;
    }
  }
  else
  {
    v20[3] = v21 + 1;
    v22 = *v21;
  }
  v24 = 0;
LABEL_28:
  std::ios_base::clear((std::ios_base *)((char *)v36 + *(_QWORD *)(v36[0] - 24)), *(_DWORD *)((char *)&v38[1] + *(_QWORD *)(v36[0] - 24)) | v24);
LABEL_29:
  if ((*((_BYTE *)&v38[1] + *(_QWORD *)(v36[0] - 24)) & 5) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid empty FST line entry");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v22 == 70)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1D826E180](v36, &__str);
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(this + 8, (unint64_t *)&__str, (uint64_t *)&__str);
    goto LABEL_34;
  }
  if (v22 == 73)
  {
    MEMORY[0x1D826E180](v36, this + 4);
LABEL_34:
    v25 = 0;
    goto LABEL_54;
  }
  v34 = 0.0;
  MEMORY[0x1D826E180](v36, a3);
  MEMORY[0x1D826E180](v36, (char *)a3 + 8);
  memset(&__str, 0, sizeof(__str));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v36, (uint64_t)&__str);
  std::ios_base::clear((std::ios_base *)((char *)v36 + *(_QWORD *)(v36[0] - 24)), 0);
  *((_QWORD *)a3 + 2) = (int)sh2i((uint64_t)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    *__str.__r_.__value_.__l.__data_ = 0;
    __str.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    __str.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  }
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v36, (uint64_t)&__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (!*((_BYTE *)this + 192))
  {
    if (size)
    {
      v27 = CRCHSymbolMap::store(this + 17, (__int128 *)&__str);
      goto LABEL_46;
    }
LABEL_45:
    v27 = 0;
    goto LABEL_46;
  }
  if (!size)
    goto LABEL_45;
  v27 = (int)sh2i((uint64_t)&__str);
LABEL_46:
  *((_QWORD *)a3 + 3) = v27;
  MEMORY[0x1D826E174](v36, &v34);
  v28 = v34;
  if ((*(_DWORD *)((_BYTE *)&v38[1] + *(_QWORD *)(v36[0] - 24)) & 5) != 0)
    v28 = 0.0;
  *((double *)a3 + 4) = v28;
  v33 = 0;
  MEMORY[0x1D826E180](v36, &v33);
  if ((*(_DWORD *)((_BYTE *)&v38[1] + *(_QWORD *)(v36[0] - 24)) & 5) != 0)
    v29 = 0;
  else
    v29 = (unint64_t)(double)v33;
  *((_QWORD *)a3 + 5) = v29;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v25 = 1;
LABEL_54:
  v36[0] = *v8;
  v30 = v8[9];
  *(uint64_t *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = v8[8];
  v37 = v30;
  v38[0] = v13 + 16;
  if (SBYTE7(v43) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D826E234](v45);
  return v25;
}

void sub_1D5066B80()
{
  __break(1u);
}

void sub_1D5066BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_end_catch();
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void CRCHNetwork::readDataFile(CRCHNetwork *this)
{
  const char **v2;
  int v3;
  const char *v4;
  FILE *v5;
  FILE *v6;
  NetworkEdge *v7;
  const NetworkEdge *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  CRCHNetwork *v25;
  CRCHNetwork *v26;
  CRCHNetwork *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  unint64_t v46;
  void *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void *exception;
  std::string *v55;
  __int128 v56;
  std::string v57;
  std::string v58;
  std::string v59;
  __int128 v60;
  std::string::size_type v61;
  __int128 v62;
  std::string::size_type v63;
  void *__p;
  void *v65;
  uint64_t v66;
  std::string v67;
  char v68[2048];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = (const char **)((char *)this + 8);
  v3 = *((char *)this + 31);
  v4 = (char *)this + 8;
  if (v3 < 0)
    v4 = *v2;
  v5 = fopen(v4, "rt");
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v55 = std::string::append(&v67, ")");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v63 = v55->__r_.__value_.__r.__words[2];
    v62 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1D826E0E4](exception, &v62);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  fgets(v68, 2048, v5);
  __p = 0;
  v65 = 0;
  v66 = 0;
  while (!feof(v6))
  {
    v68[0] = 0;
    if (!fgets(v68, 2048, v6))
      break;
    if (CRCHNetwork::readOneEdge((uint64_t **)this, v68, (NetworkEdge *)&v62))
      CRCHNetwork::storeEntry(this, (const NetworkEdge *)&v62);
  }
  v7 = (NetworkEdge *)*((_QWORD *)this + 11);
  v8 = (const NetworkEdge *)*((_QWORD *)this + 12);
  v9 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 4));
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)compareEdge;
  if (v8 == v7)
    v10 = 0;
  else
    v10 = v9;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(v7, v8, (uint64_t (**)(NetworkEdge *, NetworkEdge *))&v67, v10, 1);
  v11 = *((_QWORD *)this + 11);
  v12 = *((_QWORD *)this + 12);
  while (v11 != v12)
  {
    CRCHNetwork::storeIncomingEdgeEntry(this, v11);
    v11 += 80;
  }
  v13 = *((_QWORD *)this + 14);
  v14 = (uint64_t *)*((_QWORD *)this + 15);
  v15 = 126 - 2 * __clz(((uint64_t)v14 - v13) >> 3);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)compareIncomingEdge;
  if (v14 == (uint64_t *)v13)
    v16 = 0;
  else
    v16 = v15;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v13, v14, &v67, v16, 1);
  v67.__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = (unint64_t)&v67.__r_.__value_.__l.__size_;
  v17 = (unint64_t *)*((_QWORD *)this + 11);
  v18 = (unint64_t *)*((_QWORD *)this + 12);
  if (v17 == v18)
  {
    v20 = 0;
  }
  else
  {
    do
    {
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v67, v17, (uint64_t *)v17);
      v19 = v17 + 1;
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v67, v19, (uint64_t *)v19);
      v17 = v19 + 9;
    }
    while (v17 != v18);
    v20 = v67.__r_.__value_.__r.__words[2];
  }
  std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, v20);
  v21 = (uint64_t *)*((_QWORD *)this + 11);
  v22 = (uint64_t *)*((_QWORD *)this + 12);
  v23 = *((_QWORD *)this + 5);
  if (v21 != v22)
  {
    v24 = (uint64_t *)*((_QWORD *)this + 11);
    do
    {
      ++*(_QWORD *)(v23 + 56 * *v24);
      ++*(_QWORD *)(v23 + 56 * v24[1] + 8);
      v24 += 10;
    }
    while (v24 != v22);
  }
  v25 = (CRCHNetwork *)*((_QWORD *)this + 8);
  if (v25 != (CRCHNetwork *)((char *)this + 72))
  {
    do
    {
      *(_BYTE *)(v23 + 56 * *((_QWORD *)v25 + 4) + 48) = 1;
      v26 = (CRCHNetwork *)*((_QWORD *)v25 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(CRCHNetwork **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (CRCHNetwork *)*((_QWORD *)v25 + 2);
          v28 = *(_QWORD *)v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v28);
      }
      v25 = v27;
    }
    while (v27 != (CRCHNetwork *)((char *)this + 72));
  }
  v29 = *v21;
  *(_QWORD *)(v23 + 56 * *v21 + 16) = 0;
  v30 = *((_QWORD *)this + 6) - v23;
  if (v30)
  {
    v31 = 0;
    v32 = v30 / 56;
    if (v32 <= 1)
      v32 = 1;
    v33 = v23;
    do
    {
      *(_QWORD *)(v33 + 16) = v29;
      if (!*(_QWORD *)v33 && !*(_BYTE *)(v33 + 48))
      {
        v38 = v31;
        v39 = __cxa_allocate_exception(0x10uLL);
        ul2s(v38, (uint64_t)&v57);
        v40 = std::string::insert(&v57, 0, "Node[");
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v58, "]");
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = std::string::append(&v59, "has out degree zero but is not marked as a final node");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v61 = v44->__r_.__value_.__r.__words[2];
        v60 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1D826E0C0](v39, &v60);
        __cxa_throw(v39, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v29 += *(_QWORD *)v33;
      ++v31;
      v33 += 56;
    }
    while (v32 != v31);
    v34 = 0;
    v35 = 0;
    *(_QWORD *)(v23 + 24) = 0;
    v36 = (_QWORD *)(v23 + 24);
    do
    {
      *v36 = v35;
      v37 = *(v36 - 2);
      if (!v37 && v34 != *((_QWORD *)this + 4))
      {
        v46 = v34;
        v47 = __cxa_allocate_exception(0x10uLL);
        ul2s(v46, (uint64_t)&v57);
        v48 = std::string::insert(&v57, 0, "Node[");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        v50 = std::string::append(&v58, "]");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v59, "has in degree zero but is not marked as an initial node");
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v61 = v52->__r_.__value_.__r.__words[2];
        v60 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1D826E0C0](v47, &v60);
        __cxa_throw(v47, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v36 += 7;
      v35 += v37;
      ++v34;
    }
    while (v32 != v34);
  }
  else
  {
    *(_QWORD *)(v23 + 24) = 0;
  }
  fclose(v6);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v67, (_QWORD *)v67.__r_.__value_.__l.__size_);
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
}

void sub_1D50671E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  int v56;

  if (a42 < 0)
    operator delete(__p);
  if (a55 < 0)
  {
    operator delete(a50);
    if ((v56 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v56)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v55);
  goto LABEL_8;
}

unint64_t CRCHNetwork::storeEntry(CRCHNetwork *this, const NetworkEdge *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 12);
  if (v3 >= *((_QWORD *)this + 13))
  {
    v4 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)this + 11, a2);
  }
  else
  {
    NetworkEdge::NetworkEdge(*((NetworkEdge **)this + 12), a2);
    v4 = v3 + 80;
    *((_QWORD *)this + 12) = v3 + 80;
  }
  *((_QWORD *)this + 12) = v4;
  return 0xCCCCCCCCCCCCCCCDLL * ((v4 - *((_QWORD *)this + 11)) >> 4) - 1;
}

void sub_1D5067388(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 96) = v2;
  _Unwind_Resume(a1);
}

BOOL compareEdge(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;

  if (*a1 < *a2)
    return 1;
  if (*a1 != *a2)
    return 0;
  v3 = a1[2];
  v4 = a2[2];
  if (v3 < v4)
    return 1;
  return v3 == v4 && a1[1] < a2[1];
}

void CRCHNetwork::storeIncomingEdgeEntry(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[16];
  v4 = (uint64_t)(a1 + 16);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)a1[14];
    v18 = (char *)a1[15];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[14] = v16;
    a1[15] = v8;
    a1[16] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[15] = v8;
}

BOOL compareIncomingEdge(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
}

void std::vector<CRCHNetworkNode>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<CRCHNetworkNode>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 56 * a2;
  }
}

uint64_t CRCHNetwork::prepareNetwork(CRCHNetwork *this)
{
  NetworkEdge *v2;
  const NetworkEdge *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *exception;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  __int128 v43;
  std::string::size_type v44;

  v2 = (NetworkEdge *)*((_QWORD *)this + 11);
  v3 = (const NetworkEdge *)*((_QWORD *)this + 12);
  v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v3 - v2) >> 4));
  *(_QWORD *)&v43 = compareEdge;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(v2, v3, (uint64_t (**)(NetworkEdge *, NetworkEdge *))&v43, v5, 1);
  v6 = (uint64_t *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 15) = v6;
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    v10 = (uint64_t)v6;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      CRCHNetwork::storeIncomingEdgeEntry(this, v7 + v8);
      ++v9;
      v7 = *((_QWORD *)this + 11);
      v8 += 80;
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 12) - v7) >> 4));
    v10 = *((_QWORD *)this + 14);
    v6 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v11 = 126 - 2 * __clz(((uint64_t)v6 - v10) >> 3);
  *(_QWORD *)&v43 = compareIncomingEdge;
  if (v6 == (uint64_t *)v10)
    v12 = 0;
  else
    v12 = v11;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v10, v6, (uint64_t (**)(_QWORD))&v43, v12, 1);
  v13 = *((_QWORD *)this + 14);
  v14 = (uint64_t *)*((_QWORD *)this + 15);
  v15 = 126 - 2 * __clz(((uint64_t)v14 - v13) >> 3);
  *(_QWORD *)&v43 = compareIncomingEdge;
  if (v14 == (uint64_t *)v13)
    v16 = 0;
  else
    v16 = v15;
  result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v13, v14, (uint64_t (**)(_QWORD))&v43, v16, 1);
  v18 = (char *)*((_QWORD *)this + 5);
  v19 = (char *)*((_QWORD *)this + 6);
  if (v18 != v19)
  {
    do
    {
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18 += 56;
    }
    while (v18 != v19);
    v18 = (char *)*((_QWORD *)this + 5);
  }
  v21 = (uint64_t *)*((_QWORD *)this + 11);
  v20 = (uint64_t *)*((_QWORD *)this + 12);
  if (v21 == v20)
  {
    v23 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    v22 = (uint64_t *)*((_QWORD *)this + 11);
    do
    {
      ++*(_QWORD *)&v18[56 * *v22];
      ++*(_QWORD *)&v18[56 * v22[1] + 8];
      v22 += 10;
    }
    while (v22 != v20);
    v23 = (char *)*((_QWORD *)this + 6);
    v24 = *v21;
    *(_QWORD *)&v18[56 * v24 + 16] = 0;
    if (v18 != v23)
    {
      v25 = v18;
      do
      {
        *((_QWORD *)v25 + 2) = v24;
        v26 = *(_QWORD *)v25;
        v25 += 56;
        v24 += v26;
      }
      while (v25 != v23);
    }
    *((_QWORD *)v18 + 3) = 0;
  }
  v27 = v23 - v18;
  if (v23 != v18)
  {
    v28 = 0;
    v29 = 0;
    v30 = v27 / 56;
    if (v30 <= 1)
      v30 = 1;
    v31 = v18 + 24;
    do
    {
      *v31 = v29;
      v32 = *(v31 - 2);
      if (!v32 && v28 != *((_QWORD *)this + 4))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        ul2s(v28, (uint64_t)&v40);
        v34 = std::string::insert(&v40, 0, "Node[");
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v41.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v41, "]");
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v42, "has in degree zero but is not marked as an initial node");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v44 = v38->__r_.__value_.__r.__words[2];
        v43 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1D826E0C0](exception, &v43);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v31 += 7;
      v29 += v32;
      ++v28;
    }
    while (v30 != v28);
  }
  return result;
}

void sub_1D5067800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

void CRCHNetwork::trimDeadEdges(CRCHNetwork *this, CRCHNetwork *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  uint64_t i;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  _QWORD **v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  void *v21;
  NetworkEdge *v22;
  NetworkEdge *v23;
  _QWORD *v24;
  _QWORD **v25;
  _QWORD *v26;
  _QWORD **v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  NetworkEdge *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  void *__p;
  _BYTE *v47;
  uint64_t *v48;
  _QWORD *v49[2];
  _QWORD **v50;
  _QWORD *v51[2];
  _OWORD v52[2];
  __int128 v53;
  uint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  const NetworkEdge *v57;
  NetworkEdge *v58;
  unint64_t v59;

  v4 = (_QWORD *)((char *)a2 + 72);
  std::__tree<CRCHuint128>::destroy((uint64_t)a2 + 64, *((_QWORD **)a2 + 9));
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  CRCHSymbolMap::operator=((uint64_t)(v4 + 8), (uint64_t)this + 136);
  v5 = (uint64_t)(v4 - 4);
  std::vector<CRCHNetworkNode>::resize(v5, 0);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v55 = 0;
  v56 = 0;
  v54 = (uint64_t *)&v55;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v50, (uint64_t)this + 64);
  v6 = v50;
  if (v50 != v51)
  {
    do
    {
      std::deque<unsigned long>::push_back(v52, v6 + 4);
      v7 = v6[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v6[2];
          v9 = *v8 == v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != v51);
  }
  for (i = *((_QWORD *)&v53 + 1); *((_QWORD *)&v53 + 1); i = *((_QWORD *)&v53 + 1))
  {
    v48 = 0;
    v11 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)&v52[0] + 1) + (((unint64_t)v53 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v53 & 0x1FF));
    v48 = v11;
    *(_QWORD *)&v53 = v53 + 1;
    *((_QWORD *)&v53 + 1) = i - 1;
    if ((unint64_t)v53 >= 0x400)
    {
      operator delete(**((void ***)&v52[0] + 1));
      *((_QWORD *)&v52[0] + 1) += 8;
      *(_QWORD *)&v53 = v53 - 512;
      v11 = v48;
    }
    v12 = v55;
    if (v55)
    {
      v13 = &v55;
      do
      {
        v14 = v12;
        v15 = v13;
        v16 = v12[4];
        v17 = v12 + 1;
        if (v16 >= (unint64_t)v11)
        {
          v17 = v14;
          v13 = (_QWORD **)v14;
        }
        v12 = (_QWORD *)*v17;
      }
      while (v12);
      if (v13 != &v55)
      {
        if (v16 < (unint64_t)v11)
          v14 = v15;
        if ((unint64_t)v11 >= v14[4])
          continue;
      }
    }
    v18 = *((_QWORD *)this + 5);
    if (*(_QWORD *)(v18 + 56 * (_QWORD)v11 + 8))
    {
      v19 = 0;
      do
      {
        v20 = *(void ***)(*((_QWORD *)this + 14) + 8 * (*(_QWORD *)(v18 + 56 * (_QWORD)v11 + 24) + v19));
        v21 = *v20;
        __p = *v20;
        v22 = v58;
        if ((unint64_t)v58 >= v59)
        {
          v23 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v57, (const NetworkEdge *)v20);
        }
        else
        {
          NetworkEdge::NetworkEdge(v58, (const NetworkEdge *)v20);
          v23 = (NetworkEdge *)((char *)v22 + 80);
        }
        v58 = v23;
        v24 = v55;
        if (!v55)
          goto LABEL_34;
        v25 = &v55;
        do
        {
          v26 = v24;
          v27 = v25;
          v28 = v24[4];
          v29 = v24 + 1;
          if (v28 >= (unint64_t)v21)
          {
            v29 = v26;
            v25 = (_QWORD **)v26;
          }
          v24 = (_QWORD *)*v29;
        }
        while (v24);
        if (v25 == &v55)
          goto LABEL_34;
        if (v28 < (unint64_t)v21)
          v26 = v27;
        if ((unint64_t)v21 < v26[4])
LABEL_34:
          std::deque<unsigned long>::push_back(v52, &__p);
        ++v19;
        v11 = v48;
        v18 = *((_QWORD *)this + 5);
      }
      while (v19 < *(_QWORD *)(v18 + 56 * (_QWORD)v48 + 8));
    }
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v54, (unint64_t *)&v48, (uint64_t *)&v48);
  }
  v30 = v56;
  std::vector<CRCHNetworkNode>::resize(v5, v56);
  v49[0] = 0;
  v49[1] = 0;
  v48 = (uint64_t *)v49;
  std::vector<unsigned long>::vector(&__p, v30);
  v31 = v54;
  v32 = __p;
  if (v54 != (uint64_t *)&v55)
  {
    v33 = 0;
    do
    {
      v32[v33] = v31[4];
      v34 = (uint64_t *)v31[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (uint64_t *)v31[2];
          v9 = *v35 == (_QWORD)v31;
          v31 = v35;
        }
        while (!v9);
      }
      ++v33;
      v31 = v35;
    }
    while (v35 != (uint64_t *)&v55);
  }
  if (v47 != (_BYTE *)v32)
  {
    v36 = 0;
    v37 = 0;
    do
    {
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v48, v32[v36], &v32[v36])[5] = v37++;
      v32 = __p;
      ++v36;
    }
    while (v37 < (v47 - (_BYTE *)__p) >> 3);
  }
  v38 = (unint64_t *)v57;
  v39 = v58;
  while (v38 != (unint64_t *)v39)
  {
    *v38 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v48, *v38, (uint64_t *)v38)[5];
    v41 = v38[1];
    v40 = (uint64_t *)(v38 + 1);
    *v40 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v48, v41, v40)[5];
    v38 = (unint64_t *)(v40 + 9);
  }
  v42 = (uint64_t *)v50;
  if (v50 != v51)
  {
    do
    {
      v43 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v48, v42[4], v42 + 4);
      CRCHNetwork::setFinal((uint64_t **)a2, v43[5]);
      v44 = (uint64_t *)v42[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (uint64_t *)v42[2];
          v9 = *v45 == (_QWORD)v42;
          v42 = v45;
        }
        while (!v9);
      }
      v42 = v45;
    }
    while (v45 != (uint64_t *)v51);
  }
  CRCHNetwork::insertEdges(a2, &v57);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&v48, v49[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v50, v51[0]);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v52);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v54, v55);
  *(_QWORD *)&v52[0] = &v57;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
}

void sub_1D5067CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  if (__p)
    operator delete(__p);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a13, a14);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a16, a17);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a19);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a25, a26);
  a19 = v26 - 104;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t CRCHSymbolMap::operator=(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  void **v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *i;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t **leaf_high;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  char *v29;
  uint64_t *v30;
  const void **v31;
  __int128 v32;
  uint64_t **v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;

  if (a1 == a2)
    return a1;
  v5 = (void **)(a1 + 8);
  v4 = *(std::string **)(a1 + 8);
  v7 = *(__int128 **)(a2 + 8);
  v6 = *(__int128 **)(a2 + 16);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
  v9 = *(_QWORD *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v4) >> 3) >= v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v4) >> 3) >= v8)
    {
      v17 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(*(std::string **)(a2 + 8), *(std::string **)(a2 + 16), v4);
      for (i = *(std::string **)(a1 + 16); i != v17; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      *(_QWORD *)(a1 + 16) = v17;
      goto LABEL_21;
    }
    v16 = (std::string *)((char *)v7 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v4) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(*(std::string **)(a2 + 8), v16, v4);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(a1 + 24, (__int128 *)v16, v6, *(std::string **)(a1 + 16));
  }
  else
  {
    if (v4)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 8));
      operator delete(*v5);
      v9 = 0;
      *v5 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_50;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v8)
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_50:
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 24, v12);
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = &v13[v14];
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(a1 + 24, v7, v6, v13);
  }
  *(_QWORD *)(a1 + 16) = v15;
LABEL_21:
  v19 = *(_QWORD **)(a2 + 32);
  v20 = (_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 48))
  {
    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(_QWORD **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = a1 + 40;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (v22[1])
      v23 = (_QWORD *)v22[1];
    else
      v23 = v22;
    v38 = a1 + 32;
    v39 = v23;
    v40 = v23;
    if (!v23
      || (v39 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v23),
          v19 == v20))
    {
      v27 = v19;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v23 + 4), (const std::string *)(v19 + 4));
        v23[7] = v19[7];
        v24 = v40;
        leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_leaf_high(a1 + 32, &v37, (const void **)v40 + 4);
        std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(a1 + 32), v37, leaf_high, v24);
        v23 = v39;
        v40 = v39;
        if (v39)
          v39 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v39);
        v26 = (_QWORD *)v19[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v19[2];
            v28 = *v27 == (_QWORD)v19;
            v19 = v27;
          }
          while (!v28);
        }
        if (!v23)
          break;
        v19 = v27;
      }
      while (v27 != v20);
    }
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v38);
    v19 = v27;
  }
  if (v19 != v20)
  {
    do
    {
      v29 = (char *)operator new(0x40uLL);
      v30 = (uint64_t *)v29;
      v39 = (_QWORD *)(a1 + 40);
      LOBYTE(v40) = 0;
      v31 = (const void **)(v29 + 32);
      if (*((char *)v19 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v29 + 32), (const std::string::value_type *)v19[4], v19[5]);
      }
      else
      {
        v32 = *((_OWORD *)v19 + 2);
        *((_QWORD *)v29 + 6) = v19[6];
        *(_OWORD *)v31 = v32;
      }
      v30[7] = v19[7];
      v33 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_leaf_high(a1 + 32, &v37, v31);
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(a1 + 32), v37, v33, v30);
      v34 = (_QWORD *)v19[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v19[2];
          v28 = *v35 == (_QWORD)v19;
          v19 = v35;
        }
        while (!v28);
      }
      v19 = v35;
    }
    while (v35 != v20);
  }
  return a1;
}

void sub_1D50680EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 16) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *CRCHNetwork::setFinal(uint64_t **this, unint64_t a2)
{
  uint64_t *result;
  uint64_t *v4;
  unint64_t v5;

  v5 = a2;
  result = std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(this + 8, &v5, (uint64_t *)&v5);
  v4 = this[5];
  if (0x6DB6DB6DB6DB6DB7 * (this[6] - v4) >= v5)
    LOBYTE(v4[7 * v5 + 6]) = 1;
  return result;
}

uint64_t CRCHNetwork::insertEdges(CRCHNetwork *a1, const NetworkEdge **a2)
{
  const NetworkEdge *v4;
  const NetworkEdge *v5;

  CRCHNetwork::mergeEquivalentEdges((uint64_t)a1, (uint64_t)a2);
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    CRCHNetwork::storeEntry(a1, v4);
    v4 = (const NetworkEdge *)((char *)v4 + 80);
  }
  return CRCHNetwork::prepareNetwork(a1);
}

uint64_t CRCHNetwork::findNextNonZeroOutDegree(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD **)(a3 + 8);
  v7 = (_QWORD *)(a3 + 8);
  v8 = v9;
  while (1)
  {
    v10 = *(_QWORD *)(v6 + 56 * a6);
    if (!v10)
      return -1;
    a6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 80 * (*(_QWORD *)(v6 + 56 * a6 + 16) + v10) + 8);
    if (!v8)
      goto LABEL_14;
    v11 = v7;
    v12 = v8;
    do
    {
      v13 = v12[4];
      v14 = v13 >= a6;
      if (v13 >= a6)
        v15 = v12;
      else
        v15 = v12 + 1;
      if (v14)
        v11 = v12;
      v12 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v11 == v7 || a6 < v11[4])
LABEL_14:
      v11 = v7;
    v16 = v11[5];
    if (*(_BYTE *)(v6 + 56 * a6 + 48) || *(_QWORD *)(*a2 + 8 * v16))
      return v16;
  }
}

uint64_t CRCHNetwork::pushWeightsFromEmptyEdges(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *__p;
  _OWORD v29[2];
  __int128 v30;

  v2 = *(_QWORD *)(this + 48) - *(_QWORD *)(this + 40);
  if (v2)
  {
    v4 = this;
    v30 = 0u;
    memset(v29, 0, sizeof(v29));
    std::vector<BOOL>::vector(&__p, 0x6DB6DB6DB6DB6DB7 * (v2 >> 3));
    v27 = 0;
    std::deque<unsigned long>::push_back(v29, &v27);
    v5 = __p;
    *(_QWORD *)__p |= 1uLL;
    v6 = *((_QWORD *)&v30 + 1);
    if (!*((_QWORD *)&v30 + 1))
      goto LABEL_19;
    do
    {
      v7 = v6 - 1;
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v29[0] + 1) + (((unint64_t)(v30 + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v30 + v7) & 0x1FF));
      *((_QWORD *)&v30 + 1) = v7;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v29, 1);
      v9 = *(_QWORD *)(v4 + 40);
      if (*(_QWORD *)(v9 + 56 * v8))
      {
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(v9 + 56 * v8 + 16) + v10;
          v12 = *(_QWORD *)(v4 + 88);
          v13 = v12 + 80 * v11;
          v14 = *(_QWORD *)(v13 + 8);
          v27 = v14;
          if (!*(_QWORD *)(v13 + 24))
          {
            if (!*(_BYTE *)(v9 + 56 * v14 + 48))
            {
              v15 = (unint64_t *)(v9 + 56 * v14);
              if (*v15)
              {
                v16 = 0;
                v17 = v12 + 80 * v11;
                v18 = (double *)(v17 + 32);
                v19 = (_QWORD *)(v17 + 40);
                v20 = (_QWORD *)(v9 + 56 * v14 + 16);
                do
                {
                  v21 = v12 + 80 * (v16 + *v20);
                  *(double *)(v21 + 32) = *v18 + *(double *)(v21 + 32);
                  v22 = *(_QWORD *)(v21 + 40);
                  v23 = *v19 + v22;
                  if (a2)
                    v22 += *v19;
                  *(_QWORD *)(v21 + 40) = v23;
                  *(_QWORD *)(v21 + 48) = v22;
                  ++v16;
                }
                while (*v15 > v16);
              }
              v24 = v12 + 80 * v11;
              *(_QWORD *)(v24 + 40) = 0;
              *(_QWORD *)(v24 + 48) = 0;
            }
            *(_QWORD *)(v12 + 80 * v11 + 32) = 0;
          }
          v25 = v14 >> 6;
          v26 = 1 << v14;
          if ((*((_QWORD *)__p + (v14 >> 6)) & (1 << v14)) == 0)
          {
            std::deque<unsigned long>::push_back(v29, &v27);
            *((_QWORD *)__p + v25) |= v26;
          }
          ++v10;
          v9 = *(_QWORD *)(v4 + 40);
        }
        while (v10 < *(_QWORD *)(v9 + 56 * v8));
      }
      v6 = *((_QWORD *)&v30 + 1);
    }
    while (*((_QWORD *)&v30 + 1));
    v5 = __p;
    if (__p)
LABEL_19:
      operator delete(v5);
    return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v29);
  }
  return this;
}

void sub_1D50684A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

BOOL CRCHNetwork::checkSingleEmptyIncomingEdgeForNode(CRCHNetwork *this, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 5);
  v4 = v3 + 56 * a2;
  v7 = *(_QWORD *)(v4 + 8);
  v5 = (unint64_t *)(v4 + 8);
  v6 = v7;
  if (v7 < 2)
    return 1;
  v9 = 0;
  v10 = (_QWORD *)(v3 + 56 * a2 + 24);
  v11 = *((_QWORD *)this + 14);
  do
  {
    if (!*(_QWORD *)(*(_QWORD *)(v11 + 8 * (v9 + *v10)) + 24))
    {
      ++*a3;
      v6 = *v5;
    }
    ++v9;
  }
  while (v9 < v6);
  return *a3 == 0;
}

void CRCHNetwork::guaranteeSingleEmptyIncomingEdgePerNode(CRCHNetwork *this)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *j;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD **v17;
  BOOL v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD **v21;
  _QWORD *v22;
  _QWORD **v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  const NetworkEdge *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *m;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD **v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *k;
  NetworkEdge *v42;
  NetworkEdge *v43;
  NetworkEdge *v44;
  NetworkEdge *v45;
  uint64_t *v46;
  NetworkEdge *v47;
  NetworkEdge *v48;
  _QWORD *v49;
  _QWORD **v50;
  _QWORD *v51;
  _QWORD **v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD **v55;
  _QWORD *v56;
  _QWORD **v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60[2];
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  void *__p;
  _BYTE *v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD **v69;
  _QWORD *v70[2];
  uint64_t *v71;
  _QWORD *v72[2];
  _OWORD v73[2];
  __int128 v74;
  uint64_t *v75;
  _QWORD *v76[2];
  uint64_t *v77;
  _QWORD *v78[2];
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  const NetworkEdge *v82;
  NetworkEdge *v83;
  unint64_t v84;

  v1 = *((_QWORD *)this + 5);
  v59 = (uint64_t *)((char *)this + 40);
  for (i = *((_QWORD *)this + 6) - v1; i; i = *((_QWORD *)this + 6) - v1)
  {
    v4 = 0;
    v5 = (unsigned __int128)(i * (__int128)0x4924924924924925) >> 64;
    v6 = (v5 >> 4) + ((unint64_t)v5 >> 63);
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = (v5 >> 4) + ((unint64_t)v5 >> 63);
    for (j = (_BYTE *)(v1 + 48); ; j += 56)
    {
      if (!*j)
      {
        v60[0] = 0;
        if (!CRCHNetwork::checkSingleEmptyIncomingEdgeForNode(this, v4, v60))
          break;
      }
      if (v7 == ++v4)
        return;
    }
    v9 = v60[0] == *((_QWORD *)j - 5);
    v10 = v60[0] - v9;
    if (v60[0] == v9)
      return;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v79 = &v79;
    v80 = &v79;
    v81 = 0;
    v11 = operator new(0x18uLL);
    v11[1] = &v79;
    v11[2] = v4;
    *v11 = &v79;
    v79 = v11;
    v80 = v11;
    v81 = 1;
    v58 = v10 + v6;
    if (v6 < v10 + v6)
    {
      v12 = 0;
      do
      {
        v13 = operator new(0x18uLL);
        v13[1] = &v79;
        v13[2] = v6 + v12;
        *v13 = v11;
        v11[1] = v13;
        v14 = v12 + 2;
        ++v12;
        v11 = v13;
        v79 = v13;
        v81 = v14;
      }
      while (v10 != v12);
    }
    v78[0] = 0;
    v78[1] = 0;
    v77 = (uint64_t *)v78;
    v76[0] = 0;
    v76[1] = 0;
    v75 = (uint64_t *)v76;
    v74 = 0u;
    memset(v73, 0, sizeof(v73));
    v72[0] = 0;
    v72[1] = 0;
    v71 = (uint64_t *)v72;
    std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v69, (uint64_t)(v59 + 3));
    v15 = v69;
    if (v69 != v70)
    {
      do
      {
        std::deque<unsigned long>::push_back(v73, v15 + 4);
        v16 = v15[1];
        if (v16)
        {
          do
          {
            v17 = (_QWORD **)v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD **)v15[2];
            v18 = *v17 == v15;
            v15 = v17;
          }
          while (!v18);
        }
        v15 = v17;
      }
      while (v17 != v70);
    }
LABEL_89:
    while (*((_QWORD *)&v74 + 1))
    {
      v68 = 0;
      v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v73[0] + 1) + (((unint64_t)v74 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v74 & 0x1FF));
      v68 = v19;
      *(_QWORD *)&v74 = v74 + 1;
      --*((_QWORD *)&v74 + 1);
      if ((unint64_t)v74 >= 0x400)
      {
        operator delete(**((void ***)&v73[0] + 1));
        *((_QWORD *)&v73[0] + 1) += 8;
        *(_QWORD *)&v74 = v74 - 512;
        v19 = v68;
      }
      v20 = v72[0];
      if (v72[0])
      {
        v21 = v72;
        do
        {
          v22 = v20;
          v23 = v21;
          v24 = v20[4];
          v25 = v20 + 1;
          if (v24 >= v19)
          {
            v25 = v22;
            v21 = (_QWORD **)v22;
          }
          v20 = (_QWORD *)*v25;
        }
        while (v20);
        if (v21 != v72)
        {
          if (v24 < v19)
            v22 = v23;
          if (v19 >= v22[4])
            continue;
        }
      }
      v26 = *v59;
      if (!*(_QWORD *)(*v59 + 56 * v19 + 8))
        goto LABEL_88;
      v27 = 0;
      while (1)
      {
        v28 = *(const NetworkEdge **)(*((_QWORD *)this + 14) + 8 * (*(_QWORD *)(v26 + 56 * v19 + 24) + v27));
        v29 = *((_QWORD *)this + 11);
        v31 = *(_QWORD *)v28;
        v30 = *((_QWORD *)v28 + 1);
        v67 = *(_QWORD *)v28;
        if (v30 != v4)
        {
          if (v31 == v4)
          {
            for (k = v80; k != &v79; k = (_QWORD *)k[1])
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)v60, v28);
              if (k[2] != *(_QWORD *)v28)
                v60[0] = k[2];
              v42 = v83;
              if ((unint64_t)v83 >= v84)
              {
                v43 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v82, (const NetworkEdge *)v60);
              }
              else
              {
                *(_OWORD *)v83 = *(_OWORD *)v60;
                *((_OWORD *)v42 + 1) = v61;
                *((_QWORD *)v42 + 4) = v62;
                *(_OWORD *)((char *)v42 + 40) = v63;
                *((_QWORD *)v42 + 8) = 0;
                *((_QWORD *)v42 + 9) = 0;
                *((_QWORD *)v42 + 7) = 0;
                std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)v42 + 7, __p, (uint64_t)v65, (v65 - (_BYTE *)__p) >> 3);
                v43 = (NetworkEdge *)((char *)v42 + 80);
              }
              v83 = v43;
              if (__p)
              {
                v65 = __p;
                operator delete(__p);
              }
            }
          }
          else
          {
            v44 = v83;
            if ((unint64_t)v83 >= v84)
            {
              v45 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v82, v28);
            }
            else
            {
              NetworkEdge::NetworkEdge(v83, v28);
              v45 = (NetworkEdge *)((char *)v44 + 80);
            }
            v83 = v45;
          }
          goto LABEL_77;
        }
        v32 = *(_QWORD *)(v29 + 16 * (((uint64_t)v28 - v29) >> 4) + 24);
        v66 = 0;
        for (m = v80; ; m = (_QWORD *)m[1])
        {
          if (m == &v79)
          {
            v34 = 0;
            goto LABEL_68;
          }
          v34 = (uint64_t *)m[2];
          v60[0] = (unint64_t)v34;
          v35 = v78[0];
          if (!v78[0])
            goto LABEL_47;
          v36 = v78;
          do
          {
            v37 = v35;
            v38 = v36;
            v39 = v35[4];
            v40 = v35 + 1;
            if (v39 >= (unint64_t)v34)
            {
              v40 = v37;
              v36 = (_QWORD **)v37;
            }
            v35 = (_QWORD *)*v40;
          }
          while (v35);
          if (v36 == v78)
            goto LABEL_47;
          if (v39 < (unint64_t)v34)
            v37 = v38;
          if ((unint64_t)v34 < v37[4])
          {
LABEL_47:
            std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v75, (unint64_t)v34, (uint64_t *)v60)[5] = 0;
            *((_BYTE *)std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v77, (unint64_t)v34, (uint64_t **)v60)+ 40) = 0;
          }
          if (!v32)
            break;
          if (!*((_BYTE *)std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v77, (unint64_t)v34, (uint64_t **)v60)+ 40))goto LABEL_67;
LABEL_52:
          ;
        }
        if (std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v75, (unint64_t)v34, (uint64_t *)v60)[5])goto LABEL_52;
LABEL_67:
        v66 = v34;
LABEL_68:
        NetworkEdge::NetworkEdge((NetworkEdge *)v60, v28);
        v60[1] = (unint64_t)v34;
        v46 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v75, (unint64_t)v34, (uint64_t *)&v66);
        ++v46[5];
        if (!v32)
          *((_BYTE *)std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v77, (unint64_t)v34, &v66)+ 40) = 1;
        v47 = v83;
        if ((unint64_t)v83 >= v84)
        {
          v48 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v82, (const NetworkEdge *)v60);
        }
        else
        {
          *(_OWORD *)v83 = *(_OWORD *)v60;
          *((_OWORD *)v47 + 1) = v61;
          *((_QWORD *)v47 + 4) = v62;
          *(_OWORD *)((char *)v47 + 40) = v63;
          *((_QWORD *)v47 + 8) = 0;
          *((_QWORD *)v47 + 9) = 0;
          *((_QWORD *)v47 + 7) = 0;
          std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)v47 + 7, __p, (uint64_t)v65, (v65 - (_BYTE *)__p) >> 3);
          v48 = (NetworkEdge *)((char *)v47 + 80);
        }
        v83 = v48;
        if (__p)
        {
          v65 = __p;
          operator delete(__p);
        }
LABEL_77:
        v49 = v72[0];
        if (!v72[0])
          goto LABEL_86;
        v50 = v72;
        do
        {
          v51 = v49;
          v52 = v50;
          v53 = v49[4];
          v54 = v49 + 1;
          if (v53 >= v31)
          {
            v54 = v51;
            v50 = (_QWORD **)v51;
          }
          v49 = (_QWORD *)*v54;
        }
        while (v49);
        if (v50 == v72)
          goto LABEL_86;
        if (v53 < v31)
          v51 = v52;
        if (v31 < v51[4])
LABEL_86:
          std::deque<unsigned long>::push_back(v73, &v67);
        ++v27;
        v19 = v68;
        v26 = *v59;
        if (v27 >= *(_QWORD *)(*v59 + 56 * v68 + 8))
        {
LABEL_88:
          std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v71, &v68, (uint64_t *)&v68);
          goto LABEL_89;
        }
      }
    }
    std::vector<CRCHNetworkNode>::resize((uint64_t)v59, 0);
    std::vector<NetworkEdge>::resize(v59 + 6, 0);
    *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
    std::vector<CRCHNetworkNode>::resize((uint64_t)v59, v58);
    CRCHNetwork::insertEdges(this, &v82);
    v55 = v69;
    if (v69 != v70)
    {
      do
      {
        CRCHNetwork::setFinal((uint64_t **)this, (unint64_t)v55[4]);
        v56 = v55[1];
        if (v56)
        {
          do
          {
            v57 = (_QWORD **)v56;
            v56 = (_QWORD *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (_QWORD **)v55[2];
            v18 = *v57 == v55;
            v55 = v57;
          }
          while (!v18);
        }
        v55 = v57;
      }
      while (v57 != v70);
    }
    std::__tree<CRCHuint128>::destroy((uint64_t)&v69, v70[0]);
    std::__tree<CRCHuint128>::destroy((uint64_t)&v71, v72[0]);
    std::deque<std::pair<int,int>>::~deque[abi:ne180100](v73);
    std::__tree<CRCHuint128>::destroy((uint64_t)&v75, v76[0]);
    std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v78[0]);
    std::__list_imp<unsigned long>::clear(&v79);
    v60[0] = (unint64_t)&v82;
    std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
    v1 = *((_QWORD *)this + 5);
  }
}

void sub_1D5068C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,_QWORD *a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  std::__tree<CRCHuint128>::destroy((uint64_t)&a34, a35);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a37);
  std::__tree<CRCHuint128>::destroy(v37 - 184, *(_QWORD **)(v37 - 176));
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(_QWORD **)(v37 - 152));
  std::__list_imp<unsigned long>::clear((_QWORD *)(v37 - 136));
  a17 = v37 - 112;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void std::vector<NetworkEdge>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v17 = v4 + 80 * a2;
      while (v5 != v17)
      {
        v18 = *(void **)(v5 - 24);
        if (v18)
        {
          *(_QWORD *)(v5 - 16) = v18;
          operator delete(v18);
        }
        v5 -= 80;
      }
      a1[1] = v17;
    }
  }
  else
  {
    v8 = (uint64_t)(a1 + 2);
    v9 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v9 - v5) >> 4) >= v7)
    {
      v19 = v5 + 80 * v7;
      v20 = 80 * a2 - 80 * v6;
      v21 = (_QWORD *)(v5 + 56);
      do
      {
        *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        v21 += 10;
        v20 -= 80;
      }
      while (v20);
      a1[1] = v19;
    }
    else
    {
      if (a2 > 0x333333333333333)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v4) >> 4);
      v11 = 2 * v10;
      if (2 * v10 <= a2)
        v11 = a2;
      if (v10 >= 0x199999999999999)
        v12 = 0x333333333333333;
      else
        v12 = v11;
      v26 = a1 + 2;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v8, v12);
      v22 = v13;
      v23 = &v13[80 * v6];
      v25 = &v13[80 * v14];
      v15 = 80 * a2 - 80 * v6;
      v16 = v23 + 56;
      do
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        v16 += 10;
        v15 -= 80;
      }
      while (v15);
      v24 = &v13[80 * a2];
      std::vector<NetworkEdge>::__swap_out_circular_buffer(a1, &v22);
      std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)&v22);
    }
  }
}

void sub_1D5068EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CRCHNetwork::removeEpsOutputEdges(CRCHNetwork *this, CRCHNetwork *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  _QWORD **v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD **v28;
  _QWORD *v29;
  _QWORD **v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD **v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  _QWORD **v45;
  _QWORD *v46;
  _QWORD **v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD **v53;
  _QWORD *v54;
  _QWORD **v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const NetworkEdge *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD **v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  BOOL v78;
  unint64_t v79;
  uint64_t *i;
  uint64_t *v81;
  uint64_t NextNonZeroOutDegree;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  const NetworkEdge *v86;
  const NetworkEdge *v87;
  unint64_t v88;
  _QWORD *v89;
  char *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _OWORD *v94;
  _QWORD *v95;
  _OWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t *v100;
  const NetworkEdge *v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t **v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t **v116;
  uint64_t *v117;
  uint64_t **v118;
  unint64_t v119;
  uint64_t **v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  _QWORD *v125;
  unint64_t v126;
  CRCHNetwork *v127;
  unint64_t v128;
  BOOL v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t **v134;
  _QWORD *v135;
  CRCHNetwork *v136;
  CRCHNetwork *v137;
  int v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  std::string v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *__p;
  _BYTE *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  _QWORD *v155[2];
  _QWORD v156[4];
  __int128 v157;
  void *v158[3];
  uint64_t *v159;
  _QWORD *v160[2];
  uint64_t *v161;
  _QWORD *v162[2];
  uint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  const NetworkEdge *v166;
  const NetworkEdge *v167;
  unint64_t v168;

  CRCHNetwork::guaranteeSingleEmptyIncomingEdgePerNode(this);
  v138 = a3;
  CRCHNetwork::pushWeightsFromEmptyEdges((uint64_t)this, a3);
  v137 = a2;
  v6 = (_QWORD *)*((_QWORD *)a2 + 9);
  a2 = (CRCHNetwork *)((char *)a2 + 72);
  v134 = (uint64_t **)((char *)a2 - 8);
  std::__tree<CRCHuint128>::destroy((uint64_t)a2 - 8, v6);
  *((_QWORD *)a2 - 1) = a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v135 = (_QWORD *)((char *)a2 - 32);
  v136 = a2;
  std::vector<CRCHNetworkNode>::resize((uint64_t)a2 - 32, 0);
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v8 = *((_QWORD *)this + 5);
  v7 = *((_QWORD *)this + 6);
  v164 = 0;
  v165 = 0;
  v162[1] = 0;
  v163 = (uint64_t *)&v164;
  v161 = (uint64_t *)v162;
  v162[0] = 0;
  std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v159, (uint64_t)this + 64);
  std::vector<unsigned long>::vector(v158, 0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 3));
  v157 = 0u;
  memset(v156, 0, sizeof(v156));
  v155[0] = 0;
  v155[1] = 0;
  v154 = (uint64_t *)v155;
  *(_QWORD *)&v143 = 0;
  std::deque<unsigned long>::push_back(v156, &v143);
  v9 = *((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v10 = 0;
    do
    {
      v139 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(v156[1] + (((unint64_t)v157 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v157 & 0x1FF));
      v139 = v11;
      *(_QWORD *)&v157 = v157 + 1;
      *((_QWORD *)&v157 + 1) = v9 - 1;
      if ((unint64_t)v157 >= 0x400)
      {
        operator delete(*(void **)v156[1]);
        v156[1] += 8;
        *(_QWORD *)&v157 = v157 - 512;
        v11 = v139;
      }
      v12 = v155[0];
      if (!v155[0])
        goto LABEL_14;
      v13 = v155;
      do
      {
        v14 = v12;
        v15 = v13;
        v16 = v12[4];
        v17 = v12 + 1;
        if (v16 >= v11)
        {
          v17 = v14;
          v13 = (_QWORD **)v14;
        }
        v12 = (_QWORD *)*v17;
      }
      while (v12);
      if (v13 == v155)
        goto LABEL_14;
      if (v16 < v11)
        v14 = v15;
      if (v11 < v14[4])
      {
LABEL_14:
        v18 = *((_QWORD *)this + 5);
        if (*(_QWORD *)(v18 + 56 * v11))
        {
          v19 = 0;
          do
          {
            v20 = *(_QWORD *)(v18 + 56 * v11 + 16) + v19;
            v21 = *((_QWORD *)this + 11);
            v22 = (unint64_t *)(v21 + 80 * v20);
            v23 = *v22;
            v25 = v22[3];
            v24 = v22 + 3;
            v26 = *(v24 - 2);
            v152 = v26;
            v153 = v23;
            v27 = v164;
            if (v25)
            {
              if (!v164)
                goto LABEL_27;
              v28 = &v164;
              do
              {
                v29 = v27;
                v30 = v28;
                v31 = v27[4];
                v32 = v27 + 1;
                if (v31 >= v23)
                {
                  v32 = v29;
                  v28 = (_QWORD **)v29;
                }
                v27 = (_QWORD *)*v32;
              }
              while (v27);
              if (v28 == &v164 || (v31 >= v23 ? (v33 = v29) : (v33 = v30), v23 < v33[4]))
LABEL_27:
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v23, (uint64_t *)&v153)[5] = v10++;
              v34 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v23, (uint64_t *)&v153)[5];
              v35 = v164;
              if (!v164)
                goto LABEL_37;
              v36 = &v164;
              do
              {
                v37 = v35;
                v38 = v36;
                v39 = v35[4];
                v40 = v35 + 1;
                if (v39 >= v26)
                {
                  v40 = v37;
                  v36 = (_QWORD **)v37;
                }
                v35 = (_QWORD *)*v40;
              }
              while (v35);
              if (v36 == &v164)
                goto LABEL_37;
              if (v39 < v26)
                v37 = v38;
              if (v26 < v37[4])
LABEL_37:
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v26, (uint64_t *)&v152)[5] = v10++;
              v41 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v26, (uint64_t *)&v152)[5];
              ++*((_QWORD *)v158[0] + v34);
              __p = 0;
              v150 = 0;
              v151 = 0;
              *(_QWORD *)&v143 = v34;
              *((_QWORD *)&v143 + 1) = v41;
              v42 = *((_QWORD *)this + 18) + 24 * *v24;
              v43 = sh2i(v42);
              if (*(char *)(v42 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)v42, *(_QWORD *)(v42 + 8));
              }
              else
              {
                v44 = *(_OWORD *)v42;
                v142.__r_.__value_.__r.__words[2] = *(_QWORD *)(v42 + 16);
                *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v44;
              }
              v58 = CRCHSymbolMap::store((_QWORD *)v137 + 17, (__int128 *)&v142);
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v142.__r_.__value_.__l.__data_);
              v59 = v43;
              if (!v138)
                v59 = v58;
              v144 = v59;
              v145 = v58;
              v60 = (_QWORD *)(v21 + 80 * v20);
              v61 = v60[4];
              v146 = v61;
              v62 = v60[5];
              v147 = v62;
              v63 = v60[6];
              v148 = v63;
              v64 = v167;
              if ((unint64_t)v167 >= v168)
              {
                v65 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v166, (const NetworkEdge *)&v143);
              }
              else
              {
                *(_OWORD *)v167 = v143;
                *((_QWORD *)v64 + 2) = v59;
                *((_QWORD *)v64 + 3) = v58;
                *((_QWORD *)v64 + 4) = v61;
                *((_QWORD *)v64 + 5) = v62;
                *((_QWORD *)v64 + 6) = v63;
                *((_QWORD *)v64 + 8) = 0;
                *((_QWORD *)v64 + 9) = 0;
                *((_QWORD *)v64 + 7) = 0;
                std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)v64 + 7, __p, (uint64_t)v150, (v150 - (_BYTE *)__p) >> 3);
                v65 = (uint64_t)v64 + 80;
              }
              v167 = (const NetworkEdge *)v65;
              if (__p)
              {
                v150 = __p;
                operator delete(__p);
              }
            }
            else
            {
              if (!v164)
                goto LABEL_50;
              v45 = &v164;
              do
              {
                v46 = v27;
                v47 = v45;
                v48 = v27[4];
                v49 = v27 + 1;
                if (v48 >= v23)
                {
                  v49 = v46;
                  v45 = (_QWORD **)v46;
                }
                v27 = (_QWORD *)*v49;
              }
              while (v27);
              if (v45 == &v164 || (v48 >= v23 ? (v50 = v46) : (v50 = v47), v23 < v50[4]))
LABEL_50:
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v23, (uint64_t *)&v153)[5] = v10++;
              v51 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v23, (uint64_t *)&v153)[5];
              v52 = v164;
              if (!v164)
                goto LABEL_60;
              v53 = &v164;
              do
              {
                v54 = v52;
                v55 = v53;
                v56 = v52[4];
                v57 = v52 + 1;
                if (v56 >= v26)
                {
                  v57 = v54;
                  v53 = (_QWORD **)v54;
                }
                v52 = (_QWORD *)*v57;
              }
              while (v52);
              if (v53 == &v164)
                goto LABEL_60;
              if (v56 < v26)
                v54 = v55;
              if (v26 < v54[4])
LABEL_60:
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v26, (uint64_t *)&v152)[5] = v51;
            }
            v66 = v155[0];
            if (!v155[0])
              goto LABEL_80;
            v67 = v155;
            do
            {
              v68 = v66;
              v69 = v67;
              v70 = v66[4];
              v71 = v66 + 1;
              if (v70 >= v26)
              {
                v71 = v68;
                v67 = (_QWORD **)v68;
              }
              v66 = (_QWORD *)*v71;
            }
            while (v66);
            if (v67 == v155)
              goto LABEL_80;
            if (v70 < v26)
              v68 = v69;
            if (v26 < v68[4])
LABEL_80:
              std::deque<unsigned long>::push_back(v156, &v152);
            ++v19;
            v11 = v139;
            v18 = *((_QWORD *)this + 5);
          }
          while (v19 < *(_QWORD *)(v18 + 56 * v139));
        }
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v154, &v139, (uint64_t *)&v139);
      }
      v9 = *((_QWORD *)&v157 + 1);
    }
    while (*((_QWORD *)&v157 + 1));
  }
  else
  {
    v10 = 0;
  }
  if (v165)
  {
    *(_QWORD *)&v143 = 0;
    if (*((_QWORD *)this + 6) != *((_QWORD *)this + 5))
    {
      v72 = 0;
      do
      {
        v139 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v72, (uint64_t *)&v143)[5];
        std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v161, v139, (uint64_t *)&v139)[5] = v72++;
        *(_QWORD *)&v143 = v72;
      }
      while (v72 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3));
    }
  }
  std::vector<CRCHNetworkNode>::resize((uint64_t)v135, v10);
  v73 = v159;
  if (v159 == (uint64_t *)v160)
  {
    v79 = -1;
  }
  else
  {
    do
    {
      v74 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v73[4], v73 + 4);
      CRCHNetwork::setFinal((uint64_t **)v137, v74[5]);
      v75 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v163, v73[4], v73 + 4);
      v76 = (uint64_t *)v73[1];
      if (v76)
      {
        do
        {
          v77 = v76;
          v76 = (uint64_t *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (uint64_t *)v73[2];
          v78 = *v77 == (_QWORD)v73;
          v73 = v77;
        }
        while (!v78);
      }
      v73 = v77;
    }
    while (v77 != (uint64_t *)v160);
    v79 = v75[5];
  }
  *((_QWORD *)&v143 + 1) = 0;
  v144 = 0;
  *(_QWORD *)&v143 = (char *)&v143 + 8;
  v139 = 0;
  if (v10)
  {
    for (i = 0; (unint64_t)i < v10; v139 = (unint64_t)i)
    {
      if (!*((_QWORD *)v158[0] + (_QWORD)i))
      {
        if ((uint64_t *)v79 == i)
        {
          v81 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v143, v79, (uint64_t *)&v139);
          NextNonZeroOutDegree = v79;
        }
        else
        {
          v83 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v161, (unint64_t)i, (uint64_t *)&v139);
          NextNonZeroOutDegree = CRCHNetwork::findNextNonZeroOutDegree((uint64_t)this, v158, (uint64_t)&v163, v84, v85, v83[5]);
          v81 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v143, (unint64_t)i, (uint64_t *)&v139);
        }
        v81[5] = NextNonZeroOutDegree;
      }
      i = (uint64_t *)((char *)i + 1);
    }
  }
  v86 = v166;
  v87 = v167;
  if (v167 != v166)
  {
    v88 = 0;
    do
    {
      v89 = (_QWORD *)*((_QWORD *)&v143 + 1);
      if (*((_QWORD *)&v143 + 1))
      {
        v90 = (char *)v86 + 80 * v88;
        v93 = *((_QWORD *)v90 + 1);
        v91 = (unint64_t *)(v90 + 8);
        v92 = v93;
        v94 = (__int128 *)((char *)&v143 + 8);
        do
        {
          v95 = v89;
          v96 = v94;
          v97 = v89[4];
          v98 = v89 + 1;
          if (v97 >= v92)
          {
            v98 = v95;
            v94 = v95;
          }
          v89 = (_QWORD *)*v98;
        }
        while (v89);
        if (v94 != (__int128 *)((char *)&v143 + 8))
        {
          if (v97 < v92)
            v95 = v96;
          if (v92 >= v95[4])
          {
            v139 = 0;
            v139 = *v91;
            v99 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v143, v139, (uint64_t *)&v139);
            v86 = v166;
            *((_QWORD *)v166 + 10 * v88 + 1) = v99[5];
            v87 = v167;
          }
        }
      }
      ++v88;
    }
    while (v88 < 0xCCCCCCCCCCCCCCCDLL * ((v87 - v86) >> 4));
  }
  v140 = 0;
  v141 = 0;
  v139 = (unint64_t)&v140;
  v100 = (uint64_t *)operator new(0x30uLL);
  *v100 = 0;
  v100[1] = 0;
  v100[4] = 0;
  v100[5] = 0;
  v100[2] = (uint64_t)&v140;
  v139 = (unint64_t)v100;
  v140 = v100;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v100, v100);
  ++v141;
  v100[5] = 0;
  if (v79 != -1)
  {
    std::__tree<unsigned long>::__erase_unique<unsigned long>(v134, v79);
    *(_BYTE *)(*v135 + 56 * v79 + 48) = 0;
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)v134, *((_QWORD **)v137 + 9));
  *((_QWORD *)v137 + 9) = 0;
  *((_QWORD *)v137 + 10) = 0;
  *((_QWORD *)v137 + 8) = v136;
  v101 = v166;
  if (v167 == v166)
  {
    v104 = -1;
    v103 = 1;
  }
  else
  {
    v102 = 0;
    v103 = 1;
    v104 = -1;
    do
    {
      v105 = (unint64_t *)((char *)v101 + 80 * v102);
      v107 = *v105;
      v106 = v105[1];
      v152 = v106;
      v153 = v107;
      v108 = v140;
      if (!v140)
        goto LABEL_134;
      v109 = &v140;
      v110 = v140;
      do
      {
        v111 = v110;
        v112 = v109;
        v113 = v110[4];
        if (v113 >= v107)
          v109 = (uint64_t **)v110;
        else
          ++v110;
        v110 = (uint64_t *)*v110;
      }
      while (v110);
      if (v109 == &v140)
        goto LABEL_134;
      if (v113 < v107)
        v111 = (uint64_t *)v112;
      if (v107 < v111[4])
      {
LABEL_134:
        v114 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v139, v107, (uint64_t *)&v153);
        v115 = v103++;
        v114[5] = v115;
        v108 = v140;
      }
      if (!v108)
        goto LABEL_145;
      v116 = &v140;
      do
      {
        v117 = v108;
        v118 = v116;
        v119 = v108[4];
        v120 = (uint64_t **)(v108 + 1);
        if (v119 >= v106)
        {
          v120 = (uint64_t **)v117;
          v116 = (uint64_t **)v117;
        }
        v108 = *v120;
      }
      while (v108);
      if (v116 == &v140 || (v119 >= v106 ? (v121 = v117) : (v121 = v118), v106 < v121[4]))
      {
LABEL_145:
        v122 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v139, v106, (uint64_t *)&v152);
        v123 = v103++;
        v122[5] = v123;
      }
      if (*((_QWORD *)v166 + 10 * v102 + 1) == v79)
      {
        v124 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v139, v106, (uint64_t *)&v152);
        v125 = *(_QWORD **)v136;
        if (!*(_QWORD *)v136)
          goto LABEL_158;
        v126 = v124[5];
        v127 = v136;
        do
        {
          v128 = v125[4];
          v129 = v128 >= v126;
          if (v128 >= v126)
            v130 = v125;
          else
            v130 = v125 + 1;
          if (v129)
            v127 = (CRCHNetwork *)v125;
          v125 = (_QWORD *)*v130;
        }
        while (*v130);
        if (v127 == v136 || v126 < *((_QWORD *)v127 + 4))
        {
LABEL_158:
          v131 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v139, v106, (uint64_t *)&v152);
          CRCHNetwork::setFinal((uint64_t **)v137, v131[5]);
          v104 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v139, v106, (uint64_t *)&v152)[5];
        }
      }
      v132 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v139, v107, (uint64_t *)&v153);
      *((_QWORD *)v166 + 10 * v102) = v132[5];
      v133 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v139, v106, (uint64_t *)&v152);
      v101 = v166;
      *((_QWORD *)v166 + 10 * v102++ + 1) = v133[5];
    }
    while (v102 < 0xCCCCCCCCCCCCCCCDLL * ((v167 - v101) >> 4));
  }
  std::vector<CRCHNetworkNode>::resize((uint64_t)v135, v103);
  if (v104 != -1)
    CRCHNetwork::setFinal((uint64_t **)v137, v104);
  CRCHNetwork::insertEdges(v137, &v166);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v139, v140);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v143, *((_QWORD **)&v143 + 1));
  std::__tree<CRCHuint128>::destroy((uint64_t)&v154, v155[0]);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](v156);
  if (v158[0])
  {
    v158[1] = v158[0];
    operator delete(v158[0]);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&v159, v160[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v161, v162[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v163, v164);
  *(_QWORD *)&v143 = &v166;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
}

void sub_1D50699F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,_QWORD *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,_QWORD *a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  void *v44;

  std::__tree<CRCHuint128>::destroy((uint64_t)&a16, a17);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a26, a27);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a39, a40);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100](&a42);
  v44 = *(void **)(v42 - 216);
  if (v44)
  {
    *(_QWORD *)(v42 - 208) = v44;
    operator delete(v44);
  }
  std::__tree<CRCHuint128>::destroy(v42 - 192, *(_QWORD **)(v42 - 184));
  std::__tree<CRCHuint128>::destroy(v42 - 168, *(_QWORD **)(v42 - 160));
  std::__tree<CRCHuint128>::destroy(v42 - 144, *(_QWORD **)(v42 - 136));
  a26 = v42 - 120;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void CRCHNetwork::mergeEquivalentEdges(uint64_t a1, uint64_t a2)
{
  NetworkEdge *v3;
  unint64_t v4;
  int64x2_t *v5;
  __int32 v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  _DWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  _DWORD *v13;
  const NetworkEdge *v14;
  NetworkEdge *v15;
  NetworkEdge *v16;
  int v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double *v30;
  double *v31;
  double v32;
  const NetworkEdge *v33;
  NetworkEdge *v34;
  NetworkEdge *v35;
  void *__p;
  _BYTE *v37;
  uint64_t v38;
  __int128 v39;
  NetworkEdge *v40;
  NetworkEdge *v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44[2];

  v44[0] = 0;
  v44[1] = 0;
  v42 = 0;
  v43 = (uint64_t *)v44;
  v40 = 0;
  v41 = 0;
  v3 = *(NetworkEdge **)a2;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v4 = 0;
    do
    {
      v5 = (int64x2_t *)((char *)v3 + 80 * v4);
      v6 = v5[1].i32[0];
      *(int32x2_t *)&v39 = vmovn_s64(*v5);
      DWORD2(v39) = v6;
      HIDWORD(v39) = v6;
      v7 = v44[0];
      if (!v44[0])
        goto LABEL_13;
      v8 = v44;
      do
      {
        v9 = v8;
        v10 = (_DWORD *)v7 + 7;
        v11 = CRCHuint128::operator<((_DWORD *)v7 + 7, &v39);
        v12 = v7 + 1;
        if (!v11)
        {
          v12 = v7;
          v8 = (_QWORD **)v7;
        }
        v7 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v8 == v44 || (!v11 ? (v13 = v10) : (v13 = (_DWORD *)v9 + 7), CRCHuint128::operator<(&v39, v13)))
      {
LABEL_13:
        *((_DWORD *)std::__tree<std::__value_type<CRCHuint128,int>,std::__map_value_compare<CRCHuint128,std::__value_type<CRCHuint128,int>,std::less<CRCHuint128>,true>,std::allocator<std::__value_type<CRCHuint128,int>>>::__emplace_unique_key_args<CRCHuint128,std::piecewise_construct_t const&,std::tuple<CRCHuint128 const&>,std::tuple<>>(&v43, &v39, &v39)+ 11) = v4;
        v14 = (const NetworkEdge *)(*(_QWORD *)a2 + 80 * v4);
        v15 = v41;
        if ((unint64_t)v41 >= v42)
        {
          v16 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v40, v14);
        }
        else
        {
          NetworkEdge::NetworkEdge(v41, v14);
          v16 = (NetworkEdge *)((char *)v15 + 80);
        }
        v41 = v16;
      }
      else
      {
        v17 = *((_DWORD *)v8 + 11);
        __p = 0;
        v37 = 0;
        v38 = 0;
        std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&__p, *((const void **)v3 + 10 * v17 + 7), *((_QWORD *)v3 + 10 * v17 + 8), (uint64_t)(*((_QWORD *)v3 + 10 * v17 + 8) - *((_QWORD *)v3 + 10 * v17 + 7)) >> 3);
        v18 = __p;
        v19 = (v37 - (_BYTE *)__p) >> 3;
        if (v37 != __p
          && ((v20 = *(_QWORD *)a2 + 80 * v4, v21 = *(_QWORD *)(v20 + 56), v22 = *(_QWORD *)(v20 + 64), v22 != v21)
            ? (v23 = v19 == (v22 - v21) >> 3)
            : (v23 = 0),
              v23))
        {
          v25 = 0;
          v24 = 0;
          if (v19 <= 1)
            v26 = 1;
          else
            v26 = (v37 - (_BYTE *)__p) >> 3;
          do
          {
            v27 = 0;
            while (*(_QWORD *)((char *)__p + v27) != *(_QWORD *)(v21 + 8 * v25))
            {
              v27 += 8;
              if ((char *)__p + v27 == v37)
              {
                v28 = (v37 - (_BYTE *)__p) >> 3;
                goto LABEL_33;
              }
            }
            v28 = v27 >> 3;
LABEL_33:
            if ((char *)__p + 8 * v28 != v37)
              ++v24;
            ++v25;
          }
          while (v25 != v26);
        }
        else
        {
          v24 = 0;
        }
        if (v24 == v19)
        {
          v29 = *(double *)(*(_QWORD *)a2 + 80 * v4 + 32);
          v30 = (double *)((char *)v3 + 80 * v17);
          v32 = v30[4];
          v31 = v30 + 4;
          if (v29 < v32)
            *v31 = v29;
        }
        else
        {
          *((_DWORD *)std::__tree<std::__value_type<CRCHuint128,int>,std::__map_value_compare<CRCHuint128,std::__value_type<CRCHuint128,int>,std::less<CRCHuint128>,true>,std::allocator<std::__value_type<CRCHuint128,int>>>::__emplace_unique_key_args<CRCHuint128,std::piecewise_construct_t const&,std::tuple<CRCHuint128 const&>,std::tuple<>>(&v43, &v39, &v39)+ 11) = v4;
          v33 = (const NetworkEdge *)(*(_QWORD *)a2 + 80 * v4);
          v34 = v41;
          if ((unint64_t)v41 >= v42)
          {
            v35 = (NetworkEdge *)std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v40, v33);
          }
          else
          {
            NetworkEdge::NetworkEdge(v41, v33);
            v35 = (NetworkEdge *)((char *)v34 + 80);
          }
          v41 = v35;
          v18 = __p;
        }
        if (v18)
        {
          v37 = v18;
          operator delete(v18);
        }
      }
      ++v4;
      v3 = *(NetworkEdge **)a2;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4) > v4);
  }
  if (&v40 != (NetworkEdge **)a2)
    std::vector<NetworkEdge>::__assign_with_size[abi:ne180100]<NetworkEdge*,NetworkEdge*>(a2, v40, v41, 0xCCCCCCCCCCCCCCCDLL * ((v41 - v40) >> 4));
  __p = &v40;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v44[0]);
}

void sub_1D5069DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  __p = &a15;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a19);
  _Unwind_Resume(a1);
}

void CRCHNetwork::compose(CRCHNetwork *this, const CRCHNetwork *a2, CRCHNetwork *a3, char a4)
{
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD **v11;
  BOOL v12;
  _QWORD **v13;
  _QWORD *v14[2];
  _QWORD **v15;
  _QWORD *v16[2];
  const NetworkEdge **v17;
  _QWORD *v18;
  unint64_t v19;
  const NetworkEdge *v20[3];

  v8 = (char *)this + 40;
  std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, 0);
  std::__tree<CRCHuint128>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = 0;
  memset(v20, 0, sizeof(v20));
  v18 = 0;
  v19 = 0;
  v17 = (const NetworkEdge **)&v18;
  std::__tree<CRCHuint128>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 29) = 0;
  v16[0] = 0;
  v16[1] = 0;
  v14[1] = 0;
  v15 = v16;
  v13 = v14;
  v14[0] = 0;
  CRCHNetwork::compose6((uint64_t)this, (unint64_t)a2, a3, *((_QWORD *)a2 + 4), *((_QWORD *)a3 + 4), (uint64_t)&v17, (uint64_t *)v20, (uint64_t *)&v15, (uint64_t)&v13, a4);
  std::vector<CRCHNetworkNode>::resize((uint64_t)v8, v19);
  CRCHNetwork::insertEdges(this, v20);
  v9 = v13;
  if (v13 != v14)
  {
    do
    {
      CRCHNetwork::setFinal((uint64_t **)this, v9[4]);
      v10 = (_QWORD *)v9[1];
      if (v10)
      {
        do
        {
          v11 = (_QWORD **)v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD **)v9[2];
          v12 = *v11 == v9;
          v9 = v11;
        }
        while (!v12);
      }
      v9 = v11;
    }
    while (v11 != v14);
  }
  std::__tree<CRCHuint128>::destroy((uint64_t)&v13, v14[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v15, v16[0]);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v18);
  v17 = v20;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_1D5069F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, void **a17, _QWORD *a18)
{
  uint64_t v18;

  std::__tree<CRCHuint128>::destroy((uint64_t)&a11, a12);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(a18);
  a17 = (void **)(v18 - 72);
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t *CRCHNetwork::compose6(uint64_t a1, unint64_t a2, CRCHNetwork *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, char a10)
{
  unint64_t v12;
  uint64_t *result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t FirstEdgeGivenSymbol;
  unint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t *v41;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46[2];

  v12 = a4;
  v46[0] = a4;
  v46[1] = a5;
  result = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(a6, a4, a5);
  v44 = a6;
  if ((uint64_t *)(a6 + 8) == result)
    goto LABEL_14;
  v16 = result[6];
  if (v16 == -1)
    goto LABEL_14;
  v17 = (_QWORD *)a8[1];
  if (!v17)
    goto LABEL_14;
  v18 = a8 + 1;
  do
  {
    v19 = v17[4];
    v20 = v19 >= v16;
    if (v19 >= v16)
      v21 = v17;
    else
      v21 = v17 + 1;
    if (v20)
      v18 = v17;
    v17 = (_QWORD *)*v21;
  }
  while (*v21);
  if (v18 == a8 + 1 || v16 < v18[4])
  {
LABEL_14:
    v38 = (_QWORD *)(a6 + 8);
    v45 = *(_QWORD *)(a6 + 16);
    v41 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a6, v46, &v45);
    v22 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(v22 + 56 * v12))
    {
      v23 = 0;
      v39 = v12;
      do
      {
        v24 = *(_QWORD *)(a2 + 88) + 80 * (*(_QWORD *)(v22 + 56 * v12 + 16) + v23);
        v26 = *(_QWORD *)(v24 + 8);
        v25 = *(_QWORD *)(v24 + 16);
        FirstEdgeGivenSymbol = CRCHNetwork::findFirstEdgeGivenSymbol(a3, a5, v25);
        v28 = FirstEdgeGivenSymbol;
        if (!a5 && a10 && FirstEdgeGivenSymbol == -1)
        {
          if (!CRCHNetwork::addCWComposedCharacterEdge(a1, a2, (uint64_t)a3, v44, (uint64_t)v41, v26, 0, v24, 0, a9, a7, 1))
          {
            LOBYTE(v36) = 1;
            CRCHNetwork::compose6(a1, a2, a3, v26, 0, v44, a7, a8, a9, v36);
          }
        }
        else if (FirstEdgeGivenSymbol != -1)
        {
          for (i = *((_QWORD *)a3 + 5); v28 < *(_QWORD *)(i + 56 * a5); i = *((_QWORD *)a3 + 5))
          {
            v30 = v28 + *(_QWORD *)(i + 56 * a5 + 16);
            v31 = *((_QWORD *)a3 + 11);
            v32 = v31 + 80 * v30;
            if (*(_QWORD *)(v32 + 16) != v25)
              break;
            v33 = *(_QWORD *)(v32 + 8);
            if (!CRCHNetwork::addCWComposedCharacterEdge(a1, a2, (uint64_t)a3, v44, (uint64_t)v41, v26, v33, v24, v31 + 80 * v30, a9, a7, 0))
            {
              LOBYTE(v37) = a10;
              CRCHNetwork::compose6(a1, a2, a3, v26, v33, v44, a7, a8, a9, v37);
            }
            ++v28;
          }
        }
        ++v23;
        v22 = *(_QWORD *)(a2 + 40);
        v12 = v39;
      }
      while (*(_QWORD *)(v22 + 56 * v39) > v23);
    }
    v34 = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(v44, v12, a5);
    if (v38 == v34)
      v35 = -1;
    else
      v35 = v34[6];
    return std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(a8, v35, v35);
  }
  return result;
}

void CRCHNetwork::compose(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t **a5)
{
  _QWORD *v9;
  uint64_t RootCursor;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v20;
  _QWORD *v21[2];
  _QWORD **v22;
  _QWORD *v23;
  uint64_t v24;
  const NetworkEdge **v25;
  _QWORD *v26;
  unint64_t v27;
  const NetworkEdge *v28[4];

  v18 = a1 + 40;
  std::vector<CRCHNetworkNode>::resize(a1 + 40, 0);
  std::__tree<CRCHuint128>::destroy(a1 + 64, *(_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  memset(v28, 0, 24);
  v26 = 0;
  v27 = 0;
  v9 = *(_QWORD **)(a1 + 232);
  v25 = (const NetworkEdge **)&v26;
  std::__tree<CRCHuint128>::destroy(a1 + 224, v9);
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v23 = 0;
  v24 = 0;
  v21[1] = 0;
  v22 = &v23;
  v20 = (uint64_t *)v21;
  v21[0] = 0;
  RootCursor = LMLexiconGetRootCursor();
  v11 = LMLexiconGetRootCursor();
  v12 = (__int128 *)LMLexiconCursorHash();
  v13 = LMLexiconCursorHash();
  CRCHNetwork::compose8(a1, a2, a3, a4, (uint64_t)v12, v12, v13, a5, *(_QWORD *)(a2 + 32), RootCursor, (unint64_t)v12, 0, (uint64_t)&v25, (uint64_t *)v28, (uint64_t *)&v22, &v20);
  if (a4)
    CRCHNetwork::compose8(a1, a2, a4, a4, v13, v12, v13, a5, *(_QWORD *)(a2 + 32), v11, v13, 1, (uint64_t)&v25, (uint64_t *)v28, (uint64_t *)&v22, &v20);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v22, v23);
  v23 = 0;
  v24 = 0;
  v22 = &v23;
  std::__tree<CRCHuint128>::destroy(a1 + 224, *(_QWORD **)(a1 + 232));
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  LMLexiconResetCursors();
  LMLexiconResetCursors();
  std::vector<CRCHNetworkNode>::resize(v18, v27);
  v14 = v20;
  if (v20 != (uint64_t *)v21)
  {
    do
    {
      CRCHNetwork::setFinal((uint64_t **)a1, v14[4]);
      v15 = (uint64_t *)v14[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v14[2];
          v17 = *v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (!v17);
      }
      v14 = v16;
    }
    while (v16 != (uint64_t *)v21);
  }
  CRCHNetwork::insertEdges((CRCHNetwork *)a1, v28);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v20, v21[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v26);
  v25 = v28;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_1D506A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  std::__tree<CRCHuint128>::destroy((uint64_t)&a22, a23);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a25, a26);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(_QWORD **)(v26 - 128));
  *(_QWORD *)(v26 - 136) = v26 - 112;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 136));
  _Unwind_Resume(a1);
}

uint64_t *CRCHNetwork::compose8(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t **a8, unint64_t a9, uint64_t a10, unint64_t a11, char a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t **a16)
{
  __int128 *v16;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  uint64_t *result;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t CursorByAdvancingWithCharacters;
  uint64_t v38;
  int TokenID;
  unsigned int v40;
  int v41;
  uint64_t RootCursor;
  uint64_t v43;
  int v44;
  int HasChildren;
  int HasEntries;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  char v59;
  uint64_t **v61;
  _QWORD *v63;
  _BOOL4 v65;
  int v66;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  __int128 *v76[2];
  char v77;
  uint64_t v78;
  uint64_t v79[2];
  __int128 v80;
  char v81;
  __int16 v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __int128 **v86;

  v16 = a6;
  v19 = a13;
  v20 = a11;
  v21 = a9;
  v23 = a7 == a11 || a6 == (__int128 *)a11;
  v65 = v23;
  v84 = a9;
  v85 = a11;
  result = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(a13, a9, a11);
  if ((uint64_t *)(a13 + 8) == result)
    goto LABEL_20;
  v25 = result[6];
  if (v25 == -1)
    goto LABEL_20;
  v26 = (_QWORD *)a15[1];
  if (!v26)
    goto LABEL_20;
  v27 = a15 + 1;
  do
  {
    v28 = v26[4];
    v29 = v28 >= v25;
    if (v28 >= v25)
      v30 = v26;
    else
      v30 = v26 + 1;
    if (v29)
      v27 = v26;
    v26 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 == a15 + 1 || v25 < v27[4])
  {
LABEL_20:
    if (a12)
    {
      v85 = (unint64_t)v16;
      v20 = (unint64_t)v16;
    }
    v58 = v20;
    v83 = *(_QWORD *)(a13 + 16);
    v71 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a13, &v84, &v83);
    v31 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(v31 + 56 * a9))
    {
      v32 = 0;
      v63 = (_QWORD *)(a1 + 136);
      v61 = a8 + 1;
      if (a4)
        v33 = a4 == a3;
      else
        v33 = 1;
      v34 = v33;
      v59 = v34;
      v68 = (unint64_t)v16;
      v69 = a2;
      while (1)
      {
        v35 = *(_QWORD *)(a2 + 88) + 80 * (v32 + *(_QWORD *)(v31 + 56 * v21 + 16));
        v36 = *(_QWORD *)(v35 + 16);
        v74 = *(_QWORD *)(v35 + 8);
        v72 = (_QWORD *)v35;
        v82 = v36;
        CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
        v38 = CursorByAdvancingWithCharacters;
        v70 = v36;
        if (v65)
          break;
        LODWORD(v73) = 0;
        v66 = 0;
        v40 = 0;
        v41 = 0;
        if (CursorByAdvancingWithCharacters)
          goto LABEL_44;
LABEL_70:
        ++v32;
        v31 = *(_QWORD *)(a2 + 40);
        v16 = (__int128 *)v68;
        v19 = a13;
        if (v32 >= *(_QWORD *)(v31 + 56 * v21))
          goto LABEL_71;
      }
      ul2sh(v36, (uint64_t)&v80);
      v73 = CRCHSymbolMap::store(v63, &v80);
      if (v38)
        TokenID = LMLexiconCursorFirstTokenID();
      else
        TokenID = 0;
      if (v61 == (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)a8, (const void **)&v80))
      {
        v76[0] = &v80;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a8, (const void **)&v80, v76)+ 14) = TokenID;
      }
      v76[0] = (__int128 *)v74;
      v76[1] = v16;
      v79[0] = *(_QWORD *)(v19 + 16);
      v40 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)v19, (unint64_t *)v76, v79);
      if (!CRCHNetwork::addCWComposedCharacterEdge(a1, a2, v19, (uint64_t)v71, v74, (unint64_t)v16, 1, v73, v72, a16, a14))
      {
        RootCursor = LMLexiconGetRootCursor();
        LOBYTE(v57) = 0;
        CRCHNetwork::compose8(a1, a2, a3, a4, a5, v16, a7, a8, v74, RootCursor, v16, v57, v19, a14, a15, a16);
        if ((v59 & 1) == 0)
        {
          v43 = LMLexiconGetRootCursor();
          LOBYTE(v57) = 1;
          CRCHNetwork::compose8(a1, a2, a4, a4, a7, v16, a7, a8, v74, v43, a7, v57, v19, a14, a15, a16);
        }
      }
      if (v81 < 0)
        operator delete((void *)v80);
      v66 = v70;
      v41 = (int)v71;
      if (!v38)
        goto LABEL_70;
LABEL_44:
      v44 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 56 * v74 + 48);
      HasChildren = LMLexiconCursorHasChildren();
      HasEntries = LMLexiconCursorHasEntries();
      if (HasChildren)
      {
        v47 = LMLexiconCursorHash();
        *(_QWORD *)&v80 = v74;
        *((_QWORD *)&v80 + 1) = v47;
        v76[0] = *(__int128 **)(a13 + 16);
        CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a13, (unint64_t *)&v80, (uint64_t *)v76);
        if (!CRCHNetwork::addCWComposedCharacterEdge(a1, v69, a13, (uint64_t)v71, v74, v47, 0, 0, v72, a16, a14))
        {
          LOBYTE(v57) = 0;
          CRCHNetwork::compose8(a1, v69, a3, a4, a5, v68, a7, a8, v74, v38, v47, v57, a13, a14, a15, a16);
        }
      }
      v48 = HasEntries ^ 1;
      if (v44)
        v48 = 0;
      a2 = v69;
      v21 = a9;
      if ((v48 & 1) == 0)
      {
        v49 = LMLexiconGetRootCursor();
        getStringFromCursor((uint64_t)&v80, a3);
        v50 = CRCHSymbolMap::store(v63, &v80);
        v79[0] = v74;
        v79[1] = v68;
        v78 = *(_QWORD *)(a13 + 16);
        v51 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a13, (unint64_t *)v79, &v78);
        if (!(v41 | v40 | v66 | v73)
          || v41 != (_DWORD)v71
          || v40 != v51
          || (v66 == v70 ? (v52 = (_DWORD)v73 == (_DWORD)v50) : (v52 = 0), !v52))
        {
          if (HasEntries)
            v53 = LMLexiconCursorFirstTokenID();
          else
            v53 = 0;
          getStringFromCursor((uint64_t)v76, a3);
          if (v61 == (uint64_t **)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)a8, (const void **)v76))
          {
            v86 = v76;
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a8, (const void **)v76, (__int128 **)&v86)+ 14) = v53;
          }
          if (!CRCHNetwork::addCWComposedCharacterEdge(a1, v69, a13, (uint64_t)v71, v74, v68, 1, v50, v72, a16, a14))
          {
            LOBYTE(v57) = 0;
            CRCHNetwork::compose8(a1, v69, a3, a4, a5, v68, a7, a8, v74, v49, v68, v57, a13, a14, a15, a16);
            if ((v59 & 1) == 0)
            {
              v54 = LMLexiconGetRootCursor();
              LOBYTE(v57) = 1;
              CRCHNetwork::compose8(a1, v69, a4, a4, a7, v68, a7, a8, v74, v54, a7, v57, a13, a14, a15, a16);
            }
          }
          if (v77 < 0)
            operator delete(v76[0]);
        }
        if (v81 < 0)
          operator delete((void *)v80);
        a2 = v69;
        v21 = a9;
      }
      goto LABEL_70;
    }
LABEL_71:
    v55 = std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(v19, v21, v58);
    if ((_QWORD *)(a13 + 8) == v55)
      v56 = -1;
    else
      v56 = v55[6];
    return std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(a15, v56, v56);
  }
  return result;
}

void sub_1D506AC24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::findFirstEdgeGivenSymbol(CRCHNetwork *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD **v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD **v49;
  _QWORD *v50[2];
  unint64_t v51;
  unint64_t v52;

  v4 = a2;
  v51 = a3;
  v52 = a2;
  v6 = *((_QWORD *)this + 5);
  v7 = *(_QWORD *)(v6 + 56 * a2);
  if (v7 > 0xA)
  {
    v9 = (uint64_t **)((char *)this + 208);
    v8 = (_QWORD *)*((_QWORD *)this + 26);
    v10 = (uint64_t **)((char *)this + 200);
    if (!v8)
      goto LABEL_13;
    v11 = (uint64_t **)((char *)this + 208);
    do
    {
      v12 = v8[4];
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = v8;
      else
        v14 = v8 + 1;
      if (v13)
        v11 = (uint64_t **)v8;
      v8 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 == v9 || (unint64_t)v11[4] > a2)
    {
LABEL_13:
      v50[0] = 0;
      v50[1] = 0;
      v49 = v50;
      std::map<unsigned long,unsigned long>::map[abi:ne180100]((uint64_t)&v46, &v49);
      v15 = *v9;
      v16 = (uint64_t **)((char *)this + 208);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            v17 = v15[4];
            if (v17 <= a2)
              break;
            v15 = *v16;
            v9 = v16;
            if (!*v16)
              goto LABEL_20;
          }
          if (v17 >= a2)
            break;
          v15 = v16[1];
          if (!v15)
          {
            v9 = v16 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        v18 = (uint64_t *)operator new(0x40uLL);
        v20 = v46;
        v19 = v47;
        v18[6] = (uint64_t)v47;
        v21 = v18 + 6;
        v18[4] = a2;
        v18[5] = (uint64_t)v20;
        v22 = v48;
        v18[7] = v48;
        if (v22)
        {
          v19[2] = v21;
          v46 = &v47;
          v47 = 0;
          v48 = 0;
        }
        else
        {
          v18[5] = (uint64_t)v21;
        }
        std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)this + 25, (uint64_t)v16, v9, v18);
        v4 = v52;
      }
      std::__tree<CRCHuint128>::destroy((uint64_t)&v46, v47);
      v26 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v26 + 56 * v4))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = *(_QWORD *)(*((_QWORD *)this + 11) + 80 * (*(_QWORD *)(v26 + 56 * v4 + 16) + v27) + 16);
          if (v28 != v29)
          {
            v30 = std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)this + 25, v4, (uint64_t *)&v52);
            v31 = operator new(0x30uLL);
            v31[4] = v29;
            v31[5] = v27;
            v32 = (uint64_t **)(v30 + 6);
            v33 = (uint64_t *)v30[6];
            if (v33)
            {
              while (1)
              {
                while (1)
                {
                  v34 = (uint64_t **)v33;
                  v35 = v33[4];
                  if (v35 <= v29)
                    break;
                  v33 = *v34;
                  v32 = v34;
                  if (!*v34)
                    goto LABEL_40;
                }
                if (v35 >= v29)
                  break;
                v33 = v34[1];
                if (!v33)
                {
                  v32 = v34 + 1;
                  goto LABEL_40;
                }
              }
              operator delete(v31);
            }
            else
            {
              v34 = (uint64_t **)(v30 + 6);
LABEL_40:
              std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)v30 + 5, (uint64_t)v34, v32, v31);
              v4 = v52;
            }
            v26 = *((_QWORD *)this + 5);
          }
          ++v27;
          v28 = v29;
        }
        while (*(_QWORD *)(v26 + 56 * v4) > v27);
      }
      std::__tree<CRCHuint128>::destroy((uint64_t)&v49, v50[0]);
    }
    v36 = std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)this + 25, v4, (uint64_t *)&v52);
    v39 = v36[6];
    v37 = v36 + 6;
    v38 = (_QWORD *)v39;
    if (!v39)
      goto LABEL_56;
    v40 = v37;
    do
    {
      v41 = v38[4];
      v42 = v41 >= a3;
      if (v41 >= a3)
        v43 = v38;
      else
        v43 = v38 + 1;
      if (v42)
        v40 = v38;
      v38 = (_QWORD *)*v43;
    }
    while (*v43);
    if (v40 == v37 || v40[4] > a3)
LABEL_56:
      v40 = v37;
    if (v40 != std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v10, v4, (uint64_t *)&v52)+ 6)
    {
      v44 = std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v10, v4, (uint64_t *)&v52);
      return std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)v44 + 5, v51, (uint64_t *)&v51)[5];
    }
    return -1;
  }
  if (!v7)
    return -1;
  result = 0;
  v24 = (uint64_t *)(*((_QWORD *)this + 11) + 80 * *(_QWORD *)(v6 + 56 * a2 + 16) + 16);
  while (1)
  {
    v25 = *v24;
    v24 += 10;
    if (v25 == a3)
      break;
    if (v7 == ++result)
      return -1;
  }
  return result;
}

void sub_1D506AFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15)
{
  uint64_t v15;

  std::__tree<CRCHuint128>::destroy(v15, a12);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL CRCHNetwork::addCWComposedCharacterEdge(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, char a12)
{
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  std::string v39;
  std::string __p;
  _QWORD v41[3];
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51[3];

  v51[0] = a6;
  v51[1] = a7;
  v50 = *(_QWORD *)(a4 + 16);
  v19 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a4, v51, &v50);
  v49 = v19;
  v36 = a6;
  v37 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 56 * a6 + 48) && *(_BYTE *)(*(_QWORD *)(a3 + 40) + 56 * a7 + 48))
  {
    v20 = *(_QWORD **)(a10 + 8);
    if (!v20)
      goto LABEL_14;
    v21 = (_QWORD *)(a10 + 8);
    do
    {
      v22 = v20[4];
      v23 = v22 >= (unint64_t)v19;
      if (v22 >= (unint64_t)v19)
        v24 = v20;
      else
        v24 = v20 + 1;
      if (v23)
        v21 = v20;
      v20 = (_QWORD *)*v24;
    }
    while (*v24);
    if (v21 == (_QWORD *)(a10 + 8) || (unint64_t)v19 < v21[4])
    {
LABEL_14:
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)a10, (unint64_t *)&v49, (uint64_t *)&v49);
      v19 = v49;
    }
  }
  v47 = 0;
  v48 = 0;
  v25 = a5;
  v41[0] = a5;
  v41[1] = v19;
  v26 = *(_QWORD *)(a8 + 16);
  v28 = *(_QWORD *)(a8 + 40);
  v27 = *(_QWORD *)(a8 + 48);
  v41[2] = v26;
  v44 = v28;
  v45 = v27;
  v46 = 0;
  if (a12)
  {
    v29 = v37;
    CRCHNetwork::getSymbol(&__p, v37, *(_QWORD *)(a8 + 24));
    v30 = CRCHSymbolMap::store((_QWORD *)(a1 + 136), (__int128 *)&__p);
    v42 = v30;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *(double *)(a8 + 32);
  }
  else
  {
    CRCHNetwork::getSymbol(&v39, a3, *(_QWORD *)(a9 + 24));
    v30 = CRCHSymbolMap::store((_QWORD *)(a1 + 136), (__int128 *)&v39);
    v42 = v30;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v31 = *(double *)(a9 + 32) + *(double *)(a8 + 32);
    v29 = v37;
  }
  v43 = v31;
  *(_QWORD *)&v38 = v25 | ((unint64_t)v19 << 32);
  *((_QWORD *)&v38 + 1) = v26 | ((unint64_t)v30 << 32);
  if (a1 + 232 == std::__tree<CRCHuint128>::find<CRCHuint128>(a1 + 224, &v38))
  {
    v33 = a11[1];
    if (v33 >= a11[2])
    {
      v34 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>(a11, (const NetworkEdge *)v41);
    }
    else
    {
      *(_QWORD *)v33 = v25;
      *(_QWORD *)(v33 + 8) = v19;
      *(_QWORD *)(v33 + 16) = v26;
      *(_QWORD *)(v33 + 24) = v30;
      *(double *)(v33 + 32) = v31;
      *(_QWORD *)(v33 + 40) = v28;
      *(_QWORD *)(v33 + 48) = v27;
      *(_QWORD *)(v33 + 64) = 0;
      *(_QWORD *)(v33 + 72) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      v34 = v33 + 80;
      a11[1] = v33 + 80;
    }
    a11[1] = v34;
    std::__tree<CRCHuint128>::__emplace_unique_key_args<CRCHuint128,CRCHuint128 const&>((uint64_t **)(a1 + 224), &v38, &v38);
    v32 = *(unsigned __int8 *)(*(_QWORD *)(v29 + 40) + 56 * v36 + 48);
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
  }
  else
  {
    v32 = *(unsigned __int8 *)(*(_QWORD *)(v29 + 40) + 56 * v36 + 48);
  }
  return v32 != 0;
}

void sub_1D506B288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *CRCHNodeTupleMap<unsigned long>::add(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;

  v5 = *a2;
  v6 = a2[1];
  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = a1 + 1;
    v10 = a1[1];
    do
    {
      v11 = v10[4];
      v13 = v11 == v5;
      v12 = v11 < v5;
      if (v13)
        v12 = v10[5] < v6;
      v13 = !v12;
      if (v12)
        v14 = (uint64_t **)(v10 + 1);
      else
        v14 = (uint64_t **)v10;
      if (v13)
        v9 = (uint64_t **)v10;
      v10 = *v14;
    }
    while (*v14);
    if (v9 != v8)
    {
      v15 = v9[4];
      v13 = v15 == (uint64_t *)v5;
      v16 = (unint64_t)v15 > v5;
      if (v13)
        v16 = (unint64_t)v9[5] > v6;
      if (!v16)
        return v9[6];
    }
    v17 = *a3;
    do
    {
      while (1)
      {
        v18 = (uint64_t **)v7;
        v19 = v7[4];
        v20 = v18[5];
        v21 = (unint64_t)v20 > v6;
        if (v19 != v5)
          v21 = v19 > v5;
        if (!v21)
          break;
        v7 = *v18;
        if (!*v18)
        {
          v8 = v18;
          goto LABEL_29;
        }
      }
      v22 = (unint64_t)v20 < v6;
      v13 = v19 == v5;
      v23 = v19 < v5;
      if (v13)
        v23 = v22;
      if (!v23)
        goto LABEL_33;
      v7 = v18[1];
    }
    while (v7);
    v8 = v18 + 1;
  }
  else
  {
    v17 = *a3;
    v18 = a1 + 1;
  }
LABEL_29:
  v24 = (uint64_t *)operator new(0x38uLL);
  v24[4] = v5;
  v24[5] = v6;
  v24[6] = v17;
  *v24 = 0;
  v24[1] = 0;
  v24[2] = (uint64_t)v18;
  *v8 = v24;
  v25 = (uint64_t *)**a1;
  if (v25)
  {
    *a1 = v25;
    v26 = *v8;
  }
  else
  {
    v26 = v24;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v17 = *a3;
LABEL_33:
  *a3 = v17 + 1;
  return (uint64_t *)v17;
}

BOOL CRCHNetwork::addCWComposedCharacterEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8, _QWORD *a9, uint64_t **a10, uint64_t *a11)
{
  uint64_t *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  unint64_t v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[7];
  void *__p;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40[3];

  v40[0] = a5;
  v40[1] = a6;
  v39 = *(_QWORD *)(a3 + 16);
  v17 = CRCHNodeTupleMap<unsigned long>::add((uint64_t **)a3, v40, &v39);
  v38 = v17;
  v32 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 56 * a5 + 48))
    v18 = a7 == 0;
  else
    v18 = 1;
  if (!v18)
  {
    if (a10[2])
    {
      v17 = (uint64_t *)(*a10)[4];
      v38 = v17;
    }
    else
    {
      v19 = a10[1];
      if (!v19)
        goto LABEL_18;
      v20 = a10 + 1;
      do
      {
        v21 = v19[4];
        v22 = v21 >= (unint64_t)v17;
        if (v21 >= (unint64_t)v17)
          v23 = (uint64_t **)v19;
        else
          v23 = (uint64_t **)(v19 + 1);
        if (v22)
          v20 = (uint64_t **)v19;
        v19 = *v23;
      }
      while (*v23);
      if (v20 == a10 + 1 || v17 < v20[4])
      {
LABEL_18:
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a10, (unint64_t *)&v38, (uint64_t *)&v38);
        v17 = v38;
      }
    }
  }
  __p = 0;
  v36 = 0;
  v37 = 0;
  v34[0] = a4;
  v34[1] = v17;
  v24 = a9[2];
  v26 = a9[5];
  v25 = a9[6];
  v34[5] = v26;
  v34[6] = v25;
  v34[2] = v24;
  v34[3] = a8;
  v27 = a9[4];
  v34[4] = v27;
  *(_QWORD *)&v33 = a4 | ((unint64_t)v17 << 32);
  *((_QWORD *)&v33 + 1) = v24 | ((unint64_t)a8 << 32);
  if (a1 + 232 == std::__tree<CRCHuint128>::find<CRCHuint128>(a1 + 224, &v33))
  {
    v29 = (_QWORD *)a11[1];
    if ((unint64_t)v29 >= a11[2])
    {
      v30 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>(a11, (const NetworkEdge *)v34);
    }
    else
    {
      *v29 = a4;
      v29[1] = v17;
      v29[2] = v24;
      v29[3] = a8;
      v29[4] = v27;
      v29[5] = v26;
      v29[6] = v25;
      v29[8] = 0;
      v29[9] = 0;
      v29[7] = 0;
      v30 = (uint64_t)(v29 + 10);
      a11[1] = (uint64_t)(v29 + 10);
    }
    a11[1] = v30;
    std::__tree<CRCHuint128>::__emplace_unique_key_args<CRCHuint128,CRCHuint128 const&>((uint64_t **)(a1 + 224), &v33, &v33);
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v32 + 40) + 56 * a5 + 48);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v32 + 40) + 56 * a5 + 48);
  }
  return v28 != 0;
}

void sub_1D506B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void getStringFromCursor(uint64_t a1, void *a2)
{
  int v3;
  unsigned __int16 v4[64];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = LMLexiconCursorTraversedLength();
  v4[0] = 0;
  LMLexiconCursorGetTraversedCharacters();
  iv2s(v4, v3, a1);
}

void CRCHNetwork::expandForLM(uint64_t **a1, _QWORD *a2, int a3, char **a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  char **v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char **v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  BOOL v50;
  char **v51;
  uint64_t v52;
  std::vector<int> v53;
  std::vector<int> v54;
  std::vector<int> v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  v8 = a1 + 9;
  std::__tree<CRCHuint128>::destroy((uint64_t)(a1 + 8), a1[9]);
  *(v8 - 1) = v8;
  *v8 = 0;
  v9 = (uint64_t)(v8 - 4);
  v8[1] = 0;
  std::vector<CRCHNetworkNode>::resize((uint64_t)(v8 - 4), 0);
  if (a3 < 2)
    return;
  std::vector<CRCHNetworkNode>::resize((uint64_t)(v8 - 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  CRCHSymbolMap::operator=((uint64_t)(a1 + 17), (uint64_t)(a2 + 17));
  v60 = a3;
  v61 = 0;
  v62 = 0;
  v10 = 1;
  do
  {
    CRCHLMHistory::push(&v60, 0);
    ++v10;
  }
  while (a3 != v10);
  v12 = a2[5];
  v11 = a2[6];
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v55.__begin_ = (std::vector<int>::pointer)&v57;
  LOBYTE(v55.__end_) = 0;
  v13 = v11 - v12;
  if (v13)
  {
    v14 = v13 / 56;
    if ((unint64_t)(v13 / 56) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v14);
    v57 = v15;
    v59 = &v15[24 * v16];
    v17 = 24 * v14;
    v18 = v15 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v58 = &v15[24 * v14];
  }
  v56 = 0;
  v19 = a2[4];
  if (v60 == 2)
  {
    v20 = v19 & 0xFFFFF | ((HIDWORD(v61) & 0xFFFFFLL) << 20);
  }
  else
  {
    v20 = 0;
    if (v60 == 3)
      v20 = v19 & 0xFFFFF | ((unint64_t)(HIDWORD(v61) & 0xFFFFF) << 20) | ((unint64_t)(v62 & 0xFFFFF) << 40);
  }
  v21 = &v57[24 * v19];
  v22 = (_QWORD *)*((_QWORD *)v21 + 1);
  if (!v22)
    goto LABEL_24;
  v23 = v21 + 8;
  do
  {
    v24 = v22[4];
    v25 = v24 >= v20;
    if (v24 >= v20)
      v26 = v22;
    else
      v26 = v22 + 1;
    if (v25)
      v23 = (char *)v22;
    v22 = (_QWORD *)*v26;
  }
  while (*v26);
  if (v23 == v21 + 8 || v20 < *((_QWORD *)v23 + 4))
  {
LABEL_24:
    std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)v21, v20, v20, 0);
    v56 = 1;
  }
  std::vector<int>::vector(&v55, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  std::vector<int>::vector(&v54, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  std::vector<int>::vector(&v53, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3));
  CRCHNetwork::storeAllLMContextDFS2((uint64_t)a1, (uint64_t)a2, a2[4], &v57, (int *)&v56, &v53, &v55, &v54, a3);
  v27 = v57;
  v28 = v58;
  if (v57 == v58)
  {
    v29 = 0;
    v31 = a4 + 1;
    v34 = a4;
    v33 = *a4;
    v35 = (a4[1] - *a4) >> 3;
LABEL_42:
    if (v35 > v29)
      *v31 = &v33[8 * v29];
    v45 = v34;
    goto LABEL_45;
  }
  v52 = v9;
  v29 = 0;
  v30 = (uint64_t)v57;
  do
  {
    v29 += *(_QWORD *)(v30 + 16);
    v30 += 24;
  }
  while ((char *)v30 != v58);
  v31 = a4 + 1;
  v32 = a4[1];
  v33 = *a4;
  v34 = a4;
  v35 = (v32 - *a4) >> 3;
  if (v29 <= v35)
  {
    v9 = v52;
    goto LABEL_42;
  }
  v36 = v29 - v35;
  v51 = v34;
  v37 = v34[2];
  if (v29 - v35 <= (v37 - v32) >> 3)
  {
    bzero(v32, 8 * v36);
    *v31 = &v32[8 * v36];
    v45 = v51;
    v9 = v52;
  }
  else
  {
    if (v29 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v38 = v37 - v33;
    if (v38 >> 2 > v29)
      v29 = v38 >> 2;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v29;
    if (v39 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v40 = (char *)operator new(8 * v39);
    v41 = &v40[8 * v35];
    v42 = &v40[8 * v39];
    bzero(v41, 8 * v36);
    v43 = &v41[8 * v36];
    while (v32 != v33)
    {
      v44 = *((_QWORD *)v32 - 1);
      v32 -= 8;
      *((_QWORD *)v41 - 1) = v44;
      v41 -= 8;
    }
    v45 = v51;
    v9 = v52;
    *v51 = v41;
    v51[1] = v43;
    v51[2] = v42;
    if (v33)
    {
      operator delete(v33);
      v27 = v57;
      v28 = v58;
    }
  }
LABEL_45:
  if (v27 != v28)
  {
    v46 = *v45;
    do
    {
      v47 = *(char **)v27;
      if (*(char **)v27 != v27 + 8)
      {
        do
        {
          *(_QWORD *)&v46[8 * *((_QWORD *)v47 + 5)] = (*((_QWORD *)v47 + 4) >> 20) & 0xFFFFFFFFFFLL;
          v48 = (char *)*((_QWORD *)v47 + 1);
          if (v48)
          {
            do
            {
              v49 = v48;
              v48 = *(char **)v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v49 = (char *)*((_QWORD *)v47 + 2);
              v50 = *(_QWORD *)v49 == (_QWORD)v47;
              v47 = v49;
            }
            while (!v50);
          }
          v47 = v49;
        }
        while (v49 != v27 + 8);
      }
      v27 += 24;
    }
    while (v27 != v28);
  }
  std::vector<CRCHNetworkNode>::resize(v9, v56);
  CRCHNetwork::buildNewGraphFromLMContexts(a1, a2, (uint64_t *)&v57, a3);
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  v55.__begin_ = (std::vector<int>::pointer)&v57;
  std::vector<std::map<unsigned long long,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
}

void sub_1D506BBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a18 = &a22;
  std::vector<std::map<unsigned long long,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

int *CRCHLMHistory::push(int *this, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int *v5;
  int v6;

  v2 = *this;
  v3 = this[1];
  if (v3 < *this - 1)
  {
    this[v3 + 2] = a2;
    v4 = v3 + 1;
LABEL_8:
    this[1] = v4;
    return this;
  }
  if (!(_DWORD)v3)
  {
    v4 = 1;
    this[2] = a2;
    goto LABEL_8;
  }
  v5 = &this[(v3 - 1)];
  v6 = v5[2];
  v5[2] = a2;
  if (v2 == 4)
  {
    this[2] = this[3];
    this[3] = v6;
  }
  else if (v2 == 3)
  {
    this[2] = v6;
  }
  return this;
}

uint64_t CRCHNetwork::storeAllLMContextDFS2(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, int *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, int a9)
{
  _QWORD *v10;
  _QWORD *v11;
  char i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  _QWORD v40[2];
  unsigned int v41;
  void *__p;
  void *v43;
  _OWORD v44[2];
  __int128 v45;

  if (*(int *)(*a6 + 4 * a3) <= 0)
  {
    v45 = 0u;
    memset(v44, 0, sizeof(v44));
    v10 = (_QWORD *)(*a4 + 24 * a3);
    v11 = (_QWORD *)*v10;
    v30 = v10 + 1;
    v31 = result;
    if ((_QWORD *)*v10 == v10 + 1)
      return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v44);
    v29 = 56 * a3;
    for (i = 1; ; i = 0)
    {
      v16 = *(_QWORD *)(a2 + 40);
      if (!*(_QWORD *)(v16 + v29))
      {
        *(_DWORD *)(*a6 + 4 * a3) = 1;
        goto LABEL_43;
      }
      v17 = 0;
      v32 = (v11[4] >> 40) & 0xFFFFFLL;
      do
      {
        NetworkEdge::NetworkEdge((NetworkEdge *)v39, (const NetworkEdge *)(*(_QWORD *)(a2 + 88) + 80 * (v17 + *(_QWORD *)(v16 + 56 * a3 + 16))));
        v36 = a9;
        v37 = 0;
        v38 = 0;
        if (a9 == 3)
          CRCHLMHistory::push(&v36, v32);
        CRCHLMHistory::push(&v36, v41);
        if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 56 * v40[0] + 48))
        {
          if (v36 == 2 || v36 == 3)
          {
            v18 = v40[0] & 0xFFFFF;
            goto LABEL_17;
          }
LABEL_15:
          v18 = 0;
          goto LABEL_17;
        }
        if (v36 != 2)
        {
          if (v36 == 3)
          {
            v18 = v40[0] & 0xFFFFF | ((unint64_t)(HIDWORD(v37) & 0xFFFFF) << 20) | ((unint64_t)(v38 & 0xFFFFF) << 40);
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        v18 = v40[0] & 0xFFFFF | ((HIDWORD(v37) & 0xFFFFFLL) << 20);
LABEL_17:
        if ((std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)(*a4 + 24 * v40[0]), v18, v18, *a5) & 1) != 0)++*(_QWORD *)a5;
        v19 = v40[0];
        v20 = *(_DWORD *)(*a8 + 4 * v40[0]);
        if ((i & 1) != 0)
          *(_DWORD *)(*a8 + 4 * v40[0]) = ++v20;
        if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56 * v19 + 8) == v20)
        {
          *(_DWORD *)(*a7 + 4 * v19) = 1;
          std::deque<unsigned long>::push_back(v44, v40);
        }
        if (__p)
        {
          v43 = __p;
          operator delete(__p);
        }
        ++v17;
        v16 = *(_QWORD *)(a2 + 40);
      }
      while (v17 < *(_QWORD *)(v16 + 56 * a3));
      v21 = *((_QWORD *)&v45 + 1);
      *(_DWORD *)(*a6 + 4 * a3) = 1;
      if (v21)
      {
        do
        {
          v22 = v21 - 1;
          v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v44[0] + 1)
                                      + (((unint64_t)(v45 + v22) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v45 + v22) & 0x1FF));
          *((_QWORD *)&v45 + 1) = v22;
          std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v44, 1);
          v24 = *(_QWORD *)(a2 + 40);
          if (!*(_BYTE *)(v24 + 56 * v23 + 48) && !*(_DWORD *)(*a6 + 4 * v23))
          {
            CRCHNetwork::storeAllLMContextDFS2(v31, a2, v23, a4, a5, a6, a7, a8, a9);
            v24 = *(_QWORD *)(a2 + 40);
          }
          if (*(_QWORD *)(v24 + 56 * a3))
          {
            v25 = 0;
            while (1)
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)v39, (const NetworkEdge *)(*(_QWORD *)(a2 + 88) + 80 * (v25 + *(_QWORD *)(v24 + 56 * a3 + 16))));
              v24 = *(_QWORD *)(a2 + 40);
              if (!*(_BYTE *)(v24 + 56 * v40[0] + 48)
                && !*(_DWORD *)(*a6 + 4 * v40[0])
                && *(int *)(*a7 + 4 * v40[0]) >= 1)
              {
                break;
              }
              if (__p)
              {
                v43 = __p;
                operator delete(__p);
                v24 = *(_QWORD *)(a2 + 40);
              }
              if (*(_QWORD *)(v24 + 56 * a3) <= (unint64_t)++v25)
                goto LABEL_38;
            }
            std::deque<unsigned long>::push_back(v44, v40);
            if (__p)
            {
              v43 = __p;
              operator delete(__p);
            }
          }
LABEL_38:
          v21 = *((_QWORD *)&v45 + 1);
        }
        while (*((_QWORD *)&v45 + 1));
      }
LABEL_43:
      v26 = (_QWORD *)v11[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v11[2];
          v28 = *v27 == (_QWORD)v11;
          v11 = v27;
        }
        while (!v28);
      }
      v11 = v27;
      if (v27 == v30)
        return std::deque<std::pair<int,int>>::~deque[abi:ne180100](v44);
    }
  }
  return result;
}

void sub_1D506C064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  if (__p)
    operator delete(__p);
  std::deque<std::pair<int,int>>::~deque[abi:ne180100]((_QWORD *)(v31 - 144));
  _Unwind_Resume(a1);
}

void CRCHNetwork::buildNewGraphFromLMContexts(uint64_t **a1, _QWORD *a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  _QWORD *v40;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50[2];
  uint64_t v51;
  __int128 v52;
  void *__p;
  _BYTE *v54;
  const NetworkEdge *v55;
  _QWORD *v56;
  unint64_t v57;

  v55 = 0;
  v56 = 0;
  v57 = 0;
  v4 = a2[5];
  v5 = a2[6];
  if (v5 != v4)
  {
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(*a3 + 24 * v7);
      v9 = (_QWORD *)*v8;
      v40 = v8 + 1;
      if ((_QWORD *)*v8 != v8 + 1)
      {
        do
        {
          if (*(_QWORD *)(v4 + 56 * v7))
          {
            v10 = 0;
            v11 = v9[4];
            do
            {
              NetworkEdge::NetworkEdge((NetworkEdge *)&v47, (const NetworkEdge *)(a2[11] + 80 * (*(_QWORD *)(v4 + 56 * v7 + 16) + v10)));
              v44 = a4;
              v45 = 0;
              v46 = 0;
              if (a4 == 3)
                CRCHLMHistory::push(&v44, (v11 >> 40) & 0xFFFFF);
              v12 = *(_QWORD *)v50;
              CRCHLMHistory::push(&v44, v50[0]);
              v13 = v48;
              if (*(_BYTE *)(a2[5] + 56 * v48 + 48))
              {
                if (v44 == 3)
                  v14 = v48 & 0xFFFFF;
                else
                  v14 = 0;
                if (v44 == 2)
                  v15 = v48 & 0xFFFFF;
                else
                  v15 = v14;
              }
              else if (v44 == 2)
              {
                v15 = v48 & 0xFFFFF | ((HIDWORD(v45) & 0xFFFFFLL) << 20);
              }
              else if (v44 == 3)
              {
                v15 = v48 & 0xFFFFF | ((unint64_t)(HIDWORD(v45) & 0xFFFFF) << 20) | ((unint64_t)(v46 & 0xFFFFF) << 40);
              }
              else
              {
                v15 = 0;
              }
              v16 = *a3;
              v17 = *a3 + 24 * v47;
              v20 = *(_QWORD **)(v17 + 8);
              v18 = v17 + 8;
              v19 = v20;
              if (!v20)
                goto LABEL_26;
              v21 = (_QWORD *)v18;
              do
              {
                v22 = v19[4];
                v23 = v22 >= v11;
                if (v22 >= v11)
                  v24 = v19;
                else
                  v24 = v19 + 1;
                if (v23)
                  v21 = v19;
                v19 = (_QWORD *)*v24;
              }
              while (*v24);
              if (v21 != (_QWORD *)v18 && v21[4] <= v11)
                v25 = v21[5];
              else
LABEL_26:
                v25 = -1;
              v47 = v25;
              v26 = v16 + 24 * v48;
              v29 = *(_QWORD **)(v26 + 8);
              v27 = (_QWORD *)(v26 + 8);
              v28 = v29;
              if (!v29)
                goto LABEL_38;
              v30 = v27;
              do
              {
                v31 = v28[4];
                v32 = v31 >= v15;
                if (v31 >= v15)
                  v33 = v28;
                else
                  v33 = v28 + 1;
                if (v32)
                  v30 = v28;
                v28 = (_QWORD *)*v33;
              }
              while (*v33);
              if (v30 != v27 && v30[4] <= v15)
                v34 = v30[5];
              else
LABEL_38:
                v34 = -1;
              v48 = v34;
              v35 = v56;
              if ((unint64_t)v56 >= v57)
              {
                v36 = std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>((uint64_t *)&v55, (const NetworkEdge *)&v47);
              }
              else
              {
                *v56 = v25;
                v35[1] = v34;
                v35[2] = v49;
                v35[3] = v12;
                v35[4] = v51;
                *(_OWORD *)(v35 + 5) = v52;
                v35[8] = 0;
                v35[9] = 0;
                v35[7] = 0;
                std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v35 + 7, __p, (uint64_t)v54, (v54 - (_BYTE *)__p) >> 3);
                v36 = (uint64_t)(v35 + 10);
              }
              v56 = (_QWORD *)v36;
              if (*(_BYTE *)(a2[5] + 56 * v13 + 48))
                CRCHNetwork::setFinal(a1, v48);
              if (__p)
              {
                v54 = __p;
                operator delete(__p);
              }
              ++v10;
              v4 = a2[5];
            }
            while (*(_QWORD *)(v4 + 56 * v7) > v10);
          }
          v37 = (_QWORD *)v9[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v9[2];
              v39 = *v38 == (_QWORD)v9;
              v9 = v38;
            }
            while (!v39);
          }
          v9 = v38;
        }
        while (v38 != v40);
        v5 = a2[6];
      }
      ++v7;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3) > v7);
  }
  CRCHNetwork::insertEdges((CRCHNetwork *)a1, &v55);
  v47 = (uint64_t)&v55;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_1D506C3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  a17 = v25 - 112;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void CRCHNetwork::storeAllLMContextDFSR(uint64_t a1, _QWORD *a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  char **v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  void *__p;
  void *v74;
  uint64_t v75[3];
  unsigned int v76;
  void *v77;
  void *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;

  v9 = *(_QWORD *)(a2[8] + 32);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3);
  v12 = *a3;
  v11 = a3[1];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a3) >> 3);
  v14 = v10 - v13;
  if (v10 > v13)
  {
    v15 = a3[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 3) >= v14)
    {
      v38 = &v11[24 * v14];
      v39 = 0x4924924924924928 * ((uint64_t)(a2[6] - a2[5]) >> 3) - 8 * ((v11 - *a3) >> 3);
      v40 = v11 + 8;
      do
      {
        *v40 = 0;
        v40[1] = 0;
        *(v40 - 1) = v40;
        v40 += 3;
        v39 -= 24;
      }
      while (v39);
      a3[1] = v38;
      goto LABEL_30;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v10)
      v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[6] - a2[5]) >> 3);
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<BOOL>>>(v18);
    v21 = &v19[24 * v13];
    v22 = &v19[24 * v10];
    v23 = v21 + 8;
    v24 = 24 * v10 - 24 * v13;
    do
    {
      *v23 = 0;
      v23[1] = 0;
      *(v23 - 1) = v23;
      v23 += 3;
      v24 -= 24;
    }
    while (v24);
    v25 = &v19[24 * v20];
    v26 = *a3;
    v27 = a3[1];
    if (v27 == *a3)
    {
      *a3 = v21;
      a3[1] = v22;
      a3[2] = v25;
      if (!v27)
        goto LABEL_30;
    }
    else
    {
      v28 = 0;
      do
      {
        v29 = &v21[v28];
        *((_QWORD *)v29 - 3) = *(_QWORD *)&v27[v28 - 24];
        v30 = &v27[v28 - 16];
        v31 = *(_QWORD *)v30;
        *(_QWORD *)&v21[v28 - 16] = *(_QWORD *)v30;
        v32 = (uint64_t)&v21[v28 - 16];
        v33 = *(_QWORD *)&v27[v28 - 8];
        *((_QWORD *)v29 - 1) = v33;
        if (v33)
        {
          *(_QWORD *)(v31 + 16) = v32;
          *(_QWORD *)&v27[v28 - 24] = v30;
          *(_QWORD *)v30 = 0;
          *(_QWORD *)&v27[v28 - 8] = 0;
        }
        else
        {
          *((_QWORD *)v29 - 3) = v32;
        }
        v28 -= 24;
      }
      while (&v27[v28] != v26);
      v27 = *a3;
      v34 = a3[1];
      *a3 = &v21[v28];
      a3[1] = v22;
      a3[2] = v25;
      if (v34 != v27)
      {
        do
        {
          v35 = v34 - 24;
          std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((_QWORD **)v34 - 2));
          v34 = v35;
        }
        while (v35 != v27);
      }
      if (!v27)
        goto LABEL_30;
    }
    operator delete(v27);
    goto LABEL_30;
  }
  if (v10 < v13)
  {
    v36 = &v12[0x4924924924924928 * ((uint64_t)(a2[6] - a2[5]) >> 3)];
    if (v11 != v36)
    {
      do
      {
        v37 = v11 - 24;
        std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((_QWORD **)v11 - 2));
        v11 = v37;
      }
      while (v37 != v36);
    }
    a3[1] = v36;
  }
LABEL_30:
  v79 = a7;
  v80 = 0;
  v81 = 0;
  if (a7 >= 2)
  {
    v41 = a7 - 1;
    do
    {
      CRCHLMHistory::push(&v79, 0);
      --v41;
    }
    while (v41);
    a7 = v79;
  }
  v42 = a3;
  if (a7 == 2)
  {
    v43 = v9 & 0xFFFFF | ((HIDWORD(v80) & 0xFFFFFLL) << 20);
  }
  else if (a7 == 3)
  {
    v43 = v9 & 0xFFFFF | ((unint64_t)(HIDWORD(v80) & 0xFFFFF) << 20) | ((unint64_t)(v81 & 0xFFFFF) << 40);
  }
  else
  {
    v43 = 0;
  }
  v44 = (uint64_t)&(*a3)[24 * v9];
  v47 = *(_QWORD **)(v44 + 8);
  v45 = v44 + 8;
  v46 = v47;
  if (!v47)
    goto LABEL_50;
  v48 = (_QWORD *)v45;
  do
  {
    v49 = v46[4];
    v50 = v49 >= v43;
    if (v49 >= v43)
      v51 = v46;
    else
      v51 = v46 + 1;
    if (v50)
      v48 = v46;
    v46 = (_QWORD *)*v51;
  }
  while (*v51);
  if (v48 != (_QWORD *)v45 && v43 >= v48[4])
  {
    v52 = 0;
  }
  else
  {
LABEL_50:
    std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)&(*a3)[24 * v9], v43, v43, 0);
    v52 = 1;
  }
  v53 = a2[5];
  if (*(_QWORD *)(v53 + 56 * v9 + 8))
  {
    v54 = 0;
    v55 = v9 & 0xFFFFF;
    do
    {
      v64 = v54;
      NetworkEdge::NetworkEdge((NetworkEdge *)v75, *(const NetworkEdge **)(a2[14] + 8 * (*(_QWORD *)(v53 + 56 * v9 + 24) + v54)));
      v56 = v75[0];
      v57 = a2[5];
      if (!*(_QWORD *)(v57 + 56 * v75[0] + 8))
        goto LABEL_63;
      v58 = v9;
      v59 = 0;
      do
      {
        NetworkEdge::NetworkEdge((NetworkEdge *)&v69, *(const NetworkEdge **)(a2[14] + 8 * (v59 + *(_QWORD *)(v57 + 56 * v56 + 24))));
        v66 = 2;
        v67 = 0;
        v68 = 0;
        CRCHLMHistory::push(&v66, v72);
        CRCHLMHistory::push(&v66, v76);
        if (v66 == 2)
        {
          v60 = v55 & 0xFFFFFF00000FFFFFLL | ((HIDWORD(v67) & 0xFFFFFLL) << 20);
        }
        else
        {
          v60 = 0;
          if (v66 == 3)
            v60 = ((unint64_t)(HIDWORD(v67) & 0xFFFFF) << 20) | ((unint64_t)(v68 & 0xFFFFF) << 40) | v55;
        }
        v61 = std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)&(*v42)[24 * v58], v60, v60, v52);
        if (__p)
        {
          v74 = __p;
          operator delete(__p);
        }
        v52 += v61 & 1;
        ++v59;
        v57 = a2[5];
        v62 = *(_QWORD *)(v57 + 56 * v56 + 8);
        v42 = a3;
      }
      while (v59 < v62);
      v9 = v58;
      if (!v62)
      {
LABEL_63:
        v69 = 2;
        v70 = 0;
        v71 = 0;
        CRCHLMHistory::push(&v69, 0);
        CRCHLMHistory::push(&v69, v76);
        if (v69 == 2)
        {
          v63 = v55 & 0xFFFFFF00000FFFFFLL | ((HIDWORD(v70) & 0xFFFFFLL) << 20);
        }
        else
        {
          v63 = 0;
          if (v69 == 3)
            v63 = ((unint64_t)(HIDWORD(v70) & 0xFFFFF) << 20) | ((unint64_t)(v71 & 0xFFFFF) << 40) | v55;
        }
        v52 += std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>((uint64_t **)&(*v42)[24 * v9], v63, v63, v52) & 1;
      }
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
      v54 = v64 + 1;
      v53 = a2[5];
    }
    while ((unint64_t)(v64 + 1) < *(_QWORD *)(v53 + 56 * v9 + 8));
  }
}

void sub_1D506C948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  v27 = *(void **)(v25 + 56);
  if (v27)
  {
    *(_QWORD *)(v25 + 64) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::getEntryFromOldToNew(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;

  v4 = *a2 + 24 * a3;
  v7 = *(_QWORD **)(v4 + 8);
  v5 = v4 + 8;
  v6 = v7;
  if (!v7)
    return -1;
  v8 = (_QWORD *)v5;
  do
  {
    v9 = v6[4];
    v10 = v9 >= a4;
    if (v9 >= a4)
      v11 = v6;
    else
      v11 = v6 + 1;
    if (v10)
      v8 = v6;
    v6 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != (_QWORD *)v5 && v8[4] <= a4)
    return v8[5];
  else
    return -1;
}

uint64_t CRCHNetwork::rescoreWithCharacterLM(uint64_t result, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  std::string __p;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(result + 88);
  if (*(_QWORD *)(result + 96) != v4)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*a3 + 8 * *(_QWORD *)(v4 + v7));
      if ((v9 & 0xFFFFF) != 0)
      {
        CRCHNetwork::getSymbol(&__p, v6, v9 & 0xFFFFF);
        v10 = sh2i((uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v10 = 9218;
      }
      v11 = v9 & 0xFFFFF00000;
      if ((v9 & 0xFFFFF00000) != 0)
      {
        CRCHNetwork::getSymbol(&__p, v6, (v9 >> 20) & 0xFFFFF);
        v12 = sh2i((uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v12 = 9218;
      }
      CRCHNetwork::getSymbol(&__p, v6, *(_QWORD *)(v4 + v7 + 24));
      sh2i((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (a4 == 3)
        __p.__r_.__value_.__r.__words[0] = __PAIR64__(v12, v10);
      else
        LODWORD(__p.__r_.__value_.__l.__data_) = v10;
      result = LMLanguageModelConditionalProbability();
      v14 = v13 / 20.0;
      if (v11)
        v15 = 2.0;
      else
        v15 = 0.8;
      *(double *)(v4 + v7 + 32) = 1.0 - *(double *)(v4 + v7 + 32) + v15 * v14 + 0.0;
      ++v8;
      v4 = *(_QWORD *)(v6 + 88);
      v7 += 80;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v6 + 96) - v4) >> 4));
  }
  return result;
}

uint64_t *CRCHNetwork::makeFinalNodeTheLastNode(CRCHNetwork *this)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;

  v3 = *((_QWORD *)this + 8);
  result = (uint64_t *)((char *)this + 64);
  v4 = *(result - 3);
  v5 = *(_QWORD *)(v3 + 32);
  v6 = 0x6DB6DB6DB6DB6DB7 * ((*(result - 2) - v4) >> 3) - 1;
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 11);
    v8 = *((_QWORD *)this + 12) - v7;
    if (v8)
    {
      v9 = v8 / 80;
      if (v9 <= 1)
        v9 = 1;
      v10 = (unint64_t *)(v7 + 8);
      do
      {
        v11 = *(v10 - 1);
        v12 = v6;
        if (v11 == v5 || (v12 = v5, v11 == v6))
          *(v10 - 1) = v12;
        v13 = v6;
        if (*v10 == v5 || (v13 = v5, *v10 == v6))
          *v10 = v13;
        v10 += 10;
        --v9;
      }
      while (v9);
    }
    v14 = 56 * v5;
    v15 = (__int128 *)(v4 + 56 * v5);
    v16 = (__int128 *)(v4 + 56 * v6);
    v17 = *v15;
    v18 = v15[1];
    v20 = v16[1];
    v19 = v16[2];
    v21 = *v16;
    *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
    v15[1] = v20;
    v15[2] = v19;
    *v15 = v21;
    v22 = (_OWORD *)(*((_QWORD *)this + 5) + 56 * v6);
    *v22 = v17;
    v22[1] = v18;
    std::__tree<unsigned long>::__erase_unique<unsigned long>((uint64_t **)result, v5);
    *(_BYTE *)(*((_QWORD *)this + 5) + v14 + 48) = 0;
    return CRCHNetwork::setFinal((uint64_t **)this, v6);
  }
  return result;
}

void CRCHNetwork::unionNetwork(CRCHNetwork *this, const CRCHNetwork *a2, const CRCHNetwork *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  std::string v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  unint64_t v33;
  void *__p;
  void *v35;
  uint64_t v36[3];
  uint64_t v37[3];
  std::string v38;
  char __str[19];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 + 5);
  v6 = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a3 + 5);
  v8 = *((_QWORD *)a3 + 6);
  std::set<unsigned long>::set[abi:ne180100](v37, (uint64_t)a2 + 64);
  v28 = (char *)a3 + 64;
  std::set<unsigned long>::set[abi:ne180100](v36, (uint64_t)a3 + 64);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3);
  std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, v10 + 0x6DB6DB6DB6DB6DB7 * ((v8 - v9) >> 3) - 2);
  CRCHSymbolMap::operator=((uint64_t)this + 136, (uint64_t)a2 + 136);
  v11 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) != v11)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      CRCHNetwork::storeEntry(this, (const NetworkEdge *)(v11 + 80 * v12));
      v12 = v13;
      v11 = *((_QWORD *)a2 + 11);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a2 + 12) - v11) >> 4) > v13++);
  }
  v15 = *((_QWORD *)a3 + 11);
  if (*((_QWORD *)a3 + 12) != v15)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      NetworkEdge::NetworkEdge((NetworkEdge *)&v30, (const NetworkEdge *)(v15 + v16));
      v18 = v30;
      v19 = *(_QWORD *)(v36[0] + 32);
      if (v30 == v19)
      {
        v30 = *(_QWORD *)(v37[0] + 32);
        v19 = v18;
      }
      else if (v30 != *((_QWORD *)a3 + 4))
      {
        v20 = std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v38, (uint64_t)v28);
        v21 = *(_QWORD *)(v38.__r_.__value_.__r.__words[0] + 32);
        std::__tree<CRCHuint128>::destroy((uint64_t)v20, (_QWORD *)v38.__r_.__value_.__l.__size_);
        v22 = -2;
        if (v18 <= v21)
          v22 = -1;
        v30 += v22 + v10;
        v19 = *(_QWORD *)(v36[0] + 32);
      }
      v23 = v31;
      if (v31 == v19)
        break;
      if (v31 != *((_QWORD *)a3 + 4))
      {
        v25 = std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v38, (uint64_t)v28);
        v26 = *(_QWORD *)(v38.__r_.__value_.__r.__words[0] + 32);
        std::__tree<CRCHuint128>::destroy((uint64_t)v25, (_QWORD *)v38.__r_.__value_.__l.__size_);
        v27 = -2;
        if (v23 <= v26)
          v27 = -1;
        v24 = v27 + v10 + v31;
        goto LABEL_18;
      }
LABEL_19:
      snprintf(__str, 0x13uLL, "0x%zx", v32);
      std::string::basic_string[abi:ne180100]<0>(&v38, __str);
      CRCHSymbolMap::store((_QWORD *)this + 17, (__int128 *)&v38);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      CRCHNetwork::getSymbol(&v38, (uint64_t)a3, v33);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      else
        v29 = v38;
      v33 = CRCHSymbolMap::store((_QWORD *)this + 17, (__int128 *)&v29);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      CRCHNetwork::storeEntry(this, (const NetworkEdge *)&v30);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      ++v17;
      v15 = *((_QWORD *)a3 + 11);
      v16 += 80;
      if (v17 >= 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a3 + 12) - v15) >> 4))
        goto LABEL_31;
    }
    v24 = *(_QWORD *)(v37[0] + 32);
LABEL_18:
    v31 = v24;
    goto LABEL_19;
  }
LABEL_31:
  CRCHNetwork::setFinal((uint64_t **)this, *(_QWORD *)(v37[0] + 32));
  CRCHNetwork::prepareNetwork(this);
  std::__tree<CRCHuint128>::destroy((uint64_t)v36, (_QWORD *)v36[1]);
  std::__tree<CRCHuint128>::destroy((uint64_t)v37, (_QWORD *)v37[1]);
}

void sub_1D506D050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,char a31,_QWORD *a32)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)&a28, a29);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

uint64_t CRCHNetwork::guaranteeThatEdgesAreNonNegative(CRCHNetwork *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  double *v4;
  char v5;

  v1 = *((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 12) - v1;
  if (v2)
  {
    v3 = v2 / 80;
    if (v3 <= 1)
      v3 = 1;
    v4 = (double *)(v1 + 32);
    v5 = 1;
    do
    {
      if (*v4 < 0.000000999999997)
      {
        v5 = 0;
        *v4 = 0.000000999999997;
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

void CRCHNetwork::convertAllEdgesToScores(CRCHNetwork *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  double *v5;
  long double v6;

  v1 = *((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 12) - v1;
  if (v2)
  {
    v3 = v2 / 80;
    if (v3 <= 1)
      v4 = 1;
    else
      v4 = v3;
    v5 = (double *)(v1 + 32);
    do
    {
      v6 = 2.22044605e-16;
      if (*v5 >= 2.22044605e-16)
      {
        v6 = *v5;
        if (*v5 > 1.0)
          v6 = 1.0;
      }
      *v5 = -log10(v6);
      v5 += 10;
      --v4;
    }
    while (v4);
  }
}

void CRCHNetwork::applyInsertionPenalty(CRCHNetwork *this, float a2)
{
  uint64_t v2;
  unint64_t v4;
  double v5;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v8;
  int v9;
  unint64_t v10;
  double v11;
  std::string __p;

  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) != v2)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      CRCHNetwork::getSymbol(&__p, (uint64_t)this, *(_QWORD *)(v2 + 80 * v4 + 24));
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        v8 = 0;
        do
        {
          v9 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          if (v9 == 95)
            ++v8;
          --size;
        }
        while (size);
        v10 = v8 + 1;
      }
      else
      {
        v10 = 1;
      }
      v11 = v5 * (double)v10;
      v2 = *((_QWORD *)this + 11);
      *(double *)(v2 + 80 * v4 + 32) = fmax(*(double *)(v2 + 80 * v4 + 32) + v11, 0.000001);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v2 = *((_QWORD *)this + 11);
      }
      ++v4;
    }
    while (v4 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 12) - v2) >> 4));
  }
}

uint64_t CRCHNetwork::applyDiscount(uint64_t this, float a2)
{
  uint64_t *v2;
  uint64_t v3;
  double v4;
  double *v5;

  v2 = *(uint64_t **)(this + 40);
  v3 = *v2;
  if (*v2)
  {
    v4 = a2;
    v5 = (double *)(*(_QWORD *)(this + 88) + 80 * v2[2] + 32);
    do
    {
      *v5 = fmax(*v5 + v4, 0.000001);
      v5 += 10;
      --v3;
    }
    while (v3);
  }
  return this;
}

void CRCHNetwork::composeTrimAndSimplify(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t **a5, CRCHNetwork *a6, int a7)
{
  _BYTE v13[264];
  _BYTE v14[264];

  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v14);
  CRCHNetwork::compose((uint64_t)v14, a2, a3, a4, a5);
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v13);
  CRCHNetwork::trimDeadEdges((CRCHNetwork *)v14, (CRCHNetwork *)v13);
  CRCHNetwork::removeEpsOutputEdges((CRCHNetwork *)v13, a6, a7);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v13);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v14);
}

void sub_1D506D3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)&a42);
  _Unwind_Resume(a1);
}

void CRCHNetwork::composeTrimAndSimplify(CRCHNetwork *this, const CRCHNetwork *a2, CRCHNetwork *a3, CRCHNetwork *a4, int a5, char a6)
{
  _BYTE v11[264];
  _BYTE v12[264];

  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v12);
  CRCHNetwork::compose((CRCHNetwork *)v12, a2, a3, a6);
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v11);
  CRCHNetwork::trimDeadEdges((CRCHNetwork *)v12, (CRCHNetwork *)v11);
  CRCHNetwork::removeEpsOutputEdges((CRCHNetwork *)v11, a4, a5);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v11);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v12);
}

void sub_1D506D498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)&a42);
  _Unwind_Resume(a1);
}

void CRCHNetwork::rescoreWithWordLMVector(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7, _QWORD *a8, int a9, uint64_t a10, uint64_t a11)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD **v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string::size_type size;
  std::string *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD **v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD **v58;
  _QWORD *v59;
  _QWORD **v60;
  unint64_t v61;
  _QWORD *v62;
  NSObject *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD **v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  double v74;
  double v75;
  _BOOL4 v76;
  _QWORD *v77;
  _QWORD **v78;
  _QWORD *v79;
  _QWORD **v80;
  unint64_t v81;
  double v82;
  double v84;
  int v87;
  unint64_t v88;
  int v89;
  uint64_t v92;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  _QWORD *v102[2];
  uint64_t *v103;
  _QWORD *v104[2];
  std::string __p;
  std::string v106;
  uint8_t buf[8];
  std::string v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v12 = v104;
  v104[0] = 0;
  v104[1] = 0;
  v102[1] = 0;
  v103 = (uint64_t *)v104;
  v101 = (uint64_t *)v102;
  v102[0] = 0;
  v92 = operator new[]();
  v96 = operator new[]();
  v13 = operator new[]();
  v15 = a1[5];
  v14 = a1[6];
  if (v14 == v15)
    goto LABEL_150;
  v16 = 0;
  v94 = (uint64_t *)(a11 + 8);
  v95 = (uint64_t *)(a10 + 8);
  do
  {
    if (*(_BYTE *)(v15 + 56 * v16 + 48))
      goto LABEL_146;
    v17 = *(_QWORD *)(*a8 + 8 * v16);
    if (a1[4] != v16)
    {
      v24 = 0;
      goto LABEL_27;
    }
    v98 = 0;
    v99 = 0;
    v100 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v98, *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
    v88 = v17;
    v19 = (char *)v98;
    v18 = v99;
    v20 = -1;
    v21 = v99 - (_BYTE *)v98;
    if (v99 == v98)
    {
LABEL_20:
      if (!v18)
        goto LABEL_22;
LABEL_21:
      v99 = v18;
      operator delete(v18);
      goto LABEL_22;
    }
    v22 = (uint64_t)v99;
    while (1)
    {
      if (!a2)
        goto LABEL_12;
      memset(&v106, 0, sizeof(v106));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v106, v19, v22, v21 >> 2);
      v20 = isWordValid(a2, (uint64_t *)&v106);
      if (v106.__r_.__value_.__r.__words[0])
      {
        v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      v19 = (char *)v98;
      if ((v20 & 0x80000000) == 0)
        break;
      v22 = (uint64_t)v99;
LABEL_12:
      if (a3)
      {
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v19, v22, (v22 - (uint64_t)v19) >> 2);
        v20 = isWordValid(a3, (uint64_t *)&__p);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v19 = (char *)v98;
        if ((v20 & 0x80000000) == 0)
          break;
        v22 = (uint64_t)v99;
      }
      v18 = v19;
      v23 = v22 - (_QWORD)(v19 + 4);
      if ((char *)v22 != v19 + 4)
      {
        memmove(v19, v19 + 4, v22 - (_QWORD)(v19 + 4));
        v18 = (char *)v98;
      }
      v22 = (uint64_t)&v19[v23];
      v99 = (char *)v22;
      v19 = v18;
      v21 = v22 - (_QWORD)v18;
      if ((char *)v22 == v18)
        goto LABEL_20;
    }
    v18 = v19;
    if (v19)
      goto LABEL_21;
LABEL_22:
    if (v20 == -1)
      v24 = 1;
    else
      v24 = v20;
    v17 = v88;
LABEL_27:
    v25 = v12;
    v26 = v17;
    v27 = v17 & 0xFFFFF;
    CRCHNetwork::getSymbol(&v106, (uint64_t)a1, v27);
    v28 = v26;
    CRCHNetwork::getSymbol(&__p, (uint64_t)a1, (v26 >> 20) & 0xFFFFF);
    v29 = v24;
    if (v27)
    {
      v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      v29 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a7, (const void **)&v106.__r_.__value_.__l.__data_, (__int128 **)&v108)+ 14);
    }
    v30 = (v28 & 0xFFFFF00000) == 0;
    v12 = v25;
    if (!v30)
    {
      v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v24 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a7, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&v108)+ 14);
    }
    v31 = a1[5];
    if (*(_QWORD *)(v31 + 56 * v16))
    {
      v87 = v29;
      v89 = v24;
      v32 = 0;
      do
      {
        v33 = *(_QWORD *)(v31 + 56 * v16 + 16) + v32;
        v97 = v33;
        CRCHNetwork::getSymbol(&v108, (uint64_t)a1, *(_QWORD *)(a1[11] + 80 * v33 + 24));
        size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
        v35 = &v108;
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          size = v108.__r_.__value_.__l.__size_;
          v35 = (std::string *)v108.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          v36 = 0;
          do
          {
            v37 = v35->__r_.__value_.__s.__data_[0];
            v35 = (std::string *)((char *)v35 + 1);
            if (v37 == 95)
              ++v36;
            --size;
          }
          while (size);
          v38 = v36 + 1;
        }
        else
        {
          v38 = 1;
        }
        *(double *)(v13 + 8 * v32) = (double)v38;
        *(_QWORD *)buf = &v108;
        *(_DWORD *)(v92 + 4 * v32) = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a7, (const void **)&v108.__r_.__value_.__l.__data_, (__int128 **)buf)+ 14);
        if (v38 == 1)
        {
          v39 = sh2i((uint64_t)&v108);
          v40 = v39;
          v41 = *v95;
          if (*v95)
          {
            v42 = a10 + 8;
            do
            {
              v43 = *(_DWORD *)(v41 + 28);
              v44 = v43 < v39;
              if (v43 >= v39)
                v45 = (uint64_t *)v41;
              else
                v45 = (uint64_t *)(v41 + 8);
              if (!v44)
                v42 = v41;
              v41 = *v45;
            }
            while (*v45);
            if ((uint64_t *)v42 != v95 && v39 >= *(_DWORD *)(v42 + 28))
            {
              v46 = v104[0];
              if (!v104[0])
                goto LABEL_62;
              v47 = v25;
              do
              {
                v48 = v46;
                v49 = v47;
                v50 = v46[4];
                v51 = v46 + 1;
                if (v50 >= v33)
                {
                  v51 = v48;
                  v47 = (_QWORD **)v48;
                }
                v46 = (_QWORD *)*v51;
              }
              while (v46);
              if (v47 == v25)
                goto LABEL_62;
              if (v50 < v33)
                v48 = v49;
              if (v33 < v48[4])
LABEL_62:
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v103, v33, (uint64_t *)&v97)[5] = v39;
            }
          }
          v52 = *v94;
          if (*v94)
          {
            v53 = a11 + 8;
            do
            {
              v54 = *(_DWORD *)(v52 + 28);
              v55 = v54 < v40;
              if (v54 >= v40)
                v56 = (uint64_t *)v52;
              else
                v56 = (uint64_t *)(v52 + 8);
              if (!v55)
                v53 = v52;
              v52 = *v56;
            }
            while (*v56);
            if ((uint64_t *)v53 != v94 && v40 >= *(_DWORD *)(v53 + 28))
            {
              v57 = v102[0];
              if (!v102[0])
                goto LABEL_82;
              v58 = v102;
              do
              {
                v59 = v57;
                v60 = v58;
                v61 = v57[4];
                v62 = v57 + 1;
                if (v61 >= v33)
                {
                  v62 = v59;
                  v58 = (_QWORD **)v59;
                }
                v57 = (_QWORD *)*v62;
              }
              while (v57);
              if (v58 == v102)
                goto LABEL_82;
              if (v61 < v33)
                v59 = v60;
              if (v33 < v59[4])
LABEL_82:
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v101, v33, (uint64_t *)&v97)[5] = v40;
            }
          }
        }
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        ++v32;
        v31 = a1[5];
      }
      while (v32 < *(_QWORD *)(v31 + 56 * v16));
      v29 = v87;
      v24 = v89;
    }
    if (a9 == 3)
    {
      v108.__r_.__value_.__r.__words[0] = __PAIR64__(v24, v29);
      if ((LMLanguageModelConditionalProbabilityVector() & 1) == 0)
      {
        CHOSLogForCategory(0);
        v63 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D4FB8000, v63, OS_LOG_TYPE_ERROR, "Error: LMLanguageModelConditionalProbabilityVector returns false in LMScoreVector 3Gram!\n", buf, 2u);
        }
        goto LABEL_95;
      }
    }
    else
    {
      LODWORD(v108.__r_.__value_.__l.__data_) = v29;
      if ((LMLanguageModelConditionalProbabilityVector() & 1) == 0)
      {
        CHOSLogForCategory(0);
        v63 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D4FB8000, v63, OS_LOG_TYPE_ERROR, "Error: LMLanguageModelConditionalProbabilityVector returns false in LMScoreVector 2Gram!\n", buf, 2u);
        }
LABEL_95:

      }
    }
    v64 = a1[5];
    if (*(_QWORD *)(v64 + 56 * v16))
    {
      v65 = 0;
      do
      {
        v66 = *(_QWORD *)(v64 + 56 * v16 + 16) + v65;
        v108.__r_.__value_.__r.__words[0] = v66;
        v67 = a1[11];
        v68 = v104[0];
        if (v104[0])
        {
          v69 = v25;
          do
          {
            v70 = v68;
            v71 = v69;
            v72 = v68[4];
            v73 = v68 + 1;
            if (v72 >= v66)
            {
              v73 = v70;
              v69 = (_QWORD **)v70;
            }
            v68 = (_QWORD *)*v73;
          }
          while (v68);
          if (v69 != v25)
          {
            if (v72 < v66)
              v70 = v71;
            if (v66 >= v70[4])
            {
              if (*(_BYTE *)(v64 + 56 * *(_QWORD *)(v67 + 80 * v66 + 8) + 48))
                v74 = 0.3;
              else
                v74 = 3.0;
              *(double *)(v96 + 8 * v65) = v74;
            }
          }
        }
        if (std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v103, v66, (uint64_t *)&v108)[5] == 44|| std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v103, v66, (uint64_t *)&v108)[5] == 46|| std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v103, v66, (uint64_t *)&v108)[5] == 58|| std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v103, v66, (uint64_t *)&v108)[5] == 12289)
        {
          *(_QWORD *)(v96 + 8 * v65) = 0x3FD3333333333333;
          v75 = 0.3;
        }
        else
        {
          v75 = *(double *)(v96 + 8 * v65);
        }
        if (*(_QWORD *)(v67 + 80 * v66))
          v76 = 0;
        else
          v76 = *(_BYTE *)(a1[5] + 56 * *(_QWORD *)(v67 + 80 * v66 + 8) + 48) != 0;
        v77 = v102[0];
        if (!v102[0])
          goto LABEL_129;
        v78 = v102;
        do
        {
          v79 = v77;
          v80 = v78;
          v81 = v77[4];
          if (v81 >= v66)
            v78 = (_QWORD **)v77;
          else
            ++v77;
          v77 = (_QWORD *)*v77;
        }
        while (v77);
        if (v78 == v102)
          goto LABEL_129;
        if (v81 < v66)
          v79 = v80;
        if (v66 < v79[4])
LABEL_129:
          v78 = v102;
        v82 = -v75;
        if (v78 != v102 && !v76)
          v82 = 50.0;
        if (v76)
          v84 = 0.0;
        else
          v84 = 0.3;
        *(double *)(v67 + 80 * v66 + 32) = fmax(*(double *)(v67 + 80 * v66 + 32) / *(double *)(v13 + 8 * v65++) + v84 * v82, 0.000001);
        v64 = a1[5];
      }
      while (v65 < *(_QWORD *)(v64 + 56 * v16));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    v15 = a1[5];
    v14 = a1[6];
LABEL_146:
    ++v16;
  }
  while (v16 < 0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 3));
LABEL_150:
  MEMORY[0x1D826E270](v92, 0x1000C8052888210);
  MEMORY[0x1D826E270](v96, 0x1000C8000313F17);
  MEMORY[0x1D826E270](v13, 0x1000C8000313F17);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v101, v102[0]);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v103, v104[0]);
}

void sub_1D506DE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__tree<CRCHuint128>::destroy((uint64_t)&a27, a28);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a30, a31);
  _Unwind_Resume(a1);
}

void CRCHNetwork::scoreCandidateLatticeWithWordLM(int a1, const CRCHNetwork *a2, int a3, uint64_t a4, void *a5, void *a6, int a7, int a8, CRCHNetwork *a9, uint64_t a10, std::vector<int> *a11, uint64_t a12, _QWORD *a13, _QWORD *a14)
{
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  CRCHNetwork *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  double *v28;
  uint64_t *v29;
  uint64_t v30;
  double *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  const void *v44;
  _BYTE *v45;
  const void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t **v57;
  _QWORD *v58;
  _QWORD *v59;
  BOOL v60;
  uint64_t *i;
  uint64_t **v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  const void *v71;
  const void *v72;
  size_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  uint64_t **v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t j;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t **v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t **v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t **v109;
  _OWORD *v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t **v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t **v117;
  uint64_t **v118;
  _QWORD *v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t **v123;
  uint64_t **v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t **v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t **v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t **v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *k;
  uint64_t **v141;
  char *v142;
  uint64_t *v143;
  uint64_t **v144;
  uint64_t **v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t **v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD v158[2];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _BYTE v162[56];
  char v163;
  _QWORD *v164;
  _QWORD v165[2];
  _QWORD *v166;
  _QWORD v167[2];
  __int128 v168;
  char v169[8];
  _QWORD *v170;
  char v171[8];
  _QWORD *v172;
  void *__p[3];
  char **v174;
  char *v175[2];
  _BYTE v176[88];
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[11];
  uint64_t v180;
  uint64_t v181;
  uint64_t **v182;
  _QWORD *v183;
  uint64_t v184;

  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v179);
  CRCHNetwork::CRCHNetwork((CRCHNetwork *)v176);
  v175[0] = 0;
  v175[1] = 0;
  v174 = v175;
  v151 = (uint64_t)a5;
  CRCHNetwork::composeTrimAndSimplify(v18, (uint64_t)a2, a5, a6, (uint64_t **)&v174, (CRCHNetwork *)v179, 0);
  LMLexiconResetCursors();
  LMLexiconResetCursors();
  v19 = a10;
  if (v181 != v180)
  {
    v20 = (v181 - v180) / 80;
    if (v20 <= 1)
      v20 = 1;
    v21 = (double *)(v180 + 32);
    do
    {
      if (*v21 < 0.000000999999997)
        *v21 = 0.000000999999997;
      v21 += 10;
      --v20;
    }
    while (v20);
  }
  memset(__p, 0, sizeof(__p));
  CRCHNetwork::expandForLM((uint64_t **)a10, v179, 2, (char **)__p);
  std::set<int>::set[abi:ne180100]((uint64_t)v171, a13);
  std::set<int>::set[abi:ne180100]((uint64_t)v169, a14);
  CRCHNetwork::rescoreWithWordLMVector((_QWORD *)a10, (uint64_t)a5, (uint64_t)a6, a4, v22, a12, (uint64_t **)&v174, __p, 2, (uint64_t)v171, (uint64_t)v169);
  std::__tree<CRCHuint128>::destroy((uint64_t)v169, v170);
  std::__tree<CRCHuint128>::destroy((uint64_t)v171, v172);
  v24 = *(_QWORD *)(a10 + 88);
  v25 = (_QWORD *)(a10 + 88);
  v26 = *(_QWORD *)(a10 + 96) - v24;
  if (v26)
  {
    v27 = v26 / 80;
    if (v27 <= 1)
      v27 = 1;
    v28 = (double *)(v24 + 32);
    do
    {
      if (*v28 < 0.000000999999997)
        *v28 = 0.000000999999997;
      v28 += 10;
      --v27;
    }
    while (v27);
  }
  CRCHNetwork::composeTrimAndSimplify(v23, a2, a9, (CRCHNetwork *)v176, 0, 0);
  if (v178 != v177)
  {
    CRCHNetwork::makeFinalNodeTheLastNode((CRCHNetwork *)a10);
    CRCHNetwork::makeFinalNodeTheLastNode((CRCHNetwork *)v176);
    v29 = *(uint64_t **)(a10 + 40);
    v30 = *v29;
    if (*v29)
    {
      v31 = (double *)(*v25 + 80 * v29[2] + 32);
      do
      {
        *v31 = fmax(*v31 + 0.5, 0.000001);
        v31 += 10;
        --v30;
      }
      while (v30);
    }
    v152 = *(uint64_t **)a10;
    v158[0] = 0;
    v158[1] = 0;
    v153 = 0u;
    v154 = 0u;
    v155 = 0u;
    v156 = 0;
    v157 = v158;
    v159 = 0u;
    v160 = 0u;
    v161 = 0u;
    CRCHSymbolMap::CRCHSymbolMap((CRCHSymbolMap *)v162);
    v163 = 0;
    v164 = v165;
    v165[0] = 0;
    v167[0] = 0;
    v167[1] = 0;
    v165[1] = 0;
    v166 = v167;
    v168 = 0uLL;
    CRCHNetwork::unionNetwork((CRCHNetwork *)&v152, (const CRCHNetwork *)a10, (const CRCHNetwork *)v176);
    *(_QWORD *)a10 = v152;
    std::string::operator=((std::string *)(a10 + 8), (const std::string *)&v153);
    *(_QWORD *)(a10 + 32) = *((_QWORD *)&v154 + 1);
    if (&v152 == (uint64_t **)a10)
    {
LABEL_239:
      *(_OWORD *)(v19 + 248) = v168;
      CRCHNetwork::prepareNetwork((uint64_t *)&v168, (CRCHNetwork *)v19);
      CRCHNetwork::~CRCHNetwork((CRCHNetwork *)&v152);
      goto LABEL_240;
    }
    v32 = v155;
    v33 = *((_QWORD *)&v155 + 1) - v155;
    v34 = *(_QWORD *)(a10 + 56);
    v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v155 + 1) - v155) >> 3);
    v36 = *(char **)(a10 + 40);
    if (0x6DB6DB6DB6DB6DB7 * ((v34 - (uint64_t)v36) >> 3) >= v35)
    {
      v45 = *(_BYTE **)(a10 + 48);
      if (0x6DB6DB6DB6DB6DB7 * ((v45 - v36) >> 3) >= v35)
      {
        if (*((_QWORD *)&v155 + 1) != (_QWORD)v155)
          memmove(v36, (const void *)v155, v33 - 7);
        v41 = a10;
      }
      else
      {
        v46 = (const void *)(v155 + 8 * ((v45 - v36) >> 3));
        if (v45 == v36)
        {
          v41 = a10;
        }
        else
        {
          memmove(v36, (const void *)v155, v45 - v36 - 7);
          v41 = a10;
          v36 = *(char **)(a10 + 48);
        }
        v33 = *((_QWORD *)&v32 + 1) - (_QWORD)v46;
        if (*((const void **)&v32 + 1) != v46)
        {
          v43 = v33 - 7;
          v40 = v36;
          v44 = v46;
          goto LABEL_41;
        }
      }
    }
    else
    {
      if (v36)
      {
        *(_QWORD *)(a10 + 48) = v36;
        operator delete(v36);
        v34 = 0;
        *(_QWORD *)(a10 + 40) = 0;
        *(_QWORD *)(a10 + 48) = 0;
        *(_QWORD *)(a10 + 56) = 0;
      }
      if (v35 > 0x492492492492492)
        goto LABEL_243;
      v37 = 0x6DB6DB6DB6DB6DB7 * (v34 >> 3);
      v38 = 2 * v37;
      if (2 * v37 <= v35)
        v38 = v35;
      v39 = v37 >= 0x249249249249249 ? 0x492492492492492 : v38;
      if (v39 > 0x492492492492492)
LABEL_243:
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHNetworkNode>>(a10 + 56, v39);
      v41 = a10;
      v36 = v40;
      *(_QWORD *)(a10 + 40) = v40;
      *(_QWORD *)(a10 + 48) = v40;
      *(_QWORD *)(a10 + 56) = &v40[56 * v42];
      if (*((_QWORD *)&v32 + 1) != (_QWORD)v32)
      {
        v43 = v33 - 7;
        v44 = (const void *)v32;
LABEL_41:
        memmove(v40, v44, v43);
      }
    }
    *(_QWORD *)(v41 + 48) = &v36[v33];
    v47 = v157;
    if (!*(_QWORD *)(v41 + 80))
      goto LABEL_66;
    v49 = (uint64_t **)(v41 + 72);
    v48 = *(_QWORD *)(v41 + 72);
    v50 = *(_QWORD *)(v41 + 64);
    *(_QWORD *)(v41 + 64) = v41 + 72;
    *(_QWORD *)(v48 + 16) = 0;
    *(_QWORD *)(v41 + 72) = 0;
    *(_QWORD *)(v41 + 80) = 0;
    v51 = *(_QWORD *)(v50 + 8) ? *(uint64_t **)(v50 + 8) : (uint64_t *)v50;
    if (v51)
    {
      v52 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v51);
      if (v47 == v158)
      {
        v59 = v158;
      }
      else
      {
        v53 = v51;
        do
        {
          v51 = v52;
          v54 = v47[4];
          v53[4] = v54;
          v55 = *v49;
          v56 = (uint64_t **)(v41 + 72);
          v57 = (uint64_t **)(v41 + 72);
          if (*v49)
          {
            do
            {
              while (1)
              {
                v56 = (uint64_t **)v55;
                if (v54 >= v55[4])
                  break;
                v55 = (uint64_t *)*v55;
                v57 = v56;
                if (!*v56)
                  goto LABEL_55;
              }
              v55 = (uint64_t *)v55[1];
            }
            while (v55);
            v57 = v56 + 1;
          }
LABEL_55:
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(v41 + 64), (uint64_t)v56, v57, v53);
          if (v52)
            v52 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v52);
          else
            v52 = 0;
          v58 = (_QWORD *)v47[1];
          if (v58)
          {
            do
            {
              v59 = v58;
              v58 = (_QWORD *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              v59 = (_QWORD *)v47[2];
              v60 = *v59 == (_QWORD)v47;
              v47 = v59;
            }
            while (!v60);
          }
          if (!v51)
            break;
          v53 = v51;
          v47 = v59;
        }
        while (v59 != v158);
      }
      std::__tree<CRCHuint128>::destroy(v41 + 64, v51);
      if (v52)
      {
        for (i = (uint64_t *)v52[2]; i; i = (uint64_t *)i[2])
          v52 = i;
        std::__tree<CRCHuint128>::destroy(v41 + 64, v52);
      }
    }
    else
    {
LABEL_66:
      v59 = v47;
    }
    if (v59 != v158)
    {
      v62 = (uint64_t **)(v41 + 72);
      do
      {
        v63 = v59[4];
        v64 = (uint64_t *)operator new(0x28uLL);
        v64[4] = v63;
        v65 = *v62;
        v66 = (uint64_t **)(v41 + 72);
        v67 = (uint64_t **)(v41 + 72);
        if (*v62)
        {
          do
          {
            while (1)
            {
              v66 = (uint64_t **)v65;
              if (v65[4] <= v63)
                break;
              v65 = (uint64_t *)*v65;
              v67 = v66;
              if (!*v66)
                goto LABEL_80;
            }
            v65 = (uint64_t *)v65[1];
          }
          while (v65);
          v67 = v66 + 1;
        }
LABEL_80:
        std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(v41 + 64), (uint64_t)v66, v67, v64);
        v68 = (_QWORD *)v59[1];
        if (v68)
        {
          do
          {
            v69 = v68;
            v68 = (_QWORD *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            v69 = (_QWORD *)v59[2];
            v60 = *v69 == (_QWORD)v59;
            v59 = v69;
          }
          while (!v60);
        }
        v59 = v69;
      }
      while (v69 != v158);
    }
    std::vector<NetworkEdge>::__assign_with_size[abi:ne180100]<NetworkEdge*,NetworkEdge*>((uint64_t)v25, (NetworkEdge *)v159, *((NetworkEdge **)&v159 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v159 + 1) - v159) >> 4));
    v70 = *(char **)(v41 + 112);
    v72 = (const void *)*((_QWORD *)&v160 + 1);
    v71 = (const void *)v161;
    v73 = v161 - *((_QWORD *)&v160 + 1);
    v74 = (uint64_t)(v161 - *((_QWORD *)&v160 + 1)) >> 3;
    v75 = *(_QWORD *)(v41 + 128);
    if (v74 <= (v75 - (uint64_t)v70) >> 3)
    {
      v79 = *(_BYTE **)(v41 + 120);
      v80 = (v79 - v70) >> 3;
      if (v80 < v74)
      {
        v81 = *((_QWORD *)&v160 + 1) + 8 * v80;
        if (v79 != v70)
        {
          memmove(*(void **)(v41 + 112), *((const void **)&v160 + 1), v79 - v70);
          v70 = *(char **)(v41 + 120);
        }
        v73 = (size_t)v71 - v81;
        if (v71 == (const void *)v81)
          goto LABEL_105;
        v82 = v70;
        v83 = (const void *)v81;
        goto LABEL_104;
      }
    }
    else
    {
      if (v70)
      {
        *(_QWORD *)(v41 + 120) = v70;
        operator delete(v70);
        v75 = 0;
        *(_QWORD *)(v41 + 112) = 0;
        *(_QWORD *)(v41 + 120) = 0;
        *(_QWORD *)(v41 + 128) = 0;
      }
      if ((v73 & 0x8000000000000000) != 0)
        goto LABEL_244;
      v76 = v75 >> 2;
      if (v75 >> 2 <= v74)
        v76 = v74;
      v77 = (unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v76;
      if (v77 >> 61)
LABEL_244:
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41 + 128, v77);
      *(_QWORD *)(v41 + 112) = v70;
      *(_QWORD *)(v41 + 120) = v70;
      *(_QWORD *)(v41 + 128) = &v70[8 * v78];
    }
    if (v71 == v72)
    {
LABEL_105:
      *(_QWORD *)(v41 + 120) = &v70[v73];
      CRCHSymbolMap::operator=(v41 + 136, (uint64_t)v162);
      *(_BYTE *)(v41 + 192) = v163;
      v84 = (uint64_t **)(v41 + 200);
      v85 = (_QWORD *)v41;
      v86 = v164;
      if (v85[27])
      {
        v88 = v85 + 26;
        v87 = v85[26];
        v89 = v85[25];
        *(v88 - 1) = v88;
        *(_QWORD *)(v87 + 16) = 0;
        *v88 = 0;
        v88[1] = 0;
        if (*(_QWORD *)(v89 + 8))
          v90 = *(_QWORD *)(v89 + 8);
        else
          v90 = v89;
        v182 = v84;
        v183 = (_QWORD *)v90;
        v184 = v90;
        if (v90)
        {
          v91 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next(v90);
          v183 = v91;
          v92 = v165;
          if (v86 == v165)
            goto LABEL_178;
          v148 = v88;
          v149 = v84;
          while (1)
          {
            j = (uint64_t)v91;
            *(_QWORD *)(v90 + 32) = v86[4];
            if ((_QWORD *)v90 != v86)
              break;
LABEL_159:
            v116 = (uint64_t *)*v88;
            v117 = (uint64_t **)v88;
            v118 = (uint64_t **)v88;
            if (*v88)
            {
              do
              {
                while (1)
                {
                  v117 = (uint64_t **)v116;
                  if (*(_QWORD *)(v90 + 32) >= (unint64_t)v116[4])
                    break;
                  v116 = (uint64_t *)*v116;
                  v118 = v117;
                  if (!*v117)
                    goto LABEL_165;
                }
                v116 = (uint64_t *)v116[1];
              }
              while (v116);
              v118 = v117 + 1;
            }
LABEL_165:
            std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v84, (uint64_t)v117, v118, (uint64_t *)v90);
            if (j)
              v91 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next(j);
            else
              v91 = 0;
            v119 = (_QWORD *)v86[1];
            if (v119)
            {
              do
              {
                v92 = v119;
                v119 = (_QWORD *)*v119;
              }
              while (v119);
            }
            else
            {
              do
              {
                v92 = (_QWORD *)v86[2];
                v60 = *v92 == (_QWORD)v86;
                v86 = v92;
              }
              while (!v60);
            }
            if (j)
            {
              v90 = j;
              v86 = v92;
              if (v92 != v165)
                continue;
            }
            v183 = v91;
            v184 = j;
            goto LABEL_178;
          }
          v94 = (_QWORD *)v86[5];
          v95 = v86 + 6;
          if (!*(_QWORD *)(v90 + 56))
          {
            v107 = (_QWORD *)v86[5];
            goto LABEL_145;
          }
          v150 = v91;
          v97 = (uint64_t **)(v90 + 48);
          v96 = *(_QWORD *)(v90 + 48);
          v98 = *(_QWORD *)(v90 + 40);
          *(_QWORD *)(v90 + 40) = v90 + 48;
          *(_QWORD *)(v96 + 16) = 0;
          *(_QWORD *)(v90 + 48) = 0;
          *(_QWORD *)(v90 + 56) = 0;
          if (*(_QWORD *)(v98 + 8))
            v99 = *(uint64_t **)(v98 + 8);
          else
            v99 = (uint64_t *)v98;
          if (v99)
          {
            v100 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v99);
            if (v94 == v95)
            {
              v101 = v99;
              v107 = v94;
            }
            else
            {
              do
              {
                v101 = v100;
                v102 = v94[4];
                v99[4] = v102;
                v99[5] = v94[5];
                v103 = *v97;
                v104 = (uint64_t **)(v90 + 48);
                v105 = (uint64_t **)(v90 + 48);
                if (*v97)
                {
                  do
                  {
                    while (1)
                    {
                      v104 = (uint64_t **)v103;
                      if (v102 >= v103[4])
                        break;
                      v103 = (uint64_t *)*v103;
                      v105 = v104;
                      if (!*v104)
                        goto LABEL_125;
                    }
                    v103 = (uint64_t *)v103[1];
                  }
                  while (v103);
                  v105 = v104 + 1;
                }
LABEL_125:
                std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(v90 + 40), (uint64_t)v104, v105, v99);
                if (v100)
                  v100 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v100);
                else
                  v100 = 0;
                v106 = (_QWORD *)v94[1];
                if (v106)
                {
                  do
                  {
                    v107 = v106;
                    v106 = (_QWORD *)*v106;
                  }
                  while (v106);
                }
                else
                {
                  do
                  {
                    v107 = (_QWORD *)v94[2];
                    v60 = *v107 == (_QWORD)v94;
                    v94 = v107;
                  }
                  while (!v60);
                }
                if (!v101)
                  break;
                v99 = v101;
                v94 = v107;
              }
              while (v107 != v95);
            }
            std::__tree<CRCHuint128>::destroy(v90 + 40, v101);
            if (v100)
            {
              v108 = (uint64_t *)v100[2];
              v84 = v149;
              for (j = (uint64_t)v150; v108; v108 = (uint64_t *)v108[2])
                v100 = v108;
              std::__tree<CRCHuint128>::destroy(v90 + 40, v100);
              v88 = v148;
LABEL_145:
              if (v107 != v95)
              {
                v109 = (uint64_t **)(v90 + 48);
                do
                {
                  v110 = operator new(0x30uLL);
                  v110[2] = *((_OWORD *)v107 + 2);
                  v111 = *v109;
                  v112 = (uint64_t **)(v90 + 48);
                  v113 = (uint64_t **)(v90 + 48);
                  if (*v109)
                  {
                    do
                    {
                      while (1)
                      {
                        v112 = (uint64_t **)v111;
                        if (*((_QWORD *)v110 + 4) >= (unint64_t)v111[4])
                          break;
                        v111 = (uint64_t *)*v111;
                        v113 = v112;
                        if (!*v112)
                          goto LABEL_153;
                      }
                      v111 = (uint64_t *)v111[1];
                    }
                    while (v111);
                    v113 = v112 + 1;
                  }
LABEL_153:
                  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)(v90 + 40), (uint64_t)v112, v113, (uint64_t *)v110);
                  v114 = (_QWORD *)v107[1];
                  if (v114)
                  {
                    do
                    {
                      v115 = v114;
                      v114 = (_QWORD *)*v114;
                    }
                    while (v114);
                  }
                  else
                  {
                    do
                    {
                      v115 = (_QWORD *)v107[2];
                      v60 = *v115 == (_QWORD)v107;
                      v107 = v115;
                    }
                    while (!v60);
                  }
                  v107 = v115;
                }
                while (v115 != v95);
              }
              goto LABEL_159;
            }
            v88 = v148;
            v84 = v149;
          }
          else
          {
            v107 = v94;
          }
          j = (uint64_t)v150;
          goto LABEL_145;
        }
        v92 = v86;
LABEL_178:
        std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v182);
        v86 = v92;
      }
      if (v86 != v165)
      {
        v120 = (uint64_t **)(a10 + 208);
        do
        {
          v121 = (uint64_t *)operator new(0x40uLL);
          v121[4] = v86[4];
          std::map<unsigned long,unsigned long>::map[abi:ne180100]((uint64_t)(v121 + 5), v86 + 5);
          v122 = *v120;
          v123 = (uint64_t **)(a10 + 208);
          v124 = (uint64_t **)(a10 + 208);
          if (*v120)
          {
            do
            {
              while (1)
              {
                v123 = (uint64_t **)v122;
                if (v121[4] >= (unint64_t)v122[4])
                  break;
                v122 = (uint64_t *)*v122;
                v124 = v123;
                if (!*v123)
                  goto LABEL_187;
              }
              v122 = (uint64_t *)v122[1];
            }
            while (v122);
            v124 = v123 + 1;
          }
LABEL_187:
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v84, (uint64_t)v123, v124, v121);
          v125 = (_QWORD *)v86[1];
          if (v125)
          {
            do
            {
              v126 = v125;
              v125 = (_QWORD *)*v125;
            }
            while (v125);
          }
          else
          {
            do
            {
              v126 = (_QWORD *)v86[2];
              v60 = *v126 == (_QWORD)v86;
              v86 = v126;
            }
            while (!v60);
          }
          v86 = v126;
        }
        while (v126 != v165);
      }
      v19 = a10;
      v127 = (uint64_t **)(a10 + 224);
      v128 = v166;
      if (!*(_QWORD *)(a10 + 240))
        goto LABEL_219;
      v130 = (uint64_t **)(a10 + 232);
      v129 = *(_QWORD *)(a10 + 232);
      v131 = *(_QWORD *)(a10 + 224);
      *(_QWORD *)(a10 + 224) = a10 + 232;
      *(_QWORD *)(v129 + 16) = 0;
      *(_QWORD *)(a10 + 232) = 0;
      *(_QWORD *)(a10 + 240) = 0;
      v132 = *(_QWORD *)(v131 + 8) ? *(_QWORD **)(v131 + 8) : (_QWORD *)v131;
      if (v132)
      {
        v133 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v132);
        if (v128 == v167)
        {
          v139 = v167;
        }
        else
        {
          v134 = v132;
          do
          {
            v132 = v133;
            if (v128 != v134)
            {
              *((_DWORD *)v134 + 7) = *((_DWORD *)v128 + 7);
              *((_DWORD *)v134 + 8) = *((_DWORD *)v128 + 8);
              *((_DWORD *)v134 + 9) = *((_DWORD *)v128 + 9);
              *((_DWORD *)v134 + 10) = *((_DWORD *)v128 + 10);
            }
            v135 = *v130;
            v136 = (uint64_t **)(a10 + 232);
            v137 = (uint64_t **)(a10 + 232);
            if (*v130)
            {
              do
              {
                while (1)
                {
                  v136 = (uint64_t **)v135;
                  if (!CRCHuint128::operator<((_DWORD *)v134 + 7, (_DWORD *)v135 + 7))
                    break;
                  v135 = *v136;
                  v137 = v136;
                  if (!*v136)
                    goto LABEL_208;
                }
                v135 = v136[1];
              }
              while (v135);
              v137 = v136 + 1;
            }
LABEL_208:
            std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v127, (uint64_t)v136, v137, v134);
            if (v132)
              v133 = std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::_DetachedTreeCache::__detach_next((uint64_t)v132);
            else
              v133 = 0;
            v138 = (_QWORD *)v128[1];
            if (v138)
            {
              do
              {
                v139 = v138;
                v138 = (_QWORD *)*v138;
              }
              while (v138);
            }
            else
            {
              do
              {
                v139 = (_QWORD *)v128[2];
                v60 = *v139 == (_QWORD)v128;
                v128 = v139;
              }
              while (!v60);
            }
            if (!v132)
              break;
            v134 = v132;
            v128 = v139;
          }
          while (v139 != v167);
        }
        std::__tree<CRCHuint128>::destroy((uint64_t)v127, v132);
        if (v133)
        {
          for (k = (_QWORD *)v133[2]; k; k = (_QWORD *)k[2])
            v133 = k;
          std::__tree<CRCHuint128>::destroy((uint64_t)v127, v133);
        }
      }
      else
      {
LABEL_219:
        v139 = v128;
      }
      if (v139 != v167)
      {
        v141 = (uint64_t **)(a10 + 232);
        do
        {
          v142 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v142 + 28) = *(_OWORD *)((char *)v139 + 28);
          v143 = *v141;
          v144 = (uint64_t **)(a10 + 232);
          v145 = (uint64_t **)(a10 + 232);
          if (*v141)
          {
            do
            {
              while (1)
              {
                v144 = (uint64_t **)v143;
                if (!CRCHuint128::operator<((_DWORD *)v142 + 7, (_DWORD *)v143 + 7))
                  break;
                v143 = *v144;
                v145 = v144;
                if (!*v144)
                  goto LABEL_233;
              }
              v143 = v144[1];
            }
            while (v143);
            v145 = v144 + 1;
          }
LABEL_233:
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v127, (uint64_t)v144, v145, (uint64_t *)v142);
          v146 = (_QWORD *)v139[1];
          if (v146)
          {
            do
            {
              v147 = v146;
              v146 = (_QWORD *)*v146;
            }
            while (v146);
          }
          else
          {
            do
            {
              v147 = (_QWORD *)v139[2];
              v60 = *v147 == (_QWORD)v139;
              v139 = v147;
            }
            while (!v60);
          }
          v139 = v147;
        }
        while (v147 != v167);
      }
      goto LABEL_239;
    }
    v82 = v70;
    v83 = v72;
LABEL_104:
    memmove(v82, v83, v73);
    goto LABEL_105;
  }
LABEL_240:
  CRCHNetwork::buildWordIDMap(v19, v151, a11);
  if (__p[0])
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy(v175[0]);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v176);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)v179);
}

void sub_1D506ED10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t a66;
  char a68;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  std::__tree<CRCHuint128>::destroy(v70, (_QWORD *)a52);
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(v69, (_QWORD *)a49);
  CRCHSymbolMap::~CRCHSymbolMap(v68);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v71 - 112) = &a34;
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 112));
  std::__tree<CRCHuint128>::destroy((uint64_t)&a31, (_QWORD *)a32);
  if (a28)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a62)
    operator delete(a62);
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::destroy((char *)a66);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)&a68);
  CRCHNetwork::~CRCHNetwork((CRCHNetwork *)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void CRCHNetwork::buildWordIDMap(uint64_t a1, uint64_t a2, std::vector<int> *this)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::string __str;
  void *__p;
  void *v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;

  std::vector<int>::resize(this, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 4));
  v6 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) != v6)
  {
    v7 = 0;
    v8 = 24;
    do
    {
      CRCHNetwork::getSymbol(&__str, a1, *(_QWORD *)(v6 + v8));
      w2i32(&__str, (char **)&v14);
      __p = 0;
      v12 = 0;
      v13 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v14, (uint64_t)v15, (v15 - (_BYTE *)v14) >> 2);
      v9 = isWordValid(a2, (uint64_t *)&__p);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      this->__begin_[v7] = v9;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v7;
      v6 = *(_QWORD *)(a1 + 88);
      v8 += 80;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 96) - v6) >> 4));
  }
}

void sub_1D506EF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

BOOL CRCHNetwork::pathsCoincide(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  v3 = (_QWORD *)a2[8];
  v4 = a2[9] - (_QWORD)v3;
  v5 = (_QWORD *)a3[8];
  if ((uint64_t)(a3[9] - (_QWORD)v5) >> 3 >= (unint64_t)(v4 >> 3))
    v6 = v4 >> 3;
  else
    v6 = (uint64_t)(a3[9] - (_QWORD)v5) >> 3;
  if (!v6)
    return 1;
  if (*v3 != *v5)
    return 0;
  v7 = (_QWORD *)a2[11];
  v8 = (_QWORD *)a3[11];
  if (*v7 != *v8)
    return 0;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v6 == v9)
      break;
    if (v3[v9] != v5[v9])
      break;
    ++v9;
  }
  while (v7[v10] == v8[v10]);
  return v10 >= v6;
}

void CRCHNetwork::minPath(CRCHLatticePath **a1@<X1>, CRCHLatticePath *a2@<X8>)
{
  CRCHLatticePath *v4;
  const CRCHLatticePath *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL (*v8)(uint64_t, uint64_t);

  v4 = *a1;
  v5 = a1[1];
  v6 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 6));
  v8 = MinCompareEdgePaths;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*,false>(v4, v5, (uint64_t (**)(CRCHLatticePath *, CRCHLatticePath *))&v8, v7, 1);
  CRCHLatticePath::CRCHLatticePath(a2, *a1);
}

BOOL MinCompareEdgePaths(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 112) < *(double *)(a2 + 112);
}

void CRCHNetwork::bestPath(CRCHNetwork *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  double v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  unint64_t v34;
  double *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  char **v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  double v49;
  int v50;
  unint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  unint64_t v56;
  char **v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char **v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v84;
  uint64_t v85;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;

  v7 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
  if (v7)
  {
    if (v8 >> 59)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v9 = operator new(0xB6DB6DB6DB6DB6E0 * (v7 >> 3));
    v10 = v9;
    do
    {
      *v10 = 0;
      v10[1] = 0x41CFFFFFFFC00000;
      v10[2] = -1;
      v10[3] = -1;
      v10 += 4;
    }
    while (v10 != &v9[4 * v8]);
  }
  else
  {
    v9 = 0;
  }
  v85 = a4;
  v11 = v8 + 2;
  LOWORD(v88) = 257;
  v89 = v8 + 2;
  v90 = 0;
  v12 = v8 + 4;
  v13 = (_QWORD *)operator new[]();
  *v13 = 16;
  v13[1] = v12;
  v14 = v13 + 2;
  if (v12)
    bzero(v13 + 2, 16 * v11 + 32);
  v91 = (uint64_t)v14;
  v92 = 0;
  v16 = *((_QWORD *)this + 5);
  v15 = *((_QWORD *)this + 6);
  v17 = a3;
  if (v15 == v16)
    goto LABEL_79;
  v18 = 0;
  do
  {
    v19 = (double *)&v9[4 * v18];
    *(_QWORD *)v19 = v18;
    v20 = 8.98846567e307;
    if (v18 == a2)
      v20 = 0.0;
    v19[1] = v20;
    v19[2] = NAN;
    v21 = v90;
    if (BYTE1(v88))
      v22 = v90 - 1 > 0xFFFFFFFFFFFFFFFDLL;
    else
      v22 = 1;
    if (v22)
      goto LABEL_23;
    v23 = 0;
    v24 = (double *)(v91 + 24);
    while (*(v24 - 1) != v20 || *(double **)v24 != v19)
    {
      --v23;
      v24 += 2;
      if (-(uint64_t)v90 == v23)
        goto LABEL_23;
    }
    if (v23 == 2)
    {
LABEL_23:
      if (v90 != v89)
      {
        v25 = v91;
        v26 = ++v90;
        v27 = v91 + 16 * (v21 + 1);
        v28 = v88;
LABEL_28:
        *(double *)v27 = v20;
        *(_QWORD *)(v27 + 8) = v19;
        CRCHFixedHeap<double,NodePairPtr>::upheap(v28, v25, v26);
        CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(&v88);
        v16 = *((_QWORD *)this + 5);
        v15 = *((_QWORD *)this + 6);
        goto LABEL_29;
      }
      v25 = v91;
      v26 = v92;
      v27 = v91 + 16 * v92;
      if ((_BYTE)v88)
      {
        if (*(double *)v27 <= v20)
          goto LABEL_29;
        v28 = 1;
        goto LABEL_28;
      }
      if (*(double *)v27 < v20)
      {
        v28 = 0;
        goto LABEL_28;
      }
    }
LABEL_29:
    ++v18;
  }
  while (v18 < 0x6DB6DB6DB6DB6DB7 * ((v15 - v16) >> 3));
  v29 = v90;
  while (v90)
  {
    v30 = v91;
    v31 = *(double **)(v91 + 24);
    if (!v31)
      break;
    v32 = *v31;
    if (*(_QWORD *)v31 == v17)
      break;
    v33 = *(double *)(v91 + 16);
    v34 = v29 - 1;
    v90 = v29 - 1;
    if (v29 == 1)
    {
      v35 = v31;
LABEL_39:
      v37 = 1;
      goto LABEL_40;
    }
    v36 = v91 + 16 * v29;
    v33 = *(double *)v36;
    *(_QWORD *)(v91 + 16) = *(_QWORD *)v36;
    v35 = *(double **)(v36 + 8);
    *(_QWORD *)(v30 + 24) = v35;
    if (v29 < 3)
      goto LABEL_39;
    v50 = v88;
    v37 = 1;
    do
    {
      v51 = 2 * v37;
      if (2 * v37 >= v34)
      {
        if (v50)
          goto LABEL_70;
      }
      else
      {
        v52 = *(double *)(v30 + 16 * (v51 | 1));
        v53 = *(double *)(v30 + 32 * v37);
        if (v50)
        {
          if (v52 < v53)
            v51 |= 1uLL;
LABEL_70:
          v54 = *(double *)(v30 + 16 * v51);
          if (v54 >= v33)
            goto LABEL_40;
          goto LABEL_75;
        }
        if (v52 > v53)
          v51 |= 1uLL;
      }
      v54 = *(double *)(v30 + 16 * v51);
      if (v54 <= v33)
        goto LABEL_40;
LABEL_75:
      if (v37 != v51)
      {
        v55 = v30 + 16 * v37;
        *(double *)v55 = v54;
        *(_QWORD *)(v55 + 8) = *(_QWORD *)(v30 + 16 * v51 + 8);
      }
      v37 = v51;
    }
    while (v51 <= v34 >> 1);
    v37 = v51;
LABEL_40:
    v38 = v30 + 16 * v37;
    *(double *)v38 = v33;
    *(_QWORD *)(v38 + 8) = v35;
    if (v92 == v29)
      CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(&v88);
    if (*(_QWORD *)(v16 + 56 * *(_QWORD *)&v32))
    {
      v39 = 0;
      while (2)
      {
        v40 = *((_QWORD *)this + 11) + 80 * (*(_QWORD *)(v16 + 56 * *(_QWORD *)&v32 + 16) + v39);
        if (v31[1] + *(double *)(v40 + 32) <= 8.98846567e307)
          v41 = v31[1] + *(double *)(v40 + 32);
        else
          v41 = 8.98846567e307;
        v42 = (double *)&v9[4 * *(_QWORD *)(v40 + 8)];
        if (v41 > v42[1])
          goto LABEL_58;
        v42[1] = v41;
        v42[2] = v32;
        *((_QWORD *)v42 + 3) = v39;
        v43 = v91;
        if (v90 - 1 > 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_52:
          v46 = -1;
        }
        else
        {
          v44 = 0;
          v45 = (char **)(v91 + 24);
          while (*v45 != (char *)v42)
          {
            ++v44;
            v45 += 2;
            if (v90 == v44)
              goto LABEL_52;
          }
          v46 = v44 + 1;
        }
        v47 = v91 + 16 * v46;
        *(double *)v47 = v41;
        *(_QWORD *)(v47 + 8) = v42;
        v48 = v88;
        CRCHFixedHeap<double,NodePairPtr>::upheap(v88, v43, v46);
        v49 = *(double *)(v43 + 16 * v92);
        if (v48)
        {
          if (v49 < v41)
            goto LABEL_56;
        }
        else if (v49 > v41)
        {
LABEL_56:
          CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(&v88);
        }
        v32 = *v31;
        v16 = *((_QWORD *)this + 5);
LABEL_58:
        if ((unint64_t)++v39 >= *(_QWORD *)(v16 + 56 * *(_QWORD *)&v32))
          break;
        continue;
      }
    }
    v29 = v90;
    v17 = a3;
  }
LABEL_79:
  CRCHLatticePath::CRCHLatticePath(v85, (uint64_t)this, 0, 0, 0, 0);
  v87 = *(_OWORD *)&v9[4 * v17 + 2];
  v56 = *(_QWORD *)(v85 + 80);
  v57 = (char **)(v85 + 64);
  v58 = *(char **)(v85 + 72);
  if ((unint64_t)v58 < v56)
  {
    *(_QWORD *)v58 = v17;
    v59 = v58 + 8;
    goto LABEL_95;
  }
  v60 = *v57;
  v61 = (v58 - *v57) >> 3;
  v62 = v61 + 1;
  if ((unint64_t)(v61 + 1) >> 61)
    goto LABEL_126;
  v63 = v56 - (_QWORD)v60;
  if (v63 >> 2 > v62)
    v62 = v63 >> 2;
  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
    v64 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v64 = v62;
  if (v64)
  {
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85 + 80, v64);
    v60 = *(char **)(v85 + 64);
    v58 = *(char **)(v85 + 72);
  }
  else
  {
    v65 = 0;
  }
  v66 = &v65[8 * v61];
  v67 = &v65[8 * v64];
  *(_QWORD *)v66 = v17;
  v59 = v66 + 8;
  while (v58 != v60)
  {
    v68 = *((_QWORD *)v58 - 1);
    v58 -= 8;
    *((_QWORD *)v66 - 1) = v68;
    v66 -= 8;
  }
  *(_QWORD *)(v85 + 64) = v66;
  *(_QWORD *)(v85 + 72) = v59;
  *(_QWORD *)(v85 + 80) = v67;
  if (v60)
    operator delete(v60);
LABEL_95:
  v69 = *(_QWORD *)(v85 + 104);
  *(_QWORD *)(v85 + 72) = v59;
  v70 = (char **)(v85 + 88);
  v71 = &v9[4 * v17 + 3];
  v72 = *(char **)(v85 + 96);
  if ((unint64_t)v72 < v69)
  {
    *(_QWORD *)v72 = *v71;
    v73 = v72 + 8;
    goto LABEL_111;
  }
  v74 = *v70;
  v75 = (v72 - *v70) >> 3;
  v76 = v75 + 1;
  if ((unint64_t)(v75 + 1) >> 61)
LABEL_126:
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v77 = v69 - (_QWORD)v74;
  if (v77 >> 2 > v76)
    v76 = v77 >> 2;
  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
    v78 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
  {
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85 + 104, v78);
    v74 = *(char **)(v85 + 88);
    v72 = *(char **)(v85 + 96);
  }
  else
  {
    v79 = 0;
  }
  v80 = &v79[8 * v75];
  v81 = &v79[8 * v78];
  *(_QWORD *)v80 = *v71;
  v73 = v80 + 8;
  while (v72 != v74)
  {
    v82 = *((_QWORD *)v72 - 1);
    v72 -= 8;
    *((_QWORD *)v80 - 1) = v82;
    v80 -= 8;
  }
  *(_QWORD *)(v85 + 88) = v80;
  *(_QWORD *)(v85 + 96) = v73;
  *(_QWORD *)(v85 + 104) = v81;
  if (v74)
    operator delete(v74);
LABEL_111:
  *(_QWORD *)(v85 + 96) = v73;
  while ((_QWORD)v87 != -1 && (int)v87 != a2)
  {
    std::vector<unsigned long>::insert((char **)(v85 + 64), *v57, (char *)&v87);
    std::vector<unsigned long>::insert((char **)(v85 + 88), *v70, (char *)&v9[4 * v87 + 3]);
    v87 = *(_OWORD *)&v9[4 * v87 + 2];
  }
  v84 = *v57;
  if ((_QWORD)v87 == -1)
  {
    *(_QWORD *)(v85 + 72) = v84;
    *(_QWORD *)(v85 + 96) = *(_QWORD *)(v85 + 88);
  }
  else
  {
    std::vector<unsigned long>::insert((char **)(v85 + 64), v84, (char *)&v87);
    std::vector<unsigned long>::insert((char **)(v85 + 88), *v70, (char *)&v9[4 * v87 + 3]);
  }
  if (v91)
    MEMORY[0x1D826E270](v91 - 16, 0x1020C805730B0C9);
  if (v9)
    operator delete(v9);
}

void sub_1D506F800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CRCHLatticePath *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  CRCHLatticePath::~CRCHLatticePath(a9);
  if (a19)
    MEMORY[0x1D826E270](a19 - 16, 0x1020C805730B0C9);
  if (v19)
    operator delete(v19);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::insert(char **a1, char *a2, char *a3)
{
  char *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  size_t v35;
  char *v36;
  char *v37;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  v10 = (uint64_t)(a1 + 2);
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    v15 = ((v5 - v6) >> 3) + 1;
    if (v15 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v17 = v7 >> 3;
    v18 = v9 - (_QWORD)v6;
    if (v18 >> 2 > v15)
      v15 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v15;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v19);
    else
      v20 = 0;
    v21 = &v20[8 * v17];
    v22 = &v20[8 * v19];
    if (v17 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v24 = 1;
        else
          v24 = v7 >> 2;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10, v24);
        v21 = &v25[8 * (v24 >> 2)];
        v22 = &v25[8 * v26];
        if (v20)
        {
          v27 = &v25[8 * v26];
          operator delete(v20);
          v22 = v27;
        }
      }
      else
      {
        v23 = v17 + 2;
        if (v17 >= -1)
          v23 = v17 + 1;
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(_QWORD *)v21 = *(_QWORD *)v3;
    v28 = v21 + 8;
    v29 = *a1;
    if (*a1 != v8)
    {
      v30 = v8;
      do
      {
        v31 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *((_QWORD *)v21 - 1) = v31;
        v21 -= 8;
      }
      while (v30 != v29);
    }
    v32 = a1[1];
    v33 = v32 - v8;
    if (v32 != v8)
    {
      v34 = v8;
      v35 = v32 - v8;
      v36 = v22;
      memmove(v28, v34, v35);
      v22 = v36;
    }
    v37 = *a1;
    *a1 = v21;
    a1[1] = &v28[v33];
    a1[2] = v22;
    if (v37)
      operator delete(v37);
  }
  else if (v8 == v5)
  {
    *(_QWORD *)v8 = *(_QWORD *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    v11 = v8 + 8;
    v12 = v5 - 8;
    v13 = a1[1];
    while (v12 < v5)
    {
      v14 = *(_QWORD *)v12;
      v12 += 8;
      *(_QWORD *)v13 = v14;
      v13 += 8;
    }
    a1[1] = v13;
    if (v5 != v11)
      memmove(&v5[-8 * ((v5 - v11) >> 3)], v8, v5 - v11);
    if (v8 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v8 = *(_QWORD *)v3;
  }
}

void sub_1D506FA80(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::getTotalNumberOfStrokes(CRCHNetwork *this, unint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  _QWORD *v32;
  void *__p;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36[2];
  unint64_t v37;
  unint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v37 = a3;
  v38 = a2;
  v36[0] = 0;
  v36[1] = 0;
  v34 = 0;
  v35 = (uint64_t *)v36;
  v32 = &v32;
  __p = &v32;
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v35, a3, (uint64_t *)&v37)[5] = 0;
  v6 = operator new(0x18uLL);
  v7 = v32;
  v6[1] = &v32;
  v6[2] = a3;
  *v6 = v7;
  v7[1] = v6;
  v8 = __CFADD__(v34, 1);
  v9 = v34 + 1;
  v32 = v6;
  ++v34;
  if (v8)
  {
LABEL_17:
    v26 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v35, a2, (uint64_t *)&v38)[5];
    goto LABEL_21;
  }
  while (1)
  {
    v10 = (_QWORD **)__p;
    v11 = *((_QWORD *)__p + 1);
    v31 = *((_QWORD *)__p + 2);
    v12 = v31;
    v13 = *(_QWORD *)__p;
    *(_QWORD *)(v13 + 8) = v11;
    *v10[1] = v13;
    v34 = v9 - 1;
    operator delete(v10);
    if (v12 && v12 != a2)
    {
      v15 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v15 + 56 * v12 + 8))
        break;
    }
LABEL_16:
    v9 = v34;
    if (!v34)
      goto LABEL_17;
  }
  v16 = 0;
  while (2)
  {
    v17 = *(uint64_t **)(*((_QWORD *)this + 14) + 8 * (*(_QWORD *)(v15 + 56 * v12 + 24) + v16));
    v18 = v17[5];
    v19 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v35, v12, (uint64_t *)&v31)[5]+ v18;
    v20 = v36[0];
    v21 = *v17;
    if (!v36[0])
    {
LABEL_13:
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v35, v21, v17)[5] = v19;
      v23 = operator new(0x18uLL);
      v24 = *v17;
      v23[1] = &v32;
      v23[2] = v24;
      v25 = v32;
      *v23 = v32;
      v25[1] = v23;
      v32 = v23;
      ++v34;
      goto LABEL_15;
    }
    while (1)
    {
      v22 = v20[4];
      if (v21 >= v22)
        break;
LABEL_12:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_13;
    }
    if (v22 < v21)
    {
      ++v20;
      goto LABEL_12;
    }
    if (std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v35, v21, v17)[5] == v19)
    {
LABEL_15:
      ++v16;
      v15 = *((_QWORD *)this + 5);
      if (v16 >= *(_QWORD *)(v15 + 56 * v12 + 8))
        goto LABEL_16;
      continue;
    }
    break;
  }
  CHOSLogForCategory(1);
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    v28 = *v17;
    v29 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v35, *v17, v17)[5];
    *(_DWORD *)buf = 134218752;
    v40 = v28;
    v41 = 2048;
    v42 = a3;
    v43 = 2048;
    v44 = v29;
    v45 = 2048;
    v46 = v19;
    _os_log_impl(&dword_1D4FB8000, v27, OS_LOG_TYPE_ERROR, "found paths with incompatible number of strokes covered from %zu to %zu: previous value %lu, value for new path %zu \n", buf, 0x2Au);
  }

  v26 = 0;
LABEL_21:
  std::__list_imp<unsigned long>::clear(&v32);
  std::__tree<CRCHuint128>::destroy((uint64_t)&v35, v36[0]);
  return v26;
}

void sub_1D506FD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  void *v15;

  std::__list_imp<unsigned long>::clear(&a11);
  std::__tree<CRCHuint128>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void CRCHNetwork::kBestPaths(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X6>, const void *a8@<X7>, _QWORD *a9@<X8>, void *a10, void *a11, int a12, uint64_t a13, char a14, void *a15, void *a16, char a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unint64_t a21,char a22,uint64_t a23)
{
  double (**v28)(id, uint64_t **);
  uint64_t v29;
  _QWORD *v30;
  uint64_t i;
  _QWORD **v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t **v38;
  double v39;
  double v40;
  _QWORD *v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  _QWORD *v46;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  double v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  _QWORD **v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD **v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD **v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  double v98;
  double **v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  double *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  void *v122;
  uint64_t *v123;
  _QWORD *v124;
  _QWORD **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  double v157;
  CRCHLatticePath *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  _QWORD **v166;
  _QWORD *v167;
  _QWORD **v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t *v171;
  double v172;
  uint64_t v173;
  double v174;
  double v175;
  _QWORD *v176;
  CRCHLatticePath **v177;
  CRCHLatticePath *v178;
  _QWORD *v179;
  CRCHLatticePath **v180;
  unint64_t v181;
  double v182;
  uint64_t **v183;
  _QWORD *v184;
  _QWORD *v185;
  CRCHLatticePath *v186;
  uint64_t v187;
  uint64_t v188;
  const CRCHLatticePath *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t j;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  const void *v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  uint64_t v211;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  double (**v219)(id, uint64_t **);
  unint64_t v220;
  _QWORD *v221;
  id v222;
  id v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  void *v227;
  double v228[2];
  double v229[2];
  double v230[2];
  void *__p[2];
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t *v241;
  _QWORD *v242[2];
  uint64_t *v243;
  BOOL (*v244)(uint64_t, uint64_t);
  _BYTE v245[24];
  _QWORD *v246;

  v243 = a3;
  v223 = a10;
  v209 = a11;
  v28 = a15;
  v222 = a16;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  v216 = a9;
  v29 = 100;
  v220 = a4;
  if (!a14)
    v29 = a4;
  v208 = v29;
  v242[0] = 0;
  v242[1] = 0;
  v240 = 0;
  v241 = (uint64_t *)v242;
  v238 = &v238;
  v239 = &v238;
  v30 = operator new(0x18uLL);
  v30[1] = &v238;
  v30[2] = a3;
  *v30 = &v238;
  v238 = v30;
  v239 = v30;
  v240 = 1;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v241, (unint64_t)a3, &v243)[5] = 0;
  for (i = v240; v240; i = v240)
  {
    v32 = (_QWORD **)v239;
    v33 = v239[1];
    v226 = (void *)v239[2];
    v34 = (unint64_t)v226;
    v35 = (_QWORD *)*v239;
    v35[1] = v33;
    *v32[1] = v35;
    v240 = i - 1;
    operator delete(v32);
    v36 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(v36 + 56 * v34 + 8))
      continue;
    v37 = 0;
    do
    {
      v38 = *(uint64_t ***)(*(_QWORD *)(a1 + 112) + 8 * (*(_QWORD *)(v36 + 56 * v34 + 24) + v37));
      v39 = *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v241, v34, (uint64_t **)&v226)+ 5);
      v40 = v39 + v28[2](v28, v38);
      v41 = v242[0];
      v42 = *v38;
      if (!v242[0])
        goto LABEL_14;
      while (1)
      {
        v43 = v41[4];
        if ((unint64_t)v42 >= v43)
          break;
LABEL_10:
        v41 = (_QWORD *)*v41;
        if (!v41)
          goto LABEL_14;
      }
      if (v43 < (unint64_t)v42)
      {
        ++v41;
        goto LABEL_10;
      }
      if (v40 < *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v241, (unint64_t)v42, v38)+ 5))
      {
        v42 = *v38;
LABEL_14:
        *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v241, (unint64_t)v42, v38)+ 5) = v40;
        v44 = operator new(0x18uLL);
        v45 = *v38;
        v44[1] = &v238;
        v44[2] = v45;
        v46 = v238;
        *v44 = v238;
        v46[1] = v44;
        v238 = v44;
        ++v240;
      }
      ++v37;
      v36 = *(_QWORD *)(a1 + 40);
    }
    while (v37 < *(_QWORD *)(v36 + 56 * v34 + 8));
  }
  CRCHFixedHeap<double,LatticePathPtr>::CRCHFixedHeap((uint64_t)&v233, a4);
  v47 = a12;
  __p[0] = __p;
  __p[1] = __p;
  v232 = 0;
  v224 = a1;
  v219 = v28;
  if (a14)
  {
    v48 = (_QWORD *)operator new();
    CRCHLatticePath::CRCHLatticePath((uint64_t)v48, a1, a6, a8, v209, a12);
    v49 = v48[10];
    v50 = (char *)v48[9];
    if ((unint64_t)v50 >= v49)
    {
      v53 = (char *)v48[8];
      v54 = (v50 - v53) >> 3;
      if ((unint64_t)(v54 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v55 = v49 - (_QWORD)v53;
      v56 = (uint64_t)(v49 - (_QWORD)v53) >> 2;
      if (v56 <= v54 + 1)
        v56 = v54 + 1;
      if (v55 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      if (v57)
      {
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v48 + 10), v57);
        v53 = (char *)v48[8];
        v50 = (char *)v48[9];
      }
      else
      {
        v58 = 0;
      }
      v59 = &v58[8 * v54];
      v60 = &v58[8 * v57];
      *(_QWORD *)v59 = a2;
      v51 = v59 + 8;
      while (v50 != v53)
      {
        v61 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *((_QWORD *)v59 - 1) = v61;
        v59 -= 8;
      }
      v48[8] = v59;
      v48[9] = v51;
      v48[10] = v60;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *(_QWORD *)v50 = a2;
      v51 = v50 + 8;
    }
    v62 = v48[13];
    v48[9] = v51;
    v63 = (char *)v48[12];
    if ((unint64_t)v63 >= v62)
    {
      v65 = (char *)v48[11];
      v66 = (v63 - v65) >> 3;
      if ((unint64_t)(v66 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v67 = v62 - (_QWORD)v65;
      v68 = (uint64_t)(v62 - (_QWORD)v65) >> 2;
      if (v68 <= v66 + 1)
        v68 = v66 + 1;
      if (v67 >= 0x7FFFFFFFFFFFFFF8)
        v69 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v69 = v68;
      if (v69)
      {
        v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v48 + 13), v69);
        v65 = (char *)v48[11];
        v63 = (char *)v48[12];
      }
      else
      {
        v70 = 0;
      }
      v71 = &v70[8 * v66];
      v72 = &v70[8 * v69];
      *(_QWORD *)v71 = -1;
      v64 = v71 + 8;
      while (v63 != v65)
      {
        v73 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v71 - 1) = v73;
        v71 -= 8;
      }
      v48[11] = v71;
      v48[12] = v64;
      v48[13] = v72;
      if (v65)
        operator delete(v65);
    }
    else
    {
      *(_QWORD *)v63 = -1;
      v64 = v63 + 8;
    }
    v48[12] = v64;
    v74 = operator new(0x18uLL);
    v75 = __p[0];
    v74[1] = __p;
    v74[2] = v48;
    *v74 = v75;
    v75[1] = v74;
    v76 = v232 + 1;
    __p[0] = v74;
    ++v232;
    v77 = v235;
    v206 = a8;
    v207 = a2;
    if (v235 < a4 && v76)
    {
      v214 = 0;
      v78 = 0;
      v79 = 0;
      while (1)
      {
        v80 = v79;
        v81 = (_QWORD **)__p[0];
        v82 = *((_QWORD *)__p[0] + 2);
        v83 = *(uint64_t **)(*(_QWORD *)(v82 + 72) - 8);
        v84 = *(_QWORD *)__p[0];
        *(_QWORD *)(v84 + 8) = *((_QWORD *)__p[0] + 1);
        *v81[1] = v84;
        v232 = v76 - 1;
        operator delete(v81);
        if (v83 != v243)
          break;
        insertPathInHeap((uint64_t)&v233, v82, *(double *)(v82 + 112));
        if (*(_QWORD *)(a23 + 24))
        {
          v79 = v80;
          CRCHLatticePath::getEdgePathInNetwork(&v226, (_QWORD *)v82);
          std::function<void ()(std::vector<unsigned long> const&,double,double,double,double,double,double)>::operator()(*(_QWORD *)(a23 + 24), (uint64_t)&v226, *(double *)(v82 + 120), *(double *)(v82 + 136), *(double *)(v82 + 168), *(double *)(v82 + 200), *(double *)(v82 + 184), *(double *)(v82 + 112));
          if (v226)
          {
            v227 = v226;
            operator delete(v226);
          }
        }
        else
        {
          v79 = v80;
        }
LABEL_133:
        v77 = v235;
        if (v235 < v220)
        {
          v76 = v232;
          if (v232)
            continue;
        }
        goto LABEL_137;
      }
      v85 = *(_QWORD *)(a1 + 40);
      if (!*(_QWORD *)(v85 + 56 * (_QWORD)v83))
      {
LABEL_119:
        v79 = v80;
        v113 = 126 - 2 * __clz(v78 - v80);
        v244 = MinCompareEdgePathsPtr;
        if (v78 == v80)
          v114 = 0;
        else
          v114 = v113;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*,false>((uint64_t)v80, v78, (uint64_t (**)(uint64_t *, uint64_t *))&v244, v114, 1);
        a1 = v224;
        if (v78 != v80)
        {
          v115 = operator new(0x18uLL);
          v116 = v115;
          *v115 = 0;
          v115[1] = 0;
          v118 = *(v78 - 1);
          v117 = v78 - 1;
          v115[2] = v118;
          if (v117 == v80)
          {
            v119 = 1;
          }
          else
          {
            v119 = 1;
            v120 = v115;
            do
            {
              v115 = operator new(0x18uLL);
              *v115 = v120;
              v115[1] = 0;
              v121 = *--v117;
              v115[2] = v121;
              v120[1] = v115;
              ++v119;
              v120 = v115;
            }
            while (v117 != v80);
          }
          v122 = __p[0];
          *((_QWORD *)__p[0] + 1) = v116;
          *v116 = v122;
          v115[1] = __p;
          __p[0] = v115;
          v232 += v119;
          v79 = v80;
        }
        if (v82)
        {
          CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v82);
          MEMORY[0x1D826E294]();
        }
        v78 = v79;
        goto LABEL_133;
      }
      v86 = 0;
      while (1)
      {
        v87 = v242[0];
        if (!v242[0])
          goto LABEL_103;
        v88 = v242;
        v89 = (uint64_t *)(*(_QWORD *)(v224 + 88) + 80 * (*(_QWORD *)(v85 + 56 * (_QWORD)v83 + 16) + v86));
        v90 = *v89;
        v91 = v89[1];
        do
        {
          v92 = v87;
          v93 = v88;
          v94 = v87[4];
          v95 = v87 + 1;
          if (v94 >= v91)
          {
            v95 = v92;
            v88 = (_QWORD **)v92;
          }
          v87 = (_QWORD *)*v95;
        }
        while (v87);
        if (v88 == v242)
          goto LABEL_103;
        if (v94 < v91)
          v92 = v93;
        if (v91 < v92[4])
          goto LABEL_103;
        v96 = v243;
        v97 = operator new();
        CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v97, (const CRCHLatticePath *)v82);
        CRCHLatticePath::addEdge(v97, v90, v86, a13, v223, v219, v222, a18, 1.79769313e308, a19, a21, a17);
        if (*(double *)(v97 + 112) < 1.79769313e308)
        {
          if ((uint64_t *)v91 == v96)
          {
            CRCHLatticePath::addWordAtNode(v97, v91, a5, a7, v223, v222, a20, 0, 0, a22);
            if (a21)
            {
              v98 = *(double *)(v97 + 112);
              if (a21 > (uint64_t)(*(_QWORD *)(v97 + 256) - *(_QWORD *)(v97 + 248)) >> 3)
              {
                v98 = v98 + 2.0;
                *(double *)(v97 + 112) = v98;
              }
            }
            else
            {
              v98 = *(double *)(v97 + 112);
            }
            insertPathInHeap((uint64_t)&v233, v97, v98);
            if (*(_QWORD *)(a23 + 24))
            {
              CRCHLatticePath::getEdgePathInNetwork(&v226, (_QWORD *)v97);
              std::function<void ()(std::vector<unsigned long> const&,double,double,double,double,double,double)>::operator()(*(_QWORD *)(a23 + 24), (uint64_t)&v226, *(double *)(v97 + 120), *(double *)(v97 + 136), *(double *)(v97 + 168), *(double *)(v97 + 200), *(double *)(v97 + 184), *(double *)(v97 + 112));
              if (v226)
              {
                v227 = v226;
                operator delete(v226);
              }
            }
          }
          else
          {
            if ((unint64_t)v78 >= v214)
            {
              v100 = v78 - v80;
              v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61)
                std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v214 - (_QWORD)v80) >> 2 > v101)
                v101 = (uint64_t)(v214 - (_QWORD)v80) >> 2;
              if (v214 - (unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                v102 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
                v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v102);
              else
                v103 = 0;
              v104 = (uint64_t *)(v102 + 8 * v100);
              *v104 = v97;
              v99 = (double **)(v104 + 1);
              while (v78 != v80)
              {
                v105 = *--v78;
                *--v104 = v105;
              }
              v214 = v102 + 8 * v103;
              if (v80)
                operator delete(v80);
              v80 = v104;
            }
            else
            {
              *v78 = v97;
              v99 = (double **)(v78 + 1);
            }
            if (a17 && !*(_BYTE *)(*(_QWORD *)(v224 + 40) + 56 * v91 + 32))
            {
              v106 = (double *)operator new();
              CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v106, (const CRCHLatticePath *)v97);
              CRCHLatticePath::addWordAtNode((uint64_t)v106, v91, a5, a7, v223, v222, 1, 1, 1, a22);
              if (v106[14] >= 1.79769313e308)
              {
                CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v106);
                MEMORY[0x1D826E294]();
              }
              else
              {
                if ((unint64_t)v99 >= v214)
                {
                  v107 = ((char *)v99 - (char *)v80) >> 3;
                  v108 = v107 + 1;
                  if ((unint64_t)(v107 + 1) >> 61)
                    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v214 - (_QWORD)v80) >> 2 > v108)
                    v108 = (uint64_t)(v214 - (_QWORD)v80) >> 2;
                  if (v214 - (unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                    v109 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v109 = v108;
                  if (v109)
                    v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v109);
                  else
                    v110 = 0;
                  v111 = (uint64_t *)(v109 + 8 * v107);
                  v214 = v109 + 8 * v110;
                  *v111 = (uint64_t)v106;
                  v78 = v111 + 1;
                  if (v99 == (double **)v80)
                    goto LABEL_117;
                  do
                  {
                    v112 = (uint64_t)*--v99;
                    *--v111 = v112;
                  }
                  while (v99 != (double **)v80);
                  if (v80)
LABEL_117:
                    operator delete(v80);
                  v80 = v111;
                  goto LABEL_103;
                }
                *v99++ = v106;
              }
            }
            v78 = (uint64_t *)v99;
          }
        }
        else
        {
          CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v97);
          MEMORY[0x1D826E294]();
        }
LABEL_103:
        ++v86;
        v85 = *(_QWORD *)(v224 + 40);
        if (v86 >= *(_QWORD *)(v85 + 56 * (_QWORD)v83))
          goto LABEL_119;
      }
    }
    v79 = 0;
LABEL_137:
    v123 = v79;
    if (v237)
    {
      v52 = *(double *)(v236 + 16 * v237);
    }
    else if ((_BYTE)v233)
    {
      v52 = -2147483650.0;
    }
    else
    {
      v52 = 2147483650.0;
    }
    a8 = v206;
    a2 = v207;
    v47 = a12;
    if (v123)
    {
      operator delete(v123);
      v77 = v235;
    }
    if (v77 < v220)
      goto LABEL_263;
  }
  else
  {
    v52 = 1.79769313e308;
  }
  v124 = (_QWORD *)operator new();
  CRCHFixedHeap<double,LatticePathPtr>::CRCHFixedHeap((uint64_t)v124, v208);
  if (a14)
  {
    if (v232)
    {
      v211 = 2;
      do
      {
        insertPathInHeap((uint64_t)v124, *((_QWORD *)__p[0] + 2), *(double *)(*((_QWORD *)__p[0] + 2) + 112));
        v125 = (_QWORD **)__p[0];
        v126 = *(_QWORD *)__p[0];
        *(_QWORD *)(v126 + 8) = *((_QWORD *)__p[0] + 1);
        *v125[1] = v126;
        --v232;
        operator delete(v125);
      }
      while (v232);
      v215 = 0;
    }
    else
    {
      v215 = 0;
      v211 = 2;
    }
  }
  else
  {
    v127 = operator new();
    CRCHFixedHeap<double,LatticePathPtr>::CRCHFixedHeap(v127, v220);
    v128 = operator new();
    CRCHLatticePath::CRCHLatticePath(v128, a1, a6, a8, v209, v47);
    v129 = *(_QWORD *)(v128 + 80);
    v130 = *(char **)(v128 + 72);
    if ((unint64_t)v130 >= v129)
    {
      v132 = *(char **)(v128 + 64);
      v133 = (v130 - v132) >> 3;
      if ((unint64_t)(v133 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v134 = v129 - (_QWORD)v132;
      v135 = (uint64_t)(v129 - (_QWORD)v132) >> 2;
      if (v135 <= v133 + 1)
        v135 = v133 + 1;
      if (v134 >= 0x7FFFFFFFFFFFFFF8)
        v136 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v136 = v135;
      if (v136)
      {
        v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v128 + 80, v136);
        v132 = *(char **)(v128 + 64);
        v130 = *(char **)(v128 + 72);
      }
      else
      {
        v137 = 0;
      }
      v138 = &v137[8 * v133];
      v139 = &v137[8 * v136];
      *(_QWORD *)v138 = a2;
      v131 = v138 + 8;
      while (v130 != v132)
      {
        v140 = *((_QWORD *)v130 - 1);
        v130 -= 8;
        *((_QWORD *)v138 - 1) = v140;
        v138 -= 8;
      }
      *(_QWORD *)(v128 + 64) = v138;
      *(_QWORD *)(v128 + 72) = v131;
      *(_QWORD *)(v128 + 80) = v139;
      if (v132)
        operator delete(v132);
    }
    else
    {
      *(_QWORD *)v130 = a2;
      v131 = v130 + 8;
    }
    v141 = *(_QWORD *)(v128 + 104);
    *(_QWORD *)(v128 + 72) = v131;
    v142 = *(char **)(v128 + 96);
    if ((unint64_t)v142 >= v141)
    {
      v144 = *(char **)(v128 + 88);
      v145 = (v142 - v144) >> 3;
      if ((unint64_t)(v145 + 1) >> 61)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v146 = v141 - (_QWORD)v144;
      v147 = (uint64_t)(v141 - (_QWORD)v144) >> 2;
      if (v147 <= v145 + 1)
        v147 = v145 + 1;
      if (v146 >= 0x7FFFFFFFFFFFFFF8)
        v148 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v148 = v147;
      if (v148)
      {
        v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v128 + 104, v148);
        v144 = *(char **)(v128 + 88);
        v142 = *(char **)(v128 + 96);
      }
      else
      {
        v149 = 0;
      }
      v150 = &v149[8 * v145];
      v151 = &v149[8 * v148];
      *(_QWORD *)v150 = -1;
      v143 = v150 + 8;
      while (v142 != v144)
      {
        v152 = *((_QWORD *)v142 - 1);
        v142 -= 8;
        *((_QWORD *)v150 - 1) = v152;
        v150 -= 8;
      }
      *(_QWORD *)(v128 + 88) = v150;
      *(_QWORD *)(v128 + 96) = v143;
      *(_QWORD *)(v128 + 104) = v151;
      if (v144)
        operator delete(v144);
    }
    else
    {
      *(_QWORD *)v142 = -1;
      v143 = v142 + 8;
    }
    v215 = (_QWORD *)v127;
    v211 = (uint64_t)a3 - a2 + 1;
    *(_QWORD *)(v128 + 96) = v143;
    insertPathInHeap((uint64_t)v124, v128, *(double *)(v128 + 112));
  }
  v153 = 0;
  do
  {
    if (!v124[2])
      goto LABEL_255;
    v213 = v153;
    if (a14)
      v154 = v124;
    else
      v154 = v215;
    v221 = v124;
    do
    {
      v155 = *(_QWORD *)(v124[3] + 24);
      v156 = *(uint64_t **)(*(_QWORD *)(v155 + 72) - 8);
      CRCHFixedHeap<double,LatticePathPtr>::remove(v230, v124);
      v157 = *(double *)(v155 + 112);
      if (v156 == v243)
      {
        if (v157 >= v52)
        {
LABEL_238:
          v124 = v221;
        }
        else
        {
          v124 = v221;
          v158 = (CRCHLatticePath *)operator new();
          CRCHLatticePath::CRCHLatticePath(v158, (const CRCHLatticePath *)v155);
          insertPathInHeap((uint64_t)&v233, (unint64_t)v158, *(double *)(v155 + 112));
          if (*(_QWORD *)(a23 + 24))
          {
            CRCHLatticePath::getEdgePathInNetwork(&v226, (_QWORD *)v155);
            std::function<void ()(std::vector<unsigned long> const&,double,double,double,double,double,double)>::operator()(*(_QWORD *)(a23 + 24), (uint64_t)&v226, *(double *)(v155 + 120), *(double *)(v155 + 136), *(double *)(v155 + 168), *(double *)(v155 + 200), *(double *)(v155 + 184), *(double *)(v155 + 112));
            if (v226)
            {
              v227 = v226;
              operator delete(v226);
            }
          }
          if (v235 == v234)
          {
            if (v237)
            {
              v52 = *(double *)(v236 + 16 * v237);
            }
            else if ((_BYTE)v233)
            {
              v52 = -2147483650.0;
            }
            else
            {
              v52 = 2147483650.0;
            }
          }
        }
LABEL_239:
        CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v155);
        MEMORY[0x1D826E294]();
        continue;
      }
      if (v157 >= v52)
        goto LABEL_238;
      v159 = *(_QWORD *)(v224 + 40);
      if (!*(_QWORD *)(v159 + 56 * (_QWORD)v156))
        goto LABEL_238;
      v160 = 0;
      v161 = v224;
      do
      {
        v162 = (uint64_t *)(*(_QWORD *)(v161 + 88) + 80 * (*(_QWORD *)(v159 + 56 * (_QWORD)v156 + 16) + v160));
        v163 = *v162;
        v164 = v162[1];
        v244 = (BOOL (*)(uint64_t, uint64_t))v164;
        v165 = v242[0];
        if (v242[0])
        {
          v166 = v242;
          do
          {
            v167 = v165;
            v168 = v166;
            v169 = v165[4];
            v170 = v165 + 1;
            if (v169 >= v164)
            {
              v170 = v167;
              v166 = (_QWORD **)v167;
            }
            v165 = (_QWORD *)*v170;
          }
          while (v165);
          if (v166 != v242)
          {
            if (v169 < v164)
              v167 = v168;
            if (v164 >= v167[4])
            {
              v171 = v243;
              v172 = *((double *)std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v241, v164, (uint64_t **)&v244)+ 5);
              v173 = operator new();
              CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v173, (const CRCHLatticePath *)v155);
              v174 = v52 - v172;
              CRCHLatticePath::addEdge(v173, v163, v160, a13, v223, v219, v222, a18, v174, a19, a21, a17);
              if (*(double *)(v173 + 112) >= v174)
              {
                CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v173);
                MEMORY[0x1D826E294]();
              }
              else if ((uint64_t *)v164 == v171)
              {
                CRCHLatticePath::addWordAtNode(v173, v164, a5, a7, v223, v222, a20, 0, 0, a22);
                if (a21)
                {
                  v175 = *(double *)(v173 + 112);
                  if (a21 > (uint64_t)(*(_QWORD *)(v173 + 256) - *(_QWORD *)(v173 + 248)) >> 3)
                  {
                    v175 = v175 + 2.0;
                    *(double *)(v173 + 112) = v175;
                  }
                }
                else
                {
                  v175 = *(double *)(v173 + 112);
                }
                insertPathInHeap((uint64_t)&v233, v173, v175);
                if (*(_QWORD *)(a23 + 24))
                {
                  CRCHLatticePath::getEdgePathInNetwork(&v226, (_QWORD *)v173);
                  std::function<void ()(std::vector<unsigned long> const&,double,double,double,double,double,double)>::operator()(*(_QWORD *)(a23 + 24), (uint64_t)&v226, *(double *)(v173 + 120), *(double *)(v173 + 136), *(double *)(v173 + 168), *(double *)(v173 + 200), *(double *)(v173 + 184), *(double *)(v173 + 112));
                  if (v226)
                  {
                    v227 = v226;
                    operator delete(v226);
                  }
                }
                if (v235 == v234)
                {
                  if (v237)
                  {
                    v52 = *(double *)(v236 + 16 * v237);
                  }
                  else if ((_BYTE)v233)
                  {
                    v52 = -2147483650.0;
                  }
                  else
                  {
                    v52 = 2147483650.0;
                  }
                }
              }
              else
              {
                v176 = operator new(8uLL);
                *v176 = v173;
                v177 = (CRCHLatticePath **)(v176 + 1);
                if (a17 && !*(_BYTE *)(*(_QWORD *)(v224 + 40) + 56 * v164 + 32))
                {
                  v178 = (CRCHLatticePath *)operator new();
                  CRCHLatticePath::CRCHLatticePath(v178, (const CRCHLatticePath *)v173);
                  CRCHLatticePath::addWordAtNode((uint64_t)v178, v164, a5, a7, v223, v222, 1, 1, 1, a22);
                  v179 = operator new(0x10uLL);
                  *v179 = *v176;
                  v179[1] = v178;
                  v177 = (CRCHLatticePath **)(v179 + 2);
                  operator delete(v176);
                  v176 = v179;
                }
                v180 = (CRCHLatticePath **)v176;
                do
                {
                  v181 = (unint64_t)*v180;
                  v182 = *((double *)*v180 + 14);
                  if (v182 >= v174)
                  {
                    CRCHLatticePath::~CRCHLatticePath(*v180);
                    MEMORY[0x1D826E294]();
                  }
                  else
                  {
                    v183 = std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v241, (unint64_t)v244, (uint64_t **)&v244);
                    insertPathInHeap((uint64_t)v154, v181, v182 + *((double *)v183 + 5));
                  }
                  ++v180;
                }
                while (v180 != v177);
                operator delete(v176);
              }
            }
          }
        }
        ++v160;
        v161 = v224;
        v159 = *(_QWORD *)(v224 + 40);
      }
      while (v160 < *(_QWORD *)(v159 + 56 * (_QWORD)v156));
      v124 = v221;
      if (v155)
        goto LABEL_239;
    }
    while (v124[2]);
    v184 = v215;
    if (!a14)
      v184 = v124;
    v215 = v184;
    v153 = v213 + 1;
    v124 = v154;
  }
  while (v213 + 1 != v211);
  if (!v154[2])
  {
    v124 = v154;
LABEL_255:
    v185 = v215;
    goto LABEL_256;
  }
  v185 = v184;
  do
  {
    v186 = *(CRCHLatticePath **)(v154[3] + 24);
    CRCHFixedHeap<double,LatticePathPtr>::remove(v229, v154);
    if (v186)
    {
      CRCHLatticePath::~CRCHLatticePath(v186);
      MEMORY[0x1D826E294]();
    }
  }
  while (v154[2]);
  v124 = v154;
LABEL_256:
  v124[2] = 0;
  v124[4] = 0;
  v187 = v124[3];
  if (v187)
  {
    MEMORY[0x1D826E270](v187 - 16, 0x1020C805730B0C9);
    v124[3] = 0;
  }
  MEMORY[0x1D826E294](v124, 0x1020C40C3F473B3);
  if ((a14 & 1) == 0 && v185)
  {
    v188 = v185[3];
    if (v188)
    {
      MEMORY[0x1D826E270](v188 - 16, 0x1020C805730B0C9);
      v185[3] = 0;
    }
    MEMORY[0x1D826E294](v185, 0x1020C40C3F473B3);
  }
LABEL_263:
  while (v235)
  {
    v189 = *(const CRCHLatticePath **)(v236 + 24);
    CRCHFixedHeap<double,LatticePathPtr>::remove(v228, &v233);
    CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)&v226, v189);
    v191 = v216[1];
    v190 = v216[2];
    if (v191 >= v190)
    {
      v194 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v191 - *v216) >> 6);
      v195 = v194 + 1;
      if ((unint64_t)(v194 + 1) > 0x92492492492492)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v196 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v190 - *v216) >> 6);
      if (2 * v196 > v195)
        v195 = 2 * v196;
      if (v196 >= 0x49249249249249)
        v197 = 0x92492492492492;
      else
        v197 = v195;
      v246 = v216 + 2;
      if (v197)
        v198 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHLatticePath>>((uint64_t)(v216 + 2), v197);
      else
        v198 = 0;
      v244 = (BOOL (*)(uint64_t, uint64_t))v198;
      *(_QWORD *)v245 = &v198[56 * v194];
      *(_QWORD *)&v245[8] = *(_QWORD *)v245;
      *(_QWORD *)&v245[16] = &v198[56 * v197];
      CRCHLatticePath::CRCHLatticePath(*(CRCHLatticePath **)v245, (const CRCHLatticePath *)&v226);
      v199 = 0;
      v200 = *(_QWORD *)v245;
      *(_QWORD *)&v245[8] += 448;
      v201 = *v216;
      for (j = v216[1];
            j + v199 != v201;
            CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)(v199 + v200), (const CRCHLatticePath *)(v199 + j)))
      {
        v199 -= 448;
      }
      v193 = v216;
      v203 = v216[2];
      v225 = *(_QWORD *)&v245[8];
      v204 = *(_OWORD *)&v245[8];
      v205 = *(_OWORD *)v216;
      *v216 = v200 + v199;
      *(_OWORD *)v245 = v205;
      *(_OWORD *)(v216 + 1) = v204;
      *(_QWORD *)&v245[16] = v203;
      v244 = (BOOL (*)(uint64_t, uint64_t))v205;
      std::__split_buffer<CRCHLatticePath>::~__split_buffer((uint64_t)&v244);
      v192 = v225;
    }
    else
    {
      CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v216[1], (const CRCHLatticePath *)&v226);
      v192 = v191 + 448;
      v193 = v216;
      v216[1] = v191 + 448;
    }
    v193[1] = v192;
    CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)&v226);
    CRCHLatticePath::~CRCHLatticePath(v189);
    MEMORY[0x1D826E294]();
  }
  std::__list_imp<unsigned long>::clear(__p);
  if (v236)
    MEMORY[0x1D826E270](v236 - 16, 0x1020C805730B0C9);
  std::__list_imp<unsigned long>::clear(&v238);
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(v242[0]);

}

void sub_1D50712AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p)
{
  void *v38;
  uint64_t v39;

  if (v38)
    operator delete(v38);
  std::__list_imp<unsigned long>::clear(&STACK[0x2D8]);
  if (STACK[0x308])
    MEMORY[0x1D826E270](STACK[0x308] - 16, 0x1020C805730B0C9);
  std::__list_imp<unsigned long>::clear((_QWORD *)(v39 - 232));
  std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*(_QWORD **)(v39 - 200));
  __p = a21;
  std::vector<CRCHLatticePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D50713E8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1D5071408()
{
  __cxa_end_catch();
  JUMPOUT(0x1D5071410);
}

void sub_1D5071420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38)
    JUMPOUT(0x1D50714C8);
  JUMPOUT(0x1D50714CCLL);
}

void sub_1D5071444()
{
  uint64_t v0;

  MEMORY[0x1D826E294](v0, 0x10F0C4093C2D19BLL);
  JUMPOUT(0x1D50714CCLL);
}

void sub_1D5071498()
{
  JUMPOUT(0x1D50714A0);
}

void sub_1D50714B8()
{
  JUMPOUT(0x1D50714CCLL);
}

uint64_t insertPathInHeap(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v4;
  CRCHLatticePath *v5;
  uint64_t result;
  CRCHLatticePath *v7;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 8))
    return CRCHFixedHeap<double,LatticePathPtr>::insert((unsigned __int8 *)a1, a2, a3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(CRCHLatticePath **)(*(_QWORD *)(a1 + 24) + 16 * v4 + 8);
    result = CRCHFixedHeap<double,LatticePathPtr>::insert((unsigned __int8 *)a1, a2, a3);
    if ((result & 1) != 0)
    {
      if (v5)
      {
        v7 = v5;
LABEL_10:
        CRCHLatticePath::~CRCHLatticePath(v7);
        JUMPOUT(0x1D826E294);
      }
      return result;
    }
  }
  else
  {
    result = CRCHFixedHeap<double,LatticePathPtr>::insert((unsigned __int8 *)a1, a2, a3);
    if ((result & 1) != 0)
      return result;
  }
  if (a2)
  {
    v7 = (CRCHLatticePath *)a2;
    goto LABEL_10;
  }
  return result;
}

uint64_t std::function<void ()(std::vector<unsigned long> const&,double,double,double,double,double,double)>::operator()(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v13 = a4;
  v14 = a3;
  v11 = a6;
  v12 = a5;
  v9 = a8;
  v10 = a7;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, double *, double *, double *, double *))(*(_QWORD *)a1 + 48))(a1, a2, &v14, &v13, &v12, &v11, &v10, &v9);
}

_QWORD *CRCHLatticePath::getEdgePathInNetwork(_QWORD *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2[12] - a2[11];
  if ((unint64_t)v2 < 9)
  {
    *this = 0;
    this[1] = 0;
    this[2] = 0;
  }
  else
  {
    this = std::vector<unsigned long>::vector(this, (v2 >> 3) - 1);
    v4 = (uint64_t *)a2[8];
    v5 = ((uint64_t)(a2[9] - (_QWORD)v4) >> 3) - 1;
    if ((uint64_t)(a2[9] - (_QWORD)v4) >> 3 != 1)
    {
      v6 = *(_QWORD *)(a2[7] + 40);
      v7 = (_QWORD *)*this;
      v8 = (uint64_t *)(a2[11] + 8);
      do
      {
        v10 = *v4++;
        v9 = v10;
        v11 = *v8++;
        *v7++ = *(_QWORD *)(v6 + 56 * v9 + 16) + v11;
        --v5;
      }
      while (v5);
    }
  }
  return this;
}

void CRCHLatticePath::addEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, unsigned __int8 a8, double a9, unsigned __int8 a10, unint64_t a11, char a12)
{
  uint64_t *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  void **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _BYTE *v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  __int16 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _BOOL4 v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  _BOOL4 v101;
  double v102;
  const void *v103;
  uint64_t v104;
  double v105;
  const void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t *v121;
  id v122;
  double (**v123)(id, uint64_t);
  double (**v124)(id, _QWORD);
  std::string __p;
  void *v126;
  _BYTE *v127;

  v122 = a5;
  v123 = a6;
  v124 = a7;
  v19 = *(uint64_t **)(a1 + 56);
  v20 = *v19;
  v21 = log10(*(long double *)(*v19 + 96));
  v22 = log10(*(long double *)(v20 + 104));
  if (a12)
    CRCHLatticePath::updateWordSegmentationScoreAtNode((CRCHLatticePath *)a1, a2, 0);
  v23 = v124[2](v124, a1);
  *(double *)(a1 + 112) = v23;
  if (v23 > a9)
    goto LABEL_142;
  v24 = *(_QWORD *)(a1 + 80);
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 56 * a2 + 16) + a3;
  v27 = *(_QWORD *)(v25 + 88);
  v28 = v27 + 80 * v26;
  v29 = *(_QWORD *)(v28 + 8);
  v119 = (_QWORD *)(v28 + 8);
  v30 = *(char **)(a1 + 72);
  if ((unint64_t)v30 >= v24)
  {
    v32 = *(char **)(a1 + 64);
    v33 = (v30 - v32) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      goto LABEL_144;
    v34 = v24 - (_QWORD)v32;
    v35 = (uint64_t)(v24 - (_QWORD)v32) >> 2;
    if (v35 <= v33 + 1)
      v35 = v33 + 1;
    if (v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
    {
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 80, v36);
      v32 = *(char **)(a1 + 64);
      v30 = *(char **)(a1 + 72);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v37[8 * v33];
    v39 = &v37[8 * v36];
    *(_QWORD *)v38 = v29;
    v31 = v38 + 8;
    while (v30 != v32)
    {
      v40 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *((_QWORD *)v38 - 1) = v40;
      v38 -= 8;
    }
    *(_QWORD *)(a1 + 64) = v38;
    *(_QWORD *)(a1 + 72) = v31;
    *(_QWORD *)(a1 + 80) = v39;
    if (v32)
      operator delete(v32);
  }
  else
  {
    *(_QWORD *)v30 = v29;
    v31 = v30 + 8;
  }
  v41 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 72) = v31;
  v42 = *(char **)(a1 + 96);
  if ((unint64_t)v42 < v41)
  {
    *(_QWORD *)v42 = a3;
    v43 = v42 + 8;
    goto LABEL_36;
  }
  v44 = *(char **)(a1 + 88);
  v45 = (v42 - v44) >> 3;
  if ((unint64_t)(v45 + 1) >> 61)
LABEL_144:
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v46 = v41 - (_QWORD)v44;
  v47 = (uint64_t)(v41 - (_QWORD)v44) >> 2;
  if (v47 <= v45 + 1)
    v47 = v45 + 1;
  if (v46 >= 0x7FFFFFFFFFFFFFF8)
    v48 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v48 = v47;
  if (v48)
  {
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 104, v48);
    v44 = *(char **)(a1 + 88);
    v42 = *(char **)(a1 + 96);
  }
  else
  {
    v49 = 0;
  }
  v50 = &v49[8 * v45];
  v51 = &v49[8 * v48];
  *(_QWORD *)v50 = a3;
  v43 = v50 + 8;
  while (v42 != v44)
  {
    v52 = *((_QWORD *)v42 - 1);
    v42 -= 8;
    *((_QWORD *)v50 - 1) = v52;
    v50 -= 8;
  }
  *(_QWORD *)(a1 + 88) = v50;
  *(_QWORD *)(a1 + 96) = v43;
  *(_QWORD *)(a1 + 104) = v51;
  if (v44)
    operator delete(v44);
LABEL_36:
  *(_QWORD *)(a1 + 96) = v43;
  v53 = *(double *)(a1 + 144);
  *(double *)(a1 + 144) = v53 + v123[2](v123, v27 + 80 * v26);
  v121 = (unint64_t *)(v27 + 80 * v26 + 40);
  *(_QWORD *)(a1 + 208) += *v121;
  v54 = v124[2](v124, a1);
  *(double *)(a1 + 112) = v54;
  if (v54 <= a9)
  {
    v118 = v27;
    v115 = a8;
    if (a11)
    {
      v55 = v27 + 80 * v26;
      v56 = *(_QWORD *)(v55 + 56);
      v57 = *(_QWORD *)(v55 + 64);
      v58 = (_QWORD *)(v55 + 56);
      v59 = v57 - v56;
      if (v59)
      {
        v116 = v26;
        v60 = 0;
        v61 = 0;
        v62 = v59 >> 3;
        v63 = (void **)(a1 + 248);
        v64 = (_QWORD *)(a1 + 264);
        if (v62 <= 1)
          v65 = 1;
        else
          v65 = v62;
        v66 = *(_QWORD **)(a1 + 256);
        do
        {
          v67 = *(_QWORD *)(*v58 + 8 * v60);
          v68 = *v63;
          v69 = v66;
          if (*v63 != v66)
          {
            v69 = *v63;
            while (*v69 != v67)
            {
              if (++v69 == v66)
              {
                v69 = v66;
                break;
              }
            }
          }
          v70 = v69 != v66;
          if ((unint64_t)v66 >= *v64)
          {
            v71 = ((char *)v66 - v68) >> 3;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61)
              std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
            v73 = *v64 - (_QWORD)v68;
            if (v73 >> 2 > v72)
              v72 = v73 >> 2;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
              v74 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v74 = v72;
            if (v74)
            {
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 264, v74);
              v68 = *(_BYTE **)(a1 + 248);
              v66 = *(_QWORD **)(a1 + 256);
            }
            else
            {
              v75 = 0;
            }
            v76 = &v75[8 * v71];
            *(_QWORD *)v76 = v67;
            v77 = v76 + 8;
            while (v66 != (_QWORD *)v68)
            {
              v78 = *--v66;
              *((_QWORD *)v76 - 1) = v78;
              v76 -= 8;
            }
            *(_QWORD *)(a1 + 248) = v76;
            *(_QWORD *)(a1 + 256) = v77;
            *(_QWORD *)(a1 + 264) = &v75[8 * v74];
            if (v68)
              operator delete(v68);
            v66 = v77;
          }
          else
          {
            *v66++ = v67;
          }
          v61 |= v70;
          *(_QWORD *)(a1 + 256) = v66;
          ++v60;
        }
        while (v60 != v65);
        v26 = v116;
        if ((v61 & 1) != 0 || a11 < ((char *)v66 - (_BYTE *)*v63) >> 3)
          *(double *)(a1 + 144) = a9 + 1.0 + *(double *)(a1 + 144);
      }
    }
    v79 = v124[2](v124, a1);
    *(double *)(a1 + 112) = v79;
    if (v79 <= a9)
    {
      CRCHNetwork::getSymbol(&__p, *(_QWORD *)(a1 + 56), *(_QWORD *)(v118 + 80 * v26 + 24));
      w2i32(&__p, (char **)&v126);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v80 = (v127 - (_BYTE *)v126) >> 2;
      if (!a10)
        v80 = 1;
      v117 = v80;
      if (v80)
      {
        v81 = 0;
        v82 = 0.0;
        v83 = 0.0;
        do
        {
          v84 = *((unsigned int *)v126 + v81);
          v85 = +[CRCHCharacterSetRules characterType:](CRCHCharacterSetRules, "characterType:", v84);
          if (((v115 ^ 1 | a10) & 1) == 0)
          {
            v86 = *v121;
            v87 = v86
                - +[CRCHCharacterSetRules expectedMaxStrokeCount:](CRCHCharacterSetRules, "expectedMaxStrokeCount:", (unsigned __int16)v84);
            if ((int)v87 >= 1)
              *(double *)(a1 + 160) = *(double *)(a1 + 160) + (double)(*v121 * v87);
            v88 = +[CRCHCharacterSetRules expectedMinStrokeCount:](CRCHCharacterSetRules, "expectedMinStrokeCount:", (unsigned __int16)v84)- *v121;
            v89 = *(double *)(a1 + 160);
            if ((int)v88 >= 1)
            {
              v89 = v89 + (double)(*v121 * v88);
              *(double *)(a1 + 160) = v89;
            }
            v90 = *(double *)(**(_QWORD **)(a1 + 56) + 64);
            if (v89 > v90)
              *(double *)(a1 + 160) = v90;
            v91 = v124[2](v124, a1);
            *(double *)(a1 + 112) = v91;
            if (v91 > a9)
              break;
          }
          CH_unicodeToNSString(v84);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v93 = *(_QWORD *)(a1 + 232);
          if (v93)
          {
            +[CRCHPatternNetwork cursorByAdvancingWithString:fromCursor:inNetwork:](CRCHPatternNetwork, "cursorByAdvancingWithString:fromCursor:inNetwork:", v92, v93, v122);
            v94 = objc_claimAutoreleasedReturnValue();
            v95 = *(void **)(a1 + 232);
            *(_QWORD *)(a1 + 232) = v94;

          }
          v96 = (v85 & 0x13) == 0;
          v97 = *(const void **)(a1 + 224);
          if (v97)
          {
            v98 = LXCursorCreateByAdvancing();
            CFRelease(v97);
            *(_QWORD *)(a1 + 224) = v98;
            if (v98)
            {
              v99 = *(_QWORD *)(a1 + 216);
              v100 = v99 == 0;
              v101 = v99 != 0;
              if (v100)
                v82 = -v21;
              v96 = (v85 & 0x13) == 0 && v101;
            }
          }
          else
          {
            v98 = 0;
          }
          if (!*(_QWORD *)(a1 + 232) && !v98 && *(_DWORD *)(*(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 16) - 4) != 1)
          {
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(**(_QWORD **)(a1 + 56) + 64);
            v106 = *(const void **)(a1 + 216);
            if (v106)
            {
              CFRelease(v106);
              *(_QWORD *)(a1 + 216) = 0;
            }
          }
          v102 = v124[2](v124, a1);
          *(double *)(a1 + 112) = v102;
          if (v102 > a9)
            goto LABEL_139;
          v103 = *(const void **)(a1 + 216);
          if (v103)
          {
            v104 = LXCursorCreateByAdvancing();
            CFRelease(v103);
            *(_QWORD *)(a1 + 216) = v104;
            if (v104)
            {
              LXCursorConditionalProbability();
              if (v105 < 0.0)
                v82 = -v105;
            }
            else
            {
              v82 = -*(double *)(**(_QWORD **)(a1 + 56) + 64);
            }
          }
          if (v96)
            v82 = -v22;
          if ((v85 & 0x1000) == 0)
          {
            v107 = *(_QWORD *)(a1 + 272);
            v108 = *(_QWORD *)(a1 + 16);
            v109 = *(_QWORD *)(a1 + 40);
            if (v107 == 0x7FFFFFFFFFFFFFFFLL)
            {
              v107 = v108 - v109;
              *(_QWORD *)(a1 + 272) = v108 - v109;
            }
            *(_QWORD *)(a1 + 280) = v108 - (v109 + v107) + 1;
          }
          v110 = v82 > 0.0 || *(_QWORD *)(a1 + 216) || *(_QWORD *)(a1 + 224)
               ? *(double *)(a1 + 128) + v82 * (double)*v121
               : *(double *)(**(_QWORD **)(a1 + 56) + 64) + *(double *)(a1 + 128);
          *(double *)(a1 + 128) = v110;
          v111 = v124[2](v124, a1);
          *(double *)(a1 + 112) = v111;
          if (v111 > a9)
            goto LABEL_139;
          if (a4)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) + 56 * *v119 + 48)
              && (*(_QWORD *)(a1 + 216) || *(_QWORD *)(a1 + 224))
              && (v85 & 0x20) != 0
              && !LXCursorIsRoot())
            {
              if (*(_QWORD *)(a1 + 216))
              {
                LXCursorTerminationProbability();
                if (fabs(v113) == INFINITY)
                  v83 = v22;
                else
                  v83 = v113;
              }
              if (*(_QWORD *)(a1 + 224))
                v83 = v21;
            }
            else
            {
              v83 = v22;
              if (!v96)
              {
                if (*(_QWORD *)(a1 + 216) || (v83 = v21, !*(_QWORD *)(a1 + 224)))
                {
                  CRCharacterNormalizer::normalizedCharacter(v84);
                  LMLanguageModelConditionalProbability();
                  v83 = v112;
                }
              }
            }
            *(double *)(a1 + 176) = *(double *)(a1 + 176) - v83 * (double)*v121;
            v114 = v124[2](v124, a1);
            *(double *)(a1 + 112) = v114;
            if (v114 > a9)
            {
LABEL_139:

              break;
            }
          }
          CRCHLatticePath::expandPathStringWithCharacter((CRCHLatticePath *)a1, v84);

          ++v81;
        }
        while (v117 != v81);
      }
      if (v126)
      {
        v127 = v126;
        operator delete(v126);
      }
    }
  }
LABEL_142:

}

void sub_1D5071FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27)
{
  void *v27;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void CRCHLatticePath::addWordAtNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int a7, int a8, char a9, char a10)
{
  id v15;
  double (**v16)(id, _QWORD, __n128);
  uint64_t *v17;
  uint64_t v18;
  double v19;
  __n128 v20;
  double v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  double v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  double *v53;
  unint64_t v54;
  double v55;
  double *v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  double *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int HasEntries;
  BOOL v68;
  const void *v69;
  const void *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  id v85;
  BOOL v86;
  BOOL v87;

  v15 = a5;
  v16 = a6;
  v17 = *(uint64_t **)(a1 + 56);
  v18 = *v17;
  v19 = log10(*(long double *)(*v17 + 72));
  v20.n128_f64[0] = log10(*(long double *)(v18 + 80));
  if (a7)
  {
    v21 = v20.n128_f64[0];
    if (!*(_QWORD *)(a1 + 224))
      goto LABEL_5;
    if (LXCursorHasChildren())
    {
      if (!*(_QWORD *)(a1 + 224))
      {
LABEL_5:
        if (*(_QWORD *)(a1 + 216))
        {
          if (LXCursorHasEntries())
          {
            LXCursorTerminationProbability();
            v19 = v20.n128_f64[0];
          }
          else
          {
            v19 = v21;
          }
        }
      }
    }
    else
    {
      v19 = 0.0;
    }
    v20.n128_f64[0] = *(double *)(a1 + 128) - v19;
    *(_QWORD *)(a1 + 128) = v20.n128_u64[0];
  }
  if (a9)
    v20.n128_f64[0] = CRCHLatticePath::updateWordSegmentationScoreAtNode((CRCHLatticePath *)a1, a2, 1);
  if (a10)
  {
    v22 = *(_QWORD *)(a1 + 232);
    v23 = +[CRCHPatternNetwork isFinalCursor:inNetwork:](CRCHPatternNetwork, "isFinalCursor:inNetwork:", v22, v15, v20.n128_f64[0]);
    if (v22)
      v24 = v23;
    else
      v24 = 1;
    v25 = 0.0;
    if ((v24 & 1) == 0)
      v25 = *(double *)(**(_QWORD **)(a1 + 56) + 64);
    v20.n128_f64[0] = v25 + *(double *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v20.n128_u64[0];
  }
  *(double *)(a1 + 112) = v16[2](v16, a1, v20);
  v85 = v15;
  v26 = *(uint64_t **)(a1 + 288);
  v27 = *(uint64_t **)(a1 + 296);
  v28 = (char *)v27 - (char *)v26;
  if (v27 == v26)
  {
    v29 = 0;
    v30 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 40);
    v32 = ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3) - 1;
    v31 = 1;
  }
  else
  {
    v29 = *(v27 - 2) + *(v27 - 1) + 1;
    v30 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 40) - v29;
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 320) - 8) + *(_QWORD *)(*(_QWORD *)(a1 + 320) - 16);
    v32 = ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3) - v31;
  }
  v33 = *(_QWORD *)(a1 + 304);
  if ((unint64_t)v27 >= v33)
  {
    v35 = v28 >> 4;
    v36 = (v28 >> 4) + 1;
    if (v36 >> 60)
      goto LABEL_101;
    v37 = v33 - (_QWORD)v26;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 304, v38);
      v26 = *(uint64_t **)(a1 + 288);
      v27 = *(uint64_t **)(a1 + 296);
    }
    else
    {
      v39 = 0;
    }
    v40 = (uint64_t *)&v39[16 * v35];
    v41 = &v39[16 * v38];
    *v40 = v29;
    v40[1] = v30;
    v34 = v40 + 2;
    if (v27 != v26)
    {
      do
      {
        *((_OWORD *)v40 - 1) = *((_OWORD *)v27 - 1);
        v40 -= 2;
        v27 -= 2;
      }
      while (v27 != v26);
      v26 = *(uint64_t **)(a1 + 288);
    }
    *(_QWORD *)(a1 + 288) = v40;
    *(_QWORD *)(a1 + 296) = v34;
    *(_QWORD *)(a1 + 304) = v41;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v27 = v29;
    v27[1] = v30;
    v34 = v27 + 2;
  }
  *(_QWORD *)(a1 + 296) = v34;
  v43 = *(uint64_t **)(a1 + 320);
  v42 = *(_QWORD *)(a1 + 328);
  if ((unint64_t)v43 < v42)
  {
    *v43 = v31;
    v43[1] = v32;
    v44 = v43 + 2;
    goto LABEL_55;
  }
  v45 = *(uint64_t **)(a1 + 312);
  v46 = ((char *)v43 - (char *)v45) >> 4;
  v47 = v46 + 1;
  if ((unint64_t)(v46 + 1) >> 60)
LABEL_101:
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v48 = v42 - (_QWORD)v45;
  if (v48 >> 3 > v47)
    v47 = v48 >> 3;
  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
    v49 = 0xFFFFFFFFFFFFFFFLL;
  else
    v49 = v47;
  if (v49)
  {
    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(a1 + 328, v49);
    v45 = *(uint64_t **)(a1 + 312);
    v43 = *(uint64_t **)(a1 + 320);
  }
  else
  {
    v50 = 0;
  }
  v51 = (uint64_t *)&v50[16 * v46];
  v52 = &v50[16 * v49];
  *v51 = v31;
  v51[1] = v32;
  v44 = v51 + 2;
  if (v43 != v45)
  {
    do
    {
      *((_OWORD *)v51 - 1) = *((_OWORD *)v43 - 1);
      v51 -= 2;
      v43 -= 2;
    }
    while (v43 != v45);
    v45 = *(uint64_t **)(a1 + 312);
  }
  *(_QWORD *)(a1 + 312) = v51;
  *(_QWORD *)(a1 + 320) = v44;
  *(_QWORD *)(a1 + 328) = v52;
  if (v45)
    operator delete(v45);
LABEL_55:
  *(_QWORD *)(a1 + 320) = v44;
  v53 = *(double **)(a1 + 344);
  v54 = *(_QWORD *)(a1 + 352);
  v55 = *(double *)(a1 + 144) / (double)*(unint64_t *)(a1 + 208);
  if ((unint64_t)v53 >= v54)
  {
    v57 = *(double **)(a1 + 336);
    v58 = v53 - v57;
    if ((unint64_t)(v58 + 1) >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v59 = v54 - (_QWORD)v57;
    v60 = (uint64_t)(v54 - (_QWORD)v57) >> 2;
    if (v60 <= v58 + 1)
      v60 = v58 + 1;
    if (v59 >= 0x7FFFFFFFFFFFFFF8)
      v61 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v61 = v60;
    if (v61)
    {
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 352, v61);
      v57 = *(double **)(a1 + 336);
      v53 = *(double **)(a1 + 344);
    }
    else
    {
      v62 = 0;
    }
    v63 = (double *)&v62[8 * v58];
    v64 = &v62[8 * v61];
    *v63 = v55;
    v56 = v63 + 1;
    while (v53 != v57)
    {
      v65 = *((_QWORD *)v53-- - 1);
      *((_QWORD *)v63-- - 1) = v65;
    }
    *(_QWORD *)(a1 + 336) = v63;
    *(_QWORD *)(a1 + 344) = v56;
    *(_QWORD *)(a1 + 352) = v64;
    if (v57)
      operator delete(v57);
  }
  else
  {
    *v53 = v55;
    v56 = v53 + 1;
  }
  *(_QWORD *)(a1 + 344) = v56;
  v66 = *(_QWORD *)(a1 + 224);
  if (*(_QWORD *)(a1 + 216))
  {
    HasEntries = LXCursorHasEntries();
    v68 = HasEntries != 0;
    if (!HasEntries && v66)
      goto LABEL_76;
  }
  else
  {
    if (v66)
    {
LABEL_76:
      v68 = LXCursorHasEntries() != 0;
      goto LABEL_78;
    }
    v68 = 0;
  }
LABEL_78:
  v87 = v68;
  v86 = *(_QWORD *)(a1 + 232) != 0;
  std::vector<BOOL>::push_back(a1 + 384, &v87);
  std::vector<BOOL>::push_back(a1 + 408, &v86);
  *(double *)(a1 + 168) = *(double *)(a1 + 168) + *(double *)(a1 + 176);
  *(double *)(a1 + 152) = *(double *)(a1 + 152) + *(double *)(a1 + 160);
  *(double *)(a1 + 120) = *(double *)(a1 + 120) + *(double *)(a1 + 128);
  *(double *)(a1 + 184) = *(double *)(a1 + 184) + *(double *)(a1 + 192);
  *(double *)(a1 + 136) = *(double *)(a1 + 136) + *(double *)(a1 + 144);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  if (a8)
  {
    v69 = *(const void **)(a1 + 216);
    if (v69)
    {
      CFRelease(v69);
      *(_QWORD *)(a1 + 216) = 0;
    }
    *(_QWORD *)(a1 + 216) = LXLexiconCreateRootCursor();
    v70 = *(const void **)(a1 + 224);
    if (v70)
    {
      CFRelease(v70);
      *(_QWORD *)(a1 + 224) = 0;
    }
    *(_QWORD *)(a1 + 224) = LXLexiconCreateRootCursor();
    +[CRCHPatternNetwork rootCursorForContentType:inNetwork:](CRCHPatternNetwork, "rootCursorForContentType:inNetwork:", *(unsigned int *)(a1 + 240), v85);
    v71 = objc_claimAutoreleasedReturnValue();
    v72 = *(void **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v71;

    CRCHLatticePath::expandPathStringWithCharacter((CRCHLatticePath *)a1, 32);
  }
  v73 = *(char **)(a1 + 368);
  v74 = *(_QWORD *)(a1 + 376);
  if ((unint64_t)v73 >= v74)
  {
    v76 = *(char **)(a1 + 360);
    v77 = (v73 - v76) >> 3;
    if ((unint64_t)(v77 + 1) >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v78 = v74 - (_QWORD)v76;
    v79 = (uint64_t)(v74 - (_QWORD)v76) >> 2;
    if (v79 <= v77 + 1)
      v79 = v77 + 1;
    if (v78 >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    if (v80)
    {
      v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 376, v80);
      v76 = *(char **)(a1 + 360);
      v73 = *(char **)(a1 + 368);
    }
    else
    {
      v81 = 0;
    }
    v82 = &v81[8 * v77];
    v83 = &v81[8 * v80];
    *(_QWORD *)v82 = *(_QWORD *)(a1 + 112);
    v75 = v82 + 8;
    while (v73 != v76)
    {
      v84 = *((_QWORD *)v73 - 1);
      v73 -= 8;
      *((_QWORD *)v82 - 1) = v84;
      v82 -= 8;
    }
    *(_QWORD *)(a1 + 360) = v82;
    *(_QWORD *)(a1 + 368) = v75;
    *(_QWORD *)(a1 + 376) = v83;
    if (v76)
      operator delete(v76);
  }
  else
  {
    *(_QWORD *)v73 = *(_QWORD *)(a1 + 112);
    v75 = v73 + 8;
  }
  *(_QWORD *)(a1 + 368) = v75;

}

void sub_1D507264C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

BOOL MinCompareEdgePathsPtr(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(_QWORD *)a1 + 112) < *(double *)(*(_QWORD *)a2 + 112);
}

uint64_t CRCHNetwork::deserialize(CRCHNetwork *this, const char *__filename)
{
  FILE *v4;
  NSObject *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  uint64_t i;
  uint64_t v40;
  BOOL *v41;
  int *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  unsigned int v46;
  char *v47;
  char *v48;
  BOOL v50;
  int *v52;
  CRCHNetwork *v53;
  char **v54;
  _QWORD *v55;
  void *__p[2];
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE buf[12];
  char v62;
  _DWORD __ptr[3];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = fopen(__filename, "rb");
  fread(__ptr, 4uLL, 3uLL, v4);
  if (__ptr[0] <= 1u && __ptr[1] < 3u)
  {
    v60 = 0;
    fread((char *)&v60 + 4, 4uLL, 1uLL, v4);
    v7 = (_QWORD *)((char *)this + 88);
    v8 = SHIDWORD(v60);
    std::vector<NetworkEdge>::resize((uint64_t *)this + 11, SHIDWORD(v60));
    v9 = *((_QWORD *)this + 14);
    v10 = (char *)*((_QWORD *)this + 15);
    v11 = (uint64_t)&v10[-v9] >> 3;
    v54 = (char **)((char *)this + 112);
    if (v8 <= v11)
    {
      if (v8 >= v11)
      {
LABEL_26:
        fread(&v60, 4uLL, 1uLL, v4);
        v26 = (_QWORD *)((char *)this + 40);
        v27 = (int)v60;
        std::vector<CRCHNetworkNode>::resize((uint64_t)this + 40, (int)v60);
        v59 = 0;
        fread((char *)&v59 + 4, 4uLL, 1uLL, v4);
        v28 = HIDWORD(v59);
        v52 = (int *)operator new[]();
        fread(v52, 4uLL, v28, v4);
        fread(&v59, 4uLL, 1uLL, v4);
        v53 = this;
        *((_BYTE *)this + 192) = (_DWORD)v59 != 0;
        is_mul_ok(v8, 0x18uLL);
        v55 = (_QWORD *)operator new[]();
        fread(v55, 0x18uLL, v8, v4);
        if ((_DWORD)v8)
        {
          v29 = 0;
          v30 = v55 + 2;
          v31 = v8;
          do
          {
            v32 = *v7 + v29;
            v33 = *(v30 - 2);
            *(_QWORD *)&v34 = v33;
            *((_QWORD *)&v34 + 1) = HIDWORD(v33);
            *(_OWORD *)v32 = v34;
            v35 = *(v30 - 1);
            *(_QWORD *)&v34 = v35;
            *((_QWORD *)&v34 + 1) = HIDWORD(v35);
            *(_OWORD *)(v32 + 16) = v34;
            *(_QWORD *)(v32 + 32) = *v30;
            v37 = (_QWORD *)(v32 + 56);
            v36 = *(void **)(v32 + 56);
            *(_QWORD *)(v32 + 40) = 0;
            *(_QWORD *)(v32 + 48) = 0;
            if (v36)
            {
              *(_QWORD *)(v32 + 64) = v36;
              operator delete(v36);
            }
            *v37 = 0;
            v37[1] = 0;
            v29 += 80;
            v30 += 3;
            v37[2] = 0;
            --v31;
          }
          while (v31);
        }
        MEMORY[0x1D826E270](v55, 0x1000C80504FFAC1);
        v38 = (void *)operator new[]();
        fread(v38, 4uLL, v8, v4);
        if ((_DWORD)v8)
        {
          for (i = 0; i != v8; ++i)
            *(_QWORD *)&(*v54)[8 * i] = *v7 + (80 * *((_DWORD *)v38 + i));
        }
        if ((_DWORD)v27)
        {
          v40 = 48;
          do
          {
            v41 = (BOOL *)(*v26 + v40);
            fread(v41 - 48, 4uLL, 1uLL, v4);
            fread(v41 - 40, 4uLL, 1uLL, v4);
            fread(v41 - 32, 4uLL, 1uLL, v4);
            fread(v41 - 24, 4uLL, 1uLL, v4);
            *(_WORD *)buf = 0;
            fread(buf, 2uLL, 1uLL, v4);
            *v41 = *(_WORD *)buf != 0;
            v40 += 56;
            --v27;
          }
          while (v27);
        }
        if ((_DWORD)v28)
        {
          v42 = v52;
          do
          {
            v43 = *v42++;
            CRCHNetwork::setFinal((uint64_t **)v53, v43);
            --v28;
          }
          while (v28);
        }
        *((_QWORD *)v53 + 4) = 0;
        v58 = 0;
        fread((char *)&v58 + 4, 4uLL, 1uLL, v4);
        fread(&v58, 4uLL, 1uLL, v4);
        v44 = v58;
        v45 = (char *)operator new[]();
        fread(v45, v44, 1uLL, v4);
        if (HIDWORD(v58))
        {
          v46 = 0;
          v47 = &v45[v44];
          v48 = v45;
          do
          {
            std::string::basic_string[abi:ne180100]<0>(buf, v48);
            std::string::basic_string[abi:ne180100]<0>(__p, v48);
            CRCHSymbolMap::store((_QWORD *)v53 + 17, (__int128 *)__p);
            if (v57 < 0)
              operator delete(__p[0]);
            do
            {
              if (*v48++)
                v50 = v48 >= v47;
              else
                v50 = 1;
            }
            while (!v50);
            if (v62 < 0)
              operator delete(*(void **)buf);
            ++v46;
          }
          while (v46 < HIDWORD(v58));
        }
        MEMORY[0x1D826E270](v45, 0x1000C8077774924);
        MEMORY[0x1D826E270](v38, 0x1000C8052888210);
        MEMORY[0x1D826E270](v52, 0x1000C8052888210);
        return fclose(v4);
      }
      v25 = (char *)(v9 + 8 * v8);
    }
    else
    {
      v12 = v8 - v11;
      v13 = *((_QWORD *)this + 16);
      if (v8 - v11 > (v13 - (uint64_t)v10) >> 3)
      {
        if ((v8 & 0x80000000) != 0)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v14 = v13 - v9;
        v15 = v14 >> 2;
        if (v14 >> 2 <= v8)
          v15 = v8;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 128, v16);
        v18 = &v17[8 * v11];
        v20 = &v17[8 * v19];
        bzero(v18, 8 * v12);
        v21 = &v18[8 * v12];
        v23 = (char *)*((_QWORD *)this + 14);
        v22 = (char *)*((_QWORD *)this + 15);
        if (v22 != v23)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v18 - 1) = v24;
            v18 -= 8;
          }
          while (v22 != v23);
          v22 = *v54;
        }
        *((_QWORD *)this + 14) = v18;
        *((_QWORD *)this + 15) = v21;
        *((_QWORD *)this + 16) = v20;
        if (v22)
          operator delete(v22);
        goto LABEL_26;
      }
      bzero(v10, 8 * v12);
      v25 = &v10[8 * v12];
    }
    *((_QWORD *)this + 15) = v25;
    goto LABEL_26;
  }
  CHOSLogForCategory(0);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = __filename;
    _os_log_impl(&dword_1D4FB8000, v6, OS_LOG_TYPE_ERROR, "Unsupported Network Version %s", buf, 0xCu);
  }

  return fclose(v4);
}

void sub_1D5072C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t CRCHNetwork::serialize(CRCHNetwork *this, const char *__filename)
{
  FILE *v3;
  CRCHNetwork *v4;
  CRCHNetwork *v5;
  CRCHNetwork *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int32x4_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  char *v30;
  uint64_t __ptr;
  int32x4_t v33;
  uint64_t v34;

  v3 = fopen(__filename, "wb");
  fwrite(&NETWORK_BINARY_FILE_VERSION_MAJOR, 4uLL, 1uLL, v3);
  fwrite(&NETWORK_BINARY_FILE_VERSION_MINOR, 4uLL, 1uLL, v3);
  fwrite(&NETWORK_BINARY_FILE_VERSION_REVISON, 4uLL, 1uLL, v3);
  __ptr = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 4);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  __ptr = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  __ptr = *((_QWORD *)this + 10);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v4 = (CRCHNetwork *)*((_QWORD *)this + 8);
  if (v4 != (CRCHNetwork *)((char *)this + 72))
  {
    do
    {
      __ptr = *((_QWORD *)v4 + 4);
      fwrite(&__ptr, 4uLL, 1uLL, v3);
      v5 = (CRCHNetwork *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(CRCHNetwork **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (CRCHNetwork *)*((_QWORD *)v4 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (CRCHNetwork *)((char *)this + 72));
  }
  __ptr = *((unsigned __int8 *)this + 192);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v8 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (int32x4_t *)(v8 + v9);
      v33 = vuzp1q_s32(*v11, v11[1]);
      v34 = v11[2].i64[0];
      fwrite(&v33, 0x18uLL, 1uLL, v3);
      ++v10;
      v8 = *((_QWORD *)this + 11);
      v12 = *((_QWORD *)this + 12);
      v9 += 80;
    }
    while (v10 < 0xCCCCCCCCCCCCCCCDLL * ((v12 - v8) >> 4));
    if (v12 != v8)
    {
      v13 = 0;
      do
      {
        v33.i32[0] = (*(_QWORD *)(*((_QWORD *)this + 14) + 8 * v13) - v8) / 0x50;
        fwrite(&v33, 4uLL, 1uLL, v3);
        ++v13;
        v8 = *((_QWORD *)this + 11);
      }
      while (v13 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 12) - v8) >> 4));
    }
  }
  v14 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6) != v14)
  {
    v15 = 0;
    v16 = 48;
    do
    {
      v17 = (unsigned __int8 *)(v14 + v16);
      fwrite((const void *)(v14 + v16 - 48), 4uLL, 1uLL, v3);
      fwrite(v17 - 40, 4uLL, 1uLL, v3);
      fwrite(v17 - 32, 4uLL, 1uLL, v3);
      fwrite(v17 - 24, 4uLL, 1uLL, v3);
      v33.i16[0] = *v17;
      fwrite(&v33, 2uLL, 1uLL, v3);
      ++v15;
      v14 = *((_QWORD *)this + 5);
      v16 += 56;
    }
    while (v15 < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 6) - v14) >> 3));
  }
  __ptr = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3);
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v19 = *((_QWORD *)this + 18);
  v18 = *((_QWORD *)this + 19);
  v20 = v18 - v19;
  if (v18 == v19)
  {
    v21 = 0;
  }
  else
  {
    LODWORD(v21) = 0;
    v22 = v20 / 24;
    if (v22 <= 1)
      v22 = 1;
    v23 = (char *)(v19 + 23);
    do
    {
      if (*v23 < 0)
        v24 = *(_QWORD *)(v23 - 15);
      else
        LODWORD(v24) = *v23;
      LODWORD(v21) = v21 + v24 + 1;
      v23 += 24;
      --v22;
    }
    while (v22);
    v21 = (int)v21;
  }
  __ptr = v21;
  fwrite(&__ptr, 4uLL, 1uLL, v3);
  v25 = *((_QWORD *)this + 18);
  if (*((_QWORD *)this + 19) != v25)
  {
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = (char *)(v25 + v26);
      if (v28[23] < 0)
      {
        v30 = *(char **)v28;
        v29 = *((_QWORD *)v28 + 1);
      }
      else
      {
        v29 = v28[23];
        v30 = v28;
      }
      fwrite(v30, v29, 1uLL, v3);
      v33.i8[0] = 0;
      fwrite(&v33, 1uLL, 1uLL, v3);
      ++v27;
      v25 = *((_QWORD *)this + 18);
      v26 += 24;
    }
    while (v27 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v25) >> 3));
  }
  return fclose(v3);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1D507317C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
  }
  return a1;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::set<unsigned long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1D5073348(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<CRCHuint128>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<unsigned long>::__find_equal<unsigned long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *std::__list_imp<unsigned long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::__tree<unsigned long>::__erase_unique<unsigned long>(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t std::map<unsigned long,unsigned long>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = v5[4];
      v7 = *(_QWORD *)(a1 + 8);
      v8 = v3;
      if (*(_QWORD **)a1 == v3)
        goto LABEL_8;
      v9 = *(_QWORD **)(a1 + 8);
      v10 = v3;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (_QWORD *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      if (v8[4] < v6)
      {
LABEL_8:
        if (v7)
          v12 = (uint64_t **)v8;
        else
          v12 = (uint64_t **)v3;
        if (v7)
          v13 = (uint64_t **)(v8 + 1);
        else
          v13 = (uint64_t **)v3;
        if (*v13)
          goto LABEL_25;
      }
      else
      {
        v13 = (uint64_t **)v3;
        v12 = (uint64_t **)v3;
        if (v7)
        {
          v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v14;
              v15 = v14[4];
              if (v15 <= v6)
                break;
              v14 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_24;
            }
            if (v15 >= v6)
              goto LABEL_25;
            v14 = v12[1];
            if (!v14)
            {
              v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      v16 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v16 + 2) = *((_OWORD *)v5 + 2);
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      v17 = (_QWORD *)v5[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v5[2];
          v11 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v11);
      }
      v5 = v18;
    }
    while (v18 != v4);
  }
  return a1;
}

void sub_1D5073898(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<CRCHuint128>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void CRCHNetwork::CRCHNetwork(CRCHNetwork *this)
{
  void **v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void **v19;

  *(_QWORD *)this = &latticePresets;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v2 = (void **)((char *)this + 40);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  CRCHSymbolMap::CRCHSymbolMap((CRCHNetwork *)((char *)this + 136));
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 30) = 0;
  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  if (v3 >= v4)
  {
    v19 = v2;
    v6 = *v2;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3 - (_QWORD)*v2) >> 3);
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > 0x492492492492492)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHNetworkNode>>((uint64_t)this + 56, v10);
    else
      v11 = 0;
    v12 = &v11[56 * v7];
    v13 = &v11[56 * v10];
    v12[32] = 0;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_QWORD *)v12 + 5) = 0;
    v12[48] = 0;
    v5 = v12 + 56;
    v15 = (char *)*((_QWORD *)this + 5);
    v14 = (char *)*((_QWORD *)this + 6);
    if (v14 != v15)
    {
      do
      {
        v16 = *(_OWORD *)(v14 - 56);
        v17 = *(_OWORD *)(v14 - 40);
        v18 = *(_OWORD *)(v14 - 24);
        *(v12 - 8) = *(v14 - 8);
        *(_OWORD *)(v12 - 24) = v18;
        *(_OWORD *)(v12 - 40) = v17;
        *(_OWORD *)(v12 - 56) = v16;
        v12 -= 56;
        v14 -= 56;
      }
      while (v14 != v15);
      v14 = (char *)*v19;
    }
    *((_QWORD *)this + 5) = v12;
    *((_QWORD *)this + 6) = v5;
    *((_QWORD *)this + 7) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_BYTE *)(v3 + 32) = 0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_QWORD *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 48) = 0;
    v5 = (char *)(v3 + 56);
  }
  *((_QWORD *)this + 6) = v5;
  *(_BYTE *)(*((_QWORD *)this + 5) + 48) = 1;
}

void sub_1D5073AC8(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD **v11;
  uint64_t v12;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a4);
  v12 = v8;
  std::__tree<CRCHuint128>::destroy(v12, *v9);
  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(v7, *v11);
  CRCHSymbolMap::~CRCHSymbolMap(v6);
  v14 = *(void **)(v4 + 112);
  if (v14)
  {
    *(_QWORD *)(v4 + 120) = v14;
    operator delete(v14);
  }
  std::vector<NetworkEdge>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<CRCHuint128>::destroy(v5, *v10);
  v15 = *a3;
  if (*a3)
  {
    *(_QWORD *)(v4 + 48) = v15;
    operator delete(v15);
  }
  if (*(char *)(v4 + 31) < 0)
    operator delete(*a4);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHNetworkNode>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t isWordValid(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t CursorByAdvancingWithCharacters;

  LMLexiconGetRootCursor();
  v4 = *a2;
  v3 = a2[1];
  while (v4 != v3)
  {
    CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
    if (!CursorByAdvancingWithCharacters)
      goto LABEL_8;
    v4 += 4;
  }
  if (LMLexiconCursorHasEntries())
    CursorByAdvancingWithCharacters = LMLexiconCursorFirstTokenID();
  else
    CursorByAdvancingWithCharacters = 0xFFFFFFFFLL;
LABEL_8:
  LMLexiconResetCursors();
  return CursorByAdvancingWithCharacters;
}

uint64_t std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

BOOL CRCHuint128::operator<(_DWORD *a1, _DWORD *a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  if (*a1 < *a2)
    v2 = -1;
  else
    v2 = *a1 > *a2;
  v3 = a1[2];
  v4 = a2[2];
  v5 = v3 >= v4;
  v6 = v3 > v4;
  if (!v5)
    v6 = -1;
  if (v2 == -1)
    return 1;
  if (v2)
    return 0;
  v7 = a1[1];
  v8 = a2[1];
  v5 = v7 >= v8;
  v9 = v7 > v8;
  if (!v5)
    v9 = -1;
  if (v9 == -1)
    return 1;
  if (v9)
    return 0;
  if (v6 == -1)
    return 1;
  return !v6 && a1[3] < a2[3];
}

void CRCHLatticePath::CRCHLatticePath(CRCHLatticePath *this, const CRCHLatticePath *a2)
{
  id v4;
  int v5;
  void *v6;
  void *v7;
  const void *v8;
  const void *v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 8, *((const void **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 216);
  v4 = *((id *)a2 + 29);
  v5 = *((_DWORD *)a2 + 60);
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = v4;
  *((_DWORD *)this + 60) = v5;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)this + 31, *((const void **)a2 + 31), *((_QWORD *)a2 + 32), (uint64_t)(*((_QWORD *)a2 + 32) - *((_QWORD *)a2 + 31)) >> 3);
  *((_OWORD *)this + 17) = *((_OWORD *)a2 + 17);
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 36) = 0;
  std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>((_QWORD *)this + 36, *((const void **)a2 + 36), *((_QWORD *)a2 + 37), (uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 4);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>((_QWORD *)this + 39, *((const void **)a2 + 39), *((_QWORD *)a2 + 40), (uint64_t)(*((_QWORD *)a2 + 40) - *((_QWORD *)a2 + 39)) >> 4);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 42, *((const void **)a2 + 42), *((_QWORD *)a2 + 43), (uint64_t)(*((_QWORD *)a2 + 43) - *((_QWORD *)a2 + 42)) >> 3);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 45, *((const void **)a2 + 45), *((_QWORD *)a2 + 46), (uint64_t)(*((_QWORD *)a2 + 46) - *((_QWORD *)a2 + 45)) >> 3);
  std::vector<BOOL>::vector((_QWORD *)this + 48, (uint64_t)a2 + 384);
  std::vector<BOOL>::vector((_QWORD *)this + 51, (uint64_t)a2 + 408);
  *((_OWORD *)this + 27) = xmmword_1D513AF00;
  if (*(_QWORD *)a2 && *((_QWORD *)a2 + 1))
  {
    v6 = malloc_type_malloc(4 * *((_QWORD *)this + 3), 0x100004052888210uLL);
    *(_QWORD *)this = v6;
    *((_OWORD *)this + 17) = *((_OWORD *)a2 + 17);
    memcpy(v6, *(const void **)a2, 4 * *((_QWORD *)this + 3));
    v7 = malloc_type_malloc(4 * *((_QWORD *)this + 3), 0x100004052888210uLL);
    *((_QWORD *)this + 1) = v7;
    memcpy(v7, *((const void **)a2 + 1), 4 * *((_QWORD *)this + 3));
    v8 = (const void *)*((_QWORD *)this + 28);
    if (v8)
      CFRetain(v8);
    v9 = (const void *)*((_QWORD *)this + 27);
    if (v9)
      CFRetain(v9);
  }
}

void sub_1D5073F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  if (*v8)
    operator delete(*v8);
  v10 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v1 + 368) = v10;
    operator delete(v10);
  }
  v11 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 344) = v11;
    operator delete(v11);
  }
  v12 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 320) = v12;
    operator delete(v12);
  }
  v13 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 296) = v13;
    operator delete(v13);
  }
  v14 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 256) = v14;
    operator delete(v14);
  }

  v15 = *(void **)(v1 + 88);
  if (v15)
  {
    *(_QWORD *)(v1 + 96) = v15;
    operator delete(v15);
  }
  v16 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t CRCHLatticePath::CRCHLatticePath(uint64_t a1, uint64_t a2, const void *a3, const void *a4, void *a5, int a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;

  v27 = a5;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 240) = a6;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = xmmword_1D513AF00;
  v13 = *(_QWORD *)(a2 + 248);
  v12 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 48) = v12 == 0;
  if (v12 <= **(_QWORD **)a2 - 1)
    v14 = **(_QWORD **)a2 - 1;
  else
    v14 = v12;
  *(_QWORD *)a1 = malloc_type_malloc(4 * v14 + 16, 0x100004052888210uLL);
  v15 = malloc_type_malloc(4 * (*(_QWORD *)(a1 + 440) + v14), 0x100004052888210uLL);
  v16 = 0;
  v17 = 0;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 40) = 0;
  v18 = ***(_QWORD ***)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 32);
  if (v18 > v19 + 1)
  {
    v16 = v18 + ~v19;
    *(_QWORD *)(a1 + 40) = v16;
    if (v16)
    {
      v20 = *(_DWORD **)a1;
      v21 = v18 + ~v19;
      do
      {
        *v20++ = 1;
        *v15++ = 1;
        --v21;
      }
      while (v21);
      v17 = v16;
    }
    else
    {
      v17 = 0;
    }
  }
  *(_OWORD *)(a1 + 272) = xmmword_1D513AF10;
  if (v14 != v16)
  {
    v22 = 0;
    v23 = 4 * v17;
    do
    {
      v24 = *(unsigned int *)(v13 + 4 * v22);
      *(_DWORD *)(*(_QWORD *)a1 + v23) = v24;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + v23) = CRCharacterNormalizer::normalizedCharacter(v24);
      if ((+[CRCHCharacterSetRules characterType:](CRCHCharacterSetRules, "characterType:", *(unsigned int *)(v13 + 4 * v22)) & 0x1000) != 0)
      {
        ++v22;
      }
      else
      {
        if (*(_QWORD *)(a1 + 272) == 0x7FFFFFFFFFFFFFFFLL)
          *(_QWORD *)(a1 + 272) = v22;
        *(_QWORD *)(a1 + 280) = ++v22;
      }
      v23 += 4;
    }
    while (v14 - *(_QWORD *)(a1 + 40) > v22);
  }
  objc_storeStrong((id *)(a1 + 232), a5);
  v25 = *(_QWORD *)(a1 + 440) + v14;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 224) = a4;
  if (a4)
    CFRetain(a4);
  *(_QWORD *)(a1 + 216) = a3;
  if (a3)
    CFRetain(a3);

  return a1;
}

void sub_1D50742E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;
  void **v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v17 = *(void **)(v14 + 408);
  if (v17)
    operator delete(v17);
  v18 = *(void **)(v14 + 384);
  if (v18)
    operator delete(v18);
  v19 = *(void **)(v14 + 360);
  if (v19)
  {
    *(_QWORD *)(v14 + 368) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v14 + 336);
  if (v20)
  {
    *(_QWORD *)(v14 + 344) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v14 + 312);
  if (v21)
  {
    *(_QWORD *)(v14 + 320) = v21;
    operator delete(v21);
  }
  v22 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v14 + 296) = v22;
    operator delete(v22);
  }
  v23 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v14 + 256) = v23;
    operator delete(v23);
  }

  v24 = *(void **)(v14 + 88);
  if (v24)
  {
    *(_QWORD *)(v14 + 96) = v24;
    operator delete(v24);
  }
  v25 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v14 + 72) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

uint64_t CRCHFixedHeap<double,LatticePathPtr>::insert(unsigned __int8 *a1, unint64_t a2, double a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  double *v6;
  unint64_t *v7;
  unint64_t v8;
  double *v9;
  BOOL v10;
  double *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double *v16;
  double *v17;

  v3 = *((_QWORD *)a1 + 2);
  if (a1[1])
    v4 = (unint64_t)(v3 - 1) > 0xFFFFFFFFFFFFFFFDLL;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = 0;
    v6 = (double *)(*((_QWORD *)a1 + 3) + 24);
    while (*(v6 - 1) != a3 || *(_QWORD *)v6 != a2)
    {
      --v5;
      v6 += 2;
      if (-v3 == v5)
        goto LABEL_11;
    }
    if (v5 != 2)
      return 0;
  }
LABEL_11:
  if (v3 != *((_QWORD *)a1 + 1))
  {
    v7 = (unint64_t *)*((_QWORD *)a1 + 3);
    v8 = v3 + 1;
    *((_QWORD *)a1 + 2) = v8;
    v11 = (double *)&v7[2 * v8];
    v12 = *a1;
    v10 = *a1 == 0;
    *v11 = a3;
    *((_QWORD *)v11 + 1) = a2;
    if (v12)
      goto LABEL_16;
    goto LABEL_19;
  }
  v7 = (unint64_t *)*((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v9 = (double *)&v7[2 * v8];
  if (!*a1)
  {
    if (*v9 >= a3)
      return 0;
    *v9 = a3;
    *((_QWORD *)v9 + 1) = a2;
    a2 = v7[2 * v8 + 1];
    v10 = 1;
LABEL_19:
    v13 = 0x41DFFFFFFFC00000;
    goto LABEL_20;
  }
  if (*v9 > a3)
  {
    v10 = 0;
    *v9 = a3;
    *((_QWORD *)v9 + 1) = a2;
    a2 = v7[2 * v8 + 1];
LABEL_16:
    v13 = 0xC1E0000000000000;
LABEL_20:
    *v7 = v13;
    v7[1] = 0;
    while (1)
    {
      v14 = v8;
      v8 >>= 1;
      v15 = *(double *)&v7[2 * v8];
      if (v10)
      {
        if (v15 > a3)
          goto LABEL_27;
      }
      else if (v15 < a3)
      {
LABEL_27:
        v17 = (double *)&v7[2 * v14];
        *v17 = a3;
        *((_QWORD *)v17 + 1) = a2;
        CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(a1);
        return 1;
      }
      if (v14 != v8)
      {
        v16 = (double *)&v7[2 * v14];
        *v16 = v15;
        *((_QWORD *)v16 + 1) = v7[2 * v8 + 1];
      }
    }
  }
  return 0;
}

_QWORD *CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  double *i;
  double v7;

  v1 = result[2];
  result[4] = v1;
  if (v1)
  {
    v2 = v1 - 1;
    if (v1 - 1 > v1 >> 1)
    {
      v3 = v1 >> 1;
      v4 = *(unsigned __int8 *)result;
      v5 = result[3];
      for (i = (double *)(v5 + 16 * v1 - 16); ; i -= 2)
      {
        v7 = *i;
        if (!v4)
          break;
        if (v7 > *(double *)(v5 + 16 * v1))
          goto LABEL_6;
LABEL_7:
        if (--v2 <= v3)
          return result;
      }
      if (v7 >= *(double *)(v5 + 16 * v1))
        goto LABEL_7;
LABEL_6:
      result[4] = v2;
      v1 = v2;
      goto LABEL_7;
    }
  }
  return result;
}

double CRCHLatticePath::updateWordSegmentationScoreAtNode(CRCHLatticePath *this, uint64_t a2, int a3)
{
  _QWORD *v4;
  double result;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v4 = (_QWORD *)*((_QWORD *)this + 7);
  result = *(double *)(v4[5] + 56 * a2 + 40);
  if (a3)
  {
    v6 = *v4;
    v7 = *(double *)(*v4 + 88);
    if (result >= v7)
    {
      v9 = *((double *)this + 25);
    }
    else
    {
      v8 = exp(v7 - result) + -1.0;
      if (fabs(v8) == INFINITY)
        v8 = 1.79769313e308;
      v9 = v8 + *((double *)this + 25);
    }
    v11 = *(double *)(v6 + 56);
LABEL_13:
    result = v9 + v11;
    *((double *)this + 25) = result;
    return result;
  }
  if (*((double *)this + 18) != 0.0)
  {
    v10 = *(double *)(*v4 + 112);
    if (result > v10)
    {
      v9 = exp(result - v10) + -1.0;
      if (fabs(v9) == INFINITY)
        v9 = 1.79769313e308;
      v11 = *((double *)this + 25);
      goto LABEL_13;
    }
  }
  return result;
}

void CRCHLatticePath::expandPathStringWithCharacter(CRCHLatticePath *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  BOOL v10;
  NSObject *v11;
  uint8_t v12[16];

  v4 = *((_QWORD *)this + 2);
  v5 = *(void **)this;
  if (v4 != *((_QWORD *)this + 3))
    goto LABEL_13;
  v6 = ***((_QWORD ***)this + 7) - 1;
  v7 = v6 + (v4 - v6) * *((_QWORD *)this + 54);
  *((_QWORD *)this + 3) = v7;
  v5 = malloc_type_realloc(v5, 4 * v7, 0x100004052888210uLL);
  v8 = malloc_type_realloc(*((void **)this + 1), 4 * *((_QWORD *)this + 3), 0x100004052888210uLL);
  v9 = v8;
  if (v5)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    *(_QWORD *)this = v5;
    *((_QWORD *)this + 1) = v8;
    v4 = *((_QWORD *)this + 2);
LABEL_13:
    *((_QWORD *)this + 2) = v4 + 1;
    *((_DWORD *)v5 + v4) = a2;
    *(_DWORD *)(*((_QWORD *)this + 1) + 4 * *((_QWORD *)this + 2) - 4) = CRCharacterNormalizer::normalizedCharacter(a2);
    return;
  }
  CHOSLogForCategory(0);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1D4FB8000, v11, OS_LOG_TYPE_ERROR, "Error: unable to reallocate memory for path expansion.", v12, 2u);
  }

  if (v9)
    free(v9);
  if (v5)
    free(v5);
}

void std::vector<CRCHNetworkNode>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v6[-v7] >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (void *)(v7 + 56 * a2);
      v14 = 56 * a2;
      v15 = (_BYTE *)(v7 + 48);
      do
      {
        *((_QWORD *)v15 - 1) = 0;
        *v15 = 0;
        *((_OWORD *)v15 - 3) = 0uLL;
        *((_OWORD *)v15 - 2) = 0uLL;
        *(v15 - 16) = 0;
        v15 += 56;
        v14 -= 56;
      }
      while (v14);
    }
    else
    {
      v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (uint64_t)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHNetworkNode>>(v4, v11);
    else
      v12 = 0;
    v16 = &v12[56 * v8];
    v17 = 56 * a2;
    v18 = &v16[56 * a2];
    v19 = v16 + 48;
    do
    {
      *((_QWORD *)v19 - 1) = 0;
      *v19 = 0;
      *((_OWORD *)v19 - 3) = 0uLL;
      *((_OWORD *)v19 - 2) = 0uLL;
      *(v19 - 16) = 0;
      v19 += 56;
      v17 -= 56;
    }
    while (v17);
    v20 = &v12[56 * v11];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *(_OWORD *)(v21 - 56);
        v24 = *(_OWORD *)(v21 - 40);
        v25 = *(_OWORD *)(v21 - 24);
        *(v16 - 8) = *(v21 - 8);
        *(_OWORD *)(v16 - 24) = v25;
        *(_OWORD *)(v16 - 40) = v24;
        *(_OWORD *)(v16 - 56) = v23;
        v16 -= 56;
        v21 -= 56;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::vector<NetworkEdge>::__push_back_slow_path<NetworkEdge const&>(uint64_t *a1, const NetworkEdge *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  NetworkEdge *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (NetworkEdge *)&v10[80 * v4];
  v16 = &v10[80 * v9];
  NetworkEdge::NetworkEdge(v14, a2);
  v15 = (char *)v14 + 80;
  std::vector<NetworkEdge>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1D5074AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NetworkEdge>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<NetworkEdge>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>>((uint64_t)(a1 + 2), a1[1], (const NetworkEdge *)a1[1], *a1, (const NetworkEdge *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>,std::reverse_iterator<NetworkEdge*>>(uint64_t a1, uint64_t a2, const NetworkEdge *a3, uint64_t a4, const NetworkEdge *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const NetworkEdge *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const NetworkEdge *)((char *)v9 - 80);
      NetworkEdge::NetworkEdge((NetworkEdge *)(v7 - 80), v9);
      v7 = *((_QWORD *)&v15 + 1) - 80;
      *((_QWORD *)&v15 + 1) -= 80;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1D5074C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,std::reverse_iterator<NetworkEdge*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 56);
    if (v3)
    {
      *(_QWORD *)(v1 + 64) = v3;
      operator delete(v3);
    }
    v1 += 80;
  }
}

uint64_t std::__split_buffer<NetworkEdge>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<NetworkEdge>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<NetworkEdge>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 80;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::pair<int,int> *,std::allocator<std::pair<int,int> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1D50750C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*,false>(NetworkEdge *a1, const NetworkEdge *a2, uint64_t (**a3)(NetworkEdge *, NetworkEdge *), uint64_t a4, char a5)
{
  uint64_t v9;
  const NetworkEdge *v10;
  uint64_t v11;
  uint64_t v12;
  NetworkEdge *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  NetworkEdge *v18;
  NetworkEdge *v19;
  unint64_t v20;
  BOOL v21;
  NetworkEdge *v22;
  int v23;
  unint64_t v24;
  const NetworkEdge *v25;
  uint64_t v26;
  const NetworkEdge *v27;
  NetworkEdge *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  const NetworkEdge *v40;
  uint64_t v41;
  uint64_t v42;
  const NetworkEdge *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const NetworkEdge *v51;
  const NetworkEdge *v52;
  NetworkEdge *v53;
  NetworkEdge *v54;
  NetworkEdge *v55;
  int64_t v56;
  const NetworkEdge *v58;
  _BYTE v59[56];
  void *v60;
  void *v61;
  _BYTE v62[56];
  void *__p;
  void *v64;

void sub_1D5075A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(NetworkEdge *a1, uint64_t a2)
{
  _BYTE v4[56];
  void *__p;
  void *v6;

  NetworkEdge::NetworkEdge((NetworkEdge *)v4, a1);
  NetworkEdge::operator=((uint64_t)a1, a2);
  NetworkEdge::operator=(a2, (uint64_t)v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1D5075B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(NetworkEdge *a1, NetworkEdge *a2, uint64_t a3, uint64_t (**a4)(NetworkEdge *, NetworkEdge *))
{
  char v8;
  int v9;
  NetworkEdge *v10;

  v8 = (*a4)(a2, a1);
  v9 = (*a4)((NetworkEdge *)a3, a2);
  if ((v8 & 1) != 0)
  {
    if (v9)
    {
      v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, (uint64_t)a2);
      if (!(*a4)((NetworkEdge *)a3, a2))
        return;
      v10 = a2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(v10, a3);
  }
  else if (v9)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a2, a3);
    if ((*a4)(a2, a1))
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, (uint64_t)a2);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(uint64_t a1, const NetworkEdge *a2, uint64_t (**a3)(NetworkEdge *, NetworkEdge *))
{
  unint64_t v6;
  _BOOL8 result;
  NetworkEdge *v8;
  const NetworkEdge *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v15[56];
  void *__p;
  void *v17;

  v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((*a3)((const NetworkEdge *)((char *)a2 - 80), (NetworkEdge *)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>((NetworkEdge *)a1, (uint64_t)a2 - 80);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), (uint64_t)a2 - 80, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), (NetworkEdge *)(a1 + 160), (uint64_t)a2 - 80, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), (NetworkEdge *)(a1 + 160), (NetworkEdge *)(a1 + 240), (uint64_t)a2 - 80, a3);
      return 1;
    default:
      v8 = (NetworkEdge *)(a1 + 160);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>((NetworkEdge *)a1, (NetworkEdge *)(a1 + 80), a1 + 160, a3);
      v9 = (const NetworkEdge *)(a1 + 240);
      if ((const NetworkEdge *)(a1 + 240) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v9, v8))
    {
      NetworkEdge::NetworkEdge((NetworkEdge *)v15, v9);
      v12 = v10;
      while (1)
      {
        NetworkEdge::operator=(a1 + v12 + 240, a1 + v12 + 160);
        if (v12 == -160)
          break;
        v13 = (*a3)((NetworkEdge *)v15, (NetworkEdge *)(a1 + v12 + 80));
        v12 -= 80;
        if ((v13 & 1) == 0)
        {
          v14 = a1 + v12 + 240;
          goto LABEL_12;
        }
      }
      v14 = a1;
LABEL_12:
      NetworkEdge::operator=(v14, (uint64_t)v15);
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
      if (++v11 == 8)
        return (const NetworkEdge *)((char *)v9 + 80) == a2;
    }
    v8 = v9;
    v10 += 80;
    v9 = (const NetworkEdge *)((char *)v9 + 80);
    if (v9 == a2)
      return 1;
  }
}

void sub_1D5075DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NetworkEdge::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  return a1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(NetworkEdge *a1, NetworkEdge *a2, NetworkEdge *a3, uint64_t a4, uint64_t (**a5)(NetworkEdge *, NetworkEdge *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((NetworkEdge *)a4, a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, (uint64_t)a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(NetworkEdge *a1, NetworkEdge *a2, NetworkEdge *a3, NetworkEdge *a4, uint64_t a5, uint64_t (**a6)(NetworkEdge *, NetworkEdge *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const&,NetworkEdge const&),NetworkEdge*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((NetworkEdge *)a5, a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<NetworkEdge *&,NetworkEdge *&>(a1, (uint64_t)a2);
      }
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int64_t v81;
  uint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v82 = a2 - 2;
  v85 = a2;
  v80 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = v85;
    v12 = (char *)v85 - (char *)v10;
    v13 = v85 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v85 - 1), *v8);
        if ((_DWORD)result)
        {
          v40 = *v8;
          *v8 = *(v85 - 1);
          *(v85 - 1) = v40;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v8, v8 + 1, v9, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v12 <= 191)
        {
          v41 = v8 + 1;
          v43 = v8 == v85 || v41 == v85;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v49 + 8) = *(uint64_t *)((char *)v8 + v49);
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(uint64_t *)((char *)v8 + v49 - 8));
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = (uint64_t *)((char *)v8 + v49 + 8);
                      goto LABEL_74;
                    }
                  }
                  v50 = v8;
LABEL_74:
                  *v50 = v48;
                }
                v41 = v45 + 1;
                v44 += 8;
              }
              while (v45 + 1 != v85);
            }
          }
          else if (!v43)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v41 = v8 + 1;
            }
            while (v8 + 1 != v85);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v85)
          {
            v51 = (unint64_t)(v13 - 2) >> 1;
            v83 = v51;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = v52;
                  v56 = *v55;
                  do
                  {
                    v57 = v54;
                    *v55 = *v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v8[v58];
                    if (2 * v53 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                    {
                      ++v54;
                      v58 = 2 * v53 + 2;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *v57 = v56;
                  v11 = v85;
                  v52 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v59 = (unint64_t)v12 >> 3;
            do
            {
              v60 = v11;
              v61 = 0;
              v62 = v59 - 2;
              v84 = *v8;
              if (v59 < 2)
                v62 = v59 - 1;
              v63 = v62 >> 1;
              v64 = v8;
              do
              {
                v65 = &v64[v61 + 1];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v59)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v64[v61 + 1], v64[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v65;
                    v66 = v67;
                  }
                }
                *v64 = *v65;
                v64 = v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v11 = v60 - 1;
              if (v65 == v60 - 1)
              {
                *v65 = v84;
              }
              else
              {
                *v65 = *v11;
                *v11 = v84;
                v68 = (char *)v65 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, *v65);
                  if ((_DWORD)result)
                  {
                    v71 = *v65;
                    do
                    {
                      v72 = v70;
                      *v65 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, v71);
                      v65 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v59-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v8[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v15, v8, v9, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v8, v15, v9, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v8 + 1, v15 - 1, v82, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v8 + 2, &v8[v14 + 1], v80, a3);
          v11 = v85;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v15 - 1, v15, &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && (((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v8 - 1), *v8) & 1) == 0)
        {
          v31 = *v8;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v8, *v9);
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
            {
              v32 = v10[1];
              ++v10;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v8 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v85)
                break;
              ++v33;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = v85;
          if (v10 < v85)
          {
            v34 = v85;
            do
            {
              v35 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        do
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[++v17], v18);
        while ((v19 & 1) != 0);
        v20 = &v8[v17];
        v21 = v11;
        if (v17 == 1)
        {
          v21 = v11;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = v20 - 1;
        }
        else
        {
          v24 = &v8[v17];
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v27, v18) & 1) != 0);
            do
              v28 = *--v25;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v28, v18));
          }
          while (v24 < v25);
          v29 = v24 - 1;
        }
        if (v29 != v8)
          *v8 = *v29;
        *v29 = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**,false>(v8, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 1;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v8, v29, a3);
        v10 = v29 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(v29 + 1, v85, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(*a3);
      if ((_DWORD)result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NetworkEdge const*,NetworkEdge const*),NetworkEdge const**>(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t **std::__tree<std::__value_type<unsigned long,BOOL>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,BOOL>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,BOOL>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    *((_BYTE *)v7 + 40) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

char *std::__tree<std::__value_type<CRCHuint128,int>,std::__map_value_compare<CRCHuint128,std::__value_type<CRCHuint128,int>,std::less<CRCHuint128>,true>,std::allocator<std::__value_type<CRCHuint128,int>>>::__emplace_unique_key_args<CRCHuint128,std::piecewise_construct_t const&,std::tuple<CRCHuint128 const&>,std::tuple<>>(uint64_t **a1, _DWORD *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)v5;
        v9 = (_DWORD *)v5 + 7;
        if (!CRCHuint128::operator<(a2, (_DWORD *)v5 + 7))
          break;
        v5 = *(uint64_t **)v8;
        v6 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_9;
      }
      if (!CRCHuint128::operator<(v9, a2))
        break;
      v5 = (uint64_t *)*((_QWORD *)v8 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_9:
    v10 = v8;
    v8 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v8 + 28) = *a3;
    *((_DWORD *)v8 + 11) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

void std::vector<NetworkEdge>::__assign_with_size[abi:ne180100]<NetworkEdge*,NetworkEdge*>(uint64_t a1, NetworkEdge *a2, NetworkEdge *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NetworkEdge *v14;
  NetworkEdge *v15;
  uint64_t v16;
  uint64_t i;
  void *v18;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)a1) >> 4) < a4)
  {
    if (v10)
    {
      std::vector<NetworkEdge>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x333333333333333)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v11 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x199999999999999)
      v13 = 0x333333333333333;
    else
      v13 = v12;
    std::vector<NetworkEdge>::__vallocate[abi:ne180100]((_QWORD *)a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>(v9, a2, a3, *(NetworkEdge **)(a1 + 8));
    goto LABEL_13;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 8) - v10) >> 4) < a4)
  {
    v15 = (NetworkEdge *)((char *)a2 + 16 * ((*(_QWORD *)(a1 + 8) - v10) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NetworkEdge *,NetworkEdge *,NetworkEdge *,0>((uint64_t)a2, (uint64_t)v15, v10);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>(v9, v15, a3, *(NetworkEdge **)(a1 + 8));
LABEL_13:
    *(_QWORD *)(a1 + 8) = v14;
    return;
  }
  v16 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NetworkEdge *,NetworkEdge *,NetworkEdge *,0>((uint64_t)a2, (uint64_t)a3, v10);
  for (i = *(_QWORD *)(a1 + 8); i != v16; i -= 80)
  {
    v18 = *(void **)(i - 24);
    if (v18)
    {
      *(_QWORD *)(i - 16) = v18;
      operator delete(v18);
    }
  }
  *(_QWORD *)(a1 + 8) = v16;
}

void sub_1D5076F2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1D5076F34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<NetworkEdge>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NetworkEdge>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

NetworkEdge *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<NetworkEdge>,NetworkEdge*,NetworkEdge*,NetworkEdge*>(uint64_t a1, NetworkEdge *a2, NetworkEdge *a3, NetworkEdge *this)
{
  NetworkEdge *v4;
  const NetworkEdge *v6;
  _QWORD v8[3];
  char v9;
  NetworkEdge *v10;
  NetworkEdge *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      NetworkEdge::NetworkEdge(v4, v6);
      v6 = (const NetworkEdge *)((char *)v6 + 80);
      v4 = (NetworkEdge *)((char *)v11 + 80);
      v11 = (NetworkEdge *)((char *)v11 + 80);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1D5077018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NetworkEdge>,NetworkEdge*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 80;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,NetworkEdge *,NetworkEdge *,NetworkEdge *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      NetworkEdge::operator=(a3, v5);
      v5 += 80;
      a3 += 80;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::map<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v10 = *a3;
    v9[7] = 0;
    v9[6] = 0;
    v9[4] = v10;
    v9[5] = (uint64_t)(v9 + 6);
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t std::__tree<CRCHuint128>::find<CRCHuint128>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = CRCHuint128::operator<((_DWORD *)(v3 + 28), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || CRCHuint128::operator<(a2, (_DWORD *)(v5 + 28)))
    return v2;
  return v5;
}

uint64_t *std::__tree<CRCHuint128>::__emplace_unique_key_args<CRCHuint128,CRCHuint128 const&>(uint64_t **a1, _DWORD *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t *result;
  char *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (_DWORD *)v5 + 7;
        if (!CRCHuint128::operator<(a2, (_DWORD *)v5 + 7))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      result = (uint64_t *)CRCHuint128::operator<(v9, a2);
      if (!(_DWORD)result)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_9:
    v11 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v11 + 28) = *a3;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v11);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::__map_value_compare<CRCHNodeTuple<unsigned long,unsigned long>,std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>,std::less<CRCHNodeTuple<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<CRCHNodeTuple<unsigned long,unsigned long>,unsigned long>>>::find<CRCHNodeTuple<unsigned long,unsigned long>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _BOOL4 v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  _BOOL4 v12;

  v5 = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v9 = v7 == a2;
    v8 = v7 < a2;
    if (v9)
      v8 = v4[5] < a3;
    v9 = !v8;
    if (v8)
      v10 = v4 + 1;
    else
      v10 = v4;
    if (v9)
      v6 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v6 == v3)
    return v3;
  v11 = v6[4];
  v9 = v11 == a2;
  v12 = v11 > a2;
  if (v9)
    v12 = v6[5] > a3;
  if (v12)
    return v3;
  return v6;
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *((_DWORD *)v11 + 14) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_1D507750C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::map<unsigned long long,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<int,unsigned long>,std::__map_value_compare<int,std::__value_type<int,unsigned long>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned long>>>::destroy(*((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,int>>(uint64_t **a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        return 0;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = a3;
    v11[5] = a4;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v13 = *v8;
    }
    else
    {
      v13 = v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

uint64_t std::set<int>::set[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v8 = *((_DWORD *)v5 + 7);
      v9 = v3;
      if (v7 == v3)
        goto LABEL_9;
      v10 = v6;
      v11 = v3;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 7) < v8)
      {
LABEL_9:
        if (v6)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v3;
        if (v6)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v3;
        if (!*v14)
        {
LABEL_25:
          v17 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v17 + 7) = v8;
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v13, v14, v17);
        }
      }
      else
      {
        v14 = (uint64_t **)v3;
        v13 = (uint64_t **)v3;
        if (!v6)
          goto LABEL_25;
        v15 = v6;
        while (1)
        {
          while (1)
          {
            v13 = (uint64_t **)v15;
            v16 = *((_DWORD *)v15 + 7);
            if (v16 <= v8)
              break;
            v15 = *v13;
            v14 = v13;
            if (!*v13)
              goto LABEL_25;
          }
          if (v16 >= v8)
            break;
          v15 = v13[1];
          if (!v15)
          {
            v14 = v13 + 1;
            goto LABEL_25;
          }
        }
      }
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v12 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v12);
      }
      if (v19 == v4)
        return a1;
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      v5 = v19;
    }
  }
  return a1;
}

void sub_1D50777CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<CRCHuint128>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*,false>(CRCHLatticePath *a1, const CRCHLatticePath *a2, uint64_t (**a3)(CRCHLatticePath *, CRCHLatticePath *), uint64_t a4, char a5)
{
  uint64_t v9;
  const CRCHLatticePath *v10;
  uint64_t v11;
  uint64_t v12;
  CRCHLatticePath *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  CRCHLatticePath *v18;
  CRCHLatticePath *v19;
  unint64_t v20;
  char v21;
  CRCHLatticePath *v22;
  int v23;
  unint64_t v24;
  const CRCHLatticePath *v25;
  BOOL v27;
  uint64_t v28;
  const CRCHLatticePath *v29;
  CRCHLatticePath *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const CRCHLatticePath *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const CRCHLatticePath *v55;
  CRCHLatticePath *v56;
  CRCHLatticePath *v57;
  CRCHLatticePath *v58;
  int64_t v59;
  uint64_t v61;
  _BYTE v62[448];
  _BYTE v63[456];

void sub_1D5078154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;

  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)&a70);
  _Unwind_Resume(a1);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(CRCHLatticePath *a1, uint64_t a2)
{
  _BYTE v4[448];

  CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v4, a1);
  CRCHLatticePath::operator=((uint64_t)a1, a2);
  CRCHLatticePath::operator=(a2, (uint64_t)v4);
  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v4);
}

void sub_1D507823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)&a9);
  _Unwind_Resume(a1);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(CRCHLatticePath *a1, CRCHLatticePath *a2, uint64_t a3, uint64_t (**a4)(CRCHLatticePath *, CRCHLatticePath *))
{
  char v8;
  int v9;
  CRCHLatticePath *v10;

  v8 = (*a4)(a2, a1);
  v9 = (*a4)((CRCHLatticePath *)a3, a2);
  if ((v8 & 1) != 0)
  {
    if (v9)
    {
      v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, (uint64_t)a2);
      if (!(*a4)((CRCHLatticePath *)a3, a2))
        return;
      v10 = a2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(v10, a3);
  }
  else if (v9)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a2, a3);
    if ((*a4)(a2, a1))
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, (uint64_t)a2);
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(uint64_t a1, const CRCHLatticePath *a2, uint64_t (**a3)(CRCHLatticePath *, CRCHLatticePath *))
{
  _BOOL8 v6;
  CRCHLatticePath *v7;
  const CRCHLatticePath *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v15[448];

  v6 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - a1) >> 6))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      if ((*a3)((const CRCHLatticePath *)((char *)a2 - 448), (CRCHLatticePath *)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>((CRCHLatticePath *)a1, (uint64_t)a2 - 448);
      return v6;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), (uint64_t)a2 - 448, a3);
      return v6;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), (CRCHLatticePath *)(a1 + 896), (uint64_t)a2 - 448, a3);
      return v6;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), (CRCHLatticePath *)(a1 + 896), (CRCHLatticePath *)(a1 + 1344), (uint64_t)a2 - 448, a3);
      return v6;
    default:
      v7 = (CRCHLatticePath *)(a1 + 896);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>((CRCHLatticePath *)a1, (CRCHLatticePath *)(a1 + 448), a1 + 896, a3);
      v8 = (const CRCHLatticePath *)(a1 + 1344);
      if ((const CRCHLatticePath *)(a1 + 1344) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    v7 = v8;
    v9 += 448;
    v8 = (const CRCHLatticePath *)((char *)v8 + 448);
    if (v8 == a2)
      return 1;
  }
  CRCHLatticePath::CRCHLatticePath((CRCHLatticePath *)v15, v8);
  v11 = v9;
  while (1)
  {
    CRCHLatticePath::operator=(a1 + v11 + 1344, a1 + v11 + 896);
    if (v11 == -896)
      break;
    v12 = (*a3)((CRCHLatticePath *)v15, (CRCHLatticePath *)(a1 + v11 + 448));
    v11 -= 448;
    if ((v12 & 1) == 0)
    {
      v13 = a1 + v11 + 1344;
      goto LABEL_12;
    }
  }
  v13 = a1;
LABEL_12:
  CRCHLatticePath::operator=(v13, (uint64_t)v15);
  if (++v10 != 8)
  {
    CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v15);
    goto LABEL_14;
  }
  v6 = (const CRCHLatticePath *)((char *)v8 + 448) == a2;
  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)v15);
  return v6;
}

void sub_1D5078510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CRCHLatticePath::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;

  if (a2 != a1)
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      free(v4);
      *(_QWORD *)a1 = 0;
    }
    if (*(_QWORD *)a2)
    {
      v5 = malloc_type_malloc(4 * *(_QWORD *)(a2 + 16), 0x100004052888210uLL);
      *(_QWORD *)a1 = v5;
      memcpy(v5, *(const void **)a2, 4 * *(_QWORD *)(a2 + 24));
    }
    v6 = *(void **)(a1 + 8);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)(a2 + 8))
    {
      v7 = malloc_type_malloc(4 * *(_QWORD *)(a2 + 16), 0x100004052888210uLL);
      *(_QWORD *)(a1 + 8) = v7;
      memcpy(v7, *(const void **)(a2 + 8), 4 * *(_QWORD *)(a2 + 24));
    }
    v8 = *(char **)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 64), v8, *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - (_QWORD)v8) >> 3);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    objc_storeStrong((id *)(a1 + 232), *(id *)(a2 + 232));
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>((char *)(a1 + 288), *(char **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 4);
    std::vector<_NSRange>::__assign_with_size[abi:ne180100]<_NSRange*,_NSRange*>((char *)(a1 + 312), *(char **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 4);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 336), *(char **)(a2 + 336), *(_QWORD *)(a2 + 344), (uint64_t)(*(_QWORD *)(a2 + 344) - *(_QWORD *)(a2 + 336)) >> 3);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 360), *(char **)(a2 + 360), *(_QWORD *)(a2 + 368), (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 3);
    std::vector<BOOL>::operator=((void **)(a1 + 384), a2 + 384);
    std::vector<BOOL>::operator=((void **)(a1 + 408), a2 + 408);
    std::vector<PixelPosition>::__assign_with_size[abi:ne180100]<PixelPosition*,PixelPosition*>((char *)(a1 + 248), *(char **)(a2 + 248), *(_QWORD *)(a2 + 256), (uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 3);
  }
  return a1;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(CRCHLatticePath *a1, CRCHLatticePath *a2, CRCHLatticePath *a3, uint64_t a4, uint64_t (**a5)(CRCHLatticePath *, CRCHLatticePath *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((CRCHLatticePath *)a4, a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, (uint64_t)a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(CRCHLatticePath *a1, CRCHLatticePath *a2, CRCHLatticePath *a3, CRCHLatticePath *a4, uint64_t a5, uint64_t (**a6)(CRCHLatticePath *, CRCHLatticePath *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(CRCHLatticePath const&,CRCHLatticePath const&),CRCHLatticePath*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((CRCHLatticePath *)a5, a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<CRCHLatticePath *&,CRCHLatticePath *&>(a1, (uint64_t)a2);
      }
    }
  }
}

uint64_t CRCHFixedHeap<double,NodePairPtr>::upheap(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2 + 16 * a3;
  v4 = *(double *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = -2147483650.0;
  if (!(_BYTE)result)
    v6 = 2147483650.0;
  *(double *)a2 = v6;
  *(_QWORD *)(a2 + 8) = 0;
  while (1)
  {
    v7 = a3;
    a3 >>= 1;
    v8 = *(double *)(a2 + 16 * a3);
    if (!(_BYTE)result)
      break;
    if (v4 > v8)
      goto LABEL_10;
LABEL_8:
    if (v7 != a3)
    {
      v9 = a2 + 16 * v7;
      *(double *)v9 = v8;
      *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 16 * a3 + 8);
    }
  }
  if (v4 >= v8)
    goto LABEL_8;
LABEL_10:
  v10 = a2 + 16 * v7;
  *(double *)v10 = v4;
  *(_QWORD *)(v10 + 8) = v5;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t CRCHFixedHeap<double,LatticePathPtr>::CRCHFixedHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = a2 + 2;
  v5 = (_QWORD *)operator new[]();
  *v5 = 16;
  v5[1] = v4;
  v6 = v5 + 2;
  if (v4)
    bzero(v5 + 2, 16 * a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1D826E294);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  BOOL v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  int64_t v70;
  uint64_t v71;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v67 = a2;
  v69 = a2 - 2;
  v66 = a2 - 3;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v10, v9);
        if ((_DWORD)result)
        {
          v28 = *v9;
          if (v9 != v10)
            *v9 = *v10;
          *v10 = v28;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v9, v9 + 1, v10, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v9, v9 + 1, v9 + 2, v10, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v9, v9 + 1, v9 + 2, v9 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v29 = v9 + 1;
          v30 = v9 == a2 || v29 == a2;
          v31 = v30;
          if ((a5 & 1) != 0)
          {
            if ((v31 & 1) == 0)
            {
              v32 = 0;
              v33 = v9;
              do
              {
                v34 = v33;
                v33 = v29;
                result = (*a3)(v29, v34);
                if ((_DWORD)result)
                {
                  v71 = *v33;
                  v35 = v32;
                  while (1)
                  {
                    *(uint64_t *)((char *)v9 + v35 + 8) = *(uint64_t *)((char *)v9 + v35);
                    if (!v35)
                      break;
                    v35 -= 8;
                    result = (*a3)(&v71, (uint64_t *)((char *)v9 + v35));
                    if ((result & 1) == 0)
                    {
                      v36 = (uint64_t *)((char *)v9 + v35 + 8);
                      goto LABEL_80;
                    }
                  }
                  v36 = v9;
LABEL_80:
                  a2 = v67;
                  if (v36 != &v71)
                    *v36 = v71;
                }
                v29 = v33 + 1;
                v32 += 8;
              }
              while (v33 + 1 != a2);
            }
          }
          else if ((v31 & 1) == 0)
          {
            do
            {
              v62 = v9;
              v9 = v29;
              result = (*a3)(v29, v62);
              if ((_DWORD)result)
              {
                v71 = *v9;
                v63 = v9;
                do
                {
                  v64 = v63;
                  v65 = *--v63;
                  *v64 = v65;
                  result = (*a3)(&v71, v64 - 2);
                }
                while ((result & 1) != 0);
                if (v63 != &v71)
                  *v63 = v71;
              }
              v29 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v37 = (v13 - 2) >> 1;
            v70 = v37;
            do
            {
              v38 = v37;
              if (v70 >= v37)
              {
                v39 = (2 * v37) | 1;
                v40 = &v9[v39];
                if (2 * v37 + 2 < (uint64_t)v13 && (*a3)(&v9[v39], v40 + 1))
                {
                  ++v40;
                  v39 = 2 * v38 + 2;
                }
                v41 = &v9[v38];
                result = (*a3)(v40, v41);
                a2 = v67;
                if ((result & 1) == 0)
                {
                  v71 = *v41;
                  do
                  {
                    v42 = v40;
                    if (v41 != v40)
                      *v41 = *v40;
                    if (v70 < v39)
                      break;
                    v43 = (2 * v39) | 1;
                    v40 = &v9[v43];
                    v44 = 2 * v39 + 2;
                    if (v44 < (uint64_t)v13 && (*a3)(&v9[v43], v40 + 1))
                    {
                      ++v40;
                      v43 = v44;
                    }
                    result = (*a3)(v40, &v71);
                    v41 = v42;
                    v39 = v43;
                  }
                  while (!(_DWORD)result);
                  if (v42 != &v71)
                    *v42 = v71;
                  a2 = v67;
                }
              }
              v37 = v38 - 1;
            }
            while (v38);
            v45 = (unint64_t)v12 >> 3;
            do
            {
              v46 = a2;
              v47 = 0;
              v48 = v45 - 2;
              v68 = *v9;
              if (v45 < 2)
                v48 = v45 - 1;
              v49 = v48 >> 1;
              v50 = v9;
              do
              {
                v51 = &v50[v47 + 1];
                v52 = 2 * v47;
                v47 = (2 * v47) | 1;
                v53 = v52 + 2;
                if (v52 + 2 < v45)
                {
                  result = (*a3)(v51, v51 + 1);
                  if ((_DWORD)result)
                  {
                    ++v51;
                    v47 = v53;
                  }
                }
                if (v50 != v51)
                  *v50 = *v51;
                v50 = v51;
              }
              while (v47 <= v49);
              v54 = v46 - 1;
              if (v51 == v54)
              {
                v55 = v54;
                v57 = v45 - 1;
                *v51 = v68;
              }
              else
              {
                *v51 = *v54;
                v55 = v54;
                *v54 = v68;
                v56 = (char *)v51 - (char *)v9 + 8;
                v57 = v45 - 1;
                if (v56 >= 9)
                {
                  v58 = (((unint64_t)v56 >> 3) - 2) >> 1;
                  v59 = &v9[v58];
                  result = (*a3)(v59, v51);
                  if ((_DWORD)result)
                  {
                    v71 = *v51;
                    do
                    {
                      v60 = v59;
                      if (v51 != v59)
                        *v51 = *v59;
                      if (!v58)
                        break;
                      v58 = (v58 - 1) >> 1;
                      v59 = &v9[v58];
                      result = (*a3)(v59, &v71);
                      v51 = v60;
                    }
                    while ((result & 1) != 0);
                    if (v60 != &v71)
                      *v60 = v71;
                  }
                }
              }
              v61 = v45 <= 2;
              v45 = v57;
              a2 = v55;
            }
            while (!v61);
          }
          return result;
        }
        v14 = &v9[v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(&v9[v13 >> 1], v9, v10, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v9, &v9[v13 >> 1], v10, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v9 + 1, v14 - 1, v69, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v9 + 2, &v9[(v13 >> 1) + 1], v66, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v14 - 1, &v9[v13 >> 1], &v9[(v13 >> 1) + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(v9 - 1, v9) & 1) == 0)
        {
          v71 = *v9;
          result = (*a3)(&v71, v10);
          if ((result & 1) != 0)
          {
            v11 = v9;
            a2 = v67;
            do
              result = (*a3)(&v71, ++v11);
            while ((result & 1) == 0);
          }
          else
          {
            v24 = v9 + 1;
            a2 = v67;
            do
            {
              v11 = v24;
              if (v24 >= v67)
                break;
              result = (*a3)(&v71, v24);
              v24 = v11 + 1;
            }
            while (!(_DWORD)result);
          }
          v25 = a2;
          if (v11 < a2)
          {
            v25 = a2;
            do
              result = (*a3)(&v71, --v25);
            while ((result & 1) != 0);
          }
          while (v11 < v25)
          {
            v26 = *v11;
            *v11 = *v25;
            *v25 = v26;
            do
              ++v11;
            while (!(*a3)(&v71, v11));
            do
              result = (*a3)(&v71, --v25);
            while ((result & 1) != 0);
          }
          v27 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v27;
          if (v27 != &v71)
            *v27 = v71;
          a5 = 0;
          continue;
        }
        v16 = 0;
        v71 = *v9;
        do
          ++v16;
        while (((*a3)(&v9[v16], &v71) & 1) != 0);
        v17 = &v9[v16];
        v18 = v67;
        v30 = v16 == 1;
        a2 = v67;
        if (v30)
        {
          v18 = v67;
          do
          {
            if (v17 >= v18)
              break;
            --v18;
          }
          while (((*a3)(v18, &v71) & 1) == 0);
        }
        else
        {
          do
            --v18;
          while (!(*a3)(v18, &v71));
        }
        if (v17 >= v18)
        {
          v22 = v17 - 1;
        }
        else
        {
          v19 = v17;
          v20 = v18;
          do
          {
            v21 = *v19;
            *v19 = *v20;
            *v20 = v21;
            do
              ++v19;
            while (((*a3)(v19, &v71) & 1) != 0);
            do
              --v20;
            while (!(*a3)(v20, &v71));
          }
          while (v19 < v20);
          v22 = v19 - 1;
        }
        if (v22 != v9)
          *v9 = *v22;
        if (v22 != &v71)
          *v22 = v71;
        if (v17 < v18)
        {
LABEL_34:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*,false>(v9, v22, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v22 + 1;
          continue;
        }
        v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v9, v22, a3);
        v11 = v22 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(v22 + 1, v67, a3);
        if (!(_DWORD)result)
        {
          if (v23)
            continue;
          goto LABEL_34;
        }
        a2 = v22;
        if (!v23)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v6 = a2;
  v7 = a1;
  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, v6);
  if ((v8 & 1) != 0)
  {
    v10 = *v7;
    if ((_DWORD)result)
    {
      v6 = a3;
      if (v7 == a3)
      {
LABEL_5:
        *v6 = v10;
        return result;
      }
LABEL_4:
      *v7 = *a3;
      v6 = a3;
      goto LABEL_5;
    }
    if (v7 != v6)
      *v7 = *v6;
    *v6 = v10;
    result = (*a4)(a3, v6);
    if ((_DWORD)result)
    {
      v10 = *v6;
      v7 = v6;
      if (v6 == a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *v6;
    if (v6 != a3)
      *v6 = *a3;
    *a3 = v11;
    result = (*a4)(v6, v7);
    if ((_DWORD)result)
    {
      v10 = *v7;
      a3 = v6;
      if (v7 == v6)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        if (v8 != a1)
          *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_14;
        }
      }
      v16 = a1;
LABEL_14:
      if (v16 != &v17)
        *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    if (a3 != a4)
      *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      if (a2 != a3)
        *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        if (a1 != a2)
          *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(LatticePathPtr const&,LatticePathPtr const&),LatticePathPtr*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    if (a4 != a5)
      *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      if (a3 != a4)
        *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        if (a2 != a3)
          *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          if (a1 != a2)
            *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

double *CRCHFixedHeap<double,LatticePathPtr>::remove(double *result, _QWORD *a2)
{
  double *v2;
  unint64_t v3;
  double v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  double *v15;

  v3 = a2[2];
  v2 = (double *)a2[3];
  if (!v3)
  {
    result[1] = 0.0;
    *result = *v2;
    if (v2 != result)
      result[1] = v2[1];
    return result;
  }
  result[1] = 0.0;
  v4 = v2[2];
  *result = v4;
  if (v2 + 2 != result)
    result[1] = v2[3];
  v5 = v3 - 1;
  a2[2] = v3 - 1;
  if (v3 == 1)
  {
    v6 = *((_QWORD *)v2 + 3);
    goto LABEL_9;
  }
  v7 = &v2[2 * v3];
  v4 = *v7;
  v2[2] = *v7;
  v6 = *((_QWORD *)v7 + 1);
  *((_QWORD *)v2 + 3) = v6;
  if (v3 >= 3)
  {
    v10 = *(unsigned __int8 *)a2;
    v8 = 1;
    while (1)
    {
      v11 = 2 * v8;
      if (2 * v8 >= v5)
      {
        if (!v10)
          goto LABEL_23;
      }
      else
      {
        result = (double *)(16 * (v11 | 1));
        v12 = *(double *)((char *)result + (_QWORD)v2);
        v13 = v2[4 * v8];
        if (!v10)
        {
          if (v12 > v13)
            v11 |= 1uLL;
LABEL_23:
          v14 = v2[2 * v11];
          if (v14 <= v4)
            goto LABEL_10;
          goto LABEL_24;
        }
        if (v12 < v13)
          v11 |= 1uLL;
      }
      v14 = v2[2 * v11];
      if (v14 >= v4)
        goto LABEL_10;
LABEL_24:
      if (v8 != v11)
      {
        v15 = &v2[2 * v8];
        *v15 = v14;
        v15[1] = v2[2 * v11 + 1];
      }
      v8 = v11;
      if (v11 > v5 >> 1)
      {
        v8 = v11;
        goto LABEL_10;
      }
    }
  }
LABEL_9:
  v8 = 1;
LABEL_10:
  v9 = &v2[2 * v8];
  *v9 = v4;
  *((_QWORD *)v9 + 1) = v6;
  if (a2[4] == v3)
    return (double *)CRCHFixedHeap<double,LatticePathPtr>::updateWorstKV(a2);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRCHLatticePath>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x92492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(448 * a2);
}

uint64_t std::__split_buffer<CRCHLatticePath>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 448;
    CRCHLatticePath::~CRCHLatticePath((CRCHLatticePath *)(i - 448));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D5079B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5079DE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D507AA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D507AC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D507AD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D507AE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D507AF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D507BC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1D507C2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1D507C690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;

  _Unwind_Resume(a1);
}

void sub_1D507C930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D507CC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D507CF10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D507D454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1D507D684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D507D794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D507D938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D507DAB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D507DB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D507DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D507DED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D507E04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D507E114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_atomic_property__0(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
}

char *__assign_helper_atomic_property__0(char *result, uint64_t a2)
{
  if (result != (char *)a2)
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

_QWORD *CoreRecognition::EspressoModelWrapper::EspressoModelWrapper(_QWORD *this)
{
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void CoreRecognition::EspressoModelWrapper::~EspressoModelWrapper(void **this)
{
  NSObject *v2;
  uint8_t v3[16];

  if ((CoreRecognition::EspressoModelWrapper::resetEspressoState((CoreRecognition::EspressoModelWrapper *)this) & 1) == 0)
  {
    CROSLogForCategory(0);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1D4FB8000, v2, OS_LOG_TYPE_FAULT, "EspressoModelWrapper::~EspressoModelWrapper Error destroying model", v3, 2u);
    }

  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
}

uint64_t CoreRecognition::EspressoModelWrapper::resetEspressoState(CoreRecognition::EspressoModelWrapper *this)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v6;
  __int16 v7;

  if (*((_QWORD *)this + 2))
  {
    if (espresso_plan_destroy())
    {
      CROSLogForCategory(0);
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v7 = 0;
        v3 = "EspressoModelWrapper::resetEspressoState Error destroying plan";
        v4 = (uint8_t *)&v7;
LABEL_10:
        _os_log_impl(&dword_1D4FB8000, v2, OS_LOG_TYPE_ERROR, v3, v4, 2u);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
    *((_QWORD *)this + 2) = 0;
  }
  if (*((_QWORD *)this + 1))
  {
    if (espresso_context_destroy())
    {
      CROSLogForCategory(0);
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v6 = 0;
        v3 = "EspressoModelWrapper::resetEspressoState Error destroying context";
        v4 = (uint8_t *)&v6;
        goto LABEL_10;
      }
LABEL_11:

      return 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  return 1;
}

uint64_t CoreRecognition::EspressoModelWrapper::createContext(_DWORD *a1, void *a2)
{
  id v3;
  uint64_t context;

  v3 = a2;
  if (v3 && *a1 == 5)
    espresso_device_id_for_metal_device();
  context = espresso_create_context();

  return context;
}

void sub_1D507E810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::EspressoModelWrapper::initialize(int *a1, uint64_t a2, int a3, void *a4)
{
  int v6;
  id v7;
  uint64_t Context;
  uint64_t plan;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  __int16 v24;
  __int16 v25;
  uint8_t v26[16];
  __int16 v27;
  uint8_t v28[16];
  uint8_t buf[16];
  uint8_t v30[2];

  v6 = 65552;
  v7 = a4;
  *a1 = a3;
  if (a3 == 10007 || a3 == 5)
  {
LABEL_5:
    a1[1] = v6;
    Context = CoreRecognition::EspressoModelWrapper::createContext(a1, v7);
    *((_QWORD *)a1 + 1) = Context;
    if (Context)
      goto LABEL_6;
    v13 = *a1;
    if (*a1 == 10007)
    {
      CROSLogForCategory(0);
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D4FB8000, v14, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::initialize Cannot create ANE context, fallback to MPS", buf, 2u);
      }

      *a1 = 5;
      v15 = CoreRecognition::EspressoModelWrapper::createContext(a1, v7);
      *((_QWORD *)a1 + 1) = v15;
      if (v15)
        goto LABEL_6;
      v13 = *a1;
    }
    if (v13 != 5)
      goto LABEL_19;
    CROSLogForCategory(0);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1D4FB8000, v16, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::initialize Cannot create MPS context, fallback to CPU", v28, 2u);
    }

    *(_QWORD *)a1 = 0x1002000000000;
    v17 = CoreRecognition::EspressoModelWrapper::createContext(a1, v7);
    *((_QWORD *)a1 + 1) = v17;
    if (!v17)
    {
LABEL_19:
      CROSLogForCategory(0);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v27 = 0;
        v19 = "EspressoModelWrapper::initialize Error creating context";
        v20 = (uint8_t *)&v27;
LABEL_23:
        _os_log_impl(&dword_1D4FB8000, v18, OS_LOG_TYPE_ERROR, v19, v20, 2u);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
LABEL_6:
    plan = espresso_create_plan();
    *((_QWORD *)a1 + 2) = plan;
    if (!plan)
    {
      CROSLogForCategory(0);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_1D4FB8000, v21, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::initialize Error creating plan", v26, 2u);
      }

      CoreRecognition::EspressoModelWrapper::resetEspressoState((CoreRecognition::EspressoModelWrapper *)a1);
      goto LABEL_33;
    }
    if (espresso_plan_add_network())
    {
      CROSLogForCategory(0);
      v10 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
LABEL_32:

        CoreRecognition::EspressoModelWrapper::resetEspressoState((CoreRecognition::EspressoModelWrapper *)a1);
        goto LABEL_33;
      }
      v25 = 0;
      v11 = "EspressoModelWrapper::initialize Error loading model";
      v12 = (uint8_t *)&v25;
    }
    else
    {
      if (!espresso_plan_build())
      {
        MEMORY[0x1D826E120](a1 + 10, "");
        v22 = 1;
        goto LABEL_34;
      }
      CROSLogForCategory(0);
      v10 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      v24 = 0;
      v11 = "EspressoModelWrapper::initialize Error building plan";
      v12 = (uint8_t *)&v24;
    }
    _os_log_impl(&dword_1D4FB8000, v10, OS_LOG_TYPE_ERROR, v11, v12, 2u);
    goto LABEL_32;
  }
  if (!a3)
  {
    v6 = 65568;
    goto LABEL_5;
  }
  CROSLogForCategory(0);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v30 = 0;
    v19 = "EspressoModelWrapper::initialize Unexpected computeEngine";
    v20 = v30;
    goto LABEL_23;
  }
LABEL_24:

LABEL_33:
  v22 = 0;
LABEL_34:

  return v22;
}

void sub_1D507EB48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CoreRecognition::EspressoModelWrapper::bindInput(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t v6[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  if (espresso_buffer_pack_tensor_shape())
  {
    CROSLogForCategory(0);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      v4 = "EspressoModelWrapper::setInput Error setting input buffer shape";
LABEL_7:
      _os_log_impl(&dword_1D4FB8000, v3, OS_LOG_TYPE_ERROR, v4, v6, 2u);
    }
  }
  else
  {
    *(_QWORD *)&v7 = a2;
    LODWORD(v17) = 65568;
    if (!espresso_network_bind_buffer())
      return 1;
    CROSLogForCategory(0);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      v4 = "EspressoModelWrapper::setInput Error binding input buffer";
      goto LABEL_7;
    }
  }

  return 0;
}

uint64_t CoreRecognition::EspressoModelWrapper::bindOutput(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v4;
  uint8_t v6[16];
  int v7;

  if (a4)
  {
    v7 = 0;
    espresso_blob_is_dynamic();
  }
  if (!espresso_network_bind_buffer())
    return 1;
  CROSLogForCategory(0);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D4FB8000, v4, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::bindOutput Error binding output buffer", v6, 2u);
  }

  return 0;
}

uint64_t CoreRecognition::EspressoModelWrapper::selectConfiguration(uint64_t a1, const std::string *a2)
{
  const std::string *v2;
  std::string *v4;
  char v5;
  size_t v6;
  const void *v7;
  size_t size;
  size_t v9;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  __int16 v15;
  __int16 v16;
  __int16 v17;

  v2 = a2;
  v4 = (std::string *)(a1 + 40);
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (*(char *)(a1 + 63) < 0)
  {
    v7 = *(const void **)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 63);
    v7 = (const void *)(a1 + 40);
  }
  if (v5 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v5 < 0)
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (size >= v6)
    v9 = v6;
  else
    v9 = size;
  if (memcmp(v7, a2, v9) || size != v6)
  {
    if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
    {
      CROSLogForCategory(0);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v17 = 0;
        v12 = "EspressoModelWrapper::selectConfiguration Error cleaning current plan";
        v13 = (uint8_t *)&v17;
LABEL_26:
        _os_log_impl(&dword_1D4FB8000, v11, OS_LOG_TYPE_ERROR, v12, v13, 2u);
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    if (espresso_network_select_configuration())
    {
      CROSLogForCategory(0);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v16 = 0;
        v12 = "EspressoModelWrapper::selectConfiguration Error selecting configuration";
        v13 = (uint8_t *)&v16;
        goto LABEL_26;
      }
LABEL_27:

      return 0;
    }
    if (espresso_plan_build())
    {
      CROSLogForCategory(0);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v15 = 0;
        v12 = "EspressoModelWrapper::selectConfiguration Error building Espresso plan";
        v13 = (uint8_t *)&v15;
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    std::string::operator=(v4, v2);
  }
  return 1;
}

BOOL CoreRecognition::EspressoModelWrapper::execute(CoreRecognition::EspressoModelWrapper *this)
{
  int v1;
  uint64_t error_info;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = espresso_plan_execute_sync();
  if (v1)
  {
    error_info = espresso_plan_get_error_info();
    v4 = v3;
    CROSLogForCategory(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315650;
      v8 = v4;
      v9 = 1024;
      v10 = HIDWORD(error_info);
      v11 = 1024;
      v12 = error_info;
      _os_log_impl(&dword_1D4FB8000, v5, OS_LOG_TYPE_ERROR, "EspressoModelWrapper::execute Error executing model: %s (status=%d plan_status=%d)", (uint8_t *)&v7, 0x18u);
    }

  }
  return v1 == 0;
}

void sub_1D507F2C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D507FAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1D507FEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D508026C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id a52)
{
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);

  _Block_object_dispose((const void *)(v55 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void sub_1D5080668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5080864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50809D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5080A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5080F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, void *a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1D5081770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(uint64_t result, double *a2, double *a3)
{
  double *v3;
  double *v5;
  unint64_t v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  double *v39;
  double *v40;
  double v41;
  double v42;

  if (a3 != a2)
  {
    v3 = a3;
    v5 = (double *)result;
    do
    {
      v6 = v3 - v5;
      if (v6 < 2)
        break;
      if (v6 == 3)
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v5, v5 + 1, v3 - 1);
      if (v6 == 2)
      {
        v33 = *(v3 - 1);
        v34 = *v5;
        if (v33 < *v5)
        {
          *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
      {
        while (v5 != v3 - 1)
        {
          v35 = v5++;
          if (v35 != v3 && v5 != v3)
          {
            v36 = *v35;
            v37 = *v35;
            v38 = v5;
            v39 = v35;
            v40 = v5;
            do
            {
              v41 = *v40++;
              v42 = v41;
              if (v41 < v37)
              {
                v37 = v42;
                v39 = v38;
              }
              v38 = v40;
            }
            while (v40 != v3);
            if (v39 != v35)
            {
              *v35 = *v39;
              *v39 = v36;
            }
          }
        }
        return result;
      }
      v7 = &v5[v6 >> 1];
      v8 = v3 - 1;
      result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v5, v7, v3 - 1);
      v9 = *v5;
      if (*v5 >= *v7)
      {
        v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *v5 = *v10;
            *v10 = v9;
            result = (result + 1);
            goto LABEL_13;
          }
        }
        v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8)
          return result;
        while (1)
        {
          v27 = *v5;
          do
          {
            v28 = *v22++;
            v29 = v28;
          }
          while (v27 >= v28);
          v30 = v22 - 1;
          do
          {
            v31 = *--v8;
            v32 = v31;
          }
          while (v27 < v31);
          if (v30 >= v8)
            break;
          *v30 = v32;
          *v8 = v29;
        }
        v5 = v22 - 1;
        if (v30 > a2)
          return result;
      }
      else
      {
        v10 = v3 - 1;
LABEL_13:
        v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          v16 = v5 + 1;
        }
        else
        {
          v12 = v5 + 1;
          while (1)
          {
            v13 = *v7;
            do
            {
              v14 = *v12++;
              v15 = v14;
            }
            while (v14 < v13);
            v16 = v12 - 1;
            do
            {
              v17 = *--v10;
              v18 = v17;
            }
            while (v17 >= v13);
            if (v16 >= v10)
              break;
            *v16 = v18;
            *v10 = v15;
            result = (result + 1);
            if (v16 == v7)
              v7 = v10;
          }
        }
        if (v16 != v7)
        {
          v19 = *v16;
          if (*v7 < *v16)
          {
            *v16 = *v7;
            *v7 = v19;
            result = (result + 1);
          }
        }
        if (v16 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v16 <= a2)
          {
            v24 = v16 + 1;
            while (v24 != v3)
            {
              v26 = *(v24 - 1);
              v25 = *v24++;
              if (v25 < v26)
                goto LABEL_29;
            }
          }
          else
          {
            while (v11 != v16)
            {
              v21 = *(v11 - 1);
              v20 = *v11++;
              if (v20 < v21)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          v5 = v16 + 1;
        else
          v3 = v16;
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

void sub_1D5081DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50822CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D50823F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5082440(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5082488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50824D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5082518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5082560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50825A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50825F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5082680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5082908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1D508325C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51,void *a52)
{
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;

  _Block_object_dispose((const void *)(v55 - 176), 8);
  _Block_object_dispose((const void *)(v55 - 256), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void sub_1D50836A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D50838B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5083A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5083E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5084078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D50842BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D508436C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5084434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D50844C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5084900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  objc_destroyWeak((id *)(v15 - 96));
  _Unwind_Resume(a1);
}

void sub_1D5084EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1D50851C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D5085640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D5085950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D5085BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D508602C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_1D5086564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D5086B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;
  void *v38;

  std::__tree<CRCHuint128>::destroy((uint64_t)&a21, a22);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1D5086EF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D508AA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D508B784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D508BDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  void *v41;

  _Unwind_Resume(a1);
}

void sub_1D508C108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1D508C1FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D508C2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D508C3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D508C490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D508C704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1D508C808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D508C910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D508CA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_1D508CB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1D508CC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D508CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  __cxa_guard_abort(&qword_1ED0B4780);

  _Unwind_Resume(a1);
}

void sub_1D508D0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D508D170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D508D3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D508DA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_1D508E174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1D508E46C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D508E5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D508E664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D508EB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D508EED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D508EFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5094240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D5094A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

{
  Segmenter::~Segmenter((Segmenter *)(a1 + 48));
}

void DataHandler::readLines(DataHandler *this)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfFile:encoding:error:", *((_QWORD *)this + 3), 4, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentsSeparatedByCharactersInSet:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v8);
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", (_QWORD)v12);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "fileExistsAtPath:", v9);

        if (v11)
          objc_msgSend(*((id *)this + 1), "addObject:", v9);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void sub_1D5097804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void DataHandler::parseLabels(DataHandler *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfFile:encoding:error:", *((_QWORD *)this + 3), 4, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "componentsSeparatedByCharactersInSet:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v20;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v6);
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "fileExistsAtPath:", v7);

        if (v9)
        {
          objc_msgSend(v7, "stringByDeletingPathExtension");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "lastPathComponent");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "componentsSeparatedByString:", CFSTR("_"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v12, "count") == 1)
          {
            objc_msgSend(v10, "lastPathComponent");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "componentsSeparatedByString:", CFSTR("-"));
            v14 = objc_claimAutoreleasedReturnValue();

            v12 = (void *)v14;
          }
          if (objc_msgSend(v12, "count") == 2)
          {
            v15 = 1;
          }
          else
          {
            if (objc_msgSend(v12, "count") != 4)
            {
              NSLog(CFSTR("Couldn't parse the label from: %@"), v7);
              exit(-1);
            }
            v15 = 3;
          }
          objc_msgSend(v12, "objectAtIndex:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*((id *)this + 2), "addObject:", v16);

        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v4);
  }

}

void sub_1D5097ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void DataHandler::parseLabels(id *this, NSString *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  uint64_t v16;
  void *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _BOOL4 v28;
  void *v29;
  uint64_t v30;
  id *v31;
  id obj;
  NSString *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v31 = this;
  obj = this[1];
  v3 = 0;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v35;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v35 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v6);
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "fileExistsAtPath:", v7);

        if (v9)
        {
          objc_msgSend(v7, "stringByDeletingPathExtension");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = (void *)MEMORY[0x1E0C99D80];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.plist"), v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "dictionaryWithContentsOfFile:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
          {
            if (-[NSString isEqualToString:](v33, "isEqualToString:", CFSTR("identificationNumber")))
            {
              objc_msgSend(v13, "objectForKey:", CFSTR("illegibleIdentificationNumber"));
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v15 = v14 == 0;

              if (v15)
              {
                objc_msgSend(v13, "objectForKey:", v33);
                v16 = objc_claimAutoreleasedReturnValue();

                v3 = (void *)v16;
              }
            }
            if (-[NSString isEqualToString:](v33, "isEqualToString:", CFSTR("cardholderName")))
            {
              objc_msgSend(v13, "objectForKey:", CFSTR("illegibleCardholderName"));
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = v17 == 0;

              if (v18)
              {
                objc_msgSend(v13, "objectForKey:", v33);
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "uppercaseString");
                v20 = (void *)objc_claimAutoreleasedReturnValue();

                v3 = v20;
                if (!objc_msgSend(v20, "length"))
                  NSLog(CFSTR("file: %@"), v7);
              }
            }
            if (-[NSString isEqualToString:](v33, "isEqualToString:", CFSTR("expiration"))
              && (objc_msgSend(v13, "objectForKey:", CFSTR("illegibleExpiration")),
                  v27 = (void *)objc_claimAutoreleasedReturnValue(),
                  v28 = v27 == 0,
                  v27,
                  v28))
            {
              objc_msgSend(v13, "objectForKey:", v33);
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "uppercaseString");
              v26 = (void *)objc_claimAutoreleasedReturnValue();

              if (!objc_msgSend(v26, "length"))
                NSLog(CFSTR("file: %@"), v7);
            }
            else
            {
              v26 = v3;
            }
            goto LABEL_28;
          }
          objc_msgSend(v10, "lastPathComponent");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "componentsSeparatedByString:", CFSTR("_"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v22, "count") == 1)
          {
            objc_msgSend(v10, "lastPathComponent");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "componentsSeparatedByString:", CFSTR("-"));
            v24 = objc_claimAutoreleasedReturnValue();

            v22 = (void *)v24;
          }
          if (objc_msgSend(v22, "count") == 2)
          {
            v25 = 1;
            goto LABEL_21;
          }
          if (objc_msgSend(v22, "count") == 4)
          {
            v25 = 3;
LABEL_21:
            objc_msgSend(v22, "objectAtIndex:", v25);
            v26 = (void *)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v26 = v3;
          }

LABEL_28:
          if (!v26)
          {
            NSLog(CFSTR("Couldn't parse the label from: %@"), v7);
            exit(-1);
          }
          objc_msgSend(v31[2], "addObject:", v26);

          v3 = v26;
        }
        ++v6;
      }
      while (v4 != v6);
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      v4 = v30;
    }
    while (v30);
  }

}

void sub_1D5097F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

unint64_t DataHandler::shuffleIndices(unint64_t this, int a2)
{
  unint64_t v3;
  unint64_t i;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  if (!*(_QWORD *)this)
  {
    objc_msgSend(*(id *)(this + 8), "count");
    *(_QWORD *)v3 = operator new[]();
    this = objc_msgSend(*(id *)(v3 + 8), "count");
    if (this)
    {
      for (i = 0; i < this; ++i)
      {
        v5 = *(void **)(v3 + 8);
        *(_DWORD *)(*(_QWORD *)v3 + 4 * i) = i;
        this = objc_msgSend(v5, "count");
      }
    }
  }
  if (a2)
  {
    this = objc_msgSend(*(id *)(v3 + 8), "count");
    v6 = this;
    if ((int)this >= 1)
    {
      v7 = 0;
      v8 = 4 * this;
      do
      {
        this = rand();
        *(_DWORD *)(*(_QWORD *)v3 + v7) = (int)this % v6;
        v7 += 4;
      }
      while (v8 != v7);
    }
  }
  return this;
}

void sub_1D509D0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D509E43C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D509E724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;
  void *v23;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);

  _Unwind_Resume(a1);
}

uint64_t nms::PyramidNMS<unsigned short,double,unsigned char>::operator=(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  memcpy((void *)(a1 + 984), (const void *)(a2 + 984), 0x148uLL);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 200, a2 + 200);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 248, a2 + 248);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 296, a2 + 296);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 344, a2 + 344);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 392, a2 + 392);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 440, a2 + 440);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 488, a2 + 488);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 536, a2 + 536);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 584, a2 + 584);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 632, a2 + 632);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 680, a2 + 680);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 728, a2 + 728);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 776, a2 + 776);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 824, a2 + 824);
  std::deque<std::valarray<unsigned char>>::__move_assign(a1 + 872, a2 + 872);
  std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__move_assign(a1 + 920, a2 + 920);
  std::deque<std::valarray<BOOL>>::__move_assign(a1 + 56, a2 + 56);
  std::deque<std::valarray<BOOL>>::__move_assign(a1 + 104, a2 + 104);
  std::deque<std::valarray<BOOL>>::__move_assign(a1 + 152, a2 + 152);
  return a1;
}

void sub_1D509EBCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 std::deque<nms::RectForest<unsigned short,double>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  __n128 *v52;
  __int128 v53;
  void *v54;
  __n128 result;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t i;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 20 * v6 - 1;
  v8 = a1[4];
  if (v7 != a1[5] + v8)
    goto LABEL_38;
  v9 = v8 >= 0x14;
  v10 = v8 - 20;
  if (v9)
  {
    a1[4] = v10;
    v13 = *(_QWORD *)v4;
    v11 = v4 + 8;
    v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1)
          v40 = 1;
        else
          v40 = (uint64_t)&v5[-*a1] >> 2;
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v40);
        v43 = &v41[8 * (v40 >> 2)];
        v44 = (uint64_t *)a1[1];
        v5 = v43;
        v45 = a1[2] - (_QWORD)v44;
        if (v45)
        {
          v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = 8 * (v45 >> 3);
          v47 = &v41[8 * (v40 >> 2)];
          do
          {
            v48 = *v44++;
            *(_QWORD *)v47 = v48;
            v47 += 8;
            v46 -= 8;
          }
          while (v46);
        }
        v49 = (char *)*a1;
        *a1 = v41;
        a1[1] = v43;
        a1[2] = v5;
        a1[3] = &v41[8 * v42];
        if (v49)
        {
          operator delete(v49);
          v5 = (char *)a1[2];
        }
      }
      else
      {
        v15 = v14 >> 3;
        v16 = v14 >> 3 < -1;
        v17 = (v14 >> 3) + 2;
        if (v16)
          v18 = v17;
        else
          v18 = v15 + 1;
        v19 = -(v18 >> 1);
        v20 = v18 >> 1;
        v21 = &v11[-8 * v20];
        v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          v5 = (char *)a1[1];
        }
        v23 = &v5[8 * v19];
        v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(_QWORD *)v5 = v12;
  }
  else
  {
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >= v26 >> 3)
    {
      v29 = v26 >> 2;
      if (v24 == v25)
        v30 = 1;
      else
        v30 = v29;
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v30);
      v33 = v32;
      v34 = operator new(0xFA0uLL);
      v35 = &v31[8 * v6];
      v36 = &v31[8 * v33];
      if (v6 == v33)
      {
        v37 = 8 * v6;
        if (v5 - v4 < 1)
        {
          v78 = v34;
          v79 = v37 >> 2;
          if (v5 == v4)
            v80 = 1;
          else
            v80 = v79;
          v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v80);
          v35 = &v81[8 * (v80 >> 2)];
          v36 = &v81[8 * v82];
          if (v31)
            operator delete(v31);
          v31 = v81;
          v34 = v78;
        }
        else
        {
          v38 = v37 >> 3;
          if (v38 >= -1)
            v39 = v38 + 1;
          else
            v39 = v38 + 2;
          v35 -= 8 * (v39 >> 1);
        }
      }
      *(_QWORD *)v35 = v34;
      v5 = v35 + 8;
      for (i = a1[2]; i != a1[1]; i -= 8)
      {
        if (v35 == v31)
        {
          if (v5 >= v36)
          {
            if (v36 == v31)
              v88 = 1;
            else
              v88 = (v36 - v31) >> 2;
            v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v88);
            v91 = v89;
            v35 = &v89[(2 * v88 + 6) & 0xFFFFFFFFFFFFFFF8];
            v93 = v5 - v31;
            v92 = v5 == v31;
            v5 = v35;
            if (!v92)
            {
              v5 = &v35[v93 & 0xFFFFFFFFFFFFFFF8];
              v94 = 8 * (v93 >> 3);
              v95 = v35;
              v96 = v31;
              do
              {
                v97 = *(_QWORD *)v96;
                v96 += 8;
                *(_QWORD *)v95 = v97;
                v95 += 8;
                v94 -= 8;
              }
              while (v94);
            }
            v36 = &v89[8 * v90];
            if (v31)
              operator delete(v31);
            v31 = v91;
          }
          else
          {
            v84 = (v36 - v5) >> 3;
            if (v84 >= -1)
              v85 = v84 + 1;
            else
              v85 = v84 + 2;
            v86 = v85 >> 1;
            v35 = &v31[8 * (v85 >> 1)];
            v87 = v31;
            if (v5 != v31)
            {
              memmove(v35, v31, v5 - v31);
              v87 = v5;
            }
            v5 = &v87[8 * v86];
          }
        }
        v98 = *(_QWORD *)(i - 8);
        *((_QWORD *)v35 - 1) = v98;
        v35 -= 8;
      }
      v99 = (char *)*a1;
      *a1 = v31;
      a1[1] = v35;
      a1[2] = v5;
      a1[3] = v36;
      if (v99)
      {
        operator delete(v99);
        v5 = (char *)a1[2];
      }
      goto LABEL_37;
    }
    v27 = operator new(0xFA0uLL);
    v28 = v27;
    if (v24 == v5)
    {
      if (v4 == v25)
      {
        if (v5 == v4)
          v56 = 1;
        else
          v56 = (v24 - v4) >> 2;
        v57 = 2 * v56;
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v56);
        v4 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
        v60 = (uint64_t *)a1[1];
        v61 = v4;
        v62 = a1[2] - (_QWORD)v60;
        if (v62)
        {
          v61 = &v4[v62 & 0xFFFFFFFFFFFFFFF8];
          v63 = 8 * (v62 >> 3);
          v64 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            v65 = *v60++;
            *(_QWORD *)v64 = v65;
            v64 += 8;
            v63 -= 8;
          }
          while (v63);
        }
        v66 = (char *)*a1;
        *a1 = v58;
        a1[1] = v4;
        a1[2] = v61;
        a1[3] = &v58[8 * v59];
        if (v66)
        {
          operator delete(v66);
          v4 = (char *)a1[1];
        }
      }
      *((_QWORD *)v4 - 1) = v28;
      v67 = (char *)a1[1];
      v68 = (char *)a1[2];
      a1[1] = v67 - 8;
      v69 = *((_QWORD *)v67 - 1);
      a1[1] = v67;
      if (v68 == (char *)a1[3])
      {
        v70 = (uint64_t)&v67[-*a1];
        if ((unint64_t)v67 <= *a1)
        {
          if (v68 == (char *)*a1)
            v100 = 1;
          else
            v100 = (uint64_t)&v68[-*a1] >> 2;
          v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v100);
          v103 = &v101[8 * (v100 >> 2)];
          v104 = (uint64_t *)a1[1];
          v68 = v103;
          v105 = a1[2] - (_QWORD)v104;
          if (v105)
          {
            v68 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
            v106 = 8 * (v105 >> 3);
            v107 = &v101[8 * (v100 >> 2)];
            do
            {
              v108 = *v104++;
              *(_QWORD *)v107 = v108;
              v107 += 8;
              v106 -= 8;
            }
            while (v106);
          }
          v109 = (char *)*a1;
          *a1 = v101;
          a1[1] = v103;
          a1[2] = v68;
          a1[3] = &v101[8 * v102];
          if (v109)
          {
            operator delete(v109);
            v68 = (char *)a1[2];
          }
        }
        else
        {
          v71 = v70 >> 3;
          v16 = v70 >> 3 < -1;
          v72 = (v70 >> 3) + 2;
          if (v16)
            v73 = v72;
          else
            v73 = v71 + 1;
          v74 = -(v73 >> 1);
          v75 = v73 >> 1;
          v76 = &v67[-8 * v75];
          v77 = v68 - v67;
          if (v68 != v67)
          {
            memmove(&v67[-8 * v75], v67, v68 - v67);
            v67 = (char *)a1[1];
          }
          v68 = &v76[v77];
          a1[1] = &v67[8 * v74];
          a1[2] = &v76[v77];
        }
      }
      *(_QWORD *)v68 = v69;
    }
    else
    {
      *(_QWORD *)v5 = v27;
    }
  }
  v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    v51 = 0;
  }
  else
  {
    v50 = a1[5] + a1[4];
    v51 = *(_QWORD *)&v4[8 * (v50 / 0x14)] + 200 * (v50 % 0x14);
  }
  *(_QWORD *)v51 = &off_1E98D9300;
  *(_OWORD *)(v51 + 64) = 0u;
  v52 = (__n128 *)(v51 + 64);
  *(_QWORD *)(v51 + 192) = 0;
  *(_QWORD *)(v51 + 184) = 0;
  *(_OWORD *)(v51 + 96) = 0u;
  *(_OWORD *)(v51 + 112) = 0u;
  *(_OWORD *)(v51 + 144) = 0u;
  *(_OWORD *)(v51 + 160) = 0u;
  *(_OWORD *)(v51 + 128) = 0u;
  *(_QWORD *)(v51 + 176) = v51 + 184;
  *(_OWORD *)(v51 + 80) = 0u;
  std::deque<std::valarray<double>>::__move_assign(v51 + 80, a2 + 80);
  std::deque<std::deque<std::pair<unsigned short,unsigned short>>>::__move_assign(v51 + 128, a2 + 128);
  *(_QWORD *)(v51 + 8) = *(_QWORD *)(a2 + 8);
  std::__tree<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::__map_value_compare<nms::ForestLevelType,std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>,std::less<nms::ForestLevelType>,true>,std::allocator<std::__value_type<nms::ForestLevelType,nms::RepresentationDimType>>>::__move_assign((_QWORD *)(v51 + 176), (_QWORD *)(a2 + 176));
  v53 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v51 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v51 + 32) = v53;
  *(_OWORD *)(v51 + 48) = *(_OWORD *)(a2 + 48);
  v54 = *(void **)(v51 + 64);
  if (v54)
  {
    if (*(void **)(v51 + 72) != v54)
      *(_QWORD *)(v51 + 72) = v54;
    operator delete(v54);
    v52->n128_u64[0] = 0;
    *(_QWORD *)(v51 + 72) = 0;
  }
  result = *(__n128 *)(a2 + 64);
  *v52 = result;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  ++a1[5];
  return result;
}

void sub_1D509F184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nms::RectForest<unsigned short,double>::RectForest(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *j;
  void *v88;
  __int128 v89;
  uint64_t i;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  int64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  void *v175;
  unint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  char *v188;
  char *v189;
  char *v190;
  void *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  void *v235;
  char *v236;
  char *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  int64_t v266;
  char *v267;
  unint64_t v268;
  char *v269;
  uint64_t v270;
  char *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  void *v277;
  char *v278;
  char *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  size_t v283;
  char *v284;
  char *v285;
  void *v286;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t **v291;
  _QWORD *v293;
  _QWORD *v294;
  void *v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;

  *(_OWORD *)(a1 + 64) = 0u;
  v290 = (_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  v294 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 128) = 0u;
  v293 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v3 = (uint64_t **)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)a1 = &off_1E98D9300;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&v296 = 0;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 176), 0, (uint64_t **)&v296)[5] = (uint64_t *)5;
  *(_QWORD *)&v296 = 1;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 1uLL, (uint64_t **)&v296)[5] = (uint64_t *)5;
  *(_QWORD *)&v296 = 2;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 2uLL, (uint64_t **)&v296)[5] = (uint64_t *)9;
  *(_QWORD *)&v296 = 3;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 3uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
  *(_QWORD *)&v296 = 4;
  std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v3, 4uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
  v4 = *(_QWORD *)(a1 + 120);
  v291 = v3;
  if (v4 > 4)
  {
    if (v4 != 5)
    {
      v24 = *(_QWORD *)(a1 + 112);
      v25 = *(_QWORD *)(a1 + 88);
      v26 = *(_QWORD *)(a1 + 96);
      v27 = (char *)(v25 + 8 * (v24 >> 8));
      v28 = *(_QWORD *)v27;
      v29 = v26 == v25 ? 0 : *(_QWORD *)v27 + 16 * v24;
      v30 = v29 - v28;
      v31 = (v29 - v28) >> 4;
      if (v30 < -79)
      {
        v32 = ~(-6 - v31);
        v33 = &v27[-8 * ((unint64_t)(250 - v31) >> 8)];
      }
      else
      {
        v32 = v31 + 5;
        v33 = &v27[8 * ((unint64_t)(v31 + 5) >> 8)];
      }
      v56 = *(_QWORD *)v33;
      v57 = *(_QWORD *)v33 + 16 * v32;
      v58 = v24 + v4;
      v59 = (char *)(v25 + 8 * ((v24 + v4) >> 8));
      v60 = v26 == v25 ? 0 : *(_QWORD *)v59 + 16 * v58;
      if (v57 != v60)
      {
        v61 = 32 * (v59 - v33) - ((v57 - v56) >> 4) + ((v60 - *(_QWORD *)v59) >> 4);
        if (v61 >= 1)
        {
          v62 = ((v57 - v56) >> 4) - v31 + 32 * (v33 - v27);
          if (v57 == v29)
            v63 = 0;
          else
            v63 = v62;
          v64 = std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](v27, v29, v63);
          if (v65 != v60)
          {
            v66 = v64;
            v67 = v65;
            do
            {
              std::allocator<std::valarray<double>>::destroy[abi:ne180100](v67);
              v67 += 16;
              if (v67 - *v66 == 4096)
              {
                v68 = v66[1];
                ++v66;
                v67 = v68;
              }
            }
            while (v67 != v60);
            v4 = *(_QWORD *)(a1 + 120);
          }
          *(_QWORD *)(a1 + 120) = v4 - v61;
          while ((std::deque<std::valarray<unsigned char>>::__maybe_remove_back_spare[abi:ne180100](v294, 1) & 1) != 0)
            ;
        }
      }
    }
  }
  else
  {
    v5 = *(char **)(a1 + 88);
    v6 = *(char **)(a1 + 96);
    v7 = v6 - v5;
    if (v6 == v5)
      v8 = 0;
    else
      v8 = 32 * (v6 - v5) - 1;
    v9 = 5 - v4;
    v10 = *(_QWORD *)(a1 + 112);
    v11 = v10 + v4;
    v12 = v8 - (v10 + v4);
    v13 = 5 - v4 >= v12;
    v14 = 5 - v4 - v12;
    if (v14 != 0 && v13)
    {
      if (v6 == v5)
        v15 = v14 + 1;
      else
        v15 = v14;
      if ((_BYTE)v15)
        v16 = (v15 >> 8) + 1;
      else
        v16 = v15 >> 8;
      if (v16 >= v10 >> 8)
        v17 = v10 >> 8;
      else
        v17 = v16;
      if (v16 <= v10 >> 8)
      {
        for (*(_QWORD *)(a1 + 112) = v10 - (v17 << 8); v17; --v17)
        {
          v34 = *(_QWORD **)(a1 + 88);
          v37 = *v34;
          v35 = (char *)(v34 + 1);
          v36 = v37;
          *(_QWORD *)(a1 + 88) = v35;
          if (v6 == *(char **)(a1 + 104))
          {
            v38 = (uint64_t)&v35[-*v294];
            if ((unint64_t)v35 <= *v294)
            {
              if (v6 == (char *)*v294)
                v46 = 1;
              else
                v46 = (uint64_t)&v6[-*v294] >> 2;
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v46);
              v49 = &v47[8 * (v46 >> 2)];
              v50 = *(uint64_t **)(a1 + 88);
              v6 = v49;
              v51 = *(_QWORD *)(a1 + 96) - (_QWORD)v50;
              if (v51)
              {
                v6 = &v49[v51 & 0xFFFFFFFFFFFFFFF8];
                v52 = 8 * (v51 >> 3);
                v53 = &v47[8 * (v46 >> 2)];
                do
                {
                  v54 = *v50++;
                  *(_QWORD *)v53 = v54;
                  v53 += 8;
                  v52 -= 8;
                }
                while (v52);
              }
              v55 = *(void **)(a1 + 80);
              *(_QWORD *)(a1 + 80) = v47;
              *(_QWORD *)(a1 + 88) = v49;
              *(_QWORD *)(a1 + 96) = v6;
              *(_QWORD *)(a1 + 104) = &v47[8 * v48];
              if (v55)
              {
                operator delete(v55);
                v6 = *(char **)(a1 + 96);
              }
            }
            else
            {
              v39 = v38 >> 3;
              v40 = v38 >> 3 < -1;
              v41 = (v38 >> 3) + 2;
              if (v40)
                v42 = v41;
              else
                v42 = v39 + 1;
              v43 = &v35[-8 * (v42 >> 1)];
              v44 = v6 - v35;
              if (v6 != v35)
              {
                memmove(&v35[-8 * (v42 >> 1)], v35, v6 - v35);
                v6 = *(char **)(a1 + 88);
              }
              v45 = &v6[-8 * (v42 >> 1)];
              v6 = &v43[v44];
              *(_QWORD *)(a1 + 88) = v45;
              *(_QWORD *)(a1 + 96) = &v43[v44];
            }
          }
          *(_QWORD *)v6 = v36;
          v6 = (char *)(*(_QWORD *)(a1 + 96) + 8);
          *(_QWORD *)(a1 + 96) = v6;
        }
      }
      else
      {
        v18 = v16 - v17;
        v19 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 80);
        if (v16 - v17 <= (v19 >> 3) - (v7 >> 3))
        {
          if (v18)
          {
            while (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a1 + 96))
            {
              *(_QWORD *)&v296 = operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(v294, &v296);
              --v16;
              if (!--v18)
              {
                v6 = *(char **)(a1 + 96);
                goto LABEL_104;
              }
            }
            for (i = 0; i != v18; ++i)
            {
              *(_QWORD *)&v296 = operator new(0x1000uLL);
              std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)v294, &v296);
              v6 = *(char **)(a1 + 96);
              if (&v6[-*(_QWORD *)(a1 + 88)] == (char *)8)
                v91 = 255;
              else
                v91 = 256;
              v92 = v91 + *(_QWORD *)(a1 + 112);
              *(_QWORD *)(a1 + 112) = v92;
            }
            v17 = v16;
          }
          else
          {
LABEL_104:
            v92 = *(_QWORD *)(a1 + 112);
          }
          for (*(_QWORD *)(a1 + 112) = v92 - (v17 << 8); v17; --v17)
          {
            v93 = *(_QWORD **)(a1 + 88);
            v96 = *v93;
            v94 = (char *)(v93 + 1);
            v95 = v96;
            *(_QWORD *)(a1 + 88) = v94;
            if (v6 == *(char **)(a1 + 104))
            {
              v97 = (uint64_t)&v94[-*v294];
              if ((unint64_t)v94 <= *v294)
              {
                if (v6 == (char *)*v294)
                  v104 = 1;
                else
                  v104 = (uint64_t)&v6[-*v294] >> 2;
                v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v104);
                v107 = &v105[8 * (v104 >> 2)];
                v108 = *(uint64_t **)(a1 + 88);
                v6 = v107;
                v109 = *(_QWORD *)(a1 + 96) - (_QWORD)v108;
                if (v109)
                {
                  v6 = &v107[v109 & 0xFFFFFFFFFFFFFFF8];
                  v110 = 8 * (v109 >> 3);
                  v111 = &v105[8 * (v104 >> 2)];
                  do
                  {
                    v112 = *v108++;
                    *(_QWORD *)v111 = v112;
                    v111 += 8;
                    v110 -= 8;
                  }
                  while (v110);
                }
                v113 = *(void **)(a1 + 80);
                *(_QWORD *)(a1 + 80) = v105;
                *(_QWORD *)(a1 + 88) = v107;
                *(_QWORD *)(a1 + 96) = v6;
                *(_QWORD *)(a1 + 104) = &v105[8 * v106];
                if (v113)
                {
                  operator delete(v113);
                  v6 = *(char **)(a1 + 96);
                }
              }
              else
              {
                v98 = v97 >> 3;
                v40 = v97 >> 3 < -1;
                v99 = (v97 >> 3) + 2;
                if (v40)
                  v100 = v99;
                else
                  v100 = v98 + 1;
                v101 = &v94[-8 * (v100 >> 1)];
                v102 = v6 - v94;
                if (v6 != v94)
                {
                  memmove(&v94[-8 * (v100 >> 1)], v94, v6 - v94);
                  v6 = *(char **)(a1 + 88);
                }
                v103 = &v6[-8 * (v100 >> 1)];
                v6 = &v101[v102];
                *(_QWORD *)(a1 + 88) = v103;
                *(_QWORD *)(a1 + 96) = &v101[v102];
              }
            }
            *(_QWORD *)v6 = v95;
            v6 = (char *)(*(_QWORD *)(a1 + 96) + 8);
            *(_QWORD *)(a1 + 96) = v6;
          }
        }
        else
        {
          v20 = v7 >> 3;
          v21 = v18 + (v7 >> 3);
          if (v19 >> 2 <= v21)
            v22 = v21;
          else
            v22 = v19 >> 2;
          v298 = a1 + 104;
          if (v22)
            v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v22);
          else
            v23 = 0;
          v69 = v17 << 8;
          *(_QWORD *)&v296 = v22;
          *((_QWORD *)&v296 + 1) = v22 + 8 * (v20 - v17);
          *(_QWORD *)&v297 = *((_QWORD *)&v296 + 1);
          *((_QWORD *)&v297 + 1) = v22 + 8 * v23;
          do
          {
            v295 = operator new(0x1000uLL);
            std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_back(&v296, &v295);
            --v18;
          }
          while (v18);
          if (v17)
          {
            v70 = *(_QWORD **)(a1 + 88);
            v71 = (char *)v297;
            do
            {
              if (v71 == *((char **)&v297 + 1))
              {
                v72 = (char *)*((_QWORD *)&v296 + 1);
                v73 = (void *)v296;
                if (*((_QWORD *)&v296 + 1) <= (unint64_t)v296)
                {
                  if (v71 == (char *)v296)
                    v79 = 1;
                  else
                    v79 = (uint64_t)&v71[-v296] >> 2;
                  v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v79);
                  v83 = v71 - v72;
                  v82 = v71 == v72;
                  v71 = &v80[8 * (v79 >> 2)];
                  if (!v82)
                  {
                    v71 = &v80[8 * (v79 >> 2) + (v83 & 0xFFFFFFFFFFFFFFF8)];
                    v84 = 8 * (v83 >> 3);
                    v85 = &v80[8 * (v79 >> 2)];
                    do
                    {
                      v86 = *(_QWORD *)v72;
                      v72 += 8;
                      *(_QWORD *)v85 = v86;
                      v85 += 8;
                      v84 -= 8;
                    }
                    while (v84);
                  }
                  *(_QWORD *)&v296 = v80;
                  *((_QWORD *)&v296 + 1) = &v80[8 * (v79 >> 2)];
                  *(_QWORD *)&v297 = v71;
                  *((_QWORD *)&v297 + 1) = &v80[8 * v81];
                  if (v73)
                    operator delete(v73);
                }
                else
                {
                  v74 = (uint64_t)(*((_QWORD *)&v296 + 1) - v296) >> 3;
                  if (v74 >= -1)
                    v75 = v74 + 1;
                  else
                    v75 = v74 + 2;
                  v76 = *((_QWORD *)&v296 + 1) - 8 * (v75 >> 1);
                  v77 = &v71[-*((_QWORD *)&v296 + 1)];
                  if (v71 != *((char **)&v296 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v296 + 1) - 8 * (v75 >> 1)), *((const void **)&v296 + 1), (size_t)&v71[-*((_QWORD *)&v296 + 1)]);
                    v71 = v72;
                  }
                  v78 = &v71[-8 * (v75 >> 1)];
                  v71 = &v77[v76];
                  *((_QWORD *)&v296 + 1) = v78;
                  *(_QWORD *)&v297 = &v77[v76];
                }
              }
              *(_QWORD *)v71 = *v70;
              v71 = (char *)(v297 + 8);
              *(_QWORD *)&v297 = v297 + 8;
              v70 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
              *(_QWORD *)(a1 + 88) = v70;
              --v17;
            }
            while (v17);
          }
          for (j = *(_QWORD **)(a1 + 96);
                j != *(_QWORD **)(a1 + 88);
                std::__split_buffer<std::valarray<double> *,std::allocator<std::valarray<double> *>>::push_front((uint64_t)&v296, j))
          {
            --j;
          }
          v88 = *(void **)(a1 + 80);
          v89 = v297;
          *(_OWORD *)(a1 + 80) = v296;
          *(_OWORD *)(a1 + 96) = v89;
          *(_QWORD *)(a1 + 112) -= v69;
          if (v88)
          {
            operator delete(v88);
            v6 = *(char **)(a1 + 96);
          }
          else
          {
            v6 = (char *)v89;
          }
        }
      }
      v4 = *(_QWORD *)(a1 + 120);
      v5 = *(char **)(a1 + 88);
      v11 = *(_QWORD *)(a1 + 112) + v4;
    }
    v114 = &v5[8 * (v11 >> 8)];
    if (v6 == v5)
      v115 = 0;
    else
      v115 = (char *)(*(_QWORD *)v114 + 16 * v11);
    v116 = (char *)std::__deque_iterator<std::valarray<double>,std::valarray<double>*,std::valarray<double>&,std::valarray<double>**,long,256l>::operator+[abi:ne180100](v114, (uint64_t)v115, v9);
    if (v115 != v117)
    {
      v118 = v116;
      v119 = (uint64_t)v117;
      do
      {
        if (v114 == v118)
          v120 = v119;
        else
          v120 = *(_QWORD *)v114 + 4096;
        if (v115 == (char *)v120)
        {
          v122 = v115;
        }
        else
        {
          v121 = (v120 - (_QWORD)v115) & 0xFFFFFFFFFFFFFFF0;
          bzero(v115, v121);
          v122 = &v115[v121];
          v4 = *(_QWORD *)(a1 + 120);
        }
        v4 += (v122 - v115) >> 4;
        *(_QWORD *)(a1 + 120) = v4;
        if (v114 == v118)
          break;
        v123 = (char *)*((_QWORD *)v114 + 1);
        v114 += 8;
        v115 = v123;
      }
      while (v123 != (char *)v119);
    }
  }
  v124 = *(_QWORD *)(a1 + 168);
  if (v124 > 5)
  {
    if (v124 != 6)
    {
      v143 = *(_QWORD *)(a1 + 160);
      v144 = *(_QWORD *)(a1 + 136);
      v145 = *(_QWORD *)(a1 + 144);
      v146 = (uint64_t *)(v144 + 8 * (v143 / 0x55));
      v147 = *v146;
      v148 = *v146 + 48 * (v143 % 0x55);
      if (v145 == v144)
        v148 = 0;
      v149 = v148 - v147;
      v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - v147) >> 4);
      if (v149 < -287)
      {
        v176 = 78 - v150;
        v152 = &v146[-(v176 / 0x55)];
        v153 = *v152;
        v154 = *v152 + 48 * (85 * (v176 / 0x55) - v176) + 4032;
      }
      else
      {
        v151 = v150 + 6;
        v152 = &v146[v151 / 0x55];
        v153 = *v152;
        v154 = *v152 + 48 * (v151 % 0x55);
      }
      v177 = (_QWORD *)(v144 + 8 * ((v143 + v124) / 0x55));
      if (v145 == v144)
        v178 = 0;
      else
        v178 = *v177 + 48 * ((v143 + v124) % 0x55);
      if (v154 != v178)
      {
        v179 = (uint64_t)(v154 - v153) >> 4;
        v180 = 85 * (v177 - v152) + 0x5555555555555555 * v179 - 0x5555555555555555 * ((uint64_t)(v178 - *v177) >> 4);
        if (v180 >= 1)
        {
          v181 = v147 + 48 * (v143 % 0x55);
          if (v145 == v144)
            v182 = 0;
          else
            v182 = v181;
          v183 = 85 * (v152 - v146) - 0x5555555555555555 * v179 + 0x5555555555555555 * ((v182 - v147) >> 4);
          if (v154 == v182)
            v184 = 0;
          else
            v184 = v183;
          *(_QWORD *)&v296 = v146;
          *((_QWORD *)&v296 + 1) = v182;
          std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v296, v184);
          v185 = (_QWORD *)*((_QWORD *)&v296 + 1);
          if (*((_QWORD *)&v296 + 1) != v178)
          {
            v186 = (_QWORD *)v296;
            do
            {
              v185 = (_QWORD *)(std::deque<std::pair<unsigned short,unsigned short>>::~deque[abi:ne180100](v185) + 48);
              if ((_QWORD *)((char *)v185 - *v186) == (_QWORD *)4080)
              {
                v187 = (_QWORD *)v186[1];
                ++v186;
                v185 = v187;
              }
            }
            while (v185 != (_QWORD *)v178);
            v124 = *(_QWORD *)(a1 + 168);
          }
          *(_QWORD *)(a1 + 168) = v124 - v180;
          while ((std::deque<std::deque<std::deque<std::deque<unsigned short>>>>::__maybe_remove_back_spare[abi:ne180100](v293, 1) & 1) != 0);
        }
      }
    }
  }
  else
  {
    v125 = *(char **)(a1 + 136);
    v126 = *(char **)(a1 + 144);
    v127 = (v126 - v125) >> 3;
    if (v126 == v125)
      v128 = 0;
    else
      v128 = 85 * v127 - 1;
    v129 = 6 - v124;
    v130 = *(_QWORD *)(a1 + 160);
    v131 = v130 + v124;
    v132 = v128 - (v130 + v124);
    v13 = 6 - v124 >= v132;
    v133 = 6 - v124 - v132;
    if (v133 != 0 && v13)
    {
      v289 = 6 - v124;
      if (v126 == v125)
        v134 = v133 + 1;
      else
        v134 = v133;
      if (v134 % 0x55)
        v135 = v134 / 0x55 + 1;
      else
        v135 = v134 / 0x55;
      if (v135 >= v130 / 0x55)
        v136 = v130 / 0x55;
      else
        v136 = v135;
      if (v135 <= v130 / 0x55)
      {
        for (*(_QWORD *)(a1 + 160) = v130 - 85 * v136; v136; --v136)
        {
          v155 = *(_QWORD **)(a1 + 136);
          v158 = *v155;
          v156 = (char *)(v155 + 1);
          v157 = v158;
          *(_QWORD *)(a1 + 136) = v156;
          if (v126 == *(char **)(a1 + 152))
          {
            v159 = (uint64_t)&v156[-*v293];
            if ((unint64_t)v156 <= *v293)
            {
              if (v126 == (char *)*v293)
                v166 = 1;
              else
                v166 = (uint64_t)&v126[-*v293] >> 2;
              v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v166);
              v169 = &v167[8 * (v166 >> 2)];
              v170 = *(uint64_t **)(a1 + 136);
              v126 = v169;
              v171 = *(_QWORD *)(a1 + 144) - (_QWORD)v170;
              if (v171)
              {
                v126 = &v169[v171 & 0xFFFFFFFFFFFFFFF8];
                v172 = 8 * (v171 >> 3);
                v173 = &v167[8 * (v166 >> 2)];
                do
                {
                  v174 = *v170++;
                  *(_QWORD *)v173 = v174;
                  v173 += 8;
                  v172 -= 8;
                }
                while (v172);
              }
              v175 = *(void **)(a1 + 128);
              *(_QWORD *)(a1 + 128) = v167;
              *(_QWORD *)(a1 + 136) = v169;
              *(_QWORD *)(a1 + 144) = v126;
              *(_QWORD *)(a1 + 152) = &v167[8 * v168];
              if (v175)
              {
                operator delete(v175);
                v126 = *(char **)(a1 + 144);
              }
            }
            else
            {
              v160 = v159 >> 3;
              v40 = v159 >> 3 < -1;
              v161 = (v159 >> 3) + 2;
              if (v40)
                v162 = v161;
              else
                v162 = v160 + 1;
              v163 = &v156[-8 * (v162 >> 1)];
              v164 = v126 - v156;
              if (v126 != v156)
              {
                memmove(&v156[-8 * (v162 >> 1)], v156, v126 - v156);
                v126 = *(char **)(a1 + 136);
              }
              v165 = &v126[-8 * (v162 >> 1)];
              v126 = &v163[v164];
              *(_QWORD *)(a1 + 136) = v165;
              *(_QWORD *)(a1 + 144) = &v163[v164];
            }
          }
          *(_QWORD *)v126 = v157;
          v126 = (char *)(*(_QWORD *)(a1 + 144) + 8);
          *(_QWORD *)(a1 + 144) = v126;
        }
      }
      else
      {
        v137 = v135 - v136;
        v138 = *(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 128);
        if (v135 - v136 <= (v138 >> 3) - v127)
        {
          while (1)
          {
            if (!v137)
            {
              v135 = v136;
              goto LABEL_294;
            }
            if (*(char **)(a1 + 152) == v126)
              break;
            *(_QWORD *)v126 = operator new(0xFF0uLL);
            v126 = (char *)(*(_QWORD *)(a1 + 144) + 8);
            *(_QWORD *)(a1 + 144) = v126;
            --v135;
            --v137;
          }
          do
          {
            v235 = operator new(0xFF0uLL);
            v236 = *(char **)(a1 + 136);
            if (v236 == *(char **)(a1 + 128))
            {
              v238 = *(_QWORD *)(a1 + 152);
              if ((unint64_t)v126 >= v238)
              {
                v243 = v238 - (_QWORD)v236;
                v82 = v243 == 0;
                v244 = v243 >> 2;
                if (v82)
                  v245 = 1;
                else
                  v245 = v244;
                v246 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v245);
                v237 = &v246[(2 * v245 + 6) & 0xFFFFFFFFFFFFFFF8];
                v248 = *(uint64_t **)(a1 + 136);
                v249 = v237;
                v250 = *(_QWORD *)(a1 + 144) - (_QWORD)v248;
                if (v250)
                {
                  v249 = &v237[v250 & 0xFFFFFFFFFFFFFFF8];
                  v251 = 8 * (v250 >> 3);
                  v252 = &v246[(2 * v245 + 6) & 0xFFFFFFFFFFFFFFF8];
                  do
                  {
                    v253 = *v248++;
                    *(_QWORD *)v252 = v253;
                    v252 += 8;
                    v251 -= 8;
                  }
                  while (v251);
                }
                v254 = *(void **)(a1 + 128);
                *(_QWORD *)(a1 + 128) = v246;
                *(_QWORD *)(a1 + 136) = v237;
                *(_QWORD *)(a1 + 144) = v249;
                *(_QWORD *)(a1 + 152) = &v246[8 * v247];
                if (v254)
                {
                  operator delete(v254);
                  v237 = *(char **)(a1 + 136);
                }
              }
              else
              {
                v239 = (uint64_t)(v238 - (_QWORD)v126) >> 3;
                if (v239 >= -1)
                  v240 = v239 + 1;
                else
                  v240 = v239 + 2;
                v241 = v240 >> 1;
                v242 = &v126[8 * (v240 >> 1)];
                v237 = &v242[-(v126 - v236)];
                if (v126 != v236)
                {
                  memmove(&v242[-(v126 - v236)], v236, v126 - v236);
                  v126 = *(char **)(a1 + 144);
                }
                *(_QWORD *)(a1 + 136) = v237;
                *(_QWORD *)(a1 + 144) = &v126[8 * v241];
              }
            }
            else
            {
              v237 = *(char **)(a1 + 136);
            }
            *((_QWORD *)v237 - 1) = v235;
            v126 = *(char **)(a1 + 144);
            v255 = *(_QWORD *)(a1 + 136) - 8;
            *(_QWORD *)(a1 + 136) = v255;
            if (&v126[-v255] == (char *)8)
              v256 = 84;
            else
              v256 = 85;
            v130 = v256 + *(_QWORD *)(a1 + 160);
            *(_QWORD *)(a1 + 160) = v130;
            --v137;
          }
          while (v137);
LABEL_294:
          for (*(_QWORD *)(a1 + 160) = v130 - 85 * v135; v135; --v135)
          {
            v257 = *(_QWORD **)(a1 + 136);
            v260 = *v257;
            v258 = (char *)(v257 + 1);
            v259 = v260;
            *(_QWORD *)(a1 + 136) = v258;
            if (v126 == *(char **)(a1 + 152))
            {
              v261 = (uint64_t)&v258[-*v293];
              if ((unint64_t)v258 <= *v293)
              {
                if (v126 == (char *)*v293)
                  v268 = 1;
                else
                  v268 = (uint64_t)&v126[-*v293] >> 2;
                v269 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v268);
                v271 = &v269[8 * (v268 >> 2)];
                v272 = *(uint64_t **)(a1 + 136);
                v126 = v271;
                v273 = *(_QWORD *)(a1 + 144) - (_QWORD)v272;
                if (v273)
                {
                  v126 = &v271[v273 & 0xFFFFFFFFFFFFFFF8];
                  v274 = 8 * (v273 >> 3);
                  v275 = &v269[8 * (v268 >> 2)];
                  do
                  {
                    v276 = *v272++;
                    *(_QWORD *)v275 = v276;
                    v275 += 8;
                    v274 -= 8;
                  }
                  while (v274);
                }
                v277 = *(void **)(a1 + 128);
                *(_QWORD *)(a1 + 128) = v269;
                *(_QWORD *)(a1 + 136) = v271;
                *(_QWORD *)(a1 + 144) = v126;
                *(_QWORD *)(a1 + 152) = &v269[8 * v270];
                if (v277)
                {
                  operator delete(v277);
                  v126 = *(char **)(a1 + 144);
                }
              }
              else
              {
                v262 = v261 >> 3;
                v40 = v261 >> 3 < -1;
                v263 = (v261 >> 3) + 2;
                if (v40)
                  v264 = v263;
                else
                  v264 = v262 + 1;
                v265 = &v258[-8 * (v264 >> 1)];
                v266 = v126 - v258;
                if (v126 != v258)
                {
                  memmove(&v258[-8 * (v264 >> 1)], v258, v126 - v258);
                  v126 = *(char **)(a1 + 136);
                }
                v267 = &v126[-8 * (v264 >> 1)];
                v126 = &v265[v266];
                *(_QWORD *)(a1 + 136) = v267;
                *(_QWORD *)(a1 + 144) = &v265[v266];
              }
            }
            *(_QWORD *)v126 = v259;
            v126 = (char *)(*(_QWORD *)(a1 + 144) + 8);
            *(_QWORD *)(a1 + 144) = v126;
          }
        }
        else
        {
          v139 = v138 >> 2;
          if (v139 <= v137 + v127)
            v140 = v137 + v127;
          else
            v140 = v139;
          if (v140)
          {
            v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v140);
          }
          else
          {
            v142 = 0;
            v141 = 0;
          }
          v288 = -85 * v136;
          v188 = &v142[8 * (v127 - v136)];
          v189 = &v142[8 * v141];
          v190 = v188;
          do
          {
            v191 = operator new(0xFF0uLL);
            if (v188 == v189)
            {
              if (v190 <= v142)
              {
                if (v188 == v142)
                  v196 = 1;
                else
                  v196 = (v188 - v142) >> 2;
                v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v196);
                v199 = v142;
                v200 = &v198[8 * (v196 >> 2)];
                v192 = v200;
                v201 = v188 - v190;
                if (v188 != v190)
                {
                  v192 = &v200[v201 & 0xFFFFFFFFFFFFFFF8];
                  v202 = 8 * (v201 >> 3);
                  v203 = v200;
                  do
                  {
                    v204 = *(_QWORD *)v190;
                    v190 += 8;
                    *(_QWORD *)v203 = v204;
                    v203 += 8;
                    v202 -= 8;
                  }
                  while (v202);
                }
                v189 = &v198[8 * v197];
                if (v199)
                  operator delete(v199);
                v190 = v200;
                v142 = v198;
              }
              else
              {
                v193 = (v190 - v142) >> 3;
                if (v193 >= -1)
                  v194 = v193 + 1;
                else
                  v194 = v193 + 2;
                v195 = v188;
                if (v188 != v190)
                {
                  memmove(&v190[-8 * (v194 >> 1)], v190, v188 - v190);
                  v195 = v190;
                }
                v192 = &v188[-8 * (v194 >> 1)];
                v190 = &v195[-8 * (v194 >> 1)];
                v189 = v188;
              }
            }
            else
            {
              v192 = v188;
            }
            *(_QWORD *)v192 = v191;
            v188 = v192 + 8;
            --v137;
          }
          while (v137);
          v205 = *(_QWORD **)(a1 + 136);
          if (v136)
          {
            do
            {
              if (v188 == v189)
              {
                if (v190 <= v142)
                {
                  if (v188 == v142)
                    v211 = 1;
                  else
                    v211 = (v188 - v142) >> 2;
                  v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v211);
                  v214 = v212;
                  v207 = &v212[8 * (v211 >> 2)];
                  v206 = v207;
                  v215 = v188 - v190;
                  if (v188 != v190)
                  {
                    v206 = &v207[v215 & 0xFFFFFFFFFFFFFFF8];
                    v216 = 8 * (v215 >> 3);
                    v217 = v207;
                    do
                    {
                      v218 = *(_QWORD *)v190;
                      v190 += 8;
                      *(_QWORD *)v217 = v218;
                      v217 += 8;
                      v216 -= 8;
                    }
                    while (v216);
                  }
                  v188 = &v212[8 * v213];
                  if (v142)
                    operator delete(v142);
                  v142 = v214;
                }
                else
                {
                  v208 = (v190 - v142) >> 3;
                  if (v208 >= -1)
                    v209 = v208 + 1;
                  else
                    v209 = v208 + 2;
                  v210 = v188;
                  if (v188 != v190)
                  {
                    memmove(&v190[-8 * (v209 >> 1)], v190, v188 - v190);
                    v210 = v190;
                  }
                  v206 = &v188[-8 * (v209 >> 1)];
                  v207 = &v210[-8 * (v209 >> 1)];
                }
              }
              else
              {
                v206 = v188;
                v207 = v190;
                v188 = v189;
              }
              v189 = v188;
              *(_QWORD *)v206 = *v205;
              v126 = v206 + 8;
              v205 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
              *(_QWORD *)(a1 + 136) = v205;
              v188 = v126;
              v190 = v207;
              --v136;
            }
            while (v136);
          }
          else
          {
            v126 = v192 + 8;
            v207 = v190;
          }
          v219 = *(_QWORD **)(a1 + 144);
          if (v219 != v205)
          {
            do
            {
              if (v207 == v142)
              {
                if (v126 >= v189)
                {
                  if (v189 == v142)
                    v224 = 1;
                  else
                    v224 = (v189 - v142) >> 2;
                  v225 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,int>>>(v224);
                  v227 = v225;
                  v207 = &v225[(2 * v224 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v228 = v126 - v142;
                  v82 = v126 == v142;
                  v126 = v207;
                  if (!v82)
                  {
                    v126 = &v207[v228 & 0xFFFFFFFFFFFFFFF8];
                    v229 = 8 * (v228 >> 3);
                    v230 = v207;
                    v231 = v142;
                    do
                    {
                      v232 = *(_QWORD *)v231;
                      v231 += 8;
                      *(_QWORD *)v230 = v232;
                      v230 += 8;
                      v229 -= 8;
                    }
                    while (v229);
                  }
                  v189 = &v225[8 * v226];
                  if (v142)
                    operator delete(v142);
                  v142 = v227;
                }
                else
                {
                  v220 = (v189 - v126) >> 3;
                  if (v220 >= -1)
                    v221 = v220 + 1;
                  else
                    v221 = v220 + 2;
                  v222 = v221 >> 1;
                  v207 = &v142[8 * (v221 >> 1)];
                  v223 = v142;
                  if (v126 != v142)
                  {
                    memmove(v207, v142, v126 - v142);
                    v223 = v126;
                  }
                  v126 = &v223[8 * v222];
                }
              }
              v233 = *--v219;
              *((_QWORD *)v207 - 1) = v233;
              v207 -= 8;
            }
            while (v219 != *(_QWORD **)(a1 + 136));
          }
          v234 = *(void **)(a1 + 128);
          *(_QWORD *)(a1 + 128) = v142;
          *(_QWORD *)(a1 + 136) = v207;
          *(_QWORD *)(a1 + 144) = v126;
          *(_QWORD *)(a1 + 152) = v189;
          *(_QWORD *)(a1 + 160) += v288;
          if (v234)
          {
            operator delete(v234);
            v126 = *(char **)(a1 + 144);
          }
        }
      }
      v124 = *(_QWORD *)(a1 + 168);
      v125 = *(char **)(a1 + 136);
      v131 = *(_QWORD *)(a1 + 160) + v124;
      v129 = v289;
    }
    v278 = &v125[8 * (v131 / 0x55)];
    if (v126 == v125)
      v279 = 0;
    else
      v279 = (char *)(*(_QWORD *)v278 + 48 * (v131 % 0x55));
    *(_QWORD *)&v296 = &v125[8 * (v131 / 0x55)];
    *((_QWORD *)&v296 + 1) = v279;
    std::__deque_iterator<std::deque<std::pair<unsigned short,unsigned short>>,std::deque<std::pair<unsigned short,unsigned short>>*,std::deque<std::pair<unsigned short,unsigned short>>&,std::deque<std::pair<unsigned short,unsigned short>>**,long,85l>::operator+=[abi:ne180100](&v296, v129);
    v280 = *((_QWORD *)&v296 + 1);
    if (v279 != *((char **)&v296 + 1))
    {
      v281 = (char *)v296;
      do
      {
        if (v278 == v281)
          v282 = v280;
        else
          v282 = *(_QWORD *)v278 + 4080;
        if (v279 == (char *)v282)
        {
          v284 = v279;
        }
        else
        {
          v283 = 48 * ((v282 - (uint64_t)v279 - 48) / 0x30uLL) + 48;
          bzero(v279, v283);
          v284 = &v279[v283];
          v124 = *(_QWORD *)(a1 + 168);
        }
        v124 -= 0x5555555555555555 * ((v284 - v279) >> 4);
        *(_QWORD *)(a1 + 168) = v124;
        if (v278 == v281)
          break;
        v285 = (char *)*((_QWORD *)v278 + 1);
        v278 += 8;
        v279 = v285;
      }
      while (v285 != (char *)v280);
    }
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v286 = *(void **)(a1 + 64);
  if (v286)
  {
    if (*(void **)(a1 + 72) != v286)
      *(_QWORD *)(a1 + 72) = v286;
    operator delete(v286);
    *v290 = 0;
    v290[1] = 0;
  }
  if (!a2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)&v296 = 0;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 0, (uint64_t **)&v296)[5] = (uint64_t *)5;
    *(_QWORD *)&v296 = 1;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 1uLL, (uint64_t **)&v296)[5] = (uint64_t *)5;
    *(_QWORD *)&v296 = 2;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 2uLL, (uint64_t **)&v296)[5] = (uint64_t *)9;
    *(_QWORD *)&v296 = 3;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 3uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
    *(_QWORD *)&v296 = 4;
    std::__tree<std::__value_type<unsigned long,double>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,double>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,double>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v291, 4uLL, (uint64_t **)&v296)[5] = (uint64_t *)8;
  }
  return a1;
}

