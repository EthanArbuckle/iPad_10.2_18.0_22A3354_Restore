void sub_212F4F118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::~ChecksumScheduler((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t details::udif_verify::create_execution_contexts@<X0>(details::udif_verify *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  unint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  details::udif_verify *v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  __int128 v56;
  const void *v57;
  std::__shared_weak_count *v58;
  BackendInternalBackend *v59[2];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;

  v8 = a5;
  v62 = a2;
  result = ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::ContextAllocator(a5, a4);
  if (a4)
  {
    v10 = 0;
    v11 = a4;
    v52 = this;
    v53 = v8;
    do
    {
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 136))(*(_QWORD *)this);
      v61 = v12;
      v59[1] = 0;
      v60 = 0uLL;
      v59[0] = 0;
      if ((DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::is_simple(*(_QWORD *)this) & 1) == 0)
      {
        v13 = *(std::__shared_weak_count **)(v12 + 48);
        v57 = *(const void **)(v12 + 40);
        v58 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        v16 = *(_QWORD **)(v12 + 16);
        if (v16 != (_QWORD *)(v12 + 24))
        {
          do
          {
            if (v59[0])
            {
              if (!(_QWORD)v60)
              {
                BackendInternalBackend::getContext(v59[0]);
                v17 = v56;
                v56 = 0uLL;
                v18 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
                v60 = v17;
                if (v18)
                {
                  v19 = (unint64_t *)&v18->__shared_owners_;
                  do
                    v20 = __ldaxr(v19);
                  while (__stlxr(v20 - 1, v19));
                  if (!v20)
                  {
                    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                    std::__shared_weak_count::__release_weak(v18);
                  }
                }
                v21 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
                if (*((_QWORD *)&v56 + 1))
                {
                  v22 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
                  do
                    v23 = __ldaxr(v22);
                  while (__stlxr(v23 - 1, v22));
                  if (!v23)
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                }
              }
            }
            else
            {
              LODWORD(v63) = 1;
              v55 = a3 != 1;
              std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,void>((uint64_t)&v57, &v62, (int *)&v63, (unsigned __int8 *)&v55, &v56);
              v24 = v56;
              v56 = 0uLL;
              v25 = (std::__shared_weak_count *)v59[1];
              *(_OWORD *)v59 = v24;
              if (v25)
              {
                v26 = (unint64_t *)&v25->__shared_owners_;
                do
                  v27 = __ldaxr(v26);
                while (__stlxr(v27 - 1, v26));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
              }
              v28 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
              if (*((_QWORD *)&v56 + 1))
              {
                v29 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
              std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v60, (uint64_t *)v59);
            }
            if (a3 == 1 || (const void *)v16[5] == v57)
            {
              v54 = *((_DWORD *)v16 + 8);
              v56 = v60;
              if (*((_QWORD *)&v60 + 1))
              {
                v36 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
                do
                  v37 = __ldxr(v36);
                while (__stxr(v37 + 1, v36));
              }
              v63 = &v54;
              v38 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>((uint64_t **)(v12 + 16), &v54, (uint64_t)&std::piecewise_construct, &v63);
              std::shared_ptr<DiskImage>::operator=[abi:ne180100](v38 + 5, (uint64_t *)&v56);
              v33 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
              if (!*((_QWORD *)&v56 + 1))
                goto LABEL_48;
              v39 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
              do
                v35 = __ldaxr(v39);
              while (__stlxr(v35 - 1, v39));
            }
            else
            {
              v56 = v60;
              if (*((_QWORD *)&v60 + 1))
              {
                v31 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
                do
                  v32 = __ldxr(v31);
                while (__stxr(v32 + 1, v31));
              }
              replace_internal_backend((uint64_t)(v16 + 5), &v57, (uint64_t *)&v56);
              v33 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
              if (!*((_QWORD *)&v56 + 1))
                goto LABEL_48;
              v34 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
            }
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
LABEL_48:
            v40 = (_QWORD *)v16[1];
            if (v40)
            {
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD *)v16[2];
                v42 = *v41 == (_QWORD)v16;
                v16 = v41;
              }
              while (!v42);
            }
            v16 = v41;
          }
          while (v41 != (_QWORD *)(v12 + 24));
        }
        *(_BYTE *)(v12 + 56) = 0;
        v43 = v58;
        this = v52;
        v8 = v53;
        v11 = a4;
        if (v58)
        {
          v44 = (unint64_t *)&v58->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::emplace_back(v8, &v61, &v60);
      v46 = (std::__shared_weak_count *)v59[1];
      if (v59[1])
      {
        v47 = (unint64_t *)((char *)v59[1] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      result = v61;
      v61 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

void sub_212F4F580(_Unwind_Exception *a1)
{
  uint64_t v1;

  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::is_simple(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL8 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD **)(a1 + 168);
  v2 = (_QWORD *)(a1 + 176);
  if (v1 == (_QWORD *)(a1 + 176))
    return 1;
  do
  {
    get_sink_backend((uint64_t)(v1 + 5), &v13);
    v3 = v1[5];
    v5 = v13;
    v4 = v14;
    v6 = v3 == v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v3 != v5)
      break;
    v9 = (_QWORD *)v1[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v1[2];
        v11 = *v10 == (_QWORD)v1;
        v1 = v10;
      }
      while (!v11);
    }
    v1 = v10;
  }
  while (v10 != v2);
  return v6;
}

void BackendInternalBackend::getContext(BackendInternalBackend *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 72))(&v5);
  (*(void (**)(BackendInternalBackend *, uint64_t *))(*(_QWORD *)this + 176))(this, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_212F4F758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::emplace_back(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *result;

  v6 = operator new();
  v7 = *a2;
  *a2 = 0;
  v8 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v6 = v7;
  *(_OWORD *)(v6 + 8) = v8;
  v10 = *(uint64_t **)(a1 + 16);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = ((uint64_t)v10 - v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v14 = v9 - v12;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](a1 + 24, v16);
    else
      v17 = 0;
    v18 = (uint64_t *)&v17[8 * v13];
    v19 = &v17[8 * v16];
    *v18 = v6;
    v11 = v18 + 1;
    v21 = *(char **)(a1 + 8);
    v20 = *(char **)(a1 + 16);
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = *(char **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v6;
    v11 = v10 + 1;
  }
  *(_QWORD *)(a1 + 16) = v11;
  result = v11 - 1;
  ++*(_DWORD *)a1;
  return result;
}

uint64_t details::udif_verify::calculate_checksums(int32x2_t *this, workqueue::workqueue *a2)
{
  uint64_t (**resources)(system_properties::$_2 *__hidden);
  system_properties::$_2 *v5;
  unint64_t sig;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  udif::details::UDIF_base *v11;
  uint64_t runs_iterator;
  _QWORD *v13;
  _QWORD *v14;
  __int32 v15;
  __int32 v16;
  int is_simple;
  int v18;
  int32x2_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  BOOL v47;
  int32x2_t v48;
  int32x2_t i;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD v58[5];
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unsigned int *v67;
  int32x2_t v68;
  int v69;
  char v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t v75[2];
  char v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  dispatch_group_t v87[18];
  _BYTE v88[152];
  std::condition_variable v89[3];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  resources = system_properties::get_resources((system_properties *)this);
  v57 = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)this + 24))(*this);
  v5 = (system_properties::$_2 *)(*(_QWORD *(**)(std::condition_variable *__return_ptr))(**(_QWORD **)this
                                                                                                  + 72))(v89);
  if (v89[0].__cv_.__sig <= (unint64_t)resources[2] / v57 * v57)
    sig = (unint64_t)resources[2] / v57 * v57;
  else
    sig = v89[0].__cv_.__sig;
  v7 = *((_DWORD *)resources + 2);
  if (v7 == 1)
  {
    v8 = (*resources)(v5);
  }
  else
  {
    if (v7)
      std::__throw_bad_variant_access[abi:ne180100]();
    v8 = *(_DWORD *)resources;
  }
  v9 = (unint64_t)resources[3] / sig;
  if (v8 < v9)
    LODWORD(v9) = v8;
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  (*(void (**)(std::condition_variable *__return_ptr))(**(_QWORD **)this + 72))(v89);
  v56 = *(_QWORD *)&v89[0].__cv_.__opaque[8] + sig;
  BufferAllocator::BufferAllocator((BufferAllocator *)v89, *(_QWORD *)&v89[0].__cv_.__opaque[8] + sig, 0, v10);
  v85 = 0;
  v86 = 0;
  v11 = (udif::details::UDIF_base *)this[1];
  runs_iterator = udif::details::UDIF_base::create_runs_iterator(v11);
  v55 = v13;
  v14 = (_QWORD *)runs_iterator;
  if (this[35].i32[1])
  {
    v15 = details::udif_verify::populate_csum_data((uint64_t)this, (_QWORD *)v11 + 4);
    this[35].i32[1] = v15;
  }
  else
  {
    v15 = 0;
  }
  v16 = this[35].i32[0];
  is_simple = DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::is_simple((uint64_t)*this);
  if (is_simple)
  {
    this[35] = (int32x2_t)vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32(this[35]));
    v18 = 2;
  }
  else
  {
    v18 = v16 | v15;
  }
  details::udif_verify::create_execution_contexts((details::udif_verify *)this, v56, v18, v10, (uint64_t)v88);
  workqueue::workqueue::create_transaction(a2, v10, (uint64_t)v87);
  v19 = this[9];
  v84 = 0;
  v20 = (_QWORD *)*((_QWORD *)v11 + 4);
  if (v20 != (_QWORD *)((char *)v11 + 40) && v14 != v55)
  {
    v21 = (v57 + sig - 1) / v57;
    while ((unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v20[6] & 1) + v20[5] - 1)
    {
LABEL_23:
      v22 = (_QWORD *)v20[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v20[2];
          v47 = *v23 == (_QWORD)v20;
          v20 = v23;
        }
        while (!v47);
      }
      if (v23 != (_QWORD *)((char *)v11 + 40))
      {
        *(_QWORD *)&v19 += 184;
        v20 = v23;
        if (v14 != v55)
          continue;
      }
      goto LABEL_83;
    }
    v24 = v14;
    while (1)
    {
      v79 = *((_OWORD *)v20 + 2);
      v80 = v20[6];
      boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v79, v24 + 4, (uint64_t)&v81);
      v25 = v81;
      if ((v83 & 2) == 0)
        v25 = v81 + 1;
      if (v25 <= (unint64_t)(v83 & 1) + v82 - 1)
        break;
LABEL_69:
      v46 = (_QWORD *)v24[1];
      if (v46)
      {
        do
        {
          v14 = v46;
          v46 = (_QWORD *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v24[2];
          v47 = *v14 == (_QWORD)v24;
          v24 = v14;
        }
        while (!v47);
      }
      v47 = (unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v20[6] & 1) + v20[5] - 1 || v14 == v55;
      v24 = v14;
      if (v47)
        goto LABEL_23;
    }
    while (!atomic_load(&v84))
    {
      v27 = v25 + v21;
      v75[0] = v25;
      v75[1] = v25 + v21;
      v76 = 2;
      boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>(v75, &v81, (uint64_t)&v77);
      if (v18 == 1)
      {
        v73 = v85;
        v74 = v86;
        if (v86)
        {
          p_shared_owners = (unint64_t *)&v86->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
      }
      else
      {
        BufferAllocator::allocate(v89, &v73);
      }
      ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate((uint64_t)v88, &v71);
      v58[0] = MEMORY[0x24BDAC760];
      v58[1] = 1174405120;
      v58[2] = ___ZN7details11udif_verify19calculate_checksumsERN9workqueue9workqueueE_block_invoke;
      v58[3] = &__block_descriptor_tmp_4;
      v59 = v77;
      v60 = v78;
      v58[4] = this;
      v61 = v57;
      v62 = v73;
      v63 = v74;
      if (v74)
      {
        v30 = (unint64_t *)&v74->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v64 = v56;
      v65 = v71;
      v66 = v72;
      if (v72)
      {
        v32 = (unint64_t *)&v72->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v69 = v18;
      v67 = &v84;
      v68 = v19;
      v70 = is_simple;
      workqueue::transaction::add(v87, v58);
      v34 = v66;
      if (v66)
      {
        v35 = (unint64_t *)&v66->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v63;
      if (v63)
      {
        v38 = (unint64_t *)&v63->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v72;
      if (v72)
      {
        v41 = (unint64_t *)&v72->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v74;
      if (v74)
      {
        v44 = (unint64_t *)&v74->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v25 = v27;
      if (v27 > (unint64_t)(v83 & 1) + v82 - 1)
        goto LABEL_69;
    }
    v48 = this[9];
    for (i = this[10]; *(_QWORD *)&v48 != *(_QWORD *)&i; *(_QWORD *)&v48 += 184)
    {
      *(_BYTE *)(*(_QWORD *)&v48 + 176) = 1;
      ExecutionSchedulerSortedConsecutiveIt<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,locks::Std,boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>::abort(*(_QWORD *)&v48 + 16);
    }
    this[34].i8[0] = 1;
    ExecutionSchedulerSortedConsecutiveIt<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,locks::Std,boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>::abort((uint64_t)&this[14]);
  }
LABEL_83:
  v50 = atomic_load(&v84);
  workqueue::transaction::~transaction((workqueue::transaction *)v87);
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator((uint64_t)v88);
  v51 = v86;
  if (v86)
  {
    v52 = (unint64_t *)&v86->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  BufferAllocator::~BufferAllocator((BufferAllocator *)v89);
  return v50;
}

void sub_212F4FEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  workqueue::transaction::~transaction((workqueue::transaction *)&a54);
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator((uint64_t)&a72);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  BufferAllocator::~BufferAllocator((BufferAllocator *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

double boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>@<D0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned __int8 v17;
  double result;
  int v19;
  uint64_t v20;

  v3 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v3 == 3)
    {
      v5 = *a1;
      v4 = a1[1];
      if (v4 < *a1)
        goto LABEL_31;
    }
    else
    {
      v5 = *a1;
      v4 = a1[1];
      if (*a1 >= v4)
        goto LABEL_31;
    }
  }
  else
  {
    v5 = *a1;
    v4 = a1[1];
    if (*a1 >= v4 || *a1 + 1 >= v4)
      goto LABEL_31;
  }
  v7 = *((unsigned __int8 *)a2 + 16);
  if (!*((_BYTE *)a2 + 16))
  {
    v9 = *a2;
    v8 = a2[1];
    if (*a2 < v8 && *a2 + 1 < v8)
      goto LABEL_15;
    goto LABEL_31;
  }
  if (v7 == 3)
  {
    v9 = *a2;
    v8 = a2[1];
    if (v8 >= *a2)
      goto LABEL_15;
LABEL_31:
    if ((v17 & 1) == 0)
    {
      v20 = a3;
      a3 = v20;
      if (v19)
      {
        *(_QWORD *)&boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value = boost::icl::identity_element<unsigned long long>::value(void)::_value;
        *((_QWORD *)&boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value
        + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
        LOBYTE(qword_254B6C708) = 2;
        a3 = v20;
      }
    }
    result = *(double *)&boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value;
    *(_OWORD *)a3 = boost::icl::identity_element<boost::icl::discrete_interval<unsigned long long,std::less>>::value(void)::_value;
    *(_QWORD *)(a3 + 16) = qword_254B6C708;
    return result;
  }
  v9 = *a2;
  v8 = a2[1];
  if (*a2 >= v8)
    goto LABEL_31;
LABEL_15:
  v10 = v3 & 2;
  if ((v3 & 2) != 0)
    v11 = v5;
  else
    v11 = v5 + 1;
  v12 = v7 & 2;
  if ((v7 & 2) != 0)
    v13 = v9;
  else
    v13 = v9 + 1;
  v14 = v3 & 1;
  v15 = v7 & 1;
  if (v11 < v13)
  {
    v5 = v9;
    v10 = v12;
  }
  if (v4 + v14 - 1 >= v8 + v15 - 1)
  {
    v4 = v8;
    LOBYTE(v14) = v15;
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v14 | v10;
  return result;
}

void ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 144))
    v6 = v5 == v4;
  else
    v6 = 0;
  if (v6)
  {
    v13 = 0;
    v12 = 0uLL;
    ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::emplace_back(a1, &v13, &v12);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v4 = *(_QWORD *)(a1 + 16);
  }
  else if (v5 == v4)
  {
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
      v4 = *(_QWORD *)(a1 + 16);
    }
    while (*(_QWORD *)(a1 + 8) == v4);
  }
  v11 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(a1 + 16) = v4 - 8;
  std::shared_ptr<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>::shared_ptr[abi:ne180100]<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>)#1},void>(a2, v11, a1);
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_212F501A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  uint64_t v15;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v15 = a12;
  a12 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void ___ZN7details11udif_verify19calculate_checksumsERN9workqueue9workqueueE_block_invoke(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  DiskImage::Context **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned int *v115;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  int v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  _BYTE v132[32];
  void *__p;
  uint64_t v134;
  uint64_t v135;
  _BYTE v136[72];
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = (*(_QWORD *)(a1 + 48) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v5;
  if ((v2 & 2) != 0)
    v7 = *(_QWORD *)(a1 + 40);
  else
    v7 = v3 + 1;
  v8 = v7 * v5;
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v119 = *(_QWORD *)(a1 + 72);
  v120 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v121 = v6;
  v122 = v8;
  v123 = v9;
  v124 = 0;
  v13 = *(DiskImage::Context ***)(a1 + 96);
  sg_vec_ns::make(&v119, (uint64_t *)&v131);
  sg_vec_ref::begin((sg_vec_ref *)v136, (uint64_t)&v128);
  sg_vec_ref::end((sg_vec_ref *)v136, (uint64_t)&v125);
  v14 = DiskImage::Context::read(*v13, (const sg_vec_ns::details::sg_vec_iterator *)&v128, (const sg_vec_ns::details::sg_vec_iterator *)&v125);
  v16 = v15;
  v17 = v127;
  if (v127)
  {
    v18 = (unint64_t *)&v127->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v126;
  if (v126)
  {
    v21 = (unint64_t *)&v126->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v130;
  if (v130)
  {
    v24 = (unint64_t *)&v130->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v143;
  if (v143)
  {
    v30 = (unint64_t *)&v143->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v142;
  if (v142)
  {
    v33 = (unint64_t *)&v142->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v141;
  if (v141)
  {
    v36 = (unint64_t *)&v141->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v140;
  if (v140)
  {
    v39 = (unint64_t *)&v140->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v139;
  if (v139)
  {
    v42 = (unint64_t *)&v139->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v137;
  if (v137)
  {
    v45 = (unint64_t *)&v137->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v134 && &v135 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v131);
  if ((v14 & 0x8000000000000000) == 0 || !(_DWORD)v14)
  {
    v47 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)&v128 = *(_QWORD *)(a1 + 72) + v8 - v16;
    *((_QWORD *)&v128 + 1) = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = 0;
    v51 = *(_QWORD *)(a1 + 64);
    v52 = v122;
    if (v121 <= v51)
      v53 = *(_QWORD *)(a1 + 64);
    else
      v53 = v121;
    if (v121)
      v54 = v53;
    else
      v54 = 0;
    v55 = v51 + v122 + v54 - 1;
    v125 = 0;
    v126 = 0;
    if ((*(_BYTE *)(a1 + 128) & 1) != 0 && v8 == v16)
    {
      v56 = *(_QWORD *)(a1 + 96);
      v57 = *(_QWORD *)(v56 + 8);
      v58 = *(_QWORD *)(v57 + 72);
      *(_QWORD *)&v131 = *(_QWORD *)(v57 + 64);
      *((_QWORD *)&v131 + 1) = v58;
      if (v58)
      {
        v59 = (unint64_t *)(v58 + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
        *(_OWORD *)v132 = *(_OWORD *)(v57 + 80);
        *(_OWORD *)&v132[9] = *(_OWORD *)(v57 + 89);
        if (*((_QWORD *)&v131 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v125, (uint64_t *)&v131);
      v64 = *(_QWORD *)(v56 + 8);
      v65 = *(std::__shared_weak_count **)(v64 + 72);
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v50 = *(_QWORD *)(v64 + 80);
        do
          v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      else
      {
        v50 = *(_QWORD *)(v64 + 80);
      }
    }
    v69 = *(_DWORD *)(v4 + 284);
    v70 = v50;
    if (v69 != 1)
    {
      if (v69 != 2)
        goto LABEL_120;
      v70 = v6;
    }
    if (v70)
    {
      v71 = *(_QWORD *)(a1 + 120);
      if (v69 == 2)
      {
        v73 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v117 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v72 = v128;
        if (*((_QWORD *)&v128 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
      }
      else
      {
        v72 = v125;
        v73 = v126;
        v117 = v126;
        if (v126)
        {
          v74 = (unint64_t *)&v126->__shared_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
      }
      v78 = *(_DWORD *)(v4 + 284);
      if (v78 == 1)
        v79 = v50;
      else
        v79 = 0;
      if (v78 == 2)
        v80 = v6;
      else
        v80 = v79;
      *(_QWORD *)&v131 = v52 / v51;
      *((_QWORD *)&v131 + 1) = v55 / v51;
      v132[0] = 2;
      *(_QWORD *)&v132[8] = v72;
      *(_QWORD *)&v132[16] = v73;
      if (v73)
      {
        v81 = (unint64_t *)&v73->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      *(_QWORD *)&v132[24] = v80;
      ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::add(v71, &v131);
      v83 = *(std::__shared_weak_count **)&v132[16];
      if (*(_QWORD *)&v132[16])
      {
        v84 = (unint64_t *)(*(_QWORD *)&v132[16] + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (v117)
      {
        v86 = (unint64_t *)&v117->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
    }
LABEL_120:
    v88 = *(_DWORD *)(v4 + 280);
    v89 = v50;
    if (v88 != 1)
    {
      if (v88 != 2)
      {
LABEL_151:
        if (!*(_BYTE *)(a1 + 132))
          BackendSG::drop_sg(*(BackendSG **)(*(_QWORD *)(a1 + 96) + 8));
        v106 = v126;
        if (v126)
        {
          v107 = (unint64_t *)&v126->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        v109 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        if (*((_QWORD *)&v128 + 1))
        {
          v110 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        goto LABEL_163;
      }
      v89 = v6;
    }
    if (v89)
    {
      if (v88 == 2)
      {
        v91 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v118 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v90 = v128;
        if (*((_QWORD *)&v128 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
      }
      else
      {
        v90 = v125;
        v91 = v126;
        v118 = v126;
        if (v126)
        {
          v92 = (unint64_t *)&v126->__shared_owners_;
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
      }
      v96 = *(_DWORD *)(v4 + 280);
      if (v96 == 1)
        v97 = v50;
      else
        v97 = 0;
      if (v96 == 2)
        v98 = v6;
      else
        v98 = v97;
      *(_QWORD *)&v131 = v52 / v51;
      *((_QWORD *)&v131 + 1) = v55 / v51;
      v132[0] = 2;
      *(_QWORD *)&v132[8] = v90;
      *(_QWORD *)&v132[16] = v91;
      if (v91)
      {
        v99 = (unint64_t *)&v91->__shared_owners_;
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      *(_QWORD *)&v132[24] = v98;
      ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::add(v4 + 96, &v131);
      v101 = *(std::__shared_weak_count **)&v132[16];
      if (*(_QWORD *)&v132[16])
      {
        v102 = (unint64_t *)(*(_QWORD *)&v132[16] + 8);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      if (v118)
      {
        v104 = (unint64_t *)&v118->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
    }
    goto LABEL_151;
  }
  v115 = *(unsigned int **)(a1 + 112);
  while (!__ldaxr(v115))
  {
    if (!__stlxr(v14, v115))
    {
      *(_QWORD *)&v128 = "details::udif_verify::calculate_checksums(workqueue::workqueue &)_block_invoke";
      *((_QWORD *)&v128 + 1) = 41;
      v129 = 16;
      di_log::logger<di_log::log_printer<337ul>>::logger(&v131, &v128);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v138, (uint64_t)"Error reading sectors for verify ", 33);
      std::ostream::operator<<();
      di_log::logger<di_log::log_printer<337ul>>::~logger((uint64_t)&v131);
      goto LABEL_163;
    }
  }
  __clrex();
LABEL_163:
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
}

void sub_212F50A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  di_log::logger<di_log::log_printer<337ul>>::~logger((uint64_t)&a57);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<337ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<337ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF022E8;
  a1[45] = &unk_24CF023E8;
  a1[46] = &unk_24CF02410;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF022E8;
  a1[45] = &unk_24CF02370;
  a1[46] = &unk_24CF02398;
  return a1;
}

void sub_212F50B94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<337ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::add(uint64_t a1, __int128 *a2)
{
  std::mutex *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  int v54;
  _QWORD v55[2];
  _BYTE v56[24];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v3 = (std::mutex *)(a1 + 16);
  v51 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v52 = *((_QWORD *)a2 + 2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v53 = v5;
  v7 = v51;
  v54 = *(_DWORD *)((char *)&v52 + 1);
  HIBYTE(v54) = BYTE4(v52);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_BYTE *)(a1 + 168))
  {
    std::mutex::unlock(v3);
  }
  else
  {
    *(_OWORD *)v56 = v51;
    v56[16] = v52;
    *(_DWORD *)&v56[17] = v54;
    *(_DWORD *)&v56[20] = HIDWORD(v52);
    v57 = a1;
    v58 = v51;
    v59 = v52;
    v60 = v4;
    v53 = 0;
    v61 = v5;
    v62 = v6;
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>((uint64_t **)(a1 + 88), (unint64_t *)v56, (uint64_t)v56);
    v8 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if ((v52 & 2) == 0)
      v7 = v51 + 1;
    v11 = *(_QWORD *)(a1 + 160);
    std::mutex::unlock(v3);
    if (v7 == v11)
    {
      v12 = (uint64_t *)(a1 + 96);
      while (1)
      {
        *(_QWORD *)v56 = &v57;
        *(_OWORD *)&v56[8] = xmmword_212FEBC40;
        std::mutex::lock(v3);
        v14 = *(uint64_t **)(a1 + 88);
        v15 = *(_QWORD *)(a1 + 160);
        if (v14 != v12)
        {
          v16 = *(_QWORD **)(a1 + 144);
          v17 = *(_QWORD **)(a1 + 112);
          v18 = *(uint64_t **)(a1 + 88);
          while (v17 != v16)
          {
            v19 = v18[4];
            if ((v18[6] & 2) == 0)
              ++v19;
            if (v19 != v15)
              break;
            v15 = v18[5] + (v18[6] & 1);
            for (i = (v17[6] & 1) + v17[5]; v15 > i - 1; i = (v17[6] & 1) + v17[5])
            {
              v21 = (_QWORD *)v17[1];
              v22 = v17;
              if (v21)
              {
                do
                {
                  v17 = v21;
                  v21 = (_QWORD *)*v21;
                }
                while (v21);
              }
              else
              {
                do
                {
                  v17 = (_QWORD *)v22[2];
                  v23 = *v17 == (_QWORD)v22;
                  v22 = v17;
                }
                while (!v23);
              }
              *(_QWORD *)(a1 + 112) = v17;
              if (v17 == v16)
              {
                v17 = v16;
                break;
              }
              if ((v17[6] & 2) != 0)
                v15 = v17[4];
              else
                v15 = v17[4] + 1;
            }
            v24 = (uint64_t *)v18[1];
            if (v24)
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                v25 = (uint64_t *)v18[2];
                v23 = *v25 == (_QWORD)v18;
                v18 = v25;
              }
              while (!v23);
            }
            v18 = v25;
            if (v25 == v12)
            {
              v18 = (uint64_t *)(a1 + 96);
              break;
            }
          }
          if (v14 != v18)
          {
            v26 = 0;
            v27 = v14;
            do
            {
              v28 = v26;
              v29 = (uint64_t *)v27[1];
              if (v29)
              {
                do
                {
                  v30 = v29;
                  v29 = (uint64_t *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  v30 = (uint64_t *)v27[2];
                  v23 = *v30 == (_QWORD)v27;
                  v27 = v30;
                }
                while (!v23);
              }
              ++v26;
              v27 = v30;
            }
            while (v30 != v18);
            if (*(_QWORD *)&v56[16] <= v28)
            {
              if (v28 >= 0x249249249249249)
                boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v13);
              v31 = operator new(56 * v26);
              boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>((uint64_t *)v56, (uint64_t)v31, v26, *(_QWORD *)v56 + 56 * *(_QWORD *)&v56[8], 0, 0);
            }
            do
            {
              v32 = *(_QWORD *)v56;
              v33 = *(_QWORD *)&v56[8];
              v34 = (_QWORD *)(*(_QWORD *)v56 + 56 * *(_QWORD *)&v56[8]);
              if (*(_QWORD *)&v56[8] == *(_QWORD *)&v56[16])
              {
                boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>((uint64_t *)v56, (uint64_t)v34, (const char *)1, (uint64_t)(v14 + 7), v55);
              }
              else
              {
                *v34 = v14[7];
                v35 = v32 + 56 * v33;
                v36 = *((_OWORD *)v14 + 4);
                *(_QWORD *)(v35 + 24) = v14[10];
                *(_OWORD *)(v35 + 8) = v36;
                *(_OWORD *)(v35 + 32) = *(_OWORD *)(v14 + 11);
                v14[11] = 0;
                v14[12] = 0;
                *(_QWORD *)(v35 + 48) = v14[13];
                ++*(_QWORD *)&v56[8];
              }
              v37 = std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer((uint64_t **)(a1 + 88), v14);
              std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 11));
              operator delete(v14);
              v14 = v37;
            }
            while (v18 != v37);
          }
        }
        std::mutex::unlock(v3);
        if (*(_QWORD *)&v56[8])
        {
          v38 = *(uint64_t **)v56;
          v39 = *(_QWORD *)v56 + 56 * *(_QWORD *)&v56[8];
          do
          {
            v40 = *v38;
            v41 = v38[6];
            v55[0] = v38[4];
            v55[1] = v41;
            checksum::Any<locks::None,checksum::None,checksum::CRC32>::add(v40, (uint64_t)v55);
            v38 += 7;
          }
          while (v38 != (uint64_t *)v39);
          v42 = *(_QWORD *)&v56[8];
          if (*(_QWORD *)&v56[8])
          {
            v43 = *(_QWORD *)v56 + 32;
            do
            {
              --v42;
              v43 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v43) + 56;
            }
            while (v42);
          }
        }
        *(_QWORD *)&v56[8] = 0;
        std::mutex::lock(v3);
        *(_QWORD *)(a1 + 160) = v15;
        v44 = *(_QWORD *)(a1 + 88);
        if ((uint64_t *)v44 == v12 || *(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 144))
          break;
        v45 = *(_BYTE *)(v44 + 48);
        v46 = *(_QWORD *)(v44 + 32);
        if ((v45 & 2) != 0)
          v47 = v46;
        else
          v47 = v46 + 1;
        std::mutex::unlock(v3);
        if (v47 != v15)
          goto LABEL_68;
        boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v56);
      }
      std::mutex::unlock(v3);
LABEL_68:
      boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v56);
    }
  }
  if (v53)
  {
    v48 = (unint64_t *)&v53->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  return a1;
}

void sub_212F510EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::mutex *v24;

  std::mutex::unlock(v24);
  boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a24);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void BackendSG::drop_sg(BackendSG *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5[3];

  memset(v5, 0, 41);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 64, v5);
  *((_OWORD *)this + 5) = v5[1];
  *(_OWORD *)((char *)this + 89) = *(__int128 *)((char *)&v5[1] + 9);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5[0] + 1);
  if (*((_QWORD *)&v5[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *__copy_helper_block_e8_72c27_ZTSNSt3__110shared_ptrIcEE96c178_ZTSNSt3__110shared_ptrINS_5tupleIJNS_10unique_ptrIN17DiskImageUDIFReadI10UDIFReaderIN5locks4NoneEE13DiskImageUDIFE11ContextUDIFENS_14default_deleteISA_EEEENS0_I9BackendSGEEEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_72c27_ZTSNSt3__110shared_ptrIcEE96c178_ZTSNSt3__110shared_ptrINS_5tupleIJNS_10unique_ptrIN17DiskImageUDIFReadI10UDIFReaderIN5locks4NoneEE13DiskImageUDIFE11ContextUDIFENS_14default_deleteISA_EEEENS0_I9BackendSGEEEEEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 72;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 96);
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
}

const void **DiskImageUDIF::get_user_data@<X0>(DiskImageUDIF *this@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  CFMutableDictionaryRef Mutable;
  CFDictionaryRef theDict;

  udif::details::UDIF_base::get_resources((DiskImageUDIF *)((char *)this + 64), &theDict);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)copy_user_entry_from_resource, Mutable);
  *a2 = Mutable;
  return CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
}

void sub_212F512B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void copy_user_entry_from_resource(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID;
  CFTypeID v7;
  int OSType;
  CFTypeID v9;
  const void *ValueAtIndex;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;
  cf::CFUtilException *exception;
  CFTypeID v15;
  cf::CFUtilException *v16;
  unint64_t v17;
  void *v18;
  cf::CFUtilException *v19;

  TypeID = CFStringGetTypeID();
  if (a1)
  {
    v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      v15 = CFGetTypeID(a1);
LABEL_16:
      v16 = exception;
      v17 = v7;
      goto LABEL_17;
    }
  }
  OSType = CFStringGetOSType(a1);
  switch(OSType)
  {
    case 1651272568:
      return;
    case 1886155636:
      return;
    case 1970628964:
      return;
  }
  v9 = CFArrayGetTypeID();
  if (!a2)
    return;
  v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    v15 = CFGetTypeID(a2);
    goto LABEL_16;
  }
  if (CFArrayGetCount((CFArrayRef)a2) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
    v11 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      v12 = v11;
      if (CFGetTypeID(ValueAtIndex) != v11)
      {
LABEL_19:
        v19 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
        v15 = CFGetTypeID(ValueAtIndex);
        v16 = v19;
        v17 = v12;
LABEL_17:
        v18 = (void *)cf::CFUtilException::CFUtilException(v16, v15, v17);
      }
      ValueAtIndex = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("Data"));
      v13 = CFDataGetTypeID();
      if (ValueAtIndex)
      {
        v12 = v13;
        if (CFGetTypeID(ValueAtIndex) == v13)
        {
          CFDictionaryAddValue(a3, a1, ValueAtIndex);
          return;
        }
        goto LABEL_19;
      }
    }
  }
}

void sub_212F5147C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void **DiskImageUDIF::write_user_data(DiskImageUDIF *this, const __CFDictionary *a2)
{
  udif::details::UDIF_base *v4;
  __CFDictionary *MutableCopy;
  unint64_t v6;
  unsigned int v7;
  _QWORD *exception;
  const std::error_category *v10;
  const char *v11;
  _QWORD *v12;
  const std::error_category *v13;
  __CFDictionary *v14;
  CFDictionaryRef theDict;

  v4 = (DiskImageUDIF *)((char *)this + 64);
  udif::details::UDIF_base::get_resources((DiskImageUDIF *)((char *)this + 64), &theDict);
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theDict);
  v14 = MutableCopy;
  if (!MutableCopy)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v10 = std::generic_category();
    exception[1] = 22;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Failed creating CFAutoRelease instance.";
  }
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)details::copy_user_entry_to_resource, MutableCopy);
  v6 = udif::details::UDIF_base::write_resources(v4, v14);
  v7 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6), v6);
  if (v7)
  {
    v11 = "UDIFDiskImage: failed truncating image";
    goto LABEL_8;
  }
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), 2);
  if (v7)
  {
    v11 = "UDIFDiskImage: failed flush after user data write";
LABEL_8:
    v12 = __cxa_allocate_exception(0x40uLL);
    *v12 = &off_24CF07908;
    v13 = std::generic_category();
    v12[1] = v7;
    v12[2] = v13;
    *((_BYTE *)v12 + 24) = 0;
    *((_BYTE *)v12 + 48) = 0;
    v12[7] = v11;
  }
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v14);
  return CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
}

void sub_212F51618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a10);
  _Unwind_Resume(a1);
}

BOOL DiskImageUDIF::verify_image(DiskImageUDIF *this, workqueue::workqueue *a2, int a3)
{
  const udif::details::UDIF_base *v5;
  _BOOL8 v6;
  void **v8;
  int32x2_t v9[9];
  uint64_t v10;
  std::mutex v11;
  _QWORD *v12[14];

  v12[13] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v5 = (DiskImageUDIF *)((char *)this + 64);
  if (a3)
  {
    details::udif_verify::udif_verify((details::udif_verify *)v9, this, v5, 3);
    if (!details::udif_verify::calculate_checksums(v9, a2))
      goto LABEL_6;
  }
  else
  {
    details::udif_verify::udif_verify((details::udif_verify *)v9, this, v5);
    if (!details::udif_verify::calculate_checksums(v9, a2))
    {
LABEL_6:
      v6 = details::udif_verify::verify_checksums((details::udif_verify *)v9);
      goto LABEL_7;
    }
  }
  v6 = 0;
LABEL_7:
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)v12, v12[1]);
  std::mutex::~mutex(&v11);
  v8 = (void **)&v10;
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v6;
}

void sub_212F51734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  details::udif_verify::~udif_verify((details::udif_verify *)va);
  _Unwind_Resume(a1);
}

_QWORD *DiskImageUDIF::udif_extents_iterator_interface::make_val@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v2 = this[5];
  v4 = (_QWORD *)this[8];
  v3 = (_QWORD *)this[9];
  if (v4 == v3)
  {
LABEL_9:
    v8 = 0;
    v9 = 1;
    v4 = v3;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v4[5];
    if (v2 <= (v4[6] & 1) + v5 - 1)
      break;
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v16 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v16);
    }
    this[8] = v7;
    v4 = v7;
    if (v7 == v3)
      goto LABEL_9;
  }
  v10 = v4[4];
  if ((v4[6] & 2) != 0)
  {
    if (v2 < v10)
      goto LABEL_20;
  }
  else if (v10 >= v2)
  {
    goto LABEL_20;
  }
  if ((v4[6] & 1) != 0)
  {
    if (v5 >= v2)
      goto LABEL_18;
LABEL_20:
    v8 = 0;
    v9 = 1;
    goto LABEL_21;
  }
  if (v2 >= v5)
    goto LABEL_20;
LABEL_18:
  v11 = *((_DWORD *)v4 + 14);
  if (v11 != 1 && (v11 & 0xFF000000) != 0x80000000)
    goto LABEL_20;
  v9 = 0;
  v8 = 1;
LABEL_21:
  v12 = this[3];
  v13 = v2;
  if (v2 < v12)
  {
    v13 = v2;
    do
    {
      v14 = v12;
      if (v4 == v3)
        goto LABEL_27;
      v14 = v4[4];
      if ((v4[6] & 2) == 0)
        ++v14;
      if (v14 > v13)
      {
LABEL_27:
        if ((v8 & 1) != 0)
          break;
      }
      else
      {
        if (v8)
        {
          v15 = *((_DWORD *)v4 + 14);
          v16 = v15 == 1 || (v15 & 0xFF000000) == 0x80000000;
          if (!v16)
            break;
        }
        if (v9)
        {
          v17 = *((_DWORD *)v4 + 14);
          if (v17 == 1 || (v17 & 0xFF000000) == 0x80000000)
            break;
        }
        v18 = (_QWORD *)v4[1];
        v19 = v4;
        if (v18)
        {
          do
          {
            v20 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v19[2];
            v16 = *v20 == (_QWORD)v19;
            v19 = v20;
          }
          while (!v16);
        }
        v14 = (v4[6] & 1) + v4[5];
        this[8] = v20;
        v4 = v20;
      }
      v13 = v14;
    }
    while (v14 < v12);
  }
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v8;
  return this;
}

__n128 DiskImageUDIF::udif_extents_iterator_interface::clone@<Q0>(DiskImageUDIF::udif_extents_iterator_interface *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(v4 + 40) = *((_QWORD *)this + 5);
  *(_QWORD *)v4 = off_24CF02158;
  result = *((__n128 *)this + 3);
  v6 = *((_OWORD *)this + 4);
  *(__n128 *)(v4 + 48) = result;
  *(_OWORD *)(v4 + 64) = v6;
  *a2 = v4;
  return result;
}

void DiskImageUDIF::udif_extents_iterator_interface::~udif_extents_iterator_interface(DiskImageUDIF::udif_extents_iterator_interface *this)
{
  JUMPOUT(0x2199A8A18);
}

void DiskImageUDIF::~DiskImageUDIF(DiskImageUDIF *this)
{
  char *v1;

  *(_QWORD *)this = &off_24CEEDFE0;
  v1 = (char *)this + 48;
  udif::details::UDIF_base::~UDIF_base((DiskImageUDIF *)((char *)this + 64));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24CEEDFE0;
  v1 = (char *)this + 48;
  udif::details::UDIF_base::~UDIF_base((DiskImageUDIF *)((char *)this + 64));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImageUDIF::is_writable(DiskImageUDIF *this)
{
  return 0;
}

info::DiskImageInfoUDIF *DiskImageUDIF::create_image_info@<X0>(DiskImageUDIF *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  info::DiskImageInfoUDIF *v6;
  info::DiskImageInfoUDIF *result;

  v6 = (info::DiskImageInfoUDIF *)operator new();
  result = info::DiskImageInfoUDIF::DiskImageInfoUDIF(v6, this, a2);
  *a3 = (char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 104);
  return result;
}

void sub_212F51A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10F3C4052576DB9);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIF::supports_get_extents(DiskImageUDIF *this)
{
  return 1;
}

uint64_t DiskImageUDIF::get_extents_iterator_interface@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v12 = operator new();
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a4;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a1;
  *(_QWORD *)(v12 + 56) = a3;
  *(_QWORD *)v12 = off_24CF02158;
  *(_QWORD *)(v12 + 8) = a2;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  result = udif::details::UDIF_base::create_runs_range_iterator(a1 + 64, v12 + 16);
  *(_QWORD *)(v12 + 64) = result;
  *(_QWORD *)(v12 + 72) = v14;
  *a6 = v12;
  return result;
}

void sub_212F51B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C4092B25C2BLL);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIF::write()
{
  return -78;
}

_WORD *udif::details::block_attributes::block_attributes(_WORD *this, int a2)
{
  uint64_t v2;
  __int16 v3;
  _QWORD *exception;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;

  v2 = 0;
  v8 = *MEMORY[0x24BDAC8D0];
  *this = a2;
  v5 = 0x10000800040002;
  v6 = 4194336;
  v7 = 128;
  do
  {
    a2 &= *(unsigned __int16 *)((char *)&v5 + v2) ^ 0xFFFF;
    v2 += 2;
  }
  while (v2 != 14);
  if (a2)
  {
    v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_24CF022A0;
    exception[1] = "block_attributes";
    *((_WORD *)exception + 16) = v3;
  }
  return this;
}

void smart_enums::validators::validator_exception<unsigned short>::~validator_exception(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x2199A8A18);
}

void smart_enums::validators::validator_exception<unsigned short>::reason(smart_enums::validators::validator_exception_base *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  void *v15[2];
  unsigned __int8 v16;

  v3 = (char *)smart_enums::validators::validator_exception_base::what(a1);
  std::string::basic_string[abi:ne180100]<0>(v15, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (uint64_t)v15[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11 = v9;
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](&v14);
  if ((char)v16 < 0)
    operator delete(v15[0]);
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<details::udif_verify::is_csum_data_none_type(ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>(_BYTE ***result)
{
  ***result = 1;
  return result;
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<details::udif_verify::is_csum_data_none_type(ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>(_BYTE ***result)
{
  ***result = 0;
  return result;
}

void std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1, a2[1]);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 11));
    operator delete(a2);
  }
}

void std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 184;
      v6 = (std::mutex *)(v4 - 168);
      std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(v4 - 96, *(_QWORD **)(v4 - 88));
      std::mutex::~mutex(v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__emplace_back_slow_path<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[184 * v4];
  v16 = &v10[184 * v9];
  std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>((uint64_t)v14, a2);
  v15 = v14 + 184;
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_212F51FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v2 = (_QWORD *)(a2 + 96);
  v3 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v3;
  v4 = a1 + 96;
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 88) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 104) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = v4;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return result;
}

uint64_t std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(184 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 184;
      std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>(v7 - 184, v9);
      v7 = *((_QWORD *)&v15 + 1) - 184;
      *((_QWORD *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_212F521E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>,std::reverse_iterator<std::reverse_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  std::mutex *v6;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = (std::mutex *)(i + 16);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(i + 88, *(_QWORD **)(i + 96));
    std::mutex::~mutex(v6);
    i = *(_QWORD *)(a2 + 32) + 184;
  }
}

uint64_t std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  std::mutex *v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    v5 = (std::mutex *)(i - 168);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(i - 96, *(_QWORD **)(i - 88));
    std::mutex::~mutex(v5);
  }
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<337ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<337ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<337ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF02480;
  di_log::logger_buf<di_log::log_printer<337ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<337ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F52758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<337ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<337ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 337;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 337;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

const void **CFAutoRelease<__CFArray const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t udif::master_checksum_add<checksum::Any<locks::None,checksum::None,checksum::CRC32>>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  udif::details::checksum::checksum((uint64_t)&v15, a2);
  v4 = v15;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  v5 = v16;
  v6 = v17;
  v7 = v18;
  v8 = v19;
  udif::details::serialize_field((uint64_t)&v4, (uint64_t)v13);
  v4 = &v14;
  *(_QWORD *)&v5 = (unint64_t)HIDWORD(v15) >> 3;
  checksum::Any<locks::None,checksum::None,checksum::CRC32>::add(a1, (uint64_t)&v4);
  return a1;
}

uint64_t checksum::Any<locks::None,checksum::None,checksum::CRC32>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;

  v5 = a2;
  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v5;
  ((void (*)(uint64_t **, uint64_t))off_24CF024F0[v2])(&v6, a1 + 4);
  return a1;
}

uLong _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN8checksum3AnyIN5locks4NoneEJNS8_4NoneENS8_5CRC32EEE3addERK18checksum_algo_dataEUlRT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJNSC_ISB_EENSD_ISB_EEEEEEEEDcSI_DpT0_(const Bytef ****a1, _DWORD *a2)
{
  uLong result;

  result = crc32(*a2, ***a1, *((_DWORD *)**a1 + 2));
  *a2 = result;
  return result;
}

uint64_t ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::ChecksumScheduler(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;

  *(_OWORD *)result = *(_OWORD *)a2;
  if ((*(_BYTE *)(a3 + 16) & 2) != 0)
    v3 = *(_QWORD *)a3;
  else
    v3 = *(_QWORD *)a3 + 1;
  v5 = (_OWORD *)(a2 + 144);
  v4 = *(_QWORD **)(a2 + 144);
  v6 = *(_QWORD **)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 136);
  if (v6 != v4)
  {
    while (1)
    {
      v8 = v6[4];
      if ((v6[6] & 2) == 0)
        ++v8;
      if (v8 >= v3)
        break;
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
      if (v10 == v4)
        goto LABEL_29;
    }
  }
  if (v6 == v4)
  {
LABEL_29:
    v17 = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 16) = 850045863;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    *(_DWORD *)(result + 80) = v17;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 88) = result + 96;
    *(_OWORD *)(result + 112) = *v5;
    *(_OWORD *)(result + 128) = *v5;
    *(_OWORD *)(result + 144) = *v5;
    *(_BYTE *)(result + 168) = 0;
    v6 = *(_QWORD **)(result + 112);
    if (v6 == *(_QWORD **)(result + 144))
      goto LABEL_33;
    goto LABEL_30;
  }
  v12 = v6;
  while (1)
  {
    v13 = v12[4];
    if ((v12[6] & 2) == 0)
      ++v13;
    if (v13 > (unint64_t)(*(_BYTE *)(a3 + 16) & 1) + *(_QWORD *)(a3 + 8) - 1)
      break;
    v14 = (_QWORD *)v12[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v12[2];
        v11 = *v15 == (_QWORD)v12;
        v12 = v15;
      }
      while (!v11);
    }
    v12 = v15;
    if (v15 == v4)
    {
      v12 = *(_QWORD **)(a2 + 144);
      break;
    }
  }
  v16 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 16) = 850045863;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = v16;
  *(_QWORD *)(result + 88) = result + 96;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = v6;
  *(_QWORD *)(result + 120) = v7;
  *(_QWORD *)(result + 128) = v6;
  *(_QWORD *)(result + 136) = v7;
  *(_QWORD *)(result + 144) = v12;
  *(_QWORD *)(result + 152) = v7;
  *(_BYTE *)(result + 168) = 0;
  if (v6 != v12)
  {
LABEL_30:
    v18 = *((_BYTE *)v6 + 48);
    v19 = v6[4];
    if ((v18 & 2) == 0)
      ++v19;
    *(_QWORD *)(result + 160) = v19;
  }
LABEL_33:
  *(_BYTE *)(result + 176) = 0;
  return result;
}

uint64_t ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::ContextAllocator(uint64_t a1, unsigned int a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 1018212795;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2)
    std::vector<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>>::reserve((void **)(a1 + 8), a2);
  return a1;
}

void sub_212F52D80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::mutex *v3;
  std::condition_variable *v4;
  void *v6;

  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::~ContextAllocator(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 1));
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        MEMORY[0x2199A8A18](v4, 0x20C40960023A9);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = *(uint64_t ***)(a1 + 8);
  }
  *(_QWORD *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,void>(uint64_t a1@<X1>, _QWORD *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x90uLL);
  std::__shared_ptr_emplace<BackendSG>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,std::allocator<BackendSG>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_212F52F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BackendSG>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,int,BOOL,std::allocator<BackendSG>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CF02510;
  BackendSG::BackendSG(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_212F52FA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BackendSG>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF02510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendSG>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF02510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<BackendSG>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ExecutionSchedulerSortedConsecutiveIt<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,locks::Std,boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>::abort(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  *(_BYTE *)(a1 + 152) = 1;
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::mutex::unlock((std::mutex *)a1);
}

_QWORD *std::shared_ptr<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>::shared_ptr[abi:ne180100]<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>)#1},void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &off_24CF02560;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_212F530C4(void *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  __cxa_begin_catch(a1);
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(locks::Std)#1}::operator()<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_212F530DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(locks::Std)#1}::operator()<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::mutex *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *a1;
  v4 = (std::mutex *)(*a1 + 32);
  std::mutex::lock(v4);
  v5 = *(_QWORD **)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(v3 + 8);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v3 + 24, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    v17 = *(char **)(v3 + 8);
    v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *(char **)(v3 + 8);
    }
    *(_QWORD *)(v3 + 8) = v14;
    *(_QWORD *)(v3 + 16) = v7;
    *(_QWORD *)(v3 + 24) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 16) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_212F531F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *)#1},std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_pointer<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *)#1},std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>>::__on_zero_shared(uint64_t a1)
{
  ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(locks::Std)#1}::operator()<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,ContextAllocator<locks::Std,std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>::allocate(void)::{lambda(std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *)#1},std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN16ContextAllocatorIN5locks3StdEJNSt3__110unique_ptrIN17DiskImageUDIFReadI10UDIFReaderINS0_4NoneEE13DiskImageUDIFE11ContextUDIFENS2_14default_deleteISA_EEEENS2_10shared_ptrI9BackendSGEEEE8allocateEvEUlT_E_))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<337ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF02480;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F532F8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x70uLL);
    v10[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 24);
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v6 + 7) = v8;
    v6[4] = *(_OWORD *)(a3 + 32);
    *((_QWORD *)v6 + 10) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *((_QWORD *)v6 + 13) = *(_QWORD *)(a3 + 72);
    v11 = 1;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  unint64_t *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a3, v4 + 4))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(unint64_t *a1, unint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v9;
  unint64_t v10;

  v2 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v2 == 3)
    {
      v4 = *a1;
      v3 = a1[1];
      if (v3 >= *a1)
      {
LABEL_4:
        if ((v2 & 2) != 0)
          v5 = v4;
        else
          v5 = v4 + 1;
        v6 = *a2;
        if ((a2[2] & 2) == 0)
          ++v6;
        if (v5 < v6)
          return 1;
        if (v6 == v5)
          return (v2 & 1) + v3 - 1 < (a2[2] & 1) + a2[1] - 1;
        return 0;
      }
    }
    else
    {
      v4 = *a1;
      v3 = a1[1];
      if (*a1 < v3)
        goto LABEL_4;
    }
  }
  else
  {
    v4 = *a1;
    v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3)
      goto LABEL_4;
  }
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3)
      v9 = a2[1] < *a2;
    else
      v9 = *a2 >= a2[1];
  }
  else
  {
    v10 = a2[1];
    v9 = *a2 >= v10 || *a2 + 1 >= v10;
  }
  return !v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 88);
    operator delete(v2);
  }
}

void boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = v10 + 32;
      do
      {
        --v11;
        v12 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v12) + 56;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_212F53650(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,boost::move_iterator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  while (a2 != a3)
  {
    *(_QWORD *)a5 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a5 + 32) = result;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a5 + 48) = *(_QWORD *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  if (a6)
  {
    v9 = a6;
    v10 = a5;
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)a7;
      v11 = *(_OWORD *)(a7 + 8);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(a7 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      result = *(__n128 *)(a7 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(_QWORD *)(a7 + 32) = 0;
      *(_QWORD *)(a7 + 40) = 0;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(a7 + 48);
      a7 += 56;
      v10 += 56;
      --v9;
    }
    while (v9);
  }
  if (a3 != a4)
  {
    v12 = a5 + 56 * a6;
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)a3;
      v13 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v12 + 32) = result;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(v12 + 48) = *(_QWORD *)(a3 + 48);
      a3 += 56;
      v12 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

void boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x24924924924924ALL)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(56 * v11);
  boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0x249249249249249;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x249249249249249 - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0x249249249249249)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = v10 + 32;
      do
      {
        --v11;
        v12 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v12) + 56;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_212F53920(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper*,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;
  __int128 v11;

  while (a2 != a3)
  {
    *(_QWORD *)a5 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a5 + 48) = *(_QWORD *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  *(_QWORD *)a5 = *(_QWORD *)a7;
  v8 = *(_OWORD *)(a7 + 8);
  *(_QWORD *)(a5 + 24) = *(_QWORD *)(a7 + 24);
  *(_OWORD *)(a5 + 8) = v8;
  result = *(__n128 *)(a7 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(_QWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 40) = 0;
  *(_QWORD *)(a5 + 48) = *(_QWORD *)(a7 + 48);
  if (a3 != a4)
  {
    v10 = a5 + 56 * a6;
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)a3;
      v11 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(a3 + 48);
      a3 += 56;
      v10 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t boost::container::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::small_vector_allocator<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)a1 + 32;
    do
    {
      --v2;
      v3 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3) + 56;
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t di_asif::details::dir_base::calc_num_real_elements(di_asif::details::dir_base *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  DiskImagesRuntimeException *exception;
  void *v5;

  v1 = *((_QWORD *)this + 4);
  v2 = v1 % (*((_QWORD *)this + 6) + 1);
  result = v1 - v2;
  if (v1 == v2)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Invalid chunk size", 0xFFFFFFEA);
  }
  return result;
}

unint64_t di_asif::details::unmap_iterator_t::make_val(di_asif::details::unmap_iterator_t *this)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 7);
  v3 = v2 * *v1;
  v4 = *((_QWORD *)this + 5);
  v5 = v3 + v4;
  v6 = v1[1] * v2;
  if (v4 < v6)
    return v5 / v2;
  *((_QWORD *)this + 5) = 0;
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  if (v8 <= ((uint64_t)v1 - *(_QWORD *)this) >> 4)
    return v5 / v2;
  *((_QWORD *)this + 2) = v1 + 2;
  if (v8 != ((uint64_t)v1 - v7 + 16) >> 4)
  {
    v9 = v1[2] * v2;
    if (v9 < *((_QWORD *)this + 9))
    {
      v5 = v1[2] * v2;
      return v5 / v2;
    }
  }
  return 0;
}

di_asif::details::unmap_iterator_t *di_asif::details::unmap_iterator_t::unmap_iterator_t(di_asif::details::unmap_iterator_t *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a4;
  *((_QWORD *)this + 7) = a5;
  *((_QWORD *)this + 8) = a6;
  v9 = (uint64_t *)(a2 + 16 * a8);
  *((_QWORD *)this + 9) = a7;
  if (a8 == a3)
  {
LABEL_6:
    *((_QWORD *)this + 2) = v9;
  }
  else
  {
    v10 = 16 * a3 - 16 * a8;
    while (1)
    {
      v11 = *v9;
      if ((v9[1] + *v9) * a5 >= a6)
        break;
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = (uint64_t *)(a2 + 16 * a3);
        goto LABEL_6;
      }
    }
    *((_QWORD *)this + 2) = v9;
    v13 = v11 * a5;
    if (v11 * a5 < a7)
    {
      v14 = a6 >= v13;
      v15 = a6 - v13;
      if (v15 != 0 && v14)
        *((_QWORD *)this + 5) = v15;
      *((_QWORD *)this + 3) = di_asif::details::unmap_iterator_t::make_val(this);
      *((_QWORD *)this + 4) = v16;
    }
  }
  return this;
}

uint64_t di_asif::details::table::get_map_entry_for_offset(di_asif::details::table *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  di_asif::details::table_entry_map::table_entry_map(&v4, this, *(_QWORD *)(v2 + 48)+ (*(_QWORD *)(v2 + 48) + 1)* ((a2 / *(unsigned __int16 *)(v2 + 18) - *((_QWORD *)this + 44) / (unint64_t)*(unsigned __int16 *)(v2 + 18))/ (*(_QWORD *)(v2 + 48)* (unint64_t)(*(_DWORD *)(v2 + 20) / *(unsigned __int16 *)(v2 + 18)))));
  return v4;
}

uint64_t di_asif::details::map_entry_iterator_t::operator*(uint64_t a1)
{
  return a1 + 16;
}

uint64_t di_asif::details::map_entry_iterator_t::operator++(uint64_t a1)
{
  di_asif::details::table *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t map_entry_for_offset;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(di_asif::details::table **)a1;
  v3 = *((_QWORD *)v2 + 1);
  v4 = *(_QWORD *)(a1 + 8)
     + *(unsigned __int16 *)(v3 + 18)
     * (unint64_t)(*(_DWORD *)(v3 + 20) / *(unsigned __int16 *)(v3 + 18))
     * *(_QWORD *)(v3 + 48);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4 >= *((_QWORD *)v2 + 44) + *(_QWORD *)(v3 + 80))
  {
    v7 = 0;
    v6 = 0;
    v8 = 0;
  }
  else
  {
    map_entry_for_offset = di_asif::details::table::get_map_entry_for_offset(v2, v4);
    v6 = map_entry_for_offset & 0xFFFFFFFFFFFFFF00;
    v7 = map_entry_for_offset;
    v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(_BYTE *)(a1 + 32))
      *(_QWORD *)(a1 + 24) = v4;
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v6 | v7;
    *(_QWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t di_asif::details::map_entry_iterator_t::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return di_asif::details::map_entry_iterator_t::operator++(a1);
}

uint64_t di_asif::details::table::get_data_entry_for_offset(di_asif::details::table *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  v3 = *(unsigned __int16 *)(v2 + 18);
  di_asif::details::table_entry_data::table_entry_data(&v5, this, ((a2 / v3 - *((_QWORD *)this + 44) / v3) / (*(_DWORD *)(v2 + 20) / v3)+ (a2 / v3 - *((_QWORD *)this + 44) / v3) / (*(_DWORD *)(v2 + 20) / v3) * *(_QWORD *)(v2 + 48))/ *(_QWORD *)(v2 + 48));
  return v5;
}

uint64_t di_asif::details::data_entry_iterator_t::operator++(uint64_t a1)
{
  di_asif::details::table *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t data_entry_for_offset;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(di_asif::details::table **)a1;
  v3 = *((_QWORD *)v2 + 1);
  v4 = *(_QWORD *)(a1 + 8) + *(unsigned int *)(v3 + 20);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4 >= *((_QWORD *)v2 + 44) + *(_QWORD *)(v3 + 80))
  {
    v7 = 0;
    v6 = 0;
    v8 = 0;
  }
  else
  {
    data_entry_for_offset = di_asif::details::table::get_data_entry_for_offset(v2, v4);
    v6 = data_entry_for_offset & 0xFFFFFFFFFFFFFF00;
    v7 = data_entry_for_offset;
    v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(_BYTE *)(a1 + 32))
      *(_QWORD *)(a1 + 24) = v4;
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v6 | v7;
    *(_QWORD *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t di_asif::details::data_entry_iterator_t::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return di_asif::details::data_entry_iterator_t::operator++(a1);
}

uint64_t di_asif::details::table::table(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5, int a6)
{
  char v6;
  size_t v12;
  void *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *exception;
  const std::error_category *v22;
  _QWORD v23[2];

  v6 = a6;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  di_utils::fixed_vector_t<di_asif::details::table_entry>::fixed_vector_t((uint64_t *)(a1 + 16), *(_QWORD *)(a2 + 56), a6);
  std::vector<ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>>::vector((_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 64));
  *(_QWORD *)(a1 + 104) = 850045863;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 101) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 168) = 850045863;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 280) = 850045863;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = a4;
  *(_QWORD *)(a1 + 352) = a5;
  v12 = *(unsigned int *)(a2 + 20);
  if (a4 && a4 % v12)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v22 = std::generic_category();
    exception[1] = 4294967274;
    exception[2] = v22;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "ASIF: table is not aligned to chunk size";
  }
  v13 = (void *)operator new[]();
  bzero(v13, v12);
  if ((v6 & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v15 = (std::__shared_weak_count *)a3[1];
    v23[0] = *a3;
    v23[1] = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    di_asif::details::table::load((_QWORD *)a1, v23);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v14 = 0;
  }
  atomic_store(v14, (unsigned int *)(a1 + 96));
  *(_BYTE *)(a1 + 100) = v14;
  MEMORY[0x2199A8A00](v13, 0x1000C8077774924);
  return a1;
}

void sub_212F5405C(_Unwind_Exception *a1, uint64_t a2, uint64_t *a3, ...)
{
  uint64_t v3;
  void **v4;
  std::mutex *v5;
  std::mutex *v6;
  std::mutex *v7;
  uint64_t v8;
  void *v10;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x2199A8A00](v8, 0x1000C8077774924);
  std::mutex::~mutex(v7);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&v5[2].__m_.__sig);
  std::mutex::~mutex(v6);
  std::mutex::~mutex(v5);
  v10 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 80) = v10;
    operator delete(v10);
  }
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100](a3);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::load(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *exception;
  const std::error_category *v24;
  void *v25;
  std::__shared_weak_count *v26;
  size_t v27;
  unint64_t v28;
  size_t v29;
  char v30;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 56);
  v6 = ((unint64_t)*(unsigned __int16 *)(v4 + 18) + 8 * v5 - 1)
     / *(unsigned __int16 *)(v4 + 18)
     * *(unsigned __int16 *)(v4 + 18);
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v9 = a1[43];
  v10 = v8 - v9;
  if (v8 < v9)
    v10 = 0;
  if (v10 >= v6)
    v11 = v6;
  else
    v11 = v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v25 = v7;
  v26 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v27 = v11;
  v28 = v9;
  v29 = v11;
  v30 = 0;
  v15 = (*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 88))(*a2, &v25);
  if (v11 != v15)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v24 = std::generic_category();
    exception[1] = v15;
    exception[2] = v24;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Read returned an error";
  }
  bzero(v7, v6 - v11);
  if (v5)
  {
    v16 = 0;
    v17 = (unint64_t *)v7;
    do
    {
      v18 = *v17++;
      atomic_store(0, (unint64_t *)(a1[7] + v16));
      atomic_store(bswap64(v18), (unint64_t *)(a1[7] + v16 + 8));
      v16 += 16;
      --v5;
    }
    while (v5);
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return MEMORY[0x2199A8A00](v7, 0x1000C8077774924);
}

void sub_212F542B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void di_asif::details::table::return_chunk(di_asif::details::table *this, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  if (a2)
  {
    v3 = (std::mutex *)((char *)this + 280);
    std::mutex::lock((std::mutex *)((char *)this + 280));
    std::deque<unsigned long long>::emplace_back<unsigned long long &>((_QWORD *)this + 29, &v4);
    atomic_store(1u, (unsigned int *)this + 24);
    std::mutex::unlock(v3);
  }
}

void sub_212F54348(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long long>::emplace_back<unsigned long long &>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<unsigned long long>::__add_back_capacity(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  v10 = v8 + 1;
  a1[5] = v10;
  v11 = v7 + v10;
  v12 = (_QWORD *)(v5 + 8 * (v11 >> 9));
  v13 = v11 & 0x1FF;
  if (v13)
    v14 = *v12 + 8 * v13;
  else
    v14 = *(v12 - 1) + 4096;
  return v14 - 8;
}

uint64_t di_asif::details::table::update_entry_if_bits_in_same_state(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_data *a3)
{
  unint64_t v3;
  ref::ref_cnt *v7;
  unint64_t v8;
  _QWORD *exception;
  const std::error_category *v10;
  uint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  di_asif::details::map_element *v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int bitmap_range;
  uint64_t block_bits;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  _BYTE *v42;
  void (**v43)(ref::details::ref_cnt_set_handle *__hidden);
  ref::ref_cnt *v44;
  char v45;
  uint64_t v46;

  v3 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1) + 8));
  if (v3 >> 62 != 3)
    return 0;
  v7 = (ref::ref_cnt *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1));
  while (*(_QWORD *)v7)
  {
LABEL_10:
    if ((ref::ref_cnt::wait_fn(v7, (const void *)1) & 1) == 0)
    {
      v45 = 0;
      v43 = &off_24CF07538;
      v44 = v7;
      v46 = 0;
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v10 = std::generic_category();
      exception[1] = 4294967291;
      exception[2] = v10;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Can't take exclusive lock on entry";
    }
  }
  while (1)
  {
    v8 = __ldaxr((unint64_t *)v7);
    if (!v8)
      break;
    __clrex();
LABEL_9:
    if (v8)
      goto LABEL_10;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)v7))
    goto LABEL_9;
  v12 = 1;
  v45 = 1;
  v43 = &off_24CF07538;
  v44 = v7;
  v46 = 0;
  v13 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1) + 8));
  if (v13 >> 62 != 3)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_32;
  }
  v14 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  di_asif::details::table::get_bitmap(this, a2, (*(_QWORD *)(*(_QWORD *)a3 + 352)+ (*(_QWORD *)(v14 + 48) + *(_QWORD *)(v14 + 48) * *((_QWORD *)a3 + 1))/ (unint64_t)(*(_QWORD *)(v14 + 48) + 1)* *(unsigned int *)(v14 + 20))/ *(unsigned __int16 *)(v14 + 18), 0, 1, (unint64_t *)&v42);
  if (!v42 || v42[344])
  {
LABEL_30:
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_31;
  }
  if (v42[224])
    v15 = (di_asif::details::map_element *)(v42 + 40);
  else
    v15 = 0;
  bitmap_range = di_asif::details::table_entry_data::get_bitmap_range(a3);
  block_bits = di_asif::details::map_element::get_block_bits(v15, bitmap_range);
  v21 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v22 = *(_QWORD *)(v21 + 48);
  v23 = *(unsigned int *)(v21 + 20);
  if (v42)
  {
    if (v42[224])
      v25 = v42 + 40;
    else
      v25 = 0;
  }
  else
  {
    v25 = 0;
  }
  v24 = *(_QWORD *)(*(_QWORD *)a3 + 352) + (v22 + v22 * *((_QWORD *)a3 + 1)) / (unint64_t)(v22 + 1) * v23;
  if (di_asif::details::map_element::search_for_pattern(v25, this, block_bits, v24, v24 + v23, 0) != v24 + v23)
  {
    v12 = 0;
    goto LABEL_30;
  }
  v26 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1) + 8);
  v27 = *v26;
  v28 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 20);
  v17 = block_bits == 2;
  v29 = *v26;
  v30 = __ldaxr(v26);
  if (v30 == v29)
  {
    if (!__stlxr((block_bits << 62) | v29 & 0x3FFFFFFFFFFFFFFFLL, v26))
    {
      v31 = 1;
      goto LABEL_41;
    }
  }
  else
  {
    __clrex();
  }
  v31 = 0;
LABEL_41:
  v32 = v27 & 0x7FFFFFFFFFFFFFLL;
  if ((v31 & 1) == 0)
  {
    while (2)
    {
      v33 = __ldaxr(v26);
      if (v33 == v30)
      {
        if (!__stlxr(v30 & 0x3FFFFFFFFFFFFFFFLL | (block_bits << 62), v26))
        {
          v34 = 1;
          goto LABEL_47;
        }
      }
      else
      {
        __clrex();
      }
      v34 = 0;
LABEL_47:
      v30 = v33;
      if (v34)
        break;
      continue;
    }
  }
  v18 = v32 * v28;
  if ((_DWORD)block_bits != 1)
  {
    v35 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1) + 8);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 20))
    {
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 & 0xFF80000000000000, v35));
      goto LABEL_64;
    }
    v37 = *v35;
    v38 = __ldxr(v35);
    if (v38 == v37)
    {
      if (!__stxr(v37 & 0xFF80000000000000, v35))
      {
        v39 = 1;
LABEL_57:
        if ((v39 & 1) != 0)
          goto LABEL_64;
        while (2)
        {
          v40 = __ldxr(v35);
          if (v40 == v38)
          {
            if (!__stxr(v38 & 0xFF80000000000000, v35))
            {
              v41 = 1;
              goto LABEL_63;
            }
          }
          else
          {
            __clrex();
          }
          v41 = 0;
LABEL_63:
          v38 = v40;
          if ((v41 & 1) != 0)
            goto LABEL_64;
          continue;
        }
      }
    }
    else
    {
      __clrex();
    }
    v39 = 0;
    goto LABEL_57;
  }
LABEL_64:
  v12 = 0;
  v16 = 1;
  atomic_store(1u, (unsigned int *)this + 24);
LABEL_31:
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v42);
LABEL_32:
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v43);
  if (v12)
    result = 0;
  else
    result = v16;
  if (!v12 && v17)
  {
    di_asif::details::table::return_chunk(this, v18);
    return v16;
  }
  return result;
}

void sub_212F547F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)va);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)va1);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::table_entry_data::get_flags(di_asif::details::table_entry_data *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 56) + 16 * *((_QWORD *)this + 1) + 8));
  return v1 >> 62;
}

void di_asif::details::table::get_bitmap(di_asif::details::table *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ref::ref_cnt *v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t space;
  uint64_t v25[2];
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v12 = (a3 - *((_QWORD *)this + 44) / (unint64_t)*(unsigned __int16 *)(*((_QWORD *)this + 1) + 18))
      / (*(_QWORD *)(*((_QWORD *)this + 1) + 48)
       * (unint64_t)(*(_DWORD *)(*((_QWORD *)this + 1) + 20)
                          / *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18)));
  v13 = di_asif::details::table::bitmap_idx_to_tag(this, v12);
  ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag((unint64_t *)(*((_QWORD *)this + 9) + 8 * v12), v13, a6);
  if (!*a6 || *(_BYTE *)(*a6 + 344))
  {
    v14 = *((_QWORD *)this + 1);
    v30 = *(_QWORD *)(v14 + 48)
        + (*(_QWORD *)(v14 + 48) + 1)
        * ((a3 - *((_QWORD *)this + 44) / (unint64_t)*(unsigned __int16 *)(v14 + 18))
         / (*(_QWORD *)(v14 + 48)
          * (unint64_t)(*(_DWORD *)(v14 + 20) / *(unsigned __int16 *)(v14 + 18))));
    di_asif::details::table_entry_map::table_entry_map(&v27, this, v30);
    v15 = v27;
    v16 = v28;
    if ((a4 & 1) != 0)
    {
      LOBYTE(v27) = 0;
      v29 = 0;
    }
    else
    {
      v17 = (ref::ref_cnt *)(*(_QWORD *)(v27 + 56) + 16 * v28);
      v18 = ref::ref_cnt::get(v17);
      v25[0] = (uint64_t)&off_24CF07518;
      v25[1] = (uint64_t)v17;
      v26 = v18;
      ref::details::ref_cnt_handle::ref_cnt_handle((uint64_t)&v27, (uint64_t)v25);
      v29 = 1;
      ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v25);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 1) + 32))(v25, *((_QWORD *)this + 1), v13, a5);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(a6, (unint64_t *)v25);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)v25);
    if (*a6)
    {
      if (!*(_BYTE *)(*a6 + 344))
      {
        if (!*a6 || (v19 = atomic_load((unsigned int *)(*a6 + 24)), v19 != 2))
        {
          v20 = atomic_load(a6);
          v25[0] = v20;
          v21 = *((_QWORD *)this + 9);
          do
            v22 = __ldaxr((unint64_t *)v25);
          while (__stlxr(0, (unint64_t *)v25));
          atomic_store(v22, (unint64_t *)(v21 + 8 * v12));
          v25[0] = 0;
          v25[0] = (*(_QWORD *)(*(_QWORD *)(v15 + 56) + 16 * v16 + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(*(_QWORD *)(v15 + 8) + 20);
          if (v25[0])
          {
            ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>((uint64_t *)a6, a2, this, (unint64_t *)&v30, v25);
          }
          else
          {
            space = di_asif::details::dir_base::allocate_space(*((di_asif::details::dir_base **)this + 1), a2, 1);
            v23 = 1;
            ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>((uint64_t *)a6, a2, this, (unint64_t *)&v30, &space, &v23);
          }
        }
      }
    }
    if (v29)
      ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&v27);
  }
}

void sub_212F54A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  unint64_t *v17;

  if (a17)
    ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&a14);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(v17);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::table_entry_data::get_start_block(di_asif::details::table_entry_data *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  return (*(_QWORD *)(*(_QWORD *)this + 352)
        + (*(_QWORD *)(v1 + 48) + *(_QWORD *)(v1 + 48) * *((_QWORD *)this + 1))
        / (unint64_t)(*(_QWORD *)(v1 + 48) + 1)
        * *(unsigned int *)(v1 + 20))
       / *(unsigned __int16 *)(v1 + 18);
}

uint64_t di_asif::details::map_element::get_block_bits(di_asif::details::map_element *this, unint64_t a2)
{
  lock_free::bitmap_t *v3;
  unsigned int bit;
  int v5;
  uint64_t result;
  DiskImagesRuntimeException *exception;
  void *v8;

  v3 = (di_asif::details::map_element *)((char *)this + 32);
  bit = lock_free::bitmap_t::get_bit((di_asif::details::map_element *)((char *)this + 32), a2);
  if (lock_free::bitmap_t::get_bit(v3, a2 + 1))
    v5 = 2;
  else
    v5 = 0;
  result = v5 | bit;
  if ((_DWORD)result == 3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "bitmap flag value invalid", 0xFFFFFFEA);
  }
  return result;
}

unint64_t di_asif::details::table_entry_data::get_bitmap_range(di_asif::details::table_entry_data *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)this + 352);
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(unsigned int *)(v2 + 20);
  v5 = (v3 + v3 * *((_QWORD *)this + 1)) / (unint64_t)(v3 + 1) * v4;
  v6 = *(unsigned __int16 *)(v2 + 18);
  return ((2
         * ((v5
                         - ((v5 + v1) / v6 - v1 / v6)
                         / (v3
                          * (unint64_t)(v4 / v6))
                         * v3
                         * v4)
                        / v6)) | (((v4
                                  - v6
                                  + v5
                                  - ((v4 - v6 + v5 + v1) / v6 - v1 / v6)
                                  / (v3
                                   * (unint64_t)(v4 / v6))
                                  * v3
                                  * v4)
                                 / v6) << 33))
       + 0x200000000;
}

unint64_t di_asif::details::table_entry_data::get_logical_offset(di_asif::details::table_entry_data *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 352)
       + (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 48)
        + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 48) * *((_QWORD *)this + 1))
       / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 48) + 1)
       * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 20);
}

unint64_t di_asif::details::map_element::search_for_pattern_match(_QWORD *a1, di_asif::details::table *a2, char a3, unint64_t a4, uint64_t a5)
{
  return di_asif::details::map_element::search_for_pattern(a1, a2, a3, a4, a5, 0);
}

_QWORD *di_asif::details::table_entry_obj::set_offset(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v2 = *(unsigned int *)(*(_QWORD *)(*this + 8) + 20);
  v3 = (unint64_t *)(*(_QWORD *)(*this + 56) + 16 * this[1] + 8);
  if (v2 > a2)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 & 0xFF80000000000000, v3));
    return this;
  }
  v5 = *v3;
  v6 = __ldxr(v3);
  v7 = a2 / v2;
  if (v6 != v5)
  {
    __clrex();
LABEL_8:
    while (1)
    {
      v8 = __ldxr(v3);
      if (v8 != v6)
        break;
      if (__stxr(v6 & 0xFF80000000000000 | v7, v3))
        goto LABEL_12;
      v9 = 1;
LABEL_13:
      v6 = v8;
      if (v9)
        return this;
    }
    __clrex();
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  if (__stxr(v5 & 0xFF80000000000000 | v7, v3))
    goto LABEL_8;
  return this;
}

unint64_t di_asif::details::table::bitmap_idx_to_tag(di_asif::details::table *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v2 + 64);
  if ((v3 & (v3 - 1)) != 0)
  {
    v4 = 0;
    v5 = 2 * v3;
    do
    {
      v5 >>= 1;
      ++v4;
    }
    while (v5 != 1);
    v3 = 1 << v4;
  }
  v6 = *(_QWORD *)(v2 + 80);
  if (v3 == 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v3 >>= 1;
      ++v7;
    }
    while (v3 != 1);
  }
  return ((*((_QWORD *)this + 44) / v6) << v7) | a2;
}

unint64_t *ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = atomic_load(result);
  if (v4 && *(_QWORD *)(v4 + 32) == a2)
  {
    v6 = (unint64_t *)atomic_load(result);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 344))
    {
      v7 = *(_QWORD *)(v9 + 32);
      *a3 = 0;
      if (v7 == a2)
      {
        do
          v8 = __ldaxr(&v9);
        while (__stlxr(0, &v9));
        atomic_store(v8, a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

unint64_t *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  if (a2 != a1)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(0, a2));
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(a1);
    atomic_store(v3, a1);
  }
  return a1;
}

uint64_t ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>(uint64_t *a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5)
{
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>(*a1, a2, a3, a4, a5);
}

void sub_212F54E78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 288);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_212F54EAC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::dir_base::allocate_space(di_asif::details::dir_base *this, di_asif::details::ContextASIF *a2, int a3)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t *)((char *)this + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (*(uint64_t (**)(di_asif::details::dir_base *))(*(_QWORD *)this + 16))(this);
  if (a3)
  {
    v9 = *((unsigned int *)this + 5);
    v14[0] = &off_24CF02990;
    v14[1] = a2;
    v14[2] = v9;
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  v10 = space_allocators::FixedSize::allocate(v8, (uint64_t)v14);
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_10;
  }
  if (v15)
  {
    v12 = 5;
LABEL_10:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v10;
}

void sub_212F54FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>(uint64_t *a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>(*a1, a2, a3, a4, a5, a6);
}

void sub_212F55018(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 288);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_212F5504C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::allocate_backend_space_for_entry(uint64_t a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  unint64_t space;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if ((*(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * a4 + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(_QWORD *)(a3 + 8) + 20))
  {
    return 0;
  }
  space = di_asif::details::dir_base::allocate_space(*(di_asif::details::dir_base **)(a1 + 8), a2, 0);
  if (space)
  {
    v9 = *(_QWORD *)(a3 + 56) + 16 * a4;
    v10 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x7FFFFFFFFFFFFFLL) == 0)
    {
      v11 = (unint64_t *)(v9 + 8);
      v12 = space / *(unsigned int *)(*(_QWORD *)(a3 + 8) + 20);
      while (1)
      {
        v13 = __ldxr(v11);
        if (v13 != v10)
          break;
        if (__stxr(v10 & 0xFF80000000000000 | v12, v11))
          goto LABEL_9;
        v14 = 1;
LABEL_10:
        if ((v14 & 1) != 0)
          return 0;
        v10 = v13;
        if ((v13 & 0x7FFFFFFFFFFFFFLL) != 0)
          goto LABEL_12;
      }
      __clrex();
LABEL_9:
      v14 = 0;
      goto LABEL_10;
    }
LABEL_12:
    di_asif::details::dir_base::insert_space(*(di_asif::details::dir_base **)(a1 + 8), space, a2);
    return 0;
  }
  return 4294967268;
}

_QWORD *di_asif::details::dir_base::insert_space(di_asif::details::dir_base *this, uint64_t a2, di_asif::details::ContextASIF *a3)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(di_asif::details::dir_base *))(*(_QWORD *)this + 16))(this);
  v11[0] = &off_24CF02A20;
  v11[1] = a3;
  v12 = v11;
  space_allocators::FixedSize::insert(v6, a2, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v8 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  v9 = (unint64_t *)((char *)this + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  return result;
}

void sub_212F55208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void di_asif::details::table::set_entry_bitmap_range(uint64_t a1, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_data *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ref::ref_cnt *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  _QWORD *exception;
  const std::error_category *v27;
  _QWORD *v28;
  const std::error_category *v29;
  __int128 v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  unint64_t bitmap_range;
  uint64_t v37;
  _QWORD v38[20];

  v11 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  di_asif::details::table::get_bitmap((di_asif::details::table *)a1, a2, (*(_QWORD *)(*(_QWORD *)a3 + 352)+ (*(_QWORD *)(v11 + 48) + *(_QWORD *)(v11 + 48) * *((_QWORD *)a3 + 1))/ (unint64_t)(*(_QWORD *)(v11 + 48) + 1)* *(unsigned int *)(v11 + 20))/ *(unsigned __int16 *)(v11 + 18), 0, 1, (unint64_t *)&v30);
  if (!(_QWORD)v30 || *(_BYTE *)(v30 + 344))
  {
    *(_QWORD *)&v34 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((_QWORD *)&v34 + 1) = 47;
    v35 = 16;
    di_log::logger<di_log::log_printer<436ul>>::logger(&bitmap_range, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Can't load bitmap while setting range", 37);
    di_log::logger<di_log::log_printer<436ul>>::~logger((uint64_t)&bitmap_range);
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v27 = std::generic_category();
    exception[1] = 5;
    exception[2] = v27;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't load bitmap while setting range";
  }
  v12 = (a6 & 0xFF00000000) == 0 || (_DWORD)a6 == 3;
  v13 = v12;
  if (!v12)
  {
    if (*(_BYTE *)(v30 + 224))
      v14 = v30 + 40;
    else
      v14 = 0;
    bitmap_range = di_asif::details::table_entry_data::get_bitmap_range(a3);
    di_asif::details::map_element::set_range(v14, (di_asif::details::table *)a1, (unsigned int *)&bitmap_range, a6);
  }
  if ((_QWORD)v30)
  {
    if (*(_BYTE *)(v30 + 224))
      v15 = v30 + 40;
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  di_asif::details::map_element::set_range(v15, (di_asif::details::table *)a1, a4, a5);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v30);
  if ((v13 & 1) != 0)
    return;
  v16 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(v17 + 48);
  di_asif::details::table_entry_map::table_entry_map(&bitmap_range, (di_asif::details::table *)a1, v18+ (v18 + 1)* (((*(_QWORD *)(*(_QWORD *)a3 + 352)+ (*(_QWORD *)(v16 + 48) + *(_QWORD *)(v16 + 48) * *((_QWORD *)a3 + 1))/ (unint64_t)(*(_QWORD *)(v16 + 48) + 1)* *(unsigned int *)(v16 + 20))/ *(unsigned __int16 *)(v16 + 18)- *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v17 + 18))/ (v18* (unint64_t)(*(_DWORD *)(v17 + 20) / *(unsigned __int16 *)(v17 + 18)))));
  v32 = bitmap_range;
  v33 = v37;
  v19 = (ref::ref_cnt *)(*(_QWORD *)(bitmap_range + 56) + 16 * v37);
  v20 = ref::ref_cnt::get(v19);
  *(_QWORD *)&v34 = &off_24CF07518;
  *((_QWORD *)&v34 + 1) = v19;
  LOBYTE(v35) = v20;
  if (!v20)
  {
    *(_QWORD *)&v30 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((_QWORD *)&v30 + 1) = 47;
    v31 = 16;
    di_log::logger<di_log::log_printer<450ul>>::logger(&bitmap_range, &v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Couldn't lock entry ", 20);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<450ul>>,di_asif::details::table_entry_map,0>((uint64_t)&bitmap_range);
    di_log::logger<di_log::log_printer<450ul>>::~logger((uint64_t)&bitmap_range);
    v28 = __cxa_allocate_exception(0x40uLL);
    *v28 = &off_24CF07908;
    v29 = std::generic_category();
    v28[1] = 4294967282;
    v28[2] = v29;
    *((_BYTE *)v28 + 24) = 0;
    *((_BYTE *)v28 + 48) = 0;
    v28[7] = "Couldn't lock entry";
  }
  v21 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1) + 8);
  v22 = *v21;
  v23 = __ldaxr(v21);
  if (v23 != v22)
  {
    __clrex();
LABEL_25:
    while (1)
    {
      v24 = __ldaxr(v21);
      if (v24 != v23)
        break;
      if (__stlxr(v23 | 0xC000000000000000, v21))
        goto LABEL_29;
      v25 = 1;
LABEL_30:
      v23 = v24;
      if (v25)
        goto LABEL_31;
    }
    __clrex();
LABEL_29:
    v25 = 0;
    goto LABEL_30;
  }
  if (__stlxr(v22 | 0xC000000000000000, v21))
    goto LABEL_25;
LABEL_31:
  atomic_store(1u, (unsigned int *)(a1 + 96));
  ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&v34);
}

void sub_212F555C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<436ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<436ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF02AA8;
  a1[45] = &unk_24CF02BA8;
  a1[46] = &unk_24CF02BD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF02AA8;
  a1[45] = &unk_24CF02B30;
  a1[46] = &unk_24CF02B58;
  return a1;
}

void sub_212F5569C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<436ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_asif::details::map_element::set_range(uint64_t a1, di_asif::details::table *a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *result;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];

  v6 = *a3;
  v7 = a3[1];
  LOWORD(v11[0]) = a4 & 1 | (((a4 >> 1) & 1) << 8);
  result = (_QWORD *)lock_free::bitmap_t::update_pair_bits(a1 + 32, v6, v7, (unsigned __int8 *)v11);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 113) = 1;
    result = di_asif::details::table_entry_map::table_entry_map(v11, a2, *(_QWORD *)a1);
    v9 = (unint64_t *)(*(_QWORD *)(v11[0] + 56) + 16 * v11[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 | 0x8000000000000000, v9));
  }
  return result;
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<450ul>>,di_asif::details::table_entry_map,0>(uint64_t a1)
{
  _QWORD *v2;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 360), (uint64_t)"table entry map@", 16);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" = offset = ", 12);
  std::ostream::operator<<();
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<450ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<450ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF02CC8;
  a1[45] = &unk_24CF02DC8;
  a1[46] = &unk_24CF02DF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF02CC8;
  a1[45] = &unk_24CF02D50;
  a1[46] = &unk_24CF02D78;
  return a1;
}

void sub_212F5589C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<450ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_asif::details::table::update_map_entry(di_asif::details::table *this, uint64_t a2, unint64_t a3)
{
  _QWORD *result;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  _QWORD v14[2];

  result = di_asif::details::table_entry_map::table_entry_map(v14, this, a2);
  v6 = *(unsigned int *)(*(_QWORD *)(v14[0] + 8) + 20);
  v7 = (unint64_t *)(*(_QWORD *)(v14[0] + 56) + 16 * v14[1] + 8);
  if (v6 > a3)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 & 0xFF80000000000000, v7));
    goto LABEL_14;
  }
  v9 = *v7;
  v10 = __ldxr(v7);
  v11 = a3 / v6;
  if (v10 != v9)
  {
    __clrex();
LABEL_8:
    while (1)
    {
      v12 = __ldxr(v7);
      if (v12 != v10)
        break;
      if (__stxr(v10 & 0xFF80000000000000 | v11, v7))
        goto LABEL_12;
      v13 = 1;
LABEL_13:
      v10 = v12;
      if (v13)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v13 = 0;
    goto LABEL_13;
  }
  if (__stxr(v9 & 0xFF80000000000000 | v11, v7))
    goto LABEL_8;
LABEL_14:
  atomic_store(1u, (unsigned int *)this + 24);
  return result;
}

__n128 di_asif::details::table::make_unmap_iterators@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v13;
  __n128 result;
  _OWORD v15[5];

  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)v15, a1, a2, a3, a4, a5, a6, 0);
  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)(a7 + 80), a1, a2, a3, a4, a6, a6, 0);
  v13 = v15[3];
  *(_OWORD *)(a7 + 32) = v15[2];
  *(_OWORD *)(a7 + 48) = v13;
  *(_OWORD *)(a7 + 64) = v15[4];
  result = (__n128)v15[1];
  *(_OWORD *)a7 = v15[0];
  *(__n128 *)(a7 + 16) = result;
  return result;
}

void di_asif::details::dir::defrag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::chrono::steady_clock::time_point v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::system_clock::time_point v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8;
  unint64_t v9;
  int v10;
  di_asif::details::table *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::unique_lock<std::mutex> __lk;
  _QWORD v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = *(_QWORD *)(a1 + 24);
  v18[0] = off_24CEFD000;
  v18[1] = v3;
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 72))(*(_QWORD *)(v3 + 16));
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_41;
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 3680);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 3680));
    while (!*(_BYTE *)(a1 + 16) && !*(_BYTE *)(a1 + 3672))
      std::condition_variable::wait((std::condition_variable *)(a1 + 3624), &__lk);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (!*(_BYTE *)(a1 + 16) && v4.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_)
    {
      v5.__d_.__rep_ = v4.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v6.__d_.__rep_)
        {
          v7 = 0;
          goto LABEL_18;
        }
        if (v6.__d_.__rep_ < 1)
        {
          if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            goto LABEL_17;
          v7 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            v7 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_18;
          }
LABEL_17:
          v7 = 1000 * v6.__d_.__rep_;
LABEL_18:
          if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
            std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 3624), &__lk, v8);
            std::chrono::steady_clock::now();
            goto LABEL_22;
          }
        }
        v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
        goto LABEL_21;
      }
LABEL_22:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_)
        break;
    }
    *(_BYTE *)(a1 + 3672) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      v9 = 0;
      v10 = 0;
      do
      {
        if (*(_BYTE *)(a1 + 16))
          break;
        v10 |= di_asif::details::dir::defrag_table((di_asif::details::dir *)a1, (di_asif::details::ContextASIF *)v18, v9) == 0;
        di_asif::details::dir::get_table((di_asif::details::dir *)a1, (di_asif::details::ContextASIF *)v18, v9, 0, 1, (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8])
            v11 = (di_asif::details::table *)&__lk.__m_->__m_.__opaque[32];
          else
            v11 = 0;
          v10 |= di_asif::details::table::defrag(v11, (di_asif::details::ContextASIF *)v18);
        }
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&__lk);
        ++v9;
      }
      while (v9 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3);
      if ((v10 & 1) != 0)
      {
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0))
          DiskImage::Context::terminate_di((DiskImage::Context *)v18);
        v12 = *(_QWORD *)(a2 + 24);
        if (!v12)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v18);
      }
    }
  }
  while (!*(_BYTE *)(a1 + 16));
LABEL_41:
  v18[0] = off_24CEFD000;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_212F55DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  di_log::logger<di_log::log_printer<547ul>>::~logger((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x212F55E20);
}

void sub_212F55E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  *(_QWORD *)(v12 - 120) = off_24CEFD000;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::dir_base::create_context@<X0>(di_asif::details::dir_base *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *a2 = off_24CEFD000;
  a2[1] = v2;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 72))(*(_QWORD *)(v2 + 16));
}

uint64_t di_asif::details::dir::defrag_table(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::bad_alloc *exception;
  std::bad_alloc *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unint64_t *)this + 1);
  v4 = *((unsigned int *)this + 5);
  v5 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * a3) * v4;
  v26 = v5;
  if (v5 && 3 * v5 > 4 * v3 * v4)
  {
    v9 = (unint64_t *)(*((_QWORD *)this + 16) + 8 * a3);
    ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag(v9, a3, &v25);
    if (v25 && !*(_BYTE *)(v25 + 520))
    {
      v11 = *(_QWORD *)(v25 + 464);
      if (v11)
      {
        v27 = (char *)v25;
        (*(void (**)(uint64_t, char **, unint64_t *))(*(_QWORD *)v11 + 48))(v11, &v27, &v25);
      }
      ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag(v9, a3, (unint64_t *)&v27);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v25, (unint64_t *)&v27);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v27);
      if (v25)
      {
        if (!*(_BYTE *)(v25 + 520))
        {
LABEL_15:
          (*(void (**)(di_asif::details::dir *))(*(_QWORD *)this + 24))(this);
LABEL_16:
          v10 = 4294967248;
LABEL_17:
          ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v25);
          return v10;
        }
      }
    }
    ref::Allocator<di_asif::details::table,unsigned long long>::allocate((uint64_t)this + 280, (ref::details **)a3, 1, (unint64_t *)&v27);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v25, (unint64_t *)&v27);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v27);
    if (!v25 || *(_BYTE *)(v25 + 520) || (v13 = atomic_load((unsigned int *)(v25 + 24)), v13 == 2))
    {
      if (!v25 || *(_BYTE *)(v25 + 520))
        goto LABEL_16;
      goto LABEL_15;
    }
    v14 = (char *)malloc_type_valloc(*((unsigned int *)this + 5), 0xF8ED6DDuLL);
    if (!v14)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v24 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v24, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v29[0] = &off_24CF03100;
    v30 = v29;
    v27 = v14;
    std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v28, (uint64_t)v29);
    v15 = v30;
    if (v30 == v29)
    {
      v16 = 4;
      v15 = v29;
    }
    else
    {
      if (!v30)
      {
LABEL_26:
        v17 = *((unsigned int *)this + 5);
        v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 40))(*((_QWORD *)a2 + 2));
        if (v18 - v26 >= v17)
          v19 = v17;
        else
          v19 = v18 - v26;
        v10 = di_asif::details::dir_base::move_realloc_chunk(this, a2, v27, v19, v26);
        v21 = v20;
        if (v25)
        {
          v22 = *(_QWORD *)(v25 + 464);
          if (v22)
          {
            v29[0] = v25;
            (*(void (**)(uint64_t, _QWORD *, unint64_t *))(*(_QWORD *)v22 + 48))(v22, v29, &v25);
          }
        }
        if ((v10 & 0x8000000000000000) == 0)
        {
          (*(void (**)(di_asif::details::dir *, uint64_t, uint64_t))(*(_QWORD *)this + 40))(this, *((_QWORD *)this + 10) * a3, v21);
          std::mutex::lock((std::mutex *)((char *)this + 3792));
          std::deque<unsigned long long>::emplace_back<unsigned long long &>((_QWORD *)this + 468, &v26);
          atomic_store(1u, (unsigned int *)this + 898);
          std::mutex::unlock((std::mutex *)((char *)this + 3792));
          v10 = 0;
        }
        std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v27);
        goto LABEL_17;
      }
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_26;
  }
  return 4294967274;
}

void sub_212F56158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100](&a11);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&a9);
  _Unwind_Resume(a1);
}

unint64_t *di_asif::details::dir::get_table@<X0>(di_asif::details::dir *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  unint64_t *result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  result = ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag((unint64_t *)(*((_QWORD *)this + 16) + 8 * a3), a3, a6);
  if (!*a6 || *(_BYTE *)(*a6 + 520))
  {
    di_asif::details::dir::load_create_table((uint64_t)this, a2, (ref::details **)a3, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * a3) * *((unsigned int *)this + 5), a4, a5, &v16);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(a6, &v16);
    result = ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v16);
    if (*a6 && !*(_BYTE *)(*a6 + 520))
    {
      v13 = atomic_load(a6);
      v16 = v13;
      v14 = *((_QWORD *)this + 16);
      do
        v15 = __ldaxr(&v16);
      while (__stlxr(0, &v16));
      atomic_store(v15, (unint64_t *)(v14 + 8 * a3));
    }
  }
  return result;
}

void sub_212F562AC(_Unwind_Exception *a1)
{
  unint64_t *v1;

  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(v1);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::defrag(di_asif::details::table *this, di_asif::details::ContextASIF *a2)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  BOOL i;
  int v14;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  _QWORD v18[2];
  _QWORD v19[8];
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unint64_t *)(*((_QWORD *)this + 1) + 8));
  v5 = *(unsigned int *)(*((_QWORD *)this + 1) + 20);
  v6 = (char *)malloc_type_valloc(v5, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v17 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v17, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v20[0] = &off_24CF03100;
  v22 = v20;
  v25 = v6;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v20);
  v8 = v22;
  if (v22 == v20)
  {
    v9 = 4;
    v8 = v20;
    goto LABEL_6;
  }
  if (v22)
  {
    v9 = 5;
LABEL_6:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  di_asif::details::table::make_map_entry_iterators(this, v7, (uint64_t)v20);
  v10 = 0;
  v11 = v4 * v5;
  while ((v20[0] != v23 || v20[1] != v24) && !*(_BYTE *)(*((_QWORD *)this + 1) + 16))
  {
    v12 = di_asif::details::table::defrag_map_entry(this, a2, (di_asif::details::table_entry_map *)&v21, v11, v25);
    di_asif::details::table::make_data_entry_iterators_for_map(this, (const di_asif::details::table_entry_map *)&v21, (uint64_t)v18);
    for (i = v12 == 0; ; i = v14 != 0)
    {
      v10 |= i;
      if (v18[0] == v19[3] && v18[1] == v19[4])
        break;
      if (*(_BYTE *)(*((_QWORD *)this + 1) + 16))
        break;
      v14 = di_asif::details::table::defrag_entry(this, a2, (di_asif::details::table_entry_obj *)v19, v11, v25);
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)v18);
    }
    di_asif::details::map_entry_iterator_t::operator++((uint64_t)v20);
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v25);
  return v10 & 1;
}

void sub_212F564C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<547ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<547ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF02EE8;
  a1[45] = &unk_24CF02FE8;
  a1[46] = &unk_24CF03010;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF02EE8;
  a1[45] = &unk_24CF02F70;
  a1[46] = &unk_24CF02F98;
  return a1;
}

void sub_212F56574(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<547ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void di_asif::details::dir::async_defrag(di_asif::details::dir *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 3680);
  std::mutex::lock((std::mutex *)((char *)this + 3680));
  *((_BYTE *)this + 3672) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 3624));
  std::mutex::unlock(v2);
}

uint64_t di_asif::details::table::defrag_entry(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_obj *a3, uint64_t a4, char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  void (**v14)(ref::details::ref_cnt_set_handle *__hidden);
  unint64_t *v15;
  char v16;
  uint64_t v17;

  v5 = *((_QWORD *)a3 + 1);
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  v7 = (*(_QWORD *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4))
    return 4294967274;
  v9 = (unint64_t *)(v6 + 16 * v5);
  if (*v9)
  {
LABEL_4:
    v16 = 0;
    v14 = &off_24CF07538;
    v15 = v9;
    v17 = 0;
    (*(void (**)(_QWORD, di_asif::details::ContextASIF *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), a2);
    ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v14);
    return 4294967282;
  }
  while (1)
  {
    v12 = __ldaxr(v9);
    if (!v12)
      break;
    __clrex();
LABEL_10:
    if (v12)
      goto LABEL_4;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v9))
    goto LABEL_10;
  v16 = 1;
  v14 = &off_24CF07538;
  v15 = v9;
  v17 = 0;
  v13 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
      * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 20);
  v10 = di_asif::details::table::defrag_entry_locked(this, a2, a3, v13, a5);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v14);
  if ((v10 & 0x80000000) == 0)
  {
    atomic_store(1u, (unsigned int *)this + 24);
    di_asif::details::table::return_chunk(this, v13);
  }
  return v10;
}

void sub_212F56764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&a9);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::defrag_entry_locked(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_obj *a3, uint64_t a4, char *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;

  if (!a4)
    return 0;
  v10 = *(unsigned int *)(*((_QWORD *)this + 1) + 20);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 40))(*((_QWORD *)a2 + 2));
  if (v11 - a4 >= v10)
    v12 = v10;
  else
    v12 = v11 - a4;
  result = di_asif::details::dir_base::move_realloc_chunk(*((di_asif::details::dir_base **)this + 1), a2, a5, v12, a4);
  if ((result & 0x8000000000000000) == 0)
  {
    di_asif::details::table_entry_obj::set_offset(a3, v14);
    return 0;
  }
  return result;
}

uint64_t di_asif::details::dir_base::move_realloc_chunk(di_asif::details::dir_base *this, di_asif::details::ContextASIF *a2, char *a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t space;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  int v28;
  _QWORD v29[45];
  uint64_t v30;
  _BYTE v31[152];
  char *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v10 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v32 = a3;
  v33 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = a4;
  v35 = a5;
  v36 = a4;
  v37 = 0;
  v13 = (*(uint64_t (**)(_QWORD, char **))(**((_QWORD **)a2 + 2) + 88))(*((_QWORD *)a2 + 2), &v32);
  if (v13 != a4)
  {
    *(_QWORD *)&v27 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((_QWORD *)&v27 + 1) = 46;
    v28 = 16;
    di_log::logger<di_log::log_printer<2061ul>>::logger(v29, &v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Can't read for defrag", 21);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf((uint64_t)v29);
    MEMORY[0x2199A89AC](v31);
    if (v13 < 0)
      v22 = v13;
    else
      v22 = -5;
    goto LABEL_21;
  }
  space = di_asif::details::dir_base::allocate_space(this, a2, 0);
  if (!space)
  {
    a4 = -28;
    goto LABEL_23;
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = v33;
  v32 = a3;
  v33 = v15;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = a4;
  v35 = space;
  v36 = a4;
  v37 = 0;
  v21 = (*(uint64_t (**)(_QWORD, char **))(**((_QWORD **)a2 + 2) + 80))(*((_QWORD *)a2 + 2), &v32);
  if (v21 != a4)
  {
    *(_QWORD *)&v27 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((_QWORD *)&v27 + 1) = 46;
    v28 = 16;
    di_log::logger<di_log::log_printer<2071ul>>::logger(v29, &v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Can't write table for defrag", 28);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf((uint64_t)v29);
    MEMORY[0x2199A89AC](v31);
    di_asif::details::dir_base::insert_space(this, space, a2);
    if (v21 < 0)
      v22 = v21;
    else
      v22 = -5;
LABEL_21:
    a4 = -(uint64_t)-v22;
  }
LABEL_23:
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return a4;
}

void sub_212F56A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<2071ul>>::~logger((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 112);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::defrag_map_entry(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_map *a3, uint64_t a4, char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  void (**v25)(ref::details::ref_cnt_set_handle *__hidden);
  unint64_t *v26;
  char v27;
  uint64_t v28;
  unint64_t v29;

  v5 = *((_QWORD *)a3 + 1);
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  v7 = (*(_QWORD *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4))
    return 4294967274;
  v9 = (unint64_t *)(v6 + 16 * v5);
  if (*v9)
  {
LABEL_4:
    v27 = 0;
    v25 = &off_24CF07538;
    v26 = v9;
    v28 = 0;
    (*(void (**)(_QWORD, di_asif::details::ContextASIF *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), a2);
    ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v25);
    return 4294967274;
  }
  while (1)
  {
    v15 = __ldaxr(v9);
    if (!v15)
      break;
    __clrex();
LABEL_10:
    if (v15)
      goto LABEL_4;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v9))
    goto LABEL_10;
  v27 = 1;
  v25 = &off_24CF07538;
  v26 = v9;
  v28 = 0;
  v16 = *((_QWORD *)this + 1);
  v17 = *(unsigned __int16 *)(v16 + 18);
  v18 = ((*(_QWORD *)(*(_QWORD *)a3 + 352)
        + *((_QWORD *)a3 + 1)
        / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 48) + 1)
        * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 48)
        * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 20))
       / v17
       - *((_QWORD *)this + 44) / v17)
      / (*(_QWORD *)(v16 + 48)
       * (unint64_t)(*(_DWORD *)(v16 + 20) / v17));
  v19 = di_asif::details::table::bitmap_idx_to_tag(this, v18);
  ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag((unint64_t *)(*((_QWORD *)this + 9) + 8 * v18), v19, &v24);
  if (!v24 || *(_BYTE *)(v24 + 344))
    goto LABEL_14;
  v20 = *(_QWORD *)(v24 + 288);
  if (v20)
  {
    v29 = v24;
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &v29, &v24);
  }
  ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag((unint64_t *)(*((_QWORD *)this + 9) + 8 * v18), v19, &v29);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v24, &v29);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v29);
  if (!v24 || *(_BYTE *)(v24 + 344))
  {
LABEL_14:
    (*(void (**)(unint64_t *__return_ptr, _QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 1)
                                                                                              + 32))(&v29, *((_QWORD *)this + 1), v19, 1);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v24, &v29);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v29);
    if (!v24 || *(_BYTE *)(v24 + 344) || (v22 = atomic_load((unsigned int *)(v24 + 24)), v22 == 2))
    {
      if (v24 && !*(_BYTE *)(v24 + 344))
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
        v10 = 4294967248;
      }
      else
      {
        v10 = 4294967274;
      }
    }
    else
    {
      v7 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 56) + 16 * *((_QWORD *)a3 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 20);
      v10 = di_asif::details::table::defrag_entry_locked(this, a2, a3, v7, a5);
    }
    if (v24)
    {
      if (!*(_BYTE *)(v24 + 344))
      {
        v23 = *(_QWORD *)(v24 + 288);
        if (v23)
        {
          v29 = v24;
          (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v23 + 48))(v23, &v29, &v24);
        }
      }
    }
    v21 = 1;
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
    v21 = 0;
    v10 = 4294967274;
  }
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v24);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v25);
  if (!v21)
    return 4294967248;
  if (!(_DWORD)v10)
  {
    atomic_store(1u, (unsigned int *)this + 24);
    di_asif::details::table::return_chunk(this, v7);
  }
  return v10;
}

void sub_212F56E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&a9);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&a10);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::make_map_entry_iterators@<X0>(di_asif::details::table *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  char v8;

  v5 = *((_QWORD *)this + 44);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 80) + v5;
  if (v5 >= v6)
  {
    v8 = 0;
    result = 0;
  }
  else
  {
    result = di_asif::details::table::get_map_entry_for_offset(this, *((_QWORD *)this + 44));
    v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 80) + *((_QWORD *)this + 44);
    v8 = 1;
  }
  *(_QWORD *)a3 = this;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = a2;
  *(_BYTE *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = this;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  return result;
}

uint64_t di_asif::details::table::make_data_entry_iterators_for_map@<X0>(di_asif::details::table *this@<X0>, const di_asif::details::table_entry_map *a2@<X1>, uint64_t a3@<X8>)
{
  const di_asif::details::table_entry_map *v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t data_entry_for_offset;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  char v23;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 352)
     + *((_QWORD *)a2 + 1)
     / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 48) + 1)
     * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 48)
     * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 20);
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 44) + *(_QWORD *)(v7 + 80);
  if (v6 >= v8)
  {
    v12 = 0;
    v11 = 0;
    v17 = 0;
    v16 = *(_QWORD *)(*(_QWORD *)a2 + 352)
        + *((_QWORD *)a2 + 1)
        / (unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 48) + 1)
        * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 48)
        * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 20);
  }
  else
  {
    data_entry_for_offset = di_asif::details::table::get_data_entry_for_offset(this, v6);
    v3 = a2;
    v11 = data_entry_for_offset & 0xFFFFFFFFFFFFFF00;
    v12 = data_entry_for_offset;
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    v14 = *(_QWORD *)(v13 + 48);
    v15 = *(unsigned int *)(v13 + 20);
    v7 = *((_QWORD *)this + 1);
    v16 = *(_QWORD *)(*(_QWORD *)a2 + 352) + *((_QWORD *)a2 + 1) / (unint64_t)(v14 + 1) * v14 * v15;
    v8 = *((_QWORD *)this + 44) + *(_QWORD *)(v7 + 80);
    v17 = 1;
  }
  v18 = *(unsigned __int16 *)(v7 + 18);
  v19 = *(_DWORD *)(v7 + 20) / v18;
  v20 = *(_QWORD *)(v7 + 48);
  v21 = v16 + v18 * (unint64_t)v19 * v20;
  if (v21 >= v8)
  {
    v23 = 0;
    result = 0;
  }
  else
  {
    result = di_asif::details::table::get_data_entry_for_offset(this, v16 + v18 * (unint64_t)v19 * v20);
    v23 = 1;
  }
  *(_QWORD *)a3 = this;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v11 | v12;
  *(_QWORD *)(a3 + 24) = v3;
  *(_BYTE *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = this;
  *(_QWORD *)(a3 + 48) = v21;
  *(_QWORD *)(a3 + 56) = result;
  *(_QWORD *)(a3 + 64) = a2;
  *(_BYTE *)(a3 + 72) = v23;
  return result;
}

void di_asif::details::dir::~dir(di_asif::details::dir *this)
{
  std::mutex *v2;
  void *v3;
  void *v4;
  di_asif::details::dir *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24CF025C0;
  v2 = (std::mutex *)((char *)this + 3680);
  std::mutex::lock((std::mutex *)((char *)this + 3680));
  *((_BYTE *)this + 16) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 3624));
  std::mutex::unlock(v2);
  std::thread::join((std::thread *)this + 452);
  std::mutex::~mutex((std::mutex *)((char *)this + 3792));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((_QWORD *)this + 468);
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 3624));
  std::thread::~thread((std::thread *)this + 452);
  std::mutex::~mutex((std::mutex *)((char *)this + 3528));
  ref::Allocator<di_asif::details::map_element,unsigned long long>::~Allocator((uint64_t)this + 2080);
  ref::Allocator<di_asif::details::table,unsigned long long>::~Allocator((uint64_t)this + 280);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (di_asif::details::dir *)*((_QWORD *)this + 14);
  if (v5 == (di_asif::details::dir *)((char *)this + 88))
  {
    v6 = 4;
    v5 = (di_asif::details::dir *)((char *)this + 88);
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

{
  di_asif::details::dir::~dir(this);
  JUMPOUT(0x2199A8A18);
}

void space_allocators::FixedSize::~FixedSize(space_allocators::FixedSize *this)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

__n128 di_asif::details::dir::make_unmap_iterators@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  __n128 result;
  _OWORD v10[5];

  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)v10, a2, a3, *(_QWORD *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), 0, *(_QWORD *)(a1 + 120), 0);
  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)(a4 + 80), a2, a3, *(_QWORD *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 120), 0);
  v8 = v10[3];
  *(_OWORD *)(a4 + 32) = v10[2];
  *(_OWORD *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 64) = v10[4];
  result = (__n128)v10[1];
  *(_OWORD *)a4 = v10[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

void di_asif::details::table::check_if_map_element_needed(di_asif::details::table *this, di_asif::details::ContextASIF *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  unint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;

  di_asif::details::table_entry_map::table_entry_map(&v39, this, a3);
  v43 = v39;
  if ((*(_QWORD *)(*(_QWORD *)(v39 + 56) + 16 * *((_QWORD *)&v39 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(_QWORD *)(v39 + 8) + 20))
  {
    di_asif::details::table::make_data_entry_iterators_for_map(this, (const di_asif::details::table_entry_map *)&v43, (uint64_t)&v39);
    v36 = v39;
    v37 = v40;
    v38 = v41;
    while (v36 != v42)
    {
      v5 = atomic_load((unint64_t *)(*(_QWORD *)(v37 + 56) + 16 * *((_QWORD *)&v37 + 1) + 8));
      if (v5 >> 62 == 3)
        return;
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)&v36);
    }
    if ((*(_QWORD *)(*(_QWORD *)(v43 + 56) + 16 * *((_QWORD *)&v43 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(_QWORD *)(v43 + 8) + 20))
    {
      v36 = v39;
      if (v38 == v41)
      {
        if ((_BYTE)v38)
          *((_QWORD *)&v37 + 1) = *((_QWORD *)&v40 + 1);
      }
      else if ((_BYTE)v38)
      {
        LOBYTE(v38) = 0;
      }
      else
      {
        v37 = v40;
        LOBYTE(v38) = 1;
      }
      v33 = 0;
      v34 = 0;
      v35 = 0;
      while (v36 != v42)
      {
        v6 = (unint64_t *)(*(_QWORD *)(v37 + 56) + 16 * *((_QWORD *)&v37 + 1));
        do
        {
          if (!*v6)
          {
            do
            {
              v7 = __ldaxr(v6);
              if (v7)
              {
                __clrex();
              }
              else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v6))
              {
                v8 = 1;
                goto LABEL_25;
              }
            }
            while (!v7);
          }
        }
        while ((ref::ref_cnt::wait_fn((ref::ref_cnt *)v6, (const void *)1) & 1) != 0);
        v8 = 0;
LABEL_25:
        v31 = v8;
        v29 = (void **)&off_24CF07538;
        v30 = v6;
        v32 = 0;
        v9 = (_QWORD *)v34;
        if (v34 >= v35)
        {
          v10 = std::vector<ref::details::ref_cnt_set_handle>::__emplace_back_slow_path<ref::details::ref_cnt_set_handle>(&v33, (uint64_t)&v29);
        }
        else
        {
          ref::details::ref_cnt_handle::ref_cnt_handle(v34, (uint64_t)&v29);
          *v9 = &off_24CF07538;
          v9[3] = v32;
          v10 = (uint64_t)(v9 + 4);
        }
        v34 = v10;
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v29);
        v11 = atomic_load((unint64_t *)(*(_QWORD *)(v37 + 56) + 16 * *((_QWORD *)&v37 + 1) + 8));
        if (v11 >> 62 == 3)
          goto LABEL_54;
        di_asif::details::data_entry_iterator_t::operator++((uint64_t)&v36);
      }
      v12 = (unint64_t *)(*(_QWORD *)(v43 + 56) + 16 * *((_QWORD *)&v43 + 1));
      if ((v12[1] & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(_QWORD *)(v43 + 8) + 20))
      {
        do
        {
          if (!*v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              if (v13)
              {
                __clrex();
              }
              else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v12))
              {
                v14 = 1;
                goto LABEL_40;
              }
            }
            while (!v13);
          }
        }
        while ((ref::ref_cnt::wait_fn((ref::ref_cnt *)v12, (const void *)1) & 1) != 0);
        v14 = 0;
LABEL_40:
        v31 = v14;
        v29 = (void **)&off_24CF07538;
        v30 = v12;
        v32 = 0;
        v15 = v43;
        v16 = *(_QWORD *)(v43 + 8);
        v17 = *(unsigned int *)(v16 + 20);
        if ((*(_QWORD *)(*(_QWORD *)(v43 + 56) + 16 * *((_QWORD *)&v43 + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v17)
        {
          di_asif::details::table::get_bitmap(this, a2, (*(_QWORD *)(v43 + 352)+ *(_QWORD *)(v16 + 48) * v17 * (*((_QWORD *)&v43 + 1) / (unint64_t)(*(_QWORD *)(v16 + 48) + 1)))/ *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18), 1, 1, &v28);
          if (v28 && !*(_BYTE *)(v28 + 344))
          {
            if (*(_BYTE *)(v28 + 224))
              v18 = v28 + 40;
            else
              v18 = 0;
            v19 = *(_QWORD *)(v18 + 16);
            *(_QWORD *)(v18 + 16) = 0;
            *(_QWORD *)(v18 + 24) = v19;
            *(_BYTE *)(v18 + 112) = 0;
            if (v28)
            {
              v20 = *(_QWORD *)(v28 + 288);
              if (v20)
              {
                v44 = v28;
                (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &v44, &v28);
              }
            }
            v21 = *((_QWORD *)this + 1);
            v22 = *(unsigned __int16 *)(v21 + 18);
            v23 = (*(_QWORD *)(v15 + 352)
                 + *((_QWORD *)&v15 + 1)
                 / (unint64_t)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 48) + 1)
                 * *(_QWORD *)(*(_QWORD *)(v15 + 8) + 48)
                 * *(unsigned int *)(*(_QWORD *)(v15 + 8) + 20))
                / v22
                - *((_QWORD *)this + 44) / v22;
            v24 = *(_QWORD *)(v21 + 48) * (*(_DWORD *)(v21 + 20) / v22);
            v44 = 0;
            v25 = *((_QWORD *)this + 9);
            v26 = v23 / v24;
            do
              v27 = __ldaxr(&v44);
            while (__stlxr(0, &v44));
            atomic_store(v27, (unint64_t *)(v25 + 8 * v26));
          }
          ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v28);
        }
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v29);
      }
LABEL_54:
      v29 = (void **)&v33;
      std::vector<ref::details::ref_cnt_set_handle>::__destroy_vector::operator()[abi:ne180100](&v29);
    }
  }
}

void sub_212F57660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&a9);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&a10);
  a10 = (void **)&a14;
  std::vector<ref::details::ref_cnt_set_handle>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *di_asif::details::operator<<(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  int v8;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"table entry data@", 17);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" = offset = ", 12);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", flags = ", 10);
  v6 = atomic_load((unint64_t *)(*(_QWORD *)(*a2 + 56) + 16 * a2[1] + 8));
  v8 = v6 >> 62;
  return di_asif::details::operator<<(v5, &v8);
}

__n128 di_asif::details::table::unmap@<Q0>(uint64_t a1@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t data_entry_for_offset;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ref::ref_cnt *v35;
  unint64_t v36;
  ref::ref_cnt *v37;
  unint64_t v38;
  ref::ref_cnt *v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __n128 result;
  _QWORD *exception;
  const std::error_category *v65;
  _QWORD *v66;
  const std::error_category *v67;
  _QWORD *v68;
  const std::error_category *v69;
  std::mutex *v71;
  int v72;
  __int128 v73;
  int v74;
  unsigned int v75[90];
  _QWORD v76[20];
  void (**v77)(ref::details::ref_cnt_handle *__hidden);
  ref::ref_cnt *v78;
  char v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  char v83;
  _BYTE v84[32];
  _BYTE v85[32];
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v71 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  di_asif::details::table::make_unmap_iterators(a3, a4, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20), *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18), *(_QWORD *)(a1 + 352), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + *(_QWORD *)(a1 + 352), (uint64_t)v84);
  v9 = 0;
  LOBYTE(v82) = 0;
  v83 = 0;
  v72 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 184);
LABEL_2:
  while (*(_QWORD *)v84 != v87
       || *(_OWORD *)&v84[8] != v88
       || *(_QWORD *)&v84[16] != *(_QWORD *)v84 + 16 * *(_QWORD *)&v84[8]
       && (*(_OWORD *)&v85[8] != v89 || *(_QWORD *)&v85[24] != v90))
  {
    v10 = *(_QWORD *)&v84[24];
    v11 = *(_QWORD *)v85;
    *(_QWORD *)&v85[8] += *(_QWORD *)&v85[24] * *(_QWORD *)v85;
    *(_QWORD *)&v84[24] = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)v84);
    *(_QWORD *)v85 = v12;
    v13 = v10 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
    data_entry_for_offset = di_asif::details::table::get_data_entry_for_offset((di_asif::details::table *)a1, v13);
    v16 = (_QWORD *)data_entry_for_offset;
    v17 = v15;
    *(_QWORD *)&v81 = data_entry_for_offset;
    *((_QWORD *)&v81 + 1) = v15;
    if (v83)
    {
      v18 = v82;
      if (*(_QWORD *)(data_entry_for_offset + 352) != *(_QWORD *)(v82 + 352) || v15 != *((_QWORD *)&v82 + 1))
      {
        v9 |= di_asif::details::table::update_entry_if_bits_in_same_state((di_asif::details::table *)a1, a2, (di_asif::details::table_entry_data *)&v82);
        v20 = *(_QWORD *)(v18 + 8);
        v21 = (*(_QWORD *)(v18 + 352)
             + (*(_QWORD *)(v20 + 48) + *(_QWORD *)(v20 + 48) * *((_QWORD *)&v82 + 1))
             / (unint64_t)(*(_QWORD *)(v20 + 48) + 1)
             * *(unsigned int *)(v20 + 20))
            / *(unsigned __int16 *)(v20 + 18);
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(v22 + 48);
        v24 = *(_DWORD *)(v22 + 20);
        v25 = *(unsigned __int16 *)(v22 + 18);
        v26 = v23 * (v24 / v25);
        v27 = *(_QWORD *)(a1 + 352) / v25;
        ++v23;
        v28 = v23 + v23 * ((v21 - v27) / v26);
        v29 = v16[1];
        if (v28 != v23
                  + v23
                  * (((v16[44]
                     + (*(_QWORD *)(v29 + 48) + *(_QWORD *)(v29 + 48) * v17)
                     / (unint64_t)(*(_QWORD *)(v29 + 48) + 1)
                     * *(unsigned int *)(v29 + 20))
                    / *(unsigned __int16 *)(v29 + 18)
                    - v27)
                   / v26)
          && (v9 & 1) != 0)
        {
          di_asif::details::table::check_if_map_element_needed((di_asif::details::table *)a1, a2, v28 - 1);
          v9 = 0;
        }
      }
      *((_QWORD *)&v82 + 1) = v17;
    }
    else
    {
      v82 = v81;
      v83 = 1;
    }
    v30 = atomic_load((unint64_t *)(v16[7] + 16 * v17 + 8));
    v31 = v30 >> 62;
    if (v30 >> 62 != 2)
    {
      v32 = *(_QWORD *)(v81 + 8);
      v33 = *(_QWORD *)(v32 + 48);
      v34 = *(unsigned int *)(v32 + 20);
      if (*(_QWORD *)(v81 + 352) + (v33 + v33 * *((_QWORD *)&v81 + 1)) / (unint64_t)(v33 + 1) * v34 == v13
        && v11 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18) == v34)
      {
        v35 = (ref::ref_cnt *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1));
        while (*(_QWORD *)v35)
        {
LABEL_28:
          if ((ref::ref_cnt::wait_fn(v35, (const void *)1) & 1) == 0)
          {
            v79 = 0;
            v78 = v35;
            v77 = &off_24CF07538;
            v80 = 0;
            *(_QWORD *)&v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
            *((_QWORD *)&v73 + 1) = 30;
            v74 = 16;
            di_log::logger<di_log::log_printer<863ul>>::logger(v75, &v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Couldn't lock entry ", 20);
            di_asif::details::operator<<(v76, &v81);
            di_log::logger<di_log::log_printer<863ul>>::~logger((uint64_t)v75);
            exception = __cxa_allocate_exception(0x40uLL);
            *exception = &off_24CF07908;
            v65 = std::generic_category();
            exception[1] = 4294967282;
            exception[2] = v65;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 48) = 0;
            exception[7] = "Couldn't lock entry";
          }
        }
        while (1)
        {
          v36 = __ldaxr((unint64_t *)v35);
          if (!v36)
            break;
          __clrex();
LABEL_27:
          if (v36)
            goto LABEL_28;
        }
        if (__stlxr(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)v35))
          goto LABEL_27;
        v79 = 1;
        v78 = v35;
        v77 = &off_24CF07538;
        v80 = 0;
        v42 = atomic_load((unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8));
        if ((_DWORD)v31 != 1 && (v42 & 0xC000000000000000) == 0x4000000000000000)
          goto LABEL_49;
        v43 = (unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8);
        v44 = *v43;
        v45 = __ldaxr(v43);
        if (v45 == v44)
        {
          if (!__stlxr(v44 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000, v43))
            goto LABEL_56;
        }
        else
        {
          __clrex();
        }
        do
        {
          while (1)
          {
            v44 = v45;
            v45 = __ldaxr(v43);
            if (v45 == v44)
              break;
            __clrex();
          }
        }
        while (__stlxr(v44 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000, v43));
LABEL_56:
        v48 = v44 >> 62 == 3;
        v49 = (unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8);
        v50 = *v49;
        v51 = *(unsigned int *)(*(_QWORD *)(v81 + 8) + 20);
        if ((_DWORD)v51)
        {
          do
            v52 = __ldxr(v49);
          while (__stxr(v52 & 0xFF80000000000000, v49));
          goto LABEL_69;
        }
        v53 = *v49;
        v54 = __ldxr(v49);
        if (v54 != v53)
        {
          __clrex();
LABEL_63:
          while (1)
          {
            v55 = __ldxr(v49);
            if (v55 != v54)
              break;
            if (__stxr(v54 & 0xFF80000000000000, v49))
              goto LABEL_67;
            v56 = 1;
LABEL_68:
            v54 = v55;
            if (v56)
              goto LABEL_69;
          }
          __clrex();
LABEL_67:
          v56 = 0;
          goto LABEL_68;
        }
        if (__stxr(v53 & 0xFF80000000000000, v49))
          goto LABEL_63;
LABEL_69:
        v9 |= v48;
        v57 = (v50 & 0x7FFFFFFFFFFFFFLL) * v51;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v77);
        if (v57)
          di_asif::details::table::return_chunk((di_asif::details::table *)a1, v57);
      }
      else
      {
        if ((v30 & 0x4000000000000000) == 0)
        {
          if (v72)
            continue;
          v37 = (ref::ref_cnt *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1));
          while (*(_QWORD *)v37)
          {
LABEL_40:
            if ((ref::ref_cnt::wait_fn(v37, (const void *)1) & 1) == 0)
            {
              v79 = 0;
              v78 = v37;
              v77 = &off_24CF07538;
              v80 = 0;
              *(_QWORD *)&v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
              *((_QWORD *)&v73 + 1) = 30;
              v74 = 16;
              di_log::logger<di_log::log_printer<900ul>>::logger(v75, &v73);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Couldn't exclusively lock entry ", 32);
              di_asif::details::operator<<(v76, &v81);
              di_log::logger<di_log::log_printer<900ul>>::~logger((uint64_t)v75);
              v66 = __cxa_allocate_exception(0x40uLL);
              *v66 = &off_24CF07908;
              v67 = std::generic_category();
              v66[1] = 4294967282;
              v66[2] = v67;
              *((_BYTE *)v66 + 24) = 0;
              *((_BYTE *)v66 + 48) = 0;
              v66[7] = "Couldn't lock entry";
            }
          }
          while (1)
          {
            v38 = __ldaxr((unint64_t *)v37);
            if (v38)
            {
              __clrex();
            }
            else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)v37))
            {
              v79 = 1;
              v78 = v37;
              v77 = &off_24CF07538;
              v80 = 0;
              v46 = atomic_load((unint64_t *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1) + 8));
              v47 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
              *(_QWORD *)v75 = di_asif::details::table::make_range_bits((di_asif::details::table *)a1, v10 * v47, v11 * v47);
              di_asif::details::table::set_entry_bitmap_range(a1, a2, (di_asif::details::table_entry_data *)&v81, v75, 2u, (v46 >> 62) | 0x100000000);
LABEL_49:
              ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&v77);
              goto LABEL_2;
            }
            if (v38)
              goto LABEL_40;
          }
        }
        v39 = (ref::ref_cnt *)(*(_QWORD *)(v81 + 56) + 16 * *((_QWORD *)&v81 + 1));
        v40 = ref::ref_cnt::get(v39);
        v77 = &off_24CF07518;
        v78 = v39;
        v79 = v40;
        if (!v40)
        {
          *(_QWORD *)&v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((_QWORD *)&v73 + 1) = 30;
          v74 = 16;
          di_log::logger<di_log::log_printer<888ul>>::logger(v75, &v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Couldn't lock entry ", 20);
          di_asif::details::operator<<(v76, &v81);
          di_log::logger<di_log::log_printer<888ul>>::~logger((uint64_t)v75);
          v68 = __cxa_allocate_exception(0x40uLL);
          *v68 = &off_24CF07908;
          v69 = std::generic_category();
          v68[1] = 4294967282;
          v68[2] = v69;
          *((_BYTE *)v68 + 24) = 0;
          *((_BYTE *)v68 + 48) = 0;
          v68[7] = "Couldn't lock entry";
        }
        v41 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 18);
        *(_QWORD *)v75 = di_asif::details::table::make_range_bits((di_asif::details::table *)a1, v10 * v41, v11 * v41);
        di_asif::details::table::set_entry_bitmap_range(a1, a2, (di_asif::details::table_entry_data *)&v81, v75, 2u, v31 | 0x100000000);
        ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&v77);
      }
    }
  }
  if (v83
    && ((di_asif::details::table::update_entry_if_bits_in_same_state((di_asif::details::table *)a1, a2, (di_asif::details::table_entry_data *)&v82) | v9) & 1) != 0)
  {
    v58 = *(_QWORD *)(v82 + 8);
    v59 = *(_QWORD *)(a1 + 8);
    v60 = *(_QWORD *)(v59 + 48);
    di_asif::details::table::check_if_map_element_needed((di_asif::details::table *)a1, a2, v60+ (v60 + 1)* (((*(_QWORD *)(v82 + 352)+ (*(_QWORD *)(v58 + 48) + *(_QWORD *)(v58 + 48) * *((_QWORD *)&v82 + 1))/ (unint64_t)(*(_QWORD *)(v58 + 48) + 1)* *(unsigned int *)(v58 + 20))/ *(unsigned __int16 *)(v58 + 18)- *(_QWORD *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v59 + 18))/ (v60* (unint64_t)(*(_DWORD *)(v59 + 20) / *(unsigned __int16 *)(v59 + 18)))));
  }
  v61 = *(_OWORD *)&v85[16];
  a5[2] = *(_OWORD *)v85;
  a5[3] = v61;
  a5[4] = v86;
  v62 = *(_OWORD *)&v84[16];
  *a5 = *(_OWORD *)v84;
  a5[1] = v62;
  std::mutex::unlock(v71);
  return result;
}

void sub_212F5808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<863ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<863ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF03188;
  a1[45] = &unk_24CF03288;
  a1[46] = &unk_24CF032B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF03188;
  a1[45] = &unk_24CF03210;
  a1[46] = &unk_24CF03238;
  return a1;
}

void sub_212F581A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<863ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<888ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<888ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF033A8;
  a1[45] = &unk_24CF034A8;
  a1[46] = &unk_24CF034D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF033A8;
  a1[45] = &unk_24CF03430;
  a1[46] = &unk_24CF03458;
  return a1;
}

void sub_212F58290(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<888ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<900ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<900ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF035C8;
  a1[45] = &unk_24CF036C8;
  a1[46] = &unk_24CF036F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF035C8;
  a1[45] = &unk_24CF03650;
  a1[46] = &unk_24CF03678;
  return a1;
}

void sub_212F58378(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<900ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

BOOL di_asif::details::table::flush(di_asif::details::table *this, di_asif::details::ContextASIF *a2)
{
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  size_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  di_asif::details::map_element *v20;
  int v21;
  ref::ref_cnt *v22;
  unint64_t v23;
  char v24;
  unint64_t *v25;
  unint64_t v26;
  di_asif::details::map_element *v27;
  int v28;
  unint64_t v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  unint64_t **v40;
  unint64_t *v41;
  char *v42;
  unint64_t *v43;
  int v44;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  const std::error_category *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  const std::error_category *v53;
  std::bad_alloc *exception;
  std::bad_alloc *v55;
  unsigned int v57;
  unint64_t v59[2];
  _QWORD v60[8];
  _QWORD v61[2];
  char v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[2];
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[6];

  v79[4] = *MEMORY[0x24BDAC8D0];
  v69 = 0u;
  v70 = 0u;
  v68 = 0u;
  v2 = (unsigned int *)((char *)this + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  v57 = v3;
  std::mutex::lock((std::mutex *)((char *)this + 280));
  v4 = v68;
  v5 = v69;
  v6 = *(_OWORD *)((char *)this + 248);
  v7 = *(_OWORD *)((char *)this + 264);
  v68 = *(_OWORD *)((char *)this + 232);
  v69 = v6;
  *(_OWORD *)((char *)this + 232) = v4;
  *(_OWORD *)((char *)this + 248) = v5;
  v8 = v70;
  v70 = v7;
  *(_OWORD *)((char *)this + 264) = v8;
  std::mutex::unlock((std::mutex *)((char *)this + 280));
  v9 = ((unint64_t)*(unsigned __int16 *)(*((_QWORD *)this + 1) + 18)
      + 8 * *(_QWORD *)(*((_QWORD *)this + 1) + 56)
      - 1)
     / *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18)
     * *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18);
  v10 = malloc_type_valloc(v9, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v55 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v55, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v73[0] = &off_24CF03100;
  v75 = (unint64_t)v73;
  v78 = (uint64_t)v10;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v79, (uint64_t)v73);
  v11 = (_QWORD *)v75;
  if ((_QWORD *)v75 == v73)
  {
    v12 = 4;
    v11 = v73;
    goto LABEL_8;
  }
  if (v75)
  {
    v12 = 5;
LABEL_8:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  v13 = v78;
  std::mutex::lock((std::mutex *)((char *)this + 168));
  di_asif::details::table::make_map_entry_iterators(this, v14, (uint64_t)v73);
  v15 = 0;
  v16 = v13 + v9;
  v67 = *((_QWORD *)this + 43);
  v66 = 0;
  *(_QWORD *)&v64 = a2;
  *((_QWORD *)&v64 + 1) = &v67;
  *(_QWORD *)&v65 = v13;
  *((_QWORD *)&v65 + 1) = &v66;
  v17 = (_QWORD *)v13;
  while (v73[0] != v76 || v73[1] != v77)
  {
    v18 = (unint64_t *)(v74[7] + 16 * v75 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 & 0x7FFFFFFFFFFFFFFFLL, v18));
    if ((v19 & 0x8000000000000000) != 0)
    {
      di_asif::details::table::get_bitmap(this, a2, (v74[44]+ v75 / (*(_QWORD *)(v74[1] + 48) + 1) * *(_QWORD *)(v74[1] + 48) * *(unsigned int *)(v74[1] + 20))/ *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18), 0, 0, v59);
      if (v59[0] && !*(_BYTE *)(v59[0] + 344))
      {
        if (*(_BYTE *)(v59[0] + 224))
          v20 = (di_asif::details::map_element *)(v59[0] + 40);
        else
          v20 = 0;
        v21 = di_asif::details::map_element::flush(v20, a2, this);
        if (v21)
        {
          DiskImage::Context::terminate_di(a2);
          v50 = __cxa_allocate_exception(0x40uLL);
          v51 = v50;
          if (v21 < 0)
            v52 = v21;
          else
            v52 = -v21;
          *v50 = &off_24CF07908;
          v53 = std::generic_category();
          v51[1] = v52;
          v51[2] = v53;
          *((_BYTE *)v51 + 24) = 0;
          *((_BYTE *)v51 + 48) = 0;
          v51[7] = "Can't flush asif, bitmap flush failed";
        }
        v66 = 1;
      }
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(v59);
    }
    v22 = (ref::ref_cnt *)(v74[7] + 16 * v75);
    while (*(_QWORD *)v22)
    {
LABEL_31:
      if ((ref::ref_cnt::wait_fn(v22, (const void *)1) & 1) == 0)
      {
        v24 = 0;
        goto LABEL_33;
      }
    }
    while (1)
    {
      v23 = __ldaxr((unint64_t *)v22);
      if (!v23)
        break;
      __clrex();
LABEL_30:
      if (v23)
        goto LABEL_31;
    }
    if (__stlxr(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)v22))
      goto LABEL_30;
    v24 = 1;
LABEL_33:
    v62 = v24;
    v61[0] = &off_24CF07538;
    v61[1] = v22;
    v63 = 0;
    v25 = (unint64_t *)(v74[7] + 16 * v75 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 & 0x7FFFFFFFFFFFFFFFLL, v25));
    di_asif::details::table_entry_map::validate((di_asif::details::table_entry_map *)&v74);
    if ((v26 & 0x8000000000000000) != 0)
    {
      di_asif::details::table::get_bitmap(this, a2, (v74[44]+ v75 / (*(_QWORD *)(v74[1] + 48) + 1) * *(_QWORD *)(v74[1] + 48) * *(unsigned int *)(v74[1] + 20))/ *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18), 1, 0, v59);
      if (v59[0] && !*(_BYTE *)(v59[0] + 344))
      {
        if (*(_BYTE *)(v59[0] + 224))
          v27 = (di_asif::details::map_element *)(v59[0] + 40);
        else
          v27 = 0;
        v28 = di_asif::details::map_element::flush(v27, a2, this);
        if (v28)
        {
          DiskImage::Context::terminate_di(a2);
          v46 = __cxa_allocate_exception(0x40uLL);
          v47 = v46;
          if (v28 < 0)
            v48 = v28;
          else
            v48 = -v28;
          *v46 = &off_24CF07908;
          v49 = std::generic_category();
          v47[1] = v48;
          v47[2] = v49;
          *((_BYTE *)v47 + 24) = 0;
          *((_BYTE *)v47 + 48) = 0;
          v47[7] = "Can't flush asif, bitmap flush failed";
        }
        v66 = 1;
      }
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(v59);
    }
    ++v15;
    if (!v57)
    {
      if (v17 != (_QWORD *)v13)
        di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()((uint64_t)&v64, (uint64_t)v17);
      v67 = *((_QWORD *)this + 43) + 8 * (v15 + v15 * *(_QWORD *)(*((_QWORD *)this + 1) + 48));
      goto LABEL_66;
    }
    di_asif::details::table::make_data_entry_iterators_for_map(this, (const di_asif::details::table_entry_map *)&v74, (uint64_t)v59);
    while (2)
    {
      if (v59[0] != v60[3] || v59[1] != v60[4])
      {
        di_asif::details::table_entry_data::validate((di_asif::details::table_entry_data *)v60);
        v29 = atomic_load((unint64_t *)(*(_QWORD *)(v60[0] + 56) + 16 * v60[1] + 8));
        *v17++ = bswap64(v29);
        v30 = operator new(0x28uLL);
        *(_QWORD *)v30 = &off_24CF05D00;
        v31 = v65;
        *(_OWORD *)(v30 + 8) = v64;
        *(_OWORD *)(v30 + 24) = v31;
        v72 = v30;
        if ((unint64_t)v17 < v16)
          goto LABEL_52;
        di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()((uint64_t)(v30 + 8), (uint64_t)v17);
        v30 = v72;
        v17 = (_QWORD *)v13;
        if (v72 != v71)
        {
          if (v72)
          {
            v17 = (_QWORD *)v13;
LABEL_52:
            v32 = 5;
LABEL_54:
            (*(void (**)(void))(*(_QWORD *)v30 + 8 * v32))();
          }
          di_asif::details::data_entry_iterator_t::operator++((uint64_t)v59);
          continue;
        }
        v30 = v71;
        v32 = 4;
        goto LABEL_54;
      }
      break;
    }
    v33 = atomic_load((unint64_t *)(v74[7] + 16 * v75 + 8));
    *v17++ = bswap64(v33);
    v34 = operator new(0x28uLL);
    *(_QWORD *)v34 = &off_24CF05D00;
    v35 = v65;
    *(_OWORD *)(v34 + 8) = v64;
    *(_OWORD *)(v34 + 24) = v35;
    v72 = v34;
    if ((unint64_t)v17 < v16)
      goto LABEL_60;
    di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()((uint64_t)(v34 + 8), (uint64_t)v17);
    v34 = v72;
    v17 = (_QWORD *)v13;
    if (v72 == v71)
    {
      v34 = v71;
      v36 = 4;
      goto LABEL_65;
    }
    if (v72)
    {
      v17 = (_QWORD *)v13;
LABEL_60:
      v36 = 5;
LABEL_65:
      (*(void (**)(void))(*(_QWORD *)v34 + 8 * v36))();
    }
LABEL_66:
    ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v61);
    di_asif::details::map_entry_iterator_t::operator++((uint64_t)v73);
  }
  if (v17 != (_QWORD *)v13)
  {
    v37 = *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18);
    v38 = v37 + ((unint64_t)v17 - v13) / v37 * v37 - ((_QWORD)v17 - v13);
    bzero(v17, v38);
    di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()((uint64_t)&v64, (uint64_t)v17 + v38);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 168));
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100](&v78);
  v39 = *((_QWORD *)&v70 + 1);
  v40 = (unint64_t **)(*((_QWORD *)&v68 + 1) + 8 * ((unint64_t)v70 >> 9));
  if ((_QWORD)v69 == *((_QWORD *)&v68 + 1))
  {
    v41 = 0;
    v43 = 0;
    v42 = (char *)(*((_QWORD *)&v68 + 1) + 8 * (((_QWORD)v70 + *((_QWORD *)&v70 + 1)) >> 9));
  }
  else
  {
    v41 = &(*v40)[v70 & 0x1FF];
    v42 = (char *)(*((_QWORD *)&v68 + 1) + 8 * (((_QWORD)v70 + *((_QWORD *)&v70 + 1)) >> 9));
    v43 = (unint64_t *)(*(_QWORD *)v42 + 8 * ((v70 + *((_QWORD *)&v70 + 1)) & 0x1FF));
  }
  di_asif::details::dir_base::insert_space<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(*((unint64_t **)this + 1), v40, v41, v42, v43, (uint64_t)a2);
  if (v39)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
  v44 = *((unsigned __int8 *)this + 100);
  if (*((_BYTE *)this + 100))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), *((_QWORD *)this + 44), *((_QWORD *)this + 43));
    *((_BYTE *)this + 100) = 0;
  }
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&v68);
  return v44 != 0;
}

void sub_212F58C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::mutex *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unint64_t a41,uint64_t a42)
{
  unsigned int *v42;
  uint64_t v43;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  unsigned int v54;

  std::mutex::unlock(a12);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v43 - 136));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(a11);
    v46 = a16[33] + a16[34];
    v47 = a16[30];
    v48 = (char *)(v47 + 8 * (v46 >> 9));
    if (a16[31] == v47)
      v49 = 0;
    else
      v49 = *(_QWORD *)v48 + 8 * (v46 & 0x1FF);
    v50 = (char *)(a38 + 8 * (a41 >> 9));
    if (a39 == a38)
    {
      v51 = 0;
      v52 = 0;
      v53 = (char *)(a38 + 8 * ((a42 + a41) >> 9));
    }
    else
    {
      v51 = (char *)(*(_QWORD *)v50 + 8 * (a41 & 0x1FF));
      v53 = (char *)(a38 + 8 * ((a42 + a41) >> 9));
      v52 = (char *)(*(_QWORD *)v53 + 8 * ((a42 + a41) & 0x1FF));
    }
    std::deque<unsigned long long>::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(a10, v48, v49, v50, v51, v53, v52);
    std::mutex::unlock(a11);
    do
      v54 = __ldaxr(v42);
    while (__stlxr(v54 | ((_DWORD)a15 != 0), v42));
    __cxa_rethrow();
  }
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&a37);
  _Unwind_Resume(a1);
}

void sub_212F58DF4()
{
  __cxa_end_catch();
  JUMPOUT(0x212F58E10);
}

uint64_t di_asif::details::map_element::flush(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)((char *)this + 120);
  std::mutex::lock((std::mutex *)((char *)this + 120));
  v7 = di_asif::details::map_element::flush_locked(this, a2, a3, *(unsigned int *)(*((_QWORD *)a3 + 1) + 20));
  std::mutex::unlock(v6);
  return v7;
}

void sub_212F58E90(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL di_asif::details::table_entry_map::validate(di_asif::details::table_entry_map *this)
{
  unint64_t v1;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  v1 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 56) + 16 * *((_QWORD *)this + 1) + 8));
  if ((v1 & 0x7F80000000000000) != 0)
  {
    *(_QWORD *)&v3 = "di_asif::details::table_entry_map::validate() const";
    *((_QWORD *)&v3 + 1) = 43;
    v4 = 16;
    di_log::logger<di_log::log_printer<325ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimages2 - ASIF - bad map entry reserved bits ", 49);
    *(_DWORD *)((char *)&v6 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)&v6 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x2199A89AC](&v7);
  }
  return (v1 & 0x7F80000000000000) == 0;
}

void sub_212F58F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<325ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  DiskImage::Context *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const std::error_category *v20;
  DiskImage::Context *v21;
  int v22;
  DiskImagesRuntimeException *exception;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  if (**(_BYTE **)(a1 + 24))
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 16), 0);
    if (v4)
    {
      v21 = *(DiskImage::Context **)a1;
      v22 = v4;
      DiskImage::Context::terminate_di(v21);
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      if (v22 < 0)
        v24 = v22;
      else
        v24 = -v22;
      DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Can't flush asif, backend flush failed", v24);
    }
    **(_BYTE **)(a1 + 24) = 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2 - v5;
  v7 = **(_QWORD **)(a1 + 8);
  v8 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v26 = v5;
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v28 = v6;
  v29 = v7;
  v30 = v6;
  v31 = 0;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(*(_QWORD *)a1 + 16) + 80))(*(_QWORD *)(*(_QWORD *)a1 + 16), &v26);
  **(_QWORD **)(a1 + 8) += v6;
  if (v6 != v11)
  {
    v15 = *(DiskImage::Context **)a1;
    v16 = v11;
    DiskImage::Context::terminate_di(v15);
    LODWORD(v17) = v16;
    v18 = __cxa_allocate_exception(0x40uLL);
    v19 = v18;
    if ((int)v17 < 0)
      v17 = v17;
    else
      v17 = -(int)v17;
    *v18 = &off_24CF07908;
    v20 = std::generic_category();
    v19[1] = v17;
    v19[2] = v20;
    *((_BYTE *)v19 + 24) = 0;
    *((_BYTE *)v19 + 48) = 0;
    v19[7] = "Can't flush asif";
  }
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_212F59144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL di_asif::details::table_entry_data::validate(di_asif::details::table_entry_data *this)
{
  unint64_t v1;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 56) + 16 * *((_QWORD *)this + 1) + 8));
  v1 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 56) + 16 * *((_QWORD *)this + 1) + 8));
  if ((v1 & 0x3F80000000000000) != 0)
  {
    *(_QWORD *)&v3 = "di_asif::details::table_entry_data::validate() const";
    *((_QWORD *)&v3 + 1) = 44;
    v4 = 16;
    di_log::logger<di_log::log_printer<258ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimages2 - ASIF - bad reserved bits ", 39);
    *(_DWORD *)((char *)&v6 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)&v6 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x2199A89AC](&v7);
  }
  return (v1 & 0x3F80000000000000) == 0;
}

void sub_212F59248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<258ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<unsigned long long>::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(void **a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  unint64_t v7;

  if (a7 == a5)
    v7 = 0;
  else
    v7 = ((uint64_t)&a7[-*(_QWORD *)a6] >> 3) + ((a6 - a4) << 6) - ((uint64_t)&a5[-*(_QWORD *)a4] >> 3);
  return std::deque<unsigned long long>::__insert_bidirectional[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(a1, a2, a3, a4, a5, a6, a7, v7);
}

_QWORD *di_asif::details::dir_base::insert_space<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(unint64_t *a1, unint64_t **a2, unint64_t *a3, char *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(unint64_t *))(*a1 + 16))(a1);
  v18[0] = &off_24CF02A20;
  v18[1] = a6;
  v19 = v18;
  space_allocators::FixedSize::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(v12, a2, a3, (uint64_t)a4, a5, (uint64_t)v18);
  result = v19;
  if (v19 == v18)
  {
    v14 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v14 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
LABEL_6:
  if (a5 == a3)
    v15 = 0;
  else
    v15 = (((char *)a2 - a4) << 6) - (((uint64_t)a5 - *(_QWORD *)a4) >> 3) + a3 - *a2;
  v16 = a1 + 1;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + v15, v16));
  return result;
}

void sub_212F593AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t di_asif::details::table::write(di_asif::details::table *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  ref::ref_cnt *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int updated;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *exception;
  const std::error_category *v74;
  _QWORD *v75;
  const std::error_category *v76;
  _QWORD *v77;
  const std::error_category *v78;
  unint64_t v79;
  __int128 v80;
  int v81;
  _BYTE v82[16];
  char v83;
  __int128 v84;
  _BYTE *v85;
  _QWORD **p_data_entry_for_offset;
  _BYTE *v87;
  di_asif::details::table *v88;
  unint64_t v89;
  unint64_t v90;
  di_asif::details::ContextASIF *v91;
  _QWORD v92[2];
  BOOL v93;
  _QWORD v94[2];
  char v95;
  uint64_t v96;
  _BYTE v97[152];
  char v98[8];
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  _QWORD *data_entry_for_offset;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  _BYTE v108[25];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  _BYTE v119[9];
  uint64_t v120;
  char v121;

  *(_WORD *)v119 = 0;
  v121 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
  v106 = *(_QWORD *)a3;
  v107 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v108 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v108[9] = *(_OWORD *)((char *)a3 + 25);
  v109 = *((_QWORD *)a3 + 6);
  v110 = *(_OWORD *)((char *)a3 + 56);
  v111 = *(_OWORD *)((char *)a3 + 72);
  v112 = *(_OWORD *)((char *)a3 + 88);
  v113 = *((_BYTE *)a3 + 104);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  v114 = *((_QWORD *)a3 + 14);
  v115 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v79 = 0;
  v116 = *((_OWORD *)a3 + 8);
  v117 = *((_QWORD *)a3 + 18);
  v118 = *((_BYTE *)a3 + 152);
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v106, (uint64_t)a4))
  {
    data_entry_for_offset = (_QWORD *)di_asif::details::table::get_data_entry_for_offset(this, *(unint64_t *)&v108[8]);
    v105 = v13;
    v14 = data_entry_for_offset[1];
    v15 = *(_QWORD *)(v14 + 48);
    v16 = *(unsigned int *)(v14 + 20);
    v94[0] = data_entry_for_offset[44] + (v15 + v15 * v13) / (unint64_t)(v15 + 1) * v16;
    v94[1] = v94[0] + v16;
    v95 = 2;
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v106, (uint64_t)v94, (uint64_t)a4, (uint64_t)v98);
    if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)v98, (uint64_t)&v101))
    {
      *(_QWORD *)&v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((_QWORD *)&v84 + 1) = 30;
      LODWORD(v85) = 16;
      di_log::logger<di_log::log_printer<1075ul>>::logger(v94, &v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Couldn't trim entry in write ", 29);
      operator<<(&v96);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf((uint64_t)v94);
      MEMORY[0x2199A89AC](v97);
      v17 = 1;
      v18 = -34;
      goto LABEL_73;
    }
    v19 = (ref::ref_cnt *)(data_entry_for_offset[7] + 16 * v105);
    v20 = ref::ref_cnt::get(v19);
    v92[0] = &off_24CF07518;
    v92[1] = v19;
    v93 = v20;
    if (!v20)
    {
      *(_QWORD *)&v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((_QWORD *)&v84 + 1) = 30;
      LODWORD(v85) = 16;
      di_log::logger<di_log::log_printer<1081ul>>::logger(v94, &v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Couldn't lock entry ", 20);
      di_asif::details::operator<<(&v96, &data_entry_for_offset);
      di_log::logger<di_log::log_printer<1081ul>>::~logger((uint64_t)v94);
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v74 = std::generic_category();
      exception[1] = 4294967282;
      exception[2] = v74;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Couldn't lock entry";
    }
    v21 = v105;
    v22 = data_entry_for_offset[7];
    v23 = (*(_QWORD *)(v22 + 16 * v105 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(data_entry_for_offset[1] + 20);
    if (!v23)
    {
      LODWORD(v18) = di_asif::details::table::allocate_backend_space_for_entry((uint64_t)this, a2, (uint64_t)data_entry_for_offset, v105);
      if ((_DWORD)v18)
      {
        *(_QWORD *)&v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((_QWORD *)&v84 + 1) = 30;
        LODWORD(v85) = 16;
        di_log::logger<di_log::log_printer<1090ul>>::logger(v94, &v84);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"couldn't allocate space for entry ", 34);
        di_asif::details::operator<<(&v96, &data_entry_for_offset);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)" ret: ", 6);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf((uint64_t)v94);
        MEMORY[0x2199A89AC](v97);
        v18 = (int)v18;
        goto LABEL_71;
      }
      v21 = v105;
      v22 = data_entry_for_offset[7];
    }
    v24 = atomic_load((unint64_t *)(v22 + 16 * v21 + 8));
    v25 = di_asif::details::table_entry_data::write((di_asif::details::table_entry_data *)&data_entry_for_offset, a2, (const sg_vec_ns::details::sg_vec_iterator *)v98, (const sg_vec_ns::details::sg_vec_iterator *)&v101);
    v18 = v25;
    v27 = v26;
    if ((v25 & 0x8000000000000000) != 0 && (_DWORD)v25)
    {
      if (v23)
        goto LABEL_71;
      ref::details::ref_cnt_handle::upgrade_to_exclusive((ref::details::ref_cnt_handle *)v92, 0, (uint64_t)v94);
      if (!v95)
        goto LABEL_70;
      v28 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v105 + 8));
      if ((v28 & 0x4000000000000000) != 0)
        goto LABEL_70;
      v29 = (unint64_t *)(data_entry_for_offset[7] + 16 * v105 + 8);
      v30 = *v29;
      v31 = *(unsigned int *)(data_entry_for_offset[1] + 20);
      if ((_DWORD)v31)
      {
        do
          v32 = __ldxr(v29);
        while (__stxr(v32 & 0xFF80000000000000, v29));
LABEL_66:
        v48 = (v30 & 0x7FFFFFFFFFFFFFLL) * v31;
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v94);
        if (v48)
          di_asif::details::dir_base::insert_space(*((di_asif::details::dir_base **)this + 1), v48, a2);
        goto LABEL_71;
      }
      v44 = *v29;
      v45 = __ldxr(v29);
      if (v45 == v44)
      {
        if (__stxr(v44 & 0xFF80000000000000, v29))
          goto LABEL_60;
LABEL_70:
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v94);
LABEL_71:
        v17 = 1;
        goto LABEL_72;
      }
      __clrex();
LABEL_60:
      while (2)
      {
        v46 = __ldxr(v29);
        if (v46 == v45)
        {
          if (!__stxr(v45 & 0xFF80000000000000, v29))
          {
            v47 = 1;
            goto LABEL_65;
          }
        }
        else
        {
          __clrex();
        }
        v47 = 0;
LABEL_65:
        v45 = v46;
        if ((v47 & 1) != 0)
          goto LABEL_66;
        continue;
      }
    }
    v33 = v24 >> 62;
    *(_QWORD *)&v84 = &v106;
    *((_QWORD *)&v84 + 1) = a4;
    v85 = &v119[1];
    p_data_entry_for_offset = &data_entry_for_offset;
    v87 = v119;
    v88 = this;
    v89 = v25;
    v90 = v26;
    v91 = a2;
    if ((_DWORD)v33 == 1)
      goto LABEL_55;
    v34 = data_entry_for_offset[1];
    v35 = *(unsigned int *)(v34 + 20);
    if (v25 == v35
      && data_entry_for_offset[44]
       + (*(_QWORD *)(v34 + 48) + *(_QWORD *)(v34 + 48) * v105) / (unint64_t)(*(_QWORD *)(v34 + 48) + 1) * v35 == v26)
    {
      ref::details::ref_cnt_handle::upgrade_to_exclusive((ref::details::ref_cnt_handle *)v92, 0, (uint64_t)v82);
      if (!v83)
      {
        *(_QWORD *)&v80 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((_QWORD *)&v80 + 1) = 30;
        v81 = 16;
        di_log::logger<di_log::log_printer<1151ul>>::logger(v94, &v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Couldn't upgrade lock entry ", 28);
        di_asif::details::operator<<(&v96, &data_entry_for_offset);
        di_log::logger<di_log::log_printer<1151ul>>::~logger((uint64_t)v94);
        v75 = __cxa_allocate_exception(0x40uLL);
        *v75 = &off_24CF07908;
        v76 = std::generic_category();
        v75[1] = 4294967282;
        v75[2] = v76;
        *((_BYTE *)v75 + 24) = 0;
        *((_BYTE *)v75 + 48) = 0;
        v75[7] = "Couldn't upgrade lock entry";
      }
      v36 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v105 + 8));
      if ((_DWORD)v33 == 2 || (v36 & 0xC000000000000000) != 0x8000000000000000)
      {
        v37 = (unint64_t *)(data_entry_for_offset[7] + 16 * v105 + 8);
        v38 = *v37;
        v39 = __ldaxr(v37);
        if (v39 == v38)
        {
          if (!__stlxr(v38 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000, v37))
            goto LABEL_47;
        }
        else
        {
          __clrex();
        }
        do
        {
          while (1)
          {
            v38 = v39;
            v39 = __ldaxr(v37);
            if (v39 == v38)
              break;
            __clrex();
          }
        }
        while (__stlxr(v38 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000, v37));
LABEL_47:
        if (v119[0])
          v42 = 1;
        else
          v42 = v38 >> 62 == 3;
        v43 = v42;
        v119[0] = v43;
        atomic_store(1u, (unsigned int *)this + 24);
      }
LABEL_54:
      ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v82);
LABEL_55:
      v17 = 2;
      goto LABEL_56;
    }
    if ((_DWORD)v33 == 3)
    {
      v94[0] = di_asif::details::table::make_range_bits(this, v26, v25);
      di_asif::details::table::set_entry_bitmap_range((uint64_t)this, a2, (di_asif::details::table_entry_data *)&data_entry_for_offset, (unsigned int *)v94, 1u, v33 | 0x100000000);
      if (!v23)
        goto LABEL_40;
    }
    else
    {
      ref::details::ref_cnt_handle::upgrade_to_exclusive((ref::details::ref_cnt_handle *)v92, 0, (uint64_t)v82);
      if (!v83)
      {
        *(_QWORD *)&v80 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((_QWORD *)&v80 + 1) = 30;
        v81 = 16;
        di_log::logger<di_log::log_printer<1188ul>>::logger(v94, &v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Couldn't upgrade lock entry ", 28);
        di_asif::details::operator<<(&v96, &data_entry_for_offset);
        di_log::logger<di_log::log_printer<1188ul>>::~logger((uint64_t)v94);
        v77 = __cxa_allocate_exception(0x40uLL);
        *v77 = &off_24CF07908;
        v78 = std::generic_category();
        v77[1] = 4294967282;
        v77[2] = v78;
        *((_BYTE *)v77 + 24) = 0;
        *((_BYTE *)v77 + 48) = 0;
        v77[7] = "Couldn't upgrade lock entry";
      }
      v40 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v105 + 8));
      if (!((*(_QWORD *)(data_entry_for_offset[7] + 16 * v105 + 8) & 0x7FFFFFFFFFFFFFLL)
           * *(unsigned int *)(data_entry_for_offset[1] + 20)))
        goto LABEL_54;
      v41 = v40 >> 62;
      if (v40 >> 62 == 1)
        goto LABEL_54;
      v94[0] = di_asif::details::table::make_range_bits(this, v27, v18);
      di_asif::details::table::set_entry_bitmap_range((uint64_t)this, a2, (di_asif::details::table_entry_data *)&data_entry_for_offset, (unsigned int *)v94, 1u, v41 | 0x100000000);
      ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v82);
      if (!v23)
      {
LABEL_40:
        v17 = 0;
        atomic_store(1u, (unsigned int *)this + 24);
        goto LABEL_56;
      }
    }
    v17 = 0;
LABEL_56:
    v79 += v18;
    finally<di_asif::details::table::write(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally((uint64_t)&v84);
LABEL_72:
    ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v92);
LABEL_73:
    v49 = v103;
    if (v103)
    {
      v50 = (unint64_t *)&v103->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v102;
    if (v102)
    {
      v53 = (unint64_t *)&v102->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v100;
    if (v100)
    {
      v56 = (unint64_t *)&v100->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = v99;
    if (v99)
    {
      v59 = (unint64_t *)&v99->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if ((v17 | 2) != 2)
      goto LABEL_102;
  }
  if (v121)
  {
    updated = di_asif::details::table::update_entry_if_bits_in_same_state(this, a2, (di_asif::details::table_entry_data *)&v119[1]);
    v18 = v79;
    if (v119[0])
      v62 = 1;
    else
      v62 = updated;
    v119[0] = v62;
    if (v62 == 1)
    {
      v63 = *(_QWORD *)(*(_QWORD *)&v119[1] + 8);
      v64 = *((_QWORD *)this + 1);
      v65 = *(_QWORD *)(v64 + 48);
      di_asif::details::table::check_if_map_element_needed(this, a2, v65+ (v65 + 1)* (((*(_QWORD *)(*(_QWORD *)&v119[1] + 352)+ (*(_QWORD *)(v63 + 48) + *(_QWORD *)(v63 + 48) * v120)/ (unint64_t)(*(_QWORD *)(v63 + 48) + 1)* *(unsigned int *)(v63 + 20))/ *(unsigned __int16 *)(v63 + 18)- *((_QWORD *)this + 44) / (unint64_t)*(unsigned __int16 *)(v64 + 18))/ (v65* (unint64_t)(*(_DWORD *)(v64 + 20) / *(unsigned __int16 *)(v64 + 18)))));
    }
  }
  else
  {
    v18 = v79;
  }
LABEL_102:
  v66 = v115;
  if (v115)
  {
    v67 = (unint64_t *)&v115->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v107;
  if (v107)
  {
    v70 = (unint64_t *)&v107->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  return v18;
}

void sub_212F59EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)&a17);
  finally<di_asif::details::table::write(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally((uint64_t)&a21);
  ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&a30);
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair((uint64_t)&STACK[0x2C8]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x418]);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<1075ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1075ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF03A08;
  a1[45] = &unk_24CF03B08;
  a1[46] = &unk_24CF03B30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF03A08;
  a1[45] = &unk_24CF03A90;
  a1[46] = &unk_24CF03AB8;
  return a1;
}

void sub_212F5A02C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1075ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1081ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1081ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF03C28;
  a1[45] = &unk_24CF03D28;
  a1[46] = &unk_24CF03D50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF03C28;
  a1[45] = &unk_24CF03CB0;
  a1[46] = &unk_24CF03CD8;
  return a1;
}

void sub_212F5A114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1081ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1090ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1090ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF03E48;
  a1[45] = &unk_24CF03F48;
  a1[46] = &unk_24CF03F70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF03E48;
  a1[45] = &unk_24CF03ED0;
  a1[46] = &unk_24CF03EF8;
  return a1;
}

void sub_212F5A1FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1090ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_asif::details::table_entry_data::write(di_asif::details::table_entry_data *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  sg_vec_ns::details::sg_vec_iterator *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  sg_vec_ns::details::sg_vec_iterator *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  BOOL v68;
  char v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  unsigned int *v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  DiskImagesRuntimeException *exception;
  void *v110;
  uint64_t v111;
  _BYTE v113[25];
  __int128 v114;
  __int128 v115;
  char v116;
  _BYTE v117[25];
  __int128 v118;
  __int128 v119;
  char v120;
  __int128 v121;
  unint64_t v122;
  char v123;
  char v124[8];
  std::__shared_weak_count *v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  _OWORD v132[2];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  char v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  __int128 v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  _OWORD v146[2];
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  __int128 v154;
  unint64_t v155;
  char v156;
  _QWORD v157[2];
  _OWORD v158[2];
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  char v163;
  _QWORD v164[2];
  __int128 v165;
  unint64_t v166;
  char v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  char v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  __int128 v174;
  _BYTE v175[248];
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  unint64_t v179;
  sg_vec_ns::details::sg_vec_iterator *v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  char v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  __int128 v188;
  char v189;
  _QWORD v190[5];
  uint64_t v191;
  void *__p;
  __int128 v193;
  _QWORD v194[83];

  v194[80] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)(*(_QWORD *)this + 8);
  v6 = *(unsigned int *)(v5 + 20);
  if (!((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 16 * v4 + 8) & 0x7FFFFFFFFFFFFFLL) * v6))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: No data offset found (write)", 0xFFFFFFEA);
  }
  __p = (void *)(*(_QWORD *)(*(_QWORD *)this + 352)
               + (*(_QWORD *)(v5 + 48) + *(_QWORD *)(v5 + 48) * v4)
               / (unint64_t)(*(_QWORD *)(v5 + 48) + 1)
               * v6);
  *(_QWORD *)&v193 = (char *)__p + v6;
  BYTE8(v193) = 2;
  sg_vec_ns::details::sg_vec_iterator::subvec(a3, (uint64_t)&__p, (uint64_t)a4, (uint64_t)v124);
  if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)v124, (uint64_t)&v127))
  {
    v11 = -34;
  }
  else
  {
    __p = v194;
    v193 = xmmword_212FEBC40;
    v12 = *(_OWORD *)((char *)a3 + 72);
    v182 = *(_OWORD *)((char *)a3 + 56);
    v183 = v12;
    v184 = *(_OWORD *)((char *)a3 + 88);
    v185 = *((_BYTE *)a3 + 104);
    v13 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
    v186 = *((_QWORD *)a3 + 14);
    v187 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v188 = *((_OWORD *)a3 + 8);
    v16 = *((_QWORD *)a4 + 7);
    v17 = *((_QWORD *)a4 + 8);
    *(_QWORD *)&v168 = v16;
    *((_QWORD *)&v168 + 1) = v17;
    v18 = *(_OWORD *)((char *)a4 + 88);
    v169 = *(_OWORD *)((char *)a4 + 72);
    v170 = v18;
    v171 = *((_BYTE *)a4 + 104);
    v19 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
    v172 = *((_QWORD *)a4 + 14);
    v173 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = 0;
    v23 = 0;
    v111 = (uint64_t)a3 + 128;
    v174 = *((_OWORD *)a4 + 8);
    while (1)
    {
      v24 = (_QWORD)v182 == v16 && *((_QWORD *)&v182 + 1) == v17;
      if (v24 && (_QWORD)v183 == (_QWORD)v169)
        break;
      ++v23;
      v22 += 40;
      sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)&v182);
    }
    if (v19)
    {
      v25 = (unint64_t *)&v19->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v27 = v187;
    if (v187)
    {
      v28 = (unint64_t *)&v187->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (*((_QWORD *)&v193 + 1) < v23)
    {
      if (v23 >= 0x333333333333334)
        boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v10);
      v30 = operator new(v22);
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v30, v23, (_DWORD *)__p + 10 * v193, 0, 0);
    }
    v31 = *(_QWORD *)a3;
    v32 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    *(_OWORD *)v117 = *((_OWORD *)a3 + 1);
    *(_OWORD *)&v117[9] = *(_OWORD *)((char *)a3 + 25);
    v118 = *(_OWORD *)((char *)a3 + 72);
    v35 = *((_QWORD *)a3 + 6);
    v36 = *((_QWORD *)a3 + 7);
    v37 = *((_QWORD *)a3 + 8);
    v119 = *(_OWORD *)((char *)a3 + 88);
    v120 = *((_BYTE *)a3 + 104);
    v38 = *((_QWORD *)a3 + 14);
    v39 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v121 = *(_OWORD *)v111;
    v122 = *((_QWORD *)a3 + 18);
    v123 = *((_BYTE *)a3 + 152);
    v42 = *(_QWORD *)a4;
    v43 = (std::__shared_weak_count *)*((_QWORD *)a4 + 1);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    *(_OWORD *)v113 = *((_OWORD *)a4 + 1);
    *(_OWORD *)&v113[9] = *(_OWORD *)((char *)a4 + 25);
    v114 = *(_OWORD *)((char *)a4 + 72);
    v47 = *((_QWORD *)a4 + 6);
    v46 = *((_QWORD *)a4 + 7);
    v48 = *((_QWORD *)a4 + 8);
    v115 = *(_OWORD *)((char *)a4 + 88);
    v116 = *((_BYTE *)a4 + 104);
    v50 = *((_QWORD *)a4 + 14);
    v49 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = 0;
    v146[0] = *(_OWORD *)v117;
    *(_OWORD *)((char *)v146 + 9) = *(_OWORD *)&v117[9];
    v149 = v118;
    v150 = v119;
    v154 = v121;
    v132[0] = *(_OWORD *)v113;
    *(_OWORD *)((char *)v132 + 9) = *(_OWORD *)&v113[9];
    v137 = v115;
    v144 = v31;
    v145 = v32;
    v147 = v35;
    *(_QWORD *)&v148 = v36;
    *((_QWORD *)&v148 + 1) = v37;
    v151 = v120;
    v152 = v38;
    v153 = v39;
    v155 = v122;
    v156 = v123;
    v130 = v42;
    v131 = v43;
    v133 = v47;
    v134 = v46;
    v135 = v48;
    v138 = v116;
    v136 = v114;
    v139 = v50;
    v140 = v49;
    v141 = *((_OWORD *)a4 + 8);
    v143 = *((_BYTE *)a4 + 152);
    v142 = *((_QWORD *)a4 + 18);
    v54 = v142;
    LOBYTE(v182) = 0;
    v189 = 0;
    while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v144, (uint64_t)&v130))
    {
      if (v155 >= v54 || (_OWORD *)((char *)v53 + 1) == 0)
        break;
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v178 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1765:32)]";
        *((_QWORD *)&v178 + 1) = 104;
        LODWORD(v179) = 2;
        di_log::logger<di_log::log_printer<545ul>>::logger(&v168, &v178);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)"sg: ", 4);
        operator<<(&v176);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v168);
        MEMORY[0x2199A89AC](&v177);
      }
      *(_QWORD *)&v168 = 0;
      *((_QWORD *)&v168 + 1) = v54;
      LOBYTE(v169) = 2;
      trim_sg_to_interval(&v144, (uint64_t)&v168, (uint64_t)&v178);
      v56 = v179;
      v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 16 * *((_QWORD *)this + 1) + 8);
      v58 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 20);
      v59 = v180;
      v60 = v181;
      v168 = v178;
      if (*((_QWORD *)&v178 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      *(_QWORD *)&v169 = v56;
      *((_QWORD *)&v169 + 1) = (unint64_t)v59 % v58 + (v57 & 0x7FFFFFFFFFFFFFLL) * v58;
      *(_QWORD *)&v170 = v60;
      BYTE8(v170) = 0;
      (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**((_QWORD **)a2 + 2) + 136))(v190, *((_QWORD *)a2 + 2), &v168);
      if ((_QWORD)v193 == *((_QWORD *)&v193 + 1))
      {
        boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>((uint64_t *)&__p, (_DWORD *)__p + 10 * v193, (const char *)1, v190, &v191);
      }
      else
      {
        lw_future<int>::lw_future((unint64_t)__p + 40 * v193, v190);
        *(_QWORD *)&v193 = v193 + 1;
      }
      v63 = v180;
      v64 = v179;
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      if (*((_QWORD *)&v168 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = v64 >= 0 || (_DWORD)v64 == 0;
      v69 = v68;
      if (v68)
      {
        if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v144, (const sg_vec_ns::details::sg_vec_iterator *)&v130, v63, v64))
        {
          v157[0] = v144;
          v157[1] = v145;
          if (v145)
          {
            v74 = (unint64_t *)&v145->__shared_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          v158[0] = v146[0];
          *(_OWORD *)((char *)v158 + 9) = *(_OWORD *)((char *)v146 + 9);
          v160 = v148;
          v161 = v149;
          v162 = v150;
          v163 = v151;
          v159 = v147;
          v164[0] = v152;
          v164[1] = v153;
          if (v153)
          {
            v76 = (unint64_t *)&v153->__shared_owners_;
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
          }
          v165 = v154;
          v166 = v155;
          v167 = v156;
          sg_vec_ns::generate_vec_ref((uint64_t)v157, (uint64_t)&v130, (uint64_t)v63, v64, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v168);
          std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)&v182, (uint64_t)&v168);
          sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v168);
          std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v164);
          std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v157);
          sg_vec_ref::begin((sg_vec_ref *)&v182, (uint64_t)&v168);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v144, (uint64_t)&v168);
          std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v175);
          std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v168);
          sg_vec_ref::end((sg_vec_ref *)&v182, (uint64_t)&v168);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v130, (uint64_t)&v168);
          std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v175);
          std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v168);
        }
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v144, v64);
        v53 = (_OWORD *)((char *)v53 + v64);
      }
      else
      {
        if ((int)v64 >= 0)
          v73 = v64;
        else
          v73 = -(int)v64;
        v111 = -v73;
      }
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
      if (*((_QWORD *)&v178 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if ((v69 & 1) == 0)
        goto LABEL_91;
    }
    v111 = (uint64_t)v53;
LABEL_91:
    std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v182);
    v78 = v140;
    if (v140)
    {
      v79 = (unint64_t *)&v140->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = v131;
    if (v131)
    {
      v82 = (unint64_t *)&v131->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v84 = v153;
    v11 = v111;
    if (v153)
    {
      v85 = (unint64_t *)&v153->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = v145;
    if (v145)
    {
      v88 = (unint64_t *)&v145->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    if ((v111 & 0x8000000000000000) == 0 || !(_DWORD)v111)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 2) + 144))(*((_QWORD *)a2 + 2));
      if ((_QWORD)v193)
      {
        v90 = 0;
        v91 = (unsigned int *)__p;
        v92 = 40 * v193;
        do
        {
          v93 = lw_future<int>::get(v91);
          if (v93 < 0)
            break;
          v90 += v93;
          v91 += 10;
          v93 = v90;
          v92 -= 40;
        }
        while (v92);
      }
      else
      {
        v93 = 0;
      }
      v94 = v93 < 0 ? v93 : -5;
      v95 = -v94;
      if (v111 != v93)
        v11 = -v95;
    }
    if (*((_QWORD *)&v193 + 1) && v194 != __p)
      operator delete(__p);
  }
  v96 = v129;
  if (v129)
  {
    v97 = (unint64_t *)&v129->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v128;
  if (v128)
  {
    v100 = (unint64_t *)&v128->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v126;
  if (v126)
  {
    v103 = (unint64_t *)&v126->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v125;
  if (v125)
  {
    v106 = (unint64_t *)&v125->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  return v11;
}

void sub_212F5AF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x700]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x730]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3B0]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  if (STACK[0x990])
  {
    if (a23 != STACK[0x980])
      operator delete((void *)STACK[0x980]);
  }
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair((uint64_t)&a67);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<1151ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1151ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF04068;
  a1[45] = &unk_24CF04168;
  a1[46] = &unk_24CF04190;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF04068;
  a1[45] = &unk_24CF040F0;
  a1[46] = &unk_24CF04118;
  return a1;
}

void sub_212F5B0B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1151ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1188ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1188ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF04288;
  a1[45] = &unk_24CF04388;
  a1[46] = &unk_24CF043B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF04288;
  a1[45] = &unk_24CF04310;
  a1[46] = &unk_24CF04338;
  return a1;
}

void sub_212F5B19C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1188ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t finally<di_asif::details::table::write(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally(uint64_t a1)
{
  unint64_t v2;
  di_asif::details::table *v3;
  uint64_t v4;
  _QWORD *v5;
  char updated;
  _BYTE *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(di_asif::details::table **)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 0x8000000000000000) == 0 || !*(_QWORD *)(a1 + 48))
  {
    sg_vec_ns::details::sg_vec_iterator::operator+=(*(_QWORD *)a1, v2);
    v4 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v4 + 16))
    {
      v5 = *(_QWORD **)(a1 + 24);
      if (*(_QWORD *)(*v5 + 352) != *(_QWORD *)(*(_QWORD *)v4 + 352) || v5[1] != *(_QWORD *)(v4 + 8))
      {
        updated = di_asif::details::table::update_entry_if_bits_in_same_state(v3, *(di_asif::details::ContextASIF **)(a1 + 64), (di_asif::details::table_entry_data *)v4);
        v7 = *(_BYTE **)(a1 + 32);
        v8 = (updated & 1) != 0 || *v7 != 0;
        *v7 = v8;
        v4 = *(_QWORD *)(a1 + 16);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v4 + 8);
          v10 = *((_QWORD *)v3 + 1);
          v11 = *(_QWORD *)(v10 + 48);
          v12 = *(_DWORD *)(v10 + 20);
          v13 = *(unsigned __int16 *)(v10 + 18);
          v14 = v11 * (v12 / v13);
          v15 = *((_QWORD *)v3 + 44) / v13;
          ++v11;
          v16 = v11
              + v11
              * (((*(_QWORD *)(*(_QWORD *)v4 + 352)
                 + (*(_QWORD *)(v9 + 48) + *(_QWORD *)(v9 + 48) * *(_QWORD *)(v4 + 8))
                 / (unint64_t)(*(_QWORD *)(v9 + 48) + 1)
                 * *(unsigned int *)(v9 + 20))
                / *(unsigned __int16 *)(v9 + 18)
                - v15)
               / v14);
          v17 = *(_QWORD **)(a1 + 24);
          v18 = *(_QWORD *)(*v17 + 8);
          if (v16 != v11
                    + v11
                    * (((*(_QWORD *)(*v17 + 352)
                       + (*(_QWORD *)(v18 + 48) + *(_QWORD *)(v18 + 48) * v17[1])
                       / (unint64_t)(*(_QWORD *)(v18 + 48) + 1)
                       * *(unsigned int *)(v18 + 20))
                      / *(unsigned __int16 *)(v18 + 18)
                      - v15)
                     / v14))
          {
            di_asif::details::table::check_if_map_element_needed(v3, *(di_asif::details::ContextASIF **)(a1 + 64), v16 - 1);
            **(_BYTE **)(a1 + 32) = 0;
            v4 = *(_QWORD *)(a1 + 16);
          }
        }
      }
    }
    v19 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v4 + 16))
    {
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v19 + 8);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)v19;
      *(_BYTE *)(v4 + 16) = 1;
    }
  }
  return a1;
}

uint64_t std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 160;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 272);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 112);
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1);
}

uint64_t di_asif::details::table::read(di_asif::details::table *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  uint64_t v4;
  di_asif::details::ContextASIF *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  di_asif::details::table *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  const sg_vec_ns::details::sg_vec_iterator *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  ref::ref_cnt *v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const sg_vec_ns::details::sg_vec_iterator *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int64_t zeros;
  const sg_vec_ns::details::sg_vec_iterator *v62;
  unint64_t v63;
  BOOL v64;
  char v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  const std::error_category *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  __n128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v137;
  di_asif::details::table *v138;
  di_asif::details::ContextASIF *v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE v142[25];
  __int128 v143;
  __int128 v144;
  char v145;
  _BYTE v146[25];
  __int128 v147;
  __int128 v148;
  char v149;
  __int128 v150;
  unint64_t v151;
  char v152;
  __int128 v153;
  unint64_t *v154;
  int v155;
  char v156[24];
  char v157;
  __int128 v158;
  _OWORD v159[2];
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  char v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  __int128 v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  _OWORD v172[2];
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  char v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  __int128 v180;
  unint64_t v181;
  char v182;
  __int128 v183;
  uint64_t v184[3];
  uint64_t v185;
  std::__shared_weak_count *v186;
  _BYTE v187[25];
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  char v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  __int128 v195;
  uint64_t v196;
  char v197;
  __int128 v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  _OWORD v201[2];
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  char v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  __int128 v209;
  unint64_t v210;
  char v211;
  __int128 v212;
  _OWORD v213[2];
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  char v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  __int128 v221;
  unint64_t v222;
  char v223;
  __int128 v224;
  _OWORD v225[2];
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  char v230;
  _QWORD v231[2];
  __int128 v232;
  unint64_t v233;
  char v234;
  __int128 v235;
  int v236;
  unint64_t v237[2];
  uint64_t *v238;
  __int128 v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  _OWORD v244[2];
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  char v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  __int128 v252;
  uint64_t v253;
  char v254;
  _QWORD v255[2];
  _OWORD v256[2];
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  char v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  __int128 v264;
  uint64_t v265;
  char v266;
  di_asif::details::ContextASIF *v267;
  uint64_t v268[3];
  uint64_t v269;
  __int128 v270;
  char v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  _BYTE v278[25];
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  char v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  __int128 v286;
  unint64_t v287;
  char v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  _OWORD v291[2];
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  char v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  __int128 v299;
  unint64_t v300;
  char v301;
  uint64_t v302;
  _BYTE v303[4792];
  char v304;
  __int128 v305;
  uint64_t *v306;
  __int128 v307;
  uint64_t v308;
  _BYTE v309[248];
  uint64_t v310;
  _QWORD v311[602];

  v4 = MEMORY[0x24BDAC7A8](this);
  v8 = v7;
  v9 = (uint64_t)v5;
  v10 = (di_asif::details::table *)v4;
  v311[599] = *MEMORY[0x24BDAC8D0];
  v137 = v6[3];
  v11 = *v6;
  v12 = (std::__shared_weak_count *)v6[1];
  v185 = *v6;
  v186 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  *(_OWORD *)v187 = *((_OWORD *)v6 + 1);
  *(_OWORD *)&v187[9] = *(_OWORD *)((char *)v6 + 25);
  v188 = v6[6];
  v189 = *(_OWORD *)(v6 + 7);
  v190 = *(_OWORD *)(v6 + 9);
  v191 = *(_OWORD *)(v6 + 11);
  v192 = *((_BYTE *)v6 + 104);
  v15 = (std::__shared_weak_count *)v6[15];
  v193 = v6[14];
  v194 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v12 = v186;
  }
  v195 = *((_OWORD *)v6 + 8);
  v196 = v6[18];
  v197 = *((_BYTE *)v6 + 152);
  *(_QWORD *)&v198 = -78;
  LOBYTE(v237[0]) = 0;
  v241 = 0;
  v242 = v11;
  v243 = v12;
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_OWORD *)((char *)v244 + 9) = *(_OWORD *)&v187[9];
  v244[0] = *(_OWORD *)v187;
  v246 = v189;
  v247 = v190;
  v245 = v188;
  v249 = v192;
  v248 = v191;
  v250 = v193;
  v251 = v194;
  if (v194)
  {
    v20 = (unint64_t *)&v194->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (const sg_vec_ns::details::sg_vec_iterator *)&v270;
  v252 = v195;
  v254 = v197;
  v253 = v196;
  v255[0] = v11;
  v255[1] = v186;
  if (v186)
  {
    v23 = (unint64_t *)&v186->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_OWORD *)((char *)v256 + 9) = *(_OWORD *)&v187[9];
  v256[0] = *(_OWORD *)v187;
  v258 = v189;
  v259 = v190;
  v257 = v188;
  v260 = v191;
  v261 = v192;
  v262 = v193;
  v263 = v194;
  if (v194)
  {
    v25 = (unint64_t *)&v194->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v141 = 0;
  v266 = v197;
  v264 = v195;
  v265 = v196;
  v267 = v5;
  v268[0] = (uint64_t)&v269;
  v268[1] = 0;
  v268[2] = 16;
  LOBYTE(v270) = 0;
  v271 = 0;
  v272 = &v275;
  v273 = 0;
  v274 = 16;
  v276 = 0;
  v184[0] = (uint64_t)v237;
  v184[1] = (uint64_t)&v198;
  v184[2] = (uint64_t)v5;
  v138 = (di_asif::details::table *)v4;
  v139 = v5;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v185, v8))
  {
    *(_QWORD *)&v183 = di_asif::details::table::get_data_entry_for_offset(v10, *(unint64_t *)&v187[8]);
    *((_QWORD *)&v183 + 1) = v27;
    v28 = *(_QWORD *)(v183 + 8);
    v29 = *(_QWORD *)(v28 + 48);
    v30 = *(unsigned int *)(v28 + 20);
    *(_QWORD *)&v277 = *(_QWORD *)(v183 + 352) + (v29 + v29 * v27) / (unint64_t)(v29 + 1) * v30;
    *((_QWORD *)&v277 + 1) = v277 + v30;
    v278[0] = 2;
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v185, (uint64_t)&v277, v8, (uint64_t)&v158);
    if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v158, (uint64_t)&v170))
    {
      *(_QWORD *)&v305 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((_QWORD *)&v305 + 1) = 29;
      LODWORD(v306) = 16;
      di_log::logger<di_log::log_printer<1441ul>>::logger(&v277, &v305);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v302, (uint64_t)"Couldn't trim entry in read ", 28);
      operator<<(&v302);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf((uint64_t)&v277);
      MEMORY[0x2199A89AC](v303);
      *(_QWORD *)&v198 = -34;
      v31 = 3;
    }
    else
    {
      if (v271
        && !di_asif::details::table_entry_obj::is_physically_contiguous((di_asif::details::table_entry_obj *)&v183, (const di_asif::details::table_entry_obj *)&v270)&& (v74 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize_ios((uint64_t)v237), v74 < 0)&& (_DWORD)v74)
      {
        *(_QWORD *)&v153 = v74;
        *((_QWORD *)&v153 + 1) = v75;
        v154 = v237;
        v155 = 0;
        v156[0] = 0;
        v157 = 0;
      }
      else
      {
        v270 = v183;
        v271 = 1;
        v32 = (ref::ref_cnt *)(*(_QWORD *)(v183 + 56) + 16 * *((_QWORD *)&v183 + 1));
        v33 = ref::ref_cnt::get(v32);
        *(_QWORD *)&v305 = &off_24CF07518;
        *((_QWORD *)&v305 + 1) = v32;
        LOBYTE(v306) = v33;
        if (v33)
        {
          v34 = 0;
        }
        else
        {
          *(_QWORD *)&v224 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)::data_entries_vectorizer_t::add_data_entry(const data_entry_t &)";
          *((_QWORD *)&v224 + 1) = 139;
          LODWORD(v225[0]) = 16;
          di_log::logger<di_log::log_printer<1409ul>>::logger(&v277, &v224);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v302, (uint64_t)"Couldn't lock entry ", 20);
          di_asif::details::operator<<(&v302, &v183);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf((uint64_t)&v277);
          MEMORY[0x2199A89AC](v303);
          v34 = -5;
        }
        v35 = atomic_load((unint64_t *)(*(_QWORD *)(v270 + 56) + 16 * *((_QWORD *)&v270 + 1) + 8));
        *(_QWORD *)&v153 = v34;
        v154 = v237;
        v155 = v35 >> 62;
        ref::details::ref_cnt_handle::ref_cnt_handle((uint64_t)v156, (uint64_t)&v305);
        v157 = 1;
        ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&v305);
      }
      v198 = v153;
      if ((v153 & 0x8000000000000000) != 0 && (_DWORD)v198)
      {
LABEL_171:
        v31 = 3;
      }
      else
      {
        switch(v155)
        {
          case 0:
          case 2:
            v36 = v158;
            if (*((_QWORD *)&v158 + 1))
            {
              v37 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            *(_OWORD *)v146 = v159[0];
            *(_OWORD *)&v146[9] = *(_OWORD *)((char *)v159 + 9);
            v39 = v160;
            v40 = v161;
            v147 = v162;
            v148 = v163;
            v149 = v164;
            v41 = *((_QWORD *)&v161 + 1);
            v42 = v165;
            v43 = v166;
            if (v166)
            {
              v44 = (unint64_t *)&v166->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            v150 = v167;
            v151 = v168;
            v152 = v169;
            v46 = v170;
            v47 = v171;
            if (v171)
            {
              v48 = (unint64_t *)&v171->__shared_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            *(_OWORD *)v142 = v172[0];
            *(_OWORD *)&v142[9] = *(_OWORD *)((char *)v172 + 9);
            v50 = v173;
            v51 = v174;
            v52 = v178;
            v143 = v175;
            v144 = v176;
            v145 = v177;
            v53 = v179;
            if (v179)
            {
              v54 = (unint64_t *)&v179->__shared_owners_;
              do
                v55 = __ldxr(v54);
              while (__stxr(v55 + 1, v54));
            }
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v212 = v36;
            v213[0] = *(_OWORD *)v146;
            *(_OWORD *)((char *)v213 + 9) = *(_OWORD *)&v146[9];
            v214 = v39;
            *(_QWORD *)&v215 = v40;
            v216 = v147;
            v217 = v148;
            v218 = v149;
            *((_QWORD *)&v215 + 1) = v41;
            v219 = v42;
            v220 = v43;
            v221 = v150;
            v222 = v151;
            v223 = v152;
            v199 = v46;
            v200 = v47;
            v201[0] = *(_OWORD *)v142;
            *(_OWORD *)((char *)v201 + 9) = *(_OWORD *)&v142[9];
            v202 = v50;
            v203 = v51;
            v206 = v145;
            v204 = v143;
            v205 = v144;
            v207 = v52;
            v208 = v53;
            v209 = v180;
            v211 = v182;
            v210 = v181;
            v59 = v181;
            LOBYTE(v277) = 0;
            v303[160] = 0;
            while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v212, (uint64_t)&v199))
            {
              if (v222 >= v59 || v58 == -1)
                break;
              if (DIDebugLogsEnabled())
              {
                *(_QWORD *)&v235 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1462:30)]";
                *((_QWORD *)&v235 + 1) = 104;
                v236 = 2;
                di_log::logger<di_log::log_printer<545ul>>::logger(&v305, &v235);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v310, (uint64_t)"sg: ", 4);
                operator<<(&v310);
                std::ostream::~ostream();
                di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v305);
                MEMORY[0x2199A89AC](v311);
              }
              *(_QWORD *)&v305 = 0;
              *((_QWORD *)&v305 + 1) = v59;
              LOBYTE(v306) = 2;
              trim_sg_to_interval(&v212, (uint64_t)&v305, (uint64_t)&v235);
              zeros = di_asif::details::table_entry_data::get_zeros(&v183, &v235);
              v63 = zeros;
              v64 = zeros >= 0 || (_DWORD)zeros == 0;
              v65 = v64;
              if (v64)
              {
                v22 = v62;
                if (!v57)
                  v56 = v62;
                if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v212, (const sg_vec_ns::details::sg_vec_iterator *)&v199, v62, zeros))
                {
                  v224 = v212;
                  if (*((_QWORD *)&v212 + 1))
                  {
                    v70 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                  }
                  v225[0] = v213[0];
                  *(_OWORD *)((char *)v225 + 9) = *(_OWORD *)((char *)v213 + 9);
                  v227 = v215;
                  v228 = v216;
                  v229 = v217;
                  v230 = v218;
                  v226 = v214;
                  v231[0] = v219;
                  v231[1] = v220;
                  if (v220)
                  {
                    v72 = (unint64_t *)&v220->__shared_owners_;
                    do
                      v73 = __ldxr(v72);
                    while (__stxr(v73 + 1, v72));
                  }
                  v232 = v221;
                  v233 = v222;
                  v234 = v223;
                  sg_vec_ns::generate_vec_ref((uint64_t)&v224, (uint64_t)&v199, (uint64_t)v22, v63, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v305);
                  std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)&v277, (uint64_t)&v305);
                  sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v305);
                  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v231);
                  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v224);
                  sg_vec_ref::begin((sg_vec_ref *)&v277, (uint64_t)&v305);
                  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v212, (uint64_t)&v305);
                  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v309);
                  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v305);
                  sg_vec_ref::end((sg_vec_ref *)&v277, (uint64_t)&v305);
                  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v199, (uint64_t)&v305);
                  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v309);
                  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v305);
                }
                sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v212, v63);
                v58 += v63;
                v57 = 1;
              }
              else
              {
                if ((int)zeros >= 0)
                  v69 = zeros;
                else
                  v69 = -(int)zeros;
                v140 = -v69;
              }
              v66 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
              if (*((_QWORD *)&v235 + 1))
              {
                v67 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              if ((v65 & 1) == 0)
                goto LABEL_90;
            }
            if (v57)
              v22 = v56;
            else
              v22 = 0;
            v140 = v58;
LABEL_90:
            std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v277);
            v76 = v208;
            v10 = v138;
            if (v208)
            {
              v77 = (unint64_t *)&v208->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v79 = v200;
            v9 = (uint64_t)v139;
            if (v200)
            {
              v80 = (unint64_t *)&v200->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v82 = v220;
            if (v220)
            {
              v83 = (unint64_t *)&v220->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v85 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
            if (*((_QWORD *)&v212 + 1))
            {
              v86 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            *(_QWORD *)&v198 = v140;
            *((_QWORD *)&v198 + 1) = v22;
            v22 = (const sg_vec_ns::details::sg_vec_iterator *)&v270;
            goto LABEL_169;
          case 1:
            goto LABEL_166;
          case 3:
            v88 = *(_QWORD *)(v183 + 8);
            v89 = (*(_QWORD *)(v183 + 352)
                 + (*(_QWORD *)(v88 + 48) + *(_QWORD *)(v88 + 48) * *((_QWORD *)&v183 + 1))
                 / (unint64_t)(*(_QWORD *)(v88 + 48) + 1)
                 * *(unsigned int *)(v88 + 20))
                / *(unsigned __int16 *)(v88 + 18);
            if (!v241)
            {
              v90 = 0;
LABEL_115:
              *(_QWORD *)&v305 = 0;
              *((_QWORD *)&v305 + 1) = v10;
              v306 = &v308;
              v307 = xmmword_212FEBC40;
              di_asif::details::table::get_bitmap(v10, v267, v89, 0, 1, (unint64_t *)&v224);
              ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((unint64_t *)&v305, (unint64_t *)&v224);
              ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v224);
              v22 = (const sg_vec_ns::details::sg_vec_iterator *)&v270;
              if ((_QWORD)v305 && !*(_BYTE *)(v305 + 344))
              {
                ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr((unint64_t *)&v277, (unint64_t *)&v305);
                *((_QWORD *)&v277 + 1) = *((_QWORD *)&v305 + 1);
                *(_QWORD *)v278 = &v278[24];
                *(_OWORD *)&v278[8] = xmmword_212FEBC40;
                *(_QWORD *)&v224 = v306;
                *(_QWORD *)&v212 = &v306[40 * v307];
                boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::assign<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>((uint64_t *)v278, (const char *)&v224, (uint64_t *)&v212);
                v92 = 1;
              }
              else
              {
                v91 = std::generic_category();
                v92 = 0;
                *(_QWORD *)&v277 = 5;
                *((_QWORD *)&v277 + 1) = v91;
              }
              v304 = v92;
              di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t((uint64_t)&v305);
              if (!v304)
              {
                if ((int)v277 >= 0)
                  v129 = v277;
                else
                  v129 = -(int)v277;
                v90 = -v129;
                goto LABEL_164;
              }
              if (v241)
              {
                di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t((uint64_t)v237);
                v241 = 0;
              }
              ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(v237, (unint64_t *)&v277);
              v237[1] = *((_QWORD *)&v277 + 1);
              v238 = &v240;
              v239 = xmmword_212FEBC40;
              *(_QWORD *)&v305 = *(_QWORD *)v278;
              *(_QWORD *)&v224 = *(_QWORD *)v278 + 320 * *(_QWORD *)&v278[8];
              boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::assign<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>((uint64_t *)&v238, (const char *)&v305, (uint64_t *)&v224);
              v241 = 1;
              if (v304)
                di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t((uint64_t)&v277);
              goto LABEL_129;
            }
            if (*(_QWORD *)(v237[0] + 40) == (v89
                                             - *((_QWORD *)v10 + 44)
                                             / (unint64_t)*(unsigned __int16 *)(*((_QWORD *)v10 + 1) + 18))
                                            / (*(_QWORD *)(*((_QWORD *)v10 + 1) + 48)
                                             * (unint64_t)(*(_DWORD *)(*((_QWORD *)v10 + 1) + 20)
                                                                / *(unsigned __int16 *)(*((_QWORD *)v10 + 1) + 18))))
            {
              v90 = 0;
              goto LABEL_129;
            }
            v93 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize((uint64_t)v237);
            v90 = v93;
            if (v93 < 0 && (_DWORD)v93)
            {
              v22 = (const sg_vec_ns::details::sg_vec_iterator *)&v270;
              goto LABEL_164;
            }
            v140 = v94;
            if (!v241)
              goto LABEL_115;
LABEL_129:
            v277 = v158;
            if (*((_QWORD *)&v158 + 1))
            {
              v95 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            *(_OWORD *)v278 = v159[0];
            *(_OWORD *)&v278[9] = *(_OWORD *)((char *)v159 + 9);
            v280 = v161;
            v281 = v162;
            v282 = v163;
            v283 = v164;
            v279 = v160;
            v284 = v165;
            v285 = v166;
            if (v166)
            {
              v97 = (unint64_t *)&v166->__shared_owners_;
              do
                v98 = __ldxr(v97);
              while (__stxr(v98 + 1, v97));
            }
            v286 = v167;
            v287 = v168;
            v288 = v169;
            v289 = v170;
            v290 = v171;
            if (v171)
            {
              v99 = (unint64_t *)&v171->__shared_owners_;
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            v291[0] = v172[0];
            *(_OWORD *)((char *)v291 + 9) = *(_OWORD *)((char *)v172 + 9);
            v293 = v174;
            v294 = v175;
            v295 = v176;
            v296 = v177;
            v292 = v173;
            v297 = v178;
            v298 = v179;
            if (v179)
            {
              v101 = (unint64_t *)&v179->__shared_owners_;
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
            v299 = v180;
            v300 = v181;
            v301 = v182;
            if ((_QWORD)v239 == *((_QWORD *)&v239 + 1))
            {
              boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>((uint64_t *)&v238, (uint64_t)&v238[40 * v239], (const char *)1, (uint64_t)&v277, &v305);
            }
            else
            {
              v103 = std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100]((uint64_t)&v238[40 * v239], (uint64_t)&v277);
              *(_QWORD *)&v239 = v239 + 1;
            }
            v104 = v298;
            if (v298)
            {
              v105 = (unint64_t *)&v298->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v104->__on_zero_shared)(v104, v103);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            v107 = v290;
            if (v290)
            {
              v108 = (unint64_t *)&v290->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v107->__on_zero_shared)(v107, v103);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v110 = v285;
            if (v285)
            {
              v111 = (unint64_t *)&v285->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v110->__on_zero_shared)(v110, v103);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
            if (*((_QWORD *)&v277 + 1))
            {
              v114 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v113->__on_zero_shared)(v113, v103);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            v22 = (const sg_vec_ns::details::sg_vec_iterator *)&v270;
            v94 = v140;
LABEL_164:
            *(_QWORD *)&v198 = v90;
            *((_QWORD *)&v198 + 1) = v94;
            if ((v90 & 0x8000000000000000) == 0 || !(_DWORD)v90)
            {
LABEL_166:
              di_asif::details::table_entry_data::future_read((sg_vec_ns::details::sg_vec_iterator *)&v158, &v183, v9, (uint64_t)&v170, v268, (unint64_t *)&v277);
              v198 = v277;
              if ((v277 & 0x8000000000000000) == 0 || !(_DWORD)v198)
                v276 += *(_QWORD *)v278;
            }
LABEL_169:
            v116 = v198;
            if ((v198 & 0x8000000000000000) != 0 && (_DWORD)v198)
              goto LABEL_171;
            sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v185, v198);
            v141 += v116;
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)v255, (uint64_t)&v185);
            v31 = 0;
            break;
          default:
            goto LABEL_169;
        }
      }
      di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::io_result_inserter_t::~io_result_inserter_t((uint64_t)&v153);
    }
    v117 = v179;
    if (v179)
    {
      v118 = (unint64_t *)&v179->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = v171;
    if (v171)
    {
      v121 = (unint64_t *)&v171->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v123 = v166;
    if (v166)
    {
      v124 = (unint64_t *)&v166->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
    if (!*((_QWORD *)&v158 + 1))
      goto LABEL_193;
    v127 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
      if (v31)
        break;
    }
    else
    {
LABEL_193:
      if (v31)
        break;
    }
  }
  if ((v198 & 0x8000000000000000) == 0 || !(_DWORD)v198)
  {
    *(_QWORD *)&v198 = v141;
    *((_QWORD *)&v198 + 1) = v137;
  }
  finally<di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally(v184);
  di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::~data_entries_vectorizer_t((uint64_t)v237);
  v130 = v194;
  if (v194)
  {
    v131 = (unint64_t *)&v194->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v186;
  if (v186)
  {
    v134 = (unint64_t *)&v186->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  return v198;
}

void sub_212F5CA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair((uint64_t)&STACK[0x2180]);
  di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::io_result_inserter_t::~io_result_inserter_t((uint64_t)&STACK[0x348]);
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair((uint64_t)&STACK[0x388]);
  finally<di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally((uint64_t *)&STACK[0x4D8]);
  di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::~data_entries_vectorizer_t((uint64_t)&STACK[0x7B0]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<1441ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1441ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF044A8;
  a1[45] = &unk_24CF045A8;
  a1[46] = &unk_24CF045D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF044A8;
  a1[45] = &unk_24CF04530;
  a1[46] = &unk_24CF04558;
  return a1;
}

void sub_212F5CCCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1441ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void di_asif::details::table_entry_data::future_read(sg_vec_ns::details::sg_vec_iterator *a1@<X2>, _QWORD *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  sg_vec_ns::details::sg_vec_iterator *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  sg_vec_ns::details::sg_vec_iterator *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  sg_vec_ns::details::sg_vec_iterator *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  char v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  _BYTE v129[25];
  __int128 v130;
  __int128 v131;
  char v132;
  _BYTE v133[25];
  __int128 v134;
  __int128 v135;
  char v136;
  __int128 v137;
  unint64_t v138;
  char v139;
  std::__shared_weak_count *v140;
  _BYTE v141[25];
  __int128 v142;
  __int128 v143;
  char v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  _OWORD v151[2];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  unint64_t v161;
  char v162;
  __int128 v163;
  _OWORD v164[2];
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  char v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  unint64_t v173;
  char v174;
  __int128 v175;
  _OWORD v176[2];
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  char v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  __int128 v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  _OWORD v189[2];
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  __int128 v197;
  unint64_t v198;
  char v199;
  _QWORD v200[2];
  _OWORD v201[2];
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  char v206;
  _QWORD v207[2];
  __int128 v208;
  unint64_t v209;
  char v210;
  __int128 v211;
  _BYTE v212[25];
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  char v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  __int128 v220;
  unint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  unint64_t v226;
  sg_vec_ns::details::sg_vec_iterator *v227;
  uint64_t v228;
  __int128 v229;
  _OWORD v230[2];
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  char v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  __int128 v239;
  unint64_t v240;
  char v241;
  char v242;
  _QWORD v243[2];
  char v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;

  v9 = *(_QWORD *)(*a2 + 8);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(unsigned int *)(v9 + 20);
  *(_QWORD *)&v229 = *(_QWORD *)(*a2 + 352) + (v10 + v10 * a2[1]) / (unint64_t)(v10 + 1) * v11;
  *((_QWORD *)&v229 + 1) = v229 + v11;
  LOBYTE(v230[0]) = 2;
  sg_vec_ns::details::sg_vec_iterator::subvec(a1, (uint64_t)&v229, a4, (uint64_t)&v149);
  if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v149, (uint64_t)&v163))
  {
    *a6 = -34;
    a6[2] = 0;
  }
  else
  {
    v12 = v149;
    if ((*(_QWORD *)(*(_QWORD *)(*a2 + 56) + 16 * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20))
    {
      v13 = v150;
      if (v150)
      {
        p_shared_owners = (unint64_t *)&v150->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      *(_OWORD *)v133 = v151[0];
      *(_OWORD *)&v133[9] = *(_OWORD *)((char *)v151 + 9);
      v16 = v152;
      v17 = v153;
      v18 = v154;
      v134 = v155;
      v135 = v156;
      v136 = v157;
      v19 = v158;
      v20 = v159;
      if (v159)
      {
        v21 = (unint64_t *)&v159->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v126 = a6;
      v137 = v160;
      v138 = v161;
      v139 = v162;
      v23 = v163;
      if (*((_QWORD *)&v163 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      *(_OWORD *)v129 = v164[0];
      *(_OWORD *)&v129[9] = *(_OWORD *)((char *)v164 + 9);
      v26 = v165;
      v27 = v166;
      v130 = v167;
      v131 = v168;
      v132 = v169;
      v28 = v170;
      v29 = v171;
      if (v171)
      {
        v30 = (unint64_t *)&v171->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v127 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v189[0] = *(_OWORD *)v133;
      *(_OWORD *)((char *)v189 + 9) = *(_OWORD *)&v133[9];
      v192 = v134;
      v193 = v135;
      v197 = v137;
      v176[0] = *(_OWORD *)v129;
      *(_OWORD *)((char *)v176 + 9) = *(_OWORD *)&v129[9];
      v180 = v131;
      v179 = v130;
      v187 = v12;
      v188 = v13;
      v190 = v16;
      *(_QWORD *)&v191 = v17;
      *((_QWORD *)&v191 + 1) = v18;
      v194 = v136;
      v195 = v19;
      v196 = v20;
      v198 = v138;
      v199 = v139;
      v175 = v23;
      v177 = v26;
      v178 = v27;
      v181 = v132;
      v182 = v28;
      v183 = v29;
      v184 = v172;
      v186 = v174;
      v185 = v173;
      v35 = v173;
      LOBYTE(v229) = 0;
      v242 = 0;
      while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v187, (uint64_t)&v175))
      {
        if (v198 >= v35 || v34 == -1)
          break;
        if (DIDebugLogsEnabled())
        {
          *(_QWORD *)&v245 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1729:32)]";
          *((_QWORD *)&v245 + 1) = 104;
          LODWORD(v246) = 2;
          di_log::logger<di_log::log_printer<545ul>>::logger(&v211, &v245);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"sg: ", 4);
          operator<<(&v223);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v211);
          MEMORY[0x2199A89AC](&v224);
        }
        *(_QWORD *)&v211 = 0;
        *((_QWORD *)&v211 + 1) = v35;
        v212[0] = 2;
        trim_sg_to_interval(&v187, (uint64_t)&v211, (uint64_t)&v225);
        v37 = v226;
        v38 = *(_QWORD *)(*(_QWORD *)(*a2 + 56) + 16 * a2[1] + 8);
        v39 = *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 20);
        v40 = v227;
        v41 = v228;
        v211 = v225;
        if (*((_QWORD *)&v225 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        *(_QWORD *)v212 = v37;
        *(_QWORD *)&v212[8] = (unint64_t)v40 % v39 + (v38 & 0x7FFFFFFFFFFFFFLL) * v39;
        *(_QWORD *)&v212[16] = v41;
        v212[24] = 0;
        v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 40))(*(_QWORD *)(a3 + 16));
        v243[0] = 0;
        v243[1] = v44;
        v244 = 2;
        trim_sg_to_interval(&v211, (uint64_t)v243, (uint64_t)&v245);
        if (v246)
        {
          (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a3 + 16) + 128))(v243, *(_QWORD *)(a3 + 16), &v245);
          v45 = a5[1];
          if (v45 == a5[2])
          {
            boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(a5, (_DWORD *)(*a5 + 40 * v45), (const char *)1, v243, &v247);
          }
          else
          {
            lw_future<int>::lw_future(*a5 + 40 * v45, v243);
            ++a5[1];
          }
          v127 += v246;
        }
        v46 = v227;
        v47 = v226;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
        if (*((_QWORD *)&v245 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = v47 >= 0 || (_DWORD)v47 == 0;
        v55 = v54;
        if (v54)
        {
          if (!v33)
            v32 = v46;
          if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v187, (const sg_vec_ns::details::sg_vec_iterator *)&v175, v46, v47))
          {
            v200[0] = v187;
            v200[1] = v188;
            if (v188)
            {
              v60 = (unint64_t *)&v188->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v201[0] = v189[0];
            *(_OWORD *)((char *)v201 + 9) = *(_OWORD *)((char *)v189 + 9);
            v203 = v191;
            v204 = v192;
            v205 = v193;
            v206 = v194;
            v202 = v190;
            v207[0] = v195;
            v207[1] = v196;
            if (v196)
            {
              v62 = (unint64_t *)&v196->__shared_owners_;
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            v208 = v197;
            v209 = v198;
            v210 = v199;
            sg_vec_ns::generate_vec_ref((uint64_t)v200, (uint64_t)&v175, (uint64_t)v46, v47, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v211);
            std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)&v229, (uint64_t)&v211);
            sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v211);
            std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v207);
            std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v200);
            sg_vec_ref::begin((sg_vec_ref *)&v229, (uint64_t)&v211);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v187, (uint64_t)&v211);
            std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v218);
            std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v211);
            sg_vec_ref::end((sg_vec_ref *)&v229, (uint64_t)&v211);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v175, (uint64_t)&v211);
            std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v218);
            std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v211);
          }
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v187, v47);
          v34 += v47;
          v33 = 1;
        }
        else
        {
          if ((int)v47 >= 0)
            v59 = v47;
          else
            v59 = -(int)v47;
          v125 = -v59;
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
        if (*((_QWORD *)&v225 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        if ((v55 & 1) == 0)
          goto LABEL_76;
      }
      if (v33)
        v46 = v32;
      else
        v46 = 0;
      v125 = v34;
LABEL_76:
      std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v229);
      v64 = v183;
      if (v183)
      {
        v65 = (unint64_t *)&v183->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
      if (*((_QWORD *)&v175 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = v196;
      if (v196)
      {
        v71 = (unint64_t *)&v196->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = v188;
      if (v188)
      {
        v74 = (unint64_t *)&v188->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      *v126 = v125;
      v126[1] = (unint64_t)v46;
      if ((v125 & 0x8000000000000000) != 0 && (_DWORD)v125)
        v126[2] = 0;
      else
        v126[2] = v127;
    }
    else
    {
      v76 = v150;
      v140 = v150;
      if (v150)
      {
        v77 = (unint64_t *)&v150->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      *(_OWORD *)v141 = v151[0];
      *(_OWORD *)&v141[9] = *(_OWORD *)((char *)v151 + 9);
      v79 = v152;
      v80 = v153;
      v81 = v154;
      v142 = v155;
      v143 = v156;
      v144 = v157;
      v82 = v158;
      v83 = v159;
      v145 = v159;
      if (v159)
      {
        v84 = (unint64_t *)&v159->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v146 = v160;
      v147 = v161;
      v148 = v162;
      *(_QWORD *)&v229 = v12;
      *((_QWORD *)&v229 + 1) = v76;
      if (v76)
      {
        v86 = (unint64_t *)&v76->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v230[0] = *(_OWORD *)v141;
      *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)&v141[9];
      v234 = v142;
      v231 = v79;
      v232 = v80;
      v233 = v81;
      v235 = v143;
      v236 = v144;
      v237 = v82;
      v238 = v83;
      if (v83)
      {
        v88 = (unint64_t *)&v83->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v239 = v146;
      v240 = v147;
      v241 = v148;
      v211 = v163;
      if (*((_QWORD *)&v163 + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      *(_OWORD *)v212 = v164[0];
      *(_OWORD *)&v212[9] = *(_OWORD *)((char *)v164 + 9);
      v213 = v165;
      v214 = v166;
      v215 = v167;
      v216 = v168;
      v217 = v169;
      v218 = v170;
      v219 = v171;
      if (v171)
      {
        v92 = (unint64_t *)&v171->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v220 = v172;
      v221 = v173;
      v222 = v174;
      v94 = for_each_sg_in_vec<io_result_t (&)(sg_entry const&)>((uint64_t (*)(__int128 *))zero_sg_entry, &v229, &v211, 0xFFFFFFFFFFFFFFFFLL);
      v96 = v95;
      v97 = v219;
      if (v219)
      {
        v98 = (unint64_t *)&v219->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = v238;
      if (v238)
      {
        v104 = (unint64_t *)&v238->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
      if (*((_QWORD *)&v229 + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      *a6 = v94;
      a6[1] = v96;
      a6[2] = 0;
      if (v145)
      {
        v109 = (unint64_t *)&v145->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      if (v140)
      {
        v111 = (unint64_t *)&v140->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
    }
  }
  v113 = v171;
  if (v171)
  {
    v114 = (unint64_t *)&v171->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v159;
  if (v159)
  {
    v120 = (unint64_t *)&v159->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v150;
  if (v150)
  {
    v123 = (unint64_t *)&v150->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
}

void sub_212F5DB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x7B0]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x7E0]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C0]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x460]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::io_result_inserter_t::~io_result_inserter_t(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v2 + 6184) && (*(_DWORD *)(a1 + 24) | 2) != 2)
    {
      v3 = *(_QWORD *)(v2 + 6200);
      if (v3 == *(_QWORD *)(v2 + 6208))
      {
        boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>((uint64_t *)(v2 + 6192), *(_QWORD *)(v2 + 6192) + 24 * v3, (const char *)1, a1 + 32, &v5);
      }
      else
      {
        ref::details::ref_cnt_handle::ref_cnt_handle(*(_QWORD *)(v2 + 6192) + 24 * v3, a1 + 32);
        ++*(_QWORD *)(v2 + 6200);
      }
    }
    if (*(_BYTE *)(a1 + 56))
      ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)(a1 + 32));
  }
  return a1;
}

uint64_t *finally<di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize(*a1);
  if (v2 < 0)
  {
    if ((_DWORD)v2)
    {
      v4 = (uint64_t *)a1[1];
      if ((*v4 & 0x8000000000000000) == 0 || !*v4)
      {
        *v4 = v2;
        v4[1] = v3;
      }
    }
  }
  return a1;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::~data_entries_vectorizer_t(uint64_t a1)
{
  void *v2;

  boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::~vector(a1 + 6192);
  if (*(_QWORD *)(a1 + 5520))
  {
    v2 = *(void **)(a1 + 5504);
    if ((void *)(a1 + 5528) != v2)
      operator delete(v2);
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 5440);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 5328);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 5280);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 5168);
  if (*(_BYTE *)(a1 + 5160))
    di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t(a1);
  return a1;
}

uint64_t di_asif::details::table::close(di_asif::details::table *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *exception;
  _QWORD *v12;
  const std::error_category *v13;
  uint64_t (**v14)(DiskImage::Context *__hidden, const sg_vec_ns::details::sg_vec_iterator *, const sg_vec_ns::details::sg_vec_iterator *);
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (!atomic_load((unsigned int *)this + 24))
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v14 = off_24CEFD000;
  v15 = v3;
  v4 = (uint64_t)&v16;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v3 + 16) + 72))(&v16);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    v6 = 0;
    v4 = 4294967290;
  }
  else
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    if ((_DWORD)v5)
    {
      DiskImage::Context::terminate_di((DiskImage::Context *)&v14);
      exception = __cxa_allocate_exception(0x40uLL);
      v12 = exception;
      if ((int)v5 < 0)
        v5 = v5;
      else
        v5 = -(int)v5;
      *exception = &off_24CF07908;
      v13 = std::generic_category();
      v12[1] = v5;
      v12[2] = v13;
      *((_BYTE *)v12 + 24) = 0;
      *((_BYTE *)v12 + 48) = 0;
      v12[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    di_asif::details::table::flush(this, (di_asif::details::ContextASIF *)&v14);
    v6 = 1;
  }
  v14 = off_24CEFD000;
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v6 & 1) == 0)
        return v4;
      return 0;
    }
  }
  if ((v6 & 1) != 0)
    return 0;
  return v4;
}

_QWORD *di_log::logger<di_log::log_printer<1513ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1513ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF048E8;
  a1[45] = &unk_24CF049E8;
  a1[46] = &unk_24CF04A10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF048E8;
  a1[45] = &unk_24CF04970;
  a1[46] = &unk_24CF04998;
  return a1;
}

void sub_212F5E088(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1513ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

unint64_t di_asif::details::map_element::search_for_pattern(_QWORD *a1, di_asif::details::table *this, char a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t range_bits;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t mismatch_bits;
  __int16 v16;
  __int16 v17;

  if (a5 != a4)
  {
    range_bits = di_asif::details::table::make_range_bits(this, a4, a5 - a4);
    v11 = range_bits;
    v12 = HIDWORD(range_bits);
    v13 = (uint64_t)(a1 + 4);
    if (a6)
    {
      v17 = a3 & 1 | (((a3 & 2) != 0) << 8);
      mismatch_bits = lock_free::bitmap_t::find_mismatch_bits(v13, v11, v12, (unsigned __int8 *)&v17);
    }
    else
    {
      v16 = a3 & 1 | (((a3 & 2) != 0) << 8);
      mismatch_bits = lock_free::bitmap_t::find_match_bits(v13, v11, v12, (unsigned __int8 *)&v16);
    }
    return *((_QWORD *)this + 44)
         + *a1
         / (unint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 48) + 1)
         * *(_QWORD *)(*((_QWORD *)this + 1) + 48)
         * *(unsigned int *)(*((_QWORD *)this + 1) + 20)
         + ((mismatch_bits * *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18)) >> 1);
  }
  return a4;
}

unint64_t di_asif::details::table::make_range_bits(di_asif::details::table *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 1);
  v4 = *(unsigned __int16 *)(v3 + 18);
  if (v4 <= a3)
    v5 = a3;
  else
    v5 = *(unsigned __int16 *)(v3 + 18);
  if (!a3)
    v5 = 0;
  v6 = *(unsigned int *)(v3 + 20);
  v7 = *(_QWORD *)(v3 + 48);
  return ((2
         * ((a2
                         - (*((_QWORD *)this + 44)
                          + v7
                          * v6
                          * ((a2 / v4 - *((_QWORD *)this + 44) / v4)
                           / (v7
                            * (unint64_t)(v6 / v4)))))
                        / v4)) | (((v5
                                  + a2
                                  - v4
                                  - (*((_QWORD *)this + 44)
                                   + ((v5 + a2 - v4) / v4 - *((_QWORD *)this + 44) / v4)
                                   / (v7
                                    * (unint64_t)(v6 / v4))
                                   * v7
                                   * v6))
                                 / v4) << 33))
       + 0x200000000;
}

uint64_t ref::ref_cnt::take_exclusive@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ref::ref_cnt *v4;
  unint64_t v6;
  char v7;

  v4 = (ref::ref_cnt *)this;
  while (*(_QWORD *)v4)
  {
LABEL_9:
    this = ref::ref_cnt::wait_fn(v4, (const void *)1);
    if ((this & 1) == 0)
    {
      v7 = 0;
      goto LABEL_11;
    }
  }
  while (1)
  {
    v6 = __ldaxr((unint64_t *)v4);
    if (!v6)
      break;
    __clrex();
LABEL_8:
    if (v6)
      goto LABEL_9;
  }
  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)v4))
    goto LABEL_8;
  v7 = 1;
LABEL_11:
  *(_BYTE *)(a3 + 16) = v7;
  *(_QWORD *)a3 = &off_24CF07538;
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 24) = a2;
  return this;
}

BOOL di_asif::details::table_entry_obj::is_physically_contiguous(di_asif::details::table_entry_obj *this, const di_asif::details::table_entry_obj *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 20);
  v3 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 16 * *((_QWORD *)this + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v2;
  v4 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 56) + 16 * *((_QWORD *)a2 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 20);
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  return v5 || v3 == v4 + v2;
}

uint64_t Backend::get_returned_io_size(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  LODWORD(v2) = 0;
  v3 = *(unsigned int **)a1;
  v4 = 40 * v1;
  while (1)
  {
    v5 = lw_future<int>::get(v3);
    if ((v5 & 0x80000000) != 0)
      break;
    v2 = (v5 + v2);
    v3 += 10;
    v4 -= 40;
    if (!v4)
      return v2;
  }
  return v5;
}

size_t di_asif::details::table_entry_data::get_zeros(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[2];
  char v11;
  void *v12;
  std::__shared_weak_count *v13;
  size_t v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(unsigned int *)(v2 + 20);
  v10[0] = *(_QWORD *)(*a1 + 352) + (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  v10[1] = v10[0] + v4;
  v11 = 2;
  trim_sg_to_interval(a2, (uint64_t)v10, (uint64_t)&v12);
  if (v14)
  {
    bzero(v12, v14);
    v5 = v14;
  }
  else
  {
    v5 = -34;
  }
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t di_asif::details::map_element::flush_locked(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  if (!*((_BYTE *)this + 113))
    goto LABEL_23;
  *((_BYTE *)this + 113) = 0;
  v6 = *((_QWORD *)this + 2);
  if (!v6)
    goto LABEL_23;
  v9 = *((_QWORD *)this + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v22 = v9;
    v23 = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v24 = a4;
    v25 = v6;
    v26 = a4;
    v27 = 1;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v22 = v9;
    v23 = 0;
    v24 = a4;
    v25 = v6;
    v26 = a4;
    v27 = 1;
  }
  v15 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)a2 + 2) + 80))(*((_QWORD *)a2 + 2), &v22);
  v16 = v24;
  if (v24 != v15)
  {
    *((_BYTE *)this + 113) = 1;
    DiskImage::Context::terminate_di(a2);
    if (v15 < 0)
      a4 = v15;
    else
      a4 = -v15;
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16 == v15)
  {
LABEL_23:
    a4 = 0;
    if (a3)
    {
      if (*((_BYTE *)this + 112))
      {
        *((_BYTE *)this + 112) = 0;
        di_asif::details::table::update_map_entry(a3, *(_QWORD *)this, *((_QWORD *)this + 2));
        a4 = 0;
        if (!*((_QWORD *)this + 2))
        {
          v20 = *((_QWORD *)this + 3);
          if (v20)
            di_asif::details::table::return_chunk(a3, v20);
          return 0;
        }
      }
    }
  }
  return a4;
}

void sub_212F5E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::map_element::zero_range_in_sg(unint64_t result, di_asif::details::table *this, char **a3)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;

  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 1) + 18);
  v4 = a3[3];
  v5 = (unint64_t)v4 / v3 * v3;
  v6 = (unint64_t)&v4[(_QWORD)a3[2]];
  v7 = (v3 + v6 - 1) / v3 * v3;
  if (v5 < v7)
  {
    v9 = (_QWORD *)result;
    v10 = (unint64_t)v4 % v3;
    v11 = *a3;
    do
    {
      v12 = di_asif::details::map_element::search_for_pattern(v9, this, 1, v5, v7, 1);
      v13 = v12;
      if (v6 >= v12)
        v14 = v12;
      else
        v14 = v6;
      v15 = v5 + v10;
      if (v14 >= v5 + v10)
      {
        if ((unint64_t)&(*a3)[a3[2] - v11] >= v14 - (v5 + v10))
          v16 = v14 - (v5 + v10);
        else
          v16 = (size_t)&(*a3)[a3[2] - v11];
        bzero(v11, v16);
      }
      result = di_asif::details::map_element::search_for_pattern(v9, this, 1, v13, v7, 0);
      v5 = result;
      if (result < v14 + v10)
      {
        v17 = 0;
      }
      else
      {
        v10 = 0;
        v17 = result - v15;
      }
      v11 += v17;
    }
    while (result < v6);
  }
  return result;
}

void di_asif::details::map_element::load(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, const di_asif::details::table *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *exception;
  _QWORD *v18;
  uint64_t v19;
  const std::error_category *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = *((_QWORD *)this + 5);
  v7 = *(unsigned int *)(*((_QWORD *)a3 + 1) + 20);
  v8 = *((_QWORD *)this + 2);
  v9 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v21 = v6;
  v22 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v23 = v7;
  v24 = v8;
  v25 = v7;
  v26 = 0;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)a2 + 2) + 88))(*((_QWORD *)a2 + 2), &v21);
  if (v23 != v12)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v18 = exception;
    if (v12 < 0)
      v19 = v12;
    else
      v19 = -v12;
    *exception = &off_24CF07908;
    v20 = std::generic_category();
    v18[1] = v19;
    v18[2] = v20;
    *((_BYTE *)v18 + 24) = 0;
    *((_BYTE *)v18 + 48) = 0;
    v18[7] = "Can't load bitmap from backend";
  }
  if (*(_QWORD *)(*((_QWORD *)a3 + 1) + 48)
     * (*(_DWORD *)(*((_QWORD *)a3 + 1) + 20)
      / *(unsigned __int16 *)(*((_QWORD *)a3 + 1) + 18)))
  {
    v13 = 0;
    do
    {
      di_asif::details::map_element::get_block_bits(this, v13);
      v13 += 2;
    }
    while (*(_QWORD *)(*((_QWORD *)a3 + 1) + 48)
          * (unint64_t)(*(_DWORD *)(*((_QWORD *)a3 + 1) + 20)
                             / *(unsigned __int16 *)(*((_QWORD *)a3 + 1) + 18)) > v13);
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_212F5E8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

di_asif::details::map_element *di_asif::details::map_element::map_element(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];

  *(_QWORD *)this = a4;
  v9 = *((_QWORD *)a3 + 1);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(unsigned int *)(v9 + 20);
  *((_QWORD *)this + 1) = *((_QWORD *)a3 + 44) + a4 / (v10 + 1) * v10 * v11;
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = 0;
  v12 = a6 ^ 1;
  lock_free::bitmap_dynamically_allocated_t::bitmap_dynamically_allocated_t((_QWORD *)this + 4, 2 * v10 * (v11 / *(unsigned __int16 *)(v9 + 18)), a6 ^ 1);
  *((_QWORD *)this + 15) = 850045863;
  *((_WORD *)this + 56) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  if ((v12 & 1) != 0)
  {
    di_asif::details::map_element::load(this, a2, a3);
  }
  else
  {
    *((_WORD *)this + 56) = 257;
    di_asif::details::table_entry_map::table_entry_map(v16, a3, *(_QWORD *)this);
    v13 = (unint64_t *)(*(_QWORD *)(v16[0] + 56) + 16 * v16[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 | 0x8000000000000000, v13));
  }
  return this;
}

void sub_212F5E9E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;

  std::mutex::~mutex(v2);
  *(_QWORD *)(v1 + 32) = &off_24CEFD278;
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::map_element::close(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, uint64_t a4)
{
  std::mutex *v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *exception;
  _QWORD *v19;
  uint64_t v20;
  const std::error_category *v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(_BYTE *)(*((_QWORD *)a2 + 1) + 8) & 1) == 0)
  {
    v8 = (std::mutex *)((char *)this + 120);
    std::mutex::lock((std::mutex *)((char *)this + 120));
    v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 2) + 16))(*((_QWORD *)a2 + 2), 0);
    if (v9)
    {
      DiskImage::Context::terminate_di(a2);
      exception = __cxa_allocate_exception(0x40uLL);
      v19 = exception;
      if (v9 < 0)
        v20 = v9;
      else
        v20 = -v9;
      *exception = &off_24CF07908;
      v21 = std::generic_category();
      v19[1] = v20;
      v19[2] = v21;
      *((_BYTE *)v19 + 24) = 0;
      *((_BYTE *)v19 + 48) = 0;
      v19[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    if (!a3)
      goto LABEL_28;
    di_asif::details::table_entry_map::table_entry_map(&v22, a3, *(_QWORD *)this);
    v10 = (unint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v23 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 & 0x7FFFFFFFFFFFFFFFLL, v10));
    if ((v11 & 0x8000000000000000) != 0)
    {
      v12 = 1;
    }
    else
    {
LABEL_28:
      if (*((_BYTE *)this + 113))
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        if (!*((_BYTE *)this + 112))
        {
          v13 = 0;
LABEL_20:
          std::mutex::unlock(v8);
          return v13;
        }
      }
    }
    v13 = di_asif::details::map_element::flush_locked(this, a2, a3, a4);
    if ((_DWORD)v13)
      v14 = v12;
    else
      v14 = 0;
    if (a3 && v14)
    {
      di_asif::details::table_entry_map::table_entry_map(&v22, a3, *(_QWORD *)this);
      v15 = (unint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v23 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 | 0x8000000000000000, v15));
    }
    goto LABEL_20;
  }
  return 4294967290;
}

void sub_212F5EBAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::dir::load_create_table@<X0>(uint64_t this@<X0>, di_asif::details::ContextASIF *a2@<X1>, ref::details **a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, unint64_t *a7@<X8>)
{
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t space;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v10 = this;
  v19 = a4;
  *a7 = 0;
  if (a4 || a5)
  {
    ref::Allocator<di_asif::details::table,unsigned long long>::allocate(this + 280, a3, a6, &v18);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(a7, &v18);
    this = (uint64_t)ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v18);
    v12 = *a7;
    if (*a7)
      LOBYTE(v12) = *(_BYTE *)(v12 + 520) == 0;
    if ((v12 & 1) != 0 || (a6 & 1) != 0)
    {
      if (!*a7 || (v13 = atomic_load((unsigned int *)(*a7 + 24)), v13 != 2))
      {
        if (!*a7 || !*(_BYTE *)(*a7 + 520))
        {
          if (v19 | (*(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * (_QWORD)a3) * *(unsigned int *)(v10 + 20)))
          {
            if (v19)
              v14 = v19;
            else
              v14 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * (_QWORD)a3) * *(unsigned int *)(v10 + 20);
            v18 = *(_QWORD *)(v10 + 80) * (_QWORD)a3;
            v19 = v14;
            return ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long>((uint64_t *)a7, v10, (_QWORD *)a2 + 2, &v19, (uint64_t *)&v18);
          }
          else
          {
            space = di_asif::details::dir_base::allocate_space((di_asif::details::dir_base *)v10, a2, 1);
            v17 = *(_QWORD *)(v10 + 80) * (_QWORD)a3;
            v18 = space;
            v16 = 1;
            this = ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL>((uint64_t *)a7, v10, (_QWORD *)a2 + 2, &v18, &v17, &v16);
            *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * (_QWORD)a3) = v18 / *(unsigned int *)(v10 + 20);
          }
        }
      }
    }
  }
  return this;
}

void sub_212F5ED2C(_Unwind_Exception *a1)
{
  unint64_t *v1;

  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(v1);
  _Unwind_Resume(a1);
}

unint64_t *ref::Allocator<di_asif::details::table,unsigned long long>::allocate@<X0>(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t *min;
  uint64_t *v9;
  char v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  ref::details **v17;

  v16 = 0;
  v17 = a2;
  ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 520) || v14 && *(_BYTE *)(v14 + 520))
  {
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v14);
  }
  if (*(_BYTE *)(a1 + 912) && v15 != (_QWORD *)(a1 + 936))
  {
    do
    {
      ref::Allocator<di_asif::details::table,unsigned long long>::allocate_from_empty_pool(a1, (uint64_t)a2, &v12);
      v16 = v12;
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v14, &v13);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 520))
          break;
      }
      min = (unint64_t *)ref::Allocator<di_asif::details::table,unsigned long long>::extract_min((_QWORD *)a1);
      if (min)
      {
        v16 = min;
        ref::Allocator<di_asif::details::table,unsigned long long>::insert_elem(a1, min, (uint64_t)a2, (unint64_t *)&v12);
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v14, (unint64_t *)&v12);
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v12);
        break;
      }
    }
    while (*(_BYTE *)(a1 + 912));
    std::mutex::lock((std::mutex *)(a1 + 952));
    v9 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *&>((uint64_t **)(a1 + 928), v15, (unint64_t *)&v17, (uint64_t *)&v17, (uint64_t *)&v16);
    if (!v10)
      v9[5] = (uint64_t)v16;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
    std::mutex::unlock((std::mutex *)(a1 + 952));
    ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
    goto LABEL_21;
  }
  *a4 = 0;
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v14);
}

void sub_212F5EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  if (a2 != a1)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(0, a2));
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(a1);
    atomic_store(v3, a1);
  }
  return a1;
}

uint64_t ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  return ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL>(*a1, a2, a3, a4, a5, a6);
}

void sub_212F5EFAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 464);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_212F5EFE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  return ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long>(*a1, a2, a3, a4, a5);
}

void sub_212F5F020(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  __cxa_begin_catch(a1);
  if (*v10)
  {
    v11 = *(_QWORD *)(*v10 + 464);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &a10, v10);
    }
  }
  __cxa_rethrow();
}

void sub_212F5F054(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t *ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = atomic_load(result);
  if (v4 && *(_QWORD *)(v4 + 32) == a2)
  {
    v6 = (unint64_t *)atomic_load(result);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 520))
    {
      v7 = *(_QWORD *)(v9 + 32);
      *a3 = 0;
      if (v7 == a2)
      {
        do
          v8 = __ldaxr(&v9);
        while (__stlxr(0, &v9));
        atomic_store(v8, a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<2061ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<2061ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF04B98;
  a1[45] = &unk_24CF04C98;
  a1[46] = &unk_24CF04CC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF04B98;
  a1[45] = &unk_24CF04C20;
  a1[46] = &unk_24CF04C48;
  return a1;
}

void sub_212F5F18C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2061ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<2071ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<2071ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF04DB8;
  a1[45] = &unk_24CF04EB8;
  a1[46] = &unk_24CF04EE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF04DB8;
  a1[45] = &unk_24CF04E40;
  a1[46] = &unk_24CF04E68;
  return a1;
}

void sub_212F5F274(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2071ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_asif::details::dir::handle_all_failures(di_asif::details::dir *this, di_asif::details::ContextASIF *a2)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;

  v4 = ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list((uint64_t)this + 2080, 0, 0, 0);
  if (v4 == -1)
    return 4294967282;
  if (v4 == 1)
  {
    LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 2) + 16))(*((_QWORD *)a2 + 2), 0);
    v6 = result;
    result = (int)result < 0 ? result : -(int)result;
    if (v6)
      return result;
  }
  v7 = ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list((uint64_t)this + 280, 0, 0, 0);
  if (v7 == -1)
    return 4294967282;
  if (v7 != 1)
    return 0;
  LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 2) + 16))(*((_QWORD *)a2 + 2), 0);
  v8 = result;
  result = (int)result < 0 ? result : -(int)result;
  if (!v8)
    return 0;
  return result;
}

uint64_t di_asif::details::dir::flush_dir(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, uint64_t (***a3)())
{
  std::mutex *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  size_t v10;
  _QWORD *v11;
  uint64_t (***v12)();
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  unint64_t **v27;
  unint64_t *v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::bad_alloc *exception;
  std::bad_alloc *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t (**v47)();
  std::__shared_weak_count *v48;
  size_t v49;
  uint64_t (***v50)();
  size_t v51;
  char v52;
  _QWORD *v53;
  _QWORD v54[5];

  v54[4] = *MEMORY[0x24BDAC8D0];
  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  v6 = (std::mutex *)((char *)this + 3792);
  std::mutex::lock((std::mutex *)((char *)this + 3792));
  v7 = *((_OWORD *)this + 234);
  *((_OWORD *)this + 234) = 0u;
  v8 = *((_OWORD *)this + 235);
  v44 = v7;
  v45 = v8;
  *((_OWORD *)this + 235) = 0u;
  v9 = v46;
  v46 = *((_OWORD *)this + 236);
  *((_OWORD *)this + 236) = v9;
  std::mutex::unlock(v6);
  v10 = (*((_QWORD *)this + 20) - *((_QWORD *)this + 19) + (unint64_t)*((unsigned __int16 *)this + 9) + 7)
      / *((unsigned __int16 *)this + 9)
      * *((unsigned __int16 *)this + 9);
  v11 = malloc_type_valloc(v10, 0xF8ED6DDuLL);
  if (!v11)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v43 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v43, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v47 = &off_24CF03100;
  v50 = &v47;
  v53 = v11;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v54, (uint64_t)&v47);
  v12 = v50;
  if (v50 == &v47)
  {
    v13 = 4;
    v12 = &v47;
    goto LABEL_6;
  }
  if (v50)
  {
    v13 = 5;
LABEL_6:
    ((void (*)(uint64_t (***)()))(*v12)[v13])(v12);
  }
  v14 = v53;
  v15 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = v15 + 1;
  *v14 = bswap64(v15);
  v16 = v14 + 1;
  v17 = (unint64_t *)*((_QWORD *)this + 19);
  v18 = (unint64_t *)*((_QWORD *)this + 20);
  while (v17 != v18)
  {
    v19 = *v17++;
    *v16++ = bswap64(v19);
  }
  bzero(v16, (size_t)v53 + v10 - (_QWORD)v16);
  ref::Allocator<di_asif::details::map_element,unsigned long long>::wait_for_idle((uint64_t)this + 2080);
  ref::Allocator<di_asif::details::table,unsigned long long>::wait_for_idle((uint64_t)this + 280);
  v20 = di_asif::details::dir::handle_all_failures(this, a2);
  if (!(_DWORD)v20)
  {
    v22 = (uint64_t)v53;
    v23 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
    v47 = (uint64_t (**)())v22;
    v48 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v49 = v10;
    v50 = a3;
    v51 = v10;
    v52 = 0;
    v26 = (*(uint64_t (**)(_QWORD, uint64_t (***)()))(**((_QWORD **)a2 + 2) + 80))(*((_QWORD *)a2 + 2), &v47);
    if (v10 == v26)
    {
      v27 = (unint64_t **)(*((_QWORD *)&v44 + 1) + 8 * ((unint64_t)v46 >> 9));
      if ((_QWORD)v45 == *((_QWORD *)&v44 + 1))
      {
        v28 = 0;
        v30 = 0;
        v29 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
      }
      else
      {
        v28 = &(*v27)[v46 & 0x1FF];
        v29 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
        v30 = (unint64_t *)(*(_QWORD *)v29 + 8 * ((*((_QWORD *)&v46 + 1) + v46) & 0x1FF));
      }
      di_asif::details::dir_base::insert_space<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>((unint64_t *)this, v27, v28, v29, v30, (uint64_t)a2);
      v20 = 1;
    }
    else
    {
      *((_QWORD *)this + 451) = v15;
      std::mutex::lock(v6);
      v31 = *((_QWORD *)this + 472) + *((_QWORD *)this + 473);
      v32 = *((_QWORD *)this + 469);
      v33 = (char *)(v32 + 8 * (v31 >> 9));
      if (*((_QWORD *)this + 470) == v32)
        v34 = 0;
      else
        v34 = *(_QWORD *)v33 + 8 * (v31 & 0x1FF);
      v35 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((unint64_t)v46 >> 9));
      if ((_QWORD)v45 == *((_QWORD *)&v44 + 1))
      {
        v36 = 0;
        v38 = 0;
        v37 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
      }
      else
      {
        v36 = (char *)(*(_QWORD *)v35 + 8 * (v46 & 0x1FF));
        v37 = (char *)(*((_QWORD *)&v44 + 1) + 8 * ((*((_QWORD *)&v46 + 1) + (_QWORD)v46) >> 9));
        v38 = (char *)(*(_QWORD *)v37 + 8 * ((*((_QWORD *)&v46 + 1) + v46) & 0x1FF));
      }
      std::deque<unsigned long long>::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>((void **)this + 468, v33, v34, v35, v36, v37, v38);
      if (v26 >= 0)
        v20 = 4294967291;
      else
        v20 = v26;
      std::mutex::unlock(v6);
    }
    v39 = v48;
    if (v48)
    {
      v40 = (unint64_t *)&v48->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v53);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&v44);
  return v20;
}

void sub_212F5F72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::mutex *v21;

  std::mutex::unlock(v21);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100](&a21);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::wait_for_idle(uint64_t a1)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v7;
  std::unique_lock<std::mutex> v8;

  if (atomic_load((unint64_t *)(a1 + 608)))
  {
    v3 = (unint64_t *)(a1 + 616);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 624));
    while (atomic_load((unint64_t *)(a1 + 608)))
      std::condition_variable::wait((std::condition_variable *)(a1 + 688), &v8);
    do
      v7 = __ldaxr(v3);
    while (__stlxr(v7 - 1, v3));
    if (v8.__owns_)
      std::mutex::unlock(v8.__m_);
  }
}

void ref::Allocator<di_asif::details::table,unsigned long long>::wait_for_idle(uint64_t a1)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v7;
  std::unique_lock<std::mutex> v8;

  if (atomic_load((unint64_t *)(a1 + 784)))
  {
    v3 = (unint64_t *)(a1 + 792);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 800);
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 800));
    while (atomic_load((unint64_t *)(a1 + 784)))
      std::condition_variable::wait((std::condition_variable *)(a1 + 864), &v8);
    do
      v7 = __ldaxr(v3);
    while (__stlxr(v7 - 1, v3));
    if (v8.__owns_)
      std::mutex::unlock(v8.__m_);
  }
}

uint64_t di_asif::details::dir::do_io(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4, int a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  size_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  di_asif::details::table *v35;
  di_asif::details::table *v36;
  uint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  _BYTE *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _OWORD v58[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  uint64_t v67;
  char v68;

  v8 = *((_QWORD *)a4 + 18) - *((_QWORD *)a3 + 18);
  v9 = *((_QWORD *)a3 + 3);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
  v56 = *(_QWORD *)a3;
  v57 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v58[0] = *((_OWORD *)a3 + 1);
  v13 = v8 & ~(v8 >> 63);
  *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)a3 + 25);
  v59 = *((_QWORD *)a3 + 6);
  v60 = *(_OWORD *)((char *)a3 + 56);
  v61 = *(_OWORD *)((char *)a3 + 72);
  v62 = *(_OWORD *)((char *)a3 + 88);
  v63 = *((_BYTE *)a3 + 104);
  v14 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  v64 = *((_QWORD *)a3 + 14);
  v65 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = 0;
  v66 = *((_OWORD *)a3 + 8);
  v67 = *((_QWORD *)a3 + 18);
  v68 = *((_BYTE *)a3 + 152);
  v18 = a5 ^ 1;
  while (1)
  {
    v19 = v9 / *((_QWORD *)this + 10);
    di_asif::details::dir::get_table(this, a2, v19, v18, 1, (unint64_t *)&v55);
    if (v55 && v55[520])
    {
      if ((a5 & 1) == 0)
        DiskImage::Context::terminate_di(a2);
      v20 = 1;
      v5 = -5;
      goto LABEL_38;
    }
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v56, a4, *((_QWORD *)this + 10) + *((_QWORD *)this + 10) * v19, 0, (uint64_t)&v48);
    if (!v55 || v55[520])
    {
      v21 = 0;
      do
      {
        v22 = v50;
        bzero(v48, v50);
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v48, v22);
        v21 += v22;
      }
      while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v48, (uint64_t)&v52));
      goto LABEL_17;
    }
    if (a5)
    {
      if (v55[400])
        v35 = (di_asif::details::table *)(v55 + 40);
      else
        v35 = 0;
      v37 = di_asif::details::table::read(v35, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v48, (const sg_vec_ns::details::sg_vec_iterator *)&v52);
      v5 = v37;
      if ((v37 & 0x8000000000000000) == 0 || !(_DWORD)v37)
        goto LABEL_55;
    }
    else
    {
      if (v55[400])
        v36 = (di_asif::details::table *)(v55 + 40);
      else
        v36 = 0;
      v38 = di_asif::details::table::write(v36, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v48, (const sg_vec_ns::details::sg_vec_iterator *)&v52);
      v5 = v38;
      if ((v38 & 0x8000000000000000) == 0 || !(_DWORD)v38)
      {
LABEL_55:
        v21 = v5;
LABEL_17:
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v56, v21);
        v20 = 0;
        v9 += v21;
        v17 += v21;
        goto LABEL_18;
      }
      DiskImage::Context::terminate_di(a2);
    }
    v20 = 1;
LABEL_18:
    v23 = v54;
    if (v54)
    {
      v24 = (unint64_t *)&v54->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v53;
    if (v53)
    {
      v27 = (unint64_t *)&v53->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v51;
    if (v51)
    {
      v30 = (unint64_t *)&v51->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v49;
    if (v49)
    {
      v33 = (unint64_t *)&v49->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
LABEL_38:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v55);
    if (v20)
      break;
    if (v17 == v13)
      goto LABEL_57;
  }
  v13 = v5;
LABEL_57:
  v39 = v65;
  if (v65)
  {
    v40 = (unint64_t *)&v65->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v57;
  if (v57)
  {
    v43 = (unint64_t *)&v57->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return v13;
}

void sub_212F5FCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)(v10 - 256));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10 - 248);
  _Unwind_Resume(a1);
}

double di_asif::details::asif_extents_iterator_interface::make_val@<D0>(di_asif::details::asif_extents_iterator_interface *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int next_extent;
  double result;
  DiskImagesRuntimeException *exception;
  void *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;

  v3 = (*((_BYTE *)this + 32) & 1) + *((_QWORD *)this + 3);
  v10[0] = *((_QWORD *)this + 5);
  v10[1] = v3;
  v11 = 2;
  *(_QWORD *)&v8 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *((_QWORD *)&v8 + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  LOBYTE(v9) = 2;
  next_extent = di_asif::details::dir::get_next_extent(*((di_asif::details::dir **)this + 8), *((di_asif::details::ContextASIF **)this + 7), v10, (uint64_t)&v8);
  if (next_extent >= 3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Can't convert ASIF flag.", 5u);
  }
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = next_extent;
  return result;
}

uint64_t di_asif::details::dir::get_next_extent(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t next_extent;
  unint64_t v14;
  di_asif::details::table *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *exception;
  const std::error_category *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  _BYTE *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  unsigned __int8 v33;

  v7 = 0;
  *(_QWORD *)&v32 = *a3;
  *((_QWORD *)&v32 + 1) = v32;
  v29 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  v30 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  v33 = 2;
  v31 = 2;
  v27 = *(_OWORD *)a3;
  v28 = a3[2];
  do
  {
    if ((_BYTE)v28)
    {
      if (v28 == 3)
      {
        v9 = *((_QWORD *)&v27 + 1);
        v8 = v27;
        if (*((_QWORD *)&v27 + 1) < (unint64_t)v27)
          goto LABEL_5;
      }
      else
      {
        v9 = *((_QWORD *)&v27 + 1);
        v8 = v27;
        if ((unint64_t)v27 >= *((_QWORD *)&v27 + 1))
          goto LABEL_5;
      }
    }
    else
    {
      v9 = *((_QWORD *)&v27 + 1);
      v8 = v27;
      if ((unint64_t)v27 >= *((_QWORD *)&v27 + 1) || (unint64_t)(v27 + 1) >= *((_QWORD *)&v27 + 1))
      {
LABEL_5:
        if (!boost::icl::identity_element<unsigned long long>::value(void)::_value)
          break;
        goto LABEL_12;
      }
    }
    if (!((v28 & 1) + ((v28 >> 1) & 1) - 1 - v8 + v9))
      break;
LABEL_12:
    if ((v28 & 2) != 0)
      v11 = v8;
    else
      v11 = v8 + 1;
    v12 = v11 * *((unsigned __int16 *)this + 9);
    di_asif::details::dir::get_table(this, a2, v12 / *((_QWORD *)this + 10), 0, 1, (unint64_t *)&v26);
    if (v26 && v26[520])
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v21 = std::generic_category();
      exception[1] = 4294967291;
      exception[2] = v21;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Can't load table to get extents";
    }
    if (v26 && !v26[520])
    {
      if (v26[400])
        v15 = (di_asif::details::table *)(v26 + 40);
      else
        v15 = 0;
      next_extent = di_asif::details::table::get_next_extent(v15, a2, (uint64_t)&v27, (uint64_t)&v29);
    }
    else
    {
      next_extent = 0;
      v14 = (*((_QWORD *)this + 10) + *((_QWORD *)this + 10) * (v12 / *((_QWORD *)this + 10)) + 1)
          / *((unsigned __int16 *)this + 9);
      if (v14 >= v9)
        v14 = v9;
      v29 = v11;
      v30 = v14;
      v31 = 2;
    }
    if ((_DWORD)next_extent == (_DWORD)v7)
    {
LABEL_36:
      *((_QWORD *)&v32 + 1) = v30;
      v33 = 2;
      v22 = v27;
      v23 = v28;
      boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v24);
      v27 = v24;
      LOBYTE(v28) = v25;
      v18 = 1;
      v7 = next_extent;
      goto LABEL_40;
    }
    if (v33)
    {
      if (v33 == 3)
      {
        v16 = *((_QWORD *)&v32 + 1);
        v17 = v32;
        if (*((_QWORD *)&v32 + 1) >= (unint64_t)v32)
          goto LABEL_35;
      }
      else
      {
        v16 = *((_QWORD *)&v32 + 1);
        v17 = v32;
        if ((unint64_t)v32 < *((_QWORD *)&v32 + 1))
          goto LABEL_35;
      }
    }
    else
    {
      v16 = *((_QWORD *)&v32 + 1);
      v17 = v32;
      if ((unint64_t)v32 < *((_QWORD *)&v32 + 1) && (unint64_t)(v32 + 1) < *((_QWORD *)&v32 + 1))
      {
LABEL_35:
        if (!((v33 & 1) + (uint64_t)(((v33 >> 1) & 1) - 1) - v17 + v16))
          goto LABEL_36;
        goto LABEL_39;
      }
    }
    if (!boost::icl::identity_element<unsigned long long>::value(void)::_value)
      goto LABEL_36;
LABEL_39:
    v18 = 0;
LABEL_40:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v26);
  }
  while ((v18 & 1) != 0);
  *(_OWORD *)a4 = v32;
  *(_BYTE *)(a4 + 16) = v33;
  return v7;
}

void sub_212F600A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::get_next_extent(di_asif::details::table *a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *data_entry_for_offset;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  di_asif::details::map_element *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  ref::ref_cnt *v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *exception;
  const std::error_category *v43;
  _QWORD *v44;
  const std::error_category *v45;
  int v49[2];
  unint64_t v50;
  _QWORD v51[2];
  char v52;
  _BYTE v53[7];
  unint64_t v54;
  __int128 v55;
  int v56;
  unint64_t v57[2];
  unsigned __int8 v58;
  _QWORD v59[20];
  _QWORD v60[2];
  BOOL v61;
  _QWORD *v62;
  uint64_t v63;
  _DWORD v64[4];

  v5 = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(unsigned __int8 *)(a3 + 16);
  v64[0] = *(_DWORD *)(a3 + 17);
  *(_DWORD *)((char *)v64 + 3) = *(_DWORD *)(a3 + 20);
  if ((v7 & 2) != 0)
    v8 = v5;
  else
    v8 = v5 + 1;
  data_entry_for_offset = (_QWORD *)di_asif::details::table::get_data_entry_for_offset(a1, v8 * *(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 18));
  v11 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v10 + 8));
  *(_QWORD *)v49 = v11 >> 62;
  if (v11 >> 62 == 3)
  {
    v12 = data_entry_for_offset[1];
    di_asif::details::table::get_bitmap(a1, a2, (data_entry_for_offset[44]+ (*(_QWORD *)(v12 + 48) + *(_QWORD *)(v12 + 48) * v10)/ (unint64_t)(*(_QWORD *)(v12 + 48) + 1)* *(unsigned int *)(v12 + 20))/ *(unsigned __int16 *)(v12 + 18), 0, 1, v57);
    v13 = *((_QWORD *)a1 + 1);
    if (v57[0])
    {
      if (*(_BYTE *)(v57[0] + 224))
        v15 = (di_asif::details::map_element *)(v57[0] + 40);
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    v14 = *(unsigned __int16 *)(v13 + 18);
    *(_QWORD *)v49 = di_asif::details::map_element::get_block_bits(v15, 2* ((v8 * v14- (*((_QWORD *)a1 + 44)+ *(_QWORD *)(v13 + 48)* *(unsigned int *)(v13 + 20)* ((v8 * v14 / v14 - *((_QWORD *)a1 + 44) / v14)/ (*(_QWORD *)(v13 + 48)* (unint64_t)(*(_DWORD *)(v13 + 20) / v14)))))/ v14));
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(v57);
  }
  v16 = 0;
  while (1)
  {
    if ((_BYTE)v7)
    {
      if (v7 == 3)
      {
        if (v6 >= v5)
          goto LABEL_18;
      }
      else if (v6 > v5)
      {
        goto LABEL_18;
      }
    }
    else if (v6 > v5 && v5 + 1 < v6)
    {
LABEL_18:
      if (!(v6 - v5 + (v7 & 1) + (int)(((v7 >> 1) & 1) - 1)))
        goto LABEL_42;
      goto LABEL_22;
    }
    if (!boost::icl::identity_element<unsigned long long>::value(void)::_value)
      goto LABEL_42;
LABEL_22:
    if ((v7 & 2) != 0)
      v17 = v5;
    else
      v17 = v5 + 1;
    v18 = *((_QWORD *)a1 + 1);
    v19 = v17 * *(unsigned __int16 *)(v18 + 18);
    if (v19 >= *(_QWORD *)(v18 + 80) + *((_QWORD *)a1 + 44))
      goto LABEL_42;
    v20 = (_QWORD *)di_asif::details::table::get_data_entry_for_offset(a1, v19);
    v22 = v20;
    v23 = v21;
    v62 = v20;
    v63 = v21;
    v24 = v7;
    v50 = v6;
    v25 = *(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 18);
    v26 = v20[1];
    v27 = (*(_QWORD *)(v26 + 48) + *(_QWORD *)(v26 + 48) * v21) / (unint64_t)(*(_QWORD *)(v26 + 48) + 1);
    v28 = *(unsigned int *)(v26 + 20);
    if (v20[44] + v28 + v27 * v28 >= v25 + v25 * (v6 + (int)((v7 & 1) - 1)))
      v29 = v25 + v25 * (v6 + (int)((v7 & 1) - 1));
    else
      v29 = v20[44] + v28 + v27 * v28;
    v30 = (ref::ref_cnt *)(v20[7] + 16 * v21);
    v31 = ref::ref_cnt::get(v30);
    v60[0] = &off_24CF07518;
    v60[1] = v30;
    v61 = v31;
    if (!v31)
    {
      *(_QWORD *)&v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((_QWORD *)&v55 + 1) = 40;
      v56 = 16;
      di_log::logger<di_log::log_printer<2311ul>>::logger(v57, &v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Couldn't lock entry ", 20);
      di_asif::details::operator<<(v59, &v62);
      di_log::logger<di_log::log_printer<2311ul>>::~logger((uint64_t)v57);
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v43 = std::generic_category();
      exception[1] = 5;
      exception[2] = v43;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Can't lock entry";
    }
    v32 = atomic_load((unint64_t *)(v22[7] + 16 * v23 + 8));
    v33 = v32 >> 62;
    if (v49[0] == (_DWORD)v33)
    {
      v34 = *((_QWORD *)a1 + 1);
      v16 = v29 / *(unsigned __int16 *)(v34 + 18);
      goto LABEL_40;
    }
    if ((_DWORD)v33 != 3)
      break;
    v35 = v62[1];
    di_asif::details::table::get_bitmap(a1, a2, (v62[44]+ (*(_QWORD *)(v35 + 48) + *(_QWORD *)(v35 + 48) * v63)/ (unint64_t)(*(_QWORD *)(v35 + 48) + 1)* *(unsigned int *)(v35 + 20))/ *(unsigned __int16 *)(v35 + 18), 0, 1, &v54);
    if (!v54 || *(_BYTE *)(v54 + 344))
    {
      *(_QWORD *)&v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((_QWORD *)&v55 + 1) = 40;
      v56 = 16;
      di_log::logger<di_log::log_printer<2321ul>>::logger(v57, &v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Can't read bitmap", 17);
      di_log::logger<di_log::log_printer<2321ul>>::~logger((uint64_t)v57);
      v44 = __cxa_allocate_exception(0x40uLL);
      *v44 = &off_24CF07908;
      v45 = std::generic_category();
      v44[1] = 5;
      v44[2] = v45;
      *((_BYTE *)v44 + 24) = 0;
      *((_BYTE *)v44 + 48) = 0;
      v44[7] = "Can't read bitmap";
    }
    v36 = *(_BYTE *)(v54 + 224) ? (_QWORD *)(v54 + 40) : 0;
    v37 = di_asif::details::map_element::search_for_pattern(v36, a1, v49[0], v19, v29, 0);
    v38 = *(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 18);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v54);
    v16 = v37 / v38;
    if (v37 < v29)
      break;
    v34 = *((_QWORD *)a1 + 1);
LABEL_40:
    v51[0] = v5;
    v51[1] = v50;
    v52 = v24;
    *(_DWORD *)v53 = v64[0];
    *(_DWORD *)&v53[3] = *(_DWORD *)((char *)v64 + 3);
    v39 = v29 / *(unsigned __int16 *)(v34 + 18);
    *(_QWORD *)&v55 = v17;
    *((_QWORD *)&v55 + 1) = v39;
    LOBYTE(v56) = 2;
    boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)v51, (uint64_t)&v55, (uint64_t)v57);
    v5 = v57[0];
    v6 = v57[1];
    v7 = v58;
    ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v60);
  }
  ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v60);
LABEL_42:
  v40 = *(_QWORD *)a3;
  if ((*(_BYTE *)(a3 + 16) & 2) == 0)
    ++v40;
  *(_QWORD *)a4 = v40;
  *(_QWORD *)(a4 + 8) = v16;
  *(_BYTE *)(a4 + 16) = 2;
  return *(_QWORD *)v49;
}

void sub_212F60610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<2311ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<2311ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF04FD8;
  a1[45] = &unk_24CF050D8;
  a1[46] = &unk_24CF05100;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF04FD8;
  a1[45] = &unk_24CF05060;
  a1[46] = &unk_24CF05088;
  return a1;
}

void sub_212F60708(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2311ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<2321ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<2321ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF051F8;
  a1[45] = &unk_24CF052F8;
  a1[46] = &unk_24CF05320;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF051F8;
  a1[45] = &unk_24CF05280;
  a1[46] = &unk_24CF052A8;
  return a1;
}

void sub_212F607F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2321ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_asif::details::dir::unmap(uint64_t a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t val;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  di_asif::details::dir::make_unmap_iterators(a1, a3, a4, (uint64_t)&v32);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 184);
  while (v32 != v40 || v33 != v41 || v34 != v42 || v34 != v32 + 16 * v33 && (v37 != v43 || v38 != v44 || v39 != v45))
  {
    v10 = val * *(unsigned __int16 *)(a1 + 18);
    di_asif::details::dir::get_table((di_asif::details::dir *)a1, a2, v10 / *(_QWORD *)(a1 + 80), v9 == 0, 1, &v31);
    if (v31 && !*(_BYTE *)(v31 + 520))
    {
      if (*(_BYTE *)(v31 + 400))
        v15 = v31 + 40;
      else
        v15 = 0;
      di_asif::details::table::unmap(v15, a2, a3, a4, &v18);
      v34 = v19;
      v37 = v22;
      if (v33 != (v19 - v32) >> 4)
      {
        val = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)&v32);
        v36 = v16;
      }
      v12 = 0;
      goto LABEL_37;
    }
    if (v31)
    {
      if (*(_BYTE *)(v31 + 520))
        v11 = 4294967291;
      else
        v11 = 0;
      if (!(*(unsigned __int8 *)(v31 + 520) | v9))
      {
LABEL_19:
        di_asif::details::table::make_unmap_iterators(a3, a4, *(unsigned int *)(a1 + 20), *(unsigned __int16 *)(a1 + 18), v10 / *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 80) + v10 / *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 80), (uint64_t)&v18);
        while ((_QWORD)v18 != v25
             || *((_QWORD *)&v18 + 1) != v26
             || v19 != v27
             || v19 != (_QWORD)v18 + 16 * *((_QWORD *)&v18 + 1) && (v22 != v28 || v23 != v29 || v24 != v30))
        {
          v22 += v24 * v21;
          v20 = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)&v18);
          v21 = v13;
        }
        v34 = v19;
        v37 = v22;
        if (v33 != (v19 - v32) >> 4)
        {
          val = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)&v32);
          v36 = v14;
        }
        v12 = 2;
        goto LABEL_37;
      }
      v12 = 1;
      v4 = v11;
    }
    else
    {
      if (!v9)
        goto LABEL_19;
      v4 = 0;
      v12 = 1;
    }
LABEL_37:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v31);
    if ((v12 | 2) != 2)
      return v4;
  }
  return 0;
}

uint64_t di_asif::details::dir::flush(unint64_t **this, di_asif::details::ContextASIF *a2, uint64_t (***a3)())
{
  std::mutex *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  di_asif::details::table *v16;
  _BOOL4 v17;
  _BYTE *v18;

  v6 = (std::mutex *)(this + 441);
  std::mutex::lock((std::mutex *)(this + 441));
  ref::Allocator<di_asif::details::map_element,unsigned long long>::wait_for_idle((uint64_t)(this + 260));
  ref::Allocator<di_asif::details::table,unsigned long long>::wait_for_idle((uint64_t)(this + 35));
  v7 = (unsigned int *)(this + 449);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(0, v7));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 2) + 16))(*((_QWORD *)a2 + 2), 0);
  if (v9)
    goto LABEL_4;
  v10 = di_asif::details::dir::handle_all_failures((di_asif::details::dir *)this, a2);
  if ((_DWORD)v10)
  {
LABEL_10:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v13 = this[16];
  v14 = this[17];
  if (v13 == v14)
  {
    v10 = 0;
    if (v8)
      goto LABEL_24;
LABEL_27:
    if (this[450] == (unint64_t *)a3)
    {
LABEL_29:
      if (!v8 && (v10 & 0x80000000) == 0)
      {
        v10 = 0;
        goto LABEL_8;
      }
      goto LABEL_10;
    }
LABEL_28:
    v10 = di_asif::details::dir::flush_dir((di_asif::details::dir *)this, a2, a3);
    goto LABEL_29;
  }
  v10 = 0;
  v15 = 0;
  do
  {
    ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag(v13, v15 / (unint64_t)this[10], (unint64_t *)&v18);
    if (v18 && !v18[520])
    {
      if (v18[400])
        v16 = (di_asif::details::table *)(v18 + 40);
      else
        v16 = 0;
      v17 = di_asif::details::table::flush(v16, a2);
      if (v8)
        v8 = 1;
      else
        v8 = v17;
    }
    v15 += (unint64_t)this[10];
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v18);
    ++v13;
  }
  while (v13 != v14);
  if (!v8)
    goto LABEL_27;
LABEL_24:
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 2) + 16))(*((_QWORD *)a2 + 2), 0);
  if (!v9)
    goto LABEL_28;
LABEL_4:
  if (v9 < 0)
    v10 = v9;
  else
    v10 = -v9;
  do
LABEL_7:
    v11 = __ldaxr(v7);
  while (__stlxr(v11 | v8, v7));
LABEL_8:
  std::mutex::unlock(v6);
  return v10;
}

void sub_212F60D48()
{
  JUMPOUT(0x212F60D58);
}

uint64_t di_asif::details::dir::dir(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t (***a6)(), uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v17;
  unint64_t v18;
  system_properties *v19;
  uint64_t v20;
  uint64_t (**resources)(system_properties::$_2 *__hidden);
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::__thread_struct *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  _QWORD *exception;
  const std::error_category *v39;
  pthread_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  pthread_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD v47[2];
  system_properties *v48;
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v17 = (_QWORD *)di_asif::details::dir_base::dir_base(a1, a2, a4, a5);
  *v17 = &off_24CF025C0;
  v17[11] = &off_24CF06550;
  v17[12] = v17;
  v43 = (uint64_t)(v17 + 11);
  v17[14] = v17 + 11;
  v17[15] = a3;
  std::vector<ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>>::vector(v17 + 16, (unint64_t)(*(_QWORD *)(a1 + 80) + a3 - 1) / *(_QWORD *)(a1 + 80));
  std::vector<unsigned long long>::vector((_QWORD *)(a1 + 152), (unint64_t)(*(_QWORD *)(a1 + 80) + a3 - 1) / *(_QWORD *)(a1 + 80));
  *(_QWORD *)(a1 + 176) = a4;
  v41 = a5 + 7;
  v42 = a5 - 1;
  v18 = (a4
       - 1
       + (v42 + (unint64_t)a6) / a5 * a5
       + (v41 + 8 * ((unint64_t)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 80) - 1) / *(_QWORD *)(a1 + 80)))
       / a5
       * a5
       * a7)
      / a4;
  *(_QWORD *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = v18 * a4;
  v48 = 0;
  ref::Allocator<di_asif::details::table,unsigned long long>::Allocator(a1 + 280, 2, 0, (uint64_t)&v46);
  v19 = v48;
  if (v48 == (system_properties *)&v46)
  {
    v20 = 4;
    v19 = (system_properties *)&v46;
  }
  else
  {
    if (!v48)
      goto LABEL_6;
    v20 = 5;
  }
  v19 = (system_properties *)(*(uint64_t (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  resources = system_properties::get_resources(v19);
  v22 = (int *)(a2 + 188);
  if (!*(_BYTE *)(a2 + 192))
    v22 = (int *)(resources + 4);
  v23 = *v22;
  v24 = 64;
  if (v23 == 1)
    v24 = 32;
  if (v23)
    v25 = v24;
  else
    v25 = 16;
  ref::Allocator<di_asif::details::map_element,unsigned long long>::Allocator(a1 + 2080, v25, 2, v43);
  *(_QWORD *)(a1 + 3528) = 850045863;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3568) = 0u;
  *(_QWORD *)(a1 + 3584) = 0;
  *(_DWORD *)(a1 + 3592) = a8 == 0;
  *(_QWORD *)(a1 + 3600) = a6;
  v40 = (pthread_t *)(a1 + 3616);
  *(_OWORD *)(a1 + 3608) = 0u;
  *(_QWORD *)(a1 + 3624) = 1018212795;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3657) = 0u;
  *(_QWORD *)(a1 + 3680) = 850045863;
  *(_QWORD *)(a1 + 3784) = 0;
  *(_OWORD *)(a1 + 3688) = 0u;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_QWORD *)(a1 + 3792) = 850045863;
  *(_OWORD *)(a1 + 3800) = 0u;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_QWORD *)(a1 + 3848) = 0;
  if (*(_QWORD *)(a1 + 80) == 1 && a3 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v39 = std::generic_category();
    exception[1] = 22;
    exception[2] = v39;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "asif: chunk size is too small, too many dir indices";
  }
  if (a8
    && (a6 != (uint64_t (***)())512
     || (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 40))(a8) >= 0x201))
  {
    *(_QWORD *)(a1 + 3608) = di_asif::details::dir::load<std::__wrap_iter<unsigned long long *>>(a8, a6, *(unsigned __int16 *)(a1 + 18), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3, *(_QWORD **)(a1 + 152))+ 1;
  }
  v26 = a4
      - 1
      + ((unint64_t)a6 + v42) / a5 * a5
      + (v41 + 8 * ((unint64_t)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 80) - 1) / *(_QWORD *)(a1 + 80)))
      / a5
      * a5
      * a7;
  v27 = (~(v26 % a4) + a4 + v26) / a4;
  v28 = (unint64_t *)(a1 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + v27, v28));
  v46 = a1;
  v30 = v47;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]((uint64_t)v47, a9);
  v31 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v31);
  v32 = (uint64_t *)operator new();
  v33 = v46;
  v34 = v49;
  *v32 = (uint64_t)v31;
  v32[1] = v33;
  if (!v34)
    goto LABEL_24;
  if (v34 != v47)
  {
    v34 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v34 + 16))(v34);
LABEL_24:
    v32[5] = (uint64_t)v34;
    goto LABEL_26;
  }
  v32[5] = (uint64_t)(v32 + 2);
  (*(void (**)(_QWORD *))(v47[0] + 24))(v47);
LABEL_26:
  v45 = v32;
  v35 = pthread_create(&v44, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>, v32);
  if (v35)
  {
    std::__throw_system_error(v35, "thread constructor failed");
    __break(1u);
LABEL_36:
    std::terminate();
  }
  v45 = 0;
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>::~unique_ptr[abi:ne180100](&v45);
  if (*v40)
    goto LABEL_36;
  *v40 = v44;
  v44 = 0;
  std::thread::~thread((std::thread *)&v44);
  if (v49 == v47)
  {
    v36 = 4;
    goto LABEL_32;
  }
  if (v49)
  {
    v36 = 5;
    v30 = v49;
LABEL_32:
    (*(void (**)(_QWORD *))(*v30 + 8 * v36))(v30);
  }
  return a1;
}

void sub_212F61278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::condition_variable *a9, uint64_t a10, uint64_t a11, void **a12, void **a13, std::thread *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29)
{
  uint64_t v29;
  std::mutex *v30;
  space_allocators::FixedSize *v31;
  _QWORD *v32;
  uint64_t *v33;
  std::mutex *v34;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;

  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v33, 0);
  MEMORY[0x2199A8A18](v33, 0x1020C407A7143E5);
  if (a29 == v32)
  {
    v36 = 4;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v36 = 5;
    v32 = a29;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v36))(v32);
LABEL_6:
  std::mutex::~mutex(v30);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((_QWORD *)(v29 + 3744));
  std::mutex::~mutex(v34);
  std::condition_variable::~condition_variable(a9);
  std::thread::~thread(a14);
  std::mutex::~mutex((std::mutex *)(v29 + 3528));
  ref::Allocator<di_asif::details::map_element,unsigned long long>::~Allocator(a10);
  ref::Allocator<di_asif::details::table,unsigned long long>::~Allocator(a11);
  space_allocators::FixedSize::~FixedSize(v31);
  v37 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v29 + 160) = v37;
    operator delete(v37);
  }
  v38 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v29 + 136) = v38;
    operator delete(v38);
  }
  v39 = *(_QWORD **)(v29 + 112);
  if (v39 == a19)
  {
    v40 = 4;
  }
  else
  {
    if (!v39)
      goto LABEL_15;
    v40 = 5;
    a19 = *(_QWORD **)(v29 + 112);
  }
  (*(void (**)(void))(*a19 + 8 * v40))();
LABEL_15:
  _Unwind_Resume(a1);
}

void sub_212F61418()
{
  JUMPOUT(0x212F613A4);
}

uint64_t di_asif::details::dir_base::dir_base(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = off_24CF05410;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3 >> 3;
  v5 = a3 / a4;
  v6 = 4 * a3;
  if (v6 < v5)
    v7 = 1;
  else
    v7 = v6 / v5;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = di_asif::details::dir_base::calc_num_real_elements((di_asif::details::dir_base *)a1);
  v9 = (*(_QWORD *)(a1 + 48) + v8) / (unint64_t)(*(_QWORD *)(a1 + 48) + 1);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  v10 = v8 - v9;
  v11 = v10 * *(unsigned int *)(a1 + 20);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  return a1;
}

unint64_t di_asif::details::dir::load<std::__wrap_iter<unsigned long long *>>(uint64_t a1, uint64_t (***a2)(), unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  size_t v9;
  unint64_t *v10;
  uint64_t (***v11)();
  uint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  const std::error_category *v30;
  uint64_t (**v31)();
  std::__shared_weak_count *v32;
  size_t v33;
  uint64_t (***v34)();
  size_t v35;
  char v36;
  unint64_t *v37;
  _QWORD v38[5];

  v6 = a4;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v9 = (a3 + 8 * a4 + 7) / a3 * a3;
  v10 = (unint64_t *)malloc_type_valloc(v9, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v26, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v31 = &off_24CF03100;
  v34 = &v31;
  v37 = v10;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v38, (uint64_t)&v31);
  v11 = v34;
  if (v34 == &v31)
  {
    v12 = 4;
    v11 = &v31;
  }
  else
  {
    if (!v34)
      goto LABEL_7;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_7:
  v13 = v37;
  v14 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v31 = (uint64_t (**)())v13;
  v32 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v33 = v9;
  v34 = a2;
  v35 = v9;
  v36 = 0;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 88))(a1, &v31);
  if (v9 != v17)
  {
    v27 = __cxa_allocate_exception(0x40uLL);
    v28 = v27;
    if (v17 >= 0)
      v29 = 4294967291;
    else
      v29 = v17;
    *v27 = &off_24CF07908;
    v30 = std::generic_category();
    v28[1] = v29;
    v28[2] = v30;
    *((_BYTE *)v28 + 24) = 0;
    *((_BYTE *)v28 + 48) = 0;
    v28[7] = "Can't load asif dir table";
  }
  v18 = *v13;
  if (v6)
  {
    v19 = v13 + 1;
    do
    {
      v20 = *v19++;
      *a5++ = bswap64(v20);
      --v6;
    }
    while (v6);
  }
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v37);
  return bswap64(v18);
}

void sub_212F616B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::dir::get_version(unint64_t this, Backend *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *exception;
  _QWORD *v13;
  const std::error_category *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  Backend *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;

  v4 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v15 = &v21;
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = 0;
  v17 = 8;
  v18 = a2;
  v19 = 8;
  v20 = 0;
  LODWORD(this) = (*(uint64_t (**)(unint64_t, unint64_t **))(*(_QWORD *)this + 88))(this, &v15);
  if ((_DWORD)this != 8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v13 = exception;
    if ((this & 0x80000000) == 0)
      this = 4294967291;
    else
      this = this;
    *exception = &off_24CF07908;
    v14 = std::generic_category();
    v13[1] = this;
    v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 48) = 0;
    v13[7] = "Can't load asif dir version";
  }
  v7 = bswap64(v21);
  v21 = v7;
  v8 = v16;
  if (v16)
  {
    v9 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_212F61804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_asif::details::operator<<(_QWORD *result, _DWORD *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "uninit";
      v3 = 6;
      goto LABEL_3;
    case 1:
      v2 = "fully";
      v3 = 5;
      goto LABEL_3;
    case 2:
      v2 = "unmapped";
      v3 = 8;
      goto LABEL_3;
    case 3:
      v2 = "has_bitmap";
      v3 = 10;
LABEL_3:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }
  return result;
}

void di_asif::details::dir::update_entry_for_table(di_asif::details::dir *this, unint64_t a2, unint64_t a3)
{
  *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (a2 / *((_QWORD *)this + 10))) = a3 / *((unsigned int *)this + 5);
  atomic_store(1u, (unsigned int *)this + 898);
}

_QWORD *di_asif::details::dir::trim_last_unused_extents(di_asif::details::dir *this, di_asif::details::ContextASIF *a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(*(uint64_t (**)(di_asif::details::dir *))(*(_QWORD *)this + 16))(this);
  v6[0] = &off_24CF02A20;
  v6[1] = a2;
  v7 = v6;
  space_allocators::FixedSize::trim_largest(v3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_212F6194C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void space_allocators::FixedSize::trim_largest(_QWORD *a1, uint64_t a2)
{
  char v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  _QWORD v20[45];
  uint64_t v21;
  uint64_t v22;

  if (a1[11])
  {
    v4 = 0;
    v5 = (uint64_t **)(a1 + 9);
    v6 = (uint64_t **)(a1 + 10);
    while (1)
    {
      v7 = *v6;
      v8 = *v6;
      v9 = v6;
      if (*v6)
      {
        do
        {
          v10 = (uint64_t **)v8;
          v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v10 = (uint64_t **)v9[2];
          v11 = *v10 == (uint64_t *)v9;
          v9 = v10;
        }
        while (v11);
      }
      v12 = (uint64_t)v10[4] + *a1;
      v13 = a1[12];
      if (v12 != v13)
        break;
      v14 = (uint64_t *)v6;
      if (v7)
      {
        do
        {
          v15 = v7;
          v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v14[2];
          v11 = *v15 == (_QWORD)v14;
          v14 = v15;
        }
        while (v11);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(v5, v15);
      operator delete(v15);
      v16 = a1[11];
      v13 = a1[12] - *a1;
      a1[12] = v13;
      v4 = 1;
      if (!v16)
        goto LABEL_15;
    }
    if ((v4 & 1) == 0)
      return;
LABEL_15:
    v17 = *(_QWORD *)(a2 + 24);
    if (v17)
    {
      v20[0] = v13;
      if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v20))
      {
        *(_QWORD *)&v18 = "space_allocators::FixedSize::trim_largest(const size_changed_fn_t &)";
        *((_QWORD *)&v18 + 1) = 41;
        v19 = 16;
        di_log::logger<di_log::log_printer<158ul>>::logger(v20, &v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"trim largest: size change callback failed with ", 47);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf((uint64_t)v20);
        MEMORY[0x2199A89AC](&v22);
      }
    }
  }
}

void sub_212F61B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<158ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

di_asif::header *di_asif::header::header(di_asif::header *this, Backend *a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v7;
  const std::error_category *v8;
  _QWORD *exception;
  uint64_t v10;
  _QWORD *v11;
  const std::error_category *v12;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if ((unint64_t)(*(uint64_t (**)(Backend *))(*(_QWORD *)a2 + 40))(a2) <= 0x1FF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v10 = (*(uint64_t (**)(Backend *))(*(_QWORD *)a2 + 40))(a2);
    *exception = &off_24CF05670;
    exception[1] = "asif_header";
    exception[2] = 512;
    exception[3] = v10;
  }
  v4 = operator new[]();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  if (Backend::read(a2, (char *)v4, 512, 0) != 512)
  {
    v11 = __cxa_allocate_exception(0x40uLL);
    *v11 = &off_24CF07908;
    v12 = std::generic_category();
    v11[1] = 152;
    v11[2] = v12;
    *((_BYTE *)v11 + 24) = 0;
    *((_BYTE *)v11 + 48) = 0;
    v11[7] = "Couldn't read asif's header";
  }
  di_asif::header::init(this, (const char *)v4);
  for (i = 80; i != 512; ++i)
  {
    if (*(_BYTE *)(v4 + i))
    {
      v7 = __cxa_allocate_exception(0x40uLL);
      *v7 = &off_24CF07908;
      v8 = std::generic_category();
      v7[1] = 161;
      v7[2] = v8;
      *((_BYTE *)v7 + 24) = 0;
      *((_BYTE *)v7 + 48) = 0;
      v7[7] = "Unsupported ASIF, contains data beyond current header struct size";
    }
  }
  MEMORY[0x2199A8A00](v4, 0x1000C8077774924);
  return this;
}

void sub_212F61D2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *di_asif::header::init(di_asif::header *this, const char *a2)
{
  int v4;
  _WORD *result;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  DiskImagesRuntimeException *v9;
  const char *v10;
  void *exception;
  unsigned int v12;
  void *v13;
  _QWORD v14[33];

  v4 = *(_DWORD *)a2;
  LODWORD(v14[0]) = 2003069043;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v4, v14, 1);
  *(_DWORD *)this = 2003069043;
  *((_DWORD *)this + 1) = bswap32(*((_DWORD *)a2 + 1));
  *((_DWORD *)this + 2) = bswap32(*((_DWORD *)a2 + 2));
  di_asif::header_flags::header_flags(v14, bswap32(*((_DWORD *)a2 + 3)));
  *((_DWORD *)this + 3) = v14[0];
  *((_QWORD *)this + 2) = bswap64(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 3) = bswap64(*((_QWORD *)a2 + 3));
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = bswap64(*((_QWORD *)a2 + 6));
  *((_QWORD *)this + 7) = bswap64(*((_QWORD *)a2 + 7));
  *((_DWORD *)this + 16) = bswap32(*((_DWORD *)a2 + 16));
  *((_WORD *)this + 34) = bswap32(*((unsigned __int16 *)a2 + 34)) >> 16;
  result = di_asif::header::total_segments_t::total_segments_t(v14, *((unsigned __int16 *)a2 + 35));
  *((_WORD *)this + 35) = v14[0];
  *((_QWORD *)this + 9) = bswap64(*((_QWORD *)a2 + 9));
  if (*((_DWORD *)this + 1) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unsupported ASIF version ", 25);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v14, 0xA1u);
  }
  if ((*((_DWORD *)this + 2) - 1048577) <= 0xFFF0004E)
  {
    v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v10 = "Invalid ASIF header size";
LABEL_15:
    v12 = 152;
    goto LABEL_19;
  }
  v6 = *((unsigned __int16 *)this + 34);
  if (!*((_WORD *)this + 34))
  {
    v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v10 = "Shadow block size is invalid (0)";
    goto LABEL_15;
  }
  v7 = *((_DWORD *)this + 16);
  if (v7 < v6 || v7 % v6)
  {
    v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v10 = "ASIF max_write size in header exceed the limit";
LABEL_18:
    v12 = 22;
LABEL_19:
    DiskImagesRuntimeException::DiskImagesRuntimeException(v9, v10, v12);
  }
  if ((v6 & 0x1FF) != 0)
  {
    v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v10 = "ASIF block size isn't multiple of 512";
    goto LABEL_15;
  }
  v8 = *((_QWORD *)this + 7);
  if (v8 >= 0xFFFFFFFFFFFFFFFFLL / v6)
  {
    v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v10 = "Max sector count is too large";
    goto LABEL_18;
  }
  if (v8 < *((_QWORD *)this + 6))
  {
    v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v10 = "Sector count is too large";
    goto LABEL_18;
  }
  return result;
}

void sub_212F61FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 di_asif::header::header(di_asif::header *this, __n128 *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(__n128 *)this = *a2;
  result = a2[1];
  v3 = a2[2];
  v4 = a2[4];
  *((__n128 *)this + 3) = a2[3];
  *((__n128 *)this + 4) = v4;
  *((__n128 *)this + 1) = result;
  *((__n128 *)this + 2) = v3;
  return result;
}

char *di_asif::header::write(di_asif::header *this, char *a2)
{
  *(_DWORD *)a2 = *(_DWORD *)this;
  *((_DWORD *)a2 + 1) = bswap32(*((_DWORD *)this + 1));
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  *((_QWORD *)a2 + 2) = bswap64(*((_QWORD *)this + 2));
  *((_QWORD *)a2 + 3) = bswap64(*((_QWORD *)this + 3));
  *((_OWORD *)a2 + 2) = *((_OWORD *)this + 2);
  *((_QWORD *)a2 + 6) = bswap64(*((_QWORD *)this + 6));
  *((_QWORD *)a2 + 7) = bswap64(*((_QWORD *)this + 7));
  *((_DWORD *)a2 + 16) = bswap32(*((_DWORD *)this + 16));
  *((_WORD *)a2 + 34) = bswap32(*((unsigned __int16 *)this + 34)) >> 16;
  *((_WORD *)a2 + 35) = *((_WORD *)this + 35);
  *((_QWORD *)a2 + 9) = bswap64(*((_QWORD *)this + 9));
  return a2 + 80;
}

uint64_t di_asif::header::header(uint64_t a1, _DWORD *a2, _OWORD *a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7)
{
  unint64_t v14;
  DiskImagesRuntimeException *exception;
  void *v17;
  int v18;

  *(_DWORD *)a1 = 2003069043;
  v18 = 2003069043;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", 2003069043, &v18, 1);
  *(_QWORD *)(a1 + 4) = 0x20000000001;
  *(_DWORD *)(a1 + 12) = *a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 64) = a6;
  *(_WORD *)(a1 + 68) = a7;
  di_asif::header::total_segments_t::total_segments_t((_WORD *)(a1 + 70), 0);
  *(_QWORD *)(a1 + 72) = 0;
  if (!is_mul_ok(a5, a7) || !is_mul_ok(a4, a7) || (v14 = a4 * a7 + 2 * a6, __CFADD__(a4 * a7, 2 * a6)))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF header calculation overflow", 0x16u);
  }
  if (v14 <= a5 * a7)
    v14 = a5 * a7;
  *(_QWORD *)(a1 + 56) = v14 / a7;
  *(_OWORD *)(a1 + 32) = *a3;
  return a1;
}

uint64_t di_asif::header::write_header(di_asif::header *this, Backend *a2)
{
  size_t v4;
  void *v5;
  char *v6;
  int64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  if (*((_DWORD *)this + 2) >= *((unsigned __int16 *)this + 34))
    v4 = *((unsigned int *)this + 2);
  else
    v4 = *((unsigned __int16 *)this + 34);
  v5 = (void *)operator new[]();
  bzero(v5, v4);
  v6 = di_asif::header::write(this, (char *)v5);
  v7 = (_BYTE *)v5 + v4 - v6;
  if (v7 >= 1)
    bzero(v6, v7);
  v8 = Backend::write(a2, (char *)v5, v4, 0);
  if (v8 >= 0)
    v9 = -5;
  else
    v9 = v8;
  if (v4 == v8)
    v10 = 0;
  else
    v10 = v9;
  MEMORY[0x2199A8A00](v5, 0x1000C8077774924);
  return v10;
}

void sub_212F622B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t Backend::write(Backend *this, char *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v8 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v16 = a2;
  v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v18 = a3;
  v19 = a4;
  v20 = a3;
  v21 = 0;
  v11 = (*(uint64_t (**)(Backend *, char **))(*(_QWORD *)this + 96))(this, &v16);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_212F62394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

di_asif::meta_header *di_asif::meta_header::meta_header(di_asif::meta_header *this, uint64_t a2, uint64_t a3)
{
  int v7;
  int v8;
  int v9;

  *(_DWORD *)this = 1635018093;
  v7 = 1635018093;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", 1635018093, &v7, 1);
  *((_DWORD *)this + 1) = 1;
  v8 = 1;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", 1, &v8, 1);
  *((_DWORD *)this + 2) = 512;
  v9 = 512;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_size_t", 512, &v9, 1);
  *(_QWORD *)((char *)this + 12) = a2;
  *(_QWORD *)((char *)this + 20) = a3;
  return this;
}

uint64_t *di_asif::meta_header::write_header(di_asif::meta_header *this, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::bad_alloc *exception;
  std::bad_alloc *v54;
  _QWORD *v55;
  const std::error_category *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  std::__shared_weak_count *v65;
  uint64_t v66[3];
  uint64_t *v67;
  void *__p;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[72];
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  _DWORD *v78;
  _QWORD v79[5];

  v79[4] = *MEMORY[0x24BDAC8D0];
  v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v54 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v54, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v66[0] = (uint64_t)&off_24CF03100;
  v67 = v66;
  v78 = v8;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v79, (uint64_t)v66);
  v9 = v67;
  if (v67 == v66)
  {
    v10 = 4;
    v9 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  v11 = v78;
  *v78 = *(_DWORD *)this;
  v11[1] = bswap32(*((_DWORD *)this + 1));
  v11[2] = bswap32(*((_DWORD *)this + 2));
  *(_QWORD *)(v11 + 3) = bswap64(*(_QWORD *)((char *)this + 12));
  *(_QWORD *)(v11 + 5) = bswap64(*(_QWORD *)((char *)this + 20));
  v12 = v78;
  v13 = (char *)v78 - (char *)(v11 + 7) + 512;
  if (v13 >= 1)
    bzero(v11 + 7, v13);
  v14 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
  *(_QWORD *)&v60 = v12;
  *((_QWORD *)&v60 + 1) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v61 = 512;
  v62 = a4;
  v63 = 512;
  v64 = 0;
  sg_vec::sg_vec(v66, &v60);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  sg_vec_ref::begin((sg_vec_ref *)v71, (uint64_t)&v60);
  sg_vec_ref::end((sg_vec_ref *)v71, (uint64_t)&v57);
  v20 = di_asif::details::dir::do_io(a3, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v60, (const sg_vec_ns::details::sg_vec_iterator *)&v57, 0);
  v21 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v58;
  if (v58)
  {
    v25 = (unint64_t *)&v58->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v65;
  if (v65)
  {
    v28 = (unint64_t *)&v65->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_36;
  v31 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_38;
  }
  else
  {
LABEL_36:
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_38;
  }
  v33 = v20;
  if ((_DWORD)v20)
  {
    v55 = __cxa_allocate_exception(0x40uLL);
    *v55 = &off_24CF07908;
    v56 = std::generic_category();
    v55[1] = v33;
    v55[2] = v56;
    *((_BYTE *)v55 + 24) = 0;
    *((_BYTE *)v55 + 48) = 0;
    v55[7] = "Failed to write metadata header";
  }
LABEL_38:
  v34 = v77;
  if (v77)
  {
    v35 = (unint64_t *)&v77->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v76;
  if (v76)
  {
    v38 = (unint64_t *)&v76->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v75;
  if (v75)
  {
    v41 = (unint64_t *)&v75->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v74;
  if (v74)
  {
    v44 = (unint64_t *)&v74->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v73;
  if (v73)
  {
    v47 = (unint64_t *)&v73->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v72;
  if (v72)
  {
    v50 = (unint64_t *)&v72->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v69 && &v70 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v66);
  return std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v78);
}

void sub_212F62924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sg_vec::~sg_vec((sg_vec *)&a49);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v49 - 96));
  _Unwind_Resume(a1);
}

di_asif::meta_header *di_asif::meta_header::meta_header(di_asif::meta_header *this, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t a4)
{
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t i;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v60;
  const std::error_category *v61;
  std::bad_alloc *exception;
  std::bad_alloc *v63;
  _QWORD *v64;
  const std::error_category *v65;
  _QWORD *v66;
  const std::error_category *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  std::__shared_weak_count *v76;
  unint64_t v77;
  uint64_t v78[3];
  uint64_t *v79;
  void *__p;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[72];
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  const char *v90;
  _QWORD v91[5];

  v91[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  v8 = (const char *)malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v63 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v63, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v78[0] = (uint64_t)&off_24CF03100;
  v79 = v78;
  v90 = v8;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v91, (uint64_t)v78);
  v9 = v79;
  if (v79 == v78)
  {
    v10 = 4;
    v9 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  v11 = v90;
  v12 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
  *(_QWORD *)&v71 = v11;
  *((_QWORD *)&v71 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v72 = 512;
  v73 = a4;
  v74 = 512;
  v75 = 0;
  sg_vec::sg_vec(v78, &v71);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18.n128_f64[0] = sg_vec_ref::end((sg_vec_ref *)v83, (uint64_t)&v71);
  v19 = *((_QWORD *)a3 + 15);
  v20 = v77;
  v21 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v18);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v18);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v20 > v19)
  {
    v64 = __cxa_allocate_exception(0x40uLL);
    *v64 = &off_24CF07908;
    v65 = std::generic_category();
    v64[1] = 152;
    v64[2] = v65;
    *((_BYTE *)v64 + 24) = 0;
    *((_BYTE *)v64 + 48) = 0;
    v64[7] = "Metadata offset is invalid";
  }
  sg_vec_ref::begin((sg_vec_ref *)v83, (uint64_t)&v71);
  sg_vec_ref::end((sg_vec_ref *)v83, (uint64_t)&v68);
  v27 = di_asif::details::dir::do_io(a3, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v71, (const sg_vec_ns::details::sg_vec_iterator *)&v68, 1);
  v28 = v70;
  if (v70)
  {
    v29 = (unint64_t *)&v70->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v69;
  if (v69)
  {
    v32 = (unint64_t *)&v69->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v76;
  if (v76)
  {
    v35 = (unint64_t *)&v76->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (!*((_QWORD *)&v71 + 1))
    goto LABEL_45;
  v38 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((v27 & 0x8000000000000000) == 0)
      goto LABEL_47;
  }
  else
  {
LABEL_45:
    if ((v27 & 0x8000000000000000) == 0)
      goto LABEL_47;
  }
  if ((_DWORD)v27)
  {
    v66 = __cxa_allocate_exception(0x40uLL);
    *v66 = &off_24CF07908;
    v67 = std::generic_category();
    v66[1] = v27;
    v66[2] = v67;
    *((_BYTE *)v66 + 24) = 0;
    *((_BYTE *)v66 + 48) = 0;
    v66[7] = "ASIF meta header failed to read";
  }
LABEL_47:
  di_asif::meta_header::init(this, v90, a3);
  for (i = 28; i != 512; ++i)
  {
    if (v90[i])
    {
      v60 = __cxa_allocate_exception(0x40uLL);
      *v60 = &off_24CF07908;
      v61 = std::generic_category();
      v60[1] = 152;
      v60[2] = v61;
      *((_BYTE *)v60 + 24) = 0;
      *((_BYTE *)v60 + 48) = 0;
      v60[7] = "ASIF meta header trailer isn't equal to zero";
    }
  }
  v41 = v89;
  if (v89)
  {
    v42 = (unint64_t *)&v89->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v88;
  if (v88)
  {
    v45 = (unint64_t *)&v88->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v87;
  if (v87)
  {
    v48 = (unint64_t *)&v87->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v86;
  if (v86)
  {
    v51 = (unint64_t *)&v86->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v85;
  if (v85)
  {
    v54 = (unint64_t *)&v85->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v84;
  if (v84)
  {
    v57 = (unint64_t *)&v84->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v81 && &v82 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v78);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v90);
  return this;
}

void sub_212F62F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v49 + 112);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  sg_vec::~sg_vec((sg_vec *)&a49);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v50 - 112));
  _Unwind_Resume(a1);
}

uint64_t di_asif::meta_header::init(di_asif::meta_header *this, const char *a2, di_asif::details::dir *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  unint64_t v10;
  DiskImagesRuntimeException *exception;
  const char *v12;
  void *v13;
  int v14;
  int v15;
  int v16;

  v6 = *(_DWORD *)a2;
  v14 = 1635018093;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v6, &v14, 1);
  *(_DWORD *)this = 1635018093;
  v7 = bswap32(*((_DWORD *)a2 + 1));
  v15 = 1;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", v7, &v15, 1);
  *((_DWORD *)this + 1) = 1;
  v8 = bswap32(*((_DWORD *)a2 + 2));
  v16 = 512;
  result = smart_enums::validators::value<unsigned int>((uint64_t)"header_size_t", v8, &v16, 1);
  *((_DWORD *)this + 2) = 512;
  v10 = bswap64(*(_QWORD *)(a2 + 12));
  *(_QWORD *)((char *)this + 12) = v10;
  *(_QWORD *)((char *)this + 20) = bswap64(*(_QWORD *)(a2 + 20));
  if (v10 > (unint64_t)*((unsigned int *)a3 + 5) - 512)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v12 = "ASIF meta header size exceeds its maximum";
    goto LABEL_6;
  }
  if (v10 % *((unsigned __int16 *)a3 + 9))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v12 = "ASIF meta header data is unaligned";
LABEL_6:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v12, 0x98u);
  }
  return result;
}

uint64_t di_asif::Metadata::read_num_blocks(di_asif::Metadata *this, di_asif::details::ContextASIF *a2)
{
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;

  if (!*(_QWORD *)(*(_QWORD *)this + 72))
    return 0;
  di_asif::Metadata::read_metadata_headers(this, a2, (uint64_t)&v4);
  v2 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2);
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return v2;
}

di_asif::meta_header *di_asif::Metadata::read_metadata_headers@<X0>(di_asif::Metadata *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  di_asif::meta_header *result;
  di_asif::meta_header *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  const std::error_category *v14;
  unint64_t v15;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  v15 = *(_QWORD *)(*(_QWORD *)this + 72) * v6[5];
  result = std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long>((di_asif::meta_header **)a3, a2, (di_asif::details::dir *)v6, (uint64_t *)&v15);
LABEL_2:
  for (i = result; ; *(_QWORD *)(a3 + 8) = i)
  {
    *(_QWORD *)(a3 + 8) = i;
    if (!*((_QWORD *)i - 1))
      break;
    v15 = 0;
    v10 = *(_QWORD *)this;
    v9 = *((_QWORD *)this + 1);
    v11 = *((_QWORD *)i - 1) * *(unsigned int *)(v9 + 20);
    v15 = v11;
    v12 = *(unsigned __int16 *)(v9 + 18);
    if (v11 < *(_QWORD *)(v10 + 48) * v12 || *(_QWORD *)(v10 + 56) * v12 <= v11)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v14 = std::generic_category();
      exception[1] = 152;
      exception[2] = v14;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "ASIF: metadata header out of range";
    }
    if ((unint64_t)i >= *(_QWORD *)(a3 + 16))
    {
      result = std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long const&>((di_asif::meta_header **)a3, a2, (di_asif::details::dir *)v9, (uint64_t *)&v15);
      goto LABEL_2;
    }
    result = di_asif::meta_header::meta_header(i, a2, (di_asif::details::dir *)v9, v11);
    i = (di_asif::meta_header *)((char *)i + 28);
  }
  return result;
}

void sub_212F632DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void di_asif::Metadata::read(di_asif::details::dir **this@<X0>, di_asif::details::ContextASIF *a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  di_asif::details::dir *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  int v41;
  CFIndex v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t *v47;
  int v48;
  _QWORD *exception;
  const std::error_category *v50;
  std::bad_alloc *v51;
  std::bad_alloc *v52;
  void *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  void *values;
  std::__shared_weak_count *v59;
  cf *p_values;
  std::__shared_weak_count *v61;
  void *keys;
  const __CFString *v63;
  void *__p;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[72];
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)*this + 9))
  {
    keys = CFSTR("internal metadata");
    v63 = CFSTR("user metadata");
    cf::make_empty_dict((CFMutableDictionaryRef *)&v53);
    cf::make_empty_dict((CFMutableDictionaryRef *)&v56);
    values = v53;
    v59 = v56;
    cf::make_dict((const void **)&keys, (const void **)&values, 2, a3);
    CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v56);
    CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v53);
    return;
  }
  di_asif::Metadata::read_metadata_entries((di_asif::Metadata *)this, a2, (uint64_t *)&v56);
  v6 = (uint64_t *)v56;
  v7 = v57;
  if (v56 == (std::__shared_weak_count *)v57)
  {
LABEL_65:
    v41 = 0;
    goto LABEL_66;
  }
  do
  {
    sg_vec::sg_vec((uint64_t *)&keys, v6);
    v8 = this[1];
    sg_vec_ref::begin((sg_vec_ref *)v67, (uint64_t)&values);
    sg_vec_ref::end((sg_vec_ref *)v67, (uint64_t)&v53);
    v9 = di_asif::details::dir::do_io(v8, a2, (const sg_vec_ns::details::sg_vec_iterator *)&values, (const sg_vec_ns::details::sg_vec_iterator *)&v53, 1);
    v10 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v54;
    if (v54)
    {
      v14 = (unint64_t *)&v54->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v61;
    if (v61)
    {
      v17 = (unint64_t *)&v61->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v59;
    if (!v59)
      goto LABEL_22;
    v20 = (unint64_t *)&v59->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_24;
    }
    else
    {
LABEL_22:
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_24;
    }
    if ((_DWORD)v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v50 = std::generic_category();
      exception[1] = v9;
      exception[2] = v50;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "ASIF: failed to deserialize metadata";
    }
LABEL_24:
    v22 = v73;
    if (v73)
    {
      v23 = (unint64_t *)&v73->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v72;
    if (v72)
    {
      v26 = (unint64_t *)&v72->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v71;
    if (v71)
    {
      v29 = (unint64_t *)&v71->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v70;
    if (v70)
    {
      v32 = (unint64_t *)&v70->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v69;
    if (v69)
    {
      v35 = (unint64_t *)&v69->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v68;
    if (v68)
    {
      v38 = (unint64_t *)&v68->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v65 && &v66 != __p)
      operator delete(__p);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&keys);
    v6 += 6;
  }
  while (v6 != v7);
  v40 = (uint64_t *)v56;
  if (v56 == (std::__shared_weak_count *)v57)
    goto LABEL_65;
  v41 = 0;
  do
  {
    v41 += *((_DWORD *)v40 + 4);
    v40 += 6;
  }
  while (v40 != v57);
LABEL_66:
  v42 = v41;
  v43 = malloc_type_valloc(v41, 0xF8ED6DDuLL);
  if (!v43)
  {
    v51 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v52 = std::bad_alloc::bad_alloc(v51);
    __cxa_throw(v52, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  values = &off_24CF03100;
  p_values = (cf *)&values;
  keys = v43;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v63, (uint64_t)&values);
  v44 = p_values;
  if (p_values == (cf *)&values)
  {
    v45 = 4;
    v44 = &values;
LABEL_72:
    (*(void (**)(void))(*v44 + 8 * v45))();
  }
  else if (p_values)
  {
    v45 = 5;
    goto LABEL_72;
  }
  v46 = v56;
  v47 = v57;
  if (v56 != (std::__shared_weak_count *)v57)
  {
    v48 = 0;
    do
    {
      memcpy((char *)keys + v48, v46->__vftable, v46->__shared_weak_owners_);
      v48 += LODWORD(v46->__shared_weak_owners_);
      v46 += 2;
    }
    while (v46 != (std::__shared_weak_count *)v47);
  }
  cf::deserialize_from_xml_plist((UInt8 *)keys, v42, a3);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&keys);
  keys = &v56;
  std::vector<sg_entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&keys);
}

void sub_212F6382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&a29);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&a9);
  _Unwind_Resume(a1);
}

const void **di_asif::Metadata::default_metadata@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  void *v4;
  void *v5;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x24BDAC8D0];
  keys[0] = CFSTR("internal metadata");
  keys[1] = CFSTR("user metadata");
  cf::make_empty_dict((CFMutableDictionaryRef *)&v5);
  cf::make_empty_dict((CFMutableDictionaryRef *)&v4);
  values[0] = v5;
  values[1] = v4;
  cf::make_dict((const void **)keys, (const void **)values, 2, a1);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v4);
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v5);
}

void sub_212F63B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

void di_asif::Metadata::read_metadata_entries(di_asif::Metadata *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v5;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::bad_alloc *exception;
  std::bad_alloc *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  size_t v25;
  char *v26;
  char *v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  di_asif::Metadata::read_metadata_headers(this, a2, (uint64_t)&v26);
  v5 = v27;
  if (v27 != v26)
  {
    v6 = 0;
    v5 = v26;
    do
    {
      v25 = *(_QWORD *)&v5[28 * v6 + 12];
      v7 = (std::__shared_weak_count_vtbl *)malloc_type_valloc(v25, 0xF1341ED1uLL);
      v8 = v7;
      if (!v7)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v21 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v21, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v23 = v7;
      v9 = (std::__shared_weak_count *)operator new();
      v9->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF05AE0;
      v9->__shared_weak_owners_ = 0;
      v9[1].__vftable = v8;
      v24 = v9;
      v11 = *(unsigned int *)(*((_QWORD *)this + 1) + 20);
      v12 = *(_QWORD *)(*(_QWORD *)this + 72) * v11 + 512;
      v22 = v12;
      if (v6)
      {
        v12 = *(_QWORD *)&v26[28 * v6 - 8] * v11 + 512;
        v22 = v12;
      }
      v13 = a3[1];
      if (v13 >= a3[2])
      {
        v16 = std::vector<sg_entry>::__emplace_back_slow_path<std::shared_ptr<char> const,Wrapper<unsigned long long,std::integral_constant<BOOL,true>,be_type> const&,unsigned long long &,Wrapper<unsigned long long,std::integral_constant<BOOL,true>,be_type> const&>(a3, &v23, (uint64_t *)&v25, &v22, (uint64_t *)&v25);
      }
      else
      {
        v14 = v25;
        *(_QWORD *)v13 = v23;
        *(_QWORD *)(v13 + 8) = v9;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        *(_QWORD *)(v13 + 16) = v14;
        *(_QWORD *)(v13 + 24) = v12;
        *(_QWORD *)(v13 + 32) = v14;
        v16 = v13 + 48;
        *(_BYTE *)(v13 + 40) = 0;
      }
      a3[1] = v16;
      v17 = v24;
      if (v24)
      {
        v18 = (unint64_t *)&v24->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      ++v6;
      v5 = v26;
    }
    while (v6 < 0x6DB6DB6DB6DB6DB7 * ((v27 - v26) >> 2));
  }
  if (v5)
  {
    v27 = v5;
    operator delete(v5);
  }
}

void sub_212F63D18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  __break(1u);
}

void sub_212F63D4C()
{
  __cxa_end_catch();
  JUMPOUT(0x212F63D60);
}

_QWORD *di_log::logger<di_log::log_printer<2831ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<2831ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF056A8;
  a1[45] = &unk_24CF057A8;
  a1[46] = &unk_24CF057D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF056A8;
  a1[45] = &unk_24CF05730;
  a1[46] = &unk_24CF05758;
  return a1;
}

void sub_212F63E08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2831ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<2828ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<2828ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF058C8;
  a1[45] = &unk_24CF059C8;
  a1[46] = &unk_24CF059F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF058C8;
  a1[45] = &unk_24CF05950;
  a1[46] = &unk_24CF05978;
  return a1;
}

void sub_212F63EF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2828ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

const void **di_asif::Metadata::write(const void **result, di_asif::details::ContextASIF *a2, CFPropertyListRef propertyList, Backend **a4)
{
  di_asif::details::dir **v6;
  _QWORD *v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  di_asif::header *v13;
  di_asif::details::dir *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  di_asif::details::dir *v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  const void **v30;
  uint64_t v31;
  void *v32;
  const UInt8 *BytePtr;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  di_asif::details::dir *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned int v74;
  std::bad_alloc *v75;
  std::bad_alloc *v76;
  _QWORD *v77;
  const std::error_category *v78;
  DiskImagesRuntimeException *exception;
  void *v80;
  _QWORD *v81;
  const std::error_category *v82;
  _QWORD *v83;
  const std::error_category *v84;
  Backend **v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89[8];
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  size_t v93;
  uint64_t v94;
  size_t v95;
  char v96;
  std::__shared_weak_count *v97;
  _BYTE v98[28];
  CFTypeRef cf;
  const void *v100[3];
  const void **v101;
  void *__p;
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[72];
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  char *v112;
  _QWORD v113[6];

  v113[4] = *MEMORY[0x24BDAC8D0];
  if (propertyList)
  {
    v6 = (di_asif::details::dir **)result;
    v7 = *result;
    v8 = (unsigned int *)result[1];
    v9 = v8[5];
    v10 = *((_QWORD *)*result + 9) * v9;
    v11 = *((unsigned __int16 *)v8 + 9);
    if (!v10)
      v10 = (v7[7] * v11 - v9) / v9 * v9;
    if (v10 < v7[6] * v11)
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Not enough space for metadata", 0x1Cu);
    }
    cf::serialize_to_xml_plist(propertyList, (const __CFData **)v100);
    v12 = (unint64_t)v100[1];
    cf = v100[0];
    v100[0] = 0;
    CFAutoRelease<__CFData const*>::~CFAutoRelease(v100);
    v13 = *v6;
    v14 = v6[1];
    v15 = *((unsigned int *)v14 + 5);
    v16 = v15 - 512;
    v17 = v12 + v15 - 512 - 1;
    v18 = v17 / (v15 - 512);
    if (v18 * v15 > v10 + v15 - *((_QWORD *)*v6 + 6) * *((unsigned __int16 *)v14 + 9))
    {
      v81 = __cxa_allocate_exception(0x40uLL);
      *v81 = &off_24CF07908;
      v82 = std::generic_category();
      v81[1] = 28;
      v81[2] = v82;
      *((_BYTE *)v81 + 24) = 0;
      *((_BYTE *)v81 + 48) = 0;
      v81[7] = "Not enough space for metadata";
    }
    if (v16 <= v17)
    {
      v85 = a4;
      v19 = 0;
      v20 = v18 - 1;
      v88 = v10;
      if (v18 <= 1)
        v18 = 1;
      v86 = v18;
      v87 = v20;
      while (1)
      {
        if (v19 == v20)
        {
          v21 = 0;
          v22 = v6[1];
          v23 = v10 - v20 * *((unsigned int *)v22 + 5);
          v24 = v12 % v16;
        }
        else
        {
          v22 = v6[1];
          v25 = *((unsigned int *)v22 + 5);
          v23 = v10 - v19 * v25;
          v21 = (v23 - v25) / v25;
          v24 = v16;
        }
        v26 = v24 - 1;
        di_asif::meta_header::meta_header((di_asif::meta_header *)v98, (v24 - 1 + *((unsigned __int16 *)v22 + 9)) / *((unsigned __int16 *)v22 + 9) * *((unsigned __int16 *)v22 + 9), v21);
        di_asif::meta_header::write_header((di_asif::meta_header *)v98, a2, v6[1], v23);
        if (v12 - v24 >= v19 * v16)
          v27 = v19 * v16;
        else
          v27 = v12 - v24;
        v28 = *((unsigned __int16 *)v6[1] + 9);
        v29 = (char *)malloc_type_valloc((v26 + v28) / v28 * v28, 0xF8ED6DDuLL);
        if (!v29)
        {
          v75 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v76 = std::bad_alloc::bad_alloc(v75);
          __cxa_throw(v76, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        v100[0] = &off_24CF03100;
        v101 = v100;
        v112 = v29;
        std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v113, (uint64_t)v100);
        v30 = v101;
        if (v101 == v100)
        {
          v30 = v100;
          v31 = 4;
        }
        else
        {
          if (!v101)
            goto LABEL_22;
          v31 = 5;
        }
        (*((void (**)(void))*v30 + v31))();
LABEL_22:
        v32 = v112;
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        memcpy(v32, &BytePtr[v27], v24);
        v34 = *((unsigned __int16 *)v6[1] + 9);
        if (v24 % v34)
        {
          bzero(&v112[v24], v34 - v24 % v34);
          v34 = *((unsigned __int16 *)v6[1] + 9);
        }
        v35 = (uint64_t)v112;
        v36 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
        *(_QWORD *)&v92 = v35;
        *((_QWORD *)&v92 + 1) = v36;
        if (v36)
        {
          v37 = (unint64_t *)(v36 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v93 = (v26 + v34) / v34 * v34;
        v94 = v23 + 512;
        v95 = v93;
        v96 = 0;
        sg_vec::sg_vec((uint64_t *)v100, &v92);
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
        if (*((_QWORD *)&v92 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v42 = v6[1];
        sg_vec_ref::begin((sg_vec_ref *)v105, (uint64_t)&v92);
        sg_vec_ref::end((sg_vec_ref *)v105, (uint64_t)v89);
        v43 = di_asif::details::dir::do_io(v42, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v92, (const sg_vec_ns::details::sg_vec_iterator *)v89, 0);
        v44 = v91;
        if (v91)
        {
          p_shared_owners = (unint64_t *)&v91->__shared_owners_;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v90;
        if (v90)
        {
          v48 = (unint64_t *)&v90->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = v97;
        if (v97)
        {
          v51 = (unint64_t *)&v97->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
        if (!*((_QWORD *)&v92 + 1))
          goto LABEL_51;
        v54 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
          if (v43 < 0)
          {
LABEL_52:
            if ((_DWORD)v43)
            {
              v77 = __cxa_allocate_exception(0x40uLL);
              *v77 = &off_24CF07908;
              v78 = std::generic_category();
              v77[1] = v43;
              v77[2] = v78;
              *((_BYTE *)v77 + 24) = 0;
              *((_BYTE *)v77 + 48) = 0;
              v77[7] = "Failed to write metadata";
            }
          }
        }
        else
        {
LABEL_51:
          if (v43 < 0)
            goto LABEL_52;
        }
        v56 = v111;
        if (v111)
        {
          v57 = (unint64_t *)&v111->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v110;
        if (v110)
        {
          v60 = (unint64_t *)&v110->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = v109;
        if (v109)
        {
          v63 = (unint64_t *)&v109->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = v108;
        if (v108)
        {
          v66 = (unint64_t *)&v108->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v68 = v107;
        if (v107)
        {
          v69 = (unint64_t *)&v107->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = v106;
        if (v106)
        {
          v72 = (unint64_t *)&v106->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        if (v103 && &v104 != __p)
          operator delete(__p);
        boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v100);
        std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v112);
        ++v19;
        v20 = v87;
        v10 = v88;
        if (v19 == v86)
        {
          v13 = *v6;
          a4 = v85;
          break;
        }
      }
    }
    if (!*((_QWORD *)v13 + 9))
    {
      *((_QWORD *)v13 + 9) = v10 / *((unsigned int *)v6[1] + 5);
      v74 = di_asif::header::write_header(v13, *a4);
      if (v74)
      {
        v83 = __cxa_allocate_exception(0x40uLL);
        *v83 = &off_24CF07908;
        v84 = std::generic_category();
        v83[1] = v74;
        v83[2] = v84;
        *((_BYTE *)v83 + 24) = 0;
        *((_BYTE *)v83 + 48) = 0;
        v83[7] = "Failed to update asif header";
      }
    }
    return CFAutoRelease<__CFData const*>::~CFAutoRelease(&cf);
  }
  return result;
}

void sub_212F646C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61,const void *a62)
{
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a62);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a61);
  _Unwind_Resume(a1);
}

void DiskImageASIF::get_used_extents(DiskImageASIF *this@<X0>, _QWORD *a2@<X8>)
{
  di_asif::details::ContextASIF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ref::details **v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = (uint64_t *)&v15;
  if (*(_QWORD *)di_asif::header::get_dir_offset((DiskImageASIF *)((char *)this + 32), *((_QWORD *)this + 22)))
  {
    v4 = (di_asif::details::ContextASIF *)(*(uint64_t (**)(DiskImageASIF *))(*(_QWORD *)this + 136))(this);
    v5 = *((_QWORD *)this + 44);
    v6 = *((_QWORD *)this + 45);
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v5 + 8 * (_QWORD)v8) * *((unsigned int *)this + 24);
        v13 = v9;
        if (v9)
        {
          di_asif::details::dir::get_extents_for_table<std::insert_iterator<std::set<unsigned long long>>>((uint64_t)this + 200, v4, v8, v9, (uint64_t)&v14, (uint64_t)v14);
          std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(&v14, &v13, (uint64_t *)&v13);
        }
        v8 = (ref::details **)((char *)v8 + 1);
        v7 += 8;
      }
      while (v5 + v7 != v6);
    }
    v10 = v15;
    *a2 = v14;
    a2[1] = v10;
    v11 = a2 + 1;
    v12 = v16;
    a2[2] = v16;
    if (v12)
    {
      v10[2] = v11;
      v14 = (uint64_t *)&v15;
      v15 = 0;
      v16 = 0;
      if (!v4)
        goto LABEL_13;
      goto LABEL_12;
    }
    *a2 = v11;
    if (v4)
LABEL_12:
      (*(void (**)(di_asif::details::ContextASIF *))(*(_QWORD *)v4 + 40))(v4);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
  }
LABEL_13:
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v14, v15);
}

void sub_212F648B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

unint64_t *di_asif::details::dir::get_extents_for_table<std::insert_iterator<std::set<unsigned long long>>>(uint64_t a1, di_asif::details::ContextASIF *a2, ref::details **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  di_asif::details::table *v9;
  _BYTE *v11;

  di_asif::details::dir::load_create_table(a1, a2, a3, a4, 0, 1, (unint64_t *)&v11);
  if (v11 && !v11[520])
  {
    if (v11[400])
      v9 = (di_asif::details::table *)(v11 + 40);
    else
      v9 = 0;
    di_asif::details::table::get_table_extents<std::insert_iterator<std::set<unsigned long long>>>(v9, (uint64_t)a2, a5, a6);
  }
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v11);
}

void sub_212F6497C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *DiskImageASIF::insert_free_extents_to_allocator(_QWORD *result, _QWORD *a2, unint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[3];
  __int128 v24;
  uint64_t v25;

  v7 = result;
  if (a2[2])
  {
    v8 = a2 + 1;
    v9 = (_QWORD *)a2[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v8[2];
        v11 = *v10 == (_QWORD)v8;
        v8 = v10;
      }
      while (v11);
    }
    v12 = v10[4] + a4;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(result[25] + 16))(result + 25);
    if (result[12] <= v12)
      result[12] = v12;
  }
  v15 = (_QWORD *)*a2;
  v13 = a2 + 1;
  v14 = v15;
  if (v15 != v13)
  {
    v16 = (uint64_t)(v7 + 25);
    v17 = v7 + 26;
    do
    {
      v18 = v14[4];
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 + 1, v17));
      v24 = a3;
      v25 = a4;
      if ((v18 - a3) % a4)
        v20 = (v18 - a3) / a4 + 1;
      else
        v20 = (v18 - a3) / a4;
      v23[0] = a3;
      v23[1] = v20;
      v23[2] = a4;
      result = di_asif::details::dir::insert_space_no_update<boost::range_detail::integer_iterator_with_step<unsigned long long>>(v16, &v24, (uint64_t)v23);
      v21 = (_QWORD *)v14[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v14[2];
          v11 = *v22 == (_QWORD)v14;
          v14 = v22;
        }
        while (!v11);
      }
      a3 = v18 + a4;
      v14 = v22;
    }
    while (v22 != v13);
  }
  return result;
}

_QWORD *di_asif::details::dir::insert_space_no_update<boost::range_detail::integer_iterator_with_step<unsigned long long>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(_OWORD *)a3;
  v9 = *(_QWORD *)(a3 + 16);
  v13 = 0;
  space_allocators::FixedSize::insert<boost::range_detail::integer_iterator_with_step<unsigned long long>>(v5, (uint64_t *)&v10, &v8, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v7 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_212F64BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageASIF::DiskImageASIF(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(), uint64_t *a6)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  di_asif::details::ContextASIF *v28;
  unint64_t v29;
  char v31;
  uint64_t (***v32)();
  uint64_t (**v33)();
  _QWORD *v34;
  uint64_t (***v35)();
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CF02600;
  *(_QWORD *)(a1 + 16) = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 32) = 2003069043;
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a3 + 4);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a3 + 12);
  v14 = *(_OWORD *)(a3 + 16);
  v15 = *(_OWORD *)(a3 + 32);
  v16 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 94) = *(_QWORD *)(a3 + 62);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 48) = v14;
  *(_WORD *)(a1 + 102) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a4;
  v17 = *a6;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(a1 + 184) = v17;
  v18 = *(_QWORD *)(a3 + 56);
  v19 = *(unsigned __int16 *)(a3 + 68);
  v20 = *(_DWORD *)(a3 + 64);
  v21 = *a2;
  v33 = &off_24CF05B40;
  v34 = (_QWORD *)a1;
  v35 = &v33;
  di_asif::details::dir::dir(a1 + 200, a1, v18 * v19, v20, v19, a5, 2, v21, (uint64_t)&v33);
  v22 = v35;
  if (v35 == &v33)
  {
    v23 = 4;
    v22 = &v33;
  }
  else
  {
    if (!v35)
      goto LABEL_9;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_9:
  *(_QWORD *)(a1 + 4056) = a1 + 32;
  *(_QWORD *)(a1 + 4064) = a1 + 200;
  *(_QWORD *)(a1 + 4072) = 0;
  DiskImageASIF::get_used_extents((DiskImageASIF *)a1, &v33);
  v24 = *(unsigned __int16 *)(a3 + 68);
  v25 = *(unsigned int *)(a3 + 64);
  DiskImageASIF::insert_free_extents_to_allocator((_QWORD *)a1, &v33, (v24+ v25- ((int)v24 + 511) % v24+ 2* (v24 + 8 * ((unint64_t)(*(_QWORD *)(a1 + 320) + *(_QWORD *)(a1 + 280) - 1) / *(_QWORD *)(a1 + 280)) + 7)/ v24* v24+ 510)/ v25* v25, v25);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v33, v34);
  v26 = *(_QWORD *)(a1 + 176);
  if (v26 == 1)
    v27 = 0;
  else
    v27 = v26 + 1;
  *(_QWORD *)(a1 + 176) = v27;
  v28 = (di_asif::details::ContextASIF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  di_asif::details::dir::trim_last_unused_extents((di_asif::details::dir *)(a1 + 200), v28);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 48))(*a2))
    di_asif::details::dir::async_defrag((di_asif::details::dir *)(a1 + 200));
  if (!*((_BYTE *)a6 + 2))
  {
    v29 = atomic_load((unint64_t *)(a1 + 4072));
    if (v29 != -1)
    {
      v33 = (uint64_t (**)())&v31;
      v32 = &v33;
      std::__call_once((std::once_flag::_State_type *)(a1 + 4072), &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageASIF::DiskImageASIF(std::shared_ptr<Backend> const&,di_asif::header const&,std::pair<unsigned long,unsigned long long>,di_asif::options const&)::$_0 &&>>);
    }
  }
  (*(void (**)(di_asif::details::ContextASIF *))(*(_QWORD *)v28 + 40))(v28);
  return a1;
}

void sub_212F64E94(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  di_asif::details::dir *v3;
  uint64_t v4;

  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  di_asif::details::dir::~dir(v3);
  std::mutex::~mutex(v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::DiskImageASIF(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, _OWORD *a8, __int128 *a9)
{
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  di_utils *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v28;
  _QWORD *exception;
  const std::error_category *v30;
  _QWORD *v31;
  const std::error_category *v32;
  char v33;
  int v34;
  __int128 *v35;
  __int128 v36;
  __int128 *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CF02600;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a6;
  v17 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 24) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  di_asif::header_flags::header_flags(&v34, *((unsigned __int8 *)a7 + 1));
  di_asif::header::header(a1 + 32, &v34, a8, a4, a5, a3, a2);
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v20 = *a7;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(a1 + 184) = v20;
  *(_QWORD *)&v36 = &off_24CF05B40;
  *((_QWORD *)&v36 + 1) = a1;
  v37 = &v36;
  di_asif::details::dir::dir(a1 + 200, a1, a2 * a5, a3, a2, (uint64_t (***)())0x200, 2, 0, (uint64_t)&v36);
  v21 = v37;
  if (v37 == &v36)
  {
    v22 = 4;
    v21 = &v36;
  }
  else
  {
    if (!v37)
      goto LABEL_9;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_9:
  *(_QWORD *)(a1 + 4056) = a1 + 32;
  *(_QWORD *)(a1 + 4064) = a1 + 200;
  *(_QWORD *)(a1 + 4072) = 0;
  if ((a2 & 0x1FF) != 0)
  {
    v28 = "ASIF: Block size isn't a multiple of 512";
    goto LABEL_21;
  }
  if (*(_DWORD *)(a1 + 40) <= 0x50u)
  {
    v28 = "ASIF: Header size is less than the min header size";
LABEL_21:
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v30 = std::generic_category();
    exception[1] = 152;
    exception[2] = v30;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = v28;
  }
  if (!*((_BYTE *)a7 + 2))
  {
    v23 = atomic_load((unint64_t *)(a1 + 4072));
    if (v23 != -1)
    {
      *(_QWORD *)&v36 = &v33;
      v35 = &v36;
      std::__call_once((std::once_flag::_State_type *)(a1 + 4072), &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageASIF::DiskImageASIF(unsigned short,unsigned int,unsigned long long,unsigned long long,std::shared_ptr<Backend> const&,di_asif::options const&,boost::uuids::uuid const&,std::optional<boost::uuids::uuid> const&)::$_0 &&>>);
    }
  }
  v24 = (di_utils *)di_asif::header::write_header((di_asif::header *)(a1 + 32), *(Backend **)a6);
  v25 = v24;
  if ((_DWORD)v24)
  {
    v31 = __cxa_allocate_exception(0x40uLL);
    *v31 = &off_24CF07908;
    v32 = std::generic_category();
    v31[1] = v25;
    v31[2] = v32;
    *((_BYTE *)v31 + 24) = 0;
    *((_BYTE *)v31 + 48) = 0;
    v31[7] = "Couldn't write asif's header";
  }
  if (*((_BYTE *)a9 + 16))
  {
    v36 = *a9;
  }
  else
  {
    *(_QWORD *)&v36 = di_utils::random_uuid(v24);
    *((_QWORD *)&v36 + 1) = v26;
  }
  DiskImageASIF::internal_metadata_set_key_uuid(a1, CFSTR("stable uuid"), (uint64_t)&v36);
  return a1;
}

{
  return DiskImageASIF::DiskImageASIF(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_212F65220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::mutex *v16;
  di_asif::details::dir *v17;

  di_asif::details::dir::~dir(v17);
  std::mutex::~mutex(v16);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::internal_metadata_set_key_uuid(uint64_t a1, const void *a2, uint64_t a3)
{
  di_asif::details::ContextASIF *v6;
  const void *v7;
  CFTypeID TypeID;
  CFIndex Count;
  const __CFAllocator *v10;
  CFMutableDictionaryRef MutableCopy;
  const char *v12;
  _OWORD *v13;
  BOOL v14;
  CFIndex v15;
  CFMutableDictionaryRef v16;
  unsigned int v17;
  _QWORD *exception;
  const std::error_category *v20;
  cf::CFUtilException *v21;
  cf::CFUtilException *v22;
  uint64_t v23;
  _QWORD *v24;
  const std::error_category *v25;
  _QWORD *v26;
  const std::error_category *v27;
  _QWORD *v28;
  const std::error_category *v29;
  void *__p;
  __int128 v31;
  void *value;
  CFDictionaryRef theDict;

  v6 = (di_asif::details::ContextASIF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  di_asif::Metadata::read((di_asif::details::dir **)(a1 + 4056), v6, &theDict);
  v7 = CFDictionaryGetValue(theDict, CFSTR("internal metadata"));
  TypeID = CFDictionaryGetTypeID();
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v20 = std::generic_category();
    exception[1] = 152;
    exception[2] = v20;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(v7) != TypeID)
  {
    v21 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    v22 = cf::CFUtilException::CFUtilException(v21);
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)v7);
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], Count + 1, (CFDictionaryRef)v7);
  value = MutableCopy;
  v12 = "ASIF: can't copy metadata to mutable copy";
  if (!MutableCopy)
  {
    v23 = 4294967284;
    goto LABEL_14;
  }
  v13 = operator new(0x28uLL);
  __p = v13;
  v31 = xmmword_212FF0960;
  *v13 = 0u;
  v13[1] = 0u;
  *(_QWORD *)((char *)v13 + 29) = 0;
  boost::uuids::to_chars<char *>(a3, v13);
  v14 = addCFStringToDict(MutableCopy, a2, (uint64_t)&__p);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  if (!v14)
  {
    v12 = "ASIF: can't set requested uuid";
    v23 = 150;
LABEL_14:
    v24 = __cxa_allocate_exception(0x40uLL);
    *v24 = &off_24CF07908;
    v25 = std::generic_category();
    v24[1] = v23;
    v24[2] = v25;
    *((_BYTE *)v24 + 24) = 0;
    *((_BYTE *)v24 + 48) = 0;
    v24[7] = v12;
  }
  v15 = CFDictionaryGetCount(theDict);
  v16 = CFDictionaryCreateMutableCopy(v10, v15 + 1, theDict);
  __p = v16;
  if (!v16)
  {
    v26 = __cxa_allocate_exception(0x40uLL);
    *v26 = &off_24CF07908;
    v27 = std::generic_category();
    v26[1] = 4294967284;
    v26[2] = v27;
    *((_BYTE *)v26 + 24) = 0;
    *((_BYTE *)v26 + 48) = 0;
    v26[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(v16, CFSTR("internal metadata"), value);
  di_asif::Metadata::write((const void **)(a1 + 4056), v6, __p, (Backend **)(a1 + 16));
  v17 = (*(uint64_t (**)(uint64_t, di_asif::details::ContextASIF *, _QWORD))(*(_QWORD *)a1 + 176))(a1, v6, 0);
  if (v17)
  {
    v28 = __cxa_allocate_exception(0x40uLL);
    *v28 = &off_24CF07908;
    v29 = std::generic_category();
    v28[1] = v17;
    v28[2] = v29;
    *((_BYTE *)v28 + 24) = 0;
    *((_BYTE *)v28 + 48) = 0;
    v28[7] = "ASIF: failed to write metadata";
  }
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&__p);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&value);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return (*(uint64_t (**)(di_asif::details::ContextASIF *))(*(_QWORD *)v6 + 40))(v6);
}

void sub_212F655D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  uint64_t v18;
  void *v19;

  __cxa_free_exception(v19);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a18);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::get_dir_latest_offset(DiskImageASIF *this, Backend *a2, const di_asif::header *a3)
{
  uint64_t v5;
  int v6;
  int64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  Backend *v11;
  int64_t version;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  do
  {
    v10 = v9;
    v11 = *(Backend **)di_asif::header::get_dir_offset((di_asif::header *)a2, v5);
    if (v11)
    {
      version = di_asif::details::dir::get_version((unint64_t)this, v11);
      if (!v6 || v7 < version)
      {
        v6 = 1;
        v8 = v5;
        v7 = version;
      }
    }
    v9 = 0;
    v5 = 1;
  }
  while ((v10 & 1) != 0);
  return v8;
}

uint64_t DiskImageASIF::void_stackable_identifier(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  _QWORD **v8;
  _QWORD *v9;

  v7 = 0;
  v3 = (unint64_t *)(a1 + 4072);
  v6[0] = a1;
  v6[1] = &v7;
  v6[2] = a2;
  v4 = atomic_load(v3);
  if (v4 != -1)
  {
    v9 = v6;
    v8 = &v9;
    std::__call_once(v3, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageASIF::void_stackable_identifier(std::shared_ptr<Backend> &)::$_0 &&>>);
  }
  if (v7 < 0)
    return v7;
  else
    return -v7;
}

uint64_t DiskImageASIF::flush(uint64_t a1, Backend **a2, int a3)
{
  std::mutex *v6;
  uint64_t (***v7)();
  uint64_t (***v8)();
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *dir_offset;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  v7 = *(uint64_t (****)())di_asif::header::get_dir_offset((di_asif::header *)(a1 + 32), *(_QWORD *)(a1 + 176));
  v8 = v7;
  if (!v7)
  {
    v9 = *(unsigned __int16 *)(a1 + 100);
    v10 = *(_QWORD *)(a1 + 176);
    v11 = *(_QWORD *)(a1 + 320);
    v12 = *(_QWORD *)(a1 + 280);
    dir_offset = (_QWORD *)di_asif::header::get_dir_offset((di_asif::header *)(a1 + 32), v10);
    v8 = (uint64_t (***)())(v9
                                    + 511
                                    - ((int)v9 + 511) % v9
                                    + (8 * ((v11 + v12 - 1) / v12) + v9 + 7) / v9 * v9 * v10);
    *dir_offset = v8;
  }
  v14 = di_asif::details::dir::flush((unint64_t **)(a1 + 200), (di_asif::details::ContextASIF *)a2, v8);
  v15 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if ((_DWORD)v14 == 1)
    {
      v16 = *(_QWORD *)(a1 + 176);
      if (v16 == 1)
        v17 = 0;
      else
        v17 = v16 + 1;
      *(_QWORD *)(a1 + 176) = v17;
    }
    if (v7
      || (v15 = (*(uint64_t (**)(Backend *, _QWORD))(*(_QWORD *)a2[2] + 16))(a2[2], 0), !(_DWORD)v15)
      && (v15 = di_asif::header::write_header((di_asif::header *)(a1 + 32), a2[2]), !(_DWORD)v15))
    {
      v15 = (*(uint64_t (**)(Backend *, _QWORD))(*(_QWORD *)a2[2] + 16))(a2[2], 2 * (a3 == 2));
    }
  }
  std::mutex::unlock(v6);
  return v15;
}

void sub_212F658E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 DiskImageASIF::get_extents_iterator_interface@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v12 = a1 + 200;
  v13 = operator new();
  result = *a4;
  *(__n128 *)(v13 + 16) = *a4;
  *(_QWORD *)(v13 + 32) = a4[1].n128_u64[0];
  *(_QWORD *)(v13 + 40) = a5;
  *(_QWORD *)(v13 + 48) = a1;
  *(_QWORD *)(v13 + 56) = a3;
  *(_QWORD *)v13 = off_24CF02700;
  *(_QWORD *)(v13 + 8) = a2;
  *(_QWORD *)(v13 + 64) = v12;
  *a6 = v13;
  return result;
}

uint64_t DiskImageASIF::get_user_data@<X0>(di_asif::details::dir **this@<X0>, _QWORD *a2@<X8>)
{
  di_asif::details::ContextASIF *v4;
  const void *Value;
  CFTypeID TypeID;
  CFTypeID v7;
  cf::CFUtilException *exception;
  cf::CFUtilException *v10;
  cf::CFUtilException *v11;
  cf::CFUtilException *v12;
  const void *v13;
  CFDictionaryRef theDict;

  v4 = (di_asif::details::ContextASIF *)(*((uint64_t (**)(di_asif::details::dir **))*this + 17))(this);
  di_asif::Metadata::read(this + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, CFSTR("user metadata"));
  TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      v10 = cf::CFUtilException::CFUtilException(exception);
    }
    v7 = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != v7)
    {
      v11 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      v12 = cf::CFUtilException::CFUtilException(v11);
    }
    CFRetain(Value);
    *a2 = Value;
  }
  else
  {
    cf::make_empty_dict((CFMutableDictionaryRef *)&v13);
    *a2 = v13;
    v13 = 0;
    CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v13);
  }
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return (*(uint64_t (**)(di_asif::details::ContextASIF *))(*(_QWORD *)v4 + 40))(v4);
}

void sub_212F65B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  uint64_t v10;
  void *v11;

  __cxa_free_exception(v11);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::write_user_data(di_asif::details::dir **this, const __CFDictionary *a2)
{
  di_asif::details::ContextASIF *v4;
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  unsigned int v7;
  _QWORD *exception;
  const std::error_category *v10;
  _QWORD *v11;
  const std::error_category *v12;
  _QWORD *v13;
  const std::error_category *v14;
  CFPropertyListRef propertyList;
  CFDictionaryRef theDict;

  v4 = (di_asif::details::ContextASIF *)(*((uint64_t (**)(di_asif::details::dir **))*this + 17))(this);
  di_asif::Metadata::read(this + 507, v4, &theDict);
  if (!theDict)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v10 = std::generic_category();
    exception[1] = 4294967284;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "ASIF: can't read/allocate asif metadata";
  }
  Count = CFDictionaryGetCount(theDict);
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], Count, theDict);
  propertyList = MutableCopy;
  if (!MutableCopy)
  {
    v11 = __cxa_allocate_exception(0x40uLL);
    *v11 = &off_24CF07908;
    v12 = std::generic_category();
    v11[1] = 4294967284;
    v11[2] = v12;
    *((_BYTE *)v11 + 24) = 0;
    *((_BYTE *)v11 + 48) = 0;
    v11[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(MutableCopy, CFSTR("user metadata"), a2);
  di_asif::Metadata::write((const void **)this + 507, v4, propertyList, (Backend **)this + 2);
  v7 = (*((uint64_t (**)(di_asif::details::dir **, di_asif::details::ContextASIF *, uint64_t))*this + 22))(this, v4, 2);
  if (v7)
  {
    v13 = __cxa_allocate_exception(0x40uLL);
    *v13 = &off_24CF07908;
    v14 = std::generic_category();
    v13[1] = v7;
    v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 48) = 0;
    v13[7] = "ASIF: failed to write metadata";
  }
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&propertyList);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return (*(uint64_t (**)(di_asif::details::ContextASIF *))(*(_QWORD *)v4 + 40))(v4);
}

void sub_212F65D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::internal_metadata_get_key_uuid(di_asif::details::dir **this, const __CFString *a2)
{
  di_asif::details::ContextASIF *v4;
  const void *Value;
  CFTypeID TypeID;
  const __CFString *v7;
  CFTypeID v8;
  _QWORD *exception;
  const std::error_category *v11;
  cf::CFUtilException *v12;
  cf::CFUtilException *v13;
  cf::CFUtilException *v14;
  cf::CFUtilException *v15;
  void *__p;
  CFDictionaryRef theDict;

  v4 = (di_asif::details::ContextASIF *)(*((uint64_t (**)(di_asif::details::dir **))*this + 17))(this);
  di_asif::Metadata::read(this + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, CFSTR("internal metadata"));
  TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v11 = std::generic_category();
    exception[1] = 152;
    exception[2] = v11;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    v12 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    v13 = cf::CFUtilException::CFUtilException(v12);
  }
  v7 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, a2);
  v8 = CFStringGetTypeID();
  if (v7)
  {
    if (CFGetTypeID(v7) == v8)
      toNativeType(v7, &__p);
    v14 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    v15 = cf::CFUtilException::CFUtilException(v14);
  }
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  (*(void (**)(di_asif::details::ContextASIF *))(*(_QWORD *)v4 + 40))(v4);
  return 0;
}

void sub_212F65F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, const void *a17)
{
  uint64_t v17;
  void *v18;

  __cxa_free_exception(v18);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a17);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::set_stackable_source_identifier(uint64_t a1, uint64_t a2)
{
  return DiskImageASIF::internal_metadata_set_key_uuid(a1, CFSTR("source uuid"), a2);
}

uint64_t DiskImageASIF::get_stable_uuid(di_asif::details::dir **this)
{
  return DiskImageASIF::internal_metadata_get_key_uuid(this, CFSTR("stable uuid"));
}

uint64_t DiskImageASIF::get_stackable_source_identifier(di_asif::details::dir **this)
{
  return DiskImageASIF::internal_metadata_get_key_uuid(this, CFSTR("source uuid"));
}

uint64_t DiskImageASIF::get_stackable_identifier(DiskImageASIF *this)
{
  return *((_QWORD *)this + 8);
}

void DiskImageASIF::~DiskImageASIF(DiskImageASIF *this)
{
  char *v2;

  *(_QWORD *)this = &off_24CF02600;
  v2 = (char *)this + 16;
  di_asif::details::dir::~dir((DiskImageASIF *)((char *)this + 200));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_24CF02600;
  v2 = (char *)this + 16;
  di_asif::details::dir::~dir((DiskImageASIF *)((char *)this + 200));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImageASIF::get_block_size(DiskImageASIF *this)
{
  return *((unsigned __int16 *)this + 109);
}

uint64_t DiskImageASIF::get_num_blocks(DiskImageASIF *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t DiskImageASIF::is_writable(DiskImageASIF *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

info::DiskImageInfoASIF *DiskImageASIF::create_image_info@<X0>(DiskImageASIF *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  info::DiskImageInfoASIF *v6;
  info::DiskImageInfoASIF *result;

  v6 = (info::DiskImageInfoASIF *)operator new();
  result = info::DiskImageInfoASIF::DiskImageInfoASIF(v6, this, a2);
  *a3 = (char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 104);
  return result;
}

void sub_212F66140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C40C7B85E04);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::set_size(DiskImageASIF *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  di_asif::details::ContextASIF *v7;
  uint64_t v8;

  v4 = DiskImage::set_size_unmap_data((DiskImage *)this, a2);
  if (!(_DWORD)v4)
  {
    v5 = (*(uint64_t (**)(DiskImageASIF *))(*(_QWORD *)this + 24))(this);
    v6 = (a2 + v5 - 1) / v5;
    if (v6 <= *((_QWORD *)this + 11))
    {
      v7 = (di_asif::details::ContextASIF *)(*(uint64_t (**)(DiskImageASIF *))(*(_QWORD *)this + 136))(this);
      v8 = *((_QWORD *)this + 11);
      if (v8 - v6 >= di_asif::Metadata::read_num_blocks((DiskImageASIF *)((char *)this + 4056), v7))
      {
        *((_QWORD *)this + 10) = v6;
        di_asif::header::write_header((DiskImageASIF *)((char *)this + 32), *((Backend **)this + 2));
        v4 = (*(uint64_t (**)(DiskImageASIF *, di_asif::details::ContextASIF *, uint64_t))(*(_QWORD *)this
                                                                                                  + 176))(this, v7, 2);
      }
      else
      {
        v4 = 4294967269;
      }
      (*(void (**)(di_asif::details::ContextASIF *))(*(_QWORD *)v7 + 40))(v7);
    }
    else
    {
      return 4294967269;
    }
  }
  return v4;
}

void sub_212F66240(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageASIF::supports_unmap(DiskImageASIF *this)
{
  return 1;
}

uint64_t DiskImageASIF::supports_get_extents(DiskImageASIF *this)
{
  return 1;
}

_QWORD *DiskImageASIF::_create_ctx(DiskImageASIF *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = off_24CEFD000;
  v2[1] = this;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return v2;
}

void sub_212F662CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::read(DiskImageASIF *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8;
  uint64_t v9;

  v8 = ((*((_QWORD *)a4 + 18) - *((_QWORD *)a3 + 18)) & ~((uint64_t)(*((_QWORD *)a4 + 18) - *((_QWORD *)a3 + 18)) >> 63))
     + *((_QWORD *)a3 + 3);
  v9 = *((_QWORD *)this + 10);
  if (v8 > (*(uint64_t (**)(DiskImageASIF *))(*(_QWORD *)this + 24))(this) * v9)
    return -34;
  else
    return di_asif::details::dir::do_io((DiskImageASIF *)((char *)this + 200), a2, a3, a4, 1);
}

uint64_t DiskImageASIF::write(DiskImageASIF *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v8 = ((*((_QWORD *)a4 + 18) - *((_QWORD *)a3 + 18)) & ~((uint64_t)(*((_QWORD *)a4 + 18) - *((_QWORD *)a3 + 18)) >> 63))
     + *((_QWORD *)a3 + 3);
  v9 = *((_QWORD *)this + 10);
  if (v8 > (*(uint64_t (**)(DiskImageASIF *))(*(_QWORD *)this + 24))(this) * v9)
    return -34;
  v10 = DiskImageASIF::void_stackable_identifier((uint64_t)this, (uint64_t)a2 + 16);
  if (!v10)
    return di_asif::details::dir::do_io((DiskImageASIF *)((char *)this + 200), a2, a3, a4, 0);
  if (v10 >= 0)
    v11 = v10;
  else
    v11 = -v10;
  return -v11;
}

uint64_t DiskImageASIF::unmap(_QWORD *a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (a4)
  {
    v8 = (_QWORD *)(a3 + 8);
    v9 = a4;
    while (1)
    {
      v10 = *v8 + *(v8 - 1);
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) * v10;
      v12 = a1[10];
      if (v11 > (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) * v12)
        return 4294967262;
      v8 += 2;
      if (!--v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = DiskImageASIF::void_stackable_identifier((uint64_t)a1, (uint64_t)a2 + 16);
    if (!(_DWORD)result)
      return di_asif::details::dir::unmap((uint64_t)(a1 + 25), a2, a3, a4);
  }
  return result;
}

__n128 di_asif::details::asif_extents_iterator_interface::clone@<Q0>(di_asif::details::asif_extents_iterator_interface *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(v4 + 40) = *((_QWORD *)this + 5);
  result = *((__n128 *)this + 3);
  *(__n128 *)(v4 + 48) = result;
  *(_QWORD *)v4 = off_24CF02700;
  *(_QWORD *)(v4 + 64) = *((_QWORD *)this + 8);
  *a2 = v4;
  return result;
}

void di_asif::details::asif_extents_iterator_interface::~asif_extents_iterator_interface(di_asif::details::asif_extents_iterator_interface *this)
{
  JUMPOUT(0x2199A8A18);
}

uint64_t di_asif::details::dir::get_space_allocator(di_asif::details::dir *this)
{
  return (uint64_t)this + 176;
}

unint64_t *di_asif::details::dir::allocate_bitmap@<X0>(di_asif::details::dir *this@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  return ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate((uint64_t)this + 2080, a2, a3, a4);
}

_QWORD *std::vector<ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_212F66660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t space_allocators::FixedSize::allocate(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  uint64_t v12;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(_QWORD *)(a1 + 88))
  {
    v4 = *(uint64_t **)(a1 + 72);
    v5 = v4[4];
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer((uint64_t **)(a1 + 72), v4);
    operator delete(v4);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)a1 + v5;
    std::unique_lock<std::mutex>::unlock(&v13);
    v7 = *(_QWORD *)(a2 + 24);
    if (v7)
    {
      v10[0] = *(_QWORD *)a1 + v5;
      if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10))
      {
        *(_QWORD *)&v8 = "space_allocators::FixedSize::allocate(const size_changed_fn_t &)";
        *((_QWORD *)&v8 + 1) = 37;
        v9 = 16;
        di_log::logger<di_log::log_printer<137ul>>::logger(v10, &v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"allocated: size change callback failed with ", 44);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf((uint64_t)v10);
        MEMORY[0x2199A89AC](&v12);
      }
    }
  }
  if (v13.__owns_)
    std::mutex::unlock(v13.__m_);
  return v5;
}

void sub_212F667B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  if (*(_BYTE *)(v12 - 40))
    std::mutex::unlock(*(std::mutex **)(v12 - 48));
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<137ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<137ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF02778;
  a1[45] = &unk_24CF02878;
  a1[46] = &unk_24CF028A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF02778;
  a1[45] = &unk_24CF02800;
  a1[46] = &unk_24CF02828;
  return a1;
}

void sub_212F66868(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<137ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF02910;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F66934(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF02910;
  di_log::logger_buf<di_log::log_printer<137ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<137ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<137ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<137ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<137ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F66D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<137ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 137;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 137;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEED0Ev()
{
  JUMPOUT(0x2199A8A18);
}

__n128 _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CF02990;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEPNS0_6__baseISB_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CF02990;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEEclEOy(uint64_t a1, uint64_t *a2)
{
  return _ZZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmENKUlT_E_clIyEEDaS4_((size_t *)(a1 + 8), *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE11target_typeEv()
{
  return &_ZTIZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmEUlT_E_;
}

uint64_t _ZZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmENKUlT_E_clIyEEDaS4_(size_t *a1, uint64_t a2)
{
  Backend *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(Backend **)(*a1 + 16);
  v5 = (char *)malloc_type_valloc(a1[1], 0xF8ED6DDuLL);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v12, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v15[0] = &off_24CF03100;
  v16 = v15;
  v13 = v5;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v14, (uint64_t)v15);
  v6 = v16;
  if (v16 == v15)
  {
    v7 = 4;
    v6 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_7;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  bzero(v13, a1[1]);
  v8 = Backend::write(v4, v13, a1[1], a2 - a1[1]);
  if (a1[1] == v8)
  {
    v9 = 0;
  }
  else
  {
    if (v8 >= 0)
      v9 = 4294967291;
    else
      v9 = v8;
    DiskImage::Context::terminate_di((DiskImage::Context *)*a1);
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v13);
  return v9;
}

void sub_212F67134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEED0Ev()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *_ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF02A20;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEPNS0_6__baseISB_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF02A20;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEEclEOy(uint64_t a1, unint64_t *a2)
{
  return _ZNSt3__128__invoke_void_return_wrapperIiLb0EE6__callB8ne180100IJRZN7di_asif7details8dir_base15trim_backend_fnERNS4_11ContextASIFEEUlT_E_yEEEiDpOT_((DiskImage::Context **)(a1 + 8), a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN7di_asif7details8dir_base15trim_backend_fnERNS0_11ContextASIFEEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE11target_typeEv()
{
  return &_ZTIZN7di_asif7details8dir_base15trim_backend_fnERNS0_11ContextASIFEEUlT_E_;
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIiLb0EE6__callB8ne180100IJRZN7di_asif7details8dir_base15trim_backend_fnERNS4_11ContextASIFEEUlT_E_yEEEiDpOT_(DiskImage::Context **a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)*a1 + 2);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) > v3
    && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 56))(v4, v3))
  {
    DiskImage::Context::terminate_di(*a1);
  }
  return 0;
}

void space_allocators::FixedSize::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v5;
  unint64_t v6;
  uint64_t v7;

  v7 = a2;
  v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long &>((uint64_t **)(a1 + 72), (unint64_t *)&v7, &v7);
  v6 = *(_QWORD *)a1 + v7;
  if (*(_QWORD *)(a1 + 96) <= v6)
    *(_QWORD *)(a1 + 96) = v6;
  space_allocators::FixedSize::trim_largest((_QWORD *)a1, a3);
  std::mutex::unlock(v5);
}

void sub_212F672F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<436ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<436ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<436ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF02C40;
  di_log::logger_buf<di_log::log_printer<436ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<436ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F67774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<436ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 436;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 436;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<450ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<450ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<450ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF02E60;
  di_log::logger_buf<di_log::log_printer<450ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<450ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F67D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<450ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 450;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 450;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_asif::details::table_entry_data::table_entry_data(_QWORD *this, di_asif::details::table *a2, uint64_t a3)
{
  unint64_t v3;
  DiskImagesRuntimeException *exception;
  void *v5;

  *this = a2;
  this[1] = a3;
  atomic_load((unint64_t *)(*((_QWORD *)a2 + 7) + 16 * a3 + 8));
  v3 = atomic_load((unint64_t *)(*((_QWORD *)a2 + 7) + 16 * a3 + 8));
  if ((v3 & 0x3F80000000000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return this;
}

_QWORD *di_asif::details::table_entry_map::table_entry_map(_QWORD *this, di_asif::details::table *a2, uint64_t a3)
{
  unint64_t v3;
  DiskImagesRuntimeException *exception;
  void *v5;

  *this = a2;
  this[1] = a3;
  v3 = atomic_load((unint64_t *)(*((_QWORD *)a2 + 7) + 16 * a3 + 8));
  if ((v3 & 0x7F80000000000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return this;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<547ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<547ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<547ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03080;
  di_log::logger_buf<di_log::log_printer<547ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<547ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F68414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<547ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 547;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 547;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::vector<ref::details::ref_cnt_set_handle>::__emplace_back_slow_path<ref::details::ref_cnt_set_handle>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<ref::details::ref_cnt_set_handle>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  v14 = v10;
  v15 = &v10[32 * v4];
  v16 = (uint64_t)v15;
  v17 = &v10[32 * v9];
  v11 = (_QWORD *)ref::details::ref_cnt_handle::ref_cnt_handle((uint64_t)v15, a2);
  *v11 = &off_24CF07538;
  v11[3] = *(_QWORD *)(a2 + 24);
  v16 += 32;
  std::vector<ref::details::ref_cnt_set_handle>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<ref::details::ref_cnt_set_handle>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_212F687D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ref::details::ref_cnt_set_handle>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ref::details::ref_cnt_set_handle>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ref::details::ref_cnt_set_handle>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::allocator<ref::details::ref_cnt_set_handle>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ref::details::ref_cnt_set_handle>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)ref::details::ref_cnt_handle::ref_cnt_handle(a7 + v11 - 32, a3 + v11 - 32) = &off_24CF07538;
      *(_QWORD *)(a7 + v11 - 8) = *(_QWORD *)(a3 + v11 - 8);
      v11 -= 32;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_212F68924(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 32)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<ref::details::ref_cnt_set_handle>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<ref::details::ref_cnt_set_handle>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<863ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<863ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<863ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03320;
  di_log::logger_buf<di_log::log_printer<863ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<863ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F68DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<863ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 863;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 863;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<888ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<888ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<888ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03540;
  di_log::logger_buf<di_log::log_printer<888ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<888ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F693CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<888ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 888;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 888;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<900ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<900ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<900ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03760;
  di_log::logger_buf<di_log::log_printer<900ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<900ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F699B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<900ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 900;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 900;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<258ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<258ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF037E8;
  a1[45] = &unk_24CF038E8;
  a1[46] = &unk_24CF03910;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF037E8;
  a1[45] = &unk_24CF03870;
  a1[46] = &unk_24CF03898;
  return a1;
}

void sub_212F69C70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<258ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03980;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F69D3C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03980;
  di_log::logger_buf<di_log::log_printer<258ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<258ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<258ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<258ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<258ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6A130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<258ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 258;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 258;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1075ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1075ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1075ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03BA0;
  di_log::logger_buf<di_log::log_printer<1075ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1075ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6A6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1075ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1075;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1075;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1081ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1081ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1081ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03DC0;
  di_log::logger_buf<di_log::log_printer<1081ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1081ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6ACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1081ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1081;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1081;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1090ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1090ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1090ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF03FE0;
  di_log::logger_buf<di_log::log_printer<1090ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1090ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6B2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1090ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1090;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1090;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1151ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1151ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1151ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF04200;
  di_log::logger_buf<di_log::log_printer<1151ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1151ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6B8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1151ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1151;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1151;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1188ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1188ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1188ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF04420;
  di_log::logger_buf<di_log::log_printer<1188ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1188ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6BEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1188ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1188;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1188;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1441ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1441ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1441ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF04640;
  di_log::logger_buf<di_log::log_printer<1441ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1441ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6C490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1441ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1441;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1441;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize_ios(uint64_t a1)
{
  int returned_io_size;
  uint64_t v3;
  uint64_t v4;
  void (***v5)(void);
  void (**v6)(void);
  int v7;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 5496) + 16) + 144))(*(_QWORD *)(*(_QWORD *)(a1 + 5496) + 16));
  returned_io_size = Backend::get_returned_io_size(a1 + 5504);
  v3 = *(_QWORD *)(a1 + 6600);
  if (v3 == returned_io_size)
  {
    sg_vec_ns::details::sg_vec_iterator::operator=(a1 + 5168, a1 + 5328);
    *(_QWORD *)(a1 + 5512) = 0;
    v4 = *(_QWORD *)(a1 + 6200);
    if (v4)
    {
      v5 = *(void (****)(void))(a1 + 6192);
      do
      {
        --v4;
        v6 = *v5;
        v5 += 3;
        (*v6)();
      }
      while (v4);
    }
    *(_QWORD *)(a1 + 6200) = 0;
    if (*(_BYTE *)(a1 + 6184))
      *(_BYTE *)(a1 + 6184) = 0;
    *(_QWORD *)(a1 + 6600) = 0;
  }
  else
  {
    if (returned_io_size < 0)
      v7 = returned_io_size;
    else
      v7 = -5;
    return -(uint64_t)-v7;
  }
  return v3;
}

_QWORD *di_log::logger<di_log::log_printer<1409ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1409ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF046C8;
  a1[45] = &unk_24CF047C8;
  a1[46] = &unk_24CF047F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF046C8;
  a1[45] = &unk_24CF04750;
  a1[46] = &unk_24CF04778;
  return a1;
}

void sub_212F6C818(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1409ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF04860;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F6C970(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF04860;
  di_log::logger_buf<di_log::log_printer<1409ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1409ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1409ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1409ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1409ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6CD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1409ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1409;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1409;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize(uint64_t a1)
{
  uint64_t v2;

  v2 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize_ios(a1);
  if (*(_BYTE *)(a1 + 5160))
  {
    di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t(a1);
    *(_BYTE *)(a1 + 5160) = 0;
  }
  return v2;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  char v33;
  sg_vec_ns::details::sg_vec_iterator *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v91;
  _BYTE v92[25];
  unint64_t v93;
  char v94;
  __int128 v95;
  _BYTE v96[25];
  uint64_t v97;
  std::__shared_weak_count *v98;
  _OWORD v99[2];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _OWORD v112[2];
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  _OWORD v125[2];
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  char v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  __int128 v148;
  unint64_t v149;
  sg_vec_ns::details::sg_vec_iterator *v150;
  _BYTE v151[536];
  __int128 v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  char v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v91 = &v3[40 * v2];
    do
    {
      v5 = *v3;
      v4 = (std::__shared_weak_count *)v3[1];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      *(_OWORD *)v96 = *((_OWORD *)v3 + 1);
      *(_OWORD *)&v96[9] = *(_OWORD *)((char *)v3 + 25);
      v8 = v3[6];
      v9 = *(_OWORD *)(v3 + 7);
      v10 = *(_OWORD *)(v3 + 11);
      v155 = *(_OWORD *)(v3 + 9);
      v156 = v10;
      v157 = *((_BYTE *)v3 + 104);
      v12 = v3[14];
      v11 = (std::__shared_weak_count *)v3[15];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v95 = *((_OWORD *)v3 + 8);
      v93 = v3[18];
      v94 = *((_BYTE *)v3 + 152);
      v16 = v3[20];
      v15 = (std::__shared_weak_count *)v3[21];
      if (v15)
      {
        v17 = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      *(_OWORD *)v92 = *((_OWORD *)v3 + 11);
      *(_OWORD *)&v92[9] = *(_OWORD *)((char *)v3 + 185);
      v19 = v3[26];
      v20 = *(_OWORD *)(v3 + 27);
      v21 = *(_OWORD *)(v3 + 31);
      v152 = *(_OWORD *)(v3 + 29);
      v153 = v21;
      v154 = *((_BYTE *)v3 + 264);
      v23 = v3[34];
      v22 = (std::__shared_weak_count *)v3[35];
      if (v22)
      {
        v24 = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = 0;
      v108 = (std::__shared_weak_count *)v3[38];
      v109 = *((_BYTE *)v3 + 312);
      v107 = *((_OWORD *)v3 + 18);
      v110 = v5;
      v111 = v4;
      v112[0] = *(_OWORD *)v96;
      *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)&v96[9];
      v114 = v9;
      v115 = v155;
      v116 = v156;
      v117 = v157;
      v113 = v8;
      v118 = v12;
      v119 = v11;
      v120 = v95;
      v122 = v94;
      v121 = v93;
      v97 = v16;
      v98 = v15;
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v92[9];
      v99[0] = *(_OWORD *)v92;
      v101 = v20;
      v104 = v154;
      v102 = v152;
      v103 = v153;
      v100 = v19;
      v105 = v23;
      v106 = v22;
      v27 = v108;
      v151[0] = 0;
      v151[528] = 0;
      while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v110, (uint64_t)&v97))
      {
        if (v121 >= (unint64_t)v27 || v26 == -1)
          break;
        if (DIDebugLogsEnabled())
        {
          *(_QWORD *)&v148 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1274:32)]";
          *((_QWORD *)&v148 + 1) = 104;
          LODWORD(v149) = 2;
          di_log::logger<di_log::log_printer<545ul>>::logger(&v136, &v148);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v144, (uint64_t)"sg: ", 4);
          operator<<(&v144);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v136);
          MEMORY[0x2199A89AC](&v145);
        }
        v136 = 0;
        v137 = v27;
        v138 = 2;
        trim_sg_to_interval(&v110, (uint64_t)&v136, (uint64_t)&v148);
        v29 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          if (*(_BYTE *)(v29 + 224))
            v30 = v29 + 40;
          else
            v30 = 0;
        }
        else
        {
          v30 = 0;
        }
        di_asif::details::map_element::zero_range_in_sg(v30, *(di_asif::details::table **)(a1 + 8), (char **)&v148);
        v31 = v149;
        v32 = (v149 & 0x8000000000000000) == 0 || (_DWORD)v149 == 0;
        v33 = v32;
        if (v32)
        {
          v34 = v150;
          if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v110, (const sg_vec_ns::details::sg_vec_iterator *)&v97, v150, v149))
          {
            v123 = v110;
            v124 = v111;
            if (v111)
            {
              v38 = (unint64_t *)&v111->__shared_owners_;
              do
                v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }
            v125[0] = v112[0];
            *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)((char *)v112 + 9);
            v126 = v113;
            v127 = v114;
            v128 = v115;
            v129 = v116;
            v130 = v117;
            v131 = v118;
            v132 = v119;
            if (v119)
            {
              v40 = (unint64_t *)&v119->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            v133 = v120;
            v134 = v121;
            v135 = v122;
            sg_vec_ns::generate_vec_ref((uint64_t)&v123, (uint64_t)&v97, (uint64_t)v34, v31, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v136);
            std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v151, (uint64_t)&v136);
            v42 = v147;
            if (v147)
            {
              v43 = (unint64_t *)&v147->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v45 = v146;
            if (v146)
            {
              v46 = (unint64_t *)&v146->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = v143;
            if (v143)
            {
              v49 = (unint64_t *)&v143->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = v142;
            if (v142)
            {
              v52 = (unint64_t *)&v142->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = v141;
            if (v141)
            {
              v55 = (unint64_t *)&v141->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = v139;
            if (v139)
            {
              v58 = (unint64_t *)&v139->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = v132;
            if (v132)
            {
              v61 = (unint64_t *)&v132->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v63 = v124;
            if (v124)
            {
              v64 = (unint64_t *)&v124->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            sg_vec_ref::begin((sg_vec_ref *)v151, (uint64_t)&v136);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v110, (uint64_t)&v136);
            v66 = v140;
            if (v140)
            {
              v67 = (unint64_t *)&v140->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v69 = v137;
            if (v137)
            {
              v70 = (unint64_t *)&v137->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            sg_vec_ref::end((sg_vec_ref *)v151, (uint64_t)&v136);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v97, (uint64_t)&v136);
            v72 = v140;
            if (v140)
            {
              v73 = (unint64_t *)&v140->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v75 = v137;
            if (v137)
            {
              v76 = (unint64_t *)&v137->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
          }
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v110, v31);
          v26 += v31;
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
        if (!*((_QWORD *)&v148 + 1))
          goto LABEL_42;
        v36 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          if ((v33 & 1) == 0)
            break;
        }
        else
        {
LABEL_42:
          if ((v33 & 1) == 0)
            break;
        }
      }
      std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v151);
      v78 = v106;
      if (v106)
      {
        v79 = (unint64_t *)&v106->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v98;
      if (v98)
      {
        v82 = (unint64_t *)&v98->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = v119;
      if (v119)
      {
        v85 = (unint64_t *)&v119->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = v111;
      if (v111)
      {
        v88 = (unint64_t *)&v111->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v3 += 40;
    }
    while (v3 != v91);
  }
  boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::~vector((void **)(a1 + 16));
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)a1);
  return a1;
}

void sub_212F6D864(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;

  if (!a2)
    _Unwind_Resume(a1);
  v59 = (std::__shared_weak_count *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x508]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  __clang_call_terminate(a1);
}

void **boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::~vector(void **a1)
{
  char *v2;
  char *v3;

  v2 = (char *)a1[1];
  if (v2)
  {
    v3 = (char *)*a1;
    do
    {
      --v2;
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 272));
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 160));
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 112));
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v3);
      v3 += 320;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != *a1)
    operator delete(*a1);
  return a1;
}

unint64_t *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  v3 = (unint64_t *)atomic_load(a2);
  if (!v3)
    goto LABEL_9;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_8;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_7:
    v4 = v5;
    if (!v5)
      goto LABEL_8;
  }
  v7 = (unint64_t *)v3[41];
  if (v7)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[42] = v8;
  }
  if (!ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::wait_for_ready((uint64_t)v3))
  {
    do
      v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      v10 = v3[4];
      v3[4] = -1;
      ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)v3, v10, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::wait_for_ready(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v2 = (unsigned int *)(a1 + 24);
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    v6 = (unint64_t *)(a1 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 344))
      std::__atomic_base<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,false>::wait[abi:ne180100](a1 + 24, 1u, 5u);
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0;
    }
    else
    {
      v11 = atomic_load(v2);
      return v11 == 2;
    }
  }
}

BOOL std::__atomic_base<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,false>::wait[abi:ne180100](uint64_t a1, unsigned int a2, unsigned int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = __PAIR64__(a3, a2);
  v5 = a1;
  v6 = v4;
  return std::__libcpp_thread_poll_with_backoff[abi:ne180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>> &>((uint64_t)&v4, (uint64_t)&v5, 0);
}

BOOL std::__libcpp_thread_poll_with_backoff[abi:ne180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>> &>(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  std::chrono::steady_clock::time_point v6;
  unsigned int v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  int v11;
  std::chrono::steady_clock::time_point v12;

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned int **)a1;
    v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) < 2 || v9 == 5)
      v10 = atomic_load(v8);
    else
      v10 = *v8;
    v11 = *(_DWORD *)(a1 + 8);
    if (v10 != v11)
      break;
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3
        || std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>::operator()[abi:ne180100](a2, v12.__d_.__rep_))
      {
        return v10 != v11;
      }
    }
  }
  return v10 != v11;
}

uint64_t std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__cxx_contention_t v3;
  unsigned int *v4;
  int v5;
  unsigned int v6;

  if (a2 < 64001)
  {
    if (a2 >= 4001)
      sched_yield();
    return 0;
  }
  v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  v4 = *(unsigned int **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) < 2 || v5 == 5)
    v6 = atomic_load(v4);
  else
    v6 = *v4;
  if (v6 == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::assign<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>(uint64_t *a1, const char *a2, uint64_t *a3)
{
  int64_t v4;
  unint64_t v5;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a3 - *(_QWORD *)a2;
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 6);
  if (v5 <= a1[2])
  {
    v11 = *(_QWORD *)a2;
    boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*>((uint64_t)a1, &v11, v5, *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x66666666666667)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    v8 = operator new(v4);
    v9 = (uint64_t *)*a1;
    if (*a1)
    {
      boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(a1);
      if (a1 + 3 != v9)
        operator delete(v9);
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v8;
    v10 = *(_QWORD *)a2;
    v12 = *a3;
    v13 = v10;
    boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>(a1, &v13, &v12);
  }
}

uint64_t *boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2)
  {
    v3 = *result;
    do
    {
      --v2;
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3 + 272);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3 + 160);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3 + 112);
      result = (uint64_t *)std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3);
      v3 += 320;
    }
    while (v2);
  }
  v1[1] = 0;
  return result;
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  v5 = *a1 + 320 * v4;
  v6 = *a2;
  v7 = *a3;
  v8 = v5;
  if (*a2 != *a3)
  {
    do
    {
      sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(v8, v6);
      sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(v8 + 160, v6 + 160);
      v6 += 320;
      v8 += 320;
    }
    while (v6 != v7);
    v4 = a1[1];
  }
  a1[1] = v4 - 0x3333333333333333 * ((v8 - v5) >> 6);
}

void boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*>(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      v13 = *a2;
      v14 = a3;
      do
      {
        --v14;
        sg_vec_ns::details::sg_vec_iterator::operator=(a4, v13);
        sg_vec_ns::details::sg_vec_iterator::operator=(a4 + 160, v13 + 160);
        a4 += 320;
        v13 += 320;
      }
      while (v14);
    }
    if (a5 != a3)
    {
      v15 = a3 - a5;
      do
      {
        std::shared_ptr<char>::~shared_ptr[abi:ne180100](a4 + 272);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100](a4 + 160);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100](a4 + 112);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100](a4);
        a4 += 320;
        v12 = __CFADD__(v15++, 1);
      }
      while (!v12);
    }
  }
  else
  {
    v10 = *a2;
    if (a5)
    {
      v11 = a5;
      do
      {
        --v11;
        sg_vec_ns::details::sg_vec_iterator::operator=(a4, v10);
        sg_vec_ns::details::sg_vec_iterator::operator=(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
      }
      while (v11);
    }
    *a2 = v10;
    if (a3 != a5)
    {
      do
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a4, v10);
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
        v12 = __CFADD__(v9++, 1);
      }
      while (!v12);
    }
  }
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x66666666666667)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(320 * v11);
  boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

__n128 std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 72);
  v4 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v7 = *(_OWORD *)(a2 + 232);
  v8 = *(_OWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 288) = result;
  v10 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v10;
  return result;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0x66666666666666;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x66666666666666 - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0x66666666666666)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;

  v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>((uint64_t)a1, *a1, a4, *a1 + 320 * a1[1], a2, a5, a6);
  if (v10)
  {
    for (i = a1[1]; i; v10 += 320)
    {
      --i;
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10 + 272);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10 + 160);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10 + 112);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v12 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v12;
  a1[2] = a3;
}

void sub_212F6E444(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];

  v11 = a3;
  v16[2] = a1;
  if (a2 != a3)
  {
    v12 = a2;
    do
    {
      std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](a5, v12);
      v12 += 320;
      a5 += 320;
    }
    while (v12 != v11);
  }
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](a5, a7);
  if (v11 != a4)
  {
    v13 = a5 + 320 * a6;
    do
    {
      std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](v13, v11);
      v11 += 320;
      v13 = v14 + 320;
    }
    while (v11 != a4);
  }
  v16[0] = 0;
  v16[1] = 0;
  return boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(v16);
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 272);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 160);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 112);
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
      v3 = a1[1];
      v2 = *a1 + 320;
      *a1 = v2;
    }
    while (v2 != v3);
  }
  return a1;
}

void boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(24 * v11);
  boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0x555555555555555;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x555555555555555 - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0x555555555555555)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  void (***v12)(uint64_t);
  void (**v13)(uint64_t);
  uint64_t v14;

  v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>((uint64_t)a1, *a1, a4, *a1 + 24 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = (void (***)(uint64_t))v10;
      do
      {
        --v11;
        v13 = *v12;
        v12 += 3;
        (*v13)(v10);
        v10 = (uint64_t)v12;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1)
      operator delete((void *)*a1);
  }
  v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_212F6E760(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v12 = a5;
  if (a2 != a3)
  {
    v14 = 0;
    do
    {
      ref::details::ref_cnt_handle::ref_cnt_handle(a5 + v14, a2 + v14);
      v14 += 24;
    }
    while (a2 + v14 != a3);
    v12 = a5 + v14;
  }
  result = ref::details::ref_cnt_handle::ref_cnt_handle(v12, a7);
  if (a3 != a4)
  {
    v16 = 0;
    v17 = v12 + 24 * a6;
    do
    {
      result = ref::details::ref_cnt_handle::ref_cnt_handle(v17 + v16, a3 + v16);
      v16 += 24;
    }
    while (a3 + v16 != a4);
  }
  return result;
}

void sub_212F6E838(_Unwind_Exception *exception_object)
{
  void (***v1)(_QWORD);
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void (**v5)(_QWORD);

  if (v2 != v1)
  {
    v4 = v1;
    do
    {
      v5 = *v4;
      v4 += 3;
      (*v5)(v1);
      v1 = v4;
    }
    while (v4 != v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  void (***v3)(void);
  void (**v4)(void);

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void (****)(void))a1;
    do
    {
      --v2;
      v4 = *v3;
      v3 += 3;
      (*v4)();
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1513ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1513ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1513ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF04A80;
  di_log::logger_buf<di_log::log_printer<1513ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1513ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6ED10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1513ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1513;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1513;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

BOOL ref::ref_cnt::get(ref::ref_cnt *this)
{
  unint64_t v2;
  unint64_t v3;

  while (1)
  {
    v2 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0x8000000000000000) != 0)
    {
      v3 = *(_QWORD *)this;
    }
    else
    {
      do
      {
        v3 = __ldaxr((unint64_t *)this);
        if (v3 == v2)
        {
          if (!__stlxr(v2 + 1, (unint64_t *)this))
            return v2 != -1;
        }
        else
        {
          __clrex();
        }
        v2 = v3;
      }
      while ((v3 & 0x8000000000000000) == 0);
    }
    v2 = v3;
    if (v3 != -1)
      break;
    if ((ref::ref_cnt::wait_fn(this, 0) & 1) == 0)
    {
      v2 = -1;
      return v2 != -1;
    }
  }
  return v2 != -1;
}

uint64_t ref::ref_cnt::wait_fn(ref::ref_cnt *this, const void *a2)
{
  unint64_t v2;
  BOOL v3;
  BOOL v4;
  int v5;
  const void *v7;
  uint64_t tagged_ptr_cond;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  std::condition_variable *v12;
  unint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  std::unique_lock<std::mutex> v17;

  v2 = atomic_load((unint64_t *)this);
  v3 = v2 == 0;
  v4 = v2 != -1;
  if ((_DWORD)a2)
    v4 = v3;
  if (!v4)
  {
    v5 = (int)a2;
    v17.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock((unint64_t)this, a2);
    v17.__owns_ = 1;
    std::mutex::lock(v17.__m_);
    tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)this, v7);
    v9 = atomic_load((unint64_t *)this);
    v10 = v9 == 0;
    v11 = v9 != -1;
    if (v5)
      v11 = v10;
    if (!v11)
    {
      v12 = (std::condition_variable *)tagged_ptr_cond;
      do
      {
        std::condition_variable::wait(v12, &v17);
        v13 = atomic_load((unint64_t *)this);
        v14 = v13 == 0;
        v15 = v13 != -1;
        if (v5)
          v15 = v14;
      }
      while (!v15);
    }
    if (v17.__owns_)
      std::mutex::unlock(v17.__m_);
  }
  return 1;
}

void sub_212F6F0A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t for_each_sg_in_vec<io_result_t (&)(sg_entry const&)>(uint64_t (*a1)(__int128 *), __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = details::for_each_sg_in_vec_internal<io_result_t (&)(sg_entry const&)>(a1, (sg_vec_ns *)&v40, (const sg_vec_ns::details::sg_vec_iterator *)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_212F6F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

unint64_t details::for_each_sg_in_vec_internal<io_result_t (&)(sg_entry const&)>(uint64_t (*a1)(__int128 *), sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7;
  unint64_t v8;
  int64_t v10;
  const sg_vec_ns::details::sg_vec_iterator *v11;
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  _BYTE v25[112];
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  _BYTE v29[248];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  _BYTE v34[544];

  v7 = 0;
  v8 = *((_QWORD *)a3 + 18);
  v34[0] = 0;
  v34[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((_QWORD *)a2 + 18) >= v8 || v7 >= a4)
      break;
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = io_result_t (&)(const sg_entry &)]";
      *((_QWORD *)&v32 + 1) = 119;
      v33 = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v27, &v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"sg: ", 4);
      operator<<(&v30);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v27);
      MEMORY[0x2199A89AC](&v31);
    }
    v27[0] = 0;
    v27[1] = v8;
    v28 = 2;
    trim_sg_to_interval(a2, (uint64_t)v27, (uint64_t)&v32);
    v10 = a1(&v32);
    v12 = v10;
    v13 = v10 >= 0 || (_DWORD)v10 == 0;
    v14 = v13;
    if (v13)
    {
      v15 = (uint64_t)v11;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v11, v10))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v25, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v25, (uint64_t)a3, v15, v12, a4, (sg_vec_ref *)v27);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v34, (uint64_t)v27);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v25);
        sg_vec_ref::begin((sg_vec_ref *)v34, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
        sg_vec_ref::end((sg_vec_ref *)v34, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
      }
      if ((a5 & 1) != 0)
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v12);
      else
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v12);
      v7 += v12;
    }
    else
    {
      if ((int)v10 >= 0)
        v19 = v10;
      else
        v19 = -(int)v10;
      v21 = -v19;
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if ((v14 & 1) == 0)
      goto LABEL_35;
  }
  v21 = v7;
LABEL_35:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v34);
  return v21;
}

void sub_212F6F594(_Unwind_Exception *a1)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x320]);
  _Unwind_Resume(a1);
}

_QWORD *lock_free::bitmap_dynamically_allocated_t::bitmap_dynamically_allocated_t(_QWORD *a1, uint64_t a2, char a3)
{
  unint64_t v5;
  void *v6;

  a1[2] = a2;
  *a1 = &off_24CEFD278;
  v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(a1 + 3, v5);
  v6 = (void *)a1[3];
  a1[8] = v6;
  a1[9] = v5;
  if ((a3 & 1) == 0 && v5)
    bzero(v6, 8 * v5);
  a1[1] = v6;
  return a1;
}

uint64_t *di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(uint64_t *a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::bad_alloc *exception;
  std::bad_alloc *v8;
  _QWORD v9[3];
  _QWORD *v10;
  void *v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[4] = 0;
  v3 = malloc_type_valloc(8 * a2, 0x100004000313F17uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v8 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v8, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v9[0] = &off_24CF04B00;
  v10 = v9;
  v11 = v3;
  std::__function::__value_func<void ()(unsigned long long *)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v9);
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::operator=[abi:ne180100](a1, (uint64_t *)&v11);
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v11);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
    goto LABEL_6;
  }
  if (v10)
  {
    v5 = 5;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_212F6F778(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF04B00;
  return result;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF04B00;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(unsigned long long *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<2061ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<2061ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<2061ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF04D30;
  di_log::logger_buf<di_log::log_printer<2061ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2061ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F6FC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<2061ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 2061;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 2061;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<2071ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<2071ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<2071ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF04F50;
  di_log::logger_buf<di_log::log_printer<2071ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2071ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F70278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<2071ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 2071;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 2071;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<2311ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<2311ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<2311ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF05170;
  di_log::logger_buf<di_log::log_printer<2311ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2311ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F70864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<2311ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 2311;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 2311;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<2321ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<2321ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<2321ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF05390;
  di_log::logger_buf<di_log::log_printer<2321ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2321ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F70E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<2321ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 2321;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 2321;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *std::vector<ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_212F710DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_212F71150(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<158ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<158ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF05458;
  a1[45] = &unk_24CF05558;
  a1[46] = &unk_24CF05580;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF05458;
  a1[45] = &unk_24CF054E0;
  a1[46] = &unk_24CF05508;
  return a1;
}

void sub_212F711F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<158ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF055F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F712BC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF055F0;
  di_log::logger_buf<di_log::log_printer<158ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<158ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<158ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<158ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<158ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F716B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<158ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 158;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 158;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void DiskImagesHeaderSizeException::~DiskImagesHeaderSizeException(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2199A8A18);
}

const char *DiskImagesHeaderSizeException::what(DiskImagesHeaderSizeException *this)
{
  return "File too small.";
}

void DiskImagesHeaderSizeException::reason(DiskImagesHeaderSizeException *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;
  void *v14[2];
  unsigned __int8 v15;

  v3 = (char *)(*(uint64_t (**)(DiskImagesHeaderSizeException *))(*(_QWORD *)this + 16))(this);
  std::string::basic_string[abi:ne180100]<0>(v14, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  if ((v15 & 0x80u) == 0)
    v4 = v14;
  else
    v4 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v5 = v15;
  else
    v5 = (uint64_t)v14[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" header size ", 13);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", but file size only ", 21);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11, a2);
  v9[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10 = v8;
  v11[0] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](&v13);
  if ((char)v15 < 0)
    operator delete(v14[0]);
}

void std::vector<sg_entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 48);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<2831ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<2831ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<2831ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF05840;
  di_log::logger_buf<di_log::log_printer<2831ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2831ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F71E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<2831ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 2831;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 2831;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<2828ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<2828ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<2828ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF05A60;
  di_log::logger_buf<di_log::log_printer<2828ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2828ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F72430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<2828ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 2828;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 2828;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void std::__shared_ptr_pointer<char *,make_shared_buf(unsigned long)::{lambda(char *)#1},std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_pointer<char *,make_shared_buf(unsigned long)::{lambda(char *)#1},std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<char *,make_shared_buf(unsigned long)::{lambda(char *)#1},std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<sg_entry>::__emplace_back_slow_path<std::shared_ptr<char> const,Wrapper<unsigned long long,std::integral_constant<BOOL,true>,be_type> const&,unsigned long long &,Wrapper<unsigned long long,std::integral_constant<BOOL,true>,be_type> const&>(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[5];

  v6 = *a1;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v13 = (uint64_t)(a1 + 2);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8)
    v8 = 2 * v14;
  if (v14 >= 0x2AAAAAAAAAAAAAALL)
    v15 = 0x555555555555555;
  else
    v15 = v8;
  v27[4] = a1 + 2;
  if (v15)
    v16 = (char *)std::allocator<sg_entry>::allocate_at_least[abi:ne180100](v13, v15);
  else
    v16 = 0;
  v17 = &v16[48 * v7];
  v27[0] = v16;
  v27[1] = v17;
  v27[3] = &v16[48 * v15];
  v18 = *a3;
  v19 = *a4;
  v20 = *a5;
  *(_QWORD *)v17 = *a2;
  v21 = a2[1];
  *((_QWORD *)v17 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = &v16[48 * v7];
  *((_QWORD *)v24 + 2) = v18;
  *((_QWORD *)v24 + 3) = v19;
  *((_QWORD *)v24 + 4) = v20;
  v24[40] = 0;
  v27[2] = v17 + 48;
  std::vector<sg_entry>::__swap_out_circular_buffer(a1, v27);
  v25 = a1[1];
  std::__split_buffer<sg_entry>::~__split_buffer((uint64_t)v27);
  return v25;
}

void sub_212F72810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<sg_entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<sg_entry>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v6 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 25) = *(_OWORD *)(v2 + 25);
    *(_OWORD *)(v4 + 16) = v6;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::allocator<sg_entry>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__split_buffer<sg_entry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

di_asif::meta_header *std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long>(di_asif::meta_header **a1, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t *a4)
{
  di_asif::meta_header *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  di_asif::meta_header *v17;
  di_asif::meta_header *v18;
  di_asif::meta_header *v19;
  di_asif::meta_header *v20;
  uint64_t v21;
  char *v22;

  v5 = *a1;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v5) >> 2);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x492492492492492)
    v13 = 0x924924924924924;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)std::allocator<di_asif::meta_header>::allocate_at_least[abi:ne180100](v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = di_asif::meta_header::meta_header((di_asif::meta_header *)&v14[28 * v6], a2, a3, *a4);
  v18 = (di_asif::meta_header *)((char *)v17 + 28);
  v20 = *a1;
  v19 = a1[1];
  if (v19 != *a1)
  {
    v21 = 0;
    do
    {
      v22 = (char *)v17 + v21;
      *(_QWORD *)(v22 - 28) = 0x16174656DLL;
      *((_DWORD *)v22 - 5) = 512;
      *((_OWORD *)v22 - 1) = *(_OWORD *)((char *)v19 + v21 - 16);
      v21 -= 28;
    }
    while ((di_asif::meta_header *)((char *)v19 + v21) != v20);
    v19 = *a1;
    v17 = (di_asif::meta_header *)((char *)v17 + v21);
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (di_asif::meta_header *)&v14[28 * v16];
  if (v19)
    operator delete(v19);
  return v18;
}

void sub_212F72A7C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::allocator<di_asif::meta_header>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(28 * a2);
}

di_asif::meta_header *std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long const&>(di_asif::meta_header **a1, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t *a4)
{
  di_asif::meta_header *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  di_asif::meta_header *v17;
  di_asif::meta_header *v18;
  di_asif::meta_header *v19;
  di_asif::meta_header *v20;
  uint64_t v21;
  char *v22;

  v5 = *a1;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v5) >> 2);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x492492492492492)
    v13 = 0x924924924924924;
  else
    v13 = v7;
  if (v13)
  {
    v14 = (char *)std::allocator<di_asif::meta_header>::allocate_at_least[abi:ne180100](v11, v13);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = di_asif::meta_header::meta_header((di_asif::meta_header *)&v14[28 * v6], a2, a3, *a4);
  v18 = (di_asif::meta_header *)((char *)v17 + 28);
  v20 = *a1;
  v19 = a1[1];
  if (v19 != *a1)
  {
    v21 = 0;
    do
    {
      v22 = (char *)v17 + v21;
      *(_QWORD *)(v22 - 28) = 0x16174656DLL;
      *((_DWORD *)v22 - 5) = 512;
      *((_OWORD *)v22 - 1) = *(_OWORD *)((char *)v19 + v21 - 16);
      v21 -= 28;
    }
    while ((di_asif::meta_header *)((char *)v19 + v21) != v20);
    v19 = *a1;
    v17 = (di_asif::meta_header *)((char *)v17 + v21);
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (di_asif::meta_header *)&v14[28 * v16];
  if (v19)
    operator delete(v19);
  return v18;
}

void sub_212F72C38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF05B40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF05B40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), a2, 0);
}

uint64_t std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::target_type()
{
}

_DWORD *di_asif::header_flags::header_flags(_DWORD *this, int a2)
{
  unsigned int v2;
  _QWORD *exception;

  *this = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_24CEEDAA0;
    exception[1] = "header_flags";
    *((_DWORD *)exception + 8) = v2;
  }
  return this;
}

_BYTE *boost::uuids::to_chars<char *>(uint64_t a1, _BYTE *a2)
{
  unint64_t i;
  _BYTE *v3;
  char v4;
  unsigned int v5;
  char v6;

  for (i = 0; i != 16; ++i)
  {
    v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u)
      v4 = 87;
    else
      v4 = 48;
    *a2 = v4 + (*(_BYTE *)(a1 + i) >> 4);
    a2 += 2;
    v5 = *(_BYTE *)(a1 + i) & 0xF;
    if (v5 >= 0xA)
      v6 = 87;
    else
      v6 = 48;
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

unint64_t *ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate@<X0>(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t *min;
  uint64_t *v9;
  char v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  ref::details **v17;

  v16 = 0;
  v17 = a2;
  ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 344) || v14 && *(_BYTE *)(v14 + 344))
  {
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v14);
  }
  if (*(_BYTE *)(a1 + 736) && v15 != (_QWORD *)(a1 + 760))
  {
    do
    {
      ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate_from_empty_pool(a1, (uint64_t)a2, &v12);
      v16 = v12;
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v14, &v13);
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 344))
          break;
      }
      min = (unint64_t *)ref::Allocator<di_asif::details::map_element,unsigned long long>::extract_min((_QWORD *)a1);
      if (min)
      {
        v16 = min;
        ref::Allocator<di_asif::details::map_element,unsigned long long>::insert_elem(a1, min, (uint64_t)a2, (unint64_t *)&v12);
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v14, (unint64_t *)&v12);
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v12);
        break;
      }
    }
    while (*(_BYTE *)(a1 + 736));
    std::mutex::lock((std::mutex *)(a1 + 776));
    v9 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *&>((uint64_t **)(a1 + 752), v15, (unint64_t *)&v17, (uint64_t *)&v17, (uint64_t *)&v16);
    if (!v10)
      v9[5] = (uint64_t)v16;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
    std::mutex::unlock((std::mutex *)(a1 + 776));
    ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
    *a4 = 0;
    do
      v7 = __ldaxr(&v14);
    while (__stlxr(0, &v14));
    goto LABEL_21;
  }
  *a4 = 0;
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v14);
}

void sub_212F72FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)va);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  std::mutex *v7;
  _QWORD *v8;
  ref::details *v9;
  unint64_t *v10;
  ref::details **v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  const void *v25;
  unint64_t v26;
  const void *v27;
  std::condition_variable *tagged_ptr_cond;
  unint64_t v29;
  _QWORD *v30;
  ref::details **v31;
  _QWORD *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  ref::details *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  std::condition_variable *v46;
  uint64_t **v47;
  std::unique_lock<std::mutex> v48;
  unint64_t v49;
  ref::details *v50;
  std::unique_lock<std::mutex> __lk;
  ref::details **v52;
  ref::details **v53;
  unint64_t *v54;
  ref::details ***v55;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v56;

  v52 = a2;
  v7 = (std::mutex *)(a1 + 776);
  v8 = (_QWORD *)(a1 + 760);
  v9 = (ref::details *)(a1 + 1008);
  v10 = (unint64_t *)(a1 + 592);
  v45 = (unint64_t *)(a1 + 104);
  v46 = (std::condition_variable *)(a1 + 840);
  v47 = (uint64_t **)(a1 + 752);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      v11 = v52;
    }
    else
    {
      v16 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_20;
      v11 = v52;
      v17 = v8;
      do
      {
        v18 = v16[4];
        v19 = v18 >= (unint64_t)v52;
        if (v18 >= (unint64_t)v52)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v8 || (unint64_t)v52 < v17[4] || (ref::details *)v17[5] == v9)
      {
LABEL_20:
        v53 = 0;
        *a4 = 0;
        do
          v21 = __ldaxr((unint64_t *)&v53);
        while (__stlxr(0, (unint64_t *)&v53));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v53);
        goto LABEL_23;
      }
    }
    v53 = v11;
    v54 = (unint64_t *)v9;
    v12 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>(v47, (unint64_t *)&v53, (uint64_t *)&v53);
    v13 = v12;
    if (v14)
    {
      v53 = 0;
      *a4 = 0;
      do
        v15 = __ldaxr((unint64_t *)&v53);
      while (__stlxr(0, (unint64_t *)&v53));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v53);
LABEL_23:
      v22 = 1;
      goto LABEL_24;
    }
    v50 = (ref::details *)v12[5];
    if (v50 == v9)
    {
      v30 = (_QWORD *)*v8;
      if (*v8)
      {
        v31 = v52;
        v32 = v8;
        while (1)
        {
          v33 = v30[4];
          v34 = v33 >= (unint64_t)v31;
          if (v33 >= (unint64_t)v31)
            v35 = v30;
          else
            v35 = v30 + 1;
          if (v34)
            v32 = v30;
          v30 = (_QWORD *)*v35;
          if (!*v35)
          {
            if (v32 == v8)
              break;
            if ((unint64_t)v31 < v32[4])
              break;
            v36 = (ref::details *)v32[5];
            if (v36 != v9)
            {
              v37 = *((_QWORD *)v36 + 45);
              if (v37)
              {
                if (!*(_BYTE *)(v37 + 344))
                  break;
              }
            }
            if (!*(_BYTE *)(a1 + 736))
              break;
            std::condition_variable::wait(v46, &__lk);
            v30 = (_QWORD *)*v8;
            v32 = v8;
            if (!*v8)
              break;
          }
        }
      }
      v22 = 0;
      goto LABEL_24;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(&v49, (unint64_t *)v50 + 45);
    if (v49 && !*(_BYTE *)(v49 + 344))
    {
      v23 = (uint64_t)v52;
      if (*(ref::details ***)(v49 + 32) == v52)
      {
        *a4 = 0;
        do
          v39 = __ldaxr(&v49);
        while (__stlxr(0, &v49));
        atomic_store(v39, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }
      if (*(_QWORD *)(v49 + 32) == -1)
      {
        v24 = v45;
        if ((a3 & 1) == 0)
        {
          v53 = 0;
          *a4 = 0;
          do
            v38 = __ldaxr((unint64_t *)&v53);
          while (__stlxr(0, (unint64_t *)&v53));
          goto LABEL_83;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (!a3)
      {
        v53 = 0;
        *a4 = 0;
        do
          v38 = __ldaxr((unint64_t *)&v53);
        while (__stlxr(0, (unint64_t *)&v53));
        goto LABEL_83;
      }
      v23 = (uint64_t)v52;
    }
    v24 = v45;
LABEL_35:
    if (ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, 0, v23, 1u) != -1)
    {
      do
        v26 = __ldaxr(v10);
      while (__stlxr(v26 + 1, v10));
      v48.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock((unint64_t)v50, v25);
      v48.__owns_ = 1;
      std::mutex::lock(v48.__m_);
      tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond((unint64_t)v50, v27);
      v56 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      v53 = &v50;
      v54 = &v49;
      v55 = &v52;
      std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(tagged_ptr_cond, &v48, &v56, (uint64_t)&v53);
      do
        v29 = __ldaxr(v10);
      while (__stlxr(v29 - 1, v10));
      if (v48.__owns_)
        std::mutex::unlock(v48.__m_);
      v22 = 3;
      goto LABEL_85;
    }
    v53 = 0;
    v40 = atomic_load(v24);
    if (!v40)
      goto LABEL_81;
    while (1)
    {
      v41 = __ldaxr(v24);
      if (v41 != v40)
      {
        __clrex();
        goto LABEL_71;
      }
      if (!__stlxr(v40 + 1, v24))
        break;
LABEL_71:
      v40 = v41;
      if (!v41)
        goto LABEL_81;
    }
    v42 = *(unint64_t **)(a1 + 432);
    v40 = (unint64_t)v24;
    if (v42)
    {
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      *(_QWORD *)(a1 + 440) = v43;
      v40 = (unint64_t)v24;
    }
LABEL_81:
    atomic_store(v40, (unint64_t *)&v53);
    *a4 = 0;
    do
      v38 = __ldaxr((unint64_t *)&v53);
    while (__stlxr(0, (unint64_t *)&v53));
LABEL_83:
    atomic_store(v38, a4);
    a4[1] = (unint64_t)v8;
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v53);
LABEL_84:
    v22 = 1;
LABEL_85:
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v49);
LABEL_24:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 736))
      {
        v53 = 0;
        *a4 = 0;
        do
          v44 = __ldaxr((unint64_t *)&v53);
        while (__stlxr(0, (unint64_t *)&v53));
        atomic_store(v44, a4);
        a4[1] = (unint64_t)v8;
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)&v53);
        return;
      }
      continue;
    }
    break;
  }
}

void sub_212F73444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&a15);
  if (a18)
    std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

unint64_t *ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate_from_empty_pool@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13[5];

  v12 = 0;
  v6 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  v7 = *(_QWORD *)(a1 + 512);
  if (v7)
  {
    v8 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + ((*(_QWORD *)(a1 + 504) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(_QWORD *)(a1 + 504) & 0x1FFLL));
    ++*(_QWORD *)(a1 + 504);
    *(_QWORD *)(a1 + 512) = v7 - 1;
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100](a1 + 472, 1);
    ref::Allocator<di_asif::details::map_element,unsigned long long>::insert_elem(a1, v8, a2, v13);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v12, v13);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(v13);
  }
  else
  {
    v8 = 0;
  }
  std::mutex::unlock(v6);
  v9 = atomic_load((unint64_t *)(a1 + 608));
  if (v9 + v7 >= *(_QWORD *)(a1 + 464))
  {
    ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
  }
  else
  {
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 0x40000000;
    v13[2] = (unint64_t)___ZN3ref9AllocatorIN7di_asif7details11map_elementEyE9evict_lruEv_block_invoke;
    v13[3] = (unint64_t)&__block_descriptor_tmp_5;
    v13[4] = a1;
    gcd::gcd_queue::async((dispatch_queue_t *)(a1 + 744), v13);
  }
  *a3 = v8;
  a3[1] = 0;
  do
    v10 = __ldaxr(&v12);
  while (__stlxr(0, &v12));
  atomic_store(v10, (unint64_t *)a3 + 1);
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v12);
}

void sub_212F735F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&a9);
  _Unwind_Resume(a1);
}

unint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::extract_min(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = atomic_load(a1 + 75);
  v2 = a1[57];
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = a1[73];
    v7 = *(_QWORD *)(v6 + 8 * v3);
    if (v7 && v1 - *(_QWORD *)(v7 + 344) != -1)
    {
      v5 = *(_QWORD *)(v6 + 8 * v3);
      v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5)
    return 0;
  v8 = (unint64_t *)(a1[73] + 8 * v4);
  do
  {
    v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0;
    }
  }
  while (__stlxr(0, v8));
  if ((ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
    return 0;
  return v5;
}

unint64_t *ref::Allocator<di_asif::details::map_element,unsigned long long>::insert_elem@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v17;

  ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::mark_used((uint64_t)a2, a3);
  v7 = a2 + 1;
  v17 = 0;
  v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_11;
  }
  while (1)
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v8 + 1, v7))
      break;
LABEL_6:
    v8 = v9;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)a2[42];
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[43] = v11;
  }
LABEL_11:
  atomic_store((unint64_t)v7, &v17);
  if (*(_QWORD *)(a1 + 456))
  {
    v12 = 0;
    while (2)
    {
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0;
          do
            v15 = __ldaxr(&v17);
          while (__stlxr(0, &v17));
          atomic_store(v15, a4);
          return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v17);
        }
      }
      __clrex();
      if (*(_QWORD *)(a1 + 456) > (unint64_t)++v12)
        continue;
      break;
    }
  }
  *a4 = 0;
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v17);
}

uint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  std::mutex *tagged_ptr_lock;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  std::mutex *v20;

  if (!*(_QWORD *)(a1 + 968))
    return 0;
  v20 = (std::mutex *)(a1 + 888);
  std::mutex::lock((std::mutex *)(a1 + 888));
  if (*(_QWORD *)(a1 + 968))
  {
    v8 = *(uint64_t **)(a1 + 960);
    if (v8 == (uint64_t *)(a1 + 952))
    {
      v11 = 1;
    }
    else
    {
      v9 = a4;
      if (a2)
        v10 = 6;
      else
        v10 = 4;
      v11 = 1;
      do
      {
        v12 = v8[2];
        if ((ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val(v12 + 8, v8[3], v10) | a2) == 1)
        {
          tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(v12, v13);
          std::mutex::lock(tagged_ptr_lock);
          v15 = (unsigned int *)(v12 + 368);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 & 0xFFFFFFFB, v15));
          std::mutex::unlock(tagged_ptr_lock);
          v17 = *v8;
          v18 = (uint64_t *)v8[1];
          *(_QWORD *)(v17 + 8) = v18;
          *(_QWORD *)v8[1] = v17;
          --*(_QWORD *)(a1 + 968);
          operator delete(v8);
          v8 = v18;
        }
        else
        {
          if (!v9 || v8[3] == a3)
            v11 = 0xFFFFFFFFLL;
          v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 952));
    }
  }
  else
  {
    v11 = 0;
  }
  std::mutex::unlock(v20);
  return v11;
}

void sub_212F73938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

unint64_t *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2, int a3)
{
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = a2;
  *a1 = 0;
  if (!a2)
    goto LABEL_9;
  v5 = atomic_load(a2);
  if (!v5)
    goto LABEL_8;
  while (1)
  {
    v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v5 + 1, a2))
      break;
LABEL_7:
    v5 = v6;
    if (!v6)
      goto LABEL_8;
  }
  v8 = (unint64_t *)a2[41];
  if (v8)
  {
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[42] = v9;
  }
  if (a3 && !ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::wait_for_ready((uint64_t)a2))
  {
    do
      v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      v11 = v3[4];
      v3[4] = -1;
      ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)v3, v11, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::steady_clock::time_point v10;
  std::chrono::system_clock::time_point v11;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13;
  uint64_t v14;

  do
  {
    if ((*(_DWORD *)(**(_QWORD **)a4 + 368) & 1) != 0)
      return 1;
    v8 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)v8)
    {
      if (!*(_BYTE *)(*(_QWORD *)v8 + 344) && *(_QWORD *)(*(_QWORD *)v8 + 32) == **(_QWORD **)(a4 + 16))
        return 1;
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(_QWORD **)a4 + 368) & 1) != 0)
    return 1;
  v14 = *(_QWORD *)(a4 + 8);
  return *(_QWORD *)v14
      && !*(_BYTE *)(*(_QWORD *)v14 + 344)
      && *(_QWORD *)(*(_QWORD *)v14 + 32) == **(_QWORD **)(a4 + 16);
}

uint64_t ___ZN3ref9AllocatorIN7di_asif7details11map_elementEyE9evict_lruEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  unint64_t min;

  v1 = *(_QWORD **)(a1 + 32);
  min = ref::Allocator<di_asif::details::map_element,unsigned long long>::extract_min(v1);
  if (min)
    ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool((uint64_t)v1, min);
  return ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list((uint64_t)v1, 0, 0, 0);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::push_back((_QWORD *)(a1 + 472), &v4);
  std::mutex::unlock(v3);
}

void sub_212F73CEC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_212F7404C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  char v22;
  std::condition_variable *v23;
  uint64_t v24;
  char v25;
  const void *v26;
  std::condition_variable *tagged_ptr_cond;
  std::chrono::system_clock::time_point v28;
  unsigned int v29;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v35;
  char v36;
  _BYTE v37[7];
  uint64_t v38;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v39;
  std::unique_lock<std::mutex> __lk;
  _BYTE v41[7];

  v8 = a3 & 0x100;
  v9 = (a3 >> 8) & 1;
  v10 = (unint64_t *)(a1 + 608);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    v12 = (unint64_t *)(a1 + 592);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(a2 + 368);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)(a2 + 360));
  if (a4)
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(a4);
  if ((a3 & 1) != 0)
  {
    v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0)
          break;
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 520));
          v18 = *(_QWORD *)(a1 + 512);
          std::mutex::unlock((std::mutex *)(a1 + 520));
          if (v18)
            break;
        }
        if (ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, v17, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v19);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v26);
          v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v38 = a1;
          v39 = v28.__d_.__rep_ + 200000;
          v35 = a2;
          v36 = v9;
          *(_DWORD *)v37 = *(_DWORD *)v41;
          *(_DWORD *)&v37[3] = *(_DWORD *)&v41[3];
          std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> *)::{lambda(void)#1}>(tagged_ptr_cond, &__lk, &v39, (uint64_t)&v35);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v19);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v21 = ref::details::_get_tagged_ptr_cond(a2, v20);
          v22 = atomic_load(v14);
          if ((v22 & 4) == 0)
          {
            v23 = (std::condition_variable *)v21;
            do
            {
              if ((*v14 & 1) != 0)
                break;
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 520));
                v24 = *(_QWORD *)(a1 + 512);
                std::mutex::unlock((std::mutex *)(a1 + 520));
                if (v24)
                  break;
              }
              std::condition_variable::wait(v23, &__lk);
              v25 = atomic_load(v14);
            }
            while ((v25 & 4) == 0);
          }
        }
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        v29 = *v14;
        if (!v8 || (v29 & 1) != 0)
        {
          if ((v29 & 1) != 0)
            break;
        }
        else if (*(_QWORD *)(a1 + 512))
        {
          break;
        }
        v30 = atomic_load(v14);
      }
      while ((v30 & 4) == 0);
    }
    v31 = (unint64_t *)(a1 + 592);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
  }
  do
    v33 = __ldaxr(v14);
  while (__stlxr(v33 & 0xFFFFFFFD, v14));
  return v33 & 1;
}

void sub_212F742C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> *)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  std::mutex *v10;
  uint64_t v11;
  std::chrono::system_clock::time_point v12;
  uint64_t v13;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14;
  uint64_t v15;
  char v16;
  _BOOL8 v17;

  do
  {
    v8 = *(_QWORD *)(a4 + 16);
    v9 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 368));
    if ((v9 & 4) != 0)
      return 1;
    if ((*(_DWORD *)(*(_QWORD *)a4 + 368) & 1) != 0)
      return 1;
    if (*(_BYTE *)(a4 + 8))
    {
      v10 = (std::mutex *)(v8 + 520);
      std::mutex::lock((std::mutex *)(v8 + 520));
      v11 = *(_QWORD *)(v8 + 512);
      std::mutex::unlock(v10);
      if (v11)
        return 1;
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v13 = *a3;
    if (*a3 <= v12.__d_.__rep_)
      break;
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 368));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(_QWORD *)a4 + 368) & 1) != 0)
    return 1;
  if (!*(_BYTE *)(a4 + 8))
    return 0;
  std::mutex::lock((std::mutex *)(v15 + 520));
  v17 = *(_QWORD *)(v15 + 512) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 520));
  return v17;
}

unint64_t *ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::mark_used(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  atomic_store(0, (unsigned int *)(a1 + 368));
  v3 = (unint64_t *)(a1 + 8);
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::init(a1 + 8, a2);
  v12 = 0;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_11;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_6:
    v4 = v5;
    if (!v5)
      goto LABEL_11;
  }
  v6 = *(unint64_t **)(a1 + 336);
  v4 = (unint64_t)v3;
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(_QWORD *)(a1 + 344) = v7;
    v4 = (unint64_t)v3;
  }
LABEL_11:
  atomic_store(v4, &v12);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((unint64_t *)(a1 + 360), &v12);
  result = ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v12);
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = -1;
    return (unint64_t *)ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)v3, v11, 1u);
  }
  return result;
}

uint64_t *ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::init(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 344) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  result = std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  v4 = *(unint64_t **)(a1 + 328);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(_QWORD *)(a1 + 336) = v5;
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8 = (uint64_t **)std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__find_equal<unsigned long long>(a1, a2, &v14, &v13, a3);
  v9 = *v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = (uint64_t *)operator new(0x30uLL);
    v11 = *a5;
    v9[4] = *a4;
    v9[5] = v11;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v14, v10, v9);
  }
  return v9;
}

_QWORD *std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__find_equal<unsigned long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *di_utils::fixed_vector_t<di_asif::details::table_entry>::fixed_vector_t(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  _QWORD *v7;

  v4 = a2;
  result = di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(a1, a2);
  result[5] = *result;
  result[6] = v4;
  if (v4 && a3)
  {
    v6 = 0;
    do
    {
      v7 = (_QWORD *)(*result + v6);
      *v7 = 0;
      v7[1] = 0;
      v6 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(uint64_t *a1, uint64_t a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::bad_alloc *exception;
  std::bad_alloc *v8;
  _QWORD v9[3];
  _QWORD *v10;
  void *v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[4] = 0;
  v3 = malloc_type_valloc(16 * a2, 0x1000040451B5BE8uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v8 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v8, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v9[0] = &off_24CF05BF0;
  v10 = v9;
  v11 = v3;
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v9);
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::operator=[abi:ne180100](a1, (uint64_t *)&v11);
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v11);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
    goto LABEL_6;
  }
  if (v10)
  {
    v5 = 5;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_212F74948(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF05BF0;
  return result;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF05BF0;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

uint64_t std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(di_asif::details::table_entry *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::deque<unsigned long long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_212F74D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>(uint64_t a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5)
{
  di_asif::details::map_element *v10;

  *(_QWORD *)(a1 + 336) = **(_QWORD **)(a1 + 328);
  v10 = (di_asif::details::map_element *)(a1 + 40);
  std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  di_asif::details::map_element::map_element(v10, a2, a3, *a4, *a5, 0);
  *(_BYTE *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(a1);
}

void sub_212F74E40(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 344) = 1;
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_212F74E64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(uint64_t result)
{
  if (atomic_load((unint64_t *)(result + 8)))
    return MEMORY[0x2199A88E0](result + 24);
  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>(uint64_t a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  di_asif::details::map_element *v12;

  *(_QWORD *)(a1 + 336) = **(_QWORD **)(a1 + 328);
  v12 = (di_asif::details::map_element *)(a1 + 40);
  std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  di_asif::details::map_element::map_element(v12, a2, a3, *a4, *a5, *a6);
  *(_BYTE *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(a1);
}

void sub_212F74F34(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 344) = 1;
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_212F74F58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF02C40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F74FD4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF02E60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F75050(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03080;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F750CC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *ref::Allocator<di_asif::details::table,unsigned long long>::~Allocator(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  *(_BYTE *)(a1 + 912) = 0;
  if (*(_QWORD *)(a1 + 632))
  {
    v3 = 0;
    do
    {
      v4 = (unint64_t *)(*(_QWORD *)(a1 + 760) + 8 * v3);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(0, v4));
      if (v5)
      {
        v1 = v1 & 0xFFFFFFFFFF000000 | 0x10001;
        ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(a1, v5, v1, 0);
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)(v5 + 536));
        ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk((_QWORD *)(v5 + 8));
        MEMORY[0x2199A8A18](v5, 0x10E0C4041ADD984);
      }
      ++v3;
    }
    while (*(_QWORD *)(a1 + 632) > v3);
  }
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(a1 + 920), &__block_literal_global_7);
  v6 = *(_QWORD *)(a1 + 760);
  if (v6)
    MEMORY[0x2199A8A00](v6, 0x20C8093837F09);
  std::mutex::lock((std::mutex *)(a1 + 696));
  v7 = *(_QWORD *)(a1 + 656);
  if (*(_QWORD *)(a1 + 664) != v7)
  {
    v8 = *(_QWORD *)(a1 + 680);
    v9 = (_QWORD *)(v7 + 8 * (v8 >> 9));
    v10 = (uint64_t *)(*v9 + 8 * (v8 & 0x1FF));
    v11 = *(_QWORD *)(v7 + (((*(_QWORD *)(a1 + 688) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a1 + 688) + v8) & 0x1FF);
    while (v10 != (uint64_t *)v11)
    {
      v12 = *v10;
      if (*v10)
      {
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)(v12 + 536));
        ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk((_QWORD *)(v12 + 8));
        MEMORY[0x2199A8A18](v12, 0x10E0C4041ADD984);
      }
      if ((uint64_t *)((char *)++v10 - *v9) == (uint64_t *)4096)
      {
        v13 = (uint64_t *)v9[1];
        ++v9;
        v10 = v13;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 696));
  v14 = *(_QWORD **)(a1 + 1792);
  if (v14 == (_QWORD *)(a1 + 1768))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 1768);
  }
  else
  {
    if (!v14)
      goto LABEL_22;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_22:
  v16 = *(_QWORD **)(a1 + 1760);
  if (v16 == (_QWORD *)(a1 + 1736))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 1736);
  }
  else
  {
    if (!v16)
      goto LABEL_27;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)(a1 + 1720));
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk((_QWORD *)(a1 + 1192));
  v18 = *(_QWORD **)(a1 + 1176);
  if (v18 == (_QWORD *)(a1 + 1152))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 1152);
    goto LABEL_31;
  }
  if (v18)
  {
    v19 = 5;
LABEL_31:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear((_QWORD *)(a1 + 1128));
  std::mutex::~mutex((std::mutex *)(a1 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1 + 928, *(_QWORD **)(a1 + 936));
  gcd::gcd_group::~gcd_group((NSObject **)(a1 + 920));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 864));
  std::mutex::~mutex((std::mutex *)(a1 + 800));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((_QWORD *)(a1 + 648));
  return ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((_QWORD *)a1);
}

uint64_t ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  char v22;
  std::condition_variable *v23;
  uint64_t v24;
  char v25;
  const void *v26;
  std::condition_variable *tagged_ptr_cond;
  std::chrono::system_clock::time_point v28;
  unsigned int v29;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v35;
  char v36;
  _BYTE v37[7];
  uint64_t v38;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v39;
  std::unique_lock<std::mutex> __lk;
  _BYTE v41[7];

  v8 = a3 & 0x100;
  v9 = (a3 >> 8) & 1;
  v10 = (unint64_t *)(a1 + 784);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    v12 = (unint64_t *)(a1 + 768);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(a2 + 544);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)(a2 + 536));
  if (a4)
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(a4);
  if ((a3 & 1) != 0)
  {
    v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0)
          break;
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 696));
          v18 = *(_QWORD *)(a1 + 688);
          std::mutex::unlock((std::mutex *)(a1 + 696));
          if (v18)
            break;
        }
        if (ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, v17, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v19);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v26);
          v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v38 = a1;
          v39 = v28.__d_.__rep_ + 200000;
          v35 = a2;
          v36 = v9;
          *(_DWORD *)v37 = *(_DWORD *)v41;
          *(_DWORD *)&v37[3] = *(_DWORD *)&v41[3];
          std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::table,unsigned long long> *)::{lambda(void)#1}>(tagged_ptr_cond, &__lk, &v39, (uint64_t)&v35);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v19);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          v21 = ref::details::_get_tagged_ptr_cond(a2, v20);
          v22 = atomic_load(v14);
          if ((v22 & 4) == 0)
          {
            v23 = (std::condition_variable *)v21;
            do
            {
              if ((*v14 & 1) != 0)
                break;
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 696));
                v24 = *(_QWORD *)(a1 + 688);
                std::mutex::unlock((std::mutex *)(a1 + 696));
                if (v24)
                  break;
              }
              std::condition_variable::wait(v23, &__lk);
              v25 = atomic_load(v14);
            }
            while ((v25 & 4) == 0);
          }
        }
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        v29 = *v14;
        if (!v8 || (v29 & 1) != 0)
        {
          if ((v29 & 1) != 0)
            break;
        }
        else if (*(_QWORD *)(a1 + 688))
        {
          break;
        }
        v30 = atomic_load(v14);
      }
      while ((v30 & 4) == 0);
    }
    v31 = (unint64_t *)(a1 + 768);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
  }
  do
    v33 = __ldaxr(v14);
  while (__stlxr(v33 & 0xFFFFFFFD, v14));
  return v33 & 1;
}

void sub_212F755B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::~tagged_allocated_type(uint64_t a1)
{
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)(a1 + 536));
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  std::mutex *tagged_ptr_lock;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  std::mutex *v20;

  if (!*(_QWORD *)(a1 + 1144))
    return 0;
  v20 = (std::mutex *)(a1 + 1064);
  std::mutex::lock((std::mutex *)(a1 + 1064));
  if (*(_QWORD *)(a1 + 1144))
  {
    v8 = *(uint64_t **)(a1 + 1136);
    if (v8 == (uint64_t *)(a1 + 1128))
    {
      v11 = 1;
    }
    else
    {
      v9 = a4;
      if (a2)
        v10 = 6;
      else
        v10 = 4;
      v11 = 1;
      do
      {
        v12 = v8[2];
        if ((ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val(v12 + 8, v8[3], v10) | a2) == 1)
        {
          tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(v12, v13);
          std::mutex::lock(tagged_ptr_lock);
          v15 = (unsigned int *)(v12 + 544);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 & 0xFFFFFFFB, v15));
          std::mutex::unlock(tagged_ptr_lock);
          v17 = *v8;
          v18 = (uint64_t *)v8[1];
          *(_QWORD *)(v17 + 8) = v18;
          *(_QWORD *)v8[1] = v17;
          --*(_QWORD *)(a1 + 1144);
          operator delete(v8);
          v8 = v18;
        }
        else
        {
          if (!v9 || v8[3] == a3)
            v11 = 0xFFFFFFFFLL;
          v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 1128));
    }
  }
  else
  {
    v11 = 0;
  }
  std::mutex::unlock(v20);
  return v11;
}

void sub_212F7575C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::table,unsigned long long> *)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  std::mutex *v10;
  uint64_t v11;
  std::chrono::system_clock::time_point v12;
  uint64_t v13;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14;
  uint64_t v15;
  char v16;
  _BOOL8 v17;

  do
  {
    v8 = *(_QWORD *)(a4 + 16);
    v9 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 544));
    if ((v9 & 4) != 0)
      return 1;
    if ((*(_DWORD *)(*(_QWORD *)a4 + 544) & 1) != 0)
      return 1;
    if (*(_BYTE *)(a4 + 8))
    {
      v10 = (std::mutex *)(v8 + 696);
      std::mutex::lock((std::mutex *)(v8 + 696));
      v11 = *(_QWORD *)(v8 + 688);
      std::mutex::unlock(v10);
      if (v11)
        return 1;
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v13 = *a3;
    if (*a3 <= v12.__d_.__rep_)
      break;
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = atomic_load((unsigned int *)(*(_QWORD *)a4 + 544));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(_QWORD *)a4 + 544) & 1) != 0)
    return 1;
  if (!*(_BYTE *)(a4 + 8))
    return 0;
  std::mutex::lock((std::mutex *)(v15 + 696));
  v17 = *(_QWORD *)(v15 + 688) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 696));
  return v17;
}

_QWORD *ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 59;
  v3 = (_QWORD *)a1[62];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[58];
  if (v5 == a1 + 55)
  {
    v6 = 4;
    v5 = a1 + 55;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[54];
  if (v7 == a1 + 51)
  {
    v8 = 4;
    v7 = a1 + 51;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  std::__optional_destruct_base<di_asif::details::table,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a1 + 5));
  return a1;
}

uint64_t std::__optional_destruct_base<di_asif::details::table,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 360))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 280));
    std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((_QWORD *)(a1 + 232));
    std::mutex::~mutex((std::mutex *)(a1 + 168));
    std::mutex::~mutex((std::mutex *)(a1 + 104));
    v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(_QWORD *)(a1 + 80) = v2;
      operator delete(v2);
    }
    std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100]((uint64_t *)(a1 + 16));
  }
  return a1;
}

_QWORD *std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

_QWORD *ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t(_QWORD *a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = a1 + 13;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = a1[17];
    a1[17] = -1;
    ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)(a1 + 13), v5, 1u);
  }
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk(v2);
  v6 = (_QWORD *)a1[11];
  if (v6 == a1 + 8)
  {
    v7 = 4;
    v6 = a1 + 8;
  }
  else
  {
    if (!v6)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = (_QWORD *)a1[7];
  if (v8 == a1 + 4)
  {
    v9 = 4;
    v8 = a1 + 4;
  }
  else
  {
    if (!v8)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  v10 = (_QWORD *)a1[3];
  if (v10 == a1)
  {
    v11 = 4;
    v10 = a1;
    goto LABEL_19;
  }
  if (v10)
  {
    v11 = 5;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

_QWORD *ref::Allocator<di_asif::details::map_element,unsigned long long>::~Allocator(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  *(_BYTE *)(a1 + 736) = 0;
  if (*(_QWORD *)(a1 + 456))
  {
    v3 = 0;
    do
    {
      v4 = (unint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v3);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(0, v4));
      if (v5)
      {
        v1 = v1 & 0xFFFFFFFFFF000000 | 0x10001;
        ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(a1, v5, v1, 0);
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)(v5 + 360));
        ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk((_QWORD *)(v5 + 8));
        MEMORY[0x2199A8A18](v5, 0x10F0C408C1362C6);
      }
      ++v3;
    }
    while (*(_QWORD *)(a1 + 456) > v3);
  }
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(a1 + 744), &__block_literal_global_201);
  v6 = *(_QWORD *)(a1 + 584);
  if (v6)
    MEMORY[0x2199A8A00](v6, 0x20C8093837F09);
  std::mutex::lock((std::mutex *)(a1 + 520));
  v7 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(a1 + 488) != v7)
  {
    v8 = *(_QWORD *)(a1 + 504);
    v9 = (_QWORD *)(v7 + 8 * (v8 >> 9));
    v10 = (uint64_t *)(*v9 + 8 * (v8 & 0x1FF));
    v11 = *(_QWORD *)(v7 + (((*(_QWORD *)(a1 + 512) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a1 + 512) + v8) & 0x1FF);
    while (v10 != (uint64_t *)v11)
    {
      v12 = *v10;
      if (*v10)
      {
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)(v12 + 360));
        ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk((_QWORD *)(v12 + 8));
        MEMORY[0x2199A8A18](v12, 0x10F0C408C1362C6);
      }
      if ((uint64_t *)((char *)++v10 - *v9) == (uint64_t *)4096)
      {
        v13 = (uint64_t *)v9[1];
        ++v9;
        v10 = v13;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 520));
  v14 = *(_QWORD **)(a1 + 1440);
  if (v14 == (_QWORD *)(a1 + 1416))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 1416);
  }
  else
  {
    if (!v14)
      goto LABEL_22;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_22:
  v16 = *(_QWORD **)(a1 + 1408);
  if (v16 == (_QWORD *)(a1 + 1384))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 1384);
  }
  else
  {
    if (!v16)
      goto LABEL_27;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)(a1 + 1368));
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk((_QWORD *)(a1 + 1016));
  v18 = *(_QWORD **)(a1 + 1000);
  if (v18 == (_QWORD *)(a1 + 976))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 976);
    goto LABEL_31;
  }
  if (v18)
  {
    v19 = 5;
LABEL_31:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear((_QWORD *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 840));
  std::mutex::~mutex((std::mutex *)(a1 + 776));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1 + 752, *(_QWORD **)(a1 + 760));
  gcd::gcd_group::~gcd_group((NSObject **)(a1 + 744));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 688));
  std::mutex::~mutex((std::mutex *)(a1 + 624));
  std::mutex::~mutex((std::mutex *)(a1 + 520));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((_QWORD *)(a1 + 472));
  return ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((_QWORD *)a1);
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::~tagged_allocated_type(uint64_t a1)
{
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)(a1 + 360));
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk((_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 37;
  v3 = (_QWORD *)a1[40];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[36];
  if (v5 == a1 + 33)
  {
    v6 = 4;
    v5 = a1 + 33;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[32];
  if (v7 == a1 + 29)
  {
    v8 = 4;
    v7 = a1 + 29;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  std::__optional_destruct_base<di_asif::details::map_element,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a1 + 5));
  return a1;
}

uint64_t std::__optional_destruct_base<di_asif::details::map_element,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 120));
    *(_QWORD *)(a1 + 32) = &off_24CEFD278;
    std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]((uint64_t *)(a1 + 56));
  }
  return a1;
}

_QWORD *ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t(_QWORD *a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = a1 + 13;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = a1[17];
    a1[17] = -1;
    ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)(a1 + 13), v5, 1u);
  }
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk(v2);
  v6 = (_QWORD *)a1[11];
  if (v6 == a1 + 8)
  {
    v7 = 4;
    v6 = a1 + 8;
  }
  else
  {
    if (!v6)
      goto LABEL_10;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  v8 = (_QWORD *)a1[7];
  if (v8 == a1 + 4)
  {
    v9 = 4;
    v8 = a1 + 4;
  }
  else
  {
    if (!v8)
      goto LABEL_15;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  v10 = (_QWORD *)a1[3];
  if (v10 == a1)
  {
    v11 = 4;
    v10 = a1;
    goto LABEL_19;
  }
  if (v10)
  {
    v11 = 5;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03320;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F76060(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03540;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F760DC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03760;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F76158(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

__n128 std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24CF05D00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CF05D00;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::target_type()
{
}

_QWORD *std::deque<unsigned long long>::__insert_bidirectional[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(void **a1, char *a2, uint64_t a3, _QWORD *a4, char *a5, _QWORD *a6, char *a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char **v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char **v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char **v48;
  char **v49;
  char *v50;
  char **v51;
  char *v52;
  unint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  char **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char **v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char **v66;
  char *v67;
  char *v68;
  char *v69;
  char **v70;
  char *v71;
  char **v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  char *v80;
  char **v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  char **v87;
  char **v88;
  char **v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;

  v8 = a8;
  v14 = (unint64_t)a1[4];
  v15 = v14 >> 9;
  v16 = a1[1];
  v17 = a1[2];
  v18 = &v16[8 * (v14 >> 9)];
  if (v17 == v16)
    v19 = 0;
  else
    v19 = *(_QWORD *)v18 + 8 * ((unint64_t)a1[4] & 0x1FF);
  if (a3 == v19)
    v20 = 0;
  else
    v20 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(_QWORD *)v18) >> 3);
  v21 = (char *)a1[5];
  if (v20 >= (unint64_t)&v21[-v20])
  {
    v24 = ((v17 - v16) << 6) - 1;
    if (v17 == v16)
      v24 = 0;
    v25 = (unint64_t)&v21[v14];
    v26 = v24 - v25;
    if (a8 > v26)
    {
      std::deque<unsigned long long>::__add_back_capacity(a1, a8 - v26);
      v21 = (char *)a1[5];
      v16 = a1[1];
      v17 = a1[2];
      v25 = (unint64_t)&v21[(_QWORD)a1[4]];
    }
    v88 = (char **)a6;
    v27 = (char **)&v16[8 * (v25 >> 9)];
    if (v17 == v16)
      v28 = 0;
    else
      v28 = &(*v27)[8 * (v25 & 0x1FF)];
    v90.n128_u64[0] = (unint64_t)&v16[8 * (v25 >> 9)];
    v90.n128_u64[1] = (unint64_t)v28;
    v31 = (unint64_t)&v21[-v20];
    v87 = (char **)a4;
    if ((unint64_t)&v21[-v20] >= v8)
    {
      v34 = a7;
      if (!v8)
        goto LABEL_90;
      goto LABEL_78;
    }
    if (v31 >= v8 >> 1)
    {
      v32 = (uint64_t)&v21[-v20 - v8 + ((a7 - *v88) >> 3)];
      if (v32 >= 1)
      {
        v88 += (unint64_t)v32 >> 9;
        v33 = *v88;
        goto LABEL_39;
      }
      v37 = 511 - v32;
      v38 = ~(_WORD)v37;
      v88 -= v37 >> 9;
      v39 = *v88;
    }
    else
    {
      if (!v31)
      {
        v88 = (char **)a4;
        v34 = a5;
        goto LABEL_69;
      }
      v32 = v31 + ((uint64_t)&a5[-*a4] >> 3);
      if (v32 >= 1)
      {
        v88 = (char **)&a4[(unint64_t)v32 >> 9];
        v33 = *v88;
LABEL_39:
        v34 = &v33[8 * (v32 & 0x1FF)];
        goto LABEL_69;
      }
      v64 = 511 - v32;
      v38 = ~(_WORD)v64;
      v88 = (char **)&a4[-(v64 >> 9)];
      v39 = *v88;
    }
    v34 = &v39[8 * (v38 & 0x1FF)];
LABEL_69:
    if (v34 != a7)
    {
      v65 = *v27;
      v66 = v88;
      v67 = v34;
      do
      {
        *(_QWORD *)v28 = *(_QWORD *)v67;
        v28 += 8;
        if (v28 - v65 == 4096)
        {
          v68 = v27[1];
          ++v27;
          v65 = v68;
          v28 = v68;
        }
        v67 += 8;
        if (v67 - *v66 == 4096)
        {
          v69 = v66[1];
          ++v66;
          v67 = v69;
        }
        ++v21;
      }
      while (v67 != a7);
      a1[5] = v21;
    }
    v8 = v31;
    if (!v31)
      goto LABEL_90;
LABEL_78:
    v70 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator-[abi:ne180100]((uint64_t)&v90, v8);
    v72 = v70;
    v73 = v71;
    v74 = (char *)v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v71)
    {
      v75 = (char *)a1[5];
      v76 = *v27;
      v77 = v70;
      v78 = v71;
      do
      {
        *(_QWORD *)v28 = *(_QWORD *)v78;
        v28 += 8;
        if (v28 - v76 == 4096)
        {
          v79 = v27[1];
          ++v27;
          v76 = v79;
          v28 = v79;
        }
        v78 += 8;
        if (&v78[-*v77] == (char *)4096)
        {
          v80 = (char *)v77[1];
          ++v77;
          v78 = v80;
        }
        ++v75;
      }
      while (v78 != v74);
      a1[5] = v75;
    }
    if (v8 >= v31)
    {
      v83 = (_QWORD *)v90.n128_u64[0];
    }
    else
    {
      v81 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator-[abi:ne180100]((uint64_t)&v90, v31);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v81, v82, v72, v73, v90.n128_u64[0], (char *)v90.n128_u64[1], &v91);
      v74 = (char *)v92.n128_u64[1];
      v83 = (_QWORD *)v92.n128_u64[0];
      v90 = v92;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v87, a5, v88, v34, v83, v74, &v91);
    goto LABEL_90;
  }
  if (a8 > v14)
  {
    std::deque<unsigned long long>::__add_front_capacity(a1, a8 - v14);
    v14 = (unint64_t)a1[4];
    v16 = a1[1];
    v17 = a1[2];
    v15 = v14 >> 9;
  }
  v22 = (uint64_t *)&v16[8 * v15];
  if (v17 == v16)
    v23 = 0;
  else
    v23 = *v22 + 8 * (v14 & 0x1FF);
  v90.n128_u64[0] = (unint64_t)&v16[8 * v15];
  v90.n128_u64[1] = v23;
  if (v8 <= v20)
  {
    v30 = a5;
    if (!v8)
      goto LABEL_90;
    goto LABEL_55;
  }
  if (v20 >= v8 >> 1)
  {
    v29 = v8 - v20 + ((uint64_t)&a5[-*a4] >> 3);
    if (v29 >= 1)
    {
      a4 += (unint64_t)v29 >> 9;
      goto LABEL_36;
    }
    v35 = 511 - v29;
    v36 = ~(_WORD)v35;
    a4 -= v35 >> 9;
  }
  else
  {
    if (!v20)
    {
      a4 = a6;
      v30 = a7;
      goto LABEL_46;
    }
    v29 = ((uint64_t)&a7[-*a6] >> 3) - v20;
    if (v29 >= 1)
    {
      a4 = &a6[(unint64_t)v29 >> 9];
LABEL_36:
      v30 = (char *)(*a4 + 8 * (v29 & 0x1FF));
      goto LABEL_46;
    }
    v40 = 511 - v29;
    v36 = ~(_WORD)v40;
    a4 = &a6[-(v40 >> 9)];
  }
  v30 = (char *)(*a4 + 8 * (v36 & 0x1FF));
LABEL_46:
  if (v30 != a5)
  {
    v41 = (char *)a1[5];
    v42 = *v22;
    v43 = (char **)a4;
    v44 = v30;
    do
    {
      if (v23 == v42)
      {
        v45 = *--v22;
        v42 = v45;
        v23 = v45 + 4096;
      }
      if (v44 == *v43)
      {
        v46 = (uint64_t)*--v43;
        v44 = (char *)(v46 + 4096);
      }
      v47 = *((_QWORD *)v44 - 1);
      v44 -= 8;
      *(_QWORD *)(v23 - 8) = v47;
      v23 -= 8;
      --v14;
      ++v41;
    }
    while (v44 != a5);
    a1[4] = (void *)v14;
    a1[5] = v41;
  }
  v8 = v20;
  if (v20)
  {
LABEL_55:
    v89 = (char **)a6;
    v48 = (char **)a4;
    v49 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100]((uint64_t)&v90, v8);
    v51 = v49;
    v52 = v50;
    v53 = v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v50)
    {
      v54 = *((int64x2_t *)a1 + 2);
      v55 = *v22;
      v56 = v49;
      v57 = v50;
      do
      {
        if (v23 == v55)
        {
          v58 = *--v22;
          v55 = v58;
          v23 = v58 + 4096;
        }
        if (v57 == *v56)
        {
          v59 = (uint64_t)*--v56;
          v57 = (char *)(v59 + 4096);
        }
        v60 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *(_QWORD *)(v23 - 8) = v60;
        v23 -= 8;
        v54 = vaddq_s64(v54, (int64x2_t)xmmword_212FF0970);
      }
      while (v57 != (char *)v53);
      *((int64x2_t *)a1 + 2) = v54;
    }
    if (v8 >= v20)
    {
      v63 = v90.n128_u64[0];
    }
    else
    {
      v61 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100]((uint64_t)&v90, v20);
      v91 = v90;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>>(v51, v52, v61, v62, (uint64_t)&v91);
      v53 = v91.n128_u64[1];
      v63 = v91.n128_u64[0];
      v90 = v91;
    }
    v91.n128_u64[0] = v63;
    v91.n128_u64[1] = v53;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>>(v48, v30, v89, a7, (uint64_t)&v91);
  }
LABEL_90:
  v84 = a1[1];
  if (a1[2] == v84)
    v85 = 0;
  else
    v85 = v84[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  v91.n128_u64[0] = (unint64_t)&v84[(unint64_t)a1[4] >> 9];
  v91.n128_u64[1] = v85;
  return std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100]((uint64_t)&v91, v20);
}

void std::deque<unsigned long long>::__add_front_capacity(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 6) - 1;
  if ((v6 & 0x1FF) != 0)
    v8 = (v6 >> 9) + 1;
  else
    v8 = v6 >> 9;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 9)
    v11 = v10 >> 9;
  else
    v11 = v8;
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 511 : 512;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

void sub_212F76C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

void std::deque<unsigned long long>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_212F77220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a1) >> 3;
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13)
        result = memmove(a4, v11, 8 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void space_allocators::FixedSize::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(uint64_t a1, unint64_t **a2, unint64_t *a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t **v15;
  unint64_t *v16;

  if (a3 != a5)
  {
    v12 = *a2;
    v13 = a3;
    v14 = a3;
    v15 = a2;
    while (1)
    {
      if ((char *)++v14 - (char *)v12 == 4096)
      {
        v16 = v15[1];
        ++v15;
        v12 = v16;
        v14 = v16;
      }
      if (v14 == a5)
        break;
      if (*v13 < *v14)
        v13 = v14;
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    std::set<unsigned long long>::insert[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>((uint64_t *)(a1 + 72), a2, a3, a4, a5);
    if (*v13 >= *(_QWORD *)(a1 + 96))
      *(_QWORD *)(a1 + 96) = *(_QWORD *)a1 + *v13;
    space_allocators::FixedSize::trim_largest((_QWORD *)a1, a6);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_212F77704(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long>::insert[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(uint64_t *result, _QWORD *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t *v6;
  uint64_t **v8;
  _QWORD *v9;
  unint64_t *v10;

  if (a3 != a5)
  {
    v6 = a3;
    v8 = (uint64_t **)result;
    v9 = result + 1;
    do
    {
      result = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v8, v9, v6, (uint64_t *)v6);
      if ((unint64_t *)((char *)++v6 - *a2) == (unint64_t *)4096)
      {
        v10 = (unint64_t *)a2[1];
        ++a2;
        v6 = v10;
      }
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03BA0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7787C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03DC0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F778F8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF03FE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F77974(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF04200;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F779F0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF04420;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F77A6C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF04640;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F77AE8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF04A80;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F77B64(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  std::mutex *v7;
  _QWORD *v8;
  ref::details *v9;
  unint64_t *v10;
  ref::details **v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  const void *v25;
  unint64_t v26;
  const void *v27;
  std::condition_variable *tagged_ptr_cond;
  unint64_t v29;
  _QWORD *v30;
  ref::details **v31;
  _QWORD *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  ref::details *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  std::condition_variable *v46;
  uint64_t **v47;
  std::unique_lock<std::mutex> v48;
  unint64_t v49;
  ref::details *v50;
  std::unique_lock<std::mutex> __lk;
  ref::details **v52;
  ref::details **v53;
  unint64_t *v54;
  ref::details ***v55;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v56;

  v52 = a2;
  v7 = (std::mutex *)(a1 + 952);
  v8 = (_QWORD *)(a1 + 936);
  v9 = (ref::details *)(a1 + 1184);
  v10 = (unint64_t *)(a1 + 768);
  v45 = (unint64_t *)(a1 + 104);
  v46 = (std::condition_variable *)(a1 + 1016);
  v47 = (uint64_t **)(a1 + 928);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      v11 = v52;
    }
    else
    {
      v16 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_20;
      v11 = v52;
      v17 = v8;
      do
      {
        v18 = v16[4];
        v19 = v18 >= (unint64_t)v52;
        if (v18 >= (unint64_t)v52)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v8 || (unint64_t)v52 < v17[4] || (ref::details *)v17[5] == v9)
      {
LABEL_20:
        v53 = 0;
        *a4 = 0;
        do
          v21 = __ldaxr((unint64_t *)&v53);
        while (__stlxr(0, (unint64_t *)&v53));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v53);
        goto LABEL_23;
      }
    }
    v53 = v11;
    v54 = (unint64_t *)v9;
    v12 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>(v47, (unint64_t *)&v53, (uint64_t *)&v53);
    v13 = v12;
    if (v14)
    {
      v53 = 0;
      *a4 = 0;
      do
        v15 = __ldaxr((unint64_t *)&v53);
      while (__stlxr(0, (unint64_t *)&v53));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v53);
LABEL_23:
      v22 = 1;
      goto LABEL_24;
    }
    v50 = (ref::details *)v12[5];
    if (v50 == v9)
    {
      v30 = (_QWORD *)*v8;
      if (*v8)
      {
        v31 = v52;
        v32 = v8;
        while (1)
        {
          v33 = v30[4];
          v34 = v33 >= (unint64_t)v31;
          if (v33 >= (unint64_t)v31)
            v35 = v30;
          else
            v35 = v30 + 1;
          if (v34)
            v32 = v30;
          v30 = (_QWORD *)*v35;
          if (!*v35)
          {
            if (v32 == v8)
              break;
            if ((unint64_t)v31 < v32[4])
              break;
            v36 = (ref::details *)v32[5];
            if (v36 != v9)
            {
              v37 = *((_QWORD *)v36 + 67);
              if (v37)
              {
                if (!*(_BYTE *)(v37 + 520))
                  break;
              }
            }
            if (!*(_BYTE *)(a1 + 912))
              break;
            std::condition_variable::wait(v46, &__lk);
            v30 = (_QWORD *)*v8;
            v32 = v8;
            if (!*v8)
              break;
          }
        }
      }
      v22 = 0;
      goto LABEL_24;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(&v49, (unint64_t *)v50 + 67);
    if (v49 && !*(_BYTE *)(v49 + 520))
    {
      v23 = (uint64_t)v52;
      if (*(ref::details ***)(v49 + 32) == v52)
      {
        *a4 = 0;
        do
          v39 = __ldaxr(&v49);
        while (__stlxr(0, &v49));
        atomic_store(v39, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }
      if (*(_QWORD *)(v49 + 32) == -1)
      {
        v24 = v45;
        if ((a3 & 1) == 0)
        {
          v53 = 0;
          *a4 = 0;
          do
            v38 = __ldaxr((unint64_t *)&v53);
          while (__stlxr(0, (unint64_t *)&v53));
          goto LABEL_83;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (!a3)
      {
        v53 = 0;
        *a4 = 0;
        do
          v38 = __ldaxr((unint64_t *)&v53);
        while (__stlxr(0, (unint64_t *)&v53));
        goto LABEL_83;
      }
      v23 = (uint64_t)v52;
    }
    v24 = v45;
LABEL_35:
    if (ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, 0, v23, 1u) != -1)
    {
      do
        v26 = __ldaxr(v10);
      while (__stlxr(v26 + 1, v10));
      v48.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock((unint64_t)v50, v25);
      v48.__owns_ = 1;
      std::mutex::lock(v48.__m_);
      tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond((unint64_t)v50, v27);
      v56 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      v53 = &v50;
      v54 = &v49;
      v55 = &v52;
      std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(tagged_ptr_cond, &v48, &v56, (uint64_t)&v53);
      do
        v29 = __ldaxr(v10);
      while (__stlxr(v29 - 1, v10));
      if (v48.__owns_)
        std::mutex::unlock(v48.__m_);
      v22 = 3;
      goto LABEL_85;
    }
    v53 = 0;
    v40 = atomic_load(v24);
    if (!v40)
      goto LABEL_81;
    while (1)
    {
      v41 = __ldaxr(v24);
      if (v41 != v40)
      {
        __clrex();
        goto LABEL_71;
      }
      if (!__stlxr(v40 + 1, v24))
        break;
LABEL_71:
      v40 = v41;
      if (!v41)
        goto LABEL_81;
    }
    v42 = *(unint64_t **)(a1 + 608);
    v40 = (unint64_t)v24;
    if (v42)
    {
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      *(_QWORD *)(a1 + 616) = v43;
      v40 = (unint64_t)v24;
    }
LABEL_81:
    atomic_store(v40, (unint64_t *)&v53);
    *a4 = 0;
    do
      v38 = __ldaxr((unint64_t *)&v53);
    while (__stlxr(0, (unint64_t *)&v53));
LABEL_83:
    atomic_store(v38, a4);
    a4[1] = (unint64_t)v8;
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v53);
LABEL_84:
    v22 = 1;
LABEL_85:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v49);
LABEL_24:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 912))
      {
        v53 = 0;
        *a4 = 0;
        do
          v44 = __ldaxr((unint64_t *)&v53);
        while (__stlxr(0, (unint64_t *)&v53));
        atomic_store(v44, a4);
        a4[1] = (unint64_t)v8;
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v53);
        return;
      }
      continue;
    }
    break;
  }
}

void sub_212F77FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&a15);
  if (a18)
    std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

unint64_t *ref::Allocator<di_asif::details::table,unsigned long long>::allocate_from_empty_pool@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14[5];

  v13 = 0;
  v6 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  v7 = *(_QWORD *)(a1 + 688);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 680);
    v9 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 656) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
    *(_QWORD *)(a1 + 688) = v7 - 1;
    *(_QWORD *)(a1 + 680) = v8 + 1;
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100](a1 + 648, 1);
    ref::Allocator<di_asif::details::table,unsigned long long>::insert_elem(a1, v9, a2, v14);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v13, v14);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(v14);
  }
  else
  {
    v9 = 0;
  }
  std::mutex::unlock(v6);
  v10 = atomic_load((unint64_t *)(a1 + 784));
  if (v10 + v7 >= *(_QWORD *)(a1 + 640))
  {
    ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
  }
  else
  {
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 0x40000000;
    v14[2] = (unint64_t)___ZN3ref9AllocatorIN7di_asif7details5tableEyE9evict_lruEv_block_invoke;
    v14[3] = (unint64_t)&__block_descriptor_tmp_205;
    v14[4] = a1;
    gcd::gcd_queue::async((dispatch_queue_t *)(a1 + 920), v14);
  }
  *a3 = v9;
  a3[1] = 0;
  do
    v11 = __ldaxr(&v13);
  while (__stlxr(0, &v13));
  atomic_store(v11, (unint64_t *)a3 + 1);
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v13);
}

void sub_212F78190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&a9);
  _Unwind_Resume(a1);
}

unint64_t ref::Allocator<di_asif::details::table,unsigned long long>::extract_min(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = atomic_load(a1 + 97);
  v2 = a1[79];
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = a1[95];
    v7 = *(_QWORD *)(v6 + 8 * v3);
    if (v7 && v1 - *(_QWORD *)(v7 + 520) != -1)
    {
      v5 = *(_QWORD *)(v6 + 8 * v3);
      v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5)
    return 0;
  v8 = (unint64_t *)(a1[95] + 8 * v4);
  do
  {
    v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0;
    }
  }
  while (__stlxr(0, v8));
  if ((ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
    return 0;
  return v5;
}

unint64_t *ref::Allocator<di_asif::details::table,unsigned long long>::insert_elem@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v17;

  ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::mark_used((uint64_t)a2, a3);
  v7 = a2 + 1;
  v17 = 0;
  v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_11;
  }
  while (1)
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v8 + 1, v7))
      break;
LABEL_6:
    v8 = v9;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)a2[64];
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[65] = v11;
  }
LABEL_11:
  atomic_store((unint64_t)v7, &v17);
  if (*(_QWORD *)(a1 + 632))
  {
    v12 = 0;
    while (2)
    {
      v13 = (unint64_t *)(*(_QWORD *)(a1 + 760) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0;
          do
            v15 = __ldaxr(&v17);
          while (__stlxr(0, &v17));
          atomic_store(v15, a4);
          return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v17);
        }
      }
      __clrex();
      if (*(_QWORD *)(a1 + 632) > (unint64_t)++v12)
        continue;
      break;
    }
  }
  *a4 = 0;
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v17);
}

unint64_t *ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  v3 = (unint64_t *)atomic_load(a2);
  if (!v3)
    goto LABEL_9;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_8;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_7:
    v4 = v5;
    if (!v5)
      goto LABEL_8;
  }
  v7 = (unint64_t *)v3[63];
  if (v7)
  {
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[64] = v8;
  }
  if (!ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::wait_for_ready((uint64_t)v3))
  {
    do
      v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      v10 = v3[4];
      v3[4] = -1;
      ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)v3, v10, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::wait_for_ready(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v2 = (unsigned int *)(a1 + 24);
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    v6 = (unint64_t *)(a1 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 520))
      std::__atomic_base<ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ready_state,false>::wait[abi:ne180100](a1 + 24, 1u, 5u);
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0;
    }
    else
    {
      v11 = atomic_load(v2);
      return v11 == 2;
    }
  }
}

BOOL std::__atomic_base<ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ready_state,false>::wait[abi:ne180100](uint64_t a1, unsigned int a2, unsigned int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)&v4 = a1;
  *((_QWORD *)&v4 + 1) = __PAIR64__(a3, a2);
  v5 = a1;
  v6 = v4;
  return std::__libcpp_thread_poll_with_backoff[abi:ne180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>> &>((uint64_t)&v4, (uint64_t)&v5, 0);
}

unint64_t *ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2, int a3)
{
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = a2;
  *a1 = 0;
  if (!a2)
    goto LABEL_9;
  v5 = atomic_load(a2);
  if (!v5)
    goto LABEL_8;
  while (1)
  {
    v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }
    if (!__stlxr(v5 + 1, a2))
      break;
LABEL_7:
    v5 = v6;
    if (!v6)
      goto LABEL_8;
  }
  v8 = (unint64_t *)a2[63];
  if (v8)
  {
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[64] = v9;
  }
  if (a3 && !ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::wait_for_ready((uint64_t)a2))
  {
    do
      v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      v11 = v3[4];
      v3[4] = -1;
      ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)v3, v11, 1u);
    }
LABEL_8:
    v3 = 0;
  }
LABEL_9:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  uint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9;
  std::chrono::steady_clock::time_point v10;
  std::chrono::system_clock::time_point v11;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13;
  uint64_t v14;

  do
  {
    if ((*(_DWORD *)(**(_QWORD **)a4 + 544) & 1) != 0)
      return 1;
    v8 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)v8)
    {
      if (!*(_BYTE *)(*(_QWORD *)v8 + 520) && *(_QWORD *)(*(_QWORD *)v8 + 32) == **(_QWORD **)(a4 + 16))
        return 1;
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(_QWORD **)a4 + 544) & 1) != 0)
    return 1;
  v14 = *(_QWORD *)(a4 + 8);
  return *(_QWORD *)v14
      && !*(_BYTE *)(*(_QWORD *)v14 + 520)
      && *(_QWORD *)(*(_QWORD *)v14 + 32) == **(_QWORD **)(a4 + 16);
}

uint64_t ___ZN3ref9AllocatorIN7di_asif7details5tableEyE9evict_lruEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  unint64_t min;

  v1 = *(_QWORD **)(a1 + 32);
  min = ref::Allocator<di_asif::details::table,unsigned long long>::extract_min(v1);
  if (min)
    ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool((uint64_t)v1, min);
  return ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list((uint64_t)v1, 0, 0, 0);
}

void ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::push_back((_QWORD *)(a1 + 648), &v4);
  std::mutex::unlock(v3);
}

void sub_212F78824(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_212F78B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t *ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::mark_used(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  atomic_store(0, (unsigned int *)(a1 + 544));
  v3 = (unint64_t *)(a1 + 8);
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::init(a1 + 8, a2);
  v12 = 0;
  v4 = atomic_load(v3);
  if (!v4)
    goto LABEL_11;
  while (1)
  {
    v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v4 + 1, v3))
      break;
LABEL_6:
    v4 = v5;
    if (!v5)
      goto LABEL_11;
  }
  v6 = *(unint64_t **)(a1 + 512);
  v4 = (unint64_t)v3;
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(_QWORD *)(a1 + 520) = v7;
    v4 = (unint64_t)v3;
  }
LABEL_11:
  atomic_store(v4, &v12);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=((unint64_t *)(a1 + 536), &v12);
  result = ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v12);
  do
  {
    v9 = __ldaxr(v3);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v3));
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = -1;
    return (unint64_t *)ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)v3, v11, 1u);
  }
  return result;
}

uint64_t *ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::init(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 520) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  result = std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  v4 = *(unint64_t **)(a1 + 504);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(_QWORD *)(a1 + 512) = v5;
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL>(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v12;

  *(_QWORD *)(a1 + 512) = **(_QWORD **)(a1 + 504);
  v12 = a1 + 40;
  std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL,di_asif::details::table*>(v12, a2, a3, a4, a5, a6);
  *(_BYTE *)(a1 + 400) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(a1);
}

void sub_212F78DC0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 520) = 1;
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_212F78DE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(uint64_t result)
{
  if (atomic_load((unint64_t *)(result + 8)))
    return MEMORY[0x2199A88E0](result + 24);
  return result;
}

uint64_t std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL,di_asif::details::table*>(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v7 = (std::__shared_weak_count *)a3[1];
  v13[0] = *a3;
  v13[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  di_asif::details::table::table(a1, a2, v13, *a4, *a5, *a6);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_212F78EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long>(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v10;

  *(_QWORD *)(a1 + 512) = **(_QWORD **)(a1 + 504);
  v10 = a1 + 40;
  std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,di_asif::details::table*>(v10, a2, a3, a4, a5);
  *(_BYTE *)(a1 + 400) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(a1);
}

void sub_212F78F4C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(_BYTE *)(v1 + 520) = 1;
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_212F78F70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,di_asif::details::table*>(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[2];

  v6 = (std::__shared_weak_count *)a3[1];
  v12[0] = *a3;
  v12[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  di_asif::details::table::table(a1, a2, v12, *a4, *a5, 0);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_212F79018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF04D30;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F79094(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF04F50;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F79110(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF05170;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7918C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF05390;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F79208(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t ref::Allocator<di_asif::details::table,unsigned long long>::Allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  dispatch_object_t *v15;
  uint64_t v16;

  v8 = ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(a1);
  *(_QWORD *)(v8 + 632) = a2;
  *(_QWORD *)(v8 + 640) = a3;
  v9 = (_QWORD *)(v8 + 648);
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *(_QWORD *)(v8 + 696) = 850045863;
  *(_OWORD *)(v8 + 704) = 0u;
  *(_OWORD *)(v8 + 720) = 0u;
  *(_OWORD *)(v8 + 736) = 0u;
  *(_QWORD *)(v8 + 752) = 0;
  *(_OWORD *)(v8 + 768) = 0u;
  *(_OWORD *)(v8 + 784) = 0u;
  *(_QWORD *)(v8 + 800) = 850045863;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(_QWORD *)(v8 + 856) = 0;
  *(_QWORD *)(v8 + 864) = 1018212795;
  *(_QWORD *)(v8 + 904) = 0;
  *(_OWORD *)(v8 + 888) = 0u;
  *(_BYTE *)(v8 + 912) = 1;
  *(_OWORD *)(v8 + 872) = 0u;
  v15 = (dispatch_object_t *)(v8 + 920);
  gcd::gcd_queue::gcd_queue(v8 + 920, "dealloc_queue", 2);
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = a1 + 936;
  *(_QWORD *)(a1 + 952) = 850045863;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 1018212795;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1064) = 850045863;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1128) = a1 + 1128;
  *(_QWORD *)(a1 + 1136) = a1 + 1128;
  *(_QWORD *)(a1 + 1144) = 0;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 1152, a4);
  ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(a1 + 1184, a1);
  *(_QWORD *)(a1 + 1736) = &off_24CF06060;
  *(_QWORD *)(a1 + 1744) = a1;
  *(_QWORD *)(a1 + 1760) = a1 + 1736;
  *(_QWORD *)(a1 + 1768) = &off_24CF060F0;
  *(_QWORD *)(a1 + 1776) = a1;
  *(_QWORD *)(a1 + 1792) = a1 + 1768;
  v10 = (void *)operator new[]();
  v11 = v10;
  if (a2)
    bzero(v10, 8 * a2);
  *(_QWORD *)(a1 + 760) = v11;
  gcd::gcd_queue::set_target_priority(v15, 3);
  if (a2)
  {
    v12 = 0;
    do
    {
      v13 = operator new();
      ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(v13, a1);
      v16 = v13;
      std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::emplace_back<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>(v9, &v16);
      atomic_store(0, (unint64_t *)(*(_QWORD *)(a1 + 760) + 8 * v12++));
    }
    while (a2 != v12);
  }
  return a1;
}

void sub_212F79448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, std::condition_variable *a11, _QWORD *a12, NSObject **a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v13 + 1176);
  if (v18 == a12)
  {
    v19 = 4;
    v18 = a12;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 1016));
  std::mutex::~mutex((std::mutex *)(v13 + 952));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v13 + 928, *a10);
  gcd::gcd_group::~gcd_group(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 696));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v14);
  ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((_QWORD *)v13);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::emplace_back<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::__add_back_capacity(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  v10 = v7 + v8 + 1;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 9));
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 8;
}

uint64_t ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_24CF05E40;
  *(_QWORD *)(a1 + 56) = a1 + 32;
  *(_QWORD *)a1 = &off_24CF05DB0;
  *(_QWORD *)(a1 + 64) = &off_24CF05ED0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 88) = a1 + 64;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ctrl_blk(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::init(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 624) = 1;
  return a1;
}

void sub_212F796F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 88);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 88);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t();
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF05DB0;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF05DB0;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF05E40;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF05E40;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF05ED0;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF05ED0;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::target_type()
{
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ctrl_blk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 408, a2);
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 440, a3);
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 472, a4);
  *(_QWORD *)(a1 + 504) = a5;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_212F799BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD **)(v2 + 464);
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = *(_QWORD **)(v2 + 464);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = *(_QWORD **)(v2 + 432);
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  std::__optional_destruct_base<di_asif::details::table,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  v10[0] = &off_24CF05F60;
  v10[1] = a1;
  v11 = v10;
  v8[0] = &off_24CF05FE0;
  v8[1] = a1;
  v9 = v8;
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ctrl_blk(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 1152, a2 + 776);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  return a1;
}

void sub_212F79B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF05F60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF05F60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(**(_QWORD **)(a1 + 8) + 1736, *(_QWORD *)(a1 + 8), *a3, *a4);
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF05FE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF05FE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(uint64_t a1)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1} &,ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &>((uint64_t **)(a1 + 8));
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1} &,ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;

  v1 = **a1;
  v4 = *a1;
  v2 = *(_QWORD *)(v1 + 1792);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF06060;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF06060;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
  ref::Allocator<di_asif::details::table,unsigned long long>::deleter(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void ref::Allocator<di_asif::details::table,unsigned long long>::deleter(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  unsigned int *v7;
  std::mutex *v8;
  _QWORD *v9;
  const void *v10;
  uint64_t v11;
  unsigned int v12;
  std::mutex *tagged_ptr_lock;
  const void *v14;
  std::condition_variable *tagged_ptr_cond;
  const void *v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v23;
  const void *v25;
  std::condition_variable *v27;

  if ((*(_DWORD *)(a2 + 544) & 1) == 0)
  {
    v7 = (unsigned int *)(a2 + 544);
    if ((a4 & 3) == 1)
    {
      v8 = (std::mutex *)(a1 + 1064);
      std::mutex::lock((std::mutex *)(a1 + 1064));
      v9 = operator new(0x20uLL);
      v9[2] = a2;
      v9[3] = a3;
      v11 = *(_QWORD *)(a1 + 1128);
      *v9 = v11;
      v9[1] = a1 + 1128;
      *(_QWORD *)(v11 + 8) = v9;
      *(_QWORD *)(a1 + 1128) = v9;
      ++*(_QWORD *)(a1 + 1144);
      do
        v12 = __ldaxr(v7);
      while (__stlxr(v12 | 4, v7));
      tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v10);
      std::mutex::lock(tagged_ptr_lock);
      tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v14);
      std::condition_variable::notify_all(tagged_ptr_cond);
      std::mutex::unlock(tagged_ptr_lock);
LABEL_20:
      std::mutex::unlock(v8);
      return;
    }
    ref::Allocator<di_asif::details::table,unsigned long long>::delete_tag(a1, a3);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)(a2 + 536));
    do
      v17 = __ldaxr(v7);
    while (__stlxr(v17 | 1, v7));
    if ((v17 & 2) == 0)
      ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool(a1, a2);
    v18 = (unint64_t *)(a1 + 784);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      if (atomic_load((unint64_t *)(a1 + 792)))
      {
        std::mutex::lock((std::mutex *)(a1 + 800));
        if (atomic_load((unint64_t *)(a1 + 792)))
          std::condition_variable::notify_all((std::condition_variable *)(a1 + 864));
        std::mutex::unlock((std::mutex *)(a1 + 800));
      }
    }
    v23 = (unint64_t *)(a1 + 768);
    if (atomic_load(v23))
    {
      v8 = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v16);
      std::mutex::lock(v8);
      if (atomic_load(v23))
      {
        v27 = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v25);
        std::condition_variable::notify_all(v27);
      }
      goto LABEL_20;
    }
  }
}

void sub_212F79FA0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::table,unsigned long long>::delete_tag(uint64_t a1, unint64_t a2)
{
  std::mutex *v3;
  unint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 952);
  std::mutex::lock((std::mutex *)(a1 + 952));
  std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>(a1 + 928, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
  std::mutex::unlock(v3);
}

void sub_212F7A01C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF060F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF060F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  ref::Allocator<di_asif::details::table,unsigned long long>::deallocate(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target_type()
{
}

void ref::Allocator<di_asif::details::table,unsigned long long>::deallocate(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 632);
  if (v3 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 760);
    v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(_QWORD *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8)
        return;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        v10 = __ldaxr(v9);
        if (v10 != a2)
          break;
        if (!__stlxr(0, v9))
        {
          ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(a1, a2, 1uLL, a3);
          ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool(a1, a2);
          return;
        }
      }
      __clrex();
    }
  }
}

uint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::Allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  dispatch_object_t *v15;
  uint64_t v16;

  v8 = ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(a1);
  *(_QWORD *)(v8 + 456) = a2;
  *(_QWORD *)(v8 + 464) = a3;
  v9 = (_QWORD *)(v8 + 472);
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_QWORD *)(v8 + 520) = 850045863;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_QWORD *)(v8 + 576) = 0;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 608) = 0u;
  *(_QWORD *)(v8 + 624) = 850045863;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_QWORD *)(v8 + 680) = 0;
  *(_QWORD *)(v8 + 688) = 1018212795;
  *(_QWORD *)(v8 + 728) = 0;
  *(_OWORD *)(v8 + 712) = 0u;
  *(_BYTE *)(v8 + 736) = 1;
  *(_OWORD *)(v8 + 696) = 0u;
  v15 = (dispatch_object_t *)(v8 + 744);
  gcd::gcd_queue::gcd_queue(v8 + 744, "dealloc_queue", 2);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = a1 + 760;
  *(_QWORD *)(a1 + 776) = 850045863;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 840) = 1018212795;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 888) = 850045863;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 952) = a1 + 952;
  *(_QWORD *)(a1 + 960) = a1 + 952;
  *(_QWORD *)(a1 + 968) = 0;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 976, a4);
  ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(a1 + 1008, a1);
  *(_QWORD *)(a1 + 1384) = &off_24CF06430;
  *(_QWORD *)(a1 + 1392) = a1;
  *(_QWORD *)(a1 + 1408) = a1 + 1384;
  *(_QWORD *)(a1 + 1416) = &off_24CF064C0;
  *(_QWORD *)(a1 + 1424) = a1;
  *(_QWORD *)(a1 + 1440) = a1 + 1416;
  v10 = (void *)operator new[]();
  v11 = v10;
  if (a2)
    bzero(v10, 8 * a2);
  *(_QWORD *)(a1 + 584) = v11;
  gcd::gcd_queue::set_target_priority(v15, 3);
  if (a2)
  {
    v12 = 0;
    do
    {
      v13 = operator new();
      ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(v13, a1);
      v16 = v13;
      std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::emplace_back<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>(v9, &v16);
      atomic_store(0, (unint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v12++));
    }
    while (a2 != v12);
  }
  return a1;
}

void sub_212F7A42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, std::condition_variable *a11, _QWORD *a12, NSObject **a13)
{
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  _QWORD *v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v13 + 1000);
  if (v18 == a12)
  {
    v19 = 4;
    v18 = a12;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 840));
  std::mutex::~mutex((std::mutex *)(v13 + 776));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v13 + 752, *a10);
  gcd::gcd_group::~gcd_group(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 520));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v14);
  ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((_QWORD *)v13);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::emplace_back<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::__add_back_capacity(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  v10 = v7 + v8 + 1;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 9));
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 8;
}

uint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_24CF06210;
  *(_QWORD *)(a1 + 56) = a1 + 32;
  *(_QWORD *)a1 = &off_24CF06180;
  *(_QWORD *)(a1 + 64) = &off_24CF062A0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 88) = a1 + 64;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ctrl_blk(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::init(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 448) = 1;
  return a1;
}

void sub_212F7A6D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 88);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 88);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t();
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF06180;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF06180;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF06210;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF06210;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF062A0;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF062A0;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::target_type()
{
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ctrl_blk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 232, a2);
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 264, a3);
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 296, a4);
  *(_QWORD *)(a1 + 328) = a5;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  return a1;
}

void sub_212F7A9A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD **)(v2 + 288);
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = *(_QWORD **)(v2 + 288);
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = *(_QWORD **)(v2 + 256);
  if (v8 == v3)
  {
    v9 = 4;
    v8 = v3;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  std::__optional_destruct_base<di_asif::details::map_element,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  v10[0] = &off_24CF06330;
  v10[1] = a1;
  v11 = v10;
  v8[0] = &off_24CF063B0;
  v8[1] = a1;
  v9 = v8;
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ctrl_blk(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 976, a2 + 600);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  return a1;
}

void sub_212F7AB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF06330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF06330;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(**(_QWORD **)(a1 + 8) + 1384, *(_QWORD *)(a1 + 8), *a3, *a4);
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF063B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF063B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(uint64_t a1)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1} &,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &>((uint64_t **)(a1 + 8));
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1} &,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;

  v1 = **a1;
  v4 = *a1;
  v2 = *(_QWORD *)(v1 + 1440);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v2 + 48))(v2, &v4);
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF06430;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF06430;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
  ref::Allocator<di_asif::details::map_element,unsigned long long>::deleter(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::deleter(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  unsigned int *v7;
  std::mutex *v8;
  _QWORD *v9;
  const void *v10;
  uint64_t v11;
  unsigned int v12;
  std::mutex *tagged_ptr_lock;
  const void *v14;
  std::condition_variable *tagged_ptr_cond;
  const void *v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v23;
  const void *v25;
  std::condition_variable *v27;

  if ((*(_DWORD *)(a2 + 368) & 1) == 0)
  {
    v7 = (unsigned int *)(a2 + 368);
    if ((a4 & 3) == 1)
    {
      v8 = (std::mutex *)(a1 + 888);
      std::mutex::lock((std::mutex *)(a1 + 888));
      v9 = operator new(0x20uLL);
      v9[2] = a2;
      v9[3] = a3;
      v11 = *(_QWORD *)(a1 + 952);
      *v9 = v11;
      v9[1] = a1 + 952;
      *(_QWORD *)(v11 + 8) = v9;
      *(_QWORD *)(a1 + 952) = v9;
      ++*(_QWORD *)(a1 + 968);
      do
        v12 = __ldaxr(v7);
      while (__stlxr(v12 | 4, v7));
      tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v10);
      std::mutex::lock(tagged_ptr_lock);
      tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v14);
      std::condition_variable::notify_all(tagged_ptr_cond);
      std::mutex::unlock(tagged_ptr_lock);
LABEL_20:
      std::mutex::unlock(v8);
      return;
    }
    ref::Allocator<di_asif::details::map_element,unsigned long long>::delete_tag(a1, a3);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)(a2 + 360));
    do
      v17 = __ldaxr(v7);
    while (__stlxr(v17 | 1, v7));
    if ((v17 & 2) == 0)
      ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool(a1, a2);
    v18 = (unint64_t *)(a1 + 608);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      if (atomic_load((unint64_t *)(a1 + 616)))
      {
        std::mutex::lock((std::mutex *)(a1 + 624));
        if (atomic_load((unint64_t *)(a1 + 616)))
          std::condition_variable::notify_all((std::condition_variable *)(a1 + 688));
        std::mutex::unlock((std::mutex *)(a1 + 624));
      }
    }
    v23 = (unint64_t *)(a1 + 592);
    if (atomic_load(v23))
    {
      v8 = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v16);
      std::mutex::lock(v8);
      if (atomic_load(v23))
      {
        v27 = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v25);
        std::condition_variable::notify_all(v27);
      }
      goto LABEL_20;
    }
  }
}

void sub_212F7AF84(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::delete_tag(uint64_t a1, unint64_t a2)
{
  std::mutex *v3;
  unint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 776);
  std::mutex::lock((std::mutex *)(a1 + 776));
  std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>(a1 + 752, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
  std::mutex::unlock(v3);
}

void sub_212F7B000(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF064C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF064C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  ref::Allocator<di_asif::details::map_element,unsigned long long>::deallocate(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target_type()
{
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::deallocate(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 456);
  if (v3 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 584);
    v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(_QWORD *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8)
        return;
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        v10 = __ldaxr(v9);
        if (v10 != a2)
          break;
        if (!__stlxr(0, v9))
        {
          ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(a1, a2, 1uLL, a3);
          ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool(a1, a2);
          return;
        }
      }
      __clrex();
    }
  }
}

void _ZNSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EED0Ev()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *_ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CF06550;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE7__cloneEPNS0_6__baseISA_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CF06550;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EEclES6_(uint64_t a1, uint64_t a2)
{
  return _ZNK7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_clES3_((uint64_t *)(a1 + 8), a2);
}

uint64_t _ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE11target_typeEv()
{
  return &_ZTIN7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_E;
}

uint64_t _ZNK7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_clES3_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  di_asif::details::table *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE *v11;
  _QWORD v12[2];
  uint64_t v13;
  std::__shared_weak_count *v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 24);
  v12[0] = off_24CEFD000;
  v12[1] = v4;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 16) + 72))(&v13);
  if (*(_BYTE *)(a2 + 113))
    di_asif::details::dir::get_table((di_asif::details::dir *)v3, (di_asif::details::ContextASIF *)v12, *(_QWORD *)(a2 + 8) / *(_QWORD *)(v3 + 80), 0, 0, (unint64_t *)&v11);
  else
    v11 = 0;
  if (v11 && !v11[520])
  {
    if (v11[400])
      v5 = (di_asif::details::table *)(v11 + 40);
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = di_asif::details::map_element::close((di_asif::details::map_element *)a2, (di_asif::details::ContextASIF *)v12, v5, *(unsigned int *)(v3 + 20));
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v11);
  v12[0] = off_24CEFD000;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_212F7B34C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const void **v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (uint64_t)v7[1];
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(v7 + 2));
  di_asif::details::dir::defrag(v3, (uint64_t)v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)&v7);
  return 0;
}

void sub_212F7B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (uint64_t *)v2[5];
    if (v3 == v2 + 2)
    {
      v4 = 4;
      v3 = v2 + 2;
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
        MEMORY[0x2199A8A18](v2, 0x1020C407A7143E5);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x2199A8820]();
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

_WORD *di_asif::header::total_segments_t::total_segments_t(_WORD *this, int a2)
{
  __int16 v2;
  _QWORD *exception;

  *this = 0;
  if (a2)
  {
    v2 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_24CF022A0;
    exception[1] = "total_segments_t";
    *((_WORD *)exception + 16) = v2;
  }
  return this;
}

uint64_t smart_enums::validators::value<unsigned int>(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *exception;

  if (!a4)
  {
LABEL_5:
    v5 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_24CEEDAA0;
    exception[1] = v5;
    *((_DWORD *)exception + 8) = a2;
  }
  v4 = 4 * a4;
  while (*a3 != a2)
  {
    ++a3;
    v4 -= 4;
    if (!v4)
      goto LABEL_5;
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF05A60;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7B698(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF05840;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7B714(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

const void **CFAutoRelease<__CFData const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t di_asif::details::table::get_table_extents<std::insert_iterator<std::set<unsigned long long>>>(di_asif::details::table *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[8];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  result = di_asif::details::table::make_map_entry_iterators(a1, a2, (uint64_t)v12);
  while (v12[0] != v13[3] || v12[1] != v13[4])
  {
    v7[0] = 0;
    v7[0] = (*(_QWORD *)(*(_QWORD *)(v13[0] + 56) + 16 * v13[1] + 8) & 0x7FFFFFFFFFFFFFLL)
          * *(unsigned int *)(*(_QWORD *)(v13[0] + 8) + 20);
    if (v7[0])
      std::insert_iterator<std::set<unsigned long long>>::operator=[abi:ne180100]((uint64_t)v14, v7);
    di_asif::details::table::make_data_entry_iterators_for_map(a1, (const di_asif::details::table_entry_map *)v13, (uint64_t)v7);
    while (v7[0] != v10 || v7[1] != v11)
    {
      v6 = 0;
      v6 = (*(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9 + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(_QWORD *)(v8 + 8) + 20);
      if (v6)
        std::insert_iterator<std::set<unsigned long long>>::operator=[abi:ne180100]((uint64_t)v14, (unint64_t *)&v6);
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)v7);
    }
    result = di_asif::details::map_entry_iterator_t::operator++((uint64_t)v12);
  }
  return result;
}

uint64_t std::insert_iterator<std::set<unsigned long long>>::operator=[abi:ne180100](uint64_t a1, unint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), a2, (uint64_t *)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void space_allocators::FixedSize::insert<boost::range_detail::integer_iterator_with_step<unsigned long long>>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a2[1];
  v5 = *((_QWORD *)a3 + 1);
  if (v4 != v5)
  {
    v10 = *a2;
    v11 = a2[2];
    v12 = v4 + 1;
    if (v4 + 1 != v5)
    {
      v13 = v10 + v11 * v12;
      v14 = a2[1];
      do
      {
        if (v10 + v14 * v11 < v13)
        {
          v4 = v12;
          v14 = v12;
        }
        ++v12;
        v13 += v11;
      }
      while (v5 != v12);
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    v18 = *(_OWORD *)a2;
    v19 = a2[2];
    v16 = *a3;
    v17 = *((_QWORD *)a3 + 2);
    std::set<unsigned long long>::insert[abi:ne180100]<boost::range_detail::integer_iterator_with_step<unsigned long long>>((uint64_t *)(a1 + 72), &v18, (uint64_t)&v16);
    v15 = v10 + v4 * v11;
    if (v15 >= *(_QWORD *)(a1 + 96))
      *(_QWORD *)(a1 + 96) = *(_QWORD *)a1 + v15;
    space_allocators::FixedSize::trim_largest((_QWORD *)a1, a4);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_212F7B9D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long>::insert[abi:ne180100]<boost::range_detail::integer_iterator_with_step<unsigned long long>>(uint64_t *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a2[1];
  if (v3 != *(_QWORD *)(a3 + 8))
  {
    v6 = (uint64_t **)result;
    v7 = result + 1;
    do
    {
      v8 = *a2 + a2[2] * v3;
      result = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v6, v7, (unint64_t *)&v8, &v8);
      v3 = a2[1] + 1;
      a2[1] = v3;
    }
    while (v3 != *(_QWORD *)(a3 + 8));
  }
  return result;
}

di_utils *std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageASIF::void_stackable_identifier(std::shared_ptr<Backend> &)::$_0 &&>>(di_utils *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(uint64_t ***)result;
  v2 = *v1;
  if (*(_DWORD *)(*v1 + 44) != 1)
  {
    *(_QWORD *)(v2 + 64) = di_utils::random_uuid(result);
    *(_QWORD *)(v2 + 72) = v3;
    result = (di_utils *)di_asif::header::write_header((di_asif::header *)(v2 + 32), *(Backend **)(v2 + 16));
    *(_DWORD *)v1[1] = (_DWORD)result;
  }
  return result;
}

uint64_t boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>(boost::uuids::string_generator *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  signed __int8 *v5;
  int v6;
  signed __int8 v7;
  uint64_t v8;
  int v9;
  signed __int8 v10;
  BOOL v11;
  signed __int8 v12;
  char value;
  int v14;
  int v15;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if (a2 == a3)
    goto LABEL_32;
  v5 = (signed __int8 *)(a2 + 1);
  v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v5 = (signed __int8 *)(a2 + 2);
    v7 = a2[1];
  }
  else
  {
    v7 = *a2;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3)
            goto LABEL_32;
          v9 = 1;
LABEL_22:
          v12 = *v5++;
          v7 = v12;
          goto LABEL_24;
        }
        v9 = 0;
      }
      else
      {
        v11 = (v8 & 0x7FFFFFFD) == 8 || (_DWORD)v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3)
            goto LABEL_32;
          goto LABEL_22;
        }
      }
LABEL_24:
      value = boost::uuids::string_generator::get_value(this, v7);
      *((_BYTE *)v17 + v8) = value;
      if (v5 == (signed __int8 *)a3)
        goto LABEL_32;
      v14 = *v5++;
      v7 = v14;
      *((_BYTE *)v17 + v8++) = boost::uuids::string_generator::get_value(this, v14) | (16 * value);
    }
    while (!v8);
    if (v8 == 16)
      break;
    if (v5 == (signed __int8 *)a3)
      goto LABEL_32;
    v10 = *v5++;
    v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    boost::uuids::string_generator::throw_invalid(this);
  }
  return v17[0];
}

void boost::uuids::string_generator::throw_invalid(boost::uuids::string_generator *this)
{
  _BYTE v1[16];

  MEMORY[0x2199A8694](v1, "invalid uuid string");
  boost::throw_exception<std::runtime_error>((uint64_t)v1);
}

uint64_t boost::uuids::string_generator::get_value(boost::uuids::string_generator *this, int a2)
{
  unsigned __int8 v3;
  __objc2_class *v4;
  _BYTE *vtable;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  int v10;
  int v11;

  v4 = &OBJC_METACLASS___DICreateUDSBParams;
  if ((v3 & 1) == 0)
  {
    v11 = a2;
    v4 = &OBJC_METACLASS___DICreateUDSBParams;
    a2 = v11;
    if (v10)
    {
      boost::uuids::string_generator::get_value(char)const::digits_end = (uint64_t)&boost::uuids::string_generator::get_value(char)const::digits_begin[(_QWORD)boost::uuids::string_generator::get_value(char)const::digits_len];
      v4 = &OBJC_METACLASS___DICreateUDSBParams;
      a2 = v11;
    }
  }
  vtable = v4[45].vtable;
  v6 = memchr("0123456789abcdefABCDEF", a2, vtable - "0123456789abcdefABCDEF");
  if (v6)
    v7 = v6;
  else
    v7 = vtable;
  v8 = v7 - "0123456789abcdefABCDEF";
  if (v8 >= (unint64_t)boost::uuids::string_generator::get_value(char)const::digits_len)
    boost::uuids::string_generator::throw_invalid(this);
  return boost::uuids::string_generator::get_value(char)const::values[v8];
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_1_0@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

void udsp_header::udsp_header(udsp_header *this, Backend *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *exception;
  const std::error_category *v8;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = operator new[]();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  v5 = Backend::read(a2, (char *)v4, 64, 0);
  if (v5 != 64)
  {
    v6 = v5;
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v8 = std::generic_category();
    exception[1] = v6;
    exception[2] = v8;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Couldn't read sparseimage header";
  }
  udsp_header::init(this, (const char *)v4);
  MEMORY[0x2199A8A00](v4, 0x1000C8077774924);
}

void sub_212F7BEAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

_DWORD *udsp_header::init(udsp_header *this, const char *a2)
{
  int v4;
  int v5;
  _DWORD *result;
  __int128 v7;
  uint64_t v8;
  uint64_t i;
  DiskImagesRuntimeException *v10;
  void *v11;
  DiskImagesRuntimeException *exception;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)a2;
  LODWORD(v14) = 1936879731;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v4, &v14, 1);
  *(_DWORD *)this = 1936879731;
  v5 = bswap32(*((_DWORD *)a2 + 1));
  v14 = 0x200000001;
  v15 = 3;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", v5, &v14, 3);
  *((_DWORD *)this + 1) = v5;
  *((_DWORD *)this + 2) = bswap32(*((_DWORD *)a2 + 2));
  result = udsp_header::flags_t::flags_t(&v14, bswap32(*((_DWORD *)a2 + 3)));
  *((_DWORD *)this + 3) = v14;
  *((_DWORD *)this + 4) = bswap32(*((_DWORD *)a2 + 4));
  *(_QWORD *)((char *)this + 20) = bswap64(*(_QWORD *)(a2 + 20));
  *(_QWORD *)((char *)this + 28) = bswap64(*(_QWORD *)(a2 + 28));
  v7 = *(_OWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 52);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *(_QWORD *)((char *)this + 52) = v8;
  *(_OWORD *)((char *)this + 36) = v7;
  if (!*((_DWORD *)this + 2))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Band size in sparse is zero", 0x16u);
  }
  for (i = 0; i != 28; ++i)
  {
    if (*((_BYTE *)this + i + 36))
    {
      v10 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      DiskImagesRuntimeException::DiskImagesRuntimeException(v10, "Reserved part isn't zeroed", 0x16u);
    }
  }
  return result;
}

_DWORD *udsp_header::flags_t::flags_t(_DWORD *this, int a2)
{
  unsigned int v2;
  _QWORD *exception;

  *this = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_24CEEDAA0;
    exception[1] = "flags_t";
    *((_DWORD *)exception + 8) = v2;
  }
  return this;
}

void DiskImage::get_user_data(DiskImage *this)
{
  DiskImagesRuntimeException *exception;
  void *v2;

  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "User data is not supported in this image format", 0x2Du);
}

void DiskImage::write_user_data(DiskImage *this, const __CFDictionary *a2)
{
  DiskImagesRuntimeException *exception;
  void *v3;

  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "User data is not supported in this image format", 0x2Du);
}

_QWORD *operator<<(_QWORD *a1, _DWORD *a2)
{
  const char *v3;
  uint64_t v4;

  switch(*a2)
  {
    case 0:
      v3 = "uninit";
      goto LABEL_4;
    case 1:
      v3 = "mapped";
LABEL_4:
      v4 = 6;
      goto LABEL_7;
    case 2:
      v3 = "unmapped";
      v4 = 8;
      goto LABEL_7;
    case 3:
      v3 = "error";
      v4 = 5;
LABEL_7:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (CompressedBackend::algo_t::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 30)
    {
      v3 = "no_match";
      v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &CompressedBackend::algo_t::strings[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

_QWORD *boost::icl::operator<<<char,std::char_traits<char>,boost::icl::discrete_interval<unsigned long long,std::less>>(_QWORD *a1, uint64_t a2)
{
  int v4;
  char *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  void *p_p;
  uint64_t v12;
  unint64_t v13;
  char *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  unsigned __int8 v26;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (*(_QWORD *)(a2 + 8) >= *(_QWORD *)a2)
      {
LABEL_4:
        if ((v4 & 2) != 0)
          v5 = "[";
        else
          v5 = "(";
        std::string::basic_string[abi:ne180100]<0>(&v24, v5);
        if ((v26 & 0x80u) == 0)
          v6 = &v24;
        else
          v6 = v24;
        if ((v26 & 0x80u) == 0)
          v7 = v26;
        else
          v7 = v25;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v6, v7);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
        v9 = (_QWORD *)std::ostream::operator<<();
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v10 = "]";
        else
          v10 = ")";
        std::string::basic_string[abi:ne180100]<0>(&__p, v10);
        if ((v23 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v23 & 0x80u) == 0)
          v12 = v23;
        else
          v12 = v22;
        goto LABEL_45;
      }
    }
    else if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8))
    {
      goto LABEL_4;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 < v13 && *(_QWORD *)a2 + 1 < v13)
      goto LABEL_4;
  }
  if ((v4 & 2) != 0)
    v15 = "[";
  else
    v15 = "(";
  std::string::basic_string[abi:ne180100]<0>(&v24, v15);
  if ((v26 & 0x80u) == 0)
    v16 = &v24;
  else
    v16 = v24;
  if ((v26 & 0x80u) == 0)
    v17 = v26;
  else
    v17 = v25;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v16, v17);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v18 = "]";
  else
    v18 = ")";
  std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  if ((v23 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v23 & 0x80u) == 0)
    v12 = v23;
  else
    v12 = v22;
LABEL_45:
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v12);
  if ((char)v23 < 0)
    operator delete(__p);
  if ((char)v26 < 0)
    operator delete(v24);
  return v19;
}

void sub_212F7C3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t DiskImage::const_extents_iterator_t::const_extents_iterator_t(uint64_t a1, _QWORD *a2)
{
  __int128 v4;

  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 8))(*a2);
  v4 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  return a1;
}

BOOL DiskImage::const_extents_iterator_t::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = DiskImage::base_extents_iterator_interface::operator==(*(_QWORD *)a1, *(_QWORD *)a2);
  if (result)
    return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return result;
}

BOOL DiskImage::base_extents_iterator_interface::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v2 != *(_QWORD *)v3)
    return 0;
  result = boost::icl::operator==<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)(v2 + 8), (unint64_t *)(v3 + 8));
  if (result)
  {
    if (*(_DWORD *)(v2 + 48) == *(_DWORD *)(v3 + 48))
      return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
    return 0;
  }
  return result;
}

BOOL DiskImage::const_extents_iterator_t::operator!=(uint64_t a1, uint64_t a2)
{
  return !DiskImage::base_extents_iterator_interface::operator==(*(_QWORD *)a1, *(_QWORD *)a2)
      || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40);
}

_QWORD *DiskImage::const_extents_iterator_t::make_val@<X0>(DiskImage::const_extents_iterator_t *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  _BYTE v7[28];
  _BYTE v8[336];
  uint64_t v9;
  uint64_t v10;

  result = *(_QWORD **)this;
  v5 = result[5];
  v6 = result[3];
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 3;
  if ((*(_BYTE *)(*(_QWORD *)result[1] + 8) & 1) != 0)
  {
    result = (_QWORD *)DIDebugLogsEnabled();
    if ((_DWORD)result)
    {
      *(_QWORD *)v7 = "DiskImage::const_extents_iterator_t::make_val() const";
      *(_QWORD *)&v7[8] = 45;
      *(_DWORD *)&v7[16] = 2;
      di_log::logger<di_log::log_printer<117ul>>::logger(v8, (__int128 *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Disk image is terminated, skipping ...", 38);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf((uint64_t)v8);
      return (_QWORD *)MEMORY[0x2199A89AC](&v10);
    }
  }
  else if (v5 < v6 && *((_DWORD *)this + 8) != 3)
  {
    result = (*(_QWORD *(**)(_BYTE *__return_ptr))*result)(v8);
    if (*(_DWORD *)&v8[24] != 3 && (*((_DWORD *)this + 10) & (1 << v8[24])) == 0)
    {
      do
      {
        result = *(_QWORD **)this;
        if (*(_QWORD *)(*(_QWORD *)this + 40) >= (unint64_t)(*(_BYTE *)(*(_QWORD *)this + 32) & 1)
                                                  + *(_QWORD *)(*(_QWORD *)this + 24))
          break;
        result[5] = (v8[16] & 1) + *(_QWORD *)&v8[8];
        result = (*(_QWORD *(**)(_BYTE *__return_ptr))*result)(v7);
        *(_OWORD *)&v8[12] = *(_OWORD *)&v7[12];
        *(_OWORD *)v8 = *(_OWORD *)v7;
        if (*(_DWORD *)&v7[24] == 3)
          break;
      }
      while ((*((_DWORD *)this + 10) & (1 << v7[24])) == 0);
    }
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v8[12];
  }
  return result;
}

void sub_212F7C6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v15 = *(_QWORD *)(*(_QWORD *)v14 + 24);
    *(_QWORD *)v13 = *(_QWORD *)(*(_QWORD *)v14 + 40);
    *(_QWORD *)(v13 + 8) = v15;
    *(_BYTE *)(v13 + 16) = 2;
    *(_DWORD *)(v13 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x212F7C6D8);
  }
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<117ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<117ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF06600;
  a1[45] = &unk_24CF06700;
  a1[46] = &unk_24CF06728;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF06600;
  a1[45] = &unk_24CF06688;
  a1[46] = &unk_24CF066B0;
  return a1;
}

void sub_212F7C7C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<117ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

DiskImage::const_extents_iterator_t *DiskImage::const_extents_iterator_t::operator++(DiskImage::const_extents_iterator_t *this)
{
  uint64_t v2;
  unint64_t v3;
  _OWORD v5[2];

  v2 = *(_QWORD *)this;
  v3 = (*((_BYTE *)this + 24) & 1) + *((_QWORD *)this + 2);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3 < (unint64_t)(*(_BYTE *)(v2 + 32) & 1) + *(_QWORD *)(v2 + 24))
  {
    DiskImage::const_extents_iterator_t::make_val(this, (uint64_t)v5);
    *(_OWORD *)((char *)this + 8) = v5[0];
    *(_OWORD *)((char *)this + 20) = *(_OWORD *)((char *)v5 + 12);
  }
  return this;
}

DiskImage::const_extents_iterator_t *DiskImage::const_extents_iterator_t::operator++@<X0>(DiskImage::const_extents_iterator_t *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 8))((_QWORD *)a2);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)a1 + 24);
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a1 + 10);
  return DiskImage::const_extents_iterator_t::operator++(a1);
}

void sub_212F7C8F0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t DiskImage::extents_t::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v5 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 40) = v5;
  std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100]((_QWORD *)(a1 + 56), a2 + 56);
  return a1;
}

uint64_t DiskImage::extents_t::back@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10[5];
  int v11;
  uint64_t v12[5];
  int v13;

  v4 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *(_QWORD *)a2 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  DiskImage::extents_t::begin(this, (uint64_t)v12);
  DiskImage::extents_t::end(this, (uint64_t)v10);
  while (!DiskImage::base_extents_iterator_interface::operator==(v12[0], v10[0]) || v13 != v11)
  {
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)v12, (uint64_t)&v8);
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v9 + 12);
    v5 = v8;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  v6 = v10[0];
  v10[0] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  result = v12[0];
  v12[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_212F7CB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = *(_QWORD *)(v15 - 64);
  *(_QWORD *)(v15 - 64) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  _Unwind_Resume(exception_object);
}

BOOL boost::icl::operator==<boost::icl::discrete_interval<unsigned long long,std::less>>(unint64_t *a1, unint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;

  v2 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v2 == 3)
    {
      v4 = *a1;
      v3 = a1[1];
      if (v3 >= *a1)
        goto LABEL_21;
    }
    else
    {
      v4 = *a1;
      v3 = a1[1];
      if (*a1 < v3)
        goto LABEL_21;
    }
  }
  else
  {
    v4 = *a1;
    v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3)
      goto LABEL_21;
  }
  if (!*((_BYTE *)a2 + 16))
  {
    v7 = a2[1];
    if (*a2 < v7 && *a2 + 1 < v7)
      goto LABEL_21;
    return 1;
  }
  if (*((_BYTE *)a2 + 16) == 3)
  {
    if (a2[1] < *a2)
      return 1;
  }
  else if (*a2 >= a2[1])
  {
    return 1;
  }
LABEL_21:
  if ((v2 & 2) != 0)
    v9 = v4;
  else
    v9 = v4 + 1;
  v10 = *a2;
  if ((a2[2] & 2) == 0)
    ++v10;
  return v10 == v9 && (a2[2] & 1) + a2[1] == (v2 & 1) + v3;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<117ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<117ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<117ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF06798;
  di_log::logger_buf<di_log::log_printer<117ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<117ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F7CFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<117ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 117;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 117;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_212F7D378(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF06798;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7D3EC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<114ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<114ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF06820;
  a1[45] = &unk_24CF06920;
  a1[46] = &unk_24CF06948;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF06820;
  a1[45] = &unk_24CF068A8;
  a1[46] = &unk_24CF068D0;
  return a1;
}

void sub_212F7E62C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<114ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<136ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<136ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF06A40;
  a1[45] = &unk_24CF06B40;
  a1[46] = &unk_24CF06B68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF06A40;
  a1[45] = &unk_24CF06AC8;
  a1[46] = &unk_24CF06AF0;
  return a1;
}

void sub_212F7E714(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<136ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<162ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<162ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF06C60;
  a1[45] = &unk_24CF06D60;
  a1[46] = &unk_24CF06D88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF06C60;
  a1[45] = &unk_24CF06CE8;
  a1[46] = &unk_24CF06D10;
  return a1;
}

void sub_212F7E7FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<162ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<114ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<114ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<114ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF069B8;
  di_log::logger_buf<di_log::log_printer<114ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<114ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F7EC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<114ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 114;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 114;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<136ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<136ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<136ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF06BD8;
  di_log::logger_buf<di_log::log_printer<136ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<136ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F7F204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<136ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 136;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 136;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<162ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<162ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<162ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<162ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<162ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF06DF8;
  di_log::logger_buf<di_log::log_printer<162ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<162ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<162ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F7F7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<162ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 162;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 162;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF069B8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7FA8C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF06BD8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7FB08(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<162ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF06DF8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F7FB84(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

unint64_t DiskImageIOBreaker::move_data_to_buffer(DiskImage::Context **this, DiskImageIOBreaker::ContextIOBreaker *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  _QWORD v12[2];

  result = DiskImage::Context::read(this[2], a2, a3);
  v12[0] = result;
  v12[1] = v7;
  if ((uint64_t)result <= 0)
  {
    if ((result & 0x80000000) == 0)
      v11 = result;
    else
      v11 = -(int)result;
    return -v11;
  }
  else
  {
    v8 = *((_QWORD *)a2 + 18);
    v9 = (*((_QWORD *)a3 + 18) - v8) & ~((uint64_t)(*((_QWORD *)a3 + 18) - v8) >> 63);
    if (v8 > v7 || v9 < result)
      return trim_data((uint64_t)a2, (uint64_t)a3, v9, v12);
  }
  return result;
}

uint64_t DiskImageIOBreaker::read(DiskImageIOBreaker *this, DiskImage::Context **a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  const sg_vec_ns::details::sg_vec_iterator *v4;
  DiskImage::Context **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  DiskImage::Context *v24;
  DiskImage::Context *v25;
  DiskImage::Context *v26;
  DiskImage::Context *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  void *v39;
  unint64_t *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  const sg_vec_ns::details::sg_vec_iterator *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  uint64_t v135;
  const sg_vec_ns::details::sg_vec_iterator *v136;
  DiskImage::Context **v138;
  uint64_t v139;
  void *v140;
  std::__shared_weak_count *v141;
  _OWORD v142[2];
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  __int128 v150;
  uint64_t v151;
  char v152;
  unint64_t *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  void *__src;
  std::__shared_weak_count *v157;
  unint64_t v158;
  _QWORD v159[8];
  unint64_t *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  DiskImage::Context *v166;
  void *v167;
  std::__shared_weak_count *v168;
  _BYTE v169[25];
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  char v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  __int128 v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  int v181;
  void *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187[2];
  __int128 v188;
  void *__dst;
  std::__shared_weak_count *v190;
  _BYTE v191[25];
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  char v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  uint64_t v200;
  char v201;
  void *__p;
  __int128 v203;
  _BYTE v204[120];
  void *v205;
  __int128 v206;
  _BYTE v207[40];
  _BYTE v208[72];
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  uint64_t v215;

  v4 = a4;
  v6 = a2;
  v215 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 56))
  {
    if (!a2[6]
      || (v7 = *((_QWORD *)a4 + 18) - *((_QWORD *)a3 + 18),
          *((_QWORD *)a4 + 9) - *((_QWORD *)a3 + 9) >= (unint64_t)a2[8] + (v7 & ~(v7 >> 63))))
    {
      DiskImage::Context::read(a2[2], a3, a4);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
  v167 = *(void **)a3;
  v168 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  *(_OWORD *)v169 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v169[9] = *(_OWORD *)((char *)a3 + 25);
  v170 = *((_QWORD *)a3 + 6);
  v171 = *(_OWORD *)((char *)a3 + 56);
  v172 = *(_OWORD *)((char *)a3 + 72);
  v173 = *(_OWORD *)((char *)a3 + 88);
  v174 = *((_BYTE *)a3 + 104);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  v175 = *((_QWORD *)a3 + 14);
  v176 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v16 = *((_QWORD *)a3 + 18);
  v14 = (char *)a3 + 144;
  v15 = v16;
  v177 = *((_OWORD *)v14 - 1);
  v178 = v16;
  v179 = v14[8];
  if ((unint64_t)v6[8] + ((*((_QWORD *)v4 + 18) - v16) & ~((*((_QWORD *)v4 + 18) - v16) >> 63)) <= *(_QWORD *)&v169[16])
  {
    v17 = DiskImageIOBreaker::move_data_to_buffer(v6, (DiskImageIOBreaker::ContextIOBreaker *)&v167, v4, a4);
    v15 = v18;
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v167, v17);
    if (v17 < 0)
    {
      v19 = v17;
      goto LABEL_188;
    }
  }
  else
  {
    v17 = 0;
  }
  v19 = v17;
  v136 = v4;
  v138 = v6;
  do
  {
    v20 = *((_QWORD *)v4 + 18);
    if (v19 == ((v20 - *(_QWORD *)v14) & ~((v20 - *(_QWORD *)v14) >> 63)))
      break;
    v162 = v17;
    v163 = v15;
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    v164 = *((_QWORD *)this + 8);
    v165 = v21;
    v139 = v19;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v20 = *((_QWORD *)v4 + 18);
    }
    v25 = v6[6];
    v24 = v6[7];
    v166 = v25;
    v27 = v6[3];
    v26 = v6[4];
    v28 = v178;
    v29 = (unint64_t)(v26 - v27 - 8) >> 3;
    if (v26 == v27)
      v30 = 0;
    else
      v30 = v29 + 1;
    v31 = (v20 - v178) & ~((v20 - v178) >> 63);
    v32 = (_QWORD)v24 * (_QWORD)v25;
    if (v32 >= v31)
      v33 = v31;
    else
      v33 = v32;
    __p = v204;
    v203 = xmmword_212FEB330;
    if (v30 < 6)
    {
      if (v27 == v26)
      {
        v30 = 0;
      }
      else
      {
        v45 = v29 + 1;
        v46 = (unint64_t *)&v21->__shared_owners_;
        v47 = v204;
        do
        {
          v48 = *(_QWORD *)v27;
          if (v21)
          {
            do
              v49 = __ldxr(v46);
            while (__stxr(v49 + 1, v46));
          }
          *v47 = v48;
          v47[1] = v21;
          v27 = (DiskImage::Context *)((char *)v27 + 8);
          v47[2] = v25;
          v47 += 3;
          --v45;
        }
        while (v45);
      }
    }
    else
    {
      v135 = v178;
      if (v30 >= 0x555555555555556)
        boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
      v34 = v33;
      v35 = v14;
      v36 = operator new(24 * v30);
      v37 = __p;
      if (__p)
      {
        v38 = v203;
        if ((_QWORD)v203)
        {
          v39 = __p;
          do
          {
            --v38;
            v39 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v39) + 24);
          }
          while (v38);
        }
        *(_QWORD *)&v203 = 0;
        if (v204 != v37)
          operator delete(v37);
      }
      *((_QWORD *)&v203 + 1) = v30;
      __p = v36;
      *(_QWORD *)&v203 = 0;
      if (v27 == v26)
      {
        v44 = 0;
        v41 = (char *)v36;
        v14 = v35;
        v6 = v138;
        v33 = v34;
        v28 = v135;
      }
      else
      {
        v40 = (unint64_t *)&v21->__shared_owners_;
        v41 = (char *)v36;
        v14 = v35;
        v6 = v138;
        v33 = v34;
        v28 = v135;
        do
        {
          v42 = *(_QWORD *)v27;
          if (v21)
          {
            do
              v43 = __ldxr(v40);
            while (__stxr(v43 + 1, v40));
          }
          *(_QWORD *)v41 = v42;
          *((_QWORD *)v41 + 1) = v21;
          *((_QWORD *)v41 + 2) = v25;
          v27 = (DiskImage::Context *)((char *)v27 + 8);
          v41 += 24;
        }
        while (v27 != v26);
        v44 = v203;
      }
      v30 = v44 - 0x5555555555555555 * ((v41 - (_BYTE *)v36) >> 3);
    }
    v4 = v136;
    v19 = v139;
    *(_QWORD *)&v203 = v30;
    v205 = v207;
    v206 = xmmword_212FEB330;
    boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v205, v30);
    v182 = __p;
    __dst = (char *)__p + 24 * v203;
    v153 = (unint64_t *)v205;
    v187[0] = (unint64_t *)((char *)v205 + 8 * v206);
    sg_vec_ref::sg_vec_ref((uint64_t)v208, (uint64_t *)&v182, (uint64_t *)&__dst, &v153, v187, v28, v33);
    sg_vec_ref::begin((sg_vec_ref *)v208, (uint64_t)&v182);
    sg_vec_ref::end((sg_vec_ref *)v208, (uint64_t)&__dst);
    v17 = DiskImageIOBreaker::move_data_to_buffer(v6, (DiskImageIOBreaker::ContextIOBreaker *)&v182, (const sg_vec_ns::details::sg_vec_iterator *)&__dst, v50);
    v15 = v51;
    v52 = v198;
    if (v198)
    {
      v53 = (unint64_t *)&v198->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v190;
    if (v190)
    {
      v56 = (unint64_t *)&v190->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = v184;
    if (v184)
    {
      v59 = (unint64_t *)&v184->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = v183;
    if (v183)
    {
      v62 = (unint64_t *)&v183->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if ((v17 & 0x8000000080000000) == 0x8000000080000000)
      goto LABEL_147;
    sg_vec_ref::begin((sg_vec_ref *)v208, (uint64_t)&__src);
    sg_vec_ref::end((sg_vec_ref *)v208, (uint64_t)&v153);
    v64 = v167;
    v140 = v167;
    v141 = v168;
    if (v168)
    {
      v65 = (unint64_t *)&v168->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v142[0] = *(_OWORD *)v169;
    *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)&v169[9];
    v143 = v170;
    v144 = v171;
    v145 = v172;
    v146 = v173;
    v147 = v174;
    v148 = v175;
    v149 = v176;
    if (v176)
    {
      v67 = (unint64_t *)&v176->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v150 = v177;
    v151 = v178;
    v152 = v179;
    __dst = v64;
    v190 = v141;
    if (v141)
    {
      v69 = (unint64_t *)&v141->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v196 = v147;
    v192 = v143;
    v197 = v148;
    *(_OWORD *)v191 = v142[0];
    *(_OWORD *)&v191[9] = *(_OWORD *)((char *)v142 + 9);
    v193 = v144;
    v194 = v145;
    v195 = v146;
    v198 = v149;
    if (v149)
    {
      v71 = (unint64_t *)&v149->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v73 = 0;
    v199 = v150;
    v200 = v151;
    v201 = 0;
    while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&__src, (uint64_t)&v153))
    {
      sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)v159);
      v74 = (std::__shared_weak_count *)v160;
      v187[0] = (unint64_t *)v159[7];
      v187[1] = v160;
      if (v160)
      {
        v75 = v160 + 1;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      v188 = v161;
      if (*((_QWORD *)&v161 + 1))
      {
        v77 = *(_QWORD *)&v191[16];
        if (v158 < *(_QWORD *)&v191[16])
          v77 = v158;
        if (v77 >= *((_QWORD *)&v188 + 1))
          v78 = *((_QWORD *)&v188 + 1);
        else
          v78 = v77;
        memmove(__dst, __src, v78);
        if (v78 <= 0)
        {
          *(_QWORD *)&v180 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/io_breaker.cpp:76:13)]";
          *((_QWORD *)&v180 + 1) = 97;
          v181 = 16;
          di_log::logger<di_log::log_printer<615ul>>::logger(&v182, &v180);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v185, (uint64_t)"IO error with sg: ", 18);
          operator<<(&v185);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v185, (uint64_t)" dest ", 6);
          operator<<(&v185);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v185, (uint64_t)" returned status ", 17);
          std::ostream::operator<<();
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf((uint64_t)&v182);
          MEMORY[0x2199A89AC](&v186);
          v79 = 1;
          if (v74)
          {
LABEL_97:
            v80 = (unint64_t *)&v74->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
        }
        else
        {
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__src, v78);
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__dst, v78);
          v79 = 0;
          v73 += v78;
          if (v74)
            goto LABEL_97;
        }
      }
      else
      {
        sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&__src);
        v79 = 2;
        if (v74)
          goto LABEL_97;
      }
      if ((v79 | 2) != 2)
        goto LABEL_106;
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v140, v73);
LABEL_106:
    v82 = v198;
    if (v198)
    {
      v83 = (unint64_t *)&v198->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = v190;
    if (v190)
    {
      v86 = (unint64_t *)&v190->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = v149;
    if (v149)
    {
      v89 = (unint64_t *)&v149->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v141;
    if (v141)
    {
      v92 = (unint64_t *)&v141->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = v155;
    if (v155)
    {
      v95 = (unint64_t *)&v155->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = v154;
    if (v154)
    {
      v98 = (unint64_t *)&v154->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = (std::__shared_weak_count *)v160;
    if (v160)
    {
      v101 = v160 + 1;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = v157;
    if (v157)
    {
      v104 = (unint64_t *)&v157->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v167, v17);
    sg_vec_ns::details::buffer_iterator::rtrim_written(&v171);
    v19 = v17 + v139;
LABEL_147:
    v106 = v214;
    if (v214)
    {
      v107 = (unint64_t *)&v214->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = v213;
    if (v213)
    {
      v110 = (unint64_t *)&v213->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v112 = v212;
    if (v212)
    {
      v113 = (unint64_t *)&v212->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = v211;
    if (v211)
    {
      v116 = (unint64_t *)&v211->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = v210;
    if (v210)
    {
      v119 = (unint64_t *)&v210->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = v209;
    if (v209)
    {
      v122 = (unint64_t *)&v209->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    if (*((_QWORD *)&v206 + 1) && v207 != v205)
      operator delete(v205);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&__p);
    v124 = v165;
    if (v165)
    {
      v125 = (unint64_t *)&v165->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v6 = v138;
  }
  while ((v17 & 0x8000000080000000) != 0x8000000080000000);
LABEL_188:
  v127 = v176;
  if (v176)
  {
    v128 = (unint64_t *)&v176->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v168;
  if (v168)
  {
    v131 = (unint64_t *)&v168->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  if (v17 < 0)
    v133 = v17;
  else
    v133 = 0;
  if (v133 >= 0)
    return v19;
  else
    return v133;
}

void sub_212F809A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5D0]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5F0]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x218]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x248]);
  sg_vec::~sg_vec((sg_vec *)&STACK[0x690]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x380]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

uint64_t DiskImageIOBreaker::verify_image(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

void DiskImageIOBreaker::~DiskImageIOBreaker(DiskImageIOBreaker *this)
{
  *(_QWORD *)this = &off_24CF06E78;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
}

{
  *(_QWORD *)this = &off_24CF06E78;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImageIOBreaker::get_block_size(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

uint64_t DiskImageIOBreaker::get_num_blocks(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t DiskImageIOBreaker::is_writable(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

uint64_t DiskImageIOBreaker::supports_unmap(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
}

uint64_t DiskImageIOBreaker::get_extents_iterator_interface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(a3 + 16));
}

_QWORD *DiskImageIOBreaker::_create_ctx(DiskImageIOBreaker *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
  if (!v5)
    return 0;
  v2 = (_QWORD *)operator new();
  DiskImageIOBreaker::ContextIOBreaker::ContextIOBreaker(v2, (uint64_t)this, &v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return v2;
}

void sub_212F80C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  MEMORY[0x2199A8A18](v10, 0x10A1C4073E172E3);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 40))(a10);
  _Unwind_Resume(a1);
}

uint64_t DiskImageIOBreaker::write(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = a2;
  return _Z8do_on_sgIZN18DiskImageIOBreaker5writeERN9DiskImage7ContextERK8sg_entryEUlRKT_RKT0_E_EDaOS7_S6_((uint64_t)&v4, a3);
}

uint64_t DiskImageIOBreaker::flush(uint64_t a1, uint64_t a2)
{
  return DiskImage::Context::flush(*(_QWORD **)(a2 + 16));
}

uint64_t DiskImageIOBreaker::unmap(uint64_t a1, uint64_t a2)
{
  return DiskImage::Context::unmap(*(_QWORD **)(a2 + 16));
}

_QWORD *DiskImageIOBreaker::ContextIOBreaker::ContextIOBreaker(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _QWORD v23[6];

  *a1 = off_24CF06F78;
  a1[1] = a2;
  v4 = *a3;
  *a3 = 0;
  a1[3] = 0;
  v5 = a1 + 3;
  a1[2] = v4;
  a1[4] = 0;
  a1[5] = 0;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  a1[7] = v6 + 1;
  a1[8] = v7;
  v8 = v7 + v6;
  a1[6] = v8 / (v6 + 1);
  if (v6 < v8)
  {
    v9 = 1;
    do
    {
      v10 = a1[6];
      v11 = (void *)operator new[]();
      bzero(v11, v10);
      v13 = (_QWORD *)a1[4];
      v12 = a1[5];
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((uint64_t)v13 - *v5) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<iovec>::__throw_length_error[abi:ne180100]();
        v16 = v12 - *v5;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        v23[4] = a1 + 5;
        if (v18)
          v19 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 5), v18);
        else
          v19 = 0;
        v20 = &v19[8 * v15];
        v23[0] = v19;
        v23[1] = v20;
        v23[3] = &v19[8 * v18];
        *(_QWORD *)v20 = v11;
        v23[2] = v20 + 8;
        std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer(v5, v23);
        v14 = (_QWORD *)a1[4];
        std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)v23);
      }
      else
      {
        *v13 = v11;
        v14 = v13 + 1;
        a1[4] = v14;
      }
      a1[4] = v14;
    }
    while (a1[7] > (unint64_t)v9++);
  }
  return a1;
}

void sub_212F80E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;

  va_start(va, a6);
  MEMORY[0x2199A8A00](v7, 0x1000C8077774924);
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v9 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  _Unwind_Resume(a1);
}

void DiskImageIOBreaker::ContextIOBreaker::~ContextIOBreaker(DiskImageIOBreaker::ContextIOBreaker *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_24CF06F78;
  v3 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = off_24CF06F78;
  v3 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  MEMORY[0x2199A8A18](this, 0x10A1C4073E172E3);
}

uint64_t std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = *(uint64_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = *v1;
    *v1 = 0;
    if (result)
      result = MEMORY[0x2199A8A00](result, 0x1000C8077774924);
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<char []>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        result = MEMORY[0x2199A8A00](result, 0x1000C8077774924);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<char []>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::unique_ptr<char []>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x2199A8A00](result, 0x1000C8077774924);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t _Z8do_on_sgIZN18DiskImageIOBreaker5writeERN9DiskImage7ContextERK8sg_entryEUlRKT_RKT0_E_EDaOS7_S6_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE v35[8];
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  _BYTE v38[8];
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41[18];
  void *__p;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[72];
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  sg_vec_ns::make(a2, v41);
  sg_vec_ref::begin((sg_vec_ref *)v45, (uint64_t)v38);
  sg_vec_ref::end((sg_vec_ref *)v45, (uint64_t)v35);
  v3 = DiskImage::Context::write(*(DiskImage::Context **)(*(_QWORD *)a1 + 16), (const sg_vec_ns::details::sg_vec_iterator *)v38, (const sg_vec_ns::details::sg_vec_iterator *)v35);
  v4 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v36;
  if (v36)
  {
    v8 = (unint64_t *)&v36->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v40;
  if (v40)
  {
    v11 = (unint64_t *)&v40->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v39;
  if (v39)
  {
    v14 = (unint64_t *)&v39->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v51;
  if (v51)
  {
    v17 = (unint64_t *)&v51->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v50;
  if (v50)
  {
    v20 = (unint64_t *)&v50->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v49;
  if (v49)
  {
    v23 = (unint64_t *)&v49->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v48;
  if (v48)
  {
    v26 = (unint64_t *)&v48->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v47;
  if (v47)
  {
    v29 = (unint64_t *)&v47->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v46;
  if (v46)
  {
    v32 = (unint64_t *)&v46->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v43 && &v44 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v41);
  return v3;
}

void sub_212F81540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  sg_vec::~sg_vec((sg_vec *)&a50);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<615ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<615ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF06FD8;
  a1[45] = &unk_24CF070D8;
  a1[46] = &unk_24CF07100;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF06FD8;
  a1[45] = &unk_24CF07060;
  a1[46] = &unk_24CF07088;
  return a1;
}

void sub_212F81614(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<615ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF07170;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F816E0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF07170;
  di_log::logger_buf<di_log::log_printer<615ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<615ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<615ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<615ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<615ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F81AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<615ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 615;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 615;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_stackable::get_identifier(di_stackable *this, DiskImage *a2)
{
  uint64_t v2;
  _QWORD v4[2];
  char v5;
  char *v6;

  v4[0] = (**(uint64_t (***)(di_stackable *, DiskImage *))this)(this, a2);
  v4[1] = v2;
  if (v2 == 0xFFFFFFFFLL)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v5;
  return ((uint64_t (*)(char **, _QWORD *))off_24CF07348[v2])(&v6, v4);
}

uint64_t di_stackable::get_stackable_source_identifier(di_stackable *this, DiskImage *a2)
{
  uint64_t v2;
  _QWORD v4[2];
  char v5;
  char *v6;

  v4[0] = (**(uint64_t (***)(di_stackable *, DiskImage *))this)(this, a2);
  v4[1] = v2;
  if (v2 == 0xFFFFFFFFLL)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v5;
  return ((uint64_t (*)(char **, _QWORD *))off_24CF07388[v2])(&v6, v4);
}

uint64_t DiskImageStackable::ContextStackable::get_bottom_async_cache(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24) - v2;
  v4 = v3 / 48;
  if (v3 < 49)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = v4 - 1;
    v7 = (int *)(v2 + 48 * v4 - 96);
    do
    {
      v8 = *v7;
      v7 -= 12;
      if (v8 != 2)
        break;
      ++v5;
    }
    while (v6-- > 1);
  }
  v10 = v4 + ~v5;
  if (v5)
    return v10;
  else
    return 0;
}

uint64_t DiskImageStackable::write(DiskImageStackable *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8;
  uint64_t v9;
  DiskImage::Context **v11;

  v8 = *((_QWORD *)a4 + 18);
  v9 = (*(uint64_t (**)(DiskImageStackable *))(*(_QWORD *)this + 32))(this);
  if (v8 > (*(uint64_t (**)(DiskImageStackable *))(*(_QWORD *)this + 24))(this) * v9)
    return -5;
  if (**((_DWORD **)this + 2))
    return -78;
  v11 = (DiskImage::Context **)*((_QWORD *)a2 + 2);
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)*v11 + 1) + 40))(*((_QWORD *)*v11 + 1))
    || **((_DWORD **)this + 2))
  {
    return -78;
  }
  return DiskImage::Context::write(*v11, a3, a4);
}

uint64_t DiskImageStackable::flush(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;
  uint64_t v4;

  v2 = *(_QWORD ***)(a2 + 16);
  v3 = *(_QWORD ***)(a2 + 24);
  if (v2 == v3)
    return 4294967218;
  v4 = 4294967218;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)(*v2)[1] + 40))((*v2)[1]))
    {
      v4 = DiskImage::Context::flush(*v2);
      if ((_DWORD)v4)
        break;
    }
    v2 += 2;
  }
  while (v2 != v3);
  return v4;
}

uint64_t DiskImageStackable::DiskImageStackable(uint64_t a1, _QWORD **a2, _BYTE *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  DiskImage *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  di_stackable *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t identifier;
  char v19;
  DiskImage *v20;
  uint64_t stackable_source_identifier;
  DiskImage *v22;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  const void *v41;
  di_stackable *v42;
  std::__shared_weak_count *v43;
  di_stackable *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *exception;
  const std::error_category *v66;
  _QWORD *v67;
  const std::error_category *v68;
  const char *v69;
  _QWORD v70[5];
  __int128 v71;
  std::__shared_weak_count *v72;
  di_stackable *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  di_stackable *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  DiskImage *v79;
  uint64_t v80;
  DiskImage *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CF071F0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_BYTE *)(a1 + 56) = 0;
  v7 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 24))(**a2);
  *(_BYTE *)(a1 + 48) = 0;
  if ((*a3 & 2) != 0)
  {
    v9 = a2[1];
    *(_QWORD *)&v71 = *(v9 - 3);
    v10 = *(v9 - 2);
    *((_QWORD *)&v71 + 1) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v9 = a2[1];
    }
    v13 = v9 - 3;
    while (v13 != *a2)
    {
      v14 = (di_stackable *)*(v13 - 3);
      v13 -= 3;
      v76 = v14;
      v15 = (std::__shared_weak_count *)v13[1];
      v77 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      identifier = di_stackable::get_identifier((di_stackable *)v71, v8);
      v19 = identifier;
      v80 = identifier;
      v81 = v20;
      stackable_source_identifier = di_stackable::get_stackable_source_identifier(v76, v20);
      v78 = stackable_source_identifier;
      v79 = v22;
      if (v19)
      {
LABEL_11:
        if ((_BYTE)stackable_source_identifier)
        {
LABEL_12:
          if (v80 != v78 || v81 != v79)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            *exception = &off_24CF07908;
            v66 = std::generic_category();
            exception[1] = 166;
            exception[2] = v66;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 48) = 0;
            exception[7] = "Corrupted shadow file(s) chain";
          }
        }
        else
        {
          v29 = 1;
          while (v29 != 16)
          {
            if (*((unsigned __int8 *)&v78 + v29++))
            {
              if ((unint64_t)(v29 - 2) <= 0xE)
                goto LABEL_12;
              break;
            }
          }
        }
      }
      else
      {
        v27 = 1;
        while (v27 != 16)
        {
          if (*((unsigned __int8 *)&v80 + v27++))
          {
            if ((unint64_t)(v27 - 2) <= 0xE)
              goto LABEL_11;
            break;
          }
        }
      }
      std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v71, (uint64_t *)&v76);
      v24 = v77;
      if (v77)
      {
        v25 = (unint64_t *)&v77->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  v34 = (uint64_t)*a2;
  if (a2[1] != *a2)
  {
    v35 = 0;
    v36 = 0;
    v69 = "Block size mismatch in DiskImageStackable";
    do
    {
      v37 = (_QWORD *)(v34 + 24 * v36);
      v38 = *(_QWORD *)(a1 + 40);
      if (v38 != (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v37 + 24))(*v37))
        goto LABEL_88;
      if (*((_DWORD *)v37 + 4) == 2)
      {
        v39 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
        if (v39 >= 2 && v36 != v39 - 2)
        {
          v41 = (const void *)(*a2)[a2[1] - *a2 - 3];
          if (v41)
          {
            {
              v69 = "Currently, cache can only be added directly above plugin";
LABEL_88:
              v67 = __cxa_allocate_exception(0x40uLL);
              *v67 = &off_24CF07908;
              v68 = std::generic_category();
              v67[1] = 4294967274;
              v67[2] = v68;
              *((_BYTE *)v67 + 24) = 0;
              *((_BYTE *)v67 + 48) = 0;
              v67[7] = v69;
            }
          }
        }
      }
      v42 = (di_stackable *)*v37;
      v76 = v42;
      v43 = (std::__shared_weak_count *)v37[1];
      v77 = v43;
      v44 = v42;
      if (v43)
      {
        v45 = (unint64_t *)&v43->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
        v44 = (di_stackable *)*v37;
      }
      if ((*(unsigned int (**)(di_stackable *))(*(_QWORD *)v44 + 96))(v44))
      {
        LOBYTE(v78) = 1;
        std::allocate_shared[abi:ne180100]<DiskImageIOBreaker,std::allocator<DiskImageIOBreaker>,DiskImage &,BOOL,void>((uint64_t)v42, (char *)&v78, &v71);
        std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)v37, &v71);
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
        if (*((_QWORD *)&v71 + 1))
        {
          v48 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        *(_BYTE *)(a1 + 48) = 1;
      }
      LODWORD(v71) = *((_DWORD *)v37 + 4);
      *((_QWORD *)&v71 + 1) = *v37;
      v50 = (std::__shared_weak_count *)v37[1];
      v72 = v50;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v73 = v76;
      v74 = v77;
      if (v77)
      {
        v53 = (unint64_t *)&v77->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v75 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v37 + 32))(*v37);
      std::vector<DiskImageStackable::stackable_layer>::emplace_back<DiskImageStackable::stackable_layer&>(v6, (uint64_t)&v71);
      if (*((_DWORD *)v37 + 4) == 2)
        v35 |= (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v37 + 40))(*v37);
      v55 = v74;
      if (v74)
      {
        v56 = (unint64_t *)&v74->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = v72;
      if (v72)
      {
        v59 = (unint64_t *)&v72->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v77;
      if (v77)
      {
        v62 = (unint64_t *)&v77->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      ++v36;
      v34 = (uint64_t)*a2;
    }
    while (v36 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    if ((v35 & 1) != 0)
    {
      v70[0] = MEMORY[0x24BDAC760];
      v70[1] = 0x40000000;
      v70[2] = ___ZN18DiskImageStackableC2EONSt3__16vectorINS0_5tupleIJNS0_10shared_ptrI9DiskImageEENS_4roleEEEENS0_9allocatorIS7_EEEEN12di_stackable8config_tE_block_invoke;
      v70[3] = &__block_descriptor_tmp_6;
      v70[4] = a1;
      std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::reset[abi:ne180100]((uint64_t)v7);
      DiskImageStackable::cacheFlusher_t::cacheFlusher_t(v7, (uint64_t)v70, 600000000);
      *(_BYTE *)(a1 + 144) = 1;
    }
  }
  return a1;
}

void sub_212F82544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::~__optional_destruct_base[abi:ne180100](v11);
  std::vector<DiskImageStackable::stackable_layer>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DiskImageStackable::stackable_layer>::emplace_back<DiskImageStackable::stackable_layer&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::allocator<sg_entry>::allocate_at_least[abi:ne180100](v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[48 * v9];
    v18 = &v13[48 * v12];
    std::construct_at[abi:ne180100]<DiskImageStackable::stackable_layer,DiskImageStackable::stackable_layer&,DiskImageStackable::stackable_layer*>((uint64_t)v16, a2);
    v17 = v16 + 48;
    std::vector<DiskImageStackable::stackable_layer>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<DiskImageStackable::stackable_layer>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<DiskImageStackable::stackable_layer,DiskImageStackable::stackable_layer&,DiskImageStackable::stackable_layer*>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

void sub_212F826D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DiskImageStackable::stackable_layer>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18DiskImageStackableC2EONSt3__16vectorINS0_5tupleIJNS0_10shared_ptrI9DiskImageEENS_4roleEEEENS0_9allocatorIS7_EEEEN12di_stackable8config_tE_block_invoke(uint64_t a1)
{
  return DiskImageStackable::flush_caches(*(_QWORD *)(a1 + 32));
}

uint64_t DiskImageStackable::flush_caches(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(this + 16);
  v2 = *(_QWORD *)(this + 24);
  while (v1 != v2)
  {
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8));
    if ((_DWORD)this)
      v3 = *(_DWORD *)v1 == 2;
    else
      v3 = 0;
    if (v3)
    {
      v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 136))(*(_QWORD *)(v1 + 8));
      this = DiskImage::Context::flush(v4);
      if (v4)
        this = (*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4);
    }
    v1 += 48;
  }
  return this;
}

void sub_212F82778(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void DiskImageStackable::~DiskImageStackable(DiskImageStackable *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CF071F0;
  DiskImageStackable::flush_caches((uint64_t)this);
  std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 56);
  v2 = (void **)((char *)this + 16);
  std::vector<DiskImageStackable::stackable_layer>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  DiskImageStackable::~DiskImageStackable(this);
  JUMPOUT(0x2199A8A18);
}

unint64_t DiskImageStackable::read_from_next(uint64_t a1, DiskImageStackable::ContextStackable *a2, sg_vec_ns::details::sg_vec_iterator *a3, uint64_t a4, unint64_t a5, uint64_t *a6, int a7, int a8, uint64_t a9, DiskImage::extents_t *a10)
{
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t sg_from_next;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v34[2];
  char v35;
  _BYTE v36[8];
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;

  v15 = *(_QWORD *)(a1 + 40);
  v16 = *((unsigned __int8 *)a6 + 16);
  v17 = *a6;
  v18 = a6[1];
  if ((v16 & 2) != 0)
    v19 = *a6;
  else
    v19 = v17 + 1;
  v34[0] = v19 * v15;
  v34[1] = ((v16 & 1) + v18 - v17 + (int)(((v16 >> 1) & 1) - 1) + v19) * v15;
  v35 = 2;
  sg_vec_ns::details::sg_vec_iterator::subvec(a3, (uint64_t)v34, a4, (uint64_t)v36);
  sg_from_next = DiskImageStackable::read_sg_from_next(a1, a2, (uint64_t)v36, (uint64_t)&v39, a5, a7, a8, a9, a10);
  v21 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return sg_from_next;
}

void sub_212F829E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t DiskImageStackable::read_sg_from_next(uint64_t a1, DiskImageStackable::ContextStackable *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, DiskImage::extents_t *a9)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  _BOOL4 is_trim_required;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _OWORD v54[2];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _OWORD v67[2];
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  _QWORD v78[2];
  char v79;
  unint64_t v80;
  unint64_t v81;

  v14 = DiskImageStackable::read_from_idx();
  v16 = v14;
  v80 = v14;
  v81 = v15;
  if ((v14 & 0x8000000000000000) == 0 || !(_DWORD)v14)
  {
    v17 = *(_QWORD *)(a3 + 144);
    v18 = v15 < v17 || v14 > ((*(_QWORD *)(a4 + 144) - v17) & ~((uint64_t)(*(_QWORD *)(a4 + 144) - v17) >> 63));
    is_trim_required = 0;
    if (a5 && v18)
    {
      v20 = *(_QWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a4 + 144) - v17;
      v22 = v21 & ~(v21 >> 63);
      if (v22 <= v20)
        v22 = *(_QWORD *)(a1 + 40);
      if (v21 <= 0)
        v23 = 0;
      else
        v23 = v22;
      v78[0] = v17 / v20;
      v78[1] = (v17 + v20 + v23 - 1) / v20;
      v79 = 2;
      is_trim_required = DiskImageStackable::is_trim_required(a1, (uint64_t)a2, &v80, (uint64_t)v78, a5, a9);
    }
    v51 = is_trim_required;
    v24 = *(std::__shared_weak_count **)(a3 + 8);
    v65 = *(_QWORD *)a3;
    v66 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    v67[0] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)(a3 + 25);
    v68 = *(_QWORD *)(a3 + 48);
    v69 = *(_OWORD *)(a3 + 56);
    v70 = *(_OWORD *)(a3 + 72);
    v71 = *(_OWORD *)(a3 + 88);
    v72 = *(_BYTE *)(a3 + 104);
    v27 = *(std::__shared_weak_count **)(a3 + 120);
    v73 = *(_QWORD *)(a3 + 112);
    v74 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v75 = *(_OWORD *)(a3 + 128);
    v76 = *(_QWORD *)(a3 + 144);
    v77 = *(_BYTE *)(a3 + 152);
    v30 = *(std::__shared_weak_count **)(a4 + 8);
    v52 = *(_QWORD *)a4;
    v53 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v54[0] = *(_OWORD *)(a4 + 16);
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)(a4 + 25);
    v55 = *(_QWORD *)(a4 + 48);
    v56 = *(_OWORD *)(a4 + 56);
    v57 = *(_OWORD *)(a4 + 72);
    v58 = *(_OWORD *)(a4 + 88);
    v59 = *(_BYTE *)(a4 + 104);
    v33 = *(std::__shared_weak_count **)(a4 + 120);
    v60 = *(_QWORD *)(a4 + 112);
    v61 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(_QWORD *)(a4 + 144);
    v62 = *(_OWORD *)(a4 + 128);
    v63 = v36;
    v64 = *(_BYTE *)(a4 + 152);
    v16 = DiskImageStackable::sync_read_data_to_diskimgs(a1, a2, (uint64_t)&v65, (uint64_t)&v52, &v80, a5);
    v37 = v61;
    if (v61)
    {
      v38 = (unint64_t *)&v61->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v53;
    if (v53)
    {
      v41 = (unint64_t *)&v53->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v74;
    if (v74)
    {
      v44 = (unint64_t *)&v74->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v66;
    if (v66)
    {
      v47 = (unint64_t *)&v66->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if ((v16 & 0x8000000000000000) == 0 || !(_DWORD)v16)
    {
      v49 = *(_QWORD *)(a4 + 144);
      if (v51)
        return trim_data(a3, a4, (v49 - *(_QWORD *)(a3 + 144)) & ~((v49 - *(_QWORD *)(a3 + 144)) >> 63), &v80);
      else
        return v49 - v81;
    }
  }
  return v16;
}

uint64_t DiskImageStackable::get_di_extents_for_io@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a4 + 16) & 2) != 0)
    v8 = *(_QWORD *)a4;
  else
    v8 = *(_QWORD *)a4 + 1;
  v9 = (*(_BYTE *)(a4 + 16) & 1) + *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(result + 16);
  v11 = *(_QWORD *)(result + 24);
  v12 = *(_QWORD *)(v10 + 48 * a3 + 40);
  if (v12 < v9)
    v9 = *(_QWORD *)(v10 + 48 * a3 + 40);
  *(_QWORD *)&v30 = v8;
  *((_QWORD *)&v30 + 1) = v9;
  LOBYTE(v31) = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4) - 1 <= a3 || v12 <= *(_QWORD *)(v10 + 48 * a3 + 88))
    goto LABEL_19;
  v13 = result;
  *(_QWORD *)&v28 = *(_QWORD *)(v10 + 48 * a3 + 88);
  *((_QWORD *)&v28 + 1) = v12;
  LOBYTE(v29) = 2;
  result = boost::icl::intersects<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v28, (uint64_t)&v30);
  if ((result & 1) == 0)
  {
    v10 = *(_QWORD *)(v13 + 16);
LABEL_19:
    v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3);
    *(_QWORD *)a5 = *(_QWORD *)(v10 + 48 * a3 + 8);
    *(_OWORD *)(a5 + 8) = v30;
    *(_QWORD *)(a5 + 24) = v31;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = v20;
    *(_DWORD *)(a5 + 48) = 6;
    *(_QWORD *)(a5 + 56) = &off_24CEF4398;
    *(_QWORD *)(a5 + 80) = a5 + 56;
    return result;
  }
  v24 = v28;
  v25 = v29;
  boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v24, (unint64_t *)&v30, (uint64_t)&v26);
  v14 = v30;
  if ((v31 & 2) == 0)
    v14 = v30 + 1;
  v15 = v26;
  if ((v27 & 2) == 0)
    v15 = v26 + 1;
  *(_QWORD *)&v30 = v14;
  *((_QWORD *)&v30 + 1) = v15;
  LOBYTE(v31) = 2;
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * a3);
  v32 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 48 * a3 + 8);
  v33 = v30;
  v34 = v31;
  v35 = 0;
  v36 = v16;
  v37 = 6;
  v17 = v38;
  v38[0] = &off_24CEF4398;
  v39 = v38;
  v18 = operator new(0x20uLL);
  v22 = v18 + 4;
  v23 = (char *)(v18 + 4);
  *(_OWORD *)v18 = v26;
  v18[2] = v27;
  *((_DWORD *)v18 + 6) = 1;
  __p = v18;
  DiskImage::extents_t_transformer::make_transformed_extents((DiskImage::extents_t *)&v32, (uint64_t)&__p, a5);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v39 == v38)
  {
    v19 = 4;
  }
  else
  {
    if (!v39)
      goto LABEL_23;
    v19 = 5;
    v17 = v39;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_23:
  result = v35;
  v35 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_212F83064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35)
{
  _QWORD *v35;
  uint64_t v37;

  if (__p)
    operator delete(__p);
  if (a35 == v35)
  {
    v37 = 4;
  }
  else
  {
    if (!a35)
      goto LABEL_8;
    v37 = 5;
    v35 = a35;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v37))(v35);
LABEL_8:
  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 40))(a29);
  _Unwind_Resume(exception_object);
}

BOOL boost::icl::intersects<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 result;
  unint64_t v11;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v2 == 3)
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_QWORD *)(a1 + 8);
      if (v4 < *(_QWORD *)a1)
        return 0;
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 >= v4)
        return 0;
    }
  }
  else
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 >= v4 || *(_QWORD *)a1 + 1 >= v4)
      return 0;
  }
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v6 == 3)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      if (v7 < *(_QWORD *)a2)
        return 0;
    }
    else
    {
      v8 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 >= v7)
        return 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v7 || *(_QWORD *)a2 + 1 >= v7)
      return 0;
  }
  if ((_BYTE)v2)
  {
    if (*(_BYTE *)(a1 + 16) == 3)
    {
      if (v4 < v3)
        return 0;
    }
    else if (v3 >= v4)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (v3 >= v4 || v3 + 1 >= v4)
      return result;
  }
  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8)
        return 0;
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (v8 >= v7 || v8 + 1 >= v7)
      return result;
  }
  if ((v6 & 2) != 0)
    v11 = v8;
  else
    v11 = v8 + 1;
  if ((v2 & 1) + v4 - 1 < v11)
    return 0;
  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8)
        return 0;
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (v8 >= v7 || v8 + 1 >= v7)
      return result;
  }
  if (!(_BYTE)v2)
  {
    result = 0;
    if (v3 >= v4 || v3 + 1 >= v4)
      return result;
    goto LABEL_60;
  }
  if (v2 == 3)
  {
    if (v4 >= v3)
      goto LABEL_60;
    return 0;
  }
  if (v3 >= v4)
    return 0;
LABEL_60:
  if ((v2 & 2) == 0)
    ++v3;
  return (v6 & 1) + v7 - 1 >= v3;
}

BOOL DiskImageStackable::is_trim_required(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, DiskImage::extents_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v30;
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[2];
  char v36;
  _BYTE v37[32];
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[32];
  uint64_t v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a3[1];
  if (*a3 <= v6)
    v8 = *(_QWORD *)(a1 + 40);
  else
    v8 = *a3;
  if (*a3)
    v9 = v8;
  else
    v9 = 0;
  v35[0] = v7 / v6;
  v35[1] = (v7 + v9) / v6;
  v36 = 2;
  if (a5)
  {
    v14 = 0;
    v15 = 0;
    v30 = a5 - 1;
    v16 = 1;
    while (1)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) == 2)
        goto LABEL_37;
      if (a6 && v30 == v15)
        DiskImage::extents_t::extents_t((DiskImage::extents_t *)v41, a6);
      else
        DiskImageStackable::get_di_extents_for_io(a1, a2, v15, a4, (uint64_t)v41);
      DiskImageStackable::get_di_extents_for_io(a1, a2, v15, (uint64_t)v35, (uint64_t)v37);
      DiskImage::extents_t::begin((DiskImage::extents_t *)v37, (uint64_t)v34);
      DiskImage::extents_t::end((DiskImage::extents_t *)v37, (uint64_t)v33);
      DiskImage::extents_t::begin((DiskImage::extents_t *)v41, (uint64_t)v32);
      DiskImage::extents_t::end((DiskImage::extents_t *)v41, (uint64_t)v31);
      v17 = std::equal[abi:ne180100]<DiskImage::const_extents_iterator_t,DiskImage::const_extents_iterator_t>(v34, v33, v32, v31);
      v18 = v31[0];
      v31[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      v19 = v32[0];
      v32[0] = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v20 = v33[0];
      v33[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v21 = v34[0];
      v34[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v22 = v40;
      if (v40 == v39)
      {
        v22 = v39;
        v23 = 4;
      }
      else
      {
        if (!v40)
          goto LABEL_27;
        v23 = 5;
      }
      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_27:
      v24 = v38;
      v38 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v25 = v44;
      if (v44 == v43)
      {
        v25 = v43;
        v26 = 4;
      }
      else
      {
        if (!v44)
          goto LABEL_34;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_34:
      v27 = v42;
      v42 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
      if (!v17)
        return v16;
LABEL_37:
      v16 = ++v15 < a5;
      v14 += 48;
      if (a5 == v15)
        return v16;
    }
  }
  return 0;
}

void sub_212F8353C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49)
{
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 24))(a24);
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a30 + 24))(a30);
  if (a49 == v50)
  {
    v53 = 4;
  }
  else
  {
    if (!a49)
      goto LABEL_14;
    v53 = 5;
    v50 = a49;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v53))(v50);
LABEL_14:
  if (a43)
    (*(void (**)(uint64_t))(*(_QWORD *)a43 + 40))(a43);
  v54 = *(_QWORD **)(v51 - 104);
  if (v54 == v49)
  {
    v55 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_21;
    v55 = 5;
    v49 = *(_QWORD **)(v51 - 104);
  }
  (*(void (**)(_QWORD *))(*v49 + 8 * v55))(v49);
LABEL_21:
  v56 = *(_QWORD *)(v51 - 152);
  *(_QWORD *)(v51 - 152) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
  _Unwind_Resume(exception_object);
}

BOOL std::equal[abi:ne180100]<DiskImage::const_extents_iterator_t,DiskImage::const_extents_iterator_t>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL4 v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[6];
  uint64_t v16;
  unint64_t v17[3];
  int v18;
  _QWORD v19[6];
  uint64_t v20;
  unint64_t v21[3];
  int v22;

  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v20, a1);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v19, a2);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v16, a3);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v15, a4);
  if (DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v20, (uint64_t)v19))
  {
    while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v16, (uint64_t)v15))
    {
      v7 = boost::icl::operator==<boost::icl::discrete_interval<unsigned long long,std::less>>(v21, v17);
      if (v22 != v18 || !v7)
        goto LABEL_10;
      DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v20);
      DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v16);
      if (!DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v20, (uint64_t)v19))
        break;
    }
  }
  if (DiskImage::const_extents_iterator_t::operator==((uint64_t)&v20, (uint64_t)v19))
    v9 = DiskImage::const_extents_iterator_t::operator==((uint64_t)&v16, (uint64_t)v15);
  else
LABEL_10:
    v9 = 0;
  v10 = v15[0];
  v15[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v12 = v19[0];
  v19[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = v20;
  v20 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return v9;
}

void sub_212F837CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v23;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 24))(a21);
  v23 = *(_QWORD *)(v21 - 80);
  *(_QWORD *)(v21 - 80) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageStackable::sync_read_data_to_diskimgs(uint64_t a1, DiskImageStackable::ContextStackable *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  BOOL v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  char v156[8];
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  char v162[8];
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  _OWORD v167[2];
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  uint64_t v176;
  char v177;
  _BYTE v178[528];
  char v179;
  __n128 v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  void *__p;
  std::__shared_weak_count *v185;
  _BYTE v186[40];
  uint64_t v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count *v197;
  _QWORD *v198;
  __int128 v199;
  _QWORD v200[17];

  v200[15] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *a5;
  v8 = a5[1] % v6;
  v9 = v8 == 0;
  v10 = v6 - v8;
  if (v9)
    v10 = 0;
  if (v7 < v10)
    return 0;
  v15 = a1;
  v178[0] = 0;
  v179 = 0;
  v16 = *(std::__shared_weak_count **)(a3 + 8);
  v17 = (v7 - v10) / v6 * v6;
  v165 = *(_QWORD *)a3;
  v166 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = *(_OWORD *)(a3 + 56);
  v167[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v167 + 9) = *(_OWORD *)(a3 + 25);
  v168 = *(_QWORD *)(a3 + 48);
  v169 = v20;
  v21 = *(_OWORD *)(a3 + 88);
  v170 = *(_OWORD *)(a3 + 72);
  v171 = v21;
  v172 = *(_BYTE *)(a3 + 104);
  v22 = *(std::__shared_weak_count **)(a3 + 120);
  v173 = *(_QWORD *)(a3 + 112);
  v174 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_QWORD *)(a3 + 144);
  v175 = *(_OWORD *)(a3 + 128);
  v176 = v25;
  v177 = *(_BYTE *)(a3 + 152);
  sg_vec_ns::generate_vec_ref((uint64_t)&v165, a4, a5[1] + v10, v17, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v180);
  std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v178);
  sg_vec_ref::sg_vec_ref((sg_vec_ref *)v178, (uint64_t)&v180);
  v179 = 1;
  v26 = v194;
  if (v194)
  {
    v27 = (unint64_t *)&v194->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v192;
  if (v192)
  {
    v30 = (unint64_t *)&v192->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v190;
  if (v190)
  {
    v33 = (unint64_t *)&v190->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v188;
  if (v188)
  {
    v36 = (unint64_t *)&v188->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v185;
  if (v185)
  {
    v39 = (unint64_t *)&v185->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v182;
  if (v182)
  {
    v42 = (unint64_t *)&v182->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v174;
  if (v174)
  {
    v45 = (unint64_t *)&v174->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v166;
  if (v166)
  {
    v48 = (unint64_t *)&v166->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sg_vec_ns::details::sg_vec_iterator::operator+=(a3, v17);
  sg_vec_ns::details::buffer_iterator::rtrim_written((_QWORD *)(a3 + 56));
  sg_vec_ref::begin((sg_vec_ref *)v178, (uint64_t)&v180);
  sg_vec_ns::details::sg_vec_iterator::operator=(a3, (uint64_t)&v180);
  v50 = v183;
  if (v183)
  {
    v51 = (unint64_t *)&v183->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v54 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sg_vec_ref::end((sg_vec_ref *)v178, (uint64_t)&v180);
  sg_vec_ns::details::sg_vec_iterator::operator=(a4, (uint64_t)&v180);
  v56 = v183;
  if (v183)
  {
    v57 = (unint64_t *)&v183->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v60 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = a6 - 1;
  if (v62 < 0)
  {
LABEL_192:
    v11 = (*(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144)) & ~((uint64_t)(*(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144)) >> 63);
    goto LABEL_193;
  }
  v154 = v15;
  while (1)
  {
    v63 = *(_DWORD *)(*(_QWORD *)(v15 + 16) + 48 * v62);
    if (v63 != 1)
      break;
LABEL_190:
    if (v62-- <= 0)
      goto LABEL_192;
  }
  if (!v63)
    goto LABEL_192;
  v64 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v62) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64) & 1) == 0)
    goto LABEL_192;
  v198 = v200;
  v199 = xmmword_212FEB330;
  v65 = *(_QWORD *)(a3 + 24);
  v66 = *(_QWORD *)(a4 + 144) - *(_QWORD *)(a3 + 144);
  v67 = v66 & ~(v66 >> 63);
  while (!sg_vec_ns::details::sg_vec_iterator::operator==(a3, a4))
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)(a3 + 56));
    v68 = *(std::__shared_weak_count **)(a3 + 120);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = *(_QWORD *)(a3 + 144);
    if (((*(_QWORD *)(a4 + 144) - v71) & (unint64_t)~((*(_QWORD *)(a4 + 144) - v71) >> 63)) >= *(_QWORD *)(a3 + 136))
      v72 = *(_QWORD *)(a3 + 136);
    else
      v72 = (*(_QWORD *)(a4 + 144) - v71) & ~((*(_QWORD *)(a4 + 144) - v71) >> 63);
    if (!v68)
      goto LABEL_88;
    v73 = (unint64_t *)&v68->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
      if (!v72)
        goto LABEL_96;
LABEL_89:
      v75 = *(_QWORD *)a3;
      v76 = *(_QWORD *)(a3 + 8);
      v180.n128_u64[0] = *(_QWORD *)a3;
      v180.n128_u64[1] = v76;
      if (v76)
      {
        v77 = (unint64_t *)(v76 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v181 = v72;
      v80 = (uint64_t)v198;
      v79 = v199;
      v81 = (__n128 *)&v198[3 * v199];
      if ((_QWORD)v199 == *((_QWORD *)&v199 + 1))
      {
        boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>((uint64_t *)&v198, v81, (const char *)1, &v180, &v159);
        v88 = (std::__shared_weak_count *)v180.n128_u64[1];
        if (v180.n128_u64[1])
        {
          v89 = (unint64_t *)(v180.n128_u64[1] + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }
      else
      {
        v81->n128_u64[0] = v75;
        v81->n128_u64[1] = v180.n128_u64[1];
        *(_QWORD *)(v80 + 24 * v79 + 16) = v72;
        *(_QWORD *)&v199 = v79 + 1;
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=(a3, v72);
    }
    else
    {
LABEL_88:
      if (v72)
        goto LABEL_89;
LABEL_96:
      sg_vec_ns::details::sg_vec_iterator::operator++(a3, (uint64_t)v162);
      v82 = v164;
      if (v164)
      {
        v83 = (unint64_t *)&v164->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = v163;
      if (v163)
      {
        v86 = (unint64_t *)&v163->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
  }
  sg_vec::sg_vec((uint64_t *)&v180, (uint64_t)&v198, v65, v67);
  sg_vec_ref::begin((sg_vec_ref *)&v187, (uint64_t)&v159);
  sg_vec_ref::end((sg_vec_ref *)&v187, (uint64_t)v156);
  v91 = sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v159, (uint64_t)v156);
  v92 = v158;
  if (v158)
  {
    v93 = (unint64_t *)&v158->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v157;
  if (v157)
  {
    v96 = (unint64_t *)&v157->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v161;
  if (v161)
  {
    v99 = (unint64_t *)&v161->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v160;
  if (v160)
  {
    v102 = (unint64_t *)&v160->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (!v91)
        goto LABEL_131;
      goto LABEL_156;
    }
  }
  if (v91)
    goto LABEL_156;
LABEL_131:
  sg_vec_ref::begin((sg_vec_ref *)&v187, (uint64_t)&v159);
  sg_vec_ref::end((sg_vec_ref *)&v187, (uint64_t)v156);
  v11 = DiskImageStackable::ContextStackable::write_cache(a2, v62, (const sg_vec_ns::details::sg_vec_iterator *)&v159, (const sg_vec_ns::details::sg_vec_iterator *)v156);
  v104 = v158;
  if (v158)
  {
    v105 = (unint64_t *)&v158->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v157;
  if (v157)
  {
    v108 = (unint64_t *)&v157->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v161;
  if (v161)
  {
    v111 = (unint64_t *)&v161->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v160;
  if (!v160)
    goto LABEL_150;
  v114 = (unint64_t *)&v160->__shared_owners_;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (v115)
  {
LABEL_150:
    if (v11 < 0)
      goto LABEL_151;
    goto LABEL_156;
  }
  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v113);
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_156;
LABEL_151:
  if (!(_DWORD)v11)
  {
LABEL_156:
    v116 = v197;
    v15 = v154;
    if (v197)
    {
      v117 = (unint64_t *)&v197->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v119 = v196;
    if (v196)
    {
      v120 = (unint64_t *)&v196->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = v195;
    if (v195)
    {
      v123 = (unint64_t *)&v195->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v125 = v193;
    if (v193)
    {
      v126 = (unint64_t *)&v193->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = v191;
    if (v191)
    {
      v129 = (unint64_t *)&v191->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v131 = v189;
    if (v189)
    {
      v132 = (unint64_t *)&v189->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    if (v185 && v186 != __p)
      operator delete(__p);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v180);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v198);
    goto LABEL_190;
  }
  v136 = v197;
  if (v197)
  {
    v137 = (unint64_t *)&v197->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v196;
  if (v196)
  {
    v140 = (unint64_t *)&v196->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v195;
  if (v195)
  {
    v143 = (unint64_t *)&v195->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v193;
  if (v193)
  {
    v146 = (unint64_t *)&v193->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v191;
  if (v191)
  {
    v149 = (unint64_t *)&v191->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v189;
  if (v189)
  {
    v152 = (unint64_t *)&v189->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (v185 && v186 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v180);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v198);
LABEL_193:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v178);
  return v11;
}

void sub_212F844C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4E0]);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(v1 - 240);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

uint64_t DiskImageStackable::ContextStackable::write_cache(DiskImageStackable::ContextStackable *this, unint64_t a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  if (*((_BYTE *)this + 48) && *((_QWORD *)this + 5) <= a2)
    return 0;
  else
    return DiskImage::Context::write(*(DiskImage::Context **)(*((_QWORD *)this + 2) + 16 * a2), a3, a4);
}

unint64_t DiskImageStackable::read_from_idx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, char a6, BOOL a7, sg_vec_ref *a8)
{
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  sg_vec_ref *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  sg_vec_ref *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t sg_from_next;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  _QWORD *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v255;
  sg_vec_ref *v256;
  __int128 v257;
  _OWORD v258[2];
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  char v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  char v267;
  __int128 v268;
  _OWORD v269[2];
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  char v274;
  __int128 v275;
  __int128 v276;
  unint64_t v277;
  char v278;
  void *__p;
  std::__shared_weak_count *v280;
  char *v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  __int128 v290;
  _BYTE v291[25];
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  char v296;
  __int128 v297;
  __int128 v298;
  unint64_t v299;
  char v300;
  __int128 v301;
  _OWORD v302[2];
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  char v307;
  __int128 v308;
  __int128 v309;
  unint64_t v310;
  char v311;
  unint64_t v312;
  unint64_t v313;
  unsigned __int8 v314;
  _QWORD v315[6];
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  char v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  _OWORD v324[2];
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  char v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  __int128 v332;
  uint64_t v333;
  char v334;
  __int128 v335;
  _OWORD v336[2];
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  char v341;
  __int128 v342;
  __int128 v343;
  unint64_t v344;
  char v345;
  unint64_t v346;
  uint64_t v347;
  __int128 v348;
  _BYTE v349[25];
  uint64_t v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  char v354;
  __int128 v355;
  __int128 v356;
  unint64_t v357;
  char v358;
  std::__shared_weak_count *v359;
  std::__shared_weak_count *v360;
  std::__shared_weak_count *v361;
  std::__shared_weak_count *v362;
  std::__shared_weak_count *v363;
  _BYTE v364[32];
  uint64_t v365;
  _BYTE v366[24];
  _BYTE *v367;
  uint64_t v368;

  v12 = (_QWORD *)a1;
  v368 = *MEMORY[0x24BDAC8D0];
  v250 = (unint64_t *)(a3 + 144);
  v13 = *(_QWORD *)(a1 + 40);
  v253 = *(_QWORD *)(a3 + 144);
  v14 = v253 % v13;
  v15 = v13 - v253 % v13;
  v16 = *(_QWORD *)(a3 + 8);
  if (v14)
    v17 = v15;
  else
    v17 = 0;
  *(_QWORD *)&v335 = *(_QWORD *)a3;
  *((_QWORD *)&v335 + 1) = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v336[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v336 + 9) = *(_OWORD *)(a3 + 25);
  v337 = *(_QWORD *)(a3 + 48);
  v338 = *(_OWORD *)(a3 + 56);
  v339 = *(_OWORD *)(a3 + 72);
  v340 = *(_OWORD *)(a3 + 88);
  v341 = *(_BYTE *)(a3 + 104);
  v20 = *(_QWORD *)(a3 + 120);
  *(_QWORD *)&v342 = *(_QWORD *)(a3 + 112);
  *((_QWORD *)&v342 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v343 = *(_OWORD *)(a3 + 128);
  v344 = *v250;
  v345 = *(_BYTE *)(a3 + 152);
  v23 = (std::__shared_weak_count *)a4[1];
  v322 = *a4;
  v323 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v324[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v324 + 9) = *(_OWORD *)((char *)a4 + 25);
  v325 = a4[6];
  v26 = *(_OWORD *)(a4 + 9);
  v326 = *(_OWORD *)(a4 + 7);
  v327 = v26;
  v328 = *(_OWORD *)(a4 + 11);
  v329 = *((_BYTE *)a4 + 104);
  v27 = (std::__shared_weak_count *)a4[15];
  v330 = a4[14];
  v331 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v31 = a4[18];
  v30 = a4 + 18;
  v332 = *((_OWORD *)v30 - 1);
  v333 = v31;
  v334 = *((_BYTE *)v30 + 8);
  v32 = *(_QWORD *)(a1 + 40);
  v248 = v30;
  v33 = *v250;
  v34 = *v30 - *v250;
  v35 = v34 & ~(v34 >> 63);
  if (v35 <= v32)
    v35 = *(_QWORD *)(a1 + 40);
  if (v34 <= 0)
    v36 = 0;
  else
    v36 = v35;
  *(_QWORD *)&v320 = v33 / v32;
  *((_QWORD *)&v320 + 1) = (v32 + v33 + v36 - 1) / v32;
  LOBYTE(v321) = 2;
  DiskImageStackable::get_di_extents_for_io(a1, a2, a5, (uint64_t)&v320, (uint64_t)v364);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[3] - v12[2]) >> 4) - 1 != a5)
    goto LABEL_31;
  v37 = operator new(0x20uLL);
  v281 = (char *)(v37 + 4);
  *(_OWORD *)v37 = v320;
  v37[2] = v321;
  *((_DWORD *)v37 + 6) = 1;
  __p = v37;
  v280 = (std::__shared_weak_count *)(v37 + 4);
  DiskImage::extents_t_transformer::make_transformed_extents((DiskImage::extents_t *)v364, (uint64_t)&__p, (uint64_t)&v348);
  DiskImage::extents_t::operator=((uint64_t)v364, (uint64_t)&v348);
  v38 = (__int128 *)*((_QWORD *)&v352 + 1);
  if (*((__int128 **)&v352 + 1) == &v351)
  {
    v39 = 4;
    v38 = &v351;
    goto LABEL_26;
  }
  if (*((_QWORD *)&v352 + 1))
  {
    v39 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
  }
  v40 = *(_QWORD *)&v349[16];
  *(_QWORD *)&v349[16] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  if (__p)
  {
    v280 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
LABEL_31:
  DiskImage::extents_t::begin((DiskImage::extents_t *)v364, (uint64_t)&v316);
  v256 = a8;
  DiskImage::extents_t::end((DiskImage::extents_t *)v364, (uint64_t)v315);
  v255 = 0;
  v249 = a5 + 1;
  v251 = v12;
  v252 = a5;
  while (1)
  {
    if (!DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v316, (uint64_t)v315))
    {
      v124 = 2;
LABEL_267:
      v185 = v256;
      goto LABEL_268;
    }
    v41 = v317;
    v42 = v318;
    v43 = v319;
    v44 = v344;
    v45 = v12[5];
    v46 = v344 / v45;
    if ((v319 & 2) != 0)
      v47 = v317;
    else
      v47 = v317 + 1;
    v312 = v344 / v45;
    v313 = v47;
    v314 = 2;
    v48 = v47 >= v46;
    v49 = v47 - v46;
    if (v49 == 0 || !v48)
      v49 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
    if (v49)
      break;
LABEL_150:
    v115 = (v43 & 1) + v42 - v41 + (int)(((v43 >> 1) & 1) - 1);
    v116 = v45 * v115 - v17;
    if (v333 - v44 < v116)
      v116 = v333 - v44;
    if ((_QWORD)v327 - (_QWORD)v339 < v116)
    {
      v124 = 4;
      goto LABEL_267;
    }
    *(_QWORD *)&v348 = v45 * v47;
    *((_QWORD *)&v348 + 1) = v45 * (v115 + v47);
    v349[0] = 2;
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v335, (uint64_t)&v348, (uint64_t)&v322, (uint64_t)&__p);
    v346 = -78;
    v117 = a2;
    if (((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4) - 1 != v252 || *(_BYTE *)(a2 + 56) == 0 || a7)
    {
LABEL_157:
      v121 = DiskImage::Context::read(*(DiskImage::Context **)(*(_QWORD *)(v117 + 16) + 16 * v252), (const sg_vec_ns::details::sg_vec_iterator *)&__p, (const sg_vec_ns::details::sg_vec_iterator *)&v285);
      v123 = v122;
      v346 = v121;
      v347 = v122;
      goto LABEL_158;
    }
    v118 = *(_QWORD *)(v12[2] + 48 * v252 + 24);
    *(_OWORD *)v349 = 0u;
    v348 = 0u;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v118 + 72))(&v348);
    if ((_QWORD)v348)
    {
      v119 = v348 + ((v289 - v284) & ~((uint64_t)(v289 - v284) >> 63)) - 1;
      v120 = 1
           - (v348
            + ((v289 - v284) & ~((uint64_t)(v289 - v284) >> 63)))
           + v119 / (unint64_t)v348 * v348
           + *((_QWORD *)&v348 + 1) * v348
           + v119;
      v117 = a2;
      if (v287 - v282 < v120)
        goto LABEL_157;
    }
    else
    {
      v117 = a2;
      if ((a6 & 1) == 0)
        goto LABEL_157;
    }
    v183 = DiskImage::Context::read(*(DiskImage::Context **)(*(_QWORD *)(*(_QWORD *)(v117 + 16) + 16 * v252) + 16), (const sg_vec_ns::details::sg_vec_iterator *)&__p, (const sg_vec_ns::details::sg_vec_iterator *)&v285);
    v121 = v183;
    v123 = v184;
    v346 = v183;
    v347 = v184;
    a7 = v184 < v284 || v183 > ((*v248 - *v250) & ~((uint64_t)(*v248 - *v250) >> 63));
LABEL_158:
    if (v121 < 0 && (_DWORD)v121)
    {
      v124 = 1;
    }
    else
    {
      v125 = v284;
      v126 = v289;
      if ((a6 & 1) != 0)
      {
        if (a7)
        {
          v127 = *v248 - *v250;
          if (v127 <= v121)
            v127 = v121;
          v268 = v335;
          if (*((_QWORD *)&v335 + 1))
          {
            v128 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
            do
              v129 = __ldxr(v128);
            while (__stxr(v129 + 1, v128));
          }
          v269[0] = v336[0];
          *(_OWORD *)((char *)v269 + 9) = *(_OWORD *)((char *)v336 + 9);
          v270 = v337;
          v271 = v338;
          v272 = v339;
          v273 = v340;
          v274 = v341;
          v275 = v342;
          if (*((_QWORD *)&v342 + 1))
          {
            v130 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
            do
              v131 = __ldxr(v130);
            while (__stxr(v131 + 1, v130));
          }
          v276 = v343;
          v277 = v344;
          v278 = v345;
          sg_vec_ns::generate_vec_ref((uint64_t *)&v268, (uint64_t)&v322, v127 & ~(v127 >> 63), v123, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v348);
          std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v256);
          sg_vec_ref::sg_vec_ref(v256, (uint64_t)&v348);
          *((_BYTE *)v256 + 528) = 1;
          v132 = v363;
          if (v363)
          {
            v133 = (unint64_t *)&v363->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v135 = v362;
          if (v362)
          {
            v136 = (unint64_t *)&v362->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          v138 = v361;
          if (v361)
          {
            v139 = (unint64_t *)&v361->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          v141 = v360;
          if (v360)
          {
            v142 = (unint64_t *)&v360->__shared_owners_;
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          v144 = v359;
          if (v359)
          {
            v145 = (unint64_t *)&v359->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          v147 = (std::__shared_weak_count *)v352;
          if ((_QWORD)v352)
          {
            v148 = (unint64_t *)(v352 + 8);
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          v150 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
          if (*((_QWORD *)&v275 + 1))
          {
            v151 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          v153 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
          if (*((_QWORD *)&v268 + 1))
          {
            v154 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          sg_vec_ref::begin(v256, (uint64_t)&v348);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v335, (uint64_t)&v348);
          v156 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
          if (*((_QWORD *)&v355 + 1))
          {
            v157 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          v159 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
          if (*((_QWORD *)&v348 + 1))
          {
            v160 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          sg_vec_ref::end(v256, (uint64_t)&v348);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v322, (uint64_t)&v348);
          v162 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
          if (*((_QWORD *)&v355 + 1))
          {
            v163 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v165 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
          if (*((_QWORD *)&v348 + 1))
          {
            v166 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          a7 = 1;
          v168 = v346;
        }
        else
        {
          a7 = 0;
          v168 = v121;
        }
        v253 = v123;
      }
      else if (v123 == v344)
      {
        v168 = v121;
      }
      else
      {
        v168 = trim_data((uint64_t)&v335, (uint64_t)&v322, v12[5] * v115, &v346);
        v346 = v168;
        v347 = v169;
        a7 = v168 != v12[5] * v115;
      }
      v170 = v126;
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v335, v168);
      v17 = 0;
      a6 = 0;
      v255 += v346;
      v124 = 4 * (v123 + v121 < ((v170 - v125) & ~((uint64_t)(v170 - v125) >> 63)) + v125);
    }
    v171 = v288;
    if (v288)
    {
      v172 = (unint64_t *)&v288->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    v174 = v286;
    if (v286)
    {
      v175 = (unint64_t *)&v286->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    v177 = v283;
    if (v283)
    {
      v178 = (unint64_t *)&v283->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    v180 = v280;
    if (v280)
    {
      v181 = (unint64_t *)&v280->__shared_owners_;
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    if (v124)
      goto LABEL_267;
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v316);
  }
  v50 = DiskImageStackable::read_from_next((uint64_t)v12, (DiskImageStackable::ContextStackable *)a2, (sg_vec_ns::details::sg_vec_iterator *)&v335, (uint64_t)&v322, v249, (uint64_t *)&v312, a6 & 1, a7, (uint64_t)v256, (DiskImage::extents_t *)v364);
  v346 = v50;
  v347 = v51;
  if ((v50 & 0x8000000000000000) != 0 && (_DWORD)v50)
  {
    v124 = 1;
    goto LABEL_267;
  }
  v52 = v253;
  if (v51 < v44)
    v52 = v51;
  v253 = v52;
  v53 = v344;
  if (v51 >= v344)
  {
    v54 = v51 + v50 > v12[5] * (v47 - 1);
    v55 = v256;
    if (v50 <= ((*v248 - *v250) & ~((uint64_t)(*v248 - *v250) >> 63)))
    {
      a7 = 0;
      goto LABEL_114;
    }
  }
  else
  {
    v54 = v51 + v50 > v12[5] * (v47 - 1);
    v55 = v256;
  }
  v301 = v335;
  if (*((_QWORD *)&v335 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v302[0] = v336[0];
  *(_OWORD *)((char *)v302 + 9) = *(_OWORD *)((char *)v336 + 9);
  v304 = v338;
  v305 = v339;
  v306 = v340;
  v307 = v341;
  v303 = v337;
  v308 = v342;
  if (*((_QWORD *)&v342 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v309 = v343;
  v310 = v344;
  v311 = v345;
  sg_vec_ns::generate_vec_ref((uint64_t *)&v301, (uint64_t)&v322, v50, v347, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v348);
  std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v55);
  sg_vec_ref::sg_vec_ref(v55, (uint64_t)&v348);
  *((_BYTE *)v55 + 528) = 1;
  v60 = v363;
  if (v363)
  {
    v61 = (unint64_t *)&v363->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v362;
  if (v362)
  {
    v64 = (unint64_t *)&v362->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v361;
  if (v361)
  {
    v67 = (unint64_t *)&v361->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v360;
  if (v360)
  {
    v70 = (unint64_t *)&v360->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v359;
  if (v359)
  {
    v73 = (unint64_t *)&v359->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)v352;
  if ((_QWORD)v352)
  {
    v76 = (unint64_t *)(v352 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
  if (*((_QWORD *)&v308 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
  if (*((_QWORD *)&v301 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  sg_vec_ref::begin(v55, (uint64_t)&v348);
  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v335, (uint64_t)&v348);
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
  if (*((_QWORD *)&v355 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  sg_vec_ref::end(v55, (uint64_t)&v348);
  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v322, (uint64_t)&v348);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
  if (*((_QWORD *)&v355 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  a7 = 1;
  v53 = v344;
LABEL_114:
  v290 = v335;
  if (*((_QWORD *)&v335 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  *(_OWORD *)v291 = v336[0];
  *(_OWORD *)&v291[9] = *(_OWORD *)((char *)v336 + 9);
  v293 = v338;
  v294 = v339;
  v295 = v340;
  v296 = v341;
  v292 = v337;
  v297 = v342;
  if (*((_QWORD *)&v342 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  v298 = v343;
  v299 = v344;
  v300 = v345;
  if (a7)
    v100 = 0;
  else
    v100 = (v313 - v312 + (v314 & 1) + ((v314 >> 1) & 1) - 1) * v251[5];
  v101 = v100 - v347 + *(_QWORD *)&v291[8];
  if (v346 < v101)
    v101 = v346;
  if (v100)
    v102 = v101;
  else
    v102 = v346;
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v290, v102);
  sg_vec_ns::details::buffer_iterator::rtrim_written(&v293);
  v348 = v290;
  v290 = 0uLL;
  *(_OWORD *)v349 = *(_OWORD *)v291;
  *(_OWORD *)&v349[9] = *(_OWORD *)&v291[9];
  v350 = v292;
  v351 = v293;
  v352 = v294;
  v353 = v295;
  v354 = v296;
  v355 = v297;
  v297 = 0uLL;
  v356 = v298;
  v358 = v300;
  v357 = v299;
  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v335, (uint64_t)&v348);
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
  if (*((_QWORD *)&v355 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
  if (*((_QWORD *)&v297 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v44 = v344;
  v255 += v344 - v53;
  if (v54)
  {
    v17 = 0;
    a6 = 0;
    v12 = v251;
    v45 = v251[5];
    goto LABEL_150;
  }
  a6 = 0;
  v124 = 4;
  v185 = v256;
  v12 = v251;
LABEL_268:
  v186 = v315[0];
  v315[0] = 0;
  if (v186)
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186);
  v187 = v316;
  v316 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187);
  if (v124 != 2)
  {
    if (v124 != 4)
      goto LABEL_350;
LABEL_349:
    v346 = v255;
    v347 = v253;
    goto LABEL_350;
  }
  if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v335, (uint64_t)&v322))
    goto LABEL_349;
  if (!DiskImage::extents_t::empty((DiskImage::extents_t *)v364))
  {
    DiskImage::extents_t::back((DiskImage::extents_t *)v364, (uint64_t)&v348);
    if (v12[5] * *((_QWORD *)&v348 + 1) >= (unint64_t)*v248)
      goto LABEL_349;
  }
  sg_from_next = DiskImageStackable::read_sg_from_next((uint64_t)v12, (DiskImageStackable::ContextStackable *)a2, (uint64_t)&v335, (uint64_t)&v322, v249, a6 & 1, a7, (int)v185, (DiskImage::extents_t *)v364);
  v189 = sg_from_next;
  v191 = v190;
  v346 = sg_from_next;
  v347 = v190;
  if ((sg_from_next & 0x8000000000000000) == 0 || !(_DWORD)sg_from_next)
  {
    if ((a6 & 1) != 0)
    {
      v257 = v335;
      if (*((_QWORD *)&v335 + 1))
      {
        v192 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
      }
      v258[0] = v336[0];
      *(_OWORD *)((char *)v258 + 9) = *(_OWORD *)((char *)v336 + 9);
      v260 = v338;
      v261 = v339;
      v259 = v337;
      v262 = v340;
      v263 = v341;
      v264 = v342;
      if (*((_QWORD *)&v342 + 1))
      {
        v194 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
      }
      v265 = v343;
      v266 = v344;
      v267 = v345;
      sg_vec_ns::generate_vec_ref((uint64_t *)&v257, (uint64_t)&v322, sg_from_next, v347, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v348);
      std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v185);
      sg_vec_ref::sg_vec_ref(v185, (uint64_t)&v348);
      *((_BYTE *)v185 + 528) = 1;
      v196 = v363;
      if (v363)
      {
        v197 = (unint64_t *)&v363->__shared_owners_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      v199 = v362;
      if (v362)
      {
        v200 = (unint64_t *)&v362->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v202 = v361;
      if (v361)
      {
        v203 = (unint64_t *)&v361->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v205 = v360;
      if (v360)
      {
        v206 = (unint64_t *)&v360->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v208 = v359;
      if (v359)
      {
        v209 = (unint64_t *)&v359->__shared_owners_;
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      v211 = (std::__shared_weak_count *)v352;
      if ((_QWORD)v352)
      {
        v212 = (unint64_t *)(v352 + 8);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v214 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
      if (*((_QWORD *)&v264 + 1))
      {
        v215 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      v217 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
      if (*((_QWORD *)&v257 + 1))
      {
        v218 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
      sg_vec_ref::begin(v185, (uint64_t)&v348);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v335, (uint64_t)&v348);
      v220 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
      if (*((_QWORD *)&v355 + 1))
      {
        v221 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v223 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
      if (*((_QWORD *)&v348 + 1))
      {
        v224 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      sg_vec_ref::end(v185, (uint64_t)&v348);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v322, (uint64_t)&v348);
      v226 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
      if (*((_QWORD *)&v355 + 1))
      {
        v227 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      v229 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
      if (*((_QWORD *)&v348 + 1))
      {
        v230 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      v189 = v346;
      v253 = v191;
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v335, v189);
    v255 += v346;
    goto LABEL_349;
  }
LABEL_350:
  v232 = v367;
  if (v367 == v366)
  {
    v233 = 4;
    v232 = v366;
LABEL_354:
    (*(void (**)(void))(*v232 + 8 * v233))();
  }
  else if (v367)
  {
    v233 = 5;
    goto LABEL_354;
  }
  v234 = v365;
  v365 = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 40))(v234);
  v235 = v331;
  if (v331)
  {
    v236 = (unint64_t *)&v331->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v323;
  if (v323)
  {
    v239 = (unint64_t *)&v323->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
  if (*((_QWORD *)&v342 + 1))
  {
    v242 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
  if (*((_QWORD *)&v335 + 1))
  {
    v245 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  return v346;
}

void sub_212F85EE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)(v1 - 112);
  if (v3 == (_QWORD *)(v1 - 136))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 136);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD *)(v1 - 160);
  *(_QWORD *)(v1 - 160) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5E0]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x570]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x680]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x610]);
  _Unwind_Resume(a1);
}

void sg_vec_ns::generate_vec_ref(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, sg_vec_ref *a6@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  uint64_t v29;
  char v30;

  v6 = (std::__shared_weak_count *)a1[1];
  v18 = *a1;
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v20[0] = *((_OWORD *)a1 + 1);
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)a1 + 25);
  v21 = a1[6];
  v22 = *(_OWORD *)(a1 + 7);
  v23 = *(_OWORD *)(a1 + 9);
  v24 = *(_OWORD *)(a1 + 11);
  v25 = *((_BYTE *)a1 + 104);
  v9 = (std::__shared_weak_count *)a1[15];
  v26 = a1[14];
  v27 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v28 = *((_OWORD *)a1 + 8);
  v29 = a1[18];
  v30 = *((_BYTE *)a1 + 152);
  sg_vec_ns::generate_vec_ref((uint64_t)&v18, a2, a4, a3, a5, a6);
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_212F86230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL DiskImage::extents_t::empty(DiskImage::extents_t *this)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];
  _QWORD v7[6];

  DiskImage::extents_t::begin(this, (uint64_t)v7);
  DiskImage::extents_t::end(this, (uint64_t)v6);
  v2 = DiskImage::const_extents_iterator_t::operator==((uint64_t)v7, (uint64_t)v6);
  v3 = v6[0];
  v6[0] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = v7[0];
  v7[0] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_212F862C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageStackable::verify_image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3 == v4)
    return 1;
  v7 = v3 + 48;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 - 40) + 56))(*(_QWORD *)(v7 - 40), a2, a3);
    if ((_DWORD)result)
      v9 = v7 == v4;
    else
      v9 = 1;
    v7 += 48;
  }
  while (!v9);
  return result;
}

uint64_t DiskImageStackable::unmap(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v2
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 80))(*(_QWORD *)(v2 + 8))
    || **(_DWORD **)(a1 + 16))
  {
    return 0;
  }
  else
  {
    return DiskImage::Context::unmap(**(_QWORD ***)(a2 + 16));
  }
}

_QWORD *DiskImageStackable::cacheFlusher_t::cacheFlusher_t(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.di_stackable.cache.flusher");
  workqueue::workqueue::workqueue(a1, __p, 1);
  if (v8 < 0)
    operator delete(__p[0]);
  workqueue::workqueue::create_recurrent_block(a1, a2, a3, (uint64_t)(a1 + 8));
  return a1;
}

void sub_212F86470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  workqueue::workqueue::~workqueue(v15);
  _Unwind_Resume(a1);
}

_QWORD *DiskImageStackable::stackable_extents_iterator_interface::make_val@<X0>(DiskImageStackable::stackable_extents_iterator_interface *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  char v5;

  v2 = *((_QWORD *)this + 3);
  v4[0] = *((_QWORD *)this + 5);
  v4[1] = v2;
  v5 = 2;
  return DiskImageStackable::stackable_extents_iterator_interface::get_next_extent_recursive(this, (uint64_t)v4, 0, a2);
}

_QWORD *DiskImageStackable::stackable_extents_iterator_interface::get_next_extent_recursive@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  void *__p;
  void *v42;
  char *v43;
  _QWORD v44[2];
  unint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  _QWORD v49[3];
  char v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = result[6];
  v7 = *(_QWORD *)(v6 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 24) - v7) >> 4) == a3)
    goto LABEL_22;
  v9 = result;
  v10 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    v12 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v11 || *(_QWORD *)a2 + 1 >= v11)
      goto LABEL_21;
LABEL_5:
    if ((v10 & 1) + (uint64_t)(int)(((v10 >> 1) & 1) - 1) - v12 + v11)
      goto LABEL_6;
LABEL_22:
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    return result;
  }
  if (v10 != 3)
  {
    v12 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v11)
      goto LABEL_21;
    goto LABEL_5;
  }
  v12 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11 >= *(_QWORD *)a2)
    goto LABEL_5;
LABEL_21:
  if (!boost::icl::identity_element<unsigned long long>::value(void)::_value)
    goto LABEL_22;
LABEL_6:
  v13 = result[7];
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48 * a3 + 8) + 32))(*(_QWORD *)(v7 + 48 * a3 + 8));
  v15 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v14)
    v17 = v14;
  else
    v17 = *(_QWORD *)a2;
  if (v16 >= v14)
    v18 = v14;
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 16 * a3);
  v49[0] = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 48 * a3 + 8);
  v49[1] = v17;
  v49[2] = v18;
  v50 = 2;
  v51 = 0;
  v52 = v19;
  v53 = 7;
  v20 = v54;
  v54[0] = &off_24CEF4398;
  v55 = v54;
  if (v14 < v16)
  {
    v21 = v14;
    v22 = operator new(0x20uLL);
    v42 = v22 + 4;
    v43 = (char *)(v22 + 4);
    *v22 = v21;
    v22[1] = v16;
    *((_BYTE *)v22 + 16) = 2;
    *((_DWORD *)v22 + 6) = 2;
    __p = v22;
    DiskImage::extents_t_transformer::make_transformed_extents((DiskImage::extents_t *)v49, (uint64_t)&__p, (uint64_t)v44);
    DiskImage::extents_t::operator=((uint64_t)v49, (uint64_t)v44);
    v23 = v48;
    if (v48 == v47)
    {
      v24 = 4;
      v23 = v47;
    }
    else
    {
      if (!v48)
      {
LABEL_27:
        v26 = v46;
        v46 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
        v15 = *(_QWORD *)a2;
        goto LABEL_32;
      }
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
    goto LABEL_27;
  }
LABEL_32:
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
    v27 = v15;
  else
    v27 = v15 + 1;
  DiskImage::extents_t::begin((DiskImage::extents_t *)v49, (uint64_t)v44);
  v28 = v46;
  v29 = v44[0];
  v44[0] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  DiskImage::extents_t::begin((DiskImage::extents_t *)v49, (uint64_t)v44);
  DiskImage::extents_t::end((DiskImage::extents_t *)v49, (uint64_t)&__p);
  v30 = a3 + 1;
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)v44, (uint64_t)&__p))
  {
    v31 = v45;
    if ((_DWORD)v46)
    {
      if ((_DWORD)v46 != v28)
        break;
    }
    else
    {
      v36[0] = v27;
      v36[1] = v45;
      v37 = 2;
      DiskImageStackable::stackable_extents_iterator_interface::get_next_extent_recursive(&v38, v9, v36, v30);
      if (v28)
      {
        if (v40 != v28)
          break;
      }
      else
      {
        v28 = v40;
      }
      v27 = v39;
      if (v39 != v31)
        break;
    }
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)v44);
    v27 = v31;
  }
  v32 = __p;
  __p = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 24))(v32);
  v33 = v44[0];
  v44[0] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  v34 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 16) & 2) == 0)
    ++v34;
  *(_QWORD *)a4 = v34;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v28;
  if (v55 == v54)
  {
    v35 = 4;
  }
  else
  {
    if (!v55)
      goto LABEL_59;
    v35 = 5;
    v20 = v55;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v35))(v20);
LABEL_59:
  result = v51;
  v51 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  return result;
}

void sub_212F86880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a32;
  if (a32 == (_QWORD *)(v33 + 56))
  {
    v37 = 4;
    v36 = (_QWORD *)(v33 + 56);
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:
  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 40))(a26);
  if (__p)
    operator delete(__p);
  v38 = *(_QWORD **)(v34 - 96);
  if (v38 == v32)
  {
    v39 = 4;
  }
  else
  {
    if (!v38)
      goto LABEL_15;
    v39 = 5;
    v32 = *(_QWORD **)(v34 - 96);
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v39))(v32);
LABEL_15:
  v40 = *(_QWORD *)(v34 - 144);
  *(_QWORD *)(v34 - 144) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  _Unwind_Resume(exception_object);
}

__n128 DiskImageStackable::stackable_extents_iterator_interface::clone@<Q0>(DiskImageStackable::stackable_extents_iterator_interface *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(v4 + 40) = *((_QWORD *)this + 5);
  result = *((__n128 *)this + 3);
  *(__n128 *)(v4 + 48) = result;
  *(_QWORD *)v4 = off_24CF072E0;
  *a2 = v4;
  return result;
}

void DiskImageStackable::stackable_extents_iterator_interface::~stackable_extents_iterator_interface(DiskImageStackable::stackable_extents_iterator_interface *this)
{
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImageStackable::get_block_size(DiskImageStackable *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t DiskImageStackable::get_num_blocks(DiskImageStackable *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
}

uint64_t DiskImageStackable::is_writable(DiskImageStackable *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  if (v1 == v2)
    return 0;
  v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 40) + 40))(*(_QWORD *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48))
      result = 0;
    else
      result = result;
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

info::DiskImageStackableInfo *DiskImageStackable::create_image_info@<X0>(DiskImageStackable *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  info::DiskImageStackableInfo *v6;
  info::DiskImageStackableInfo *result;

  v6 = (info::DiskImageStackableInfo *)operator new();
  result = info::DiskImageStackableInfo::DiskImageStackableInfo(v6, this, a2);
  *a3 = (char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 104);
  return result;
}

void sub_212F86AF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C40F7292D7BLL);
  _Unwind_Resume(a1);
}

uint64_t DiskImageStackable::set_size(DiskImageStackable *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 24) + 64))(*(_QWORD *)(*((_QWORD *)this + 2) + 24));
}

uint64_t DiskImageStackable::get_io_constraints(DiskImageStackable *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) - 24) + 72))(*(_QWORD *)(*((_QWORD *)this + 3) - 24));
}

uint64_t DiskImageStackable::supports_unmap(DiskImageStackable *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  if (v1 == v2)
    return 0;
  v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 40) + 80))(*(_QWORD *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48))
      result = 0;
    else
      result = result;
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

uint64_t DiskImageStackable::supports_get_extents(DiskImageStackable *this)
{
  return 1;
}

uint64_t DiskImageStackable::may_read_extra(DiskImageStackable *this)
{
  return *((unsigned __int8 *)this + 48);
}

__n128 DiskImageStackable::get_extents_iterator_interface@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  __n128 result;

  v12 = operator new();
  result = *a4;
  *(__n128 *)(v12 + 16) = *a4;
  *(_QWORD *)(v12 + 32) = a4[1].n128_u64[0];
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a1;
  *(_QWORD *)(v12 + 56) = a3;
  *(_QWORD *)v12 = off_24CF072E0;
  *(_QWORD *)(v12 + 8) = a2;
  *a6 = v12;
  return result;
}

uint64_t DiskImageStackable::_create_ctx(DiskImageStackable *this)
{
  uint64_t v2;

  v2 = operator new();
  DiskImageStackable::ContextStackable::ContextStackable(v2, (uint64_t)this, 0);
  return v2;
}

void sub_212F86C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10A1C40D4D23789);
  _Unwind_Resume(a1);
}

unint64_t DiskImageStackable::read(DiskImageStackable *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[536];

  v8 = *((_QWORD *)a4 + 18);
  v9 = (*(uint64_t (**)(DiskImageStackable *))(*(_QWORD *)this + 32))(this);
  if (v8 > (*(uint64_t (**)(DiskImageStackable *))(*(_QWORD *)this + 24))(this) * v9)
    return -5;
  v12[0] = 0;
  v12[528] = 0;
  v10 = DiskImageStackable::read_from_idx((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t *)a4, 0, 1, 0, (sg_vec_ref *)v12);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_212F86D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, DiskImage *a2)
{
  return di_stackable::get_identifier(*(di_stackable **)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 8), a2);
}

const void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
  return udif::details::UDIF_base::get_identifier((udif::details::UDIF_base *)(*(_QWORD *)a2 + 64));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, DiskImageASIF **a2)
{
  return DiskImageASIF::get_stackable_identifier(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 560) + 136);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 72);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
  return plugin_header::get_uuid((plugin_header *)(*(_QWORD *)a2 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, di_asif::details::dir ***a2)
{
  return DiskImageASIF::get_stackable_source_identifier(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::construct_at[abi:ne180100]<DiskImageStackable::stackable_layer,DiskImageStackable::stackable_layer&,DiskImageStackable::stackable_layer*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

uint64_t std::vector<DiskImageStackable::stackable_layer>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DiskImageStackable::stackable_layer>,std::reverse_iterator<DiskImageStackable::stackable_layer*>,std::reverse_iterator<DiskImageStackable::stackable_layer*>,std::reverse_iterator<DiskImageStackable::stackable_layer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DiskImageStackable::stackable_layer>,std::reverse_iterator<DiskImageStackable::stackable_layer*>,std::reverse_iterator<DiskImageStackable::stackable_layer*>,std::reverse_iterator<DiskImageStackable::stackable_layer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      *(_DWORD *)(a7 + v7 - 48) = *(_DWORD *)(a3 + v7 - 48);
      v9 = a7 + v7 - 48;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(a3 + v7 - 8);
      *((_QWORD *)&v15 + 1) = v9;
      v7 -= 48;
    }
    while (a3 + v7 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DiskImageStackable::stackable_layer>,std::reverse_iterator<DiskImageStackable::stackable_layer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DiskImageStackable::stackable_layer>,std::reverse_iterator<DiskImageStackable::stackable_layer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DiskImageStackable::stackable_layer>,std::reverse_iterator<DiskImageStackable::stackable_layer*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<DiskImageStackable::stackable_layer>,std::reverse_iterator<DiskImageStackable::stackable_layer*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 24);
    result = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 8);
    v1 += 48;
  }
  return result;
}

uint64_t std::__split_buffer<DiskImageStackable::stackable_layer>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DiskImageStackable::stackable_layer>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<DiskImageStackable::stackable_layer>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 48;
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 - 24);
      result = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 - 40);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::reset[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 88))
  {
    workqueue::recurrent_block::~recurrent_block((workqueue::recurrent_block *)(a1 + 64));
    v2 = (void **)(a1 + 24);
    std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 88) = 0;
  }
}

uint64_t std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 88))
  {
    workqueue::recurrent_block::~recurrent_block((workqueue::recurrent_block *)(a1 + 64));
    v3 = (void **)(a1 + 24);
    std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<DiskImageStackable::stackable_layer>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DiskImageStackable::stackable_layer>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<DiskImageStackable::stackable_layer>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 48)
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](i - 24);
    result = std::shared_ptr<char>::~shared_ptr[abi:ne180100](i - 40);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

DiskImage::extents_t *DiskImage::extents_t::extents_t(DiskImage::extents_t *this, const DiskImage::extents_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  v5 = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = v6;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_QWORD *)this + 7) = &off_24CEF4398;
  *((_QWORD *)this + 10) = (char *)this + 56;
  std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=((_QWORD *)this + 7, (uint64_t)a2 + 56);
  return this;
}

void sub_212F87278(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = v3;
  v6 = *(_QWORD **)(v2 + 80);
  if (v6 == v4)
  {
    v7 = v4;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = *(_QWORD **)(v2 + 80);
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  DiskImage::extents_t::extents_t(v1);
  _Unwind_Resume(a1);
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v7 = sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, a2);
  v8 = a1[1];
  v15 = *a1;
  v9 = v15 + 24 * v8;
  v10 = a1[19];
  v13 = (unint64_t *)a1[18];
  v14 = v9;
  v12 = &v13[v10];
  sg_vec_ref::sg_vec_ref(v7 + 208, &v15, &v14, &v13, &v12, a3, a4);
  return a1;
}

void sub_212F8733C(_Unwind_Exception *a1)
{
  sg_vec_ns::details::sg_vec_data *v1;

  sg_vec_ns::details::sg_vec_data::~sg_vec_data(v1);
  _Unwind_Resume(a1);
}

void boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(uint64_t *a1@<X0>, __n128 *a2@<X1>, const char *a3@<X2>, __n128 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  __n128 *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (__n128 *)operator new(24 * v11);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

void boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  __n128 *v10;
  uint64_t i;
  uint64_t v12;

  v10 = *(__n128 **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(a1, *(__n128 **)a1, a4, (__n128 *)(*(_QWORD *)a1 + 24 * *(_QWORD *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (i = *(_QWORD *)(a1 + 8); i; v10 = (__n128 *)((char *)v10 + 24))
    {
      --i;
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v10);
    }
    if (a1 + 24 != *(_QWORD *)a1)
      operator delete(*(void **)a1);
  }
  v12 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_212F874A0(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  __n128 result;
  __n128 *v8;

  while (a2 != a3)
  {
    *a5 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a5[1].n128_u64[0] = a2[1].n128_u64[0];
    a5 = (__n128 *)((char *)a5 + 24);
    a2 = (__n128 *)((char *)a2 + 24);
  }
  result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a5[1].n128_u64[0] = a7[1].n128_u64[0];
  if (a3 != a4)
  {
    v8 = (__n128 *)((char *)a5 + 24 * a6);
    do
    {
      result = *a3;
      *v8 = *a3;
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      v8[1].n128_u64[0] = a3[1].n128_u64[0];
      a3 = (__n128 *)((char *)a3 + 24);
      v8 = (__n128 *)((char *)v8 + 24);
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<DiskImageIOBreaker,std::allocator<DiskImageIOBreaker>,DiskImage &,BOOL,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x68uLL);
  result = std::__shared_ptr_emplace<DiskImageIOBreaker>::__shared_ptr_emplace[abi:ne180100]<DiskImage &,BOOL,std::allocator<DiskImageIOBreaker>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_212F87584(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<DiskImageIOBreaker>::__shared_ptr_emplace[abi:ne180100]<DiskImage &,BOOL,std::allocator<DiskImageIOBreaker>,0>(uint64_t a1, uint64_t a2, char *a3)
{
  char v4;

  *(_QWORD *)a1 = &off_24CF073D8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = &off_24CF06E78;
  *(_QWORD *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  *(_BYTE *)(a1 + 80) = v4;
  _ZNSt3__110shared_ptrIcEC2B8ne180100IN18DiskImageIOBreaker10shared_refMUlT_E_EEEDnS4_((_QWORD *)(a1 + 88));
  return a1;
}

void sub_212F87608(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DiskImageIOBreaker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF073D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DiskImageIOBreaker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF073D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<DiskImageIOBreaker>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

_QWORD *_ZNSt3__110shared_ptrIcEC2B8ne180100IN18DiskImageIOBreaker10shared_refMUlT_E_EEEDnS4_(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = 0;
  v2 = (_QWORD *)operator new();
  *v2 = &off_24CF07428;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  a1[1] = v2;
  return a1;
}

void sub_212F876BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_212F876C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_pointerIDnN18DiskImageIOBreaker10shared_refMUlT_E_ENS_9allocatorIcEEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t _ZNKSt3__120__shared_ptr_pointerIDnN18DiskImageIOBreaker10shared_refMUlT_E_ENS_9allocatorIcEEE13__get_deleterERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN18DiskImageIOBreaker10shared_refMUlT_E_E))
    return a1 + 24;
  else
    return 0;
}

uint64_t getDIOSLog()
{
  if (getDIOSLog_onceToken != -1)
    dispatch_once(&getDIOSLog_onceToken, &__block_literal_global_8);
  return getDIOSLog_log;
}

os_log_t __getDIOSLog_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.DiskImages2", "Default");
  getDIOSLog_log = (uint64_t)result;
  return result;
}

uint64_t DISetForwardLogs(uint64_t result)
{
  forwardLogs = result;
  return result;
}

uint64_t DIForwardLogs()
{
  return forwardLogs;
}

uint64_t DISetDebugLogsEnabled(uint64_t result)
{
  debugLogsEnabled = result;
  return result;
}

uint64_t DIDebugLogsEnabled()
{
  return debugLogsEnabled;
}

uint64_t system_properties::get_logical_cpus(system_properties *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&system_properties::get_logical_cpus(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&system_properties::get_logical_cpus(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<system_properties::get_logical_cpus(void)::$_0 &&>>);
  }
  return system_properties::get_logical_cpus(void)::num_cpus;
}

uint64_t system_properties::$_2::__invoke(system_properties::$_2 *this)
{
  return 2 * system_properties::get_logical_cpus(this);
}

uint64_t (**system_properties::get_resources(system_properties *this))(system_properties::$_2 *__hidden this)
{
  unsigned __int8 v1;
  uint64_t (**v2)(system_properties::$_3 *__hidden);

  if ((v1 & 1) == 0
  {
    system_properties::get_resources(void)::total_memory_gb = (unint64_t)(get_memory_size() + 0x3FFFFFFF) >> 30;
  }
  v2 = (uint64_t (**)(system_properties::$_3 *__hidden))&system_properties::small_config;
  if ((unint64_t)system_properties::get_resources(void)::total_memory_gb > 3)
    v2 = &system_properties::medium_config;
  if ((unint64_t)system_properties::get_resources(void)::total_memory_gb <= 8)
    return v2;
  else
    return &system_properties::big_config;
}

void sub_212F878E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t get_memory_size(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&get_memory_size(void)::flag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&get_memory_size(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_memory_size(void)::$_0 &&>>);
  }
  return get_memory_size(void)::memory_size;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<get_memory_size(void)::$_0 &&>>()
{
  uint64_t result;
  size_t v1;
  uint64_t v2;

  v1 = 8;
  v2 = 0;
  result = sysctlbyname("hw.memsize", &v2, &v1, 0, 0);
  get_memory_size(void)::memory_size = v2;
  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<system_properties::get_logical_cpus(void)::$_0 &&>>()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 1;
  v1 = 4;
  result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0, 0);
  system_properties::get_logical_cpus(void)::num_cpus = v2;
  return result;
}

uint64_t ref::details::_get_tagged_ptr_lock(unint64_t this, const void *a2)
{
  unsigned __int8 v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  ref::details *v7;

  if ((v2 & 1) == 0)
  {
    v7 = (ref::details *)this;
    this = (unint64_t)v7;
    if (v6)
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_212EB0000);
      this = (unint64_t)v7;
    }
  }
  v3 = 0x9DDFEA08EB382D69 * (((8 * this) + 8) ^ HIDWORD(this));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(this) ^ (v3 >> 47) ^ v3);
  return (uint64_t)&ref::details::_get_tagged_ptr_lock(void const*)::mutexs
       + 64 * (unint64_t)((9 * ((v4 >> 47) ^ v4)) & 0xF);
}

uint64_t ref::details::_get_tagged_ptr_cond(unint64_t this, const void *a2)
{
  unsigned __int8 v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  ref::details *v7;

  if ((v2 & 1) == 0)
  {
    v7 = (ref::details *)this;
    this = (unint64_t)v7;
    if (v6)
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_212EB0000);
      this = (unint64_t)v7;
    }
  }
  v3 = 0x9DDFEA08EB382D69 * (((8 * this) + 8) ^ HIDWORD(this));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(this) ^ (v3 >> 47) ^ v3);
  return (uint64_t)&ref::details::_get_tagged_ptr_cond(void const*)::conds
       + 48 * ((9 * ((v4 >> 47) ^ v4)) & 0xF);
}

uint64_t ref::details::ref_cnt_handle::ref_cnt_handle(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = &off_24CF07518;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void ref::details::ref_cnt_handle::~ref_cnt_handle(ref::details::ref_cnt_handle *this, const void *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  *(_QWORD *)this = &off_24CF07518;
  if (*((_BYTE *)this + 16))
  {
    v2 = (unint64_t *)*((_QWORD *)this + 1);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stxr(v4, v2));
    if (!v4)
      ref::ref_cnt::notify((ref::ref_cnt *)v2, a2);
  }
}

{
  ref::details::ref_cnt_handle::~ref_cnt_handle(this, a2);
  JUMPOUT(0x2199A8A18);
}

unint64_t *ref::details::ref_cnt_handle::upgrade_to_exclusive@<X0>(ref::details::ref_cnt_handle *this@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t *result;
  unint64_t v8;
  unint64_t v9;

  v6 = *((unsigned __int8 *)this + 16);
  result = (unint64_t *)*((_QWORD *)this + 1);
  if (v6)
  {
    do
    {
      v8 = __ldxr(result);
      v9 = v8 - 1;
    }
    while (__stxr(v9, result));
    if (!v9)
      ref::ref_cnt::notify((ref::ref_cnt *)result, a2);
    *((_BYTE *)this + 16) = 0;
    return (unint64_t *)ref::ref_cnt::take_exclusive(*((_QWORD *)this + 1), (uint64_t)a2, a3);
  }
  else
  {
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)a3 = &off_24CF07538;
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = a2;
  }
  return result;
}

void ref::details::ref_cnt_set_handle::~ref_cnt_set_handle(ref::details::ref_cnt_set_handle *this, const void *a2)
{
  *(_QWORD *)this = &off_24CF07538;
  if (*((_BYTE *)this + 16))
  {
    atomic_store(*((_QWORD *)this + 3), *((unint64_t **)this + 1));
    ref::ref_cnt::notify(*((ref::ref_cnt **)this + 1), a2);
  }
  *((_BYTE *)this + 16) = 0;
  ref::details::ref_cnt_handle::~ref_cnt_handle(this, a2);
}

{
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle(this, a2);
  JUMPOUT(0x2199A8A18);
}

void ref::ref_cnt::notify(ref::ref_cnt *this, const void *a2)
{
  std::mutex *tagged_ptr_lock;
  const void *v4;
  std::condition_variable *tagged_ptr_cond;

  tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock((unint64_t)this, a2);
  std::mutex::lock(tagged_ptr_lock);
  tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond((unint64_t)this, v4);
  std::condition_variable::notify_all(tagged_ptr_cond);
  std::mutex::unlock(tagged_ptr_lock);
}

void __cxx_global_array_dtor()
{
  uint64_t i;

  for (i = 0x3C0u; i != -64; i -= 64)
    std::mutex::~mutex((std::mutex *)((char *)&ref::details::_get_tagged_ptr_lock(void const*)::mutexs + i));
}

void __cxx_global_array_dtor_1()
{
  uint64_t i;

  for (i = 0x2D0u; i != -48; i -= 48)
    std::condition_variable::~condition_variable((std::condition_variable *)((char *)&ref::details::_get_tagged_ptr_cond(void const*)::conds
                                                                           + i));
}

uint64_t smart_enums::validators::validator_exception_base::what(smart_enums::validators::validator_exception_base *this)
{
  return *((_QWORD *)this + 1);
}

const void **CFAutoRelease<__CFNumber const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<361ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<361ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF075F8;
  a1[45] = &unk_24CF076F8;
  a1[46] = &unk_24CF07720;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF075F8;
  a1[45] = &unk_24CF07680;
  a1[46] = &unk_24CF076A8;
  return a1;
}

void sub_212F87E74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<361ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void smart_enums::validators::validator_exception<int>::~validator_exception(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x2199A8A18);
}

void smart_enums::validators::validator_exception<int>::reason(smart_enums::validators::validator_exception_base *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  void *v15[2];
  unsigned __int8 v16;

  v3 = (char *)smart_enums::validators::validator_exception_base::what(a1);
  std::string::basic_string[abi:ne180100]<0>(v15, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (uint64_t)v15[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11 = v9;
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](&v14);
  if ((char)v16 < 0)
    operator delete(v15[0]);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<361ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<361ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<361ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF07790;
  di_log::logger_buf<di_log::log_printer<361ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<361ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F883F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<361ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 361;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 361;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF07790;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F886F8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void BufferAllocator::add_buffer(BufferAllocator *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = operator new[]();
  v3 = *((_QWORD *)this + 5);
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)this + 40, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    *v12 = v2;
    v5 = v12 + 1;
    v15 = (char *)*((_QWORD *)this + 3);
    v14 = (char *)*((_QWORD *)this + 4);
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 3) = v12;
    *((_QWORD *)this + 4) = v5;
    *((_QWORD *)this + 5) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 4) = v5;
  ++*((_DWORD *)this + 2);
}

void BufferAllocator::~BufferAllocator(BufferAllocator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x2199A8A00](*v2, 0x1000C8077774924);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v2;
  std::mutex::~mutex((std::mutex *)((char *)this + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)this + 1);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

void BufferAllocator::BufferAllocator(BufferAllocator *this, uint64_t a2, unsigned int a3, unint64_t a4)
{
  unsigned int v4;
  void **v6;
  unint64_t v7;

  v4 = a3;
  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  v6 = (void **)((char *)this + 24);
  *((_QWORD *)this + 6) = 1018212795;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 850045863;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  if (a3 <= a4)
    v7 = a4;
  else
    v7 = a3;
  *((_QWORD *)this + 2) = v7;
  std::vector<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>>::reserve(v6, a3);
  for (; v4; --v4)
    BufferAllocator::add_buffer(this);
}

void sub_212F88920(_Unwind_Exception *a1)
{
  BufferAllocator *v1;

  BufferAllocator::~BufferAllocator(v1);
  _Unwind_Resume(a1);
}

void BufferAllocator::allocate(std::condition_variable *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::unique_lock<std::mutex> __lk;
  std::condition_variable *v8;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&this[2];
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)&this[2]);
  v4 = *(_QWORD *)&this->__cv_.__opaque[24];
  if (*(_QWORD *)&this->__cv_.__opaque[16] == v4)
  {
    if (*(_QWORD *)&this->__cv_.__opaque[8] <= (unint64_t)*(unsigned int *)this->__cv_.__opaque)
    {
      do
      {
        std::condition_variable::wait(this + 1, &__lk);
        v4 = *(_QWORD *)&this->__cv_.__opaque[24];
      }
      while (*(_QWORD *)&this->__cv_.__opaque[16] == v4);
    }
    else
    {
      BufferAllocator::add_buffer((BufferAllocator *)this);
      v4 = *(_QWORD *)&this->__cv_.__opaque[24];
    }
  }
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&this->__cv_.__opaque[24] = v4 - 8;
  v8 = this;
  *a2 = v5;
  v6 = (_QWORD *)operator new();
  *v6 = &off_24CF07810;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = v5;
  v6[4] = this;
  a2[1] = v6;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_212F88A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void BufferAllocator::allocate(void)::$_0::operator()<char *>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::mutex *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *a1;
  v4 = (std::mutex *)(*a1 + 96);
  std::mutex::lock(v4);
  v5 = *(_QWORD **)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 40);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(v3 + 24);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v3 + 40, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    v17 = *(char **)(v3 + 24);
    v16 = *(char **)(v3 + 32);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *(char **)(v3 + 24);
    }
    *(_QWORD *)(v3 + 24) = v14;
    *(_QWORD *)(v3 + 32) = v7;
    *(_QWORD *)(v3 + 40) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 32) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 48));
}

void sub_212F88B5C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<char *,BufferAllocator::allocate(void)::$_0,std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_pointer<char *,BufferAllocator::allocate(void)::$_0,std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
  BufferAllocator::allocate(void)::$_0::operator()<char *>((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<char *,BufferAllocator::allocate(void)::$_0,std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

void toNativeType(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Length;
  CFIndex v5;
  void *v6;
  _QWORD *exception;
  const std::error_category *v8;

  Length = CFStringGetLength(a1);
  v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v6 = (void *)operator new[]();
  bzero(v6, v5);
  if (CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)v6);
    JUMPOUT(0x2199A8A00);
  }
  exception = __cxa_allocate_exception(0x40uLL);
  *exception = &off_24CF07908;
  v8 = std::generic_category();
  exception[1] = 22;
  exception[2] = v8;
  *((_BYTE *)exception + 24) = 0;
  *((_BYTE *)exception + 48) = 0;
  exception[7] = "Couldn't convert CFStringRef to a proper std string";
}

void sub_212F88CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t CFStringGetOSType(const __CFString *a1)
{
  unint64_t Length;
  DiskImagesRuntimeException *exception;
  const char *v5;
  void *v6;
  UInt8 buffer[4];
  CFRange v8;

  if (!a1)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v5 = "Invalid resource key";
    goto LABEL_8;
  }
  Length = CFStringGetLength(a1);
  if (Length >= 5)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v5 = "Resource name is too long to fit uint32_t";
    goto LABEL_8;
  }
  v8.length = Length;
  *(_DWORD *)buffer = 0;
  v8.location = 0;
  if (CFStringGetBytes(a1, v8, 0, 0, 0, buffer, 4, 0) != 4)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v5 = "Can't get key in cstring format";
LABEL_8:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v5, 0x16u);
  }
  return bswap32(*(unsigned int *)buffer);
}

BOOL addNumberToCFArray<long long>(__CFArray *a1, uint64_t a2)
{
  CFNumberRef v3;
  CFNumberRef v5;
  uint64_t valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
  v5 = v3;
  if (v3)
    CFArrayAppendValue(a1, v3);
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease((const void **)&v5);
  return v3 != 0;
}

void sub_212F88E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&a9);
  _Unwind_Resume(a1);
}

BOOL addCFNumber64ToDict(__CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v7;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
  v7 = v5;
  if (v5)
    CFDictionarySetValue(a1, a2, v5);
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease((const void **)&v7);
  return v5 != 0;
}

void sub_212F88ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&a9);
  _Unwind_Resume(a1);
}

__CFDictionary *cf::make_dict@<X0>(const void **keys@<X0>, const void **values@<X1>, CFIndex numValues@<X2>, CFMutableDictionaryRef *a4@<X8>)
{
  __CFDictionary *result;
  CFMutableDictionaryRef Mutable;
  const void *v7;

  if (keys && values && numValues)
  {
    result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], keys, values, numValues, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    Mutable = result;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v7 = 0;
    result = (__CFDictionary *)CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v7);
  }
  *a4 = Mutable;
  return result;
}

CFMutableDictionaryRef cf::make_empty_dict@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *a1 = result;
  return result;
}

const void **cf::serialize_to_xml_plist@<X0>(CFPropertyListRef propertyList@<X0>, const __CFData **a2@<X8>)
{
  const __CFData *v4;
  const __CFData *v5;
  BOOL v6;
  CFIndex Length;
  CFTypeID TypeID;
  _QWORD *exception;
  const std::error_category *v11;
  cf::CFUtilException *v12;
  cf::CFUtilException *v13;
  const void *v14;
  CFErrorRef error;

  error = 0;
  v4 = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x24BDBD240], propertyList, kCFPropertyListXMLFormat_v1_0, 0, &error);
  v5 = v4;
  if (v4)
    v6 = error == 0;
  else
    v6 = 0;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v11 = std::generic_category();
    exception[1] = 22;
    exception[2] = v11;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't serialize property list";
  }
  Length = CFDataGetLength(v4);
  TypeID = CFDataGetTypeID();
  if (CFGetTypeID(v5) != TypeID)
  {
    v12 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v5);
    v13 = cf::CFUtilException::CFUtilException(v12);
  }
  v14 = 0;
  *a2 = v5;
  a2[1] = (const __CFData *)Length;
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&v14);
  return CFAutoRelease<__CFError *>::~CFAutoRelease((const void **)&error);
}

void sub_212F890F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  CFAutoRelease<__CFError *>::~CFAutoRelease(&a10);
  _Unwind_Resume(a1);
}

const void **cf::deserialize_from_xml_plist@<X0>(UInt8 *bytes@<X0>, CFIndex length@<X1>, _QWORD *a3@<X8>)
{
  const __CFAllocator *v4;
  CFDataRef v5;
  BOOL v6;
  CFPropertyListRef v7;
  BOOL v8;
  CFTypeID TypeID;
  _QWORD *exception;
  const std::error_category *v12;
  _QWORD *v13;
  unsigned int Code;
  const std::error_category *v15;
  cf::CFUtilException *v16;
  cf::CFUtilException *v17;
  CFPropertyListFormat format;
  CFDataRef v19;
  CFErrorRef error;

  error = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, length);
  v19 = v5;
  if (v5)
    v6 = error == 0;
  else
    v6 = 0;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v12 = std::generic_category();
    exception[1] = 12;
    exception[2] = v12;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't create data for plist deserialization";
  }
  format = kCFPropertyListXMLFormat_v1_0;
  v7 = CFPropertyListCreateWithData(v4, v5, 0, &format, &error);
  if (v7)
    v8 = error == 0;
  else
    v8 = 0;
  if (!v8)
  {
    v13 = __cxa_allocate_exception(0x40uLL);
    Code = CFErrorGetCode(error);
    *v13 = &off_24CF07908;
    v15 = std::generic_category();
    v13[1] = Code;
    v13[2] = v15;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 48) = 0;
    v13[7] = "Can't convert data to property list";
  }
  TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v7) != TypeID)
  {
    v16 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    v17 = cf::CFUtilException::CFUtilException(v16);
  }
  *a3 = v7;
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v19);
  return CFAutoRelease<__CFError *>::~CFAutoRelease((const void **)&error);
}

void sub_212F892D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a11);
  CFAutoRelease<__CFError *>::~CFAutoRelease(&a12);
  _Unwind_Resume(a1);
}

char *CFDataCopyToVector@<X0>(const __CFData *a1@<X0>, unsigned int a2@<W1>, size_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t Length;
  unint64_t v9;
  const UInt8 *BytePtr;
  DiskImagesRuntimeException *exception;
  void *v13;

  Length = CFDataGetLength(a1);
  if (!a3)
    a3 = Length;
  v9 = a3 + a2;
  if (__CFADD__(a3, a2) || Length < v9)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Unable to convert data to vector.", 0x16u);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BytePtr = CFDataGetBytePtr(a1);
  std::vector<std::byte>::reserve(a4, a3);
  return std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>((uint64_t)a4, (char *)*a4, (char *)&BytePtr[a2], (char *)&BytePtr[v9], a3);
}

void sub_212F893D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::byte>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

BOOL addCFStringToDict(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  const char *v5;
  CFStringRef v6;
  CFStringRef v8;

  if (*(char *)(a3 + 23) >= 0)
    v5 = (const char *)a3;
  else
    v5 = *(const char **)a3;
  v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, 0x8000100u);
  v8 = v6;
  if (v6)
    CFDictionarySetValue(a1, a2, v6);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v8);
  return v6 != 0;
}

void sub_212F89528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void cf::add_key_value_pairs_to_dict(CFMutableDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  v2 = a2[1];
  if (v2)
  {
    v4 = *a2;
    v5 = *a2 + 16 * v2;
    do
    {
      v6 = *(const void **)v4;
      v7 = *(const void **)(v4 + 8);
      v4 += 16;
      CFDictionaryAddValue(*a1, v6, v7);
    }
    while (v4 != v5);
  }
}

void cf::create_dict_from_list(uint64_t *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  *a2 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  cf::add_key_value_pairs_to_dict(a2, a1);
}

void sub_212F895D8(_Unwind_Exception *a1)
{
  const void **v1;

  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

const void **CFAutoRelease<__CFError *>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void convertHexToBytes(char *__s@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  uint64_t v6;
  char v7;
  std::string::size_type v8;
  std::string::size_type size;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  size_t v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  std::string v22;

  v5 = &v22;
  std::string::basic_string[abi:ne180100]<0>(&v22, __s);
  v6 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  size = v22.__r_.__value_.__l.__size_;
  v8 = v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = (std::string *)((char *)&v22 + HIBYTE(v22.__r_.__value_.__r.__words[2]));
  else
    v10 = (std::string *)(v22.__r_.__value_.__r.__words[0] + v22.__r_.__value_.__l.__size_);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if (v5 != v10)
  {
    do
    {
      v5->__r_.__value_.__s.__data_[0] = __tolower(v5->__r_.__value_.__s.__data_[0]);
      v5 = (std::string *)((char *)v5 + 1);
    }
    while (v5 != v10);
    v6 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    size = v22.__r_.__value_.__l.__size_;
    v8 = v22.__r_.__value_.__r.__words[0];
    v7 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  if (v7 >= 0)
  {
    v11 = &v22;
  }
  else
  {
    v6 = size;
    v11 = (std::string *)v8;
  }
  if (v6 >= 2)
  {
    v12 = (std::string *)((char *)v11 + v6);
    v13 = v11;
    do
    {
      v14 = (std::string *)memchr(v13, 48, v6 - 1);
      if (!v14)
        break;
      if (LOWORD(v14->__r_.__value_.__l.__data_) == 30768)
      {
        if (v14 != v12 && v14 == v11)
        {
          v15 = std::string::erase(&v22, 0, 2uLL);
          std::string::operator=(&v22, v15);
        }
        break;
      }
      v13 = (std::string *)((char *)&v14->__r_.__value_.__l.__data_ + 1);
      v6 = (char *)v12 - (char *)v13;
    }
    while ((char *)v12 - (char *)v13 >= 2);
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  boost::algorithm::unhex<std::string,std::back_insert_iterator<std::vector<unsigned char>>>((uint64_t)&v22, (unint64_t *)&v19);
  v16 = v20 - v19;
  if (a2)
    *a2 = v16;
  v17 = (void *)operator new[]();
  bzero(v17, v16);
  *a3 = v17;
  v18 = v19;
  if (v20 != v19)
    memmove(v17, v19, v20 - v19);
  if (v18)
  {
    v20 = v18;
    operator delete(v18);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_212F8999C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *exception;
  const std::error_category *v20;
  _QWORD *v21;
  const std::error_category *v22;
  _QWORD *v23;
  const std::error_category *v24;

  if (a17 < 0)
    operator delete(__p);
  switch(a2)
  {
    case 3:
      __cxa_begin_catch(exception_object);
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v20 = std::generic_category();
      exception[1] = 22;
      exception[2] = v20;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Does not contain an \"even number\" of hex digits.";
    case 2:
      __cxa_begin_catch(exception_object);
      v21 = __cxa_allocate_exception(0x40uLL);
      *v21 = &off_24CF07908;
      v22 = std::generic_category();
      v21[1] = 22;
      v21[2] = v22;
      *((_BYTE *)v21 + 24) = 0;
      *((_BYTE *)v21 + 48) = 0;
      v21[7] = "Contains non-hexadecimal characters.";
    case 1:
      __cxa_begin_catch(exception_object);
      v23 = __cxa_allocate_exception(0x40uLL);
      *v23 = &off_24CF07908;
      v24 = std::generic_category();
      v23[1] = 22;
      v23[2] = v24;
      *((_BYTE *)v23 + 24) = 0;
      *((_BYTE *)v23 + 48) = 0;
      v23[7] = "Decoding error.";
  }
  _Unwind_Resume(exception_object);
}

unint64_t *boost::algorithm::unhex<std::string,std::back_insert_iterator<std::vector<unsigned char>>>(uint64_t a1, unint64_t *a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(char *)(a1 + 23);
  v4 = v3 < 0;
  v5 = *(_QWORD *)a1;
  if (v3 >= 0)
    v5 = a1;
  v6 = *(unsigned __int8 *)(a1 + 23);
  if (v4)
    v6 = *(_QWORD *)(a1 + 8);
  v9 = v5;
  if (v6)
  {
    v7 = v5 + v6;
    do
      a2 = boost::algorithm::detail::decode_one<std::__wrap_iter<char const*>,std::back_insert_iterator<std::vector<unsigned char>>,BOOL (*)(std::__wrap_iter<char const*>,std::__wrap_iter<char const*>)>(&v9, v7, a2, (unsigned int (*)(uint64_t, uint64_t))boost::algorithm::detail::iter_end<std::__wrap_iter<char const*>>);
    while (v9 != v7);
  }
  return a2;
}

uint64_t di_utils::buffer_to_uuid(di_utils *this, uint64_t a2)
{
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  v3[1] = 0;
  return boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()((uint64_t)v3, (char *)this, a2);
}

_QWORD *operator<<(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v4 = strlen(v3);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" (error code ", 13);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  return a1;
}

uint64_t DiskImagesRuntimeException::what(DiskImagesRuntimeException *this)
{
  uint64_t result;

  if (!*((_BYTE *)this + 48))
  {
    result = (uint64_t)this + 56;
    return *(_QWORD *)result;
  }
  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t di_utils::random_uuid(di_utils *this)
{
  uuid_t out;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  uuid_generate_random(out);
  return *(_QWORD *)out;
}

void *details::get_dummy_shared_ptr(void)
{
  unsigned __int8 v0;
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<char>::~shared_ptr[abi:ne180100], &details::get_dummy_shared_ptr(void)::dummy_shared_ptr, &dword_212EB0000);
  }
  v1 = atomic_load(&details::get_dummy_shared_ptr(void)::dummy_once_flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&details::get_dummy_shared_ptr(void)::dummy_once_flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<details::get_dummy_shared_ptr(void)::$_0 &&>>);
  }
  return &details::get_dummy_shared_ptr(void)::dummy_shared_ptr;
}

uint64_t process_terminator::terminate(process_terminator *this)
{
  uint64_t result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  if (process_terminator::supports_termination)
  {
    while (!__ldaxr((unsigned __int8 *)&process_terminator::terminated))
    {
      if (!__stlxr(1u, (unsigned __int8 *)&process_terminator::terminated))
      {
        *(_QWORD *)&v3 = "void process_terminator::terminate()";
        *((_QWORD *)&v3 + 1) = 34;
        v4 = 16;
        di_log::logger<di_log::log_printer<137ul>>::logger(v5, &v3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Terminating due to unrecoverable I/O error", 42);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf((uint64_t)v5);
        MEMORY[0x2199A89AC](&v7);
        return raise(15);
      }
    }
    __clrex();
  }
  return result;
}

void sub_212F89E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<137ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t trim_data(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  _BYTE v131[25];
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  uint64_t v140;
  char v141;
  void *__src;
  std::__shared_weak_count *v143;
  _OWORD v144[2];
  uint64_t v145;
  _OWORD v146[3];
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  __int128 v150;
  uint64_t v151;
  char v152;
  char v153[8];
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  void *v156;
  std::__shared_weak_count *v157;
  _BYTE v158[25];
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  char v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  uint64_t v167;
  char v168;
  void *v169;
  std::__shared_weak_count *v170;
  _OWORD v171[2];
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  char v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  __int128 v179;
  uint64_t v180;
  char v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  void *v187;
  std::__shared_weak_count *v188;
  _OWORD v189[2];
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  __int128 v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  __int128 v202;
  void *__dst;
  std::__shared_weak_count *v204;
  _BYTE v205[25];
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  char v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  __int128 v213;
  uint64_t v214;
  char v215;
  __int128 v216;
  int v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  _BYTE v222[160];

  v6 = (uint64_t *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 144);
  v7 = a4[1];
  v8 = *a4 - (v5 - v7);
  if (v8 >= a3)
    v8 = a3;
  v128 = v8;
  v9 = v5 - v7;
  if (v5 == v7)
    goto LABEL_160;
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  v187 = *(void **)a1;
  v188 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v189[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v189 + 9) = *(_OWORD *)(a1 + 25);
  v190 = *(_QWORD *)(a1 + 48);
  v191 = *(_OWORD *)(a1 + 56);
  v192 = *(_OWORD *)(a1 + 72);
  v193 = *(_OWORD *)(a1 + 88);
  v194 = *(_BYTE *)(a1 + 104);
  v15 = *(std::__shared_weak_count **)(a1 + 120);
  v195 = *(_QWORD *)(a1 + 112);
  v196 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v197 = *(_OWORD *)(a1 + 128);
  v198 = *v6;
  v199 = *(_BYTE *)(a1 + 152);
  v18 = v8 + v9;
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v187, v8 + v9);
  sg_vec_ns::details::buffer_iterator::rtrim_written(&v191);
  v19 = (_OWORD *)(a1 + 16);
  v20 = (__int128 *)(a1 + 72);
  v21 = *(std::__shared_weak_count **)(a1 + 8);
  v156 = *(void **)a1;
  v157 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_OWORD *)v158 = *v19;
  *(_OWORD *)&v158[9] = *(_OWORD *)(a1 + 25);
  v160 = *(_OWORD *)(a1 + 56);
  v24 = *(_OWORD *)(a1 + 88);
  v161 = *v20;
  v25 = (__int128 *)(a1 + 128);
  v159 = *(_QWORD *)(a1 + 48);
  v162 = v24;
  v163 = *(_BYTE *)(a1 + 104);
  v26 = *(std::__shared_weak_count **)(a1 + 120);
  v164 = *(_QWORD *)(a1 + 112);
  v165 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v166 = *v25;
  v167 = *v6;
  v168 = *((_BYTE *)v6 + 8);
  sg_vec_ns::generate_vec_ref((uint64_t)&v156, a2, a4[1], v18, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v169);
  v29 = v165;
  if (v165)
  {
    v30 = (unint64_t *)&v165->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v157;
  if (v157)
  {
    v33 = (unint64_t *)&v157->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sg_vec_ref::begin((sg_vec_ref *)&v169, (uint64_t)&v218);
  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v187, (uint64_t)&v218);
  v35 = v220;
  if (v220)
  {
    v36 = (unint64_t *)&v220->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v219;
  if (v219)
  {
    v39 = (unint64_t *)&v219->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v187, v9);
  sg_vec_ref::end((sg_vec_ref *)&v169, (uint64_t)v153);
  __src = v187;
  v143 = v188;
  if (v188)
  {
    v41 = (unint64_t *)&v188->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v144[0] = v189[0];
  *(_OWORD *)((char *)v144 + 9) = *(_OWORD *)((char *)v189 + 9);
  v146[0] = v191;
  v146[1] = v192;
  v145 = v190;
  v146[2] = v193;
  v147 = v194;
  v148 = v195;
  v149 = v196;
  if (v196)
  {
    v43 = (unint64_t *)&v196->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v150 = v197;
  v151 = v198;
  v152 = v199;
  v46 = *(void **)a1;
  v45 = *(std::__shared_weak_count **)(a1 + 8);
  v129 = *(void **)a1;
  v130 = v45;
  if (v45)
  {
    v47 = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  *(_OWORD *)v131 = *v19;
  *(_OWORD *)&v131[9] = *(_OWORD *)(a1 + 25);
  v49 = *v20;
  v50 = *(_OWORD *)(a1 + 88);
  v133 = *(_OWORD *)(a1 + 56);
  v134 = v49;
  v132 = *(_QWORD *)(a1 + 48);
  v135 = v50;
  v136 = *(_BYTE *)(a1 + 104);
  v51 = *(std::__shared_weak_count **)(a1 + 120);
  v137 = *(_QWORD *)(a1 + 112);
  v138 = v51;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v139 = *v25;
  v140 = *v6;
  v141 = *((_BYTE *)v6 + 8);
  __dst = v46;
  v204 = v130;
  if (v130)
  {
    v54 = (unint64_t *)&v130->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  *(_OWORD *)v205 = *(_OWORD *)v131;
  *(_OWORD *)&v205[9] = *(_OWORD *)&v131[9];
  v207 = v133;
  v208 = v134;
  v206 = v132;
  v209 = v135;
  v210 = v136;
  v211 = v137;
  v212 = v138;
  if (v138)
  {
    v56 = (unint64_t *)&v138->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = 0;
  v213 = v139;
  v214 = v140;
  v215 = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&__src, (uint64_t)v153))
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)v146);
    v59 = v149;
    v200 = v148;
    v201 = v149;
    if (v149)
    {
      v60 = (unint64_t *)&v149->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v202 = v150;
    if (*((_QWORD *)&v150 + 1))
    {
      v62 = *(_QWORD *)&v205[16];
      if (*(_QWORD *)&v144[0] < *(_QWORD *)&v205[16])
        v62 = *(_QWORD *)&v144[0];
      if (v62 >= *((_QWORD *)&v202 + 1))
        v63 = *((_QWORD *)&v202 + 1);
      else
        v63 = v62;
      if (v63)
      {
        memmove(__dst, __src, v63);
        if (v63 > 0)
        {
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__src, v63);
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__dst, v63);
          v64 = 0;
          v58 += v63;
          if (v59)
            goto LABEL_73;
          goto LABEL_77;
        }
      }
      else
      {
        *(_QWORD *)&v216 = "trim_data(const sg_vec::iterator &, const sg_vec::iterator &, size_t, const io_result_t &)::(anonymous class)::operator()(const auto &, const auto &, size_t) const [src:auto = sg_vec_ns::details::sg_vec_iterator, dst:auto = sg_vec_ns::details::sg_vec_iterator]";
        *((_QWORD *)&v216 + 1) = 121;
        v217 = 16;
        di_log::logger<di_log::log_printer<183ul>>::logger(&v218, &v216);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"Trimming: Written ", 18);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)", dest buffer_size ", 19);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)" src size ", 10);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)", trimmed size", 14);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf((uint64_t)&v218);
        MEMORY[0x2199A89AC](v222);
      }
      *(_QWORD *)&v216 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/utils.cpp:180:13)]";
      *((_QWORD *)&v216 + 1) = 97;
      v217 = 16;
      di_log::logger<di_log::log_printer<615ul>>::logger(&v218, &v216);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)"IO error with sg: ", 18);
      operator<<(&v221);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)" dest ", 6);
      operator<<(&v221);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v221, (uint64_t)" returned status ", 17);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf((uint64_t)&v218);
      MEMORY[0x2199A89AC](v222);
      v64 = 1;
      if (v59)
      {
LABEL_73:
        v65 = (unint64_t *)&v59->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
    }
    else
    {
      sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&__src);
      v64 = 2;
      if (v59)
        goto LABEL_73;
    }
LABEL_77:
    if ((v64 | 2) != 2)
      goto LABEL_80;
  }
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v129, v58);
LABEL_80:
  v67 = v212;
  if (v212)
  {
    v68 = (unint64_t *)&v212->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v204;
  if (v204)
  {
    v71 = (unint64_t *)&v204->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v138;
  if (v138)
  {
    v74 = (unint64_t *)&v138->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v130;
  if (v130)
  {
    v77 = (unint64_t *)&v130->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v149;
  if (v149)
  {
    v80 = (unint64_t *)&v149->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v143;
  if (v143)
  {
    v83 = (unint64_t *)&v143->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v155;
  if (v155)
  {
    v86 = (unint64_t *)&v155->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v154;
  if (v154)
  {
    v89 = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v186;
  if (v186)
  {
    v92 = (unint64_t *)&v186->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v185;
  if (v185)
  {
    v95 = (unint64_t *)&v185->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v184;
  if (v184)
  {
    v98 = (unint64_t *)&v184->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v183;
  if (v183)
  {
    v101 = (unint64_t *)&v183->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v182;
  if (v182)
  {
    v104 = (unint64_t *)&v182->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = (std::__shared_weak_count *)v174;
  if ((_QWORD)v174)
  {
    v107 = (unint64_t *)(v174 + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v196;
  if (v196)
  {
    v110 = (unint64_t *)&v196->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v188;
  if (v188)
  {
    v113 = (unint64_t *)&v188->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
LABEL_160:
  v115 = *(std::__shared_weak_count **)(a1 + 8);
  v169 = *(void **)a1;
  v170 = v115;
  if (v115)
  {
    v116 = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
  }
  v171[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v171 + 9) = *(_OWORD *)(a1 + 25);
  v172 = *(_QWORD *)(a1 + 48);
  v173 = *(_OWORD *)(a1 + 56);
  v174 = *(_OWORD *)(a1 + 72);
  v175 = *(_OWORD *)(a1 + 88);
  v176 = *(_BYTE *)(a1 + 104);
  v118 = *(std::__shared_weak_count **)(a1 + 120);
  v177 = *(_QWORD *)(a1 + 112);
  v178 = v118;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  v179 = *(_OWORD *)(a1 + 128);
  v180 = *v6;
  v181 = *((_BYTE *)v6 + 8);
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v169, v128);
  sg_vec_ns::details::buffer_iterator::rtrim_written(&v173);
  v121 = v178;
  if (v178)
  {
    v122 = (unint64_t *)&v178->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v170;
  if (v170)
  {
    v125 = (unint64_t *)&v170->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  return v128;
}

void sub_212F8AB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x578]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&STACK[0x2A8]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x528]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4B8]);
  _Unwind_Resume(a1);
}

unint64_t *boost::algorithm::detail::decode_one<std::__wrap_iter<char const*>,std::back_insert_iterator<std::vector<unsigned char>>,BOOL (*)(std::__wrap_iter<char const*>,std::__wrap_iter<char const*>)>(uint64_t *a1, uint64_t a2, unint64_t *a3, unsigned int (*a4)(uint64_t, uint64_t))
{
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  char v16;
  unint64_t *v17;

  v7 = 0;
  v17 = a3;
  v16 = 0;
  v8 = *a1;
  v9 = 1;
  do
  {
    v10 = v9;
    if (a4(v8, a2))
    {
      v14 = 0u;
      v15 = 0u;
      DWORD2(v15) = -1;
      v13[0] = &off_24CF07970;
      v13[1] = &unk_24CF079A0;
      boost::throw_exception<boost::algorithm::not_enough_input>(v13);
    }
    v11 = boost::algorithm::detail::hex_char_to_int<char>(*(char *)*a1);
    v9 = 0;
    v7 = v11 + 16 * v7;
    v16 = v7;
    v8 = *a1 + 1;
    *a1 = v8;
  }
  while ((v10 & 1) != 0);
  std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&v17, &v16);
  return v17;
}

void sub_212F8AD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, void *a14, uint64_t a15)
{
  std::exception::~exception(&a13);
  a14 = &unk_24CF079C0;
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 32))(a15);
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::detail::iter_end<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void boost::throw_exception<boost::algorithm::not_enough_input>(_QWORD *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  boost::algorithm::not_enough_input::not_enough_input((uint64_t)exception, a1);
}

void sub_212F8AD98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::not_enough_input::~not_enough_input(std::exception *this)
{
  uint64_t v1;

  std::exception::~exception(this);
  *(_QWORD *)(v1 + 8) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
}

{
  uint64_t v1;

  std::exception::~exception(this);
  *(_QWORD *)(v1 + 8) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
  JUMPOUT(0x2199A8A18);
}

uint64_t boost::algorithm::detail::hex_char_to_int<char>(int a1)
{
  unsigned __int8 v1;
  const boost::algorithm::non_hex_input *v3;
  uint64_t (**v4)();
  char v5;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = a1 - 48;
  if ((a1 - 48) >= 0xA)
  {
    if ((a1 - 65) > 5)
    {
      if ((a1 - 97) > 5)
      {
        v7 = 0u;
        v8 = 0u;
        DWORD2(v8) = -1;
        v6[0] = &off_24CF07A08;
        v6[1] = &unk_24CF07A38;
        v4 = off_24CF07A80;
        v5 = a1;
        v3 = (const boost::algorithm::non_hex_input *)boost::exception_detail::set_info_rv<boost::error_info<boost::algorithm::bad_char_,char>>::set<boost::algorithm::non_hex_input>(v6, (uint64_t)&v4);
        boost::throw_exception<boost::algorithm::non_hex_input>(v3);
      }
      return (a1 - 87);
    }
    else
    {
      return (a1 - 55);
    }
  }
  return v1;
}

void sub_212F8AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15, void *a16, uint64_t a17)
{
  std::exception::~exception(&a15);
  a16 = &unk_24CF079C0;
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 32))(a17);
  _Unwind_Resume(a1);
}

unint64_t **std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](unint64_t **a1, _BYTE *a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = *a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

uint64_t boost::algorithm::not_enough_input::not_enough_input(uint64_t a1, _QWORD *a2)
{
  char *v3;
  uint64_t v4;
  __int128 v5;

  v3 = (char *)a2 + *(_QWORD *)(*a2 - 40);
  v4 = *((_QWORD *)v3 + 1);
  *(_QWORD *)(a1 + 8) = &unk_24CF079C0;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = &off_24CF07970;
  *(_QWORD *)(a1 + 8) = &unk_24CF079A0;
  return a1;
}

void `virtual thunk to'boost::algorithm::not_enough_input::~not_enough_input(boost::algorithm::not_enough_input *this)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  *(_QWORD *)(v1 + 8) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  std::exception::~exception((std::exception *)v1);
  *((_QWORD *)v1 + 1) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  JUMPOUT(0x2199A8A18);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

void boost::throw_exception<boost::algorithm::non_hex_input>(const boost::algorithm::non_hex_input *a1)
{
  boost::algorithm::non_hex_input *exception;

  exception = (boost::algorithm::non_hex_input *)__cxa_allocate_exception(0x30uLL);
  boost::algorithm::non_hex_input::non_hex_input(exception, a1);
}

void sub_212F8B1AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::non_hex_input::~non_hex_input(std::exception *this)
{
  uint64_t v1;

  std::exception::~exception(this);
  *(_QWORD *)(v1 + 8) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
}

{
  uint64_t v1;

  std::exception::~exception(this);
  *(_QWORD *)(v1 + 8) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
  JUMPOUT(0x2199A8A18);
}

boost::algorithm::non_hex_input *boost::algorithm::non_hex_input::non_hex_input(boost::algorithm::non_hex_input *this, const boost::algorithm::non_hex_input *a2)
{
  char *v3;
  uint64_t v4;
  __int128 v5;

  v3 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 40);
  v4 = *((_QWORD *)v3 + 1);
  *((_QWORD *)this + 1) = &unk_24CF079C0;
  *((_QWORD *)this + 2) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *((_OWORD *)v3 + 1);
  *((_DWORD *)this + 10) = *((_DWORD *)v3 + 8);
  *(_OWORD *)((char *)this + 24) = v5;
  *(_QWORD *)this = &off_24CF07A08;
  *((_QWORD *)this + 1) = &unk_24CF07A38;
  return this;
}

void `virtual thunk to'boost::algorithm::non_hex_input::~non_hex_input(boost::algorithm::non_hex_input *this)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  *(_QWORD *)(v1 + 8) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  std::exception::~exception((std::exception *)v1);
  *((_QWORD *)v1 + 1) = &unk_24CF079C0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  JUMPOUT(0x2199A8A18);
}

_QWORD *boost::exception_detail::set_info_rv<boost::error_info<boost::algorithm::bad_char_,char>>::set<boost::algorithm::non_hex_input>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (**v7)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = operator new();
  *(_QWORD *)v4 = off_24CF07A80;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a2 + 8);
  std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::shared_ptr[abi:ne180100]<boost::error_info<boost::algorithm::bad_char_,char>,void>(&v21, v4);
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  v6 = *((_QWORD *)v5 + 1);
  if (!v6)
  {
    v6 = operator new();
    v7 = &off_24CF07B28;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = &off_24CF07B28;
    *(_QWORD *)(v6 + 8) = v6 + 16;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_DWORD *)(v6 + 56) = 0;
    v8 = *((_QWORD *)v5 + 1);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      v7 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v6;
    }
    *((_QWORD *)v5 + 1) = v6;
    ((void (*)(uint64_t))v7[3])(v6);
  }
  v19 = v21;
  v20 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v6 + 16))(v6, &v19, &v18);
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return a1;
}

void sub_212F8B4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::error_info<boost::algorithm::bad_char_,char>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = off_24CF07A80;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

void boost::error_info<boost::algorithm::bad_char_,char>::~error_info()
{
  JUMPOUT(0x2199A8A18);
}

void boost::to_string<boost::algorithm::bad_char_,char>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string::const_iterator v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)__p, (const char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL));
  if (__p[0])
    v4 = (char *)__p[0];
  else
    v4 = (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(&v14, v4);
  free(__p[0]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v14;
  else
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)v14.__r_.__value_.__r.__words[0];
  std::string::insert(&v14, v5, 91);
  v15 = v14;
  memset(&v14, 0, sizeof(v14));
  v6 = std::string::append(&v15, "] = ", 4uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  boost::to_string<char>((char *)(a1 + 8), __p);
  if ((v13 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v16, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v17, 10);
  *a2 = v17;
  memset(&v17, 0, sizeof(v17));
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_212F8B6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

boost::core::scoped_demangled_name *boost::core::scoped_demangled_name::scoped_demangled_name(boost::core::scoped_demangled_name *this, const char *lpmangled)
{
  size_t v4;
  int status;

  status = 0;
  v4 = 0;
  *(_QWORD *)this = __cxa_demangle(lpmangled, 0, &v4, &status);
  return this;
}

uint64_t boost::to_string<char>@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;
  char v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  v9 = *a1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)&v9, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a2);
  v5 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v6[-1] + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199A89AC](&v8);
}

void sub_212F8B874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::shared_ptr[abi:ne180100]<boost::error_info<boost::algorithm::bad_char_,char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CF07AB0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212F8B8DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<boost::error_info<boost::algorithm::bad_char_,char> *,std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::__shared_ptr_default_delete<boost::error_info<boost::algorithm::bad_char_,char>,boost::error_info<boost::algorithm::bad_char_,char>>,std::allocator<boost::error_info<boost::algorithm::bad_char_,char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<boost::error_info<boost::algorithm::bad_char_,char> *,std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::__shared_ptr_default_delete<boost::error_info<boost::algorithm::bad_char_,char>,boost::error_info<boost::algorithm::bad_char_,char>>,std::allocator<boost::error_info<boost::algorithm::bad_char_,char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<boost::error_info<boost::algorithm::bad_char_,char> *,std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::__shared_ptr_default_delete<boost::error_info<boost::algorithm::bad_char_,char>,boost::error_info<boost::algorithm::bad_char_,char>>,std::allocator<boost::error_info<boost::algorithm::bad_char_,char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information(boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  size_t v4;
  boost::exception_detail::error_info_container_impl *v5;
  void **v6;
  uint64_t v7;
  boost::exception_detail::error_info_container_impl *v8;
  boost::exception_detail::error_info_container_impl *v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  uint64_t result;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  if (a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
    v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)a2, v4);
    v5 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)this + 1);
    if (v5 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        (***((void (****)(void **__return_ptr))v5 + 5))(__p);
        if (v15 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if (v15 >= 0)
          v7 = HIBYTE(v15);
        else
          v7 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)v6, v7);
        if (SHIBYTE(v15) < 0)
          operator delete(__p[0]);
        v8 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v5 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(boost::exception_detail::error_info_container_impl **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v5 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v5;
            v5 = v9;
          }
          while (!v10);
        }
        v5 = v9;
      }
      while (v9 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17, __p);
    v11 = v15;
    v12 = *(_OWORD *)__p;
    *(_OWORD *)__p = *((_OWORD *)this + 2);
    v15 = *((_QWORD *)this + 6);
    *((_OWORD *)this + 2) = v12;
    *((_QWORD *)this + 6) = v11;
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    v16 = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v17[0] = MEMORY[0x24BEDB848] + 16;
    if (v18 < 0)
      operator delete((void *)v17[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2199A89AC](&v19);
  }
  result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_212F8BB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *boost::exception_detail::error_info_container_impl::get@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::find<boost::exception_detail::type_info_>(a1 + 8, a2);
  if ((_QWORD *)(a1 + 16) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = result[6];
    *a3 = result[5];
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

_QWORD *boost::exception_detail::error_info_container_impl::set(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  _QWORD *result;
  uint64_t *v7;

  v7 = a3;
  v5 = std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__emplace_unique_key_args<boost::exception_detail::type_info_,std::piecewise_construct_t const&,std::tuple<boost::exception_detail::type_info_ const&>,std::tuple<>>((uint64_t **)(a1 + 8), a3, (uint64_t)&std::piecewise_construct, &v7);
  result = std::shared_ptr<DiskImage>::operator=[abi:ne180100](v5 + 5, a2);
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }
  return result;
}

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  ++*(_DWORD *)(this + 56);
  return this;
}

BOOL boost::exception_detail::error_info_container_impl::release(boost::exception_detail::error_info_container_impl *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    boost::exception_detail::error_info_container_impl::~error_info_container_impl((void **)this);
    MEMORY[0x2199A8A18]();
  }
  return v1 == 0;
}

void boost::exception_detail::error_info_container_impl::clone(boost::exception_detail::error_info_container_impl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t **v5;
  boost::exception_detail::error_info_container_impl *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  boost::exception_detail::error_info_container_impl *v16;
  boost::exception_detail::error_info_container_impl *v17;
  BOOL v18;
  uint64_t v19[2];
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *a2 = 0;
  v4 = operator new();
  *(_QWORD *)v4 = &off_24CF07B28;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = v4 + 16;
  v5 = (uint64_t **)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *a2 = v4;
  *(_DWORD *)(v4 + 56) = 1;
  v6 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)this + 1);
  if (v6 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
  {
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v6 + 5) + 8))(*((_QWORD *)v6 + 5));
      std::shared_ptr<boost::exception_detail::error_info_base>::shared_ptr[abi:ne180100]<boost::exception_detail::error_info_base,void>(&v21, v7);
      v19[0] = *((_QWORD *)v6 + 4);
      v19[1] = v21;
      v20 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__emplace_unique_key_args<boost::exception_detail::type_info_,std::pair<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>(v5, v19, (uint64_t)v19);
      v10 = v20;
      if (v20)
      {
        v11 = (unint64_t *)&v20->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = v22;
      if (v22)
      {
        v14 = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v6 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(boost::exception_detail::error_info_container_impl **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v6 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v6;
          v6 = v17;
        }
        while (!v18);
      }
      v6 = v17;
    }
    while (v17 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
  }
}

void sub_212F8BE18(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::find<boost::exception_detail::type_info_>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_QWORD *)(a1 + 8);
  v4 = std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__lower_bound<boost::exception_detail::type_info_>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = v4[4];
  if (*a2 != v6
    && strcmp((const char *)(*(_QWORD *)(*a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
  {
    return v3;
  }
  return v5;
}

_QWORD *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__lower_bound<boost::exception_detail::type_info_>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v5 = a3;
    v6 = *a2;
    do
    {
      v7 = v5[4];
      if (v7 == v6)
      {
        a4 = v5;
      }
      else if (strcmp((const char *)(*(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__emplace_unique_key_args<boost::exception_detail::type_info_,std::piecewise_construct_t const&,std::tuple<boost::exception_detail::type_info_ const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x38uLL);
    v10[1] = a1 + 1;
    v7[4] = **a4;
    v7[5] = 0;
    v7[6] = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v12, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *a3;
    v7 = v5[4];
    if (*a3 != v7)
    {
      v8 = (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        v9 = (const char *)(*(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          v10 = (_QWORD *)*v5;
          v4 = v5;
          if (!*v5)
            break;
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0)
            break;
          v4 = v5 + 1;
          v10 = (_QWORD *)v5[1];
          if (!v10)
            break;
        }
        v7 = v10[4];
        v5 = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

void boost::exception_detail::error_info_container_impl::~error_info_container_impl(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)(this + 1), this[2]);
}

_QWORD *std::shared_ptr<boost::exception_detail::error_info_base>::shared_ptr[abi:ne180100]<boost::exception_detail::error_info_base,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CF07B90;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212F8C120(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<boost::exception_detail::error_info_base *,std::shared_ptr<boost::exception_detail::error_info_base>::__shared_ptr_default_delete<boost::exception_detail::error_info_base,boost::exception_detail::error_info_base>,std::allocator<boost::exception_detail::error_info_base>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<boost::exception_detail::error_info_base *,std::shared_ptr<boost::exception_detail::error_info_base>::__shared_ptr_default_delete<boost::exception_detail::error_info_base,boost::exception_detail::error_info_base>,std::allocator<boost::exception_detail::error_info_base>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<boost::exception_detail::error_info_base *,std::shared_ptr<boost::exception_detail::error_info_base>::__shared_ptr_default_delete<boost::exception_detail::error_info_base,boost::exception_detail::error_info_base>,std::allocator<boost::exception_detail::error_info_base>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__emplace_unique_key_args<boost::exception_detail::type_info_,std::pair<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>((uint64_t)a1, &v11, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x38uLL);
    v9[1] = a1 + 1;
    *((_QWORD *)v6 + 4) = *(_QWORD *)a3;
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<details::get_dummy_shared_ptr(void)::$_0 &&>>()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v0 = operator new();
  std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,void>(&v4, v0);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)&details::get_dummy_shared_ptr(void)::dummy_shared_ptr, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24CF07C08;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212F8C358(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x2199A8A18](v1, 0x1000C4077774924);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x2199A8A18);
  return result;
}

uint64_t std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *di_log::logger<di_log::log_printer<183ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<183ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF07C88;
  a1[45] = &unk_24CF07D88;
  a1[46] = &unk_24CF07DB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF07C88;
  a1[45] = &unk_24CF07D10;
  a1[46] = &unk_24CF07D38;
  return a1;
}

void sub_212F8C48C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<183ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF07E20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F8C558(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF07E20;
  di_log::logger_buf<di_log::log_printer<183ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<183ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<183ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<183ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<183ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F8C94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<183ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 183;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 183;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

BOOL lock_free::bitmap_t::update_pair_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v5 = a4 - a3 + 2;
  v6 = ~(-1 << v5) << a3;
  if (a4 - a3 == 62)
    v6 = -1;
  v7 = *a5;
  v8 = a5[1];
  if (v7 != v8)
  {
    if ((unint64_t)(a4 - a3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v12 = 0;
      v13 = v5 >> 1;
      v14 = v7 | (2 * v8);
      do
      {
        v12 = v14 | (4 * v12);
        --v13;
      }
      while (v13);
    }
    else
    {
      v12 = 0;
    }
    v15 = v12 << a3;
    v16 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * a2);
    v17 = *v16;
    v18 = *v16 & ~v6 | v15;
    v19 = __ldaxr(v16);
    if (v19 == v17)
    {
      if (!__stlxr(v18, v16))
      {
LABEL_21:
        v11 = v17 == v18;
        return !v11;
      }
    }
    else
    {
      __clrex();
    }
    v20 = ~v6;
    do
    {
      while (1)
      {
        v17 = v19;
        v21 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * a2);
        v18 = v19 & v20 | v15;
        v19 = __ldaxr(v21);
        if (v19 == v17)
          break;
        __clrex();
      }
    }
    while (__stlxr(v18, v21));
    goto LABEL_21;
  }
  v9 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * a2);
  if (*a5)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 | v6, v9));
    v11 = (v6 & ~v10) == 0;
  }
  else
  {
    do
      v22 = __ldaxr(v9);
    while (__stlxr(v22 & ~v6, v9));
    v11 = (v22 & v6) == 0;
  }
  return !v11;
}

unint64_t lock_free::first_pair_match(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = 0;
    v6 = v4 >> 1;
    do
    {
      v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  if (a3 - a2 == 62)
    v7 = -1;
  else
    v7 = ~(-1 << v4) << a2;
  v9 = ((v5 << a2) ^ v7 & a1 | (((v5 << a2) ^ v7 & a1) >> 1)) & 0x5555555555555555;
  v8 = v9 == 0;
  v10 = __clz(__rbit64(v9));
  if (v8)
    return a3 + 2;
  else
    return v10;
}

unint64_t lock_free::first_pair_mismatch(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = 0;
    v6 = v4 >> 1;
    do
    {
      v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  if (a3 - a2 == 62)
    v7 = -1;
  else
    v7 = ~(-1 << v4) << a2;
  v9 = v7 & ~((v5 << a2) ^ a1) & ((v7 & ~((v5 << a2) ^ a1)) >> 1) & 0x5555555555555555;
  v8 = v9 == 0;
  v10 = __clz(__rbit64(v9));
  if (v8)
    return a3 + 2;
  else
    return v10;
}

uint64_t lock_free::bitmap_t::update_bits(lock_free::bitmap_t *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *exception;
  _QWORD v26[33];

  if (a2 > a3 || *((_QWORD *)this + 2) <= a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v26, 0x16u);
  }
  v4 = a2 >> 6;
  v5 = a2 & 0x3F;
  v6 = a3 & 0x3F;
  if (a2 >> 6 == a3 >> 6)
  {
    v7 = v6 - v5 + 1;
    v8 = ~(-1 << v7) << v5;
    if (v7 == 64)
      v9 = -1;
    else
      v9 = v8;
    v10 = (unint64_t *)(*((_QWORD *)this + 1) + 8 * v4);
    if ((_DWORD)a4)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 | v9, v10));
      v5 = v9;
    }
    else
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 & ~v9, v10));
      v5 = 0;
    }
    LOBYTE(v5) = (v11 & v9) != v5;
  }
  else
  {
    v12 = a3 >> 6;
    if ((a2 & 0x3F) != 0)
    {
      v5 = ~(-1 << -(char)v5) << v5;
      v13 = (unint64_t *)(*((_QWORD *)this + 1) + 8 * v4);
      if ((_DWORD)a4)
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 | v5, v13));
        v15 = v5;
      }
      else
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 & ~v5, v13));
        v15 = 0;
      }
      LOBYTE(v5) = (v14 & v5) != v15;
      ++v4;
    }
    if (v6 != 63)
    {
      v16 = -2 << v6;
      v17 = ~(-2 << v6);
      v18 = (unint64_t *)(*((_QWORD *)this + 1) + 8 * v12);
      if ((a4 & 1) != 0)
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 | v17, v18));
        v20 = v17;
      }
      else
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 & v16, v18));
        v20 = 0;
      }
      if ((v19 & v17) != v20)
        LOBYTE(v5) = 1;
      --v12;
    }
    if (v4 <= v12)
    {
      v21 = a4 << 63 >> 63;
      do
      {
        v22 = (unint64_t *)(*((_QWORD *)this + 1) + 8 * v4);
        do
          v23 = __ldxr(v22);
        while (__stxr(v21, v22));
        LOBYTE(v5) = (v23 != v21) | v5;
        ++v4;
      }
      while (v4 <= v12);
    }
  }
  return v5 & 1;
}

void sub_212F8CFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL lock_free::bitmap_t::update_pair_bits(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *exception;
  _QWORD v18[33];

  if (a3 <= a2 || *(_QWORD *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v18, 0x16u);
  }
  v6 = a3 - 2;
  v7 = a2 >> 6;
  v8 = a2 & 0x3F;
  v9 = v6 & 0x3F;
  if (a2 >> 6 == v6 >> 6)
    return lock_free::bitmap_t::update_pair_element(a1, a2 >> 6, v8, v6 & 0x3F, a4);
  v11 = v6 >> 6;
  v12 = (a2 & 0x3F) != 0 && lock_free::bitmap_t::update_pair_element(a1, v7++, v8, 62, a4);
  if (v9 <= 0x3D)
    v12 = lock_free::bitmap_t::update_pair_element(a1, v11--, 0, v9, a4) | v12;
  v13 = 0;
  v14 = 32;
  do
  {
    v13 = *a4 | (2 * a4[1]) | (4 * v13);
    --v14;
  }
  while (v14);
  while (v7 <= v11)
  {
    v15 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v7);
    if ((v12 & 1) != 0)
    {
      *v15 = v13;
      v12 = 1;
    }
    else
    {
      do
        v16 = __ldxr(v15);
      while (__stxr(v13, v15));
      v12 = v16 != v13;
    }
    ++v7;
  }
  return v12;
}

void sub_212F8D1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t lock_free::bitmap_t::find_match_bits(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t pair_match;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *exception;
  _QWORD v26[33];

  v4 = a3;
  if (a3 <= a2 || *(_QWORD *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v26, 0x16u);
  }
  v8 = a3 - 2;
  v9 = a2 >> 6;
  v10 = a2 & 0x3F;
  v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    v12 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    pair_match = lock_free::first_pair_match(v12, v10, (a3 - 2) & 0x3F, a4);
    return pair_match + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    v14 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    pair_match = lock_free::first_pair_match(v14, v10, 62, a4);
    if (pair_match != 64)
      return pair_match + (a2 & 0xFFFFFFFFFFFFFFC0);
    ++v9;
  }
  v15 = 0;
  v16 = v8 >> 6;
  if (v11 >= 0x3E)
    v17 = 0;
  else
    v17 = -1;
  v18 = 32;
  do
  {
    v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      v22 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v16));
      v23 = lock_free::first_pair_match(v22, 0, (v4 - 2) & 0x3F, a4);
      if (v23 != v11 + 2)
        return v23 + (v8 & 0xFFFFFFFFFFFFFFC0);
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = v9 << 6;
    while (((*(_QWORD *)(v20 + 8 * v9) ^ v15 | ((*(_QWORD *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555) == 0)
    {
      ++v9;
      v21 += 64;
      if (v9 > v19)
        goto LABEL_18;
    }
    return __clz(__rbit64((*(_QWORD *)(v20 + 8 * v9) ^ v15 | ((*(_QWORD *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555))
         + v21;
  }
  return v4;
}

void sub_212F8D3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t lock_free::bitmap_t::find_mismatch_bits(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t pair_mismatch;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *exception;
  _QWORD v27[33];

  v4 = a3;
  if (a3 <= a2 || *(_QWORD *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v27, 0x16u);
  }
  v8 = a3 - 2;
  v9 = a2 >> 6;
  v10 = a2 & 0x3F;
  v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    v12 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    pair_mismatch = lock_free::first_pair_mismatch(v12, v10, (a3 - 2) & 0x3F, a4);
    return pair_mismatch + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    v14 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v9));
    pair_mismatch = lock_free::first_pair_mismatch(v14, v10, 62, a4);
    if (pair_mismatch != 64)
      return pair_mismatch + (a2 & 0xFFFFFFFFFFFFFFC0);
    ++v9;
  }
  v15 = 0;
  v16 = v8 >> 6;
  if (v11 >= 0x3E)
    v17 = 0;
  else
    v17 = -1;
  v18 = 32;
  do
  {
    v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      v23 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v16));
      v24 = lock_free::first_pair_mismatch(v23, 0, (v4 - 2) & 0x3F, a4);
      if (v24 != v11 + 2)
        return v24 + (v8 & 0xFFFFFFFFFFFFFFC0);
    }
  }
  else
  {
    v20 = v9 << 6;
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9);
      v22 = ((v15 ^ (unint64_t)~v21) >> 1) & ~(v15 ^ v21) & 0x5555555555555555;
      if (v22)
        return __clz(__rbit64(v22)) + v20;
      ++v9;
      v20 += 64;
      if (v9 > v19)
        goto LABEL_18;
    }
  }
  return v4;
}

void sub_212F8D630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL lock_free::bitmap_t::is_reset(lock_free::bitmap_t *this)
{
  unint64_t v1;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 2) + 63;
  if (v1 < 0x40)
    return 1;
  v3 = v1 >> 6;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3 <= 1)
    v5 = 1;
  else
    v5 = v3;
  if (*v4)
    return 0;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v5 == v6)
      break;
  }
  while (!v4[v6++]);
  return v7 >= v3;
}

uint64_t lock_free::bitmap_t::get_num_set(lock_free::bitmap_t *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 2) + 63;
  if (v1 < 0x40)
    return 0;
  v4 = 0;
  v2 = 0;
  v5 = (v1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  do
  {
    v6 = atomic_load((unint64_t *)(*((_QWORD *)this + 1) + v4));
    v8 = v6;
    BYTE6(v9) = 1;
    v2 += std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,64ul>,true,BOOL,std::__identity,0>((int8x8_t *)&v8, 0, (uint64_t)&v9, 0, (_BYTE *)&v9 + 6);
    v4 += 8;
  }
  while (v5 != v4);
  return v2;
}

unint64_t lock_free::bitmap_t::get_bit(lock_free::bitmap_t *this, unint64_t a2)
{
  unint64_t v2;
  void *exception;
  _QWORD v5[33];

  if (*((_QWORD *)this + 2) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" bits in the bitmap", 19);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  v2 = atomic_load((unint64_t *)(*((_QWORD *)this + 1) + 8 * (a2 >> 6)));
  return (v2 >> a2) & 1;
}

void sub_212F8D860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL lock_free::bitmap_t::set_bit(lock_free::bitmap_t *this, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;
  _QWORD v8[33];

  if (*((_QWORD *)this + 2) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" bits in the bitmap", 19);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v8, 0x16u);
  }
  v3 = 1 << a2;
  v4 = (unint64_t *)(*((_QWORD *)this + 1) + 8 * (a2 >> 6));
  if (a3)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 | v3, v4));
  }
  else
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 & ~v3, v4));
  }
  return (v5 & v3) == 0;
}

void sub_212F8D9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,64ul>,true,BOOL,std::__identity,0>(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  unint64_t v5;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (*a5)
    return std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,64ul>,true>(a1, a2, v5);
  else
    return std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,64ul>,true>((uint64_t *)a1, a2, v5);
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,64ul>,true>(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = (uint64_t)*a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,64ul>,true>(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = *a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t crypto::header::header(uint64_t a1, _DWORD *a2)
{
  di_utils *v4;
  uint64_t v5;
  int v7;

  *(_DWORD *)a1 = 1919118949;
  v7 = 1919118949;
  smart_enums::validators::value<unsigned int>((uint64_t)"sig1_t", 1919118949, &v7, 1);
  *(_DWORD *)(a1 + 4) = 1634952291;
  v7 = 1634952291;
  smart_enums::validators::value<unsigned int>((uint64_t)"sig2_t", 1634952291, &v7, 1);
  *(_DWORD *)(a1 + 8) = 2;
  v7 = 2;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", 2, &v7, 1);
  *(_DWORD *)(a1 + 12) = 16;
  v7 = 16;
  smart_enums::validators::value<unsigned int>((uint64_t)"iv_size_t", 16, &v7, 1);
  *(_DWORD *)(a1 + 16) = 5;
  v7 = 5;
  smart_enums::validators::value<unsigned int>((uint64_t)"encryption_mode", 5, &v7, 1);
  *(_DWORD *)(a1 + 20) = -2147483647;
  v7 = -2147483647;
  smart_enums::validators::value<unsigned int>((uint64_t)"algorithm_type", -2147483647, &v7, 1);
  *(_DWORD *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 28) = 91;
  v7 = 91;
  smart_enums::validators::value<unsigned int>((uint64_t)"prng_algorithm_type", 91, &v7, 1);
  *(_DWORD *)(a1 + 32) = 160;
  v7 = 160;
  v4 = (di_utils *)smart_enums::validators::value<unsigned int>((uint64_t)"prng_key_bits_size_t", 160, &v7, 1);
  *(_DWORD *)(a1 + 52) = 512;
  *(_OWORD *)(a1 + 56) = xmmword_212FF3DA0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 36) = di_utils::random_uuid(v4);
  *(_QWORD *)(a1 + 44) = v5;
  return a1;
}

crypto::header *crypto::header::header(crypto::header *this, Backend *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  const std::error_category *v21;
  const char *v22;
  DiskImagesRuntimeException *exception;
  void *v24;
  char v25[4];
  int v26;
  int v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  v4 = (*(uint64_t (**)(Backend *))(*(_QWORD *)a2 + 40))(a2);
  if (v4 >= 0xC
    && (Backend::read(a2, v25, 12, v4 - 12) & 0x80000000) == 0
    && *(_DWORD *)v25 == 0x1000000
    && v26 == 1634952291
    && v27 == 1919118949)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "The image is encrypted with obsolete encoding version 1", 0xA0u);
  }
  if ((unint64_t)(*(uint64_t (**)(Backend *))(*(_QWORD *)a2 + 40))(a2) <= 0x4B)
  {
    v18 = __cxa_allocate_exception(0x20uLL);
    v19 = (*(uint64_t (**)(Backend *))(*(_QWORD *)a2 + 40))(a2);
    *v18 = &off_24CF05670;
    v18[1] = "crypto";
    v18[2] = 76;
    v18[3] = v19;
  }
  v5 = operator new[]();
  *(_OWORD *)(v5 + 60) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = Backend::read(a2, (char *)v5, 76, 0);
  if ((v6 & 0x80000000) != 0)
  {
    v20 = __cxa_allocate_exception(0x40uLL);
    *v20 = &off_24CF07908;
    v21 = std::generic_category();
    v20[1] = v6;
    v22 = "Crypto: can't read crypto header";
    goto LABEL_13;
  }
  v7 = *(_DWORD *)v5;
  LODWORD(v28[0]) = 1919118949;
  smart_enums::validators::value<unsigned int>((uint64_t)"sig1_t", v7, v28, 1);
  *(_DWORD *)this = 1919118949;
  v8 = *(_DWORD *)(v5 + 4);
  LODWORD(v28[0]) = 1634952291;
  smart_enums::validators::value<unsigned int>((uint64_t)"sig2_t", v8, v28, 1);
  *((_DWORD *)this + 1) = 1634952291;
  v9 = bswap32(*(_DWORD *)(v5 + 8));
  LODWORD(v28[0]) = 2;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", v9, v28, 1);
  *((_DWORD *)this + 2) = v9;
  v10 = bswap32(*(_DWORD *)(v5 + 12));
  LODWORD(v28[0]) = 16;
  smart_enums::validators::value<unsigned int>((uint64_t)"iv_size_t", v10, v28, 1);
  *((_DWORD *)this + 3) = v10;
  v11 = bswap32(*(_DWORD *)(v5 + 16));
  LODWORD(v28[0]) = 5;
  smart_enums::validators::value<unsigned int>((uint64_t)"encryption_mode", v11, v28, 1);
  *((_DWORD *)this + 4) = v11;
  v12 = bswap32(*(_DWORD *)(v5 + 20));
  LODWORD(v28[0]) = -2147483647;
  smart_enums::validators::value<unsigned int>((uint64_t)"algorithm_type", v12, v28, 1);
  *((_DWORD *)this + 5) = v12;
  v13 = bswap32(*(_DWORD *)(v5 + 24));
  v28[0] = 0x10000000080;
  smart_enums::validators::value<unsigned int>((uint64_t)"encryption_key_bits_size_t", v13, v28, 2);
  *((_DWORD *)this + 6) = v13;
  v14 = bswap32(*(_DWORD *)(v5 + 28));
  LODWORD(v28[0]) = 91;
  smart_enums::validators::value<unsigned int>((uint64_t)"prng_algorithm_type", v14, v28, 1);
  *((_DWORD *)this + 7) = v14;
  v15 = bswap32(*(_DWORD *)(v5 + 32));
  LODWORD(v28[0]) = 160;
  smart_enums::validators::value<unsigned int>((uint64_t)"prng_key_bits_size_t", v15, v28, 1);
  *((_DWORD *)this + 8) = v15;
  *(_OWORD *)((char *)this + 36) = *(_OWORD *)(v5 + 36);
  *((_DWORD *)this + 13) = bswap32(*(_DWORD *)(v5 + 52));
  *(int8x16_t *)((char *)this + 56) = vrev64q_s8(*(int8x16_t *)(v5 + 56));
  v16 = bswap32(*(_DWORD *)(v5 + 72));
  *((_DWORD *)this + 18) = v16;
  if (v16 - 2049 <= 0xFFFFF7FF)
  {
    v20 = __cxa_allocate_exception(0x40uLL);
    *v20 = &off_24CF07908;
    v21 = std::generic_category();
    v20[1] = 152;
    v22 = "crypto header contains invalid number of auth entries";
LABEL_13:
    v20[2] = v21;
    *((_BYTE *)v20 + 24) = 0;
    *((_BYTE *)v20 + 48) = 0;
    v20[7] = v22;
  }
  MEMORY[0x2199A8A00](v5, 0x1000C8077774924);
  return this;
}

void sub_212F8E0F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_212F8E108()
{
  uint64_t v0;

  MEMORY[0x2199A8A00](v0, 0x1000C8077774924);
  JUMPOUT(0x212F8E218);
}

void sub_212F8E110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_212F8E1C4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  std::ostringstream::~ostringstream((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x212F8E200);
}

void sub_212F8E220(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

__n128 crypto::header::header(crypto::header *this, const char *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_OWORD *)this = *(_OWORD *)a2;
  result = *((__n128 *)a2 + 1);
  v3 = *((_OWORD *)a2 + 2);
  v4 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v4;
  *((__n128 *)this + 1) = result;
  return result;
}

char *crypto::header::write(crypto::header *this, char *a2)
{
  *(_DWORD *)a2 = *(_DWORD *)this;
  *((_DWORD *)a2 + 1) = *((_DWORD *)this + 1);
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  *((_DWORD *)a2 + 4) = bswap32(*((_DWORD *)this + 4));
  *((_DWORD *)a2 + 5) = bswap32(*((_DWORD *)this + 5));
  *((_DWORD *)a2 + 6) = bswap32(*((_DWORD *)this + 6));
  *((_DWORD *)a2 + 7) = bswap32(*((_DWORD *)this + 7));
  *((_DWORD *)a2 + 8) = bswap32(*((_DWORD *)this + 8));
  *(_OWORD *)(a2 + 36) = *(_OWORD *)((char *)this + 36);
  *((_DWORD *)a2 + 13) = bswap32(*((_DWORD *)this + 13));
  *((_QWORD *)a2 + 7) = bswap64(*((_QWORD *)this + 7));
  *((_QWORD *)a2 + 8) = bswap64(*((_QWORD *)this + 8));
  *((_DWORD *)a2 + 18) = bswap32(*((_DWORD *)this + 18));
  return a2 + 76;
}

const void **crypto::header::populate_crypto_header_info(crypto::header *this, DiskImageInfo *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFStringRef v7;
  DiskImagesRuntimeException *exception;
  void *v10;
  const __CFString *v11;
  const __CFUUID *v12;

  v3 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 40)) + 16))((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 40));
  if (!v3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Image contains crypto format but info class is missing EncryptionInfo", 0x16u);
  }
  v4 = v3;
  v5 = *((unsigned int *)this + 6);
  if (!*(_BYTE *)(v3 + 16))
    *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 8) = v5;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v12 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFUUIDBytes *)((char *)this + 36));
  v7 = CFUUIDCreateString(v6, v12);
  v11 = v7;
  if (*(_QWORD *)(v4 + 24))
  {
    CFRelease(*(CFTypeRef *)(v4 + 24));
    v7 = v11;
  }
  *(_QWORD *)(v4 + 24) = v7;
  v11 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v11);
  return CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v12);
}

void sub_212F8E400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  _Unwind_Resume(a1);
}

crypto::public_key_header *crypto::public_key_header::public_key_header(crypto::public_key_header *this, const char *a2)
{
  __int128 v4;
  int v5;
  int v6;
  int v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  LODWORD(v9[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo_mode", 0, v9, 1);
  bzero((char *)this + 48, 0x204uLL);
  LODWORD(v9[0]) = bswap32(*(_DWORD *)a2);
  crypto::public_key_header::_publicKeyHash::set_len(this, v9);
  v4 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)((char *)this + 4) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)((char *)this + 20) = v4;
  v5 = bswap32(*((_DWORD *)a2 + 9));
  LODWORD(v9[0]) = 42;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo", v5, v9, 1);
  *((_DWORD *)this + 9) = v5;
  v6 = bswap32(*((_DWORD *)a2 + 10));
  v9[0] = 0x800000010000000ALL;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_padding_algo", v6, v9, 2);
  *((_DWORD *)this + 10) = v6;
  v7 = bswap32(*((_DWORD *)a2 + 11));
  LODWORD(v9[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo_mode", v7, v9, 1);
  *((_DWORD *)this + 11) = v7;
  LODWORD(v9[0]) = bswap32(*((_DWORD *)a2 + 12));
  crypto::public_key_header::_encryptedBlob::set_len((_DWORD *)this + 12, v9);
  memcpy((char *)this + 52, a2 + 52, 0x200uLL);
  return this;
}

crypto::public_key_header *crypto::public_key_header::public_key_header(crypto::public_key_header *this, const crypto::format *a2, __SecKey **a3)
{
  const UInt8 *BytePtr;
  CC_LONG Length;
  __SecKey *v8;
  const __CFString *crypto_algo_and_padding;
  const __CFData *v10;
  _QWORD *exception;
  unsigned int Code;
  const std::error_category *v14;
  _QWORD *v15;
  unsigned int v16;
  const std::error_category *v17;
  int v18;
  CFDataRef v19;
  CFDataRef v20;
  CFDataRef plaintext;
  CFDataRef theData;
  CFDataRef v23;
  CFErrorRef error;
  void *__p;
  _BYTE *v26;
  uint64_t v27;
  CFRange v28;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0x2A00000000;
  LODWORD(__p) = 42;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo", 42, &__p, 1);
  *((_DWORD *)this + 10) = 10;
  __p = (void *)0x800000010000000ALL;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_padding_algo", 10, &__p, 2);
  *((_DWORD *)this + 11) = 0;
  LODWORD(__p) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo_mode", 0, &__p, 1);
  bzero((char *)this + 48, 0x204uLL);
  crypto::format::make_key_blob(a2, &__p);
  error = 0;
  v23 = SecKeyCopyExternalRepresentation(*a3, &error);
  if (!v23)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    Code = CFErrorGetCode(error);
    *exception = &off_24CF07908;
    v14 = std::generic_category();
    exception[1] = Code;
    exception[2] = v14;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Key from the certificate is not exportable.";
  }
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v23, (uint64_t *)&theData);
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  CC_SHA1(BytePtr, Length, (unsigned __int8 *)this + 4);
  LODWORD(plaintext) = 20;
  crypto::public_key_header::_publicKeyHash::set_len(this, &plaintext);
  v20 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)__p, v26 - (_BYTE *)__p);
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v20, (uint64_t *)&plaintext);
  v8 = *a3;
  crypto_algo_and_padding = (const __CFString *)crypto::public_key_header::get_crypto_algo_and_padding(this);
  v20 = SecKeyCreateEncryptedData(v8, crypto_algo_and_padding, plaintext, &error);
  if (!v20)
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    v16 = CFErrorGetCode(error);
    *v15 = &off_24CF07908;
    v17 = std::generic_category();
    v15[1] = v16;
    v15[2] = v17;
    *((_BYTE *)v15 + 24) = 0;
    *((_BYTE *)v15 + 48) = 0;
    v15[7] = "Failed to encrypt data using public key from certificate.";
  }
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v20, (uint64_t *)&v19);
  v18 = CFDataGetLength(v19);
  crypto::public_key_header::_encryptedBlob::set_len((_DWORD *)this + 12, &v18);
  v10 = v19;
  v28.length = CFDataGetLength(v19);
  v28.location = 0;
  CFDataGetBytes(v10, v28, (UInt8 *)this + 52);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v19);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&plaintext);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&theData);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return this;
}

void sub_212F8E874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, const void *a13, const void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  __cxa_free_exception(v18);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a13);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **crypto::format::make_key_blob@<X0>(crypto::format *this@<X0>, _QWORD *a2@<X8>)
{
  void **result;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;

  result = (void **)std::vector<std::byte>::vector(a2, *((_QWORD *)this + 1) + *((_QWORD *)this + 4) - (*(_QWORD *)this + *((_QWORD *)this + 3)) + 5);
  v4 = (char *)*result;
  v5 = *((_QWORD *)this + 1);
  v6 = v5 - *(_QWORD *)this;
  if (v5 != *(_QWORD *)this)
    result = (void **)memmove(*result, *(const void **)this, v5 - *(_QWORD *)this);
  v7 = &v4[v6];
  v8 = (_BYTE *)*((_QWORD *)this + 3);
  v9 = (_BYTE *)*((_QWORD *)this + 4);
  v10 = v9 - v8;
  if (v9 != v8)
    result = (void **)memmove(v7, v8, v9 - v8);
  strcpy(&v7[v10], "CKIE");
  return result;
}

uint64_t *makeCFAutoReleaseThrowOnNull<__CFData const*>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *exception;
  const std::error_category *v4;

  v2 = *result;
  *a2 = *result;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v4 = std::generic_category();
    exception[1] = 22;
    exception[2] = v4;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Failed creating CFAutoRelease instance.";
  }
  return result;
}

void sub_212F8EA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
  CFAutoRelease<__CFData const*>::~CFAutoRelease(a10);
  _Unwind_Resume(a1);
}

_DWORD *crypto::public_key_header::_publicKeyHash::set_len(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_24CF07FD0;
    exception[1] = "_publicKeyHash";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

uint64_t crypto::public_key_header::get_crypto_algo_and_padding(crypto::public_key_header *this)
{
  int v1;
  uint64_t v2;
  DiskImagesRuntimeException *exception;
  void *v5;

  if (*((_DWORD *)this + 9) != 42)
    goto LABEL_7;
  v1 = *((_DWORD *)this + 10);
  if (v1 == 10)
  {
    v2 = MEMORY[0x24BDE9328];
    return *(_QWORD *)v2;
  }
  if (v1 != -2147483647)
  {
LABEL_7:
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Unsupported public key algorithm.", 0xA1u);
  }
  v2 = MEMORY[0x24BDE9318];
  return *(_QWORD *)v2;
}

_DWORD *crypto::public_key_header::_encryptedBlob::set_len(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_24CF07FD0;
    exception[1] = "_encryptedBlob";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

crypto::password_header *crypto::password_header::password_header(crypto::password_header *this, const char *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v4 = (_DWORD *)((char *)this + 12);
  v5 = (_DWORD *)((char *)this + 48);
  v6 = (_DWORD *)((char *)this + 100);
  bzero(this, 0x268uLL);
  v7 = bswap32(*(_DWORD *)a2);
  LODWORD(v12[0]) = 103;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_algorithm_t", v7, v12, 1);
  *(_DWORD *)this = v7;
  v8 = bswap32(*((_DWORD *)a2 + 1));
  LODWORD(v12[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_prng_algorithm_t", v8, v12, 1);
  *((_DWORD *)this + 1) = v8;
  *((_DWORD *)this + 2) = bswap32(*((_DWORD *)a2 + 2));
  LODWORD(v12[0]) = bswap32(*((_DWORD *)a2 + 3));
  crypto::password_header::_salt::set_len(v4, v12);
  v9 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v9;
  LODWORD(v12[0]) = bswap32(*((_DWORD *)a2 + 12));
  crypto::password_header::_blob_encryption_iv::set_len(v5, v12);
  v10 = *(_OWORD *)(a2 + 68);
  *(_OWORD *)((char *)this + 52) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)((char *)this + 68) = v10;
  *((_DWORD *)this + 21) = bswap32(*((_DWORD *)a2 + 21));
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 22));
  v12[0] = 0x8000000100000011;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_algo", (int)v5, v12, 2);
  *((_DWORD *)this + 22) = (_DWORD)v5;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 23));
  LODWORD(v12[0]) = 7;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_padding_algo", (int)v5, v12, 1);
  *((_DWORD *)this + 23) = (_DWORD)v5;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 24));
  LODWORD(v12[0]) = 6;
  smart_enums::validators::value<unsigned int>((uint64_t)"crypto_mode", (int)v5, v12, 1);
  *((_DWORD *)this + 24) = (_DWORD)v5;
  LODWORD(v12[0]) = bswap32(*((_DWORD *)a2 + 25));
  crypto::password_header::_blob::set_len(v6, v12);
  memcpy((char *)this + 104, a2 + 104, 0x200uLL);
  return this;
}

char *crypto::password_header::write(crypto::password_header *this, char *a2)
{
  __int128 v3;
  __int128 v4;

  *(_DWORD *)a2 = bswap32(*(_DWORD *)this);
  *((_DWORD *)a2 + 1) = bswap32(*((_DWORD *)this + 1));
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  v3 = *((_OWORD *)this + 2);
  *((_OWORD *)a2 + 1) = *((_OWORD *)this + 1);
  *((_OWORD *)a2 + 2) = v3;
  *((_DWORD *)a2 + 12) = bswap32(*((_DWORD *)this + 12));
  v4 = *(_OWORD *)((char *)this + 52);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)((char *)this + 68);
  *(_OWORD *)(a2 + 52) = v4;
  *((_DWORD *)a2 + 21) = bswap32(*((_DWORD *)this + 21));
  *((_DWORD *)a2 + 22) = bswap32(*((_DWORD *)this + 22));
  *((_DWORD *)a2 + 23) = bswap32(*((_DWORD *)this + 23));
  *((_DWORD *)a2 + 24) = bswap32(*((_DWORD *)this + 24));
  *((_DWORD *)a2 + 25) = bswap32(*((_DWORD *)this + 25));
  memcpy(a2 + 104, (char *)this + 104, 0x200uLL);
  return a2 + 616;
}

crypto::password_header *crypto::password_header::password_header(crypto::password_header *this)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = 103;
  LODWORD(v3[0]) = 103;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_algorithm_t", 103, v3, 1);
  *((_DWORD *)this + 1) = 0;
  LODWORD(v3[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_prng_algorithm_t", 0, v3, 1);
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)((char *)this + 84) = 0x11000000C0;
  v3[0] = 0x8000000100000011;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_algo", 17, v3, 2);
  *((_DWORD *)this + 23) = 7;
  LODWORD(v3[0]) = 7;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_padding_algo", 7, v3, 1);
  *((_DWORD *)this + 24) = 6;
  LODWORD(v3[0]) = 6;
  smart_enums::validators::value<unsigned int>((uint64_t)"crypto_mode", 6, v3, 1);
  bzero((char *)this + 100, 0x204uLL);
  LODWORD(v3[0]) = 20;
  crypto::password_header::_salt::set_len((_DWORD *)this + 3, v3);
  LODWORD(v3[0]) = 8;
  crypto::password_header::_blob_encryption_iv::set_len((_DWORD *)this + 12, v3);
  crypto::generate_random_bytes((crypto::password_header *)((char *)this + 16), *((unsigned int *)this + 3));
  crypto::generate_random_bytes((crypto::password_header *)((char *)this + 52), *((unsigned int *)this + 12));
  return this;
}

_DWORD *crypto::password_header::_salt::set_len(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_24CF07FD0;
    exception[1] = "_salt";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

_DWORD *crypto::password_header::_blob_encryption_iv::set_len(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_24CF07FD0;
    exception[1] = "_blob_encryption_iv";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

uint64_t crypto::generate_random_bytes(crypto *this, size_t a2)
{
  uint64_t result;
  void *exception;
  _QWORD v4[33];

  result = CCRandomGenerateBytes(this, a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"random generation failed with err code ", 39);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v4, 0x9Au);
  }
  return result;
}

void sub_212F8F0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t crypto::password_header::get_derived_key_encryption_algorithm(crypto::password_header *this)
{
  int v1;
  void *exception;
  _QWORD v4[33];

  v1 = *((_DWORD *)this + 22);
  if (v1 == -2147483647)
    return 0;
  if (v1 != 17)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Unsupported key decryption algo", 31);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v4, 0xA1u);
  }
  return 2;
}

void sub_212F8F1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t crypto::keys::generate_derivation_key@<X0>(crypto::keys *this@<X0>, const crypto::password_header *a2@<X1>, uint8_t **a3@<X8>)
{
  unint64_t v5;
  size_t v8;
  uint64_t result;
  unsigned int v10;
  DiskImagesRuntimeException *exception;
  void *v12;
  _QWORD *v13;
  const std::error_category *v14;
  char v15;

  v5 = *((unsigned int *)this + 21);
  if ((v5 & 7) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "crypto_format: key size isn't a multiple of 8", 0x16u);
  }
  v15 = 0;
  std::vector<std::byte>::vector(a3, v5 >> 3, &v15);
  v8 = strlen((const char *)a2);
  result = CCKeyDerivationPBKDF(2u, (const char *)a2, v8, (const uint8_t *)this + 16, *((unsigned int *)this + 3), 1u, *((_DWORD *)this + 2), *a3, a3[1] - *a3);
  v10 = result;
  if ((_DWORD)result)
  {
    v13 = __cxa_allocate_exception(0x40uLL);
    *v13 = &off_24CF07908;
    v14 = std::generic_category();
    v13[1] = v10;
    v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 48) = 0;
    v13[7] = "crypto_format: Can't derive key";
  }
  return result;
}

void sub_212F8F2E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *crypto::password_header::_blob::set_len(_DWORD *result, _DWORD *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_24CF07FD0;
    exception[1] = "_blob";
    exception[2] = "field size too large";
  }
  *result = *a2;
  return result;
}

crypto::password_header *crypto::password_header::password_header(crypto::password_header *this, const crypto::format *a2, const char *a3)
{
  crypto::password_header *v6;
  size_t v7;
  CCAlgorithm derived_key_encryption_algorithm;
  void *exception;
  _QWORD v11[33];
  uint8_t *v12;
  uint8_t *v13;
  size_t dataOutMoved;
  void *v15;
  _BYTE *v16;

  v6 = crypto::password_header::password_header(this);
  LODWORD(v11[0]) = 8;
  crypto::password_header::_blob_encryption_iv::set_len((_DWORD *)v6 + 12, v11);
  v7 = strlen(a3);
  *((_DWORD *)this + 2) = CCCalibratePBKDF(2u, v7, *((unsigned int *)this + 3), 1u, (unint64_t)*((unsigned int *)this + 21) >> 3, 0x64u);
  crypto::format::make_key_blob(a2, &v15);
  dataOutMoved = 0;
  crypto::keys::generate_derivation_key(this, (const crypto::password_header *)a3, &v12);
  derived_key_encryption_algorithm = crypto::password_header::get_derived_key_encryption_algorithm(this);
  LODWORD(a3) = CCCrypt(0, derived_key_encryption_algorithm, 1u, v12, v13 - v12, (char *)this + 52, v15, v16 - (_BYTE *)v15, (char *)this + 104, 0x200uLL, &dataOutMoved);
  bzero(v12, v13 - v12);
  if ((_DWORD)a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Image key encoding failed with err code ", 40);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v11, 0x9Au);
  }
  LODWORD(v11[0]) = dataOutMoved;
  crypto::password_header::_blob::set_len((_DWORD *)this + 25, v11);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  return this;
}

void sub_212F8F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(_QWORD *)(v5 - 80) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v5 - 56);
  if (v8)
  {
    *(_QWORD *)(v5 - 48) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

crypto::auth_table_entry *crypto::auth_table_entry::auth_table_entry(crypto::auth_table_entry *this, const char *a2)
{
  int v4;
  __int128 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v4 = bswap32(*(_DWORD *)a2);
  v6 = xmmword_212FF3DB0;
  v7 = 9;
  smart_enums::validators::value<unsigned int>((uint64_t)"auth_table_entry_mechanism", v4, &v6, 5);
  *(_DWORD *)this = v4;
  *(_QWORD *)((char *)this + 4) = bswap64(*(_QWORD *)(a2 + 4));
  *(_QWORD *)((char *)this + 12) = bswap64(*(_QWORD *)(a2 + 12));
  return this;
}

void crypto::keys::generate_password_wrapped_key(const crypto::password_header *a1@<X1>, crypto::password_header *a2@<X2>, unint64_t *a3@<X8>)
{
  CCAlgorithm derived_key_encryption_algorithm;
  unsigned int v7;
  _QWORD *exception;
  const std::error_category *v9;
  void *__p;
  _BYTE *v11;
  size_t __sz;
  char __src[516];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  __sz = 0;
  crypto::keys::generate_derivation_key(a1, a2, (uint8_t **)&__p);
  derived_key_encryption_algorithm = crypto::password_header::get_derived_key_encryption_algorithm(a1);
  v7 = CCCrypt(1u, derived_key_encryption_algorithm, 1u, __p, v11 - (_BYTE *)__p, (char *)a1 + 52, (char *)a1 + 104, *((unsigned int *)a1 + 25), __src, *((unsigned int *)a1 + 25), &__sz);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v9 = std::generic_category();
    exception[1] = v7;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't decrypt wrapped key";
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::byte>::reserve(a3, __sz);
  std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>((uint64_t)a3, (char *)*a3, __src, &__src[__sz], __sz);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_212F8F748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double crypto::keys::generate_base_key@<D0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  const void *v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  DiskImagesRuntimeException *exception;
  void *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (!crypto::keys::verify_cookie(a1, a2))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "crypto_format: Cookie differs", 0x23u);
  }
  v6 = *a2;
  v7 = (unint64_t)*(unsigned int *)(a1 + 24) >> 3;
  v18 = 0;
  v17 = 0uLL;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::byte const*>,std::__wrap_iter<std::byte const*>>(&v17, v6, (uint64_t)v6 + v7, v7);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = (char *)*a2 + (v8 >> 3);
  v10 = (*(_DWORD *)(a1 + 32) + v8) >> 3;
  v11 = (uint64_t)*a2 + v10;
  v16 = 0;
  v15 = 0uLL;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::byte const*>,std::__wrap_iter<std::byte const*>>(&v15, v9, v11, v10 - (v8 >> 3));
  *(_OWORD *)a3 = v17;
  *(_QWORD *)(a3 + 16) = v18;
  result = *(double *)&v15;
  *(_OWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 40) = v16;
  return result;
}

void sub_212F8F868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL crypto::keys::verify_cookie(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  std::string v6;

  v2 = ((*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 24)) >> 3) + 5;
  if (a2[1] - *a2 != v2)
    return 0;
  v3 = *a2 + v2;
  *((_BYTE *)&v6.__r_.__value_.__s + 23) = 4;
  LODWORD(v6.__r_.__value_.__l.__data_) = *(_DWORD *)(v3 - 5);
  v6.__r_.__value_.__s.__data_[4] = 0;
  v4 = std::string::compare(&v6, "CKIE") == 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t crypto::keys::generate_password_base_key@<X0>(Backend *a1@<X1>, const crypto::header *a2@<X2>, crypto::password_header *a3@<X5>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  unsigned int v13;
  __n128 v14;
  DiskImagesRuntimeException *exception;
  void *v17;
  _QWORD *v18;
  const std::error_category *v19;
  void *__p[3];
  _BYTE v21[616];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a5 != 616)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF encryption: password header size mismatch", 0x16u);
  }
  v12 = (void *)operator new[]();
  bzero(v12, 0x268uLL);
  v13 = Backend::read(a1, (char *)v12, 616, a4);
  if ((v13 & 0x80000000) != 0)
  {
    v18 = __cxa_allocate_exception(0x40uLL);
    *v18 = &off_24CF07908;
    v19 = std::generic_category();
    v18[1] = v13;
    v18[2] = v19;
    *((_BYTE *)v18 + 24) = 0;
    *((_BYTE *)v18 + 48) = 0;
    v18[7] = "Can't read UDIF crypto header";
  }
  crypto::password_header::password_header((crypto::password_header *)v21, (const char *)v12);
  crypto::keys::generate_password_wrapped_key((const crypto::password_header *)v21, a3, (unint64_t *)__p);
  v14.n128_f64[0] = crypto::keys::generate_base_key((uint64_t)a2, (const void **)__p, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return MEMORY[0x2199A8A00](v12, 0x1000C8077774924, v14);
}

void sub_212F8FAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x2199A8A00](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t crypto::keys::keys(uint64_t a1, uint64_t a2, uint64_t *a3, __SecKey *a4, uint64_t a5)
{
  _QWORD *v9;
  const __CFString *crypto_algo_and_padding;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD *exception;
  unsigned int Code;
  const std::error_category *v20;
  void *__p[3];
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __CFData *v26;
  CFDataRef v27;
  const __CFData *v28;
  CFErrorRef error;

  v9 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  error = 0;
  *(_QWORD *)&v22 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)(a5 + 52), *(unsigned int *)(a5 + 48));
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v22, (uint64_t *)&v28);
  crypto_algo_and_padding = (const __CFString *)crypto::public_key_header::get_crypto_algo_and_padding((crypto::public_key_header *)a5);
  v27 = SecKeyCreateDecryptedData(a4, crypto_algo_and_padding, v28, &error);
  if (!v27)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    Code = CFErrorGetCode(error);
    *exception = &off_24CF07908;
    v20 = std::generic_category();
    exception[1] = Code;
    exception[2] = v20;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Error while decrypting data using keychain";
  }
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v27, (uint64_t *)&v26);
  v11 = *a3;
  CFDataCopyToVector(v26, 0, 0, (unint64_t *)__p);
  v12.n128_f64[0] = crypto::keys::generate_base_key(v11, (const void **)__p, (uint64_t)&v22);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v13 = *a3;
  *a3 = 0;
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  if (v14)
    MEMORY[0x2199A8A18](v14, 0x1000C4015A9971DLL, v12);
  v15 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v22;
  *(_QWORD *)(a1 + 16) = v23;
  v16 = *(void **)(a1 + 24);
  if (v16)
  {
    *(_QWORD *)(a1 + 32) = v16;
    operator delete(v16);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 40) = v25;
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v26);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v28);
  return a1;
}

void sub_212F8FCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;

  __cxa_free_exception(v20);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)(v22 - 64));
  v24 = *(void **)(v19 + 56);
  if (v24)
  {
    *(_QWORD *)(v19 + 64) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(v19 + 48);
  *(_QWORD *)(v19 + 48) = 0;
  if (v25)
    MEMORY[0x2199A8A18](v25, 0x1000C4015A9971DLL);
  v26 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 32) = v26;
    operator delete(v26);
  }
  v27 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<std::byte>,std::vector<std::byte>>::~tuple(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t crypto::keys::keys(uint64_t a1, Backend *a2, const crypto::header **a3, crypto::password_header *a4)
{
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  unint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const crypto::header *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD *v22;
  const std::error_category *v23;
  _QWORD *exception;
  const std::error_category *v25;
  char *v26;
  void *v28[2];
  void *v29;
  __int128 v30;
  void *v31;
  __int128 v32;
  void *__p[2];
  void *v34[2];
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v7 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v8 = 20 * *((unsigned int *)*a3 + 18);
  v9 = (void *)operator new[]();
  bzero(v9, v8);
  v10 = Backend::read(a2, (char *)v9, v8, 76);
  v26 = (char *)v9;
  if ((v10 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v25 = std::generic_category();
    exception[1] = v10;
    exception[2] = v25;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Crypto: Can't read encryption table";
  }
  if (!*((_DWORD *)*a3 + 18))
  {
LABEL_15:
    v22 = __cxa_allocate_exception(0x40uLL);
    *v22 = &off_24CF07908;
    v23 = std::generic_category();
    v22[1] = 80;
    v22[2] = v23;
    *((_BYTE *)v22 + 24) = 0;
    *((_BYTE *)v22 + 48) = 0;
    v22[7] = "Invalid passphrase or key";
  }
  v11 = 0;
  v12 = (const char *)v9;
  while (1)
  {
    crypto::auth_table_entry::auth_table_entry((crypto::auth_table_entry *)&v36, v12);
    if (v36 == 1)
      break;
    ++v11;
    v12 += 20;
    if (v11 >= *((unsigned int *)*a3 + 18))
      goto LABEL_15;
  }
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)__p = 0u;
  crypto::keys::generate_password_base_key(a2, *a3, a4, v37, v38, (uint64_t)&v29);
  v13 = v29;
  __p[0] = v29;
  *(_OWORD *)v28 = v30;
  __p[1] = (void *)v30;
  v14 = v31;
  v15 = v32;
  v34[1] = v31;
  v35 = v32;
  v16 = *((_QWORD *)&v32 + 1);
  v17 = *a3;
  *a3 = 0;
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v17;
  if (v18)
    MEMORY[0x2199A8A18](v18, 0x1000C4015A9971DLL);
  v19 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v19;
    operator delete(v19);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_QWORD *)a1 = v13;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v28;
  __p[1] = 0;
  v34[0] = 0;
  __p[0] = 0;
  v20 = *(void **)(a1 + 24);
  if (v20)
  {
    *(_QWORD *)(a1 + 32) = v20;
    operator delete(v20);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v16;
  if (__p[0])
    operator delete(__p[0]);
  MEMORY[0x2199A8A00](v26, 0x1000C8077774924);
  return a1;
}

void sub_212F90088()
{
  uint64_t v0;

  __cxa_end_catch();
  std::tuple<std::vector<std::byte>,std::vector<std::byte>>::~tuple((uint64_t)&v0);
  JUMPOUT(0x212F900BCLL);
}

void sub_212F900AC()
{
  JUMPOUT(0x212F900E0);
}

__n128 crypto::keys::keys(_QWORD *a1, uint64_t a2, __n128 *a3, uint64_t *a4)
{
  __n128 result;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  result = *a3;
  *(__n128 *)(a1 + 3) = *a3;
  a1[5] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v5 = *a4;
  *a4 = 0;
  a1[6] = v5;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return result;
}

const void **crypto::format::populate_crypto_info(crypto::header **this, DiskImageInfo *a2)
{
  return crypto::header::populate_crypto_header_info(this[6], a2);
}

uint64_t crypto::format::aes_context::aes_context(uint64_t a1, CCOperation a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  CCCryptorStatus v11;
  unsigned int v13;
  _QWORD *exception;
  const std::error_category *v15;

  *(_QWORD *)(a1 + 24) = 0;
  v10 = a1 + 24;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  *(_QWORD *)(v10 + 24) = a5;
  *(_QWORD *)(v10 + 32) = a4;
  v11 = CCCryptorCreate(a2, 0, 0, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3, 0, (CCCryptorRef *)(v10 - 16));
  if (v11)
  {
    v13 = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v15 = std::generic_category();
    exception[1] = v13;
    exception[2] = v15;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't initialize aes cryptor";
  }
  *(_BYTE *)a1 = 1;
  return a1;
}

void sub_212F90280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void crypto::format::aes_context::~aes_context(CCCryptorRef *this)
{
  _CCCryptor *v2;

  if (*(_BYTE *)this)
    CCCryptorRelease(this[1]);
  v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
}

uint64_t crypto::format::format(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  v3 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = a1 + 56;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  std::allocate_shared[abi:ne180100]<crypto::format::aes_iv,std::allocator<crypto::format::aes_iv>,std::vector<std::byte> &,void>(a1 + 24, &v9);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v4, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_212F903C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  void *v8;

  v4 = v3;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4);
  v6 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v6)
    MEMORY[0x2199A8A18](v6, 0x1000C4015A9971DLL);
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t crypto::format::format(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4, __SecKey *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  crypto *v12;
  char *v13;
  unint64_t v15;
  crypto *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *__p;
  unint64_t v26;
  unint64_t v27;
  __SecKey *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  _OWORD v35[32];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v28 = a5;
  v8 = (unint64_t *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = (unint64_t)*(unsigned int *)(v9 + 24) >> 3;
  v12 = *(crypto **)a1;
  v13 = *(char **)(a1 + 8);
  if (v11 <= v13 - (char *)v12)
  {
    if (v11 < v13 - (char *)v12)
    {
      v13 = (char *)v12 + v11;
      *(_QWORD *)(a1 + 8) = (char *)v12 + v11;
    }
  }
  else
  {
    std::vector<std::byte>::__append((unint64_t *)a1, v11 - (v13 - (char *)v12));
    v12 = *(crypto **)a1;
    v13 = *(char **)(a1 + 8);
  }
  crypto::generate_random_bytes(v12, v13 - (char *)v12);
  v15 = (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 48) + 32) >> 3;
  v16 = *(crypto **)(a1 + 24);
  v17 = *(char **)(a1 + 32);
  if (v15 <= v17 - (char *)v16)
  {
    if (v15 < v17 - (char *)v16)
    {
      v17 = (char *)v16 + v15;
      *(_QWORD *)(a1 + 32) = (char *)v16 + v15;
    }
  }
  else
  {
    std::vector<std::byte>::__append(v8, v15 - (v17 - (char *)v16));
    v16 = *(crypto **)(a1 + 24);
    v17 = *(char **)(a1 + 32);
  }
  crypto::generate_random_bytes(v16, v17 - (char *)v16);
  std::allocate_shared[abi:ne180100]<crypto::format::aes_iv,std::allocator<crypto::format::aes_iv>,std::vector<std::byte> &,void>((uint64_t)v8, &v29);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v10, (__int128 *)&v29);
  v18 = *(std::__shared_weak_count **)((char *)&v30 + 4);
  if (*(_QWORD *)((char *)&v30 + 4))
  {
    v19 = (unint64_t *)(*(_QWORD *)((char *)&v30 + 4) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  __p = 0;
  v26 = 0;
  v27 = 0;
  if (a4)
  {
    crypto::password_header::password_header((crypto::password_header *)&v29, (const crypto::format *)a1, a4);
    v26 = std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::password_header>((uint64_t *)&__p, (uint64_t)&v29);
  }
  if (v28)
  {
    crypto::public_key_header::public_key_header((crypto::public_key_header *)&v29, (const crypto::format *)a1, &v28);
    v21 = v26;
    if (v26 >= v27)
    {
      v23 = std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::public_key_header>((uint64_t *)&__p, (uint64_t)&v29);
    }
    else
    {
      *(_DWORD *)(v26 + 32) = 0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_DWORD *)v21 = v29;
      v22 = v30;
      *(_OWORD *)(v21 + 20) = v31;
      *(_OWORD *)(v21 + 4) = v22;
      *(_QWORD *)(v21 + 36) = v32;
      *(_DWORD *)(v21 + 44) = v33;
      bzero((void *)(v21 + 48), 0x204uLL);
      *(_DWORD *)(v21 + 48) = v34;
      memcpy((void *)(v21 + 52), v35, 0x200uLL);
      *(_DWORD *)(v21 + 616) = 1;
      v23 = v21 + 620;
    }
    v26 = v23;
  }
  crypto::format::write_header_and_keys(a1, a3, (uint64_t *)&__p);
  if (__p)
  {
    v26 = (unint64_t)__p;
    operator delete(__p);
  }
  return a1;
}

void sub_212F90738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v12);
  v14 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 48) = 0;
  if (v14)
    MEMORY[0x2199A8A18](v14, 0x1000C4015A9971DLL);
  v15 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void crypto::format::write_header_and_keys(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t total_entries_size;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  std::vector<char>::pointer begin;
  std::vector<char>::pointer end;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  const std::error_category *v23;
  _QWORD *exception;
  const std::error_category *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  std::vector<char> *v28;
  uint64_t v29;
  int64_t v30;
  char v31;
  std::vector<char> v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t **v35;

  v6 = (a3[1] - *a3) >> 2;
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 72) = 1496311187 * v6;
  v34 = 76;
  v7 = 0xBDEF7BDEF7BDEF7CLL * v6 + 76;
  v33 = v7;
  total_entries_size = crypto::format::get_total_entries_size(a1, a3);
  std::vector<char>::vector(&v32, total_entries_size + v7);
  crypto::header::write(*(crypto::header **)(a1 + 48), v32.__begin_);
  v9 = *a3;
  for (i = a3[1]; v9 != i; v9 += 620)
  {
    v26 = &v34;
    v27 = (std::__shared_weak_count *)&v33;
    v28 = &v32;
    v11 = *(unsigned int *)(v9 + 616);
    if ((_DWORD)v11 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v35 = &v26;
    ((void (*)(uint64_t ***, uint64_t))off_24CF08010[v11])(&v35, v9);
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) < *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64))
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    if (v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v25 = std::generic_category();
      exception[1] = v12;
      exception[2] = v25;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Failed truncating crypto header";
    }
  }
  begin = v32.__begin_;
  end = v32.__end_;
  v15 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v26 = (uint64_t *)begin;
  v27 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v28 = (std::vector<char> *)(end - begin);
  v29 = 0;
  v30 = end - begin;
  v31 = 0;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)a2 + 80))(a2, &v26);
  if (v28 != (std::vector<char> *)(int)v18)
  {
    v22 = __cxa_allocate_exception(0x40uLL);
    *v22 = &off_24CF07908;
    v23 = std::generic_category();
    v22[1] = v18;
    v22[2] = v23;
    *((_BYTE *)v22 + 24) = 0;
    *((_BYTE *)v22 + 48) = 0;
    v22[7] = "Failed writing crypto header";
  }
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
}

void sub_212F90A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t crypto::format::get_total_entries_size(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v7;
  char *v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v4 = 0;
  do
  {
    v5 = *(unsigned int *)(v2 + 616);
    if ((_DWORD)v5 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v8 = &v7;
    v4 += ((uint64_t (*)(char **, uint64_t))off_24CF08000[v5])(&v8, v2);
    v2 += 620;
  }
  while (v2 != v3);
  return v4;
}

uint64_t crypto_format_backend::crypt_chunk(crypto_format_backend *this, crypto::format::aes_context *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v13;
  __int128 v14;
  int v15;
  _QWORD v16[45];
  uint64_t v17;
  uint64_t v18;

  if (!a4)
    return 0;
  v6 = a4;
  v9 = 0;
  v10 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 52);
  while (1)
  {
    v11 = crypto::format::aes_context::crypt(a2, (a5 + v9) / v10, &a3[v9], &a3[v9], 1);
    if (v11)
      break;
    v9 += v10;
    if (!--v6)
      return 0;
  }
  v13 = v11;
  *(_QWORD *)&v14 = "crypto_format_backend::crypt_chunk(crypto::format::aes_context &, char *, size_t, uint64_t)";
  *((_QWORD *)&v14 + 1) = 34;
  v15 = 16;
  di_log::logger<di_log::log_printer<690ul>>::logger(v16, &v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Crypto operation on data of ", 28);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" failed with ", 13);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf((uint64_t)v16);
  MEMORY[0x2199A89AC](&v18);
  if (v13 < 0)
    return v13;
  else
    return -v13;
}

void sub_212F90C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<690ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

crypto *crypto::format::aes_context::crypt(crypto::format::aes_context *this, unsigned int a2, const void *a3, void *a4, uint64_t a5)
{
  const void *v10;
  CCCryptorStatus v11;
  __int128 v13;
  int v14;
  CCHmacContext __dst;
  _QWORD macOut[2];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  macOut[0] = 0;
  macOut[1] = 0;
  v17 = 0;
  v10 = (const void *)*((_QWORD *)this + 7);
  LODWORD(v13) = bswap32(a2);
  memcpy(&__dst, v10, sizeof(__dst));
  CCHmacUpdate(&__dst, &v13, 4uLL);
  CCHmacFinal(&__dst, macOut);
  v11 = CCCryptorReset(*((CCCryptorRef *)this + 1), macOut);
  if (v11)
  {
    *(_QWORD *)&v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((_QWORD *)&v13 + 1) = 34;
    v14 = 16;
    di_log::logger<di_log::log_printer<564ul>>::logger(&__dst, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"CommonCryptoReset @ ", 20);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf((uint64_t)&__dst);
  }
  else
  {
    v11 = CCCryptorUpdate(*((CCCryptorRef *)this + 1), a3, *((_QWORD *)this + 6) * a5, a4, *((_QWORD *)this + 6) * a5, 0);
    if (!v11)
      return 0;
    *(_QWORD *)&v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((_QWORD *)&v13 + 1) = 34;
    v14 = 16;
    di_log::logger<di_log::log_printer<578ul>>::logger(&__dst, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"CommonCryptoUpdate @ ", 21);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf((uint64_t)&__dst);
  }
  MEMORY[0x2199A89AC](&__dst.ctx[92]);
  if (v11 < 0)
    return (crypto *)v11;
  else
    return (crypto *)-v11;
}

void sub_212F90EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<578ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<690ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<690ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF08478;
  a1[45] = &unk_24CF08578;
  a1[46] = &unk_24CF085A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF08478;
  a1[45] = &unk_24CF08500;
  a1[46] = &unk_24CF08528;
  return a1;
}

void sub_212F90F7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<690ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void crypto_format_backend::crypt(crypt *this, crypto::format::aes_context *a2, char *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  _QWORD block[10];
  int v12;
  unsigned int v13;

  if (a4 >= 0x21 && (v10 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 52), qos_class_self() > 0x14))
  {
    v13 = 0;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN21crypto_format_backend5cryptERN6crypto6format11aes_contextEPcmy_block_invoke;
    block[3] = &__block_descriptor_tmp_8;
    block[4] = this;
    block[5] = a4;
    block[6] = a2;
    block[7] = a3;
    v12 = v10;
    block[8] = a5;
    block[9] = &v13;
    dispatch_apply((a4 + 31) >> 5, 0, block);
    atomic_load(&v13);
  }
  else
  {
    crypto_format_backend::crypt_chunk(this, a2, a3, a4, a5);
  }
}

void ___ZN21crypto_format_backend5cryptERN6crypto6format11aes_contextEPcmy_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  crypto_format_backend *v4;
  uint64_t v5;
  unsigned int v6;
  CCCryptorRef v7[8];

  v3 = 32 * a2;
  v4 = *(crypto_format_backend **)(a1 + 32);
  if ((unint64_t)(*(_QWORD *)(a1 + 40) - 32 * a2) >= 0x20)
    v5 = 32;
  else
    v5 = *(_QWORD *)(a1 + 40) - 32 * a2;
  crypto::format::aes_context::aes_context((uint64_t)v7, *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16), *(_QWORD *)(a1 + 48) + 24, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 56), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48));
  v6 = crypto_format_backend::crypt_chunk(v4, (crypto::format::aes_context *)v7, (char *)(*(_QWORD *)(a1 + 56) + v3 * *(unsigned int *)(a1 + 80)), v5, v3 * *(unsigned int *)(a1 + 80) + *(_QWORD *)(a1 + 64));
  if (v6)
    atomic_store(v6, *(unsigned int **)(a1 + 72));
  crypto::format::aes_context::~aes_context(v7);
}

void sub_212F91160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CCCryptorRef a9)
{
  crypto::format::aes_context::~aes_context(&a9);
  _Unwind_Resume(a1);
}

void crypto_format_backend::read_aligned(crypto_format_backend *this, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  uint64_t v15;

  if (a3)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 48);
    v9 = *(unsigned int *)(v8 + 52);
    if ((*((_BYTE *)this + 192) & 1) != 0)
      v10 = 0;
    else
      v10 = *(_QWORD *)(v8 + 64);
    if ((Backend::read(*((Backend **)this + 3), a2, v9 * a3, v10 + a4) & 0x80000000) != 0)
    {
      *(_QWORD *)&v11 = "crypto_format_backend::read_aligned(char *, ssize_t, uint64_t)";
      *((_QWORD *)&v11 + 1) = 35;
      v12 = 16;
      di_log::logger<di_log::log_printer<738ul>>::logger(v13, &v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Crypto couldn't read from inner backend @ ", 42);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"/", 1);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf((uint64_t)v13);
      MEMORY[0x2199A89AC](&v15);
    }
    else
    {
      crypto_format_backend::crypt(this, (crypto_format_backend *)((char *)this + 120), a2, a3, a4);
    }
  }
}

void sub_212F912D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<738ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<738ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<738ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF08698;
  a1[45] = &unk_24CF08798;
  a1[46] = &unk_24CF087C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF08698;
  a1[45] = &unk_24CF08720;
  a1[46] = &unk_24CF08748;
  return a1;
}

void sub_212F9136C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<738ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void crypto_format_backend::read(crypto_format_backend *this, char **a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  size_t v12;
  int v13;

  v3 = *a2;
  v5 = (uint64_t)a2[2];
  v4 = a2[3];
  v6 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 52);
  v7 = (unint64_t)v4 / v6 * v6;
  v8 = (unint64_t)v4 % v6;
  if ((unint64_t)v4 % v6)
  {
    crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, (unint64_t)v4 / v6 * v6);
    if (v10)
      return;
    v11 = v8;
    if (v5 >= (uint64_t)(v6 - v8))
      v12 = v6 - v8;
    else
      v12 = v5;
    memcpy(v3, (const void *)(*((_QWORD *)this + 23) + v11), v12);
    v5 -= v12;
    v3 += v12;
    v7 += v6;
  }
  crypto_format_backend::read_aligned(this, v3, v5 / v6, v7);
  if (!v9 && v5 % v6)
  {
    crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, v5 - v5 % v6 + v7);
    if (!v13)
      memcpy(&v3[v5 / v6 * v6], *((const void **)this + 23), v5 % v6);
  }
}

uint64_t crypto_format_backend::write_aligned(crypto_format_backend *this, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  int v16;
  _QWORD v17[45];
  uint64_t v18;
  uint64_t v19;

  v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 48);
  if ((*((_BYTE *)this + 192) & 1) != 0)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned int *)(v8 + 52);
  crypto_format_backend::crypt(this, (crypto_format_backend *)((char *)this + 56), a2, a3, a4);
  v12 = v11;
  if (!(_DWORD)v11)
  {
    v13 = Backend::write(*((Backend **)this + 3), a2, v10 * a3, v9 + a4);
    if ((v13 & 0x80000000) != 0)
    {
      v12 = v13;
      *(_QWORD *)&v15 = "crypto_format_backend::write_aligned(char *, ssize_t, uint64_t)";
      *((_QWORD *)&v15 + 1) = 36;
      v16 = 16;
      di_log::logger<di_log::log_printer<806ul>>::logger(v17, &v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Crypto couldn't write to inner backend @ ", 41);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"/", 1);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf((uint64_t)v17);
      MEMORY[0x2199A89AC](&v19);
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

void sub_212F91624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<806ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<806ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<806ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF088B8;
  a1[45] = &unk_24CF089B8;
  a1[46] = &unk_24CF089E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF088B8;
  a1[45] = &unk_24CF08940;
  a1[46] = &unk_24CF08968;
  return a1;
}

void sub_212F916C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<806ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void crypto_format_backend::write(crypto_format_backend *this, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  int v15;

  v4 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 52);
  v8 = v5 / v7 * v7;
  v9 = v5 % v7;
  if (v5 % v7)
  {
    crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, v5 / v7 * v7);
    if (v11)
      return;
    v12 = &v4[v9];
    v13 = v6 >= (uint64_t)(v7 - v9) ? v7 - v9 : v6;
    memcpy(*((void **)this + 23), v12, v13);
    if (crypto_format_backend::write_aligned(this, *((char **)this + 23), 1uLL, v8))
      return;
    v6 -= v13;
    v4 += v13;
    v8 += v13;
  }
  if (!*(_BYTE *)(a2 + 40))
  {
    v10 = v6 / v7;
    if (crypto_format_backend::write_aligned(this, v4, v6 / v7, v8))
      return;
    v4 += v10 * v7;
    v8 += v10 * v7;
    v6 %= v7;
    goto LABEL_5;
  }
  if (v6 < v7)
  {
LABEL_5:
    if (v6)
    {
      crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, v8);
      if (!v15)
      {
        memcpy(*((void **)this + 23), v4, v6);
        crypto_format_backend::write_aligned(this, *((char **)this + 23), 1uLL, v8);
      }
    }
    return;
  }
  v14 = 0;
  while (1)
  {
    memcpy(*((void **)this + 23), &v4[v14], v7);
    if (crypto_format_backend::write_aligned(this, *((char **)this + 23), 1uLL, v8 + v14))
      break;
    v6 -= v7;
    v14 += v7;
    if (v6 < v7)
    {
      v8 += v14;
      v4 += v14;
      goto LABEL_5;
    }
  }
}

uint64_t crypto_format_backend::unmap_range(crypto_format_backend *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 192) & 1) != 0)
    v4 = 0;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 64);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v4 + a2);
}

uint64_t crypto_format_backend::truncate(crypto_format_backend *this, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21[76];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 48);
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 48);
  if ((v3 & 2) == 0)
    *(_QWORD *)(v4 + 56) = a2;
  v5 = *((_QWORD *)this + 3);
  if ((v3 & 1) != 0)
    v6 = 0;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 56))(v5, (a2 + (unint64_t)*(unsigned int *)(v4 + 52) - 1)/ *(unsigned int *)(v4 + 52)* *(unsigned int *)(v4 + 52)+ v6);
  if (!(_DWORD)v7)
  {
    crypto::header::write(*(crypto::header **)(*((_QWORD *)this + 5) + 48), v21);
    v9 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
    v16 = v21;
    v17 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18 = xmmword_212FF3DC0;
    v19 = 76;
    v20 = 0;
    v12 = (*(uint64_t (**)(_QWORD, char **))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3), &v16);
    v13 = v17;
    if ((_QWORD)v18 == v12)
      v7 = 0;
    else
      v7 = v12;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return v7;
}

void sub_212F91A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **crypto_format_backend::populate_backend_info(crypto_format_backend *this, DiskImageInfo *a2)
{
  return crypto::header::populate_crypto_header_info(*(crypto::header **)(*((_QWORD *)this + 5) + 48), a2);
}

uint64_t crypto_format_backend::crypto_format_backend(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 72))(&v14);
  BackendInternalBackend::BackendInternalBackend((Backend *)a1, &v14);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_24CF07EC0;
  *(_QWORD *)(a1 + 40) = *a3;
  v10 = a3[1];
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  crypto::format::aes_context::aes_context(a1 + 56, 0, *a3, *(_QWORD *)(*a3 + 56), *(unsigned int *)(*(_QWORD *)(*a3 + 48) + 52));
  crypto::format::aes_context::aes_context(a1 + 120, 1u, *a3, *(_QWORD *)(*a3 + 56), *(unsigned int *)(*(_QWORD *)(*a3 + 48) + 52));
  *(_QWORD *)(a1 + 184) = operator new[]();
  *(_DWORD *)(a1 + 192) = *a4;
  return a1;
}

void sub_212F91B90(_Unwind_Exception *a1)
{
  BackendInternalBackend *v1;
  uint64_t v2;
  CCCryptorRef *v3;
  CCCryptorRef *v4;

  crypto::format::aes_context::~aes_context(v4);
  crypto::format::aes_context::~aes_context(v3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

void BackendInternalBackend::BackendInternalBackend(Backend *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  Backend::Backend(a1);
  *v3 = off_24CF08AD0;
  v4 = a2[1];
  v3[3] = *a2;
  v3[4] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void BackendInternalBackend::~BackendInternalBackend(BackendInternalBackend *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t crypto_format_backend::crypto_format_backend(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a3);
  *v5 = &off_24CF07EC0;
  v6 = *(_QWORD *)(a2 + 48);
  v5[5] = *(_QWORD *)(a2 + 40);
  v5[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  crypto::format::aes_context::aes_context(a1 + 56, *(_DWORD *)(a2 + 72), a2 + 80, *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 104));
  crypto::format::aes_context::aes_context(a1 + 120, *(_DWORD *)(a2 + 136), a2 + 144, *(_QWORD *)(a2 + 176), *(_QWORD *)(a2 + 168));
  *(_QWORD *)(a1 + 184) = operator new[]();
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  return a1;
}

void sub_212F91D28(_Unwind_Exception *a1)
{
  BackendInternalBackend *v1;
  uint64_t v2;
  CCCryptorRef *v3;
  CCCryptorRef *v4;

  crypto::format::aes_context::~aes_context(v4);
  crypto::format::aes_context::~aes_context(v3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

double crypto_format_backend::construct_context_from_inner@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,crypto_format_backend&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t crypto_format_backend::get_size(crypto_format_backend *this)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 192) & 2) != 0
    || (result = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 56)) == 0)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
    if ((*((_BYTE *)this + 192) & 1) != 0)
      v4 = 0;
    else
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 64);
    if (v3 <= v4)
    {
      return 0;
    }
    else
    {
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
      if ((*((_BYTE *)this + 192) & 1) != 0)
        v6 = 0;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 64);
      return v5 - v6;
    }
  }
  return result;
}

void crypto_format_backend::~crypto_format_backend(crypto_format_backend *this)
{
  crypto_format_backend::~crypto_format_backend(this);
  JUMPOUT(0x2199A8A18);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_24CF07EC0;
  v2 = *((_QWORD *)this + 23);
  if (v2)
    MEMORY[0x2199A8A00](v2, 0x1000C8077774924);
  crypto::format::aes_context::~aes_context((CCCryptorRef *)this + 15);
  crypto::format::aes_context::~aes_context((CCCryptorRef *)this + 7);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t BackendInternalBackend::flush(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t BackendInternalBackend::supports_unmap(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
}

uint64_t BackendInternalBackend::is_writable(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

_QWORD *crypto_format_backend::name(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"crypto", 6);
}

_QWORD *BackendInternalBackend::full_name(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)((uint64_t (*)(_QWORD **))(*a1)[8])(a1);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*a1[3] + 64))(a1[3], v3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)")", 1);
}

uint64_t BackendInternalBackend::get_identifier(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 160))(*((_QWORD *)this + 3));
}

void vbuf::vbuf_exception::~vbuf_exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2199A8A18);
}

uint64_t vbuf::vbuf_exception::what(vbuf::vbuf_exception *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t vbuf::vbuf_exception::reason@<X0>(const char **this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v4 = strlen(this[1]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)this[1], v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" - ", 3);
  v5 = this[2];
  v6 = strlen(v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v16, v12);
  v7 = *MEMORY[0x24BEDB7F0];
  v12[0] = v7;
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v12 + *(_QWORD *)(v7 - 24)) = v9;
  v10 = MEMORY[0x24BEDB848];
  v13[0] = v8;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](&v15);
  std::stringbuf::str[abi:ne180100]((uint64_t)v17, a2);
  v16[0] = v7;
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v7 - 24)) = v9;
  v16[2] = v8;
  v17[0] = v10 + 16;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199A89AC](&v19);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a1[16] = MEMORY[0x24BEDB898] + 16;
  v3 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v4;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = *a2;
  a1[1] = a2[1];
  a2[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v8 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v6 - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v9 = v3[4];
  v10 = v3[5];
  a1[2] = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24) + 16) = v10;
  v11 = v3[1];
  *a1 = v11;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v11 - 24)) = v3[6];
  v12 = MEMORY[0x24BEDB858];
  *a1 = MEMORY[0x24BEDB858] + 24;
  a1[16] = v12 + 104;
  a1[2] = v12 + 64;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_212F921BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

void std::stringbuf::str[abi:ne180100](uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::string::size_type v7;

  v4 = std::stringbuf::view[abi:ne180100](a1);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v6 = (_QWORD *)*v6;
    v7 = v4 - (_QWORD)v6;
  }
  else
  {
    v7 = 0;
  }
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
  a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::string::resize(a2, v7 + v5, 0);
  std::string::erase(a2, 0, v7);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void sub_212F92270(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::byte>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<std::byte>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_212F922EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::byte const*>,std::__wrap_iter<std::byte const*>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_212F92364(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::byte>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::password_header>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x34DA034DA034DALL)
    v9 = 0x69B4069B4069B4;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<std::variant<crypto::password_header,crypto::public_key_header>>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[620 * v4];
  v15 = (uint64_t)v14;
  v16 = &v10[620 * v9];
  *(_DWORD *)(std::__variant_detail::__alt<0ul,crypto::password_header>::__alt[abi:ne180100]<crypto::password_header>((uint64_t)v14, a2)+ 616) = 0;
  v15 += 620;
  std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__swap_out_circular_buffer(a1, &__p);
  v11 = a1[1];
  if ((char *)v15 != v14)
    v15 = (uint64_t)&v14[(v15 - (uint64_t)v14 - 620) % 0x26CuLL];
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_212F925F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<0ul,crypto::password_header>::__alt[abi:ne180100]<crypto::password_header>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 52) = v5;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  bzero((void *)(a1 + 100), 0x204uLL);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  memcpy((void *)(a1 + 104), (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t *std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = v6 - 620;
    do
    {
      v8 = v4 - 620;
      *(_BYTE *)v7 = 0;
      *(_DWORD *)(v7 + 616) = -1;
      v9 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v9 != -1)
      {
        result = (uint64_t *)((uint64_t (*)(char *, uint64_t, uint64_t))off_24CF07FF0[v9])(&v13, v7, v8);
        *(_DWORD *)(v7 + 616) = v9;
      }
      v7 -= 620;
      v4 = v8;
    }
    while (v8 != v5);
    v6 = v7 + 620;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::allocator<std::variant<crypto::password_header,crypto::public_key_header>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x69B4069B4069B5)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(620 * a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6crypto15password_headerENS8_17public_key_headerEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,crypto::password_header>::__alt[abi:ne180100]<crypto::password_header>(a2, a3);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6crypto15password_headerENS8_17public_key_headerEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;

  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
  bzero((void *)(a2 + 48), 0x204uLL);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  return memcpy((void *)(a2 + 52), (const void *)(a3 + 52), 0x200uLL);
}

uint64_t std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::public_key_header>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x34DA034DA034DALL)
    v9 = 0x69B4069B4069B4;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<std::variant<crypto::password_header,crypto::public_key_header>>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  v11 = &v10[620 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[620 * v9];
  *((_DWORD *)v11 + 8) = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v11 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v11 + 4) = v12;
  *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 36);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v11 + 11) = *(_DWORD *)(a2 + 44);
  bzero(v11 + 48, 0x204uLL);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  memcpy(v11 + 52, (const void *)(a2 + 52), 0x200uLL);
  *((_DWORD *)v11 + 154) = 1;
  v17 = v11 + 620;
  std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 620) % 0x26CuLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_212F92A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::byte>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::byte>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_212F92AFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN6crypto6format22get_total_entries_sizeERKNS_6vectorINS_7variantIJNS8_15password_headerENS8_17public_key_headerEEEENS_9allocatorISE_EEEEENK3__0clEmRKSE_EUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSN_DpT0_()
{
  return 616;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN6crypto6format22get_total_entries_sizeERKNS_6vectorINS_7variantIJNS8_15password_headerENS8_17public_key_headerEEEENS_9allocatorISE_EEEEENK3__0clEmRKSE_EUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSN_DpT0_()
{
  return 564;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::byte>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_212F92B7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<crypto::format::write_header_and_keys(Backend &,std::vector<std::variant<crypto::password_header,crypto::public_key_header>> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,crypto::password_header,crypto::public_key_header> const&>(_QWORD ***a1, crypto::password_header *a2)
{
  _QWORD **v3;
  unint64_t v4;
  uint64_t v5;
  char *result;
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v7 = xmmword_212FF3DB0;
  v8 = 9;
  smart_enums::validators::value<unsigned int>((uint64_t)"auth_table_entry_mechanism", 1, &v7, 5);
  v4 = *v3[1];
  v5 = *v3[2] + **v3;
  *(_DWORD *)v5 = 0x1000000;
  *(_QWORD *)(v5 + 4) = bswap64(v4);
  *(_QWORD *)(v5 + 12) = 0x6802000000000000;
  **v3 += 20;
  result = crypto::password_header::write(a2, (char *)(*v3[2] + *v3[1]));
  *v3[1] += 616;
  return result;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<crypto::format::write_header_and_keys(Backend &,std::vector<std::variant<crypto::password_header,crypto::public_key_header>> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,crypto::password_header,crypto::public_key_header> const&>(_QWORD ***a1, uint64_t a2)
{
  _QWORD **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *result;
  __int128 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v9 = xmmword_212FF3DB0;
  v10 = 9;
  smart_enums::validators::value<unsigned int>((uint64_t)"auth_table_entry_mechanism", 2, &v9, 5);
  v4 = *v3[1];
  v5 = *v3[2] + **v3;
  *(_DWORD *)v5 = 0x2000000;
  *(_QWORD *)(v5 + 4) = bswap64(v4);
  *(_QWORD *)(v5 + 12) = 0x3402000000000000;
  **v3 += 20;
  v6 = *v3[2] + *v3[1];
  *(_DWORD *)v6 = bswap32(*(_DWORD *)a2);
  v7 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v6 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v6 + 4) = v7;
  *(_DWORD *)(v6 + 36) = bswap32(*(_DWORD *)(a2 + 36));
  *(_DWORD *)(v6 + 40) = bswap32(*(_DWORD *)(a2 + 40));
  *(_DWORD *)(v6 + 44) = bswap32(*(_DWORD *)(a2 + 44));
  *(_DWORD *)(v6 + 48) = bswap32(*(_DWORD *)(a2 + 48));
  result = memcpy((void *)(v6 + 52), (const void *)(a2 + 52), 0x200uLL);
  *v3[1] += 564;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<564ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<564ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF08038;
  a1[45] = &unk_24CF08138;
  a1[46] = &unk_24CF08160;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF08038;
  a1[45] = &unk_24CF080C0;
  a1[46] = &unk_24CF080E8;
  return a1;
}

void sub_212F92E40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<564ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<578ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<578ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF08258;
  a1[45] = &unk_24CF08358;
  a1[46] = &unk_24CF08380;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF08258;
  a1[45] = &unk_24CF082E0;
  a1[46] = &unk_24CF08308;
  return a1;
}

void sub_212F92F28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<578ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF081D0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F92FF4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF081D0;
  di_log::logger_buf<di_log::log_printer<564ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<564ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<564ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<564ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<564ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F933E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<564ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 564;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 564;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF083F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F9365C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF083F0;
  di_log::logger_buf<di_log::log_printer<578ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<578ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<578ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<578ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<578ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F93A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<578ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 578;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 578;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<690ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<690ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<690ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF08610;
  di_log::logger_buf<di_log::log_printer<690ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<690ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F94014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<690ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 690;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 690;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<738ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<738ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<738ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF08830;
  di_log::logger_buf<di_log::log_printer<738ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<738ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F94600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<738ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 738;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 738;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<806ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<806ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<806ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF08A50;
  di_log::logger_buf<di_log::log_printer<806ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<806ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F94BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<806ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 806;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 806;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t BackendInternalBackend::unmap_range(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
}

uint64_t BackendInternalBackend::get_size(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
}

uint64_t BackendInternalBackend::truncate(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
}

uint64_t BackendInternalBackend::write(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

uint64_t BackendInternalBackend::read(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

void BackendInternalBackend::construct_context_from_inner(uint64_t a1)
{
  void *exception;
  _QWORD v3[33];

  exception = __cxa_allocate_exception(0x40uLL);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Unexpected context construction by ", 35);
  operator<<((uint64_t)v3, a1);
  DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v3, 0x16u);
}

void sub_212F94EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;
  int v29;

  *(_QWORD *)(v28 + *(_QWORD *)(*MEMORY[0x24BEDB800] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  if (a24 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](&a27);
  if (v29)
    __cxa_free_exception(v27);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<crypto::format::aes_iv,std::allocator<crypto::format::aes_iv>,std::vector<std::byte> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x198uLL);
  result = std::__shared_ptr_emplace<crypto::format::aes_iv>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::byte> &,std::allocator<crypto::format::aes_iv>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_212F9503C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<crypto::format::aes_iv>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::byte> &,std::allocator<crypto::format::aes_iv>,0>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24CF08B98;
  CCHmacInit((CCHmacContext *)(a1 + 24), 0, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return a1;
}

void sub_212F95090(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<crypto::format::aes_iv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF08B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto::format::aes_iv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF08B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF08610;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F95154(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF08830;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F951D0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF08A50;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F9524C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,crypto_format_backend&,std::shared_ptr<Backend> const&,void>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<crypto_format_backend&,std::shared_ptr<Backend> const&,std::allocator<crypto_format_backend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212F952B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<crypto_format_backend&,std::shared_ptr<Backend> const&,std::allocator<crypto_format_backend>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF620;
  crypto_format_backend::crypto_format_backend((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_212F952FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void AEAHelper::create_auth_data(_QWORD *a1@<X0>, AEAwrapper::AuthData *a2@<X8>)
{
  int v3;
  DiskImagesRuntimeException *exception;
  void *v5;
  AEAContext v6;
  AAByteStream v7;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1);
  if (v3 < 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "AEAHelper: Invalid file descriptor.", 0x16u);
  }
  v6 = AAFileStreamOpenWithFD(v3, 0);
  AEAwrapper::ByteStream::ByteStream(&v7, &v6);
  AEAwrapper::Context::Context((AEAwrapper::Context *)&v6, (AEAwrapper::ByteStream *)&v7);
  AEAwrapper::AuthData::AuthData(a2, (AEAwrapper::Context *)&v6);
  AEAwrapper::Context::~Context(&v6);
  AEAwrapper::ByteStream::~ByteStream(&v7);
}

void sub_212F953B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AAByteStream a10)
{
  AEAwrapper::Context::~Context((AEAContext *)&a9);
  AEAwrapper::ByteStream::~ByteStream(&a10);
  _Unwind_Resume(a1);
}

void AEAHelper::create_key_parameters(AEAAuthData *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v5;
  std::string *v6;
  uint64_t v7;
  const char *v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  const std::error_category *v15;
  _QWORD *exception;
  const std::error_category *v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  std::string v24;
  char v25;
  void *__p[2];
  char v27;
  std::string v28;
  char v29;
  char __str[2];
  char v31;

  v5 = (_OWORD *)operator new[]();
  *v5 = 0u;
  v5[1] = 0u;
  memset(&v24, 0, sizeof(v24));
  v25 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "encryption_key");
  get_auth_data_value(this, (uint64_t)__p, (uint64_t)&v28);
  if (v27 < 0)
    operator delete(__p[0]);
  if (!v29)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "com.apple.wkms.fcs-key-url");
    get_auth_data_value(this, (uint64_t)v22, (uint64_t)&v28);
    v10 = *(unsigned __int8 *)(std::expected<std::string,std::error_code>::operator=[abi:ne180100]((uint64_t)&v24, (__int128 *)&v28)+ 24);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (v23 < 0)
    {
      operator delete(v22[0]);
      if (v10)
        goto LABEL_21;
    }
    else if (v10)
    {
LABEL_21:
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      else
        v28 = v24;
      *(std::string *)a2 = v28;
      *(_QWORD *)(a2 + 24) = this;
      v12 = 3;
LABEL_46:
      *(_DWORD *)(a2 + 32) = v12;
      goto LABEL_47;
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "saksKey");
    get_auth_data_value(this, (uint64_t)v20, (uint64_t)&v28);
    v11 = *(unsigned __int8 *)(std::expected<std::string,std::error_code>::operator=[abi:ne180100]((uint64_t)&v24, (__int128 *)&v28)+ 24);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (v21 < 0)
    {
      operator delete(v20[0]);
      if (v11)
        goto LABEL_29;
    }
    else if (v11)
    {
LABEL_29:
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      else
        v28 = v24;
      *(std::string *)a2 = v28;
      v12 = 1;
      goto LABEL_46;
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "com.apple.knox.url");
    get_auth_data_value(this, (uint64_t)v18, (uint64_t)&v28);
    v13 = *(unsigned __int8 *)(std::expected<std::string,std::error_code>::operator=[abi:ne180100]((uint64_t)&v24, (__int128 *)&v28)+ 24);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (v19 < 0)
      operator delete(v18[0]);
    if (!v13)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v17 = std::generic_category();
      exception[1] = 22;
      exception[2] = v17;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Missing Expected AUTH DATA in AEA.";
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    else
      v28 = v24;
    *(std::string *)a2 = v28;
    v12 = 2;
    goto LABEL_46;
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v28;
  else
    v6 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if (strlen((const char *)v6) != 64)
  {
    v8 = "Key is not 32 bytes size.";
LABEL_54:
    v14 = __cxa_allocate_exception(0x40uLL);
    *v14 = &off_24CF07908;
    v15 = std::generic_category();
    v14[1] = 22;
    v14[2] = v15;
    *((_BYTE *)v14 + 24) = 0;
    *((_BYTE *)v14 + 48) = 0;
    v14[7] = v8;
  }
  v7 = 0;
  v31 = 0;
  v8 = "Key is not hexadecimal number.";
  do
  {
    *(_WORD *)__str = *((_WORD *)&v6->__r_.__value_.__l.__data_ + v7);
    v9 = strtol(__str, 0, 16);
    *((_BYTE *)v5 + v7) = v9;
    if (!v9 && *(unsigned __int16 *)__str != 12336)
      goto LABEL_54;
    ++v7;
  }
  while (v7 != 32);
  if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 32) = 0;
  v5 = 0;
LABEL_47:
  if (v25 && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v5)
    MEMORY[0x2199A8A00](v5, 0x1000C8077774924);
}

void sub_212F957D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  MEMORY[0x2199A8A00](v42, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *get_auth_data_value@<X0>(AEAAuthData *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char **v7;
  uint64_t v8;
  int EntryCount;
  uint32_t v10;
  char *v11;
  size_t v12;
  const char *v13;
  const std::error_category *v14;
  uint64_t v15;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  const std::error_category *v20;
  char v21;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  std::bad_alloc *v24;
  std::bad_alloc *v25;
  size_t v26;
  char *__s;
  uint64_t v28;
  char **p_s;
  char *__s2;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)malloc_type_valloc(0x800uLL, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  __s = (char *)&off_24CF08BE8;
  p_s = &__s;
  __s2 = v6;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)&__s);
  v7 = p_s;
  if (p_s == &__s)
  {
    v8 = 4;
    v7 = &__s;
  }
  else
  {
    if (!p_s)
      goto LABEL_7;
    v8 = 5;
  }
  (*(void (**)(void))&(*v7)[8 * v8])();
LABEL_7:
  EntryCount = AEAwrapper::AuthData::getEntryCount(a1);
  if (!EntryCount)
  {
LABEL_15:
    v14 = std::generic_category();
    v15 = 22;
    goto LABEL_16;
  }
  v10 = 0;
  v11 = __s2;
  while (1)
  {
    v26 = 0;
    bzero(v11, 0x800uLL);
    if (AEAwrapper::AuthData::getEntry(a1, v10, 0x800uLL, v11, 0, 0, 0, &v26))
    {
      v14 = std::generic_category();
      *(_DWORD *)a3 = 1;
      goto LABEL_18;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      v13 = *(const char **)a2;
      v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v12 = *(unsigned __int8 *)(a2 + 23);
      v13 = (const char *)a2;
    }
    v11 = __s2;
    if (!strncmp(v13, __s2, v12))
      break;
    if (EntryCount == ++v10)
      goto LABEL_15;
  }
  if (v26 < 0x100000)
  {
    v17 = (char *)malloc_type_valloc(v26 + 1, 0xF8ED6DDuLL);
    if (!v17)
    {
      v24 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v25 = std::bad_alloc::bad_alloc(v24);
      __cxa_throw(v25, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v32[0] = &off_24CF08BE8;
    v33 = v32;
    __s = v17;
    std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v28, (uint64_t)v32);
    v18 = v33;
    if (v33 == v32)
    {
      v19 = 4;
      v18 = v32;
    }
    else
    {
      if (!v33)
      {
LABEL_28:
        bzero(__s, v26 + 1);
        if (AEAwrapper::AuthData::getEntry(a1, v10, 0x800uLL, __s2, 0, v26, (unsigned __int8 *)__s, 0))
        {
          v20 = std::generic_category();
          v21 = 0;
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v20;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, __s);
          v21 = 1;
        }
        *(_BYTE *)(a3 + 24) = v21;
        std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&__s);
        return std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&__s2);
      }
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_28;
  }
  v14 = std::generic_category();
  v15 = 84;
LABEL_16:
  *(_QWORD *)a3 = v15;
LABEL_18:
  *(_QWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 24) = 0;
  return std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&__s2);
}

void sub_212F95B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::expected<std::string,std::error_code>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(char *)(a1 + 23);
    if (*((_BYTE *)a2 + 24))
    {
      if (v4 < 0)
        operator delete(*(void **)a1);
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }
    else
    {
      if (v4 < 0)
        operator delete(*(void **)a1);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else if (*((_BYTE *)a2 + 24))
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
  }
  return a1;
}

AEAwrapper::AuthData *AEAHelper::AEAHelper(AEAwrapper::AuthData *a1, _QWORD *a2)
{
  AEAHelper::create_auth_data(a2, a1);
  AEAHelper::create_key_parameters((AEAAuthData *)a1, (uint64_t)a1 + 8);
  return a1;
}

void sub_212F95C58(_Unwind_Exception *a1)
{
  AEAAuthData *v1;

  AEAwrapper::AuthData::~AuthData(v1);
  _Unwind_Resume(a1);
}

uint64_t *AEAwrapper::ByteStream::ByteStream(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  DiskImagesRuntimeException *exception;
  void *v4;

  v2 = *a2;
  *result = *a2;
  if (!v2)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Error opening ByteStream", 0x16u);
  }
  return result;
}

void AEAwrapper::ByteStream::~ByteStream(AAByteStream *this)
{
  AAByteStreamClose(*this);
}

ssize_t AEAwrapper::ByteStream::pread(AAByteStream *this, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*this, a2, a3, a4);
}

uint64_t *AEAwrapper::ByteStream::make_DecryptionRandomAccessInputStream@<X0>(AAByteStream *a1@<X0>, AEAContext *a2@<X1>, size_t a3@<X2>, AAFlagSet a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  AAByteStream v8;

  v8 = AEADecryptionRandomAccessInputStreamOpen(*a1, *a2, a3, a4, a5);
  return AEAwrapper::ByteStream::ByteStream(a6, (uint64_t *)&v8);
}

AEAwrapper::Context *AEAwrapper::Context::Context(AEAwrapper::Context *this, AAByteStream *a2)
{
  AEAContext v3;
  DiskImagesRuntimeException *exception;
  void *v6;

  v3 = AEAContextCreateWithEncryptedStream(*a2);
  *(_QWORD *)this = v3;
  if (!v3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Context creation failed.", 0x16u);
  }
  return this;
}

void AEAwrapper::Context::~Context(AEAContext *this)
{
  AEAContextDestroy(*this);
}

uint64_t AEAwrapper::Context::setSymmetricKey(AEAContext *this, uint8_t *buf, size_t buf_size)
{
  uint64_t result;
  DiskImagesRuntimeException *exception;
  void *v5;

  result = AEAContextSetFieldBlob(*this, 9u, 0, buf, buf_size);
  if ((result & 0x80000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Context setup failed.", 0x16u);
  }
  return result;
}

uint64_t (**AEAwrapper::Context::getAEAIdentifier(AEAContext_impl **this))()
{
  AEAContext_impl *v1;
  size_t v2;
  size_t v3;
  uint8_t *v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (**v7)();
  uint8_t *v8;
  size_t v9;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  size_t buf_size;
  uint8_t *buf;
  uint64_t v15;
  uint64_t (**__dst)();
  uint64_t (***p_dst)();
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = *this;
  buf_size = 0;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, 0, 0, &buf_size) < 0)
    return 0;
  v2 = buf_size;
  if (buf_size >= 0x100000)
    v3 = 0x100000;
  else
    v3 = buf_size;
  v4 = (uint8_t *)malloc_type_valloc(v3, 0xF8ED6DDuLL);
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v12, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  __dst = &off_24CF08C68;
  p_dst = &__dst;
  buf = v4;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v15, (uint64_t)&__dst);
  v5 = p_dst;
  if (p_dst == &__dst)
  {
    v6 = 4;
    v5 = &__dst;
    goto LABEL_11;
  }
  if (p_dst)
  {
    v6 = 5;
LABEL_11:
    (*v5)[v6]();
  }
  v8 = buf;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, v3, buf, 0) < 0)
  {
    v7 = 0;
  }
  else
  {
    if (v2 >= 0x10)
      v9 = 16;
    else
      v9 = v2;
    memcpy(&__dst, v8, v9);
    v7 = __dst;
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&buf);
  return v7;
}

void sub_212F96038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

AEAwrapper::AuthData *AEAwrapper::AuthData::AuthData(AEAwrapper::AuthData *this, AEAContext *a2)
{
  AEAAuthData v3;
  DiskImagesRuntimeException *exception;
  void *v6;

  v3 = AEAAuthDataCreateWithContext(*a2);
  *(_QWORD *)this = v3;
  if (!v3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Authentication Data creation failed.", 0x16u);
  }
  return this;
}

void AEAwrapper::AuthData::~AuthData(AEAAuthData *this)
{
  AEAAuthDataDestroy(*this);
}

uint64_t AEAwrapper::AuthData::getEntryCount(AEAAuthData *this)
{
  return AEAAuthDataGetEntryCount(*this);
}

uint64_t AEAwrapper::AuthData::getEntry(AEAAuthData *this, uint32_t a2, size_t a3, char *a4, unint64_t *a5, size_t a6, unsigned __int8 *a7, unint64_t *a8)
{
  return AEAAuthDataGetEntry(*this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *AEAwrapper::DecryptionStream::DecryptionStream(_QWORD *result, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *a3;
  *result = *a2;
  *a2 = 0;
  result[1] = v4;
  *a3 = 0;
  result[2] = *a4;
  *a4 = 0;
  return result;
}

uint64_t AEAwrapper::DecryptionStream::getCompressionBlockSize(AEAContext *this)
{
  return AEAContextGetFieldUInt(this[1], 4u);
}

uint64_t AEAwrapper::DecryptionStream::getRawSize(AEAContext *this)
{
  return AEAContextGetFieldUInt(this[1], 0xDu);
}

ssize_t AEAwrapper::DecryptionStream::pread(AAByteStream *this, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(this[2], a2, a3, a4);
}

uint64_t transformed_extents_iterator_interface::transformed_extents_iterator_interface(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_24CF08D30;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = off_24CF08CE8;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 48, (_QWORD *)(a2 + 48));
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 96, (_QWORD *)(a2 + 96));
  v7 = *(_OWORD **)(a2 + 144);
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v7 = *(_OWORD **)(a1 + 144);
  }
  *(_OWORD *)(a1 + 160) = *v7;
  return a1;
}

void sub_212F9627C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t transformed_extents_iterator_interface::transformed_extents_iterator_interface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)a1 = &unk_24CF08D30;
  *(_QWORD *)(a1 + 8) = a2;
  v10 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24CF08CE8;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 48, a5);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 96, a6);
  std::allocate_shared[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t>,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,std::vector<DiskImage::diskimage_extent_t> const&,void>(a7, (_QWORD *)(a1 + 144));
  v11 = *(uint64_t **)(a1 + 144);
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)(a1 + 160) = v13;
  *(_QWORD *)(a1 + 168) = v12;
  if (v12 == v13)
    v14 = 0;
  else
    v14 = *(_QWORD *)(v12 - 24);
  if (*(_QWORD *)(a1 + 24) > v14)
    v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = 2;
  return a1;
}

void sub_212F96370(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  _Unwind_Resume(exception_object);
}

BOOL transformed_extents_iterator_interface::get_next_extent@<W0>(transformed_extents_iterator_interface *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _QWORD v19[6];

  v3 = a2;
  v7 = *((_QWORD *)this + 20);
  v6 = *((_QWORD *)this + 21);
  while (v7 != v6 && *(_QWORD *)(v7 + 8) <= a2)
  {
    v7 += 32;
    *((_QWORD *)this + 20) = v7;
  }
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)this + 48, (uint64_t)this + 96))
  {
    if (*((_DWORD *)this + 20) == 3 || *((_QWORD *)this + 8) > v3)
      break;
    DiskImage::const_extents_iterator_t::operator++((transformed_extents_iterator_interface *)((char *)this + 48), (uint64_t)v19);
    v8 = v19[0];
    v19[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  }
  result = DiskImage::const_extents_iterator_t::operator!=((uint64_t)this + 48, (uint64_t)this + 96);
  if (result && *((_DWORD *)this + 20) == 3)
  {
    v10 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 7) > v3)
      v3 = *((_QWORD *)this + 7);
    v11 = 3;
    goto LABEL_44;
  }
  result = DiskImage::const_extents_iterator_t::operator==((uint64_t)this + 48, (uint64_t)this + 96);
  v12 = *((_QWORD *)this + 20);
  v13 = *((_QWORD *)this + 21);
  if (result && v12 == v13)
  {
    v11 = 0;
    v10 = *((_QWORD *)this + 3);
    goto LABEL_44;
  }
  if (v12 == v13)
  {
    v10 = *((_QWORD *)this + 7);
    if (v10 <= v3)
    {
      v10 = *((_QWORD *)this + 8);
      v11 = *((_DWORD *)this + 20);
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  result = DiskImage::const_extents_iterator_t::operator==((uint64_t)this + 48, (uint64_t)this + 96);
  if (result)
  {
    v14 = (unint64_t *)*((_QWORD *)this + 20);
    v10 = *v14;
    if (*v14 <= v3)
    {
      v10 = v14[1];
      v11 = *((_DWORD *)v14 + 6);
      goto LABEL_44;
    }
LABEL_39:
    v11 = 0;
    goto LABEL_44;
  }
  v15 = *((_QWORD *)this + 7);
  v16 = (char *)*((_QWORD *)this + 20);
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16 >= v15)
    v10 = *((_QWORD *)this + 7);
  else
    v10 = *(_QWORD *)v16;
  if (v10 <= v3)
    v10 = v3;
  if (v10 < v15 && v10 < v17)
    goto LABEL_39;
  if (v10 >= v17)
  {
    v17 = *((_QWORD *)v16 + 1);
  }
  else
  {
    if (v17 >= *((_QWORD *)this + 8))
      v17 = *((_QWORD *)this + 8);
    v16 = (char *)this + 56;
  }
  v11 = *((_DWORD *)v16 + 6);
  v3 = v10;
  if (*((_QWORD *)this + 3) >= v17)
    v10 = v17;
  else
    v10 = *((_QWORD *)this + 3);
LABEL_44:
  *(_QWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

BOOL transformed_extents_iterator_interface::make_val@<W0>(transformed_extents_iterator_interface *this@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  _BYTE v9[28];

  result = transformed_extents_iterator_interface::get_next_extent(this, *((_QWORD *)this + 5), (uint64_t)v9);
  v5 = *(_DWORD *)&v9[24];
  v7 = *(_QWORD *)v9;
  v6 = *(_QWORD *)&v9[8];
  do
  {
    if (v6 >= *((_QWORD *)this + 3))
      break;
    if (v5 == 3)
      break;
    if (v5 != *(_DWORD *)&v9[24])
      break;
    v6 = *(_QWORD *)&v9[8];
    result = transformed_extents_iterator_interface::get_next_extent(this, *(unint64_t *)&v9[8], (uint64_t)v8);
    *(_OWORD *)v9 = v8[0];
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)v8 + 12);
  }
  while (*(_QWORD *)&v8[0] == v6);
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

_QWORD *DiskImage::extents_t_transformer::make_custom_interface_extents@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  DiskImage::extents_t::extents_t(a4, a1, (uint64_t)v9, a3);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_212F966F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t DiskImage::extents_t::extents_t(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;

  v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  v8 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *((_QWORD *)a2 + 5);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = (_QWORD *)std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__value_func[abi:ne180100](a1 + 56, (uint64_t)a2 + 56);
  std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=(v10, a3);
  v11 = *a4;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a4 + 16);
  *(_OWORD *)(a1 + 8) = v11;
  return a1;
}

void sub_212F967B0(_Unwind_Exception *a1)
{
  DiskImage::extents_t *v1;

  DiskImage::extents_t::~extents_t(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::extents_t_transformer::make_transformed_extents@<X0>(DiskImage::extents_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _QWORD v46[6];
  _QWORD v47[6];
  __int128 v48;
  char *v49;
  std::__shared_weak_count *v50;
  _QWORD v51[6];
  _QWORD v52[6];
  _BYTE v53[24];
  _BYTE *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  DiskImage::extents_t::begin(a1, (uint64_t)v52);
  DiskImage::extents_t::end(a1, (uint64_t)v51);
  v6 = (char *)operator new(0x30uLL);
  *((_QWORD *)v6 + 1) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24CF08D60;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 5) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v49 = v6 + 24;
  v50 = (std::__shared_weak_count *)v6;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v46, v52);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v47, v51);
  *(_QWORD *)&v48 = v6 + 24;
  *((_QWORD *)&v48 + 1) = v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = *((_QWORD *)v6 + 4);
  if (v9 == *((_QWORD *)v6 + 3))
    v10 = 0;
  else
    v10 = *(_QWORD *)(v9 - 24);
  if (*((_QWORD *)a1 + 2) > v10)
    v10 = *((_QWORD *)a1 + 2);
  *(_QWORD *)&v44 = *((_QWORD *)a1 + 1);
  *((_QWORD *)&v44 + 1) = v10;
  v45 = 2;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v35, v46);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v39, v47);
  v43 = v48;
  if (*((_QWORD *)&v48 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v54 = 0;
  v13 = (char *)operator new(0x78uLL);
  v14 = v35;
  *(_QWORD *)v13 = &off_24CF08DB0;
  *((_QWORD *)v13 + 1) = v14;
  v15 = v37;
  *((_OWORD *)v13 + 1) = v36;
  *((_OWORD *)v13 + 2) = v15;
  *((_DWORD *)v13 + 12) = v38;
  v16 = v39;
  v35 = 0;
  v39 = 0;
  *((_QWORD *)v13 + 7) = v16;
  v17 = v41;
  *((_OWORD *)v13 + 4) = v40;
  *((_OWORD *)v13 + 5) = v17;
  *((_DWORD *)v13 + 24) = v42;
  *(_OWORD *)(v13 + 104) = v43;
  v43 = 0uLL;
  v54 = v13;
  DiskImage::extents_t_transformer::make_custom_interface_extents((__int128 *)a1, (uint64_t)v53, &v44, a3);
  v18 = v54;
  if (v54 == v53)
  {
    v19 = 4;
    v18 = v53;
    goto LABEL_15;
  }
  if (v54)
  {
    v19 = 5;
LABEL_15:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v39;
  v39 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  v24 = v35;
  v35 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v47[0];
  v47[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  v29 = v46[0];
  v46[0] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  v30 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v51[0];
  v51[0] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  result = v52[0];
  v52[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_212F96B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = *(_QWORD **)(v27 - 80);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 104);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t,DiskImage::extents_t &&::allocator<std::vector>> &&)::$_0::~$_0(&a9);
  DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t,DiskImage::extents_t &&::allocator<std::vector>> &&)::$_0::~$_0(&a26);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v27 - 216);
  v31 = *(_QWORD *)(v27 - 200);
  *(_QWORD *)(v27 - 200) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  v32 = *(_QWORD *)(v27 - 152);
  *(_QWORD *)(v27 - 152) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  _Unwind_Resume(a1);
}

uint64_t *DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t,DiskImage::extents_t &&::allocator<std::vector>> &&)::$_0::~$_0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 12));
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return a1;
}

uint64_t transformed_extents_iterator_interface::clone@<X0>(transformed_extents_iterator_interface *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = transformed_extents_iterator_interface::transformed_extents_iterator_interface(v4, (uint64_t)this);
  *a2 = v4;
  return result;
}

void sub_212F96CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C4015EBE80FLL);
  _Unwind_Resume(a1);
}

void transformed_extents_iterator_interface::~transformed_extents_iterator_interface(transformed_extents_iterator_interface *this)
{
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  JUMPOUT(0x2199A8A18);
}

void DiskImage::extents_t::~extents_t(DiskImage::extents_t *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t>,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,std::vector<DiskImage::diskimage_extent_t> const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::__shared_ptr_emplace[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> const&,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_212F96E38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::__shared_ptr_emplace[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> const&,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24CF08D60;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<DiskImage::diskimage_extent_t>::__init_with_size[abi:ne180100]<DiskImage::diskimage_extent_t*,DiskImage::diskimage_extent_t*>((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  return a1;
}

void sub_212F96E9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF08D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF08D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<DiskImage::diskimage_extent_t>::__init_with_size[abi:ne180100]<DiskImage::diskimage_extent_t*,DiskImage::diskimage_extent_t*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<DiskImage::diskimage_extent_t>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_212F96F68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<DiskImage::diskimage_extent_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  result = (char *)std::allocator<ref::details::ref_cnt_set_handle>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_QWORD *std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24CF08DB0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 13));
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return a1;
}

void std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24CF08DB0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 13));
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x78uLL);
  *v2 = &off_24CF08DB0;
  std::__compressed_pair_elem<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> & const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_212F970D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CF08DB0;
  return std::__compressed_pair_elem<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> & const&,0ul>((uint64_t)(a2 + 1), (_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy[abi:ne180100]((uint64_t *)(a1 + 8));
}

void std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy_deallocate(uint64_t *a1)
{
  std::__function::__alloc_func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;

  v7 = a1 + 1;
  v8 = *a3;
  v9 = operator new();
  v11 = *(_OWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 24);
  result = transformed_extents_iterator_interface::transformed_extents_iterator_interface(v9, a2, (uint64_t)&v11, v8, v7, a1 + 7, a1[13]);
  *a4 = v9;
  return result;
}

void sub_212F971C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C4015EBE80FLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> & const&,0ul>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1, a2);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(v4 + 48, a2 + 6);
  v5 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return a1;
}

void sub_212F97284(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__alloc_func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 12));
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uLong udif::get_csum_any(unsigned int *a1)
{
  uLong result;
  DiskImagesRuntimeException *exception;
  void *v3;

  result = *a1;
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 2)
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Unknown checksum found", 0x16u);
    }
    return crc32(0, 0, 0) << 32;
  }
  return result;
}

udif::header *udif::header::header(udif::header *this, const char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[136];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 1) = 0u;
  v4 = (_QWORD *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  v5 = (_QWORD *)((char *)this + 32);
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)this = 0u;
  v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_num_t", 0, &v37, 2);
  *((_DWORD *)this + 15) = 0;
  v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_count_t", 0, &v37, 2);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 26) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 5) = 0u;
  udif::checksum_type::checksum_type((udif::header *)((char *)this + 80));
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  udif::checksum_type::checksum_type((udif::header *)((char *)this + 352));
  *((_DWORD *)this + 89) = 0;
  *((_DWORD *)this + 122) = 0;
  v37 = 0x100000000;
  LODWORD(v38) = 2;
  smart_enums::validators::value<unsigned int>((uint64_t)"image_variant_type", 0, &v37, 3);
  *(_QWORD *)((char *)this + 492) = 0;
  v6 = *(_DWORD *)a2;
  LODWORD(v37) = 2037149547;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v6, &v37, 1);
  *(_DWORD *)this = 2037149547;
  v7 = bswap32(*((_DWORD *)a2 + 1));
  LODWORD(v37) = 4;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", v7, &v37, 1);
  *((_DWORD *)this + 1) = 4;
  v8 = bswap32(*((_DWORD *)a2 + 2));
  LODWORD(v37) = 512;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_size_t", v8, &v37, 1);
  *((_DWORD *)this + 2) = 512;
  udif::header::header_flags::header_flags(&v37, bswap32(*((_DWORD *)a2 + 3)));
  *((_DWORD *)this + 3) = v37;
  *v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = bswap64(*((_QWORD *)a2 + 3));
  *v5 = bswap64(*((_QWORD *)a2 + 4));
  *((_QWORD *)this + 5) = bswap64(*((_QWORD *)a2 + 5));
  *((_QWORD *)this + 6) = bswap64(*((_QWORD *)a2 + 6));
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 14));
  v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_num_t", (int)v5, &v37, 2);
  *((_DWORD *)this + 14) = (_DWORD)v5;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 15));
  v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_count_t", (int)v5, &v37, 2);
  *((_DWORD *)this + 15) = (_DWORD)v5;
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  udif::checksum_type::checksum_type((udif::checksum_type *)v36);
  v9 = *((_OWORD *)a2 + 12);
  *(_OWORD *)&v36[96] = *((_OWORD *)a2 + 11);
  *(_OWORD *)&v36[112] = v9;
  *(_QWORD *)&v36[128] = *((_QWORD *)a2 + 26);
  v10 = *((_OWORD *)a2 + 8);
  *(_OWORD *)&v36[32] = *((_OWORD *)a2 + 7);
  *(_OWORD *)&v36[48] = v10;
  v11 = *((_OWORD *)a2 + 10);
  *(_OWORD *)&v36[64] = *((_OWORD *)a2 + 9);
  *(_OWORD *)&v36[80] = v11;
  v12 = *((_OWORD *)a2 + 6);
  *(_OWORD *)v36 = *((_OWORD *)a2 + 5);
  *(_OWORD *)&v36[16] = v12;
  v42 = *(_OWORD *)&v36[72];
  v43 = *(_OWORD *)&v36[88];
  v44 = *(_OWORD *)&v36[104];
  v45 = *(_OWORD *)&v36[120];
  v38 = *(_OWORD *)&v36[8];
  v39 = *(_OWORD *)&v36[24];
  v40 = *(_OWORD *)&v36[40];
  v41 = *(_OWORD *)&v36[56];
  v37 = *(_QWORD *)v36;
  udif::details::endian_reverse((uint64_t)&v37, (int *)&v27);
  *((_QWORD *)this + 10) = v27;
  *(_OWORD *)((char *)this + 152) = v32;
  *(_OWORD *)((char *)this + 168) = v33;
  *(_OWORD *)((char *)this + 184) = v34;
  *(_OWORD *)((char *)this + 200) = v35;
  *(_OWORD *)((char *)this + 88) = v28;
  *(_OWORD *)((char *)this + 104) = v29;
  *(_OWORD *)((char *)this + 120) = v30;
  *(_OWORD *)((char *)this + 136) = v31;
  *((_QWORD *)this + 27) = bswap64(*((_QWORD *)a2 + 27));
  *((_QWORD *)this + 28) = bswap64(*((_QWORD *)a2 + 28));
  v13 = *(_OWORD *)(a2 + 232);
  v14 = *(_OWORD *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)((char *)this + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)((char *)this + 280) = v15;
  *(_OWORD *)((char *)this + 248) = v14;
  *(_OWORD *)((char *)this + 232) = v13;
  *((_QWORD *)this + 37) = bswap64(*((_QWORD *)a2 + 37));
  *((_QWORD *)this + 38) = bswap64(*((_QWORD *)a2 + 38));
  v16 = *(_OWORD *)(a2 + 312);
  v17 = *(_OWORD *)(a2 + 328);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *(_OWORD *)((char *)this + 312) = v16;
  *(_OWORD *)((char *)this + 328) = v17;
  udif::checksum_type::checksum_type((udif::checksum_type *)v36);
  v18 = *((_OWORD *)a2 + 29);
  *(_OWORD *)&v36[96] = *((_OWORD *)a2 + 28);
  *(_OWORD *)&v36[112] = v18;
  *(_QWORD *)&v36[128] = *((_QWORD *)a2 + 60);
  v19 = *((_OWORD *)a2 + 25);
  *(_OWORD *)&v36[32] = *((_OWORD *)a2 + 24);
  *(_OWORD *)&v36[48] = v19;
  v20 = *((_OWORD *)a2 + 27);
  *(_OWORD *)&v36[64] = *((_OWORD *)a2 + 26);
  *(_OWORD *)&v36[80] = v20;
  v21 = *((_OWORD *)a2 + 23);
  *(_OWORD *)v36 = *((_OWORD *)a2 + 22);
  *(_OWORD *)&v36[16] = v21;
  v42 = *(_OWORD *)&v36[72];
  v43 = *(_OWORD *)&v36[88];
  v44 = *(_OWORD *)&v36[104];
  v45 = *(_OWORD *)&v36[120];
  v38 = *(_OWORD *)&v36[8];
  v39 = *(_OWORD *)&v36[24];
  v40 = *(_OWORD *)&v36[40];
  v41 = *(_OWORD *)&v36[56];
  v37 = *(_QWORD *)v36;
  udif::details::endian_reverse((uint64_t)&v37, (int *)&v27);
  *((_QWORD *)this + 44) = v27;
  v22 = v33;
  *(_OWORD *)((char *)this + 424) = v32;
  *(_OWORD *)((char *)this + 440) = v22;
  v23 = v35;
  *(_OWORD *)((char *)this + 456) = v34;
  *(_OWORD *)((char *)this + 472) = v23;
  v24 = v29;
  *(_OWORD *)((char *)this + 360) = v28;
  *(_OWORD *)((char *)this + 376) = v24;
  v25 = v31;
  *(_OWORD *)((char *)this + 392) = v30;
  *(_OWORD *)((char *)this + 408) = v25;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 122));
  v37 = 0x100000000;
  LODWORD(v38) = 2;
  smart_enums::validators::value<unsigned int>((uint64_t)"image_variant_type", (int)v5, &v37, 3);
  *((_DWORD *)this + 122) = (_DWORD)v5;
  *(_QWORD *)((char *)this + 492) = bswap64(*(_QWORD *)(a2 + 492));
  return this;
}

void sub_212F97858(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t udif::header::write(udif::header *this, char *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v12;
  int v13;
  _QWORD v14[45];
  uint64_t v15;
  uint64_t v16;

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v12 = "*udif::header::write(char *)";
    *((_QWORD *)&v12 + 1) = 20;
    v13 = 2;
    di_log::logger<di_log::log_printer<85ul>>::logger(v14, &v12);
    udif::operator<<(&v15, (uint64_t)this);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x2199A89AC](&v16);
  }
  *(_DWORD *)a2 = *(_DWORD *)this;
  *((_DWORD *)a2 + 1) = bswap32(*((_DWORD *)this + 1));
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  *((_QWORD *)a2 + 2) = *((_QWORD *)this + 2);
  *((_QWORD *)a2 + 3) = bswap64(*((_QWORD *)this + 3));
  *((_QWORD *)a2 + 4) = bswap64(*((_QWORD *)this + 4));
  *((_QWORD *)a2 + 5) = bswap64(*((_QWORD *)this + 5));
  *((_QWORD *)a2 + 6) = bswap64(*((_QWORD *)this + 6));
  *((_DWORD *)a2 + 14) = bswap32(*((_DWORD *)this + 14));
  *((_DWORD *)a2 + 15) = bswap32(*((_DWORD *)this + 15));
  *((_OWORD *)a2 + 4) = *((_OWORD *)this + 4);
  v4 = udif::details::serialize_field((uint64_t)this + 80, (uint64_t)(a2 + 80));
  *(_QWORD *)v4 = bswap64(*((_QWORD *)this + 27));
  *(_QWORD *)(v4 + 8) = bswap64(*((_QWORD *)this + 28));
  v5 = *(_OWORD *)((char *)this + 232);
  v6 = *(_OWORD *)((char *)this + 248);
  v7 = *(_OWORD *)((char *)this + 280);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)((char *)this + 264);
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 80) = bswap64(*((_QWORD *)this + 37));
  *(_QWORD *)(v4 + 88) = bswap64(*((_QWORD *)this + 38));
  v9 = *(_OWORD *)((char *)this + 312);
  v8 = *(_OWORD *)((char *)this + 328);
  *(_QWORD *)(v4 + 128) = *((_QWORD *)this + 43);
  *(_OWORD *)(v4 + 96) = v9;
  *(_OWORD *)(v4 + 112) = v8;
  v10 = udif::details::serialize_field((uint64_t)this + 352, v4 + 136);
  *(_DWORD *)v10 = bswap32(*((_DWORD *)this + 122));
  *(_QWORD *)(v10 + 4) = bswap64(*(_QWORD *)((char *)this + 492));
  return v10 + 12;
}

void sub_212F97A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<85ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<85ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<85ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF08E98;
  a1[45] = &unk_24CF08F98;
  a1[46] = &unk_24CF08FC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF08E98;
  a1[45] = &unk_24CF08F20;
  a1[46] = &unk_24CF08F48;
  return a1;
}

void sub_212F97AA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<85ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *udif::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  const std::locale::facet *v56;
  _QWORD *v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  const std::locale::facet *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  _QWORD *v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  _QWORD *v71;
  _QWORD *v72;
  const std::locale::facet *v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  const std::locale::facet *v79;
  _QWORD *v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  _QWORD *v83;
  _QWORD *v84;
  const std::locale::facet *v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  const std::locale::facet *v91;
  _QWORD *v92;
  _QWORD *v93;
  const std::locale::facet *v94;
  _QWORD *v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  _QWORD *v98;
  _QWORD *v99;
  const std::locale::facet *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  const std::locale::facet *v104;
  _QWORD *v105;
  _QWORD *v106;
  const std::locale::facet *v107;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  std::locale v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[72];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"header (", 8);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"):", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v7 = *(_DWORD *)(a2 + 12);
  v112 = *(_DWORD *)(a2 + 60);
  v113 = *(_DWORD *)(a2 + 56);
  v110 = *(_QWORD *)(a2 + 72);
  v111 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 168);
  v134 = *(_OWORD *)(a2 + 152);
  v135 = v9;
  v10 = *(_OWORD *)(a2 + 200);
  v136 = *(_OWORD *)(a2 + 184);
  v137 = v10;
  v11 = *(_OWORD *)(a2 + 104);
  v130 = *(_OWORD *)(a2 + 88);
  v131 = v11;
  v12 = *(_OWORD *)(a2 + 136);
  v132 = *(_OWORD *)(a2 + 120);
  v133 = v12;
  v13 = *(_OWORD *)(a2 + 248);
  v126 = *(_OWORD *)(a2 + 232);
  v127 = v13;
  v14 = *(_OWORD *)(a2 + 280);
  v128 = *(_OWORD *)(a2 + 264);
  v129 = v14;
  v15 = *(_OWORD *)(a2 + 328);
  v123 = *(_OWORD *)(a2 + 312);
  v124 = v15;
  v125 = *(_QWORD *)(a2 + 344);
  v16 = *(_QWORD *)(a2 + 352);
  v17 = *(_OWORD *)(a2 + 440);
  v119 = *(_OWORD *)(a2 + 424);
  v120 = v17;
  v18 = *(_OWORD *)(a2 + 472);
  v121 = *(_OWORD *)(a2 + 456);
  v122 = v18;
  v19 = *(_OWORD *)(a2 + 376);
  v115 = *(_OWORD *)(a2 + 360);
  v116 = v19;
  v20 = *(_OWORD *)(a2 + 408);
  v117 = *(_OWORD *)(a2 + 392);
  v118 = v20;
  v109 = *(_DWORD *)(a2 + 488);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"signature", 9);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
  v138[23] = 4;
  strcpy(v138, "koly");
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v138, 4);
  if ((v138[23] & 0x80000000) != 0)
    operator delete(*(void **)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"version", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
  v27 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"header_size", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
  v29 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
  v30 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"flags", 5);
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v7;
  v33 = udif::operator<<(v32, (int *)&v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
  v34 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"run_data_fork_offset", 20);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
  v37 = *v36;
  v38 = (char *)v36 + *(_QWORD *)(*v36 - 24);
  v39 = *((_DWORD *)v38 + 2);
  *((_DWORD *)v38 + 2) = v39 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v36 + *(_QWORD *)(v37 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, v138);
  std::ostream::operator<<();
  v40 = *v36;
  *(_DWORD *)((char *)v36 + *(_QWORD *)(*v36 - 24) + 8) = v39;
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(v40 - 24)));
  v41 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_fork_offset", 16);
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
  v44 = *v43;
  v45 = (char *)v43 + *(_QWORD *)(*v43 - 24);
  LODWORD(v36) = *((_DWORD *)v45 + 2);
  *((_DWORD *)v45 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v43 + *(_QWORD *)(v44 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v43, v138);
  std::ostream::operator<<();
  v46 = *v43;
  *(_DWORD *)((char *)v43 + *(_QWORD *)(*v43 - 24) + 8) = (_DWORD)v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(v46 - 24)));
  v47 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_fork_len", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
  v49 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
  v50 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"rsrc_fork_offset", 16);
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
  v53 = *v52;
  v54 = (char *)v52 + *(_QWORD *)(*v52 - 24);
  LODWORD(v36) = *((_DWORD *)v54 + 2);
  *((_DWORD *)v54 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v52 + *(_QWORD *)(v53 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v52, v138);
  std::ostream::operator<<();
  v55 = *v52;
  *(_DWORD *)((char *)v52 + *(_QWORD *)(*v52 - 24) + 8) = (_DWORD)v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(v55 - 24)));
  v56 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"rsrc_fork_len", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
  v58 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
  v59 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"segment_num", 11);
  v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v113;
  v62 = udif::operator<<(v61, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(_QWORD *)(*v62 - 24)));
  v63 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"segment_count", 13);
  v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v112;
  v66 = udif::operator<<(v65, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
  v67 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_QWORD *)v138 = v111;
  *(_QWORD *)&v138[8] = v110;
  v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"segment_id", 10);
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": ", 2);
  print_buffer(v69, (uint64_t)v138, 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
  v70 = std::locale::use_facet(&v114, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(_QWORD *)v138 = v8;
  v139 = v134;
  v140 = v135;
  v141 = v136;
  v142 = v137;
  *(_OWORD *)&v138[8] = v130;
  *(_OWORD *)&v138[24] = v131;
  *(_OWORD *)&v138[40] = v132;
  *(_OWORD *)&v138[56] = v133;
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_fork_checksum", 18);
  v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
  udif::details::operator<<(v72, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(_QWORD *)(*v72 - 24)));
  v73 = std::locale::use_facet(&v114, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"xml_offset", 10);
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)": ", 2);
  v76 = *v75;
  v77 = (char *)v75 + *(_QWORD *)(*v75 - 24);
  LODWORD(v36) = *((_DWORD *)v77 + 2);
  *((_DWORD *)v77 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v75 + *(_QWORD *)(v76 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v75, v138);
  std::ostream::operator<<();
  v78 = *v75;
  *(_DWORD *)((char *)v75 + *(_QWORD *)(*v75 - 24) + 8) = (_DWORD)v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(_QWORD *)(v78 - 24)));
  v79 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"xml_length", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)": ", 2);
  v81 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
  v82 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)v138 = v126;
  *(_OWORD *)&v138[16] = v127;
  *(_OWORD *)&v138[32] = v128;
  *(_OWORD *)&v138[48] = v129;
  v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"external", 8);
  v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)": ", 2);
  print_buffer(v84, (uint64_t)v138, 64);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(_QWORD *)(*v84 - 24)));
  v85 = std::locale::use_facet(&v114, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"code_sign_offset", 16);
  v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)": ", 2);
  v88 = *v87;
  v89 = (char *)v87 + *(_QWORD *)(*v87 - 24);
  LODWORD(v36) = *((_DWORD *)v89 + 2);
  *((_DWORD *)v89 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v87 + *(_QWORD *)(v88 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v87, v138);
  std::ostream::operator<<();
  v90 = *v87;
  *(_DWORD *)((char *)v87 + *(_QWORD *)(*v87 - 24) + 8) = (_DWORD)v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(_QWORD *)(v90 - 24)));
  v91 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"code_sign_length", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)": ", 2);
  v93 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(_QWORD *)(*v93 - 24)));
  v94 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)v138 = v123;
  *(_OWORD *)&v138[16] = v124;
  *(_QWORD *)&v138[32] = v125;
  v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"reserved", 8);
  v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)": ", 2);
  print_buffer(v96, (uint64_t)v138, 40);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
  v97 = std::locale::use_facet(&v114, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(_QWORD *)v138 = v16;
  v139 = v119;
  v140 = v120;
  v141 = v121;
  v142 = v122;
  *(_OWORD *)&v138[8] = v115;
  *(_OWORD *)&v138[24] = v116;
  *(_OWORD *)&v138[40] = v117;
  *(_OWORD *)&v138[56] = v118;
  v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"master_checksum", 15);
  v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)": ", 2);
  udif::details::operator<<(v99, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(_QWORD *)(*v99 - 24)));
  v100 = std::locale::use_facet(&v114, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"image_variant", 13);
  v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v109;
  v103 = udif::operator<<(v102, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(*v103 - 24)));
  v104 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"sector_count", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)": ", 2);
  v106 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(_QWORD *)(*v106 - 24)));
  v107 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_212F98ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 233) < 0)
    operator delete(*(void **)(v18 - 256));
  _Unwind_Resume(exception_object);
}

__n128 udif::details::endian_reverse@<Q0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  __n128 result;
  int v5;
  BOOL v6;
  unsigned int v7;
  int v8;

  udif::checksum_type::checksum_type((udif::checksum_type *)&v8, bswap32(*(_DWORD *)a1));
  *a2 = v8;
  a2[1] = 0;
  v7 = bswap32(*(_DWORD *)(a1 + 4));
  udif::details::checksum::_checksum::set_len(a2 + 1, &v7);
  v5 = *a2;
  if (*a2)
    v6 = v5 == 10;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 == 2)
    {
      a2[2] = bswap32(*(_DWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)(a2 + 18) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a2 + 26) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a2 + 30) = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 40);
      result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 14) = result;
    }
  }
  return result;
}

_DWORD *udif::details::checksum::_checksum::set_len(_DWORD *this, const unsigned int *a2)
{
  _QWORD *exception;

  if (*a2 >= 0x408)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_24CF07FD0;
    exception[1] = "_checksum";
    exception[2] = "field size too large";
  }
  *this = *a2;
  return this;
}

BOOL udif::details::checksum::operator==(_DWORD *a1, uint64_t a2)
{
  _DWORD v4[34];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  udif::details::checksum::checksum((uint64_t)v4, a2);
  return udif::details::checksum::operator==(a1, v4);
}

uint64_t udif::details::checksum::checksum(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v5;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))off_24CF090A0[v2])(&v7, &v6, a2 + 4);
  *(_QWORD *)a1 = v7;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v11;
  return a1;
}

unsigned int *udif::details::endian_reverse@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;

  v3 = bswap32(*result);
  if ((v3 & 0x80000000) != 0)
  {
    result = udif::details::descriptor_special::descriptor_special(&v4, v3);
    v3 = v4;
  }
  *a2 = v3;
  return result;
}

uint64_t udif::details::serialize_field(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  v2 = (_OWORD *)(a2 + 8);
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
    v4 = v3 == 10;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 0;
  }
  else if (v3 == 2)
  {
    *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
    v2 = (_OWORD *)(a2 + 12);
    v5 = 4;
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 56) = v8;
    *v2 = v6;
    *(_OWORD *)(a2 + 24) = v7;
    v9 = *(_OWORD *)(a1 + 72);
    v10 = *(_OWORD *)(a1 + 88);
    v11 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 120) = v11;
    *(_OWORD *)(a2 + 72) = v9;
    *(_OWORD *)(a2 + 88) = v10;
    v5 = 128;
  }
  bzero(v2, 128 - v5);
  return (uint64_t)v2 - v5 + 128;
}

uint64_t udif::details::run_info::make_sectors_interval@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  DiskImagesRuntimeException *exception;
  void *v7;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(result + 8) + v3;
  v5 = v4 + *(_QWORD *)(result + 16);
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 2;
  if (v4 < v5 && (v4 < v3 || v3 + *(_QWORD *)(a2 + 16) - 1 < v5 - 1))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Invalid UDIF, run is not within block boundary", 0x16u);
  }
  return result;
}

uint64_t udif::details::UDIF_base::get_xml_data@<X0>(udif::details::UDIF_base *this@<X0>, _QWORD *a2@<X8>)
{
  size_t v4;
  void *v5;
  uint64_t result;
  unsigned int v7;
  _QWORD *exception;
  const std::error_category *v9;

  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 224);
  v5 = (void *)operator new[]();
  bzero(v5, v4);
  *a2 = v5;
  result = Backend::read(*((Backend **)this + 7), (char *)v5, v4, *(_QWORD *)(*((_QWORD *)this + 9) + 216));
  if ((result & 0x80000000) != 0)
  {
    v7 = result;
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v9 = std::generic_category();
    exception[1] = v7;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't read UDIF trailer";
  }
  return result;
}

void sub_212F99000(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x2199A8A00](v2, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

unint64_t udif::details::UDIF_base::write_resources(udif::details::UDIF_base *this, const __CFDictionary *a2)
{
  int v3;
  NSObject *DIOSLog;
  const char *v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const UInt8 *BytePtr;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *exception;
  const std::error_category *v32;
  _QWORD *v33;
  const std::error_category *v34;
  const void *v35[2];
  CFPropertyListRef propertyList;
  uint8_t buf[8];
  _BYTE v38[24];
  char *v39;
  char v40;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x24BDAC8D0];
  values = a2;
  keys[0] = CFSTR("resource-fork");
  cf::make_dict((const void **)keys, (const void **)&values, 1, (CFMutableDictionaryRef *)&propertyList);
  if (DIDebugLogsEnabled())
  {
    v3 = *__error();
    if (DIForwardLogs())
    {
      v35[0] = 0;
      DIOSLog = getDIOSLog();
      os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEBUG);
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&buf[4] = 41;
      *(_WORD *)v38 = 2080;
      *(_QWORD *)&v38[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
      *(_WORD *)&v38[10] = 2114;
      *(_QWORD *)&v38[12] = propertyList;
      v5 = (const char *)_os_log_send_and_compose_impl();
      if (v5)
      {
        v6 = (char *)v5;
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v5);
        free(v6);
      }
    }
    else
    {
      v7 = getDIOSLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&buf[4] = 41;
        *(_WORD *)v38 = 2080;
        *(_QWORD *)&v38[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
        *(_WORD *)&v38[10] = 2114;
        *(_QWORD *)&v38[12] = propertyList;
        _os_log_impl(&dword_212EB0000, v7, OS_LOG_TYPE_DEBUG, "%.*s: res_dict: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v3;
  }
  cf::serialize_to_xml_plist(propertyList, (const __CFData **)v35);
  v8 = *(_QWORD *)(*((_QWORD *)this + 9) + 216);
  v9 = *((_QWORD *)this + 7);
  v10 = (char *)v35[1];
  BytePtr = CFDataGetBytePtr((CFDataRef)v35[0]);
  v12 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
  *(_QWORD *)buf = BytePtr;
  *(_QWORD *)v38 = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)&v38[8] = v10;
  *(_QWORD *)&v38[16] = v8;
  v39 = v10;
  v40 = 0;
  v15 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 96))(v9, buf);
  v16 = *(std::__shared_weak_count **)v38;
  if (*(_QWORD *)v38)
  {
    v17 = (unint64_t *)(*(_QWORD *)v38 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if ((v15 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v32 = std::generic_category();
    exception[1] = v15;
    exception[2] = v32;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't write UDIF resource part";
  }
  *(_QWORD *)(*((_QWORD *)this + 9) + 224) = v10;
  v19 = &v10[v8];
  v20 = (unint64_t)(v19 + 511) & 0xFFFFFFFFFFFFFE00;
  v21 = (void *)operator new[]();
  bzero(v21, v20 - (_QWORD)v19 + 512);
  udif::header::write(*((udif::header **)this + 9), (char *)v21 + v20 - (_QWORD)v19);
  v22 = *((_QWORD *)this + 7);
  v23 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
  *(_QWORD *)buf = v21;
  *(_QWORD *)v38 = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_QWORD *)&v38[8] = v20 - (_QWORD)v19 + 512;
  *(_QWORD *)&v38[16] = v19;
  v39 = *(char **)&v38[8];
  v40 = 0;
  v26 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v22 + 96))(v22, buf);
  v27 = *(std::__shared_weak_count **)v38;
  if (*(_QWORD *)v38)
  {
    v28 = (unint64_t *)(*(_QWORD *)v38 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if ((v26 & 0x80000000) != 0)
  {
    v33 = __cxa_allocate_exception(0x40uLL);
    *v33 = &off_24CF07908;
    v34 = std::generic_category();
    v33[1] = v26;
    v33[2] = v34;
    *((_BYTE *)v33 + 24) = 0;
    *((_BYTE *)v33 + 48) = 0;
    v33[7] = "Can't write UDIF header";
  }
  MEMORY[0x2199A8A00](v21, 0x1000C8077774924);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(v35);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&propertyList);
  return v20 + 512;
}

void sub_212F99448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *udif::details::operator<<(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v4;
  const char *v5;
  uint64_t v6;

  if ((*a2 & 0x80000000) != 0)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"special: ", 9);
    if (*a2 == -1)
      v5 = "ddm";
    else
      v5 = "entire_device";
    if (*a2 == -1)
      v6 = 3;
    else
      v6 = 13;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"partition_num: ", 15);
    return (_QWORD *)std::ostream::operator<<();
  }
}

_QWORD *udif::details::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  const std::locale::facet *v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  _QWORD *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  std::locale v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[24];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Blocks header", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  v6 = *(_DWORD *)(a2 + 36);
  v58 = *(_OWORD *)(a2 + 40);
  v59 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 152);
  v54 = *(_OWORD *)(a2 + 136);
  v55 = v8;
  v9 = *(_OWORD *)(a2 + 184);
  v56 = *(_OWORD *)(a2 + 168);
  v57 = v9;
  v10 = *(_OWORD *)(a2 + 88);
  v50 = *(_OWORD *)(a2 + 72);
  v51 = v10;
  v11 = *(_OWORD *)(a2 + 120);
  v52 = *(_OWORD *)(a2 + 104);
  v53 = v11;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"signature", 9);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
  v60[23] = 4;
  strcpy(v60, "mish");
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v60, 4);
  if ((v60[23] & 0x80000000) != 0)
    operator delete(*(void **)v60);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"version", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"first_sector_number", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"sector_count", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_start", 10);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
  v27 = *v26;
  v28 = (char *)v26 + *(_QWORD *)(*v26 - 24);
  v29 = *((_DWORD *)v28 + 2);
  *((_DWORD *)v28 + 2) = v29 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v26 + *(_QWORD *)(v27 - 24) + 8) |= 0x200u;
  v60[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, v60);
  std::ostream::operator<<();
  v30 = *v26;
  *(_DWORD *)((char *)v26 + *(_QWORD *)(*v26 - 24) + 8) = v29;
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(v30 - 24)));
  v31 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"decompression_buffer_req", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
  v34 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  LODWORD(v49.__locale_) = v6;
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"descriptor", 10);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
  v37 = udif::details::operator<<(v36, &v49);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
  v38 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)v60 = v58;
  *(_QWORD *)&v60[16] = v59;
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"reserved", 8);
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
  print_buffer(v40, (uint64_t)v60, 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
  v41 = std::locale::use_facet(&v49, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  *(_QWORD *)v60 = v7;
  v64 = v54;
  v65 = v55;
  v66 = v56;
  v67 = v57;
  *(_OWORD *)&v60[8] = v50;
  v61 = v51;
  v62 = v52;
  v63 = v53;
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"checksum", 8);
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
  udif::details::operator<<(v43, (int *)v60);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
  v44 = std::locale::use_facet(&v49, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"run_count", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
  v46 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
  v47 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_212F99C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *udif::details::operator<<(_QWORD *a1, int *a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char v15;
  int v16;

  v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"type: ", 6);
  v16 = *a2;
  v6 = udif::operator<<(v5, &v16);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  v15 = 48;
  v8 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, &v15);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
  v10 = *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"len: ", 5);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" data: ", 7);
  *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  v13 = a2[1];
  if ((_DWORD)v13)
    print_buffer(v8, (uint64_t)(a2 + 2), v13);
  else
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(empty)", 7);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = v10;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v4;
  return a1;
}

void *udif::details::UDIF_base::get_compressed_types(udif::details::UDIF_base *this)
{
  unsigned __int8 v1;
  unsigned int v3[2];
  _DWORD v4[2];
  _DWORD v5[2];
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    udif::run_type::run_type((udif::run_type *)v3, -2147483643);
    v3[1] = 0;
    udif::run_type::run_type((udif::run_type *)v4, -2147483641);
    v4[1] = 1;
    udif::run_type::run_type((udif::run_type *)v5, -2147483640);
    v5[1] = 2;
    udif::run_type::run_type((udif::run_type *)v6, -2147483642);
    v6[1] = 4;
    std::map<udif::run_type,CompressedBackend::algo_t>::map[abi:ne180100]((uint64_t)&udif::details::UDIF_base::get_compressed_types(void)::compressed_types, v3, 4);
    __cxa_atexit((void (*)(void *))std::map<udif::run_type,CompressedBackend::algo_t>::~map[abi:ne180100], &udif::details::UDIF_base::get_compressed_types(void)::compressed_types, &dword_212EB0000);
  }
  return &udif::details::UDIF_base::get_compressed_types(void)::compressed_types;
}

void sub_212F99F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<udif::run_type,CompressedBackend::algo_t>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void *udif::details::UDIF_base::find_compression_algo_by_run@<X0>(udif::details::UDIF_base *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  udif::details::UDIF_base *compressed_types;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  void *result;
  char v13;

  compressed_types = (udif::details::UDIF_base *)udif::details::UDIF_base::get_compressed_types(a1);
  v6 = qword_254B6D038;
  if (!qword_254B6D038)
    goto LABEL_12;
  v7 = *a2;
  v8 = &qword_254B6D038;
  do
  {
    v9 = *(_DWORD *)(v6 + 28);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (v10)
      v8 = (uint64_t *)v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 != &qword_254B6D038 && v7 >= *((_DWORD *)v8 + 7))
  {
    result = udif::details::UDIF_base::get_compressed_types(compressed_types);
    *(_DWORD *)a3 = *((_DWORD *)v8 + 8);
    v13 = 1;
  }
  else
  {
LABEL_12:
    result = udif::details::UDIF_base::get_compressed_types(compressed_types);
    v13 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 4) = v13;
  return result;
}

uint64_t **udif::details::UDIF_base::update_compressed_types(uint64_t **result, uint64_t **a2, _DWORD *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  void *exception;
  _DWORD *v13[33];
  int v14;
  int v15;

  if (HIBYTE(*a3) == 128)
  {
    v9 = result;
    v14 = *a3;
    ((void (*)(_DWORD **__return_ptr, uint64_t **, int *))(*result)[2])(v13, result, &v14);
    if (!BYTE4(v13[0]))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unsupported compressed run (", 28);
      v15 = *a3;
      udif::operator<<(v13, &v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v13, 0x2Du);
    }
    v13[0] = a3;
    v10 = std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(a2, a3, (uint64_t)&std::piecewise_construct, v13)[5];
    if (v10)
    {
      v13[0] = a3;
      v10 = std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(a2, a3, (uint64_t)&std::piecewise_construct, v13)[5];
    }
    if (v10 > a4)
      a4 = v10;
    v13[0] = a3;
    result = std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(a2, a3, (uint64_t)&std::piecewise_construct, v13);
    result[5] = a4;
    *((_BYTE *)v9 + 88) = 1;
    v11 = v9[12];
    if (v11 <= a5)
      v11 = a5;
    v9[12] = v11;
  }
  return result;
}

void sub_212F9A1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void udif::details::UDIF_base::create_backends(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  int v11;

  udif::run_type::run_type((udif::run_type *)&v11, 1);
  udif::details::UDIF_base::add_backend_to_map(a1, &v11, 0);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      v10 = *((_DWORD *)v5 + 8);
      udif::details::UDIF_base::add_backend_to_map(a1, &v10, v5[5]);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
  }
}

void udif::details::UDIF_base::add_backend_to_map(uint64_t a1, _DWORD *a2, size_t a3)
{
  uint64_t **v4;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  DiskImagesRuntimeException *exception;
  void *v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;

  if (*a2 == 1)
  {
    udif::run_type::run_type((udif::run_type *)&v17, 1);
    *(_QWORD *)&v14 = &v17;
    v4 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>((uint64_t **)(a1 + 104), (unsigned int *)&v17, (uint64_t)&std::piecewise_construct, (_DWORD **)&v14);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](v4 + 5, (uint64_t *)(a1 + 56));
  }
  else
  {
    v15 = *a2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(_QWORD *)a1 + 16))(&v16, a1, &v15);
    if (!BYTE4(v16))
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF: compression algo is invalid", 0x16u);
    }
    v13 = v16;
    CompressedBackend::make_backend((_QWORD *)(a1 + 56), &v13, a3, &v14);
    v17 = a2;
    v7 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>((uint64_t **)(a1 + 104), a2, (uint64_t)&std::piecewise_construct, &v17);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)(v7 + 5), &v14);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_212F9A3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void udif::details::UDIF_base::make_backend_contexts(udif::details::UDIF_base *this@<X0>, uint64_t a2@<X8>)
{
  udif::details::UDIF_base *v4;
  const void *v5;
  _DWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t **v22;
  udif::details::UDIF_base *v23;
  udif::details::UDIF_base *v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _DWORD *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  _DWORD *v37;

  v35 = 0;
  v36 = 0;
  v34 = (uint64_t *)&v35;
  (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 7) + 72))(&v33);
  v4 = (udif::details::UDIF_base *)*((_QWORD *)this + 13);
  if (v4 != (udif::details::UDIF_base *)((char *)this + 112))
  {
    do
    {
      v5 = (const void *)*((_QWORD *)v4 + 5);
      if (v5 == *((const void **)this + 7))
      {
        v31 = (_DWORD *)((char *)v4 + 32);
        v22 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(&v34, (unsigned int *)v4 + 8, (uint64_t)&std::piecewise_construct, &v31);
        std::shared_ptr<DiskImage>::operator=[abi:ne180100](v22 + 5, (uint64_t *)&v33);
      }
      else if (v5)
      {
        if (v6)
        {
          v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
          v31 = v6;
          v32 = v7;
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldxr(p_shared_owners);
            while (__stxr(v9 + 1, p_shared_owners));
          }
          v29 = v33;
          if (*((_QWORD *)&v33 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          (*(void (**)(__int128 *__return_ptr, _DWORD *, __int128 *))(*(_QWORD *)v6 + 176))(&v30, v6, &v29);
          v37 = (_DWORD *)((char *)v4 + 32);
          v12 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(&v34, (unsigned int *)v4 + 8, (uint64_t)&std::piecewise_construct, &v37);
          std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)(v12 + 5), &v30);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1))
          {
            v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
          if (*((_QWORD *)&v29 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v19 = v32;
          if (v32)
          {
            v20 = (unint64_t *)&v32->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }
      v23 = (udif::details::UDIF_base *)*((_QWORD *)v4 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(udif::details::UDIF_base **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (udif::details::UDIF_base *)*((_QWORD *)v4 + 2);
          v25 = *(_QWORD *)v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v25);
      }
      v4 = v24;
    }
    while (v24 != (udif::details::UDIF_base *)((char *)this + 112));
  }
  v26 = v35;
  *(_QWORD *)a2 = v34;
  *(_QWORD *)(a2 + 8) = v26;
  v27 = a2 + 8;
  v28 = v36;
  *(_QWORD *)(a2 + 16) = v36;
  if (v28)
  {
    v26[2] = v27;
    v34 = (uint64_t *)&v35;
    v35 = 0;
    v36 = 0;
    v26 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v27;
  }
  *(_OWORD *)(a2 + 24) = v33;
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)&v34, v26);
}

void sub_212F9A690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t udif::details::UDIF_base::validate_runs(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  DiskImagesRuntimeException *exception;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  _QWORD v12[20];

  v1 = *(_QWORD **)(this + 8);
  if (v1 != (_QWORD *)(this + 16))
  {
    do
    {
      if (*((unsigned __int8 *)v1 + 59) == 128
        && (v1[5] - v1[4] + (unint64_t)(v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9 > 0x400000)
      {
        v7 = v1;
        *(_QWORD *)&v9 = "udif::details::UDIF_base::validate_runs()";
        *((_QWORD *)&v9 + 1) = 39;
        v10 = 16;
        di_log::logger<di_log::log_printer<417ul>>::logger(v11, &v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Run interval: ", 14);
        boost::icl::operator<<<char,std::char_traits<char>,boost::icl::discrete_interval<unsigned long long,std::less>>(v12, (uint64_t)(v7 + 4));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" of type ", 9);
        LODWORD(v8) = *((_DWORD *)v7 + 14);
        udif::operator<<(v12, &v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" has size ", 10);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"which is larger than allowed ", 29);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" or exceeds size_t size ", 24);
        v8 = -1;
        std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<417ul>>,unsigned long,0>((uint64_t)v11);
        di_log::logger<di_log::log_printer<417ul>>::~logger((uint64_t)v11);
        exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
        DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF: compressed runs should be <= 1MB", 0x16u);
      }
      v2 = (_QWORD *)v1[1];
      if (v2)
      {
        do
        {
          v3 = v2;
          v2 = (_QWORD *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          v3 = (_QWORD *)v1[2];
          v4 = *v3 == (_QWORD)v1;
          v1 = v3;
        }
        while (!v4);
      }
      v1 = v3;
    }
    while (v3 != (_QWORD *)(this + 16));
  }
  return this;
}

void sub_212F9A89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  di_log::logger<di_log::log_printer<417ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<417ul>>,unsigned long,0>(uint64_t a1)
{
  std::ostream::operator<<();
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<417ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<417ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF090C8;
  a1[45] = &unk_24CF091C8;
  a1[46] = &unk_24CF091F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF090C8;
  a1[45] = &unk_24CF09150;
  a1[46] = &unk_24CF09178;
  return a1;
}

void sub_212F9A968(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<417ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t *udif::details::UDIF_base::add_block(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v5;
  int v6;
  uint64_t v7;
  DiskImagesRuntimeException *exception;
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t **)(a1 + 32);
  if (a1 + 40 != std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::find<boost::icl::discrete_interval<unsigned long long,std::less>>(a1 + 32, a2))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Invalid UDIF format, contains intersected blocks", 0x16u);
  }
  v6 = *((_DWORD *)a3 + 2);
  v19 = *(_OWORD *)((char *)a3 + 76);
  v20 = *(_OWORD *)((char *)a3 + 92);
  v21 = *(_OWORD *)((char *)a3 + 108);
  v22 = *(_OWORD *)((char *)a3 + 124);
  v15 = *(_OWORD *)((char *)a3 + 12);
  v16 = *(_OWORD *)((char *)a3 + 28);
  v17 = *(_OWORD *)((char *)a3 + 44);
  v18 = *(_OWORD *)((char *)a3 + 60);
  v7 = *a3;
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_OWORD *)a2;
  v13 = v7;
  v14 = v6;
  v23 = 1;
  return boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_insert(v5, (uint64_t)&v11);
}

uint64_t udif::details::UDIF_base::generate_blocks(uint64_t **this, CFArrayRef theArray)
{
  unint64_t Count;
  CFIndex v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  CFTypeID TypeID;
  const void *Value;
  CFTypeID v13;
  CFIndex Length;
  char *v15;
  const std::locale::facet *v16;
  unsigned int v17;
  const char *v18;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *exception;
  const std::error_category *v25;
  cf::CFUtilException *v26;
  cf::CFUtilException *v27;
  CFIndex v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  std::locale v33[2];
  uint64_t v34;
  __int128 v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40[2];
  _BYTE v41[28];
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[152];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  CFRange v65;
  CFRange v66;

  v64 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(theArray);
  v5 = Count;
  if (Count >> 61)
    v6 = -1;
  else
    v6 = 8 * Count;
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  v40[0] = 0;
  v40[1] = 0;
  v39 = (uint64_t *)v40;
  v65.location = 0;
  v65.length = v5;
  v29 = v7;
  CFArrayGetValues(theArray, v65, (const void **)v7);
  if (v5 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v31 = 0;
    v28 = v5;
    while (1)
    {
      v30 = v9;
      v10 = (const void *)v29[v9];
      TypeID = CFDictionaryGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) != TypeID)
          break;
      }
      Value = CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("Data"));
      v13 = CFDataGetTypeID();
      if (!Value)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        *exception = &off_24CF07908;
        v25 = std::generic_category();
        exception[1] = 22;
        exception[2] = v25;
        *((_BYTE *)exception + 24) = 0;
        *((_BYTE *)exception + 48) = 0;
        exception[7] = "UDIF: Can't find data key in dictionary";
      }
      if (CFGetTypeID(Value) != v13)
      {
        v26 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
        CFGetTypeID(Value);
        v27 = v26;
        goto LABEL_32;
      }
      Length = CFDataGetLength((CFDataRef)Value);
      v15 = (char *)operator new[]();
      bzero(v15, Length);
      v66.length = CFDataGetLength((CFDataRef)Value);
      v66.location = 0;
      CFDataGetBytes((CFDataRef)Value, v66, (UInt8 *)v15);
      udif::details::blocks::blocks((udif::details::blocks *)&v50, v15);
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v35 = "udif::details::UDIF_base::generate_blocks(CFArrayRef)";
        *((_QWORD *)&v35 + 1) = 41;
        v36 = 2;
        di_log::logger<di_log::log_printer<458ul>>::logger(v41, &v35);
        udif::details::operator<<(&v48, (uint64_t)&v50);
        std::ios_base::getloc((const std::ios_base *)&v49[*(_QWORD *)(v48 - 24) - 8]);
        v16 = std::locale::use_facet(v33, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v33);
        std::ostream::put();
        std::ostream::flush();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf((uint64_t)v41);
        MEMORY[0x2199A89AC](v49);
      }
      *(_QWORD *)&v35 = *((_QWORD *)&v50 + 1);
      *((_QWORD *)&v35 + 1) = v51 + *((_QWORD *)&v50 + 1);
      LOBYTE(v36) = 2;
      *(_DWORD *)v41 = v53;
      *(_QWORD *)&v41[4] = v54;
      v44 = v59;
      v45 = v60;
      v46 = v61;
      v47 = v62;
      *(_OWORD *)&v41[12] = v55;
      *(_OWORD *)v42 = v56;
      *(_OWORD *)&v42[16] = v57;
      v43 = v58;
      udif::details::UDIF_base::add_block((uint64_t)this, (uint64_t)&v35, (uint64_t *)v41);
      if (v63)
      {
        v17 = 0;
        v18 = v15 + 204;
        do
        {
          udif::details::run_t::run_t((udif::details::run_t *)&v35, v18);
          udif::details::run_info::make_sectors_interval((uint64_t)&v35, (uint64_t)&v50, (uint64_t)v33);
          if (v35 < 2 || (v35 & 0xFF000000) == 0x80000000)
          {
            v32 = v35;
            udif::details::UDIF_base::update_compressed_types(this, &v39, &v32, v38, (uint64_t *)((v33[1].__locale_ - v33[0].__locale_ + (v34 & 1) + ((v34 >> 1) & 1) - 1) << 9));
            v20 = v52 + v37 + this[9][3];
            *(_OWORD *)v41 = *(_OWORD *)&v33[0].__locale_;
            *(_QWORD *)&v41[16] = v34;
            *(_DWORD *)&v41[24] = v35;
            *(_QWORD *)&v42[4] = v20;
            *(_QWORD *)&v42[12] = v38;
            boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_insert(this + 1, (uint64_t)v41);
            v21 = v37;
            if (v37 < v8)
              *((_BYTE *)this + 89) = 0;
          }
          else
          {
            v21 = v8;
          }
          ++v17;
          v18 += 40;
          v8 = v21;
        }
        while (v17 < v63);
      }
      else
      {
        v21 = v8;
      }
      if (v31 <= v53)
        v22 = v53;
      else
        v22 = v31;
      v31 = v22;
      MEMORY[0x2199A8A00](v15, 0x1000C8077774924);
      v9 = v30 + 1;
      v8 = v21;
      if (v30 + 1 == v28)
        goto LABEL_28;
    }
    v26 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v10);
    v27 = v26;
LABEL_32:
    cf::CFUtilException::CFUtilException(v27);
  }
LABEL_28:
  udif::details::UDIF_base::validate_runs((uint64_t)this);
  *(_QWORD *)&v50 = "udif::details::UDIF_base::generate_blocks(CFArrayRef)";
  *((_QWORD *)&v50 + 1) = 41;
  LODWORD(v51) = 0;
  di_log::logger<di_log::log_printer<500ul>>::logger(v41, &v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"UDIF - max compressed run size: ", 32);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)", required decompression buffer size: ", 38);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf((uint64_t)v41);
  MEMORY[0x2199A89AC](v49);
  udif::details::UDIF_base::create_backends((uint64_t)this, &v39);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v39, v40[0]);
  return MEMORY[0x2199A8A00](v29, 0x80C80B8603338);
}

void sub_212F9B084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,char a29)
{
  di_log::logger<di_log::log_printer<500ul>>::~logger((uint64_t)&a29);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&a26, a27);
  MEMORY[0x2199A8A00](a14, 0x80C80B8603338);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<458ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<458ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF092E8;
  a1[45] = &unk_24CF093E8;
  a1[46] = &unk_24CF09410;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF092E8;
  a1[45] = &unk_24CF09370;
  a1[46] = &unk_24CF09398;
  return a1;
}

void sub_212F9B1D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<458ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<500ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<500ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF09508;
  a1[45] = &unk_24CF09608;
  a1[46] = &unk_24CF09630;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF09508;
  a1[45] = &unk_24CF09590;
  a1[46] = &unk_24CF095B8;
  return a1;
}

void sub_212F9B2BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<500ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t *udif::details::UDIF_base::get_dummy_runs(udif::details::UDIF_base *this)
{
  unsigned __int8 v1;
  int v3;
  __int128 v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    udif::run_type::run_type((udif::run_type *)&v3, 0);
    v4 = xmmword_212FF4360;
    v5 = 2;
    v6 = v3;
    v7 = 0;
    v8 = 0;
    std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::map[abi:ne180100]((uint64_t)&udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs, (unint64_t *)&v4, 1);
    __cxa_atexit((void (*)(void *))std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::~map[abi:ne180100], &udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs, &dword_212EB0000);
  }
  return &udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs;
}

void sub_212F9B404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

udif::details::UDIF_base *udif::details::UDIF_base::create_iterator(udif::details::UDIF_base *this, unint64_t a2, uint64_t a3, unint64_t a4)
{
  udif::details::UDIF_base *result;
  _QWORD v6[2];
  char v7;

  v6[0] = a2 / a4;
  v6[1] = (a3 + a2) / a4;
  v7 = 2;
  result = (udif::details::UDIF_base *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)this + 8, (uint64_t)v6);
  if ((udif::details::UDIF_base *)((char *)this + 16) == result)
  {
    udif::details::UDIF_base::get_dummy_runs(result);
    return (udif::details::UDIF_base *)udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs;
  }
  return result;
}

void udif::details::UDIF_base::_get_runs_for_io(udif::details::UDIF_base *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  udif::details::UDIF_base *iterator;
  udif::details::UDIF_base *v9;
  udif::details::UDIF_base *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  udif::details::UDIF_base *v27;
  udif::details::UDIF_base *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;

  v5 = a3;
  iterator = udif::details::UDIF_base::create_iterator(a1, a2, a3, 0x200uLL);
  if (v5)
  {
    v9 = iterator;
    v10 = (udif::details::UDIF_base *)((char *)a1 + 16);
    v11 = a2;
    while (v9 != v10)
    {
      v12 = *((_QWORD *)v9 + 4);
      v13 = v12 << 9;
      if (v11 < v12 << 9)
        goto LABEL_11;
      v14 = (*((_QWORD *)v9 + 5) - v12) << 9;
      if (v14 - (v11 - v13) >= v5)
        v15 = v5;
      else
        v15 = v14 - (v11 - v13);
      v16 = *((_DWORD *)v9 + 14);
      v29 = v16;
      if (HIBYTE(v16) == 128)
      {
        v30 = *((_OWORD *)v9 + 4);
        *(_QWORD *)&v31 = v13;
        *((_QWORD *)&v31 + 1) = v14;
        *(_QWORD *)&v32 = v11 - a2;
        *((_QWORD *)&v32 + 1) = v11 - v13;
      }
      else
      {
        *(_QWORD *)&v30 = *((_QWORD *)v9 + 8) + v11 - v13;
        *((_QWORD *)&v30 + 1) = v15;
        *(_QWORD *)&v31 = v11;
        *((_QWORD *)&v31 + 1) = v15;
        v32 = v11 - a2;
      }
      v33 = v15;
      v22 = a4[1];
      v23 = *a4 + (v22 << 6);
      if (v22 == a4[2])
      {
        boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(a4, v23, (const char *)1, (uint64_t)&v29, &v34);
      }
      else
      {
        *(_DWORD *)v23 = v16;
        v24 = v30;
        v25 = v31;
        v26 = v32;
        *(_QWORD *)(v23 + 56) = v33;
        *(_OWORD *)(v23 + 40) = v26;
        *(_OWORD *)(v23 + 24) = v25;
        *(_OWORD *)(v23 + 8) = v24;
        ++a4[1];
      }
      v27 = (udif::details::UDIF_base *)*((_QWORD *)v9 + 1);
      if (v27)
      {
        do
        {
          v9 = v27;
          v27 = *(udif::details::UDIF_base **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v9;
          v9 = (udif::details::UDIF_base *)*((_QWORD *)v9 + 2);
        }
        while (*(udif::details::UDIF_base **)v9 != v28);
      }
LABEL_23:
      v11 += v15;
      v5 -= v15;
      if (!v5)
        return;
    }
    v13 = v11 + v5;
LABEL_11:
    if (v13 - v11 >= v5)
      v15 = v5;
    else
      v15 = v13 - v11;
    udif::run_type::run_type((udif::run_type *)&v29, 0);
    v30 = 0uLL;
    *(_QWORD *)&v31 = v11;
    *((_QWORD *)&v31 + 1) = v15;
    v32 = v11 - a2;
    v33 = v15;
    v17 = a4[1];
    v18 = *a4 + (v17 << 6);
    if (v17 == a4[2])
    {
      boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(a4, v18, (const char *)1, (uint64_t)&v29, &v34);
    }
    else
    {
      *(_DWORD *)v18 = v29;
      v19 = v30;
      v20 = v31;
      v21 = v32;
      *(_QWORD *)(v18 + 56) = v33;
      *(_OWORD *)(v18 + 40) = v21;
      *(_OWORD *)(v18 + 24) = v20;
      *(_OWORD *)(v18 + 8) = v19;
      ++a4[1];
    }
    goto LABEL_23;
  }
}

uint64_t udif::details::UDIF_base::create_runs_range_iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 8;
  v4 = std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(a1 + 8, a2);
  std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(v3, a2);
  return v4;
}

uint64_t udif::details::UDIF_base::create_runs_iterator(udif::details::UDIF_base *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t udif::details::UDIF_base::print_checksum_verification_status(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  int v15;
  _QWORD v16[45];
  uint64_t v17;
  _QWORD v18[20];

  v18[19] = *MEMORY[0x24BDAC8D0];
  udif::details::checksum::checksum((uint64_t)v16, a3);
  if (udif::details::checksum::operator==(a4, v16))
  {
    *(_QWORD *)&v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((_QWORD *)&v14 + 1) = 60;
    v15 = 0;
    di_log::logger<di_log::log_printer<601ul>>::logger(v16, &v14);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" - same ", 8);
    checksum::operator<<((uint64_t)&v17, a3);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf((uint64_t)v16);
  }
  else
  {
    *(_QWORD *)&v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((_QWORD *)&v14 + 1) = 60;
    v15 = 0;
    di_log::logger<di_log::log_printer<603ul>>::logger(v16, &v14);
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" - different calculated: <", 26);
    checksum::operator<<((uint64_t)&v17, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"> real: <", 9);
    udif::details::operator<<(&v17, a4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)">", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf((uint64_t)v16);
  }
  return MEMORY[0x2199A89AC](v18);
}

void sub_212F9B8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<601ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<601ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<601ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF09728;
  a1[45] = &unk_24CF09828;
  a1[46] = &unk_24CF09850;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF09728;
  a1[45] = &unk_24CF097B0;
  a1[46] = &unk_24CF097D8;
  return a1;
}

void sub_212F9B97C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<601ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<603ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<603ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF09948;
  a1[45] = &unk_24CF09A48;
  a1[46] = &unk_24CF09A70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF09948;
  a1[45] = &unk_24CF099D0;
  a1[46] = &unk_24CF099F8;
  return a1;
}

void sub_212F9BA64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<603ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t udif::details::UDIF_base::UDIF_base(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  udif::details::UDIF_base *compressed_types;
  int v10;
  BOOL v11;
  int type;
  const __CFArray *value;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v28;
  int v29;
  _QWORD v30[45];
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[8];
  std::__shared_weak_count *v34;
  const void *v35;
  char v36;
  CFDictionaryRef v37;
  std::__shared_weak_count *v38;
  const void *v39;
  char v40;
  uint64_t v41;
  const __CFDictionary *v42;
  std::__shared_weak_count *v43;
  const void *v44;
  unsigned __int8 v45;
  uint64_t v46;

  *(_QWORD *)(a1 + 16) = 0;
  v3 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = &off_24CF08E30;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2[1];
  v5 = a2[2];
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  compressed_types = (udif::details::UDIF_base *)udif::details::UDIF_base::get_compressed_types((udif::details::UDIF_base *)a1);
  udif::details::UDIF_base::get_dummy_runs(compressed_types);
  *(_BYTE *)(a1 + 89) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 216) >= *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32)
                                                                   + *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  udif::details::UDIF_base::get_rsrc_iterators((udif::details::UDIF_base *)a1, (uint64_t)&v37);
  while (1)
  {
    if (v37 != v42)
      goto LABEL_15;
    v10 = v45;
    v11 = !v40 || v45 == 0;
    if (!v11)
      break;
    if ((v40 != 0) == (v45 != 0))
      goto LABEL_14;
LABEL_15:
    type = udif::xml_rsrc_iterator::get_type((udif::xml_rsrc_iterator *)&v37);
    udif::xml_rsrc_iterator::get_value(&v37);
    if (type == 1651272568)
    {
      udif::xml_rsrc_iterator::get_type((udif::xml_rsrc_iterator *)&v37);
      value = (const __CFArray *)udif::xml_rsrc_iterator::get_value(&v37);
      udif::details::UDIF_base::generate_blocks((uint64_t **)a1, value);
    }
    udif::xml_rsrc_iterator::xml_rsrc_iterator((udif::xml_rsrc_iterator *)v33, (const udif::xml_rsrc_iterator *)&v37);
    ++v41;
    if (v36)
      CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v35);
    v14 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v39 != v44)
    goto LABEL_15;
LABEL_14:
  if (v41 != v46)
    goto LABEL_15;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 492);
  *(_QWORD *)(a1 + 80) = v17;
  if (!v17 && (_QWORD *)*v4 != v3)
  {
    v18 = (_QWORD *)*v3;
    if (*v3)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)v18[1];
      }
      while (v18);
    }
    else
    {
      v20 = v3;
      do
      {
        v19 = (_QWORD *)v20[2];
        v11 = *v19 == (_QWORD)v20;
        v20 = v19;
      }
      while (v11);
    }
    *(_QWORD *)(a1 + 80) = v19[5];
    *(_QWORD *)&v28 = "udif::details::UDIF_base::UDIF_base(UDIF_header &&)";
    *((_QWORD *)&v28 + 1) = 35;
    v29 = 0;
    di_log::logger<di_log::log_printer<638ul>>::logger(v30, &v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"UDIF header doesn't contain a valid sector count, using runs upper value: ", 74);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf((uint64_t)v30);
    MEMORY[0x2199A89AC](&v32);
    v10 = v45;
  }
  if (v10)
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v44);
  v21 = v43;
  if (v43)
  {
    v22 = (unint64_t *)&v43->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v40)
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v39);
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return a1;
}

void sub_212F9BE38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v10;

  std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::~pair(v8 - 168);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(v5, *(_QWORD **)(v1 + 112));
  v10 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v10)
    MEMORY[0x2199A8A18](v10, 0x1000C407784F2AFLL);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v3, *v6);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v2, *v7);
  _Unwind_Resume(a1);
}

const void **udif::details::UDIF_base::get_rsrc_iterators@<X0>(udif::details::UDIF_base *this@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *exception;
  const std::error_category *v16;
  _BYTE v17[8];
  std::__shared_weak_count *v18;
  const void *v19;
  char v20;
  _BYTE v21[8];
  std::__shared_weak_count *v22;
  const void *v23;
  char v24;
  const void **v25;
  std::__shared_weak_count *v26;
  const __CFDictionary *v27;

  udif::details::UDIF_base::get_resources(this, &v27);
  Count = CFDictionaryGetCount(v27);
  v4 = operator new[]();
  std::shared_ptr<__CFString const*>::shared_ptr[abi:ne180100]<__CFString const*,std::default_delete<__CFString const*[]>,void>(&v25, v4);
  if (!v25)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v16 = std::generic_category();
    exception[1] = 12;
    exception[2] = v16;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "UDIF: Can't get types array from UDIF";
  }
  CFDictionaryGetKeysAndValues(v27, v25, 0);
  udif::xml_rsrc_iterator::xml_rsrc_iterator((uint64_t)v21, &v25, (const void **)&v27, 0);
  udif::xml_rsrc_iterator::xml_rsrc_iterator((uint64_t)v17, &v25, (const void **)&v27, Count);
  std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::pair[abi:ne180100]<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator,0>(a2, (uint64_t)v21, (uint64_t)v17);
  if (v20)
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v19);
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v24)
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v23);
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&v27);
}

void sub_212F9C0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  udif::xml_rsrc_iterator::~xml_rsrc_iterator((const void **)va);
  udif::xml_rsrc_iterator::~xml_rsrc_iterator((const void **)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 - 40);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(v2 - 24));
  _Unwind_Resume(a1);
}

void udif::xml_rsrc_iterator::~xml_rsrc_iterator(const void **this)
{
  if (*((_BYTE *)this + 24))
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(this + 2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_QWORD *di_log::logger<di_log::log_printer<638ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<638ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF09B68;
  a1[45] = &unk_24CF09C68;
  a1[46] = &unk_24CF09C90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF09B68;
  a1[45] = &unk_24CF09BF0;
  a1[46] = &unk_24CF09C18;
  return a1;
}

void sub_212F9C1A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<638ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

const void *udif::details::UDIF_base::get_identifier(udif::details::UDIF_base *this)
{
  const void *Value;
  CFTypeID TypeID;
  const void *ValueAtIndex;
  CFTypeID v4;
  const void *v5;
  CFTypeID v6;
  const UInt8 *BytePtr;
  cf::CFUtilException *exception;
  cf::CFUtilException *v10;
  cf::CFUtilException *v11;
  cf::CFUtilException *v12;
  cf::CFUtilException *v13;
  cf::CFUtilException *v14;
  CFDictionaryRef theDict;

  udif::details::UDIF_base::get_resources(this, &theDict);
  Value = CFDictionaryGetValue(theDict, CFSTR("uuid"));
  TypeID = CFArrayGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      v10 = cf::CFUtilException::CFUtilException(exception);
    }
    if (CFArrayGetCount((CFArrayRef)Value) < 1)
      goto LABEL_10;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, 0);
    v4 = CFDictionaryGetTypeID();
    if (ValueAtIndex && CFGetTypeID(ValueAtIndex) != v4)
    {
      v11 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFGetTypeID(ValueAtIndex);
      v12 = cf::CFUtilException::CFUtilException(v11);
    }
    v5 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("Data"));
    v6 = CFDataGetTypeID();
    if (!v5)
    {
      Value = 0;
      goto LABEL_11;
    }
    if (CFGetTypeID(v5) != v6)
    {
      v13 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFGetTypeID(v5);
      v14 = cf::CFUtilException::CFUtilException(v13);
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)v5);
    if (BytePtr)
      Value = *(const void **)BytePtr;
    else
LABEL_10:
      Value = 0;
  }
LABEL_11:
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return Value;
}

void sub_212F9C3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a10);
  _Unwind_Resume(a1);
}

const void **udif::details::UDIF_base::get_resources@<X0>(udif::details::UDIF_base *this@<X0>, _QWORD *a2@<X8>)
{
  CFIndex v4;
  UInt8 *v5;
  const void *Value;
  CFTypeID TypeID;
  int v8;
  NSObject *DIOSLog;
  const char *v10;
  char *v11;
  NSObject *v12;
  const void **result;
  _QWORD *exception;
  const std::error_category *v15;
  cf::CFUtilException *v16;
  cf::CFUtilException *v17;
  CFDictionaryRef theDict;
  UInt8 *bytes;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  const void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  udif::details::UDIF_base::get_xml_data(this, &bytes);
  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 224);
  v5 = bytes;
  cf::deserialize_from_xml_plist(bytes, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, CFSTR("resource-fork"));
  TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v15 = std::generic_category();
    exception[1] = 22;
    exception[2] = v15;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "UDIF: Can't create dictionary resource fork";
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    v16 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    v17 = cf::CFUtilException::CFUtilException(v16);
  }
  if (DIDebugLogsEnabled())
  {
    v8 = *__error();
    if (DIForwardLogs())
    {
      DIOSLog = getDIOSLog();
      os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEBUG);
      *(_DWORD *)buf = 68158210;
      v21 = 39;
      v22 = 2080;
      v23 = "udif::details::UDIF_base::get_resources() const";
      v24 = 2114;
      v25 = Value;
      v10 = (const char *)_os_log_send_and_compose_impl();
      if (v10)
      {
        v11 = (char *)v10;
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v10);
        free(v11);
      }
    }
    else
    {
      v12 = getDIOSLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        v21 = 39;
        v22 = 2080;
        v23 = "udif::details::UDIF_base::get_resources() const";
        v24 = 2114;
        v25 = Value;
        _os_log_impl(&dword_212EB0000, v12, OS_LOG_TYPE_DEBUG, "%.*s: XML_RSRC_FORK: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v8;
  }
  CFRetain(Value);
  *a2 = Value;
  result = CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  if (v5)
    return (const void **)MEMORY[0x2199A8A00](v5, 0x1000C8077774924);
  return result;
}

void sub_212F9C6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  if (v5)
    MEMORY[0x2199A8A00](v5, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

udif::details::blocks *udif::details::blocks::blocks(udif::details::blocks *this, const char *a2)
{
  _QWORD *v4;
  _DWORD *v5;
  char *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[136];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 1) = 0u;
  v4 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 4) = 0xFFFFFFFE00000000;
  v5 = (_DWORD *)((char *)this + 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  v6 = (char *)this + 40;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  udif::checksum_type::checksum_type((udif::details::blocks *)((char *)this + 64));
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 50) = 0;
  v7 = *(_DWORD *)a2;
  LODWORD(v25) = 1752394093;
  smart_enums::validators::value<unsigned int>((uint64_t)"blocks_signature", v7, &v25, 1);
  *(_DWORD *)this = 1752394093;
  v8 = bswap32(*((_DWORD *)a2 + 1));
  LODWORD(v25) = 1;
  smart_enums::validators::value<unsigned int>((uint64_t)"version", v8, &v25, 1);
  *((_DWORD *)this + 1) = 1;
  *((_QWORD *)this + 1) = bswap64(*((_QWORD *)a2 + 1));
  *v4 = bswap64(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 3) = bswap64(*((_QWORD *)a2 + 3));
  *v5 = bswap32(*((_DWORD *)a2 + 8));
  LODWORD(v25) = *((_DWORD *)a2 + 9);
  udif::details::endian_reverse((unsigned int *)&v25, (unsigned int *)v24);
  *((_DWORD *)this + 9) = *(_DWORD *)v24;
  v9 = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v6 + 2) = *((_QWORD *)a2 + 7);
  *(_OWORD *)v6 = v9;
  udif::checksum_type::checksum_type((udif::checksum_type *)v24);
  v10 = *((_OWORD *)a2 + 11);
  *(_OWORD *)&v24[96] = *((_OWORD *)a2 + 10);
  *(_OWORD *)&v24[112] = v10;
  *(_QWORD *)&v24[128] = *((_QWORD *)a2 + 24);
  v11 = *((_OWORD *)a2 + 7);
  *(_OWORD *)&v24[32] = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v24[48] = v11;
  v12 = *((_OWORD *)a2 + 9);
  *(_OWORD *)&v24[64] = *((_OWORD *)a2 + 8);
  *(_OWORD *)&v24[80] = v12;
  v13 = *((_OWORD *)a2 + 5);
  *(_OWORD *)v24 = *((_OWORD *)a2 + 4);
  *(_OWORD *)&v24[16] = v13;
  v30 = *(_OWORD *)&v24[72];
  v31 = *(_OWORD *)&v24[88];
  v32 = *(_OWORD *)&v24[104];
  v33 = *(_OWORD *)&v24[120];
  v26 = *(_OWORD *)&v24[8];
  v27 = *(_OWORD *)&v24[24];
  v28 = *(_OWORD *)&v24[40];
  v29 = *(_OWORD *)&v24[56];
  v25 = *(_QWORD *)v24;
  udif::details::endian_reverse((uint64_t)&v25, (int *)&v15);
  *((_QWORD *)this + 8) = v15;
  *(_OWORD *)((char *)this + 136) = v20;
  *(_OWORD *)((char *)this + 152) = v21;
  *(_OWORD *)((char *)this + 168) = v22;
  *(_OWORD *)((char *)this + 184) = v23;
  *(_OWORD *)((char *)this + 72) = v16;
  *(_OWORD *)((char *)this + 88) = v17;
  *(_OWORD *)((char *)this + 104) = v18;
  *(_OWORD *)((char *)this + 120) = v19;
  *((_DWORD *)this + 50) = bswap32(*((_DWORD *)a2 + 50));
  return this;
}

void sub_212F9C978(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

udif::details::run_t *udif::details::run_t::run_t(udif::details::run_t *this, const char *a2)
{
  udif::run_type *v4;
  int v6;

  v4 = udif::run_type::run_type(this);
  *((_DWORD *)v4 + 9) = 0;
  *(_OWORD *)((char *)v4 + 20) = 0u;
  *(_OWORD *)((char *)v4 + 4) = 0u;
  udif::run_type::run_type((udif::run_type *)&v6, bswap32(*(_DWORD *)a2));
  *(_DWORD *)this = v6;
  *((_DWORD *)this + 1) = bswap32(*((_DWORD *)a2 + 1));
  *((_QWORD *)this + 1) = bswap64(*((_QWORD *)a2 + 1));
  *((_QWORD *)this + 2) = bswap64(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 3) = bswap64(*((_QWORD *)a2 + 3));
  *((_QWORD *)this + 4) = bswap64(*((_QWORD *)a2 + 4));
  return this;
}

const void **udif::details::create_data_wrap_dict@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X4>, CFDictionaryRef *a5@<X8>)
{
  const __CFAllocator *v9;
  const char *v10;
  CFStringRef v11;
  const char *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  CFIndex v16;
  CFStringRef v18;
  std::string v19;
  CFStringRef v20;
  std::string v21;
  CFTypeRef cf;
  CFStringRef v23;
  void *values[5];
  void *keys[2];
  __int128 v26;
  const __CFString *v27;
  _BYTE v28[48];
  void *__p;
  char v30;
  _QWORD v31[20];

  v31[19] = *MEMORY[0x24BDAC8D0];
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (*(char *)(a1 + 23) >= 0)
    v10 = (const char *)a1;
  else
    v10 = *(const char **)a1;
  v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v10, 0x8000100u);
  cf = 0;
  v23 = v11;
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const char *)a2;
    else
      v12 = *(const char **)a2;
    cf = CFStringCreateWithCString(v9, v12, 0x8000100u);
  }
  else
  {
    cf = &stru_24CF15F38;
  }
  keys[0] = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)keys);
  std::to_string(&v21, a3);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v21;
  else
    v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  v20 = CFStringCreateWithCString(v9, (const char *)v13, 0x600u);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)keys);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v26 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)&v26 + *(_QWORD *)(v26 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(values[0]) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, (char *)values);
  *(_QWORD *)&v28[*(_QWORD *)(v26 - 24)] = 4;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]((uint64_t)&v26 + 8, &v19);
  keys[0] = *(void **)MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)keys + *((_QWORD *)keys[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v26 = v14;
  *((_QWORD *)&v26 + 1) = MEMORY[0x24BEDB848] + 16;
  if (v30 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](v31);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v19;
  else
    v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
  v18 = CFStringCreateWithCString(v9, (const char *)v15, 0x600u);
  *(_OWORD *)keys = xmmword_24CF08E48;
  v26 = *(_OWORD *)off_24CF08E58;
  v27 = CFSTR("CFName");
  values[0] = a4;
  values[1] = (void *)v23;
  values[2] = (void *)v20;
  values[3] = (void *)v18;
  if (*(_BYTE *)(a2 + 24))
    v16 = 5;
  else
    v16 = 4;
  values[4] = (void *)cf;
  *a5 = CFDictionaryCreate(v9, (const void **)keys, (const void **)values, v16, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v23);
}

void sub_212F9CD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,const void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31)
{
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a31);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a25);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](a1 + 128);
  return a1;
}

_QWORD *udif::operator<<(_QWORD *a1, int *a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  int v26;

  v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"type: ", 6);
  v26 = *a2;
  v6 = udif::operator<<(v5, &v26);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" data: ", 7);
  v8 = *v7;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 8) |= 0x200u;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"/", 1);
  v11 = *v10;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) &= ~0x200u;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" logical: ", 10);
  v14 = *v13;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(v14 - 24) + 8) |= 0x200u;
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/", 1);
  v17 = *v16;
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v16 + *(_QWORD *)(v17 - 24) + 8) &= ~0x200u;
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" io: ", 5);
  v20 = *v19;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) |= 0x200u;
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)",", 1);
  v23 = *v22;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(v23 - 24) + 8) &= ~0x200u;
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/", 1);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v4;
  return a1;
}

{
  int v3;
  uint64_t i;
  int v5;
  char v7;

  v3 = *a2;
  if (!*a2)
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"none", 4);
  for (i = 0; i != 18; i += 6)
  {
    v5 = udif::header::header_flags::strings[i];
    if ((v5 & v3) != 0)
    {
      v3 &= ~v5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *(_QWORD *)&udif::header::header_flags::strings[i + 2], *(_QWORD *)&udif::header::header_flags::strings[i + 4]);
      if (v3)
      {
        v7 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v7, 1);
      }
    }
  }
  return a1;
}

uint64_t udif::xml_rsrc_iterator::get_type(udif::xml_rsrc_iterator *this)
{
  uint64_t result;
  void *exception;
  _QWORD v3[33];

  result = CFStringGetOSType(*(const __CFString **)(*(_QWORD *)this + 8 * *((_QWORD *)this + 4)));
  if (!(_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"UDIF: Failed converting type array string (", 43);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") to type", 9);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v3, 0x16u);
  }
  return result;
}

void sub_212F9D124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *udif::xml_rsrc_iterator::get_value(CFDictionaryRef *this)
{
  const void *result;
  DiskImagesRuntimeException *exception;
  void *v3;

  result = CFDictionaryGetValue(this[2], *((const void **)*this + (_QWORD)this[4]));
  if (!result)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF: Can't get resource array", 0x16u);
  }
  return result;
}

BOOL udif::xml_rsrc_iterator::operator==(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 24) != 0) == (v3 != 0))
      return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
    return 0;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

uint64_t *UDIF_header::UDIF_header(uint64_t *a1, Backend **a2)
{
  Backend *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  udif::header *v10;
  uint64_t v11;
  unint64_t v13;
  _QWORD *exception;
  _QWORD *v15;
  const std::error_category *v16;
  __int128 v17;
  int v18;
  _QWORD v19[45];
  uint64_t v20;
  uint64_t v21;

  *a1 = 0;
  a1[1] = (uint64_t)*a2;
  v4 = a2[1];
  a1[2] = (uint64_t)v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new[]();
  *(_DWORD *)(v7 + 496) = 0;
  *(_OWORD *)(v7 + 464) = 0u;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 288) = 0u;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)v7 = 0u;
  v8 = (*(uint64_t (**)(Backend *))(*(_QWORD *)*a2 + 40))(*a2);
  if (v8 <= 0x1FF)
  {
    v13 = v8;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24CF05670;
    exception[1] = "UDIF_header";
    exception[2] = 8;
    exception[3] = v13;
  }
  v9 = Backend::read(*a2, (char *)v7, 500, v8 - 512);
  if ((v9 & 0x80000000) != 0)
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    *v15 = &off_24CF07908;
    v16 = std::generic_category();
    v15[1] = v9;
    v15[2] = v16;
    *((_BYTE *)v15 + 24) = 0;
    *((_BYTE *)v15 + 48) = 0;
    v15[7] = "UDIF: Can't read UDIF trailer";
  }
  v10 = (udif::header *)operator new();
  udif::header::header(v10, (const char *)v7);
  v11 = *a1;
  *a1 = (uint64_t)v10;
  if (v11)
    MEMORY[0x2199A8A18](v11, 0x1000C407784F2AFLL);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v17 = "UDIF_header::UDIF_header(const std::shared_ptr<Backend> &)";
    *((_QWORD *)&v17 + 1) = 24;
    v18 = 2;
    di_log::logger<di_log::log_printer<898ul>>::logger(v19, &v17);
    udif::operator<<(&v20, *a1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x2199A89AC](&v21);
  }
  MEMORY[0x2199A8A00](v7, 0x1000C8077774924);
  return a1;
}

void sub_212F9D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<898ul>>::~logger((uint64_t)va);
  MEMORY[0x2199A8A00](v6, 0x1000C8077774924);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v5);
  v8 = *v4;
  *v4 = 0;
  if (v8)
    MEMORY[0x2199A8A18](v8, 0x1000C407784F2AFLL);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<898ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<898ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF09D88;
  a1[45] = &unk_24CF09E88;
  a1[46] = &unk_24CF09EB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF09D88;
  a1[45] = &unk_24CF09E10;
  a1[46] = &unk_24CF09E38;
  return a1;
}

void sub_212F9D584(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<898ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *UDIF_header::UDIF_header(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = *a2;
  *a2 = 0;
  v5 = *a3;
  v4 = a3[1];
  *result = v3;
  result[1] = v5;
  result[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<85ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<85ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<85ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF09030;
  di_log::logger_buf<di_log::log_printer<85ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<85ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F9D9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<85ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 85;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 85;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

udif::checksum_type *udif::checksum_type::checksum_type(udif::checksum_type *this, int a2)
{
  _OWORD v4[2];
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = a2;
  v4[0] = xmmword_212FF3DB0;
  v4[1] = xmmword_212FF4370;
  v5 = 0x900000008;
  v6 = 10;
  smart_enums::validators::value<unsigned int>((uint64_t)"checksum_type", a2, v4, 11);
  return this;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<udif::details::checksum::checksum(checksum::Any<locks::None,checksum::None,checksum::CRC32> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>@<X0>(uint64_t a1@<X8>)
{
  return udif::details::checksum::checksum<locks::None,checksum::None<locks::None>>(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<udif::details::checksum::checksum(checksum::Any<locks::None,checksum::None,checksum::CRC32> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return udif::details::checksum::checksum<locks::None,checksum::CRC32<locks::None>>(a2, (uint64_t)a1, a1);
}

uint64_t udif::details::checksum::checksum<locks::None,checksum::None<locks::None>>(uint64_t a1)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD v5[33];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  udif::checksum_type::checksum_type((udif::checksum_type *)&v3, 0);
  *(_QWORD *)a1 = v3;
  v4 = 0;
  udif::details::checksum::_checksum::set_len(v5, &v4);
  *(_DWORD *)(a1 + 4) = v5[0];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

uint64_t udif::details::checksum::checksum<locks::None,checksum::CRC32<locks::None>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  unsigned int v7;
  int v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  udif::checksum_type::checksum_type((udif::checksum_type *)&v6, 2);
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(a3) = *a3;
  v7 = 32;
  udif::details::checksum::_checksum::set_len(&v8, &v7);
  *(_DWORD *)v9 = (_DWORD)a3;
  memset(&v9[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v9[64];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v9[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v9[96];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v9[112];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v9[16];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v9[32];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v9[48];
  return a1;
}

unsigned int *udif::details::descriptor_special::descriptor_special(unsigned int *this, unsigned int a2)
{
  _QWORD *exception;

  *this = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_24CF075C0;
    exception[1] = "descriptor_special";
    *((_DWORD *)exception + 8) = a2;
  }
  return this;
}

udif::run_type *udif::run_type::run_type(udif::run_type *this, int a2)
{
  _OWORD v4[3];
  unint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = a2;
  v4[0] = xmmword_212FF4380;
  v4[1] = xmmword_212FF4390;
  v4[2] = xmmword_212FF43A0;
  v5 = 0x8000000880000007;
  v6 = -1;
  smart_enums::validators::value<unsigned int>((uint64_t)"run_type", a2, v4, 15);
  return this;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<417ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<417ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<417ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF09260;
  di_log::logger_buf<di_log::log_printer<417ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<417ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F9E33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<417ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 417;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 417;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<458ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<458ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<458ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF09480;
  di_log::logger_buf<di_log::log_printer<458ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<458ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F9E928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<458ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 458;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 458;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<500ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<500ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<500ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF096A0;
  di_log::logger_buf<di_log::log_printer<500ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<500ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F9EF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<500ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 500;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 500;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<601ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<601ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<601ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF098C0;
  di_log::logger_buf<di_log::log_printer<601ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<601ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F9F500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<601ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 601;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 601;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<603ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<603ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<603ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF09AE0;
  di_log::logger_buf<di_log::log_printer<603ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<603ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F9FAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<603ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 603;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 603;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<638ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<638ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<638ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF09D00;
  di_log::logger_buf<di_log::log_printer<638ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<638ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA00D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<638ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 638;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 638;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t udif::xml_rsrc_iterator::xml_rsrc_iterator(uint64_t a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const void *v9;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if (v9)
    CFRetain(v9);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = a4;
  return a1;
}

void sub_212FA0370(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::pair[abi:ne180100]<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(result + 40) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 56) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(result + 64) = 1;
  }
  *(_QWORD *)(result + 72) = *(_QWORD *)(a3 + 32);
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<898ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<898ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<898ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF09F20;
  di_log::logger_buf<di_log::log_printer<898ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<898ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA07B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<898ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 898;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 898;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_DWORD *udif::header::header_flags::header_flags(_DWORD *this, int a2)
{
  uint64_t v2;
  int v3;
  _QWORD *exception;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = 0;
  v7 = *MEMORY[0x24BDAC8D0];
  *this = a2;
  v5 = 0x200000001;
  v6 = 4;
  do
  {
    a2 &= ~*(_DWORD *)((char *)&v5 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (a2)
  {
    v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_24CEEDAA0;
    exception[1] = "header_flags";
    *((_DWORD *)exception + 8) = v3;
  }
  return this;
}

udif::checksum_type *udif::checksum_type::checksum_type(udif::checksum_type *this)
{
  _OWORD v3[2];
  uint64_t v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = 0;
  v3[0] = xmmword_212FF3DB0;
  v3[1] = xmmword_212FF4370;
  v4 = 0x900000008;
  v5 = 10;
  smart_enums::validators::value<unsigned int>((uint64_t)"checksum_type", 0, v3, 11);
  return this;
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF09030;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA0BBC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *print_buffer(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  char v14;
  char v15;

  v4 = a1 + 1;
  v5 = *(_QWORD *)(*a1 - 24);
  v6 = *(_DWORD *)((char *)a1 + v5 + 8);
  if (a3 == 1)
  {
    v11 = *(_DWORD *)((char *)a1 + v5 + 8);
  }
  else
  {
    v8 = a3 - 1;
    do
    {
      *(_DWORD *)((char *)v4 + *(_QWORD *)(*a1 - 24)) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*a1 - 24)) & 0xFFFFFFB5 | 8;
      v15 = 48;
      v9 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, &v15);
      *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 2;
      ++a2;
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
      --v8;
    }
    while (v8);
    v5 = *(_QWORD *)(*a1 - 24);
    v11 = *(_DWORD *)((char *)a1 + v5 + 8);
  }
  *(_DWORD *)((char *)a1 + v5 + 8) = v11 & 0xFFFFFFB5 | 8;
  v14 = 48;
  v12 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, &v14);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 2;
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v6;
  return a1;
}

uint64_t std::map<udif::run_type,CompressedBackend::algo_t>::map[abi:ne180100](uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__emplace_hint_unique_key_args<udif::run_type,std::pair<udif::run_type const,CompressedBackend::algo_t> const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_212FA0F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__emplace_hint_unique_key_args<udif::run_type,std::pair<udif::run_type const,CompressedBackend::algo_t> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__find_equal<udif::run_type>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__find_equal<udif::run_type>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF09260;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA1274(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::find<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = (*(_BYTE *)(a2 + 16) & 2) != 0 ? *(_QWORD *)a2 : *(_QWORD *)a2 + 1;
  v6 = v2;
  do
  {
    v7 = (*(_BYTE *)(v3 + 48) & 1) + *(_QWORD *)(v3 + 40) - 1;
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v2)
    return v2;
  v10 = *(_QWORD *)(v6 + 32);
  if ((*(_BYTE *)(v6 + 48) & 2) == 0)
    ++v10;
  if ((unint64_t)(*(_BYTE *)(a2 + 16) & 1) + *(_QWORD *)(a2 + 8) - 1 < v10)
    return v2;
  return v6;
}

uint64_t *boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_insert(uint64_t **a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t *result;
  char v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((_QWORD *)&v14 + 1) < (unint64_t)v14)
        return (uint64_t *)(a1 + 1);
    }
    else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }
  else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((_QWORD *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }
  v5 = (uint64_t *)(a2 + 24);
  if (boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<std::optional<udif::details::block_info>>,true>::is_absorbable(a2 + 24))
    return (uint64_t *)(a1 + 1);
  result = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>(a1, a2, a2);
  if ((v7 & 1) == 0)
  {
    v8 = (uint64_t *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    v9 = (uint64_t **)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    v10 = *v9;
    if (*v9)
    {
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = v9[2];
        v12 = *v11 == (_QWORD)v9;
        v9 = (uint64_t **)v11;
      }
      while (v12);
    }
    v13 = v11;
    v16 = v8;
    boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(a1, &v14, v5, &v16, &v13);
    return v16;
  }
  return result;
}

BOOL boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<std::optional<udif::details::block_info>>,true>::is_absorbable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v2) = 0;
  v12 = 0;
  if (byte_254B6CEC4)
  {
    v2 = boost::icl::identity_element<std::optional<udif::details::block_info>>::value(void)::_value;
    v3 = dword_254B6CE40;
    v8 = unk_254B6CE84;
    v9 = unk_254B6CE94;
    v10 = unk_254B6CEA4;
    v11 = unk_254B6CEB4;
    v4 = *(_OWORD *)algn_254B6CE44;
    v5 = unk_254B6CE54;
    v6 = unk_254B6CE64;
    v7 = unk_254B6CE74;
    v12 = 1;
  }
  return std::operator==[abi:ne180100]<udif::details::block_info,udif::details::block_info>(a1, (uint64_t)&v2);
}

uint64_t boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(uint64_t **a1, __int128 *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v8 = *a5;
  v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    v11 = *a5;
    do
    {
      v10 = (uint64_t *)v11[2];
      v12 = *v10 == (_QWORD)v11;
      v11 = v10;
    }
    while (!v12);
  }
  v13 = *a4;
  if (*a1 == *a4)
  {
    v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        v15 = v14;
        v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      v16 = *a4;
      do
      {
        v15 = (uint64_t *)v16[2];
        v12 = *v15 == (_QWORD)v16;
        v16 = v15;
      }
      while (v12);
    }
  }
  v39 = *a2;
  v40 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v37 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *((_QWORD *)&v37 + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  v38 = 2;
  v35 = *((_OWORD *)v8 + 2);
  v36 = v8[6];
  if (v13 != v10)
  {
    v17 = (__int128 *)((char *)a3 + 12);
    do
    {
      v37 = *((_OWORD *)v13 + 2);
      v38 = *((_BYTE *)v13 + 48);
      v33 = v39;
      v34 = v40;
      boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v41);
      if ((_BYTE)v42)
      {
        if (v42 == 3)
        {
          if (*((_QWORD *)&v41 + 1) >= (unint64_t)v41)
            goto LABEL_24;
        }
        else if ((unint64_t)v41 < *((_QWORD *)&v41 + 1))
        {
          goto LABEL_24;
        }
      }
      else if ((unint64_t)v41 < *((_QWORD *)&v41 + 1) && (unint64_t)(v41 + 1) < *((_QWORD *)&v41 + 1))
      {
LABEL_24:
        LOBYTE(v43) = 0;
        v53 = 0;
        if (*((_BYTE *)a3 + 140))
        {
          v43 = *a3;
          v44 = *((_DWORD *)a3 + 2);
          v18 = *(_OWORD *)((char *)a3 + 92);
          v49 = *(_OWORD *)((char *)a3 + 76);
          v50 = v18;
          v19 = *(_OWORD *)((char *)a3 + 124);
          v51 = *(_OWORD *)((char *)a3 + 108);
          v52 = v19;
          v20 = *(_OWORD *)((char *)a3 + 28);
          v45 = *v17;
          v46 = v20;
          v21 = *(_OWORD *)((char *)a3 + 60);
          v47 = *(_OWORD *)((char *)a3 + 44);
          v48 = v21;
          v53 = 1;
        }
        *a4 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,std::optional<udif::details::block_info>>>(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
      }
      v31 = v39;
      v32 = v40;
      boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v31, (uint64_t)&v37, (uint64_t)&v41);
      v39 = v41;
      LOBYTE(v40) = v42;
      v15 = *a4;
      v22 = (uint64_t *)(*a4)[1];
      v23 = *a4;
      if (v22)
      {
        do
        {
          v13 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v23[2];
          v12 = *v13 == (_QWORD)v23;
          v23 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
    }
    while (v13 != v10);
  }
  v27 = v39;
  v28 = v40;
  result = boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v27, (uint64_t)&v35, (uint64_t)&v29);
  if (!(_BYTE)v30)
  {
    v25 = *((_QWORD *)&v29 + 1);
    if ((unint64_t)v29 >= *((_QWORD *)&v29 + 1))
      goto LABEL_44;
    v26 = v29 + 1;
    goto LABEL_40;
  }
  if (v30 != 3)
  {
    v25 = *((_QWORD *)&v29 + 1);
    v26 = v29;
LABEL_40:
    if (v26 >= v25)
      goto LABEL_44;
    goto LABEL_41;
  }
  if (*((_QWORD *)&v29 + 1) < (unint64_t)v29)
    goto LABEL_44;
LABEL_41:
  v41 = v29;
  v42 = v30;
  LOBYTE(v43) = 0;
  v53 = 0;
  if (*((_BYTE *)a3 + 140))
  {
    v43 = *a3;
    v44 = *((_DWORD *)a3 + 2);
    v49 = *(_OWORD *)((char *)a3 + 76);
    v50 = *(_OWORD *)((char *)a3 + 92);
    v51 = *(_OWORD *)((char *)a3 + 108);
    v52 = *(_OWORD *)((char *)a3 + 124);
    v45 = *(_OWORD *)((char *)a3 + 12);
    v46 = *(_OWORD *)((char *)a3 + 28);
    v47 = *(_OWORD *)((char *)a3 + 44);
    v48 = *(_OWORD *)((char *)a3 + 60);
    v53 = 1;
  }
  result = (uint64_t)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,std::optional<udif::details::block_info>>>(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
  v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

BOOL std::operator==[abi:ne180100]<udif::details::block_info,udif::details::block_info>(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 140))
    v2 = *(_BYTE *)(a2 + 140) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 140) != 0) == (*(_BYTE *)(a2 + 140) != 0);
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return udif::details::checksum::operator==((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  return 0;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__construct_node<std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__construct_node<std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *result;

  v5 = a1 + 8;
  result = operator new(0xC8uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((_QWORD *)result + 6) = *(_QWORD *)(a2 + 16);
  *((_BYTE *)result + 56) = 0;
  *((_BYTE *)result + 196) = 0;
  if (*(_BYTE *)(a2 + 164))
  {
    *((_QWORD *)result + 7) = *(_QWORD *)(a2 + 24);
    *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)((char *)result + 132) = *(_OWORD *)(a2 + 100);
    *(_OWORD *)((char *)result + 148) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)((char *)result + 164) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)((char *)result + 180) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)((char *)result + 68) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)result + 84) = *(_OWORD *)(a2 + 52);
    *(_OWORD *)((char *)result + 100) = *(_OWORD *)(a2 + 68);
    *(_OWORD *)((char *)result + 116) = *(_OWORD *)(a2 + 84);
    *((_BYTE *)result + 196) = 1;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,std::optional<udif::details::block_info>>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__construct_node<std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF09480;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA1AD8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t **boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_insert(uint64_t **a1, uint64_t a2)
{
  int *v5;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((_QWORD *)&v14 + 1) < (unint64_t)v14)
        return a1 + 1;
    }
    else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1))
    {
      return a1 + 1;
    }
  }
  else if ((unint64_t)v14 >= *((_QWORD *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((_QWORD *)&v14 + 1))
  {
    return a1 + 1;
  }
  v5 = (int *)(a2 + 24);
  if (boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<udif::details::run_info>,true>::is_absorbable(a2 + 24))
    return a1 + 1;
  v7 = (uint64_t *)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info> const&>(a1, a2, a2);
  if ((v8 & 1) != 0)
  {
    v17 = v7;
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, &v17);
    return boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v17);
  }
  else
  {
    v9 = (uint64_t *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    v10 = (uint64_t **)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    v11 = *v10;
    if (*v10)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = v10[2];
        v13 = *v12 == (_QWORD)v10;
        v10 = (uint64_t **)v12;
      }
      while (v13);
    }
    v16 = v9;
    v17 = v12;
    boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(a1, &v14, v5, &v16, &v17);
    return (uint64_t **)v16;
  }
}

BOOL boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<udif::details::run_info>,true>::is_absorbable(uint64_t a1)
{
  unsigned __int8 v2;

  if ((v2 & 1) == 0
  {
    udif::run_type::run_type((udif::run_type *)&boost::icl::identity_element<udif::details::run_info>::value(void)::_value, 2);
    qword_254B6CED0 = 0;
    qword_254B6CED8 = 0;
  }
  return *(_DWORD *)a1 == boost::icl::identity_element<udif::details::run_info>::value(void)::_value
      && *(_QWORD *)(a1 + 8) == qword_254B6CED0
      && *(_QWORD *)(a1 + 16) == qword_254B6CED8;
}

void sub_212FA1CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(uint64_t **a1, __int128 *a2, int *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  uint64_t v40;

  v8 = *a5;
  v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    v11 = *a5;
    do
    {
      v10 = (uint64_t *)v11[2];
      v12 = *v10 == (_QWORD)v11;
      v11 = v10;
    }
    while (!v12);
  }
  v13 = *a4;
  if (*a1 == *a4)
  {
    v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        v15 = v14;
        v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      v16 = *a4;
      do
      {
        v15 = (uint64_t *)v16[2];
        v12 = *v15 == (_QWORD)v16;
        v16 = v15;
      }
      while (v12);
    }
  }
  v39 = *a2;
  v40 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v37 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *((_QWORD *)&v37 + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  v38 = 2;
  v35 = *((_OWORD *)v8 + 2);
  v36 = v8[6];
  if (v13 != v10)
  {
    v17 = (__int128 *)(a3 + 2);
    while (1)
    {
      v37 = *((_OWORD *)v13 + 2);
      v38 = *((_BYTE *)v13 + 48);
      v33 = v39;
      v34 = v40;
      boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v29);
      if ((_BYTE)v30)
        break;
      if ((unint64_t)v29 < *((_QWORD *)&v29 + 1) && (unint64_t)(v29 + 1) < *((_QWORD *)&v29 + 1))
        goto LABEL_22;
LABEL_23:
      v27 = v39;
      v28 = v40;
      boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v27, (uint64_t)&v37, (uint64_t)&v29);
      v39 = v29;
      LOBYTE(v40) = v30;
      v15 = *a4;
      v18 = (uint64_t *)(*a4)[1];
      v19 = *a4;
      if (v18)
      {
        do
        {
          v13 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v19[2];
          v12 = *v13 == (_QWORD)v19;
          v19 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
      if (v13 == v10)
        goto LABEL_32;
    }
    if (v30 == 3)
    {
      if (*((_QWORD *)&v29 + 1) < (unint64_t)v29)
        goto LABEL_23;
    }
    else if ((unint64_t)v29 >= *((_QWORD *)&v29 + 1))
    {
      goto LABEL_23;
    }
LABEL_22:
    v31 = *a3;
    v32 = *v17;
    *(_QWORD *)&v29 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t **)&v29);
    *a4 = (uint64_t *)boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v29);
    goto LABEL_23;
  }
LABEL_32:
  v23 = v39;
  v24 = v40;
  result = boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      if (*((_QWORD *)&v25 + 1) < (unint64_t)v25)
        goto LABEL_41;
      goto LABEL_40;
    }
    v21 = *((_QWORD *)&v25 + 1);
    v22 = v25;
  }
  else
  {
    v21 = *((_QWORD *)&v25 + 1);
    if ((unint64_t)v25 >= *((_QWORD *)&v25 + 1))
      goto LABEL_41;
    v22 = v25 + 1;
  }
  if (v22 < v21)
  {
LABEL_40:
    v29 = v25;
    v30 = v26;
    v31 = *a3;
    v32 = *(_OWORD *)(a3 + 2);
    *(_QWORD *)&v29 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t **)&v29);
    result = (uint64_t)boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v29);
    v15 = (uint64_t *)result;
  }
LABEL_41:
  *a4 = v15;
  return result;
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    v6[4] = *(_OWORD *)(a3 + 32);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v2 = *a2;
  if (*a2 == *a1)
    return *a1;
  v4 = *v2;
  if (*v2)
  {
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    v6 = (uint64_t)*a2;
    do
    {
      v5 = *(_QWORD *)(v6 + 16);
      v7 = *(_QWORD *)v5 == v6;
      v6 = v5;
    }
    while (v7);
  }
  v8 = v2[4];
  if ((v2[6] & 2) == 0)
    ++v8;
  if (v8 == (*(_BYTE *)(v5 + 48) & 1) + *(_QWORD *)(v5 + 40)
    && *(_DWORD *)(v5 + 56) == *((_DWORD *)v2 + 14)
    && *(_QWORD *)(v5 + 64) == v2[8]
    && *(_QWORD *)(v5 + 72) == v2[9])
  {
    v14 = *((_OWORD *)v2 + 2);
    v15 = v2[6];
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v2);
    operator delete(v2);
    v10 = *(_OWORD *)(v5 + 32);
    v11 = *(_QWORD *)(v5 + 48);
    boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(_BYTE *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t ***a2)
{
  uint64_t **v3;
  uint64_t **result;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  char v16;
  __int128 v17;
  uint64_t *v18;

  v3 = a1 + 1;
  result = *a2;
  if (*a2 == v3)
    return v3;
  v6 = result[1];
  if (v6)
  {
    do
    {
      v7 = (uint64_t **)v6;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    v8 = *a2;
    do
    {
      v7 = (uint64_t **)v8[2];
      v9 = *v7 == (uint64_t *)v8;
      v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0)
      v10 = (uint64_t *)((char *)v10 + 1);
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1))
      && *((_DWORD *)result + 14) == *((_DWORD *)v7 + 14)
      && result[8] == v7[8]
      && result[9] == v7[9])
    {
      v17 = *((_OWORD *)v7 + 2);
      v18 = v7[6];
      std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, (uint64_t *)v7);
      operator delete(v7);
      v11 = *a2;
      v13 = *((_OWORD *)*a2 + 2);
      v14 = v11[6];
      boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((_BYTE *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF096A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA2334(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::map[abi:ne180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_212FA23B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, unint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(v12 + 4, a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a3, a5);
  }
  if (boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a5, v15 + 4))return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 57)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(v11 << 6);
  boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0x1FFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x1FFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0x1FFFFFFFFFFFFFFLL)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;

  v10 = (_QWORD *)*a1;
  v11 = *a1 + (a1[1] << 6);
  v12 = a2;
  if (*a1 != a4)
  {
    v13 = (_QWORD *)*a1;
    v12 = a2;
    do
    {
      *(_DWORD *)v12 = *(_DWORD *)v13;
      v14 = *(_OWORD *)(v13 + 1);
      v15 = *(_OWORD *)(v13 + 3);
      v16 = *(_OWORD *)(v13 + 5);
      *(_QWORD *)(v12 + 56) = v13[7];
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + 8) = v14;
      v12 += 64;
      v13 += 8;
    }
    while (v13 != (_QWORD *)a4);
  }
  *(_DWORD *)v12 = *(_DWORD *)a6;
  v17 = *(_OWORD *)(a6 + 8);
  v18 = *(_OWORD *)(a6 + 24);
  v19 = *(_OWORD *)(a6 + 40);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(a6 + 56);
  *(_OWORD *)(v12 + 40) = v19;
  *(_OWORD *)(v12 + 24) = v18;
  *(_OWORD *)(v12 + 8) = v17;
  if (v11 != a4)
  {
    v20 = v12 + (a5 << 6);
    do
    {
      *(_DWORD *)v20 = *(_DWORD *)a4;
      v21 = *(_OWORD *)(a4 + 8);
      v22 = *(_OWORD *)(a4 + 24);
      v23 = *(_OWORD *)(a4 + 40);
      *(_QWORD *)(v20 + 56) = *(_QWORD *)(a4 + 56);
      *(_OWORD *)(v20 + 40) = v23;
      *(_OWORD *)(v20 + 24) = v22;
      *(_OWORD *)(v20 + 8) = v21;
      a4 += 64;
      v20 += 64;
    }
    while (a4 != v11);
  }
  if (v10)
  {
    v24 = (_QWORD *)*a1;
    if (a1 + 3 != (_QWORD *)*a1)
      operator delete(v24);
  }
  v25 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v25;
  a1[2] = a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF098C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA2878(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t checksum::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a1;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24CF0A080[v2])(&v5, a2 + 4);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN8checksumlsERNS_13basic_ostreamIcNS_11char_traitsIcEEEERKNS8_3AnyIN5locks4NoneEJNS8_4NoneENS8_5CRC32EEEEEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJNSH_ISG_EENSI_ISG_EEEEEEEEDcSM_DpT0_(_QWORD ***a1)
{
  return checksum::operator<<(**a1);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN8checksumlsERNS_13basic_ostreamIcNS_11char_traitsIcEEEERKNS8_3AnyIN5locks4NoneEJNS8_4NoneENS8_5CRC32EEEEEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJNSH_ISG_EENSI_ISG_EEEEEEEEDcSM_DpT0_(_QWORD ***a1, int *a2)
{
  return checksum::operator<<(**a1, a2);
}

_QWORD *checksum::operator<<(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"none {", 6);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"[empty]", 7);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"}", 1);
}

_QWORD *checksum::operator<<(_QWORD *a1, int *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v6;

  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"crc32 {", 7);
  v6 = *a2;
  v4 = print_buffer(v3, (uint64_t)&v6, 4);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"}", 1);
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF09AE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA29E8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF09D00;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA2A64(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<__CFString const*>::shared_ptr[abi:ne180100]<__CFString const*,std::default_delete<__CFString const*[]>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CF0A0A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212FA2ACC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x2199A8A00](v1, 0x60C8044C4A2DFLL);
  __cxa_rethrow();
}

void sub_212FA2AF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<__CFString const* *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<__CFString const* *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x2199A8A00);
  return result;
}

uint64_t std::__shared_ptr_pointer<__CFString const* *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

udif::run_type *udif::run_type::run_type(udif::run_type *this)
{
  _OWORD v3[3];
  unint64_t v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = 0;
  v3[0] = xmmword_212FF4380;
  v3[1] = xmmword_212FF4390;
  v3[2] = xmmword_212FF43A0;
  v4 = 0x8000000880000007;
  v5 = -1;
  smart_enums::validators::value<unsigned int>((uint64_t)"run_type", 0, v3, 15);
  return this;
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF09F20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA2C9C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::mapped_blocks_t::mapped_blocks_t(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, off_t file_size_from, char a6)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  char v17;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = (_QWORD *)operator new();
  lock_free::bitmap_dynamically_allocated_t::bitmap_dynamically_allocated_t(v12, v11 >> 12, 0);
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if ((sparse_bundles::mapped_blocks_t::load_file((sparse_bundles::mapped_blocks_t *)a1) & 1) == 0)
  {
    if (!a6)
    {
      v14 = (***(uint64_t (****)(_QWORD))(a2 + 8))(*(_QWORD *)(a2 + 8));
      sparse_bundles::band_to_filename(__p);
      file_size_from = FileLocal::get_file_size_from(v14, (uint64_t)__p);
      if (v17 < 0)
      {
        operator delete(__p[0]);
        if (!file_size_from)
          return a1;
        goto LABEL_7;
      }
    }
    if (file_size_from)
LABEL_7:
      sparse_bundles::mapped_blocks_t::map_range((lock_free::bitmap_t **)a1, 0, file_size_from);
  }
  return a1;
}

void sub_212FA2DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sparse_bundles::mapped_blocks_t::load_file(sparse_bundles::mapped_blocks_t *this)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  void *exception;
  __int128 v20;
  int v21;
  _QWORD v22[45];
  uint64_t v23;
  _BYTE v24[152];
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;

  v2 = (unint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 7) >> 3;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v4 = v3 == v2 || v3 == v2 + 16;
  v5 = v4;
  if (v4)
  {
    v6 = v3 - v2;
    v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v8 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v26 = v2;
    v27 = v6;
    v28 = v2;
    v29 = 0;
    v11 = (*(uint64_t (**)(_QWORD, __int128 *))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2), &v25);
    if (v2 != v11)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Failed reading ", 15);
      sparse_bundles::operator<<(v22);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v22, v11);
    }
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v20 = "sparse_bundles::mapped_blocks_t::load_file()";
      *((_QWORD *)&v20 + 1) = 42;
      v21 = 2;
      di_log::logger<di_log::log_printer<89ul>>::logger(v22, &v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Found a valid file for ", 23);
      sparse_bundles::operator<<(&v23);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf((uint64_t)v22);
      MEMORY[0x2199A89AC](v24);
    }
    *((_BYTE *)this + 24) = 0;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else if (v3)
  {
    *(_QWORD *)&v25 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((_QWORD *)&v25 + 1) = 42;
    LODWORD(v26) = 16;
    di_log::logger<di_log::log_printer<93ul>>::logger(v22, &v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"invalid file size for ", 22);
    sparse_bundles::operator<<(&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)", current is ", 13);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)" while expected is ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)", truncating", 12);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf((uint64_t)v22);
    MEMORY[0x2199A89AC](v24);
    v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 0);
    if (v15)
    {
      v16 = v15;
      v17 = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Failed truncating ", 18);
      sparse_bundles::operator<<(v22);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)v17, (uint64_t)v22, v16);
    }
  }
  else if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v25 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((_QWORD *)&v25 + 1) = 42;
    LODWORD(v26) = 2;
    di_log::logger<di_log::log_printer<99ul>>::logger(v22, &v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"file of ", 8);
    sparse_bundles::operator<<(&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)" was just created (truncated)", 29);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf((uint64_t)v22);
    MEMORY[0x2199A89AC](v24);
  }
  return v5;
}

void sub_212FA31FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::mapped_blocks_t::map_range(lock_free::bitmap_t **this, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;

  v6 = a2 + a3 - 1;
  result = DIDebugLogsEnabled();
  if ((_DWORD)result)
  {
    *(_QWORD *)&v10 = "sparse_bundles::mapped_blocks_t::map_range(uint64_t, uint64_t)";
    *((_QWORD *)&v10 + 1) = 42;
    v11 = 2;
    di_log::logger<di_log::log_printer<150ul>>::logger(v12, &v10);
    sparse_bundles::operator<<(&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" - map_range: [", 15);
    v8 = v13;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v13 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)&v13 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"-", 1);
    std::ostream::operator<<();
    v9 = v13;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v13 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v13 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)&v13 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"]", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf((uint64_t)v12);
    result = MEMORY[0x2199A89AC](&v14);
  }
  if (a3)
  {
    result = lock_free::bitmap_t::update_bits(this[1], a2 >> 12, v6 >> 12, 1);
    if ((_DWORD)result)
      *((_BYTE *)this + 24) = 1;
  }
  return result;
}

void sub_212FA342C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<150ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void sparse_bundles::mapped_blocks_t::open_mapped_file(_QWORD *a1@<X0>, int a2@<W2>, FileLocal **a3@<X8>)
{
  int v5;
  FileLocal *v6;
  int v7;
  void *__p[2];
  char v9;

  v5 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
  sparse_bundles::band_to_filename(__p);
  v6 = (FileLocal *)operator new();
  v7 = FileDescriptorWrapper::open_from(v5, (uint64_t)__p, a2);
  FileLocal::FileLocal(v6, v7, (a2 & 3) != 0, 0);
  *a3 = v6;
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_212FA34EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sparse_bundles::mapped_blocks_t::mapped_blocks_t(uint64_t a1, uint64_t a2, uint64_t a3, off_t a4, char a5)
{
  FileLocal *v10;
  FileLocal *v12;

  sparse_bundles::mapped_blocks_t::open_mapped_file((_QWORD *)(a2 + 16), 514, &v12);
  sparse_bundles::mapped_blocks_t::mapped_blocks_t(a1, a2, a3, (uint64_t *)&v12, a4, a5);
  v10 = v12;
  v12 = 0;
  if (v10)
    (*(void (**)(FileLocal *))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_212FA35B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sparse_bundles::mapped_blocks_t::mapped_blocks_t(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  FileLocal *v7;
  FileLocal *v9;

  sparse_bundles::mapped_blocks_t::open_mapped_file(a4, 0, &v9);
  sparse_bundles::mapped_blocks_t::mapped_blocks_t(a1, a2, a3, (uint64_t *)&v9, 0, 0);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(FileLocal *))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_212FA365C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<89ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<89ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0A108;
  a1[45] = &unk_24CF0A208;
  a1[46] = &unk_24CF0A230;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0A108;
  a1[45] = &unk_24CF0A190;
  a1[46] = &unk_24CF0A1B8;
  return a1;
}

void sub_212FA3704(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<89ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<93ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<93ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0A328;
  a1[45] = &unk_24CF0A428;
  a1[46] = &unk_24CF0A450;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0A328;
  a1[45] = &unk_24CF0A3B0;
  a1[46] = &unk_24CF0A3D8;
  return a1;
}

void sub_212FA37EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<93ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<99ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<99ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0A548;
  a1[45] = &unk_24CF0A648;
  a1[46] = &unk_24CF0A670;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0A548;
  a1[45] = &unk_24CF0A5D0;
  a1[46] = &unk_24CF0A5F8;
  return a1;
}

void sub_212FA38D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<99ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t sparse_bundles::mapped_blocks_t::write(lock_free::bitmap_t **a1, uint64_t a2)
{
  return sparse_bundles::mapped_blocks_t::map_range(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16));
}

uint64_t sparse_bundles::mapped_blocks_t::flush(sparse_bundles::mapped_blocks_t *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE v23[152];

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 16) + 7;
    if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) == v3 >> 3
      || (v2 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), 0),
          !(_DWORD)v2))
    {
      v4 = v3 >> 3;
      *((_BYTE *)this + 24) = 0;
      v5 = *((_QWORD *)this + 2);
      v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
      v7 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
      v16 = v6;
      v17 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v18 = v4;
      v19 = 0;
      v20 = v4;
      v21 = 0;
      v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 80))(v5, &v16);
      v10 = v17;
      if (v17)
      {
        v11 = (unint64_t *)&v17->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v4 == (int)v2)
      {
        v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 1);
        if ((_DWORD)v2)
          *((_BYTE *)this + 24) = 1;
        if (DIDebugLogsEnabled())
        {
          *(_QWORD *)&v14 = "sparse_bundles::mapped_blocks_t::flush()";
          *((_QWORD *)&v14 + 1) = 38;
          v15 = 2;
          di_log::logger<di_log::log_printer<141ul>>::logger(&v16, &v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Flushed ", 8);
          sparse_bundles::operator<<(&v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)", res=", 6);
          std::ostream::operator<<();
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf((uint64_t)&v16);
          MEMORY[0x2199A89AC](v23);
        }
      }
      else
      {
        *((_BYTE *)this + 24) = 1;
      }
    }
  }
  else
  {
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v14 = "sparse_bundles::mapped_blocks_t::flush()";
      *((_QWORD *)&v14 + 1) = 38;
      v15 = 2;
      di_log::logger<di_log::log_printer<114ul>>::logger(&v16, &v14);
      sparse_bundles::operator<<(&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)" is clean, skipping flush", 25);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf((uint64_t)&v16);
      MEMORY[0x2199A89AC](v23);
    }
    return 0;
  }
  return v2;
}

void sub_212FA3BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<141ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<141ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<141ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0A768;
  a1[45] = &unk_24CF0A868;
  a1[46] = &unk_24CF0A890;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0A768;
  a1[45] = &unk_24CF0A7F0;
  a1[46] = &unk_24CF0A818;
  return a1;
}

void sub_212FA3C58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<141ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<150ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<150ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0A988;
  a1[45] = &unk_24CF0AA88;
  a1[46] = &unk_24CF0AAB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0A988;
  a1[45] = &unk_24CF0AA10;
  a1[46] = &unk_24CF0AA38;
  return a1;
}

void sub_212FA3D40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<150ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t sparse_bundles::mapped_blocks_t::unmap_interval(lock_free::bitmap_t **this, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  uint64_t v15;

  result = DIDebugLogsEnabled();
  if ((_DWORD)result)
  {
    *(_QWORD *)&v11 = "sparse_bundles::mapped_blocks_t::unmap_interval(uint64_t, uint64_t)";
    *((_QWORD *)&v11 + 1) = 47;
    v12 = 2;
    di_log::logger<di_log::log_printer<166ul>>::logger(v13, &v11);
    sparse_bundles::operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" - unmap_range: [", 17);
    v7 = v14;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v14 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)&v14 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"-", 1);
    std::ostream::operator<<();
    v8 = v14;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v14 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v14 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)&v14 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"]", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf((uint64_t)v13);
    result = MEMORY[0x2199A89AC](&v15);
  }
  if (a3 != a2)
  {
    v9 = a2 >> 12;
    v10 = a3 >> 12;
    if ((a2 & 0xFFF) != 0)
    {
      if (v9 == v10)
        return result;
      ++v9;
    }
    if ((~(_WORD)a3 & 0xFFF) != 0)
    {
      if (v9 == v10)
        return result;
      --v10;
    }
    result = lock_free::bitmap_t::update_bits(this[1], v9, v10, 0);
    if ((_DWORD)result)
      *((_BYTE *)this + 24) = 1;
  }
  return result;
}

void sub_212FA3F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<166ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sparse_bundles::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"mapped blocks of band ", 22);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  v3 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  return a1;
}

{
  _QWORD *v1;
  _QWORD *result;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"band ", 5);
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 8) = *(_DWORD *)((_BYTE *)v1 + *(_QWORD *)(*v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  result = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 8) = *(_DWORD *)((_BYTE *)result
                                                                            + *(_QWORD *)(*result - 24)
                                                                            + 8) & 0xFFFFFFB5 | 2;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<89ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<89ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<89ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0A2A0;
  di_log::logger_buf<di_log::log_printer<89ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<89ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA43A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<89ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 89;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 89;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<93ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<93ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<93ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0A4C0;
  di_log::logger_buf<di_log::log_printer<93ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<93ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA498C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<93ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 93;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 93;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<99ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<99ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<99ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0A6E0;
  di_log::logger_buf<di_log::log_printer<99ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<99ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA4F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<99ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 99;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 99;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<141ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<141ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<141ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0A900;
  di_log::logger_buf<di_log::log_printer<141ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<141ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA5564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<141ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 141;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 141;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<150ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<150ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<150ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0AB20;
  di_log::logger_buf<di_log::log_printer<150ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<150ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA5B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<150ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 150;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 150;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0A2A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA5DEC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0A4C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA5E68(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0A6E0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA5EE4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0A900;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA5F60(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0AB20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FA5FDC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::Band::Band(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  lock_free::bitmap_t *v11;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CF0ABA0;
  v5 = a2[1];
  *(_QWORD *)(a1 + 16) = *a2;
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  v8 = a4[4];
  *(_QWORD *)(a1 + 160) = a4[3];
  *(_QWORD *)(a1 + 168) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (lock_free::bitmap_t *)a4[40];
  if (v11)
    lock_free::bitmap_t::set_bit(v11, a3, 1);
  return a1;
}

void sub_212FA60B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  sparse_bundles::Band::ContextsList *v2;

  sparse_bundles::Band::ContextsList::~ContextsList(v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::Band::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[45];
  uint64_t v24;
  _BYTE v25[152];

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v18 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
    *((_QWORD *)&v18 + 1) = 38;
    LODWORD(v19) = 2;
    di_log::logger<di_log::log_printer<47ul>>::logger(v23, &v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Reading ", 8);
    operator<<(&v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)" to ", 4);
    sparse_bundles::operator<<(&v24);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf((uint64_t)v23);
    MEMORY[0x2199A89AC](v25);
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 40))(*(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(a3 + 24);
  if (v5 >= *(_QWORD *)(a3 + 16) + v6)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), a3);
  }
  else if (v5 <= v6)
  {
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v18 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((_QWORD *)&v18 + 1) = 38;
      LODWORD(v19) = 2;
      di_log::logger<di_log::log_printer<63ul>>::logger(v23, &v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Band data doesn't exist, zeroing", 32);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf((uint64_t)v23);
      MEMORY[0x2199A89AC](v25);
    }
    bzero(*(void **)a3, *(_QWORD *)(a3 + 16));
    v11 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 32);
    v8 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)&v18 = *(_QWORD *)a3;
    *((_QWORD *)&v18 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v19 = v5 - v6;
    v20 = v6;
    v21 = v7;
    v22 = 0;
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v16 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((_QWORD *)&v16 + 1) = 38;
      v17 = 2;
      di_log::logger<di_log::log_printer<56ul>>::logger(v23, &v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Band data is partial, reading ", 30);
      operator<<(&v24);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf((uint64_t)v23);
      MEMORY[0x2199A89AC](v25);
    }
    v11 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), &v18);
    bzero((void *)(*(_QWORD *)a3 + v19), *(_QWORD *)(a3 + 16) - v19);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (v19 == v11)
      v11 = *(_DWORD *)(a3 + 16);
    if (*((_QWORD *)&v18 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (v11 >= 0)
    return *(_QWORD *)(a3 + 16);
  else
    return v11;
}

void sub_212FA6394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  di_log::logger<di_log::log_printer<63ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<47ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<47ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0ACD0;
  a1[45] = &unk_24CF0ADD0;
  a1[46] = &unk_24CF0ADF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0ACD0;
  a1[45] = &unk_24CF0AD58;
  a1[46] = &unk_24CF0AD80;
  return a1;
}

void sub_212FA6460(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<47ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<56ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<56ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0AEF0;
  a1[45] = &unk_24CF0AFF0;
  a1[46] = &unk_24CF0B018;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0AEF0;
  a1[45] = &unk_24CF0AF78;
  a1[46] = &unk_24CF0AFA0;
  return a1;
}

void sub_212FA6548(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<56ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<63ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<63ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0B110;
  a1[45] = &unk_24CF0B210;
  a1[46] = &unk_24CF0B238;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0B110;
  a1[45] = &unk_24CF0B198;
  a1[46] = &unk_24CF0B1C0;
  return a1;
}

void sub_212FA6630(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<63ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t sparse_bundles::Band::write(sparse_bundles::Band *a1, uint64_t a2, uint64_t a3)
{
  lock_free::bitmap_t **mapped_blocks;
  uint64_t result;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  uint64_t v12;

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v8 = "io_result_t sparse_bundles::Band::write(DiskImage::Context &, const sg_entry &)";
    *((_QWORD *)&v8 + 1) = 39;
    v9 = 2;
    di_log::logger<di_log::log_printer<74ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Writing ", 8);
    operator<<(&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)" to ", 4);
    sparse_bundles::operator<<(&v11);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x2199A89AC](&v12);
  }
  mapped_blocks = (lock_free::bitmap_t **)sparse_bundles::Band::get_mapped_blocks(a1);
  sparse_bundles::mapped_blocks_t::write(mapped_blocks, a3);
  LODWORD(result) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 80))(*(_QWORD *)(a2 + 16), a3);
  *((_BYTE *)a1 + 68) = 1;
  if ((int)result >= 0)
    return *(_QWORD *)(a3 + 16);
  else
    return (int)result;
}

void sub_212FA67A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<74ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<74ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<74ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0B330;
  a1[45] = &unk_24CF0B430;
  a1[46] = &unk_24CF0B458;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0B330;
  a1[45] = &unk_24CF0B3B8;
  a1[46] = &unk_24CF0B3E0;
  return a1;
}

void sub_212FA683C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<74ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

unint64_t sparse_bundles::Band::get_mapped_blocks(sparse_bundles::Band *this)
{
  unint64_t result;
  unint64_t v3;
  void *exception;
  _QWORD v5[33];
  sparse_bundles::Band *v6;
  _QWORD *v7;

  result = atomic_load((unint64_t *)this + 6);
  if (!result)
  {
    v6 = this;
    v3 = atomic_load((unint64_t *)this + 7);
    if (v3 != -1)
    {
      v5[0] = &v6;
      v7 = v5;
      std::__call_once((std::once_flag::_State_type *)this + 7, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<sparse_bundles::Band::get_mapped_blocks(void)::$_0 &&>>);
    }
    result = atomic_load((unint64_t *)this + 6);
    if (!result)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Failed opening mapped blocks file for ", 38);
      sparse_bundles::operator<<(v5);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v5, *((_DWORD *)this + 16));
    }
  }
  return result;
}

void sub_212FA6978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sparse_bundles::Band::unmap_extents(sparse_bundles::Band *a1, _QWORD *a2)
{
  lock_free::bitmap_t **mapped_blocks;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  mapped_blocks = (lock_free::bitmap_t **)sparse_bundles::Band::get_mapped_blocks(a1);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if ((v5[6] & 2) != 0)
        v7 = v5[4];
      else
        v7 = v5[4] + 1;
      sparse_bundles::mapped_blocks_t::unmap_interval(mapped_blocks, v7, (v5[6] & 1) + v5[5] - 1);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v4);
  }
  return lock_free::bitmap_t::is_reset(mapped_blocks[1]);
}

uint64_t sparse_bundles::Band::new_band(unint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  char v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  int v28;

  v28 = a3;
  v27 = 0uLL;
  v24 = (***(uint64_t (****)(_QWORD))(a2 + 8))(*(_QWORD *)(a2 + 8));
  sparse_bundles::band_to_filename(__p);
  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int,std::string,int &,void>(&v24, (uint64_t)__p, &v28, &v25);
  if (v23 < 0)
    operator delete(__p[0]);
  if (*a4)
  {
    v24 = 3;
    std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,void>(&v25, (uint64_t)a4, &v24, __p);
    v7 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    v27 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v27, &v25);
  }
  v14 = operator new();
  sparse_bundles::Band::Band(v14, &v27, a1, (_QWORD *)a2);
  v15 = v26;
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v14;
}

void sub_212FA6C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sparse_bundles::Band::erase(sparse_bundles::Band *this, const sparse_bundles::bundle_commons_t *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  lock_free::bitmap_t *v8;
  __int128 v9;
  int v10;
  __int128 __p;
  int v12;
  char v13;
  _QWORD v14[45];
  uint64_t v15;
  _BYTE v16[152];

  if ((*(_BYTE *)(*(_QWORD *)this + 8) & 1) != 0)
  {
    *(_QWORD *)&__p = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((_QWORD *)&__p + 1) = 32;
    v12 = 0;
    di_log::logger<di_log::log_printer<116ul>>::logger(v14, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Skipping erase of band ", 23);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)", disk image is terminated", 26);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x2199A89AC](v16);
    return;
  }
  sparse_bundles::band_to_filename(&__p);
  v4 = (***((uint64_t (****)(_QWORD))this + 2))(*((_QWORD *)this + 2));
  v5 = FileLocal::unlink_from(v4, (uint64_t *)&__p);
  if (v5)
  {
    if (v5 >= 0)
      v6 = v5;
    else
      v6 = -v5;
    if (v6 != 2)
    {
      *(_QWORD *)&v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((_QWORD *)&v9 + 1) = 32;
      v10 = 16;
      di_log::logger<di_log::log_printer<126ul>>::logger(v14, &v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Failed to erase mapped file of band ", 36);
      *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)", error ", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf((uint64_t)v14);
      goto LABEL_11;
    }
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((_QWORD *)&v9 + 1) = 32;
      v10 = 2;
      di_log::logger<di_log::log_printer<124ul>>::logger(v14, &v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"No mapped file for band ", 24);
      *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 2;
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)v14);
LABEL_11:
      MEMORY[0x2199A89AC](v16);
    }
  }
  v7 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
  if (FileLocal::unlink_from(v7, (uint64_t *)&__p))
  {
    *(_QWORD *)&v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((_QWORD *)&v9 + 1) = 32;
    v10 = 16;
    di_log::logger<di_log::log_printer<136ul>>::logger(v14, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Failed to erase band ", 21);
    *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)", error ", 8);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x2199A89AC](v16);
  }
  else
  {
    v8 = (lock_free::bitmap_t *)*((_QWORD *)this + 40);
    if (v8)
      lock_free::bitmap_t::set_bit(v8, (unint64_t)a2, 0);
  }
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((_QWORD *)&v9 + 1) = 32;
    v10 = 2;
    di_log::logger<di_log::log_printer<139ul>>::logger(v14, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Completed erase of band ", 24);
    *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v16[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x2199A89AC](v16);
  }
  if (v13 < 0)
    operator delete((void *)__p);
}

void sub_212FA70C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<116ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<116ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0B550;
  a1[45] = &unk_24CF0B650;
  a1[46] = &unk_24CF0B678;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0B550;
  a1[45] = &unk_24CF0B5D8;
  a1[46] = &unk_24CF0B600;
  return a1;
}

void sub_212FA71C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<116ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<126ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<126ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0B770;
  a1[45] = &unk_24CF0B870;
  a1[46] = &unk_24CF0B898;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0B770;
  a1[45] = &unk_24CF0B7F8;
  a1[46] = &unk_24CF0B820;
  return a1;
}

void sub_212FA72B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<126ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<139ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<139ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0B990;
  a1[45] = &unk_24CF0BA90;
  a1[46] = &unk_24CF0BAB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0B990;
  a1[45] = &unk_24CF0BA18;
  a1[46] = &unk_24CF0BA40;
  return a1;
}

void sub_212FA7398(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<139ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void sparse_bundles::Band::~Band(sparse_bundles::Band *this)
{
  sparse_bundles::Band::ContextsList *v2;
  sparse_bundles::mapped_blocks_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  _BYTE v10[152];

  *(_QWORD *)this = &off_24CF0ABA0;
  v2 = (sparse_bundles::Band *)((char *)this + 72);
  sparse_bundles::Band::ContextsList::clear((uint64_t **)this + 9);
  v3 = (sparse_bundles::mapped_blocks_t *)atomic_load((unint64_t *)this + 6);
  if (*((_BYTE *)this + 69))
  {
    if (!v3)
      goto LABEL_18;
    goto LABEL_13;
  }
  if (v3)
  {
    if ((*(_BYTE *)(**((_QWORD **)this + 5) + 8) & 1) != 0)
    {
      *(_QWORD *)&v6 = "sparse_bundles::Band::~Band()";
      *((_QWORD *)&v6 + 1) = 27;
      v7 = 0;
      di_log::logger<di_log::log_printer<151ul>>::logger(v8, &v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Disk image is terminated, skipping flush of ", 44);
      sparse_bundles::operator<<(&v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)", dirty=", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf((uint64_t)v8);
      MEMORY[0x2199A89AC](v10);
    }
    else
    {
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v6 = "sparse_bundles::Band::~Band()";
        *((_QWORD *)&v6 + 1) = 27;
        v7 = 2;
        di_log::logger<di_log::log_printer<153ul>>::logger(v8, &v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"flushing and closing ", 21);
        sparse_bundles::operator<<(&v9);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf((uint64_t)v8);
        MEMORY[0x2199A89AC](v10);
      }
      sparse_bundles::mapped_blocks_t::flush(v3);
      if ((*((_BYTE *)this + 68) & 1) != 0)
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 1);
    }
LABEL_13:
    v4 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    MEMORY[0x2199A8A18](v3, 0x1020C40171E6E99);
    goto LABEL_18;
  }
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v6 = "sparse_bundles::Band::~Band()";
    *((_QWORD *)&v6 + 1) = 27;
    v7 = 2;
    di_log::logger<di_log::log_printer<162ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Closing an unchanged ", 21);
    sparse_bundles::operator<<(&v9);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<162ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x2199A89AC](v10);
  }
LABEL_18:
  std::shared_ptr<Backend>::reset[abi:ne180100]((_QWORD *)this + 2);
  if (*((_BYTE *)this + 69))
    sparse_bundles::Band::erase(*((sparse_bundles::Band **)this + 5), *((const sparse_bundles::bundle_commons_t **)this + 4));
  sparse_bundles::open_bands_t::remove((sparse_bundles::open_bands_t *)(*((_QWORD *)this + 5) + 184), *((_QWORD *)this + 4));
  sparse_bundles::Band::ContextsList::~ContextsList(v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  sparse_bundles::Band::~Band(this);
  JUMPOUT(0x2199A8A18);
}

_QWORD *di_log::logger<di_log::log_printer<151ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<151ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0BBB0;
  a1[45] = &unk_24CF0BCB0;
  a1[46] = &unk_24CF0BCD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0BBB0;
  a1[45] = &unk_24CF0BC38;
  a1[46] = &unk_24CF0BC60;
  return a1;
}

void sub_212FA772C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<151ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<153ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<153ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0BDD0;
  a1[45] = &unk_24CF0BED0;
  a1[46] = &unk_24CF0BEF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0BDD0;
  a1[45] = &unk_24CF0BE58;
  a1[46] = &unk_24CF0BE80;
  return a1;
}

void sub_212FA7814(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<153ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void sparse_bundles::Band::create_ctx(sparse_bundles::Band *this@<X0>, __int128 *a2@<X8>)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 72;
  v4 = (*(uint64_t (**)(sparse_bundles::Band *))(*(_QWORD *)this + 136))(this);
  std::shared_ptr<sparse_bundles::Band::ContextBand>::shared_ptr[abi:ne180100]<sparse_bundles::Band::ContextBand,void>(a2, v4);
  sparse_bundles::Band::ContextsList::add((uint64_t)v3, a2);
}

void sub_212FA78E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sparse_bundles::Band::ContextsList::add(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::vector<std::shared_ptr<char>>::emplace_back<std::shared_ptr<char> const&>((char **)a1, a2);
  std::mutex::unlock(v4);
}

void sub_212FA793C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::Band::flush(sparse_bundles::Band *this)
{
  uint64_t v1;
  sparse_bundles::mapped_blocks_t *v3;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 68) & 1) == 0)
    return 0;
  *((_BYTE *)this + 68) = 0;
  v3 = (sparse_bundles::mapped_blocks_t *)atomic_load((unint64_t *)this + 6);
  v1 = sparse_bundles::mapped_blocks_t::flush(v3);
  if ((_DWORD)v1
    || (v1 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 1),
        (_DWORD)v1))
  {
    *((_BYTE *)this + 68) = 1;
    *(_QWORD *)&v5 = "sparse_bundles::Band::flush()";
    *((_QWORD *)&v5 + 1) = 27;
    v6 = 16;
    di_log::logger<di_log::log_printer<202ul>>::logger(v7, &v5);
    sparse_bundles::operator<<(&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)": flush failed (", 16);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)")", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x2199A89AC](&v9);
  }
  return v1;
}

void sub_212FA7A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<202ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<202ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<202ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0BFF0;
  a1[45] = &unk_24CF0C0F0;
  a1[46] = &unk_24CF0C118;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0BFF0;
  a1[45] = &unk_24CF0C078;
  a1[46] = &unk_24CF0C0A0;
  return a1;
}

void sub_212FA7AF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<202ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t sparse_bundles::band_ptr::release(uint64_t this)
{
  unint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(unint64_t **)this;
  if (*(_QWORD *)this)
  {
    v2 = (uint64_t *)this;
    do
    {
      v3 = __ldaxr(v1);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v1));
    if (!v4)
    {
      v5 = *(_QWORD *)(this + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      this = *v2;
      if (*v2)
        JUMPOUT(0x2199A8A18);
    }
  }
  return this;
}

void sparse_bundles::band_ptr::~band_ptr(sparse_bundles::band_ptr *this)
{
  sparse_bundles::band_ptr::release((uint64_t)this);
}

sparse_bundles::band_ptr *sparse_bundles::band_ptr::band_ptr(sparse_bundles::band_ptr *this, const sparse_bundles::band_ptr *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unint64_t **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = atomic_load(v3);
  if (!v4)
  {
LABEL_7:
    v6 = (_QWORD *)operator new();
    v7 = *(_QWORD *)(*(_QWORD *)this + 8);
    *v6 = 1;
    v6[1] = v7;
    v6[3] = 0;
    v6[4] = 0;
    v6[2] = 0;
    *(_QWORD *)this = v6;
    *((_QWORD *)this + 1) = 0;
    v8 = -1;
    goto LABEL_8;
  }
  while (1)
  {
    v5 = __ldaxr(*(unint64_t **)this);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }
    if (!__stlxr(v4 + 1, *(unint64_t **)this))
      break;
LABEL_6:
    v4 = v5;
    if (!v5)
      goto LABEL_7;
  }
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
LABEL_8:
  *((_QWORD *)this + 2) = v8;
  return this;
}

uint64_t sparse_bundles::band_ptr::band_ptr(uint64_t result, uint64_t a2)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  if (result != a2)
    *(_QWORD *)a2 = 0;
  return result;
}

sparse_bundles::band_ptr *sparse_bundles::band_ptr::operator=(sparse_bundles::band_ptr *this, sparse_bundles::band_ptr *a2)
{
  if (this != a2)
  {
    sparse_bundles::band_ptr::release((uint64_t)this);
    *(_OWORD *)this = *(_OWORD *)a2;
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *(_QWORD *)a2 = 0;
  }
  return this;
}

_QWORD *sparse_bundles::band_ptr::replace_if_evictable@<X0>(unint64_t **this@<X0>, sparse_bundles::Band *a2@<X1>, sparse_bundles::band_ptr *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *result;
  unint64_t *v10;
  unint64_t *v11;
  dispatch_group_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[6];
  __int128 v17;
  int v18;
  _QWORD v19[45];
  uint64_t v20;
  _BYTE v21[152];

  v6 = atomic_load(*this);
  sparse_bundles::eviction_t::increase((unint64_t *)((*this)[1] + 56));
  if (v6 == 1)
  {
    do
    {
      v7 = __ldaxr(*this);
      if (v7 == 1)
      {
        if (!__stlxr(0, *this))
        {
          v10 = this[1];
          if (v10)
          {
            sparse_bundles::Band::ContextsList::clear((uint64_t **)v10 + 9);
            v11 = this[1];
            v12 = (dispatch_group_t *)((*this)[1] + 392);
            v16[0] = MEMORY[0x24BDAC760];
            v16[1] = 0x40000000;
            v16[2] = ___ZN14sparse_bundles8band_ptr20replace_if_evictableEPNS_4BandE_block_invoke;
            v16[3] = &__block_descriptor_tmp_9;
            v16[4] = this;
            v16[5] = v11;
            workqueue::transaction::add(v12, v16);
          }
          else
          {
            sparse_bundles::eviction_t::decrease((sparse_bundles::eviction_t *)((*this)[1] + 56));
            if (DIDebugLogsEnabled())
            {
              *(_QWORD *)&v17 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
              *((_QWORD *)&v17 + 1) = 46;
              v18 = 2;
              di_log::logger<di_log::log_printer<346ul>>::logger(v19, &v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Replaced an empty slot", 22);
              std::ostream::~ostream();
              di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf((uint64_t)v19);
              MEMORY[0x2199A89AC](v21);
            }
          }
          this[1] = (unint64_t *)a2;
          if (a2)
          {
            this[2] = (unint64_t *)*((_QWORD *)a2 + 4);
            atomic_store(2uLL, *this);
            *((std::chrono::steady_clock::time_point *)*this + 2) = std::chrono::steady_clock::now();
            result = sparse_bundles::band_ptr::band_ptr(a3, (const sparse_bundles::band_ptr *)this);
            v13 = *this;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
          }
          else
          {
            this[2] = (unint64_t *)-1;
            v15 = (*this)[1];
            result = (_QWORD *)operator new();
            *result = 1;
            result[1] = v15;
            result[3] = 0;
            result[4] = 0;
            result[2] = 0;
            *(_QWORD *)a3 = result;
            *((_QWORD *)a3 + 1) = 0;
            *((_QWORD *)a3 + 2) = -1;
            atomic_store(1uLL, *this);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
    }
    while (v7 == 1);
  }
  sparse_bundles::eviction_t::decrease((sparse_bundles::eviction_t *)((*this)[1] + 56));
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v17 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
    *((_QWORD *)&v17 + 1) = 46;
    v18 = 2;
    di_log::logger<di_log::log_printer<330ul>>::logger(v19, &v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Missed an evictable slot", 24);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x2199A89AC](v21);
  }
  v8 = (*this)[1];
  result = (_QWORD *)operator new();
  *result = 1;
  result[1] = v8;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  *(_QWORD *)a3 = result;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = -1;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<330ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<330ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0C210;
  a1[45] = &unk_24CF0C310;
  a1[46] = &unk_24CF0C338;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0C210;
  a1[45] = &unk_24CF0C298;
  a1[46] = &unk_24CF0C2C0;
  return a1;
}

void sub_212FA80BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<330ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t ___ZN14sparse_bundles8band_ptr20replace_if_evictableEPNS_4BandE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  _BYTE v9[152];

  v2 = *(_QWORD *)(a1 + 32);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((_QWORD *)&v5 + 1) = 46;
    v6 = 2;
    di_log::logger<di_log::log_printer<339ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Background close of ", 20);
    sparse_bundles::operator<<(&v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x2199A89AC](v9);
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  sparse_bundles::eviction_t::decrease((sparse_bundles::eviction_t *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 56));
  result = DIDebugLogsEnabled();
  if ((_DWORD)result)
  {
    *(_QWORD *)&v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((_QWORD *)&v5 + 1) = 46;
    v6 = 2;
    di_log::logger<di_log::log_printer<342ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Close completed", 15);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf((uint64_t)v7);
    return MEMORY[0x2199A89AC](v9);
  }
  return result;
}

void sub_212FA8254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<342ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<339ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<339ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0C430;
  a1[45] = &unk_24CF0C530;
  a1[46] = &unk_24CF0C558;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0C430;
  a1[45] = &unk_24CF0C4B8;
  a1[46] = &unk_24CF0C4E0;
  return a1;
}

void sub_212FA82FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<339ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<342ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<342ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0C650;
  a1[45] = &unk_24CF0C750;
  a1[46] = &unk_24CF0C778;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0C650;
  a1[45] = &unk_24CF0C6D8;
  a1[46] = &unk_24CF0C700;
  return a1;
}

void sub_212FA83E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<342ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<346ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<346ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0C870;
  a1[45] = &unk_24CF0C970;
  a1[46] = &unk_24CF0C998;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0C870;
  a1[45] = &unk_24CF0C8F8;
  a1[46] = &unk_24CF0C920;
  return a1;
}

void sub_212FA84CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<346ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t sparse_bundles::band_ptr::erase_if_unmapped(sparse_bundles::band_ptr *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t mapped_blocks;
  uint64_t v6;
  dispatch_group_t *v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD v11[5];
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  _QWORD v16[45];
  uint64_t v17;
  _BYTE v18[152];

  v4 = atomic_load(*(unint64_t **)this);
  while (v4 == 1)
  {
    v4 = __ldaxr(*(unint64_t **)this);
    if (v4 == 1)
    {
      if (!__stlxr(0, *(unint64_t **)this))
      {
        mapped_blocks = sparse_bundles::Band::get_mapped_blocks(*((sparse_bundles::Band **)this + 1));
        if (lock_free::bitmap_t::is_reset(*(lock_free::bitmap_t **)(mapped_blocks + 8)))
        {
          sparse_bundles::Band::ContextsList::clear((uint64_t **)(*((_QWORD *)this + 1) + 72));
          v6 = *((_QWORD *)this + 1);
          v7 = (dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)this + 8) + 392);
          v11[0] = MEMORY[0x24BDAC760];
          v11[1] = 0x40000000;
          v11[2] = ___ZN14sparse_bundles8band_ptr17erase_if_unmappedEy_block_invoke;
          v11[3] = &__block_descriptor_tmp_40;
          v11[4] = v6;
          workqueue::transaction::add(v7, v11);
          *((_QWORD *)this + 1) = 0;
          *((_QWORD *)this + 2) = -1;
          v8 = *(unint64_t **)this;
          v9 = 1;
          atomic_store(1uLL, v8);
        }
        else
        {
          if (DIDebugLogsEnabled())
          {
            *(_QWORD *)&v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
            *((_QWORD *)&v14 + 1) = 43;
            v15 = 2;
            di_log::logger<di_log::log_printer<398ul>>::logger(v16, &v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Skipping erase of ", 18);
            sparse_bundles::operator<<(&v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)", band was written to", 21);
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf((uint64_t)v16);
            MEMORY[0x2199A89AC](v18);
          }
          return 1;
        }
        return v9;
      }
    }
    else
    {
      __clrex();
    }
  }
  if (v4)
  {
    sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)&v14, this);
    if (*((_QWORD *)&v14 + 1) && *(_QWORD *)(*((_QWORD *)&v14 + 1) + 32) == a2)
    {
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((_QWORD *)&v12 + 1) = 43;
        v13 = 2;
        di_log::logger<di_log::log_printer<386ul>>::logger(v16, &v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Skipping band erase (in use)", 28);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf((uint64_t)v16);
        MEMORY[0x2199A89AC](v18);
      }
      v9 = 1;
    }
    else
    {
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((_QWORD *)&v12 + 1) = 43;
        v13 = 2;
        di_log::logger<di_log::log_printer<389ul>>::logger(v16, &v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Band was evicted by another thread (during retain attempt), retry erase process", 79);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf((uint64_t)v16);
        MEMORY[0x2199A89AC](v18);
      }
      v9 = 0;
    }
    sparse_bundles::band_ptr::release((uint64_t)&v14);
  }
  else
  {
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
      *((_QWORD *)&v14 + 1) = 43;
      v15 = 2;
      di_log::logger<di_log::log_printer<381ul>>::logger(v16, &v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Band was evicted by another thread, retry erase process", 55);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf((uint64_t)v16);
      MEMORY[0x2199A89AC](v18);
    }
    return 0;
  }
  return v9;
}

_QWORD *di_log::logger<di_log::log_printer<381ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<381ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0CA90;
  a1[45] = &unk_24CF0CB90;
  a1[46] = &unk_24CF0CBB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0CA90;
  a1[45] = &unk_24CF0CB18;
  a1[46] = &unk_24CF0CB40;
  return a1;
}

void sub_212FA88C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<381ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<386ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<386ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0CCB0;
  a1[45] = &unk_24CF0CDB0;
  a1[46] = &unk_24CF0CDD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0CCB0;
  a1[45] = &unk_24CF0CD38;
  a1[46] = &unk_24CF0CD60;
  return a1;
}

void sub_212FA89A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<386ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<389ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<389ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0CED0;
  a1[45] = &unk_24CF0CFD0;
  a1[46] = &unk_24CF0CFF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0CED0;
  a1[45] = &unk_24CF0CF58;
  a1[46] = &unk_24CF0CF80;
  return a1;
}

void sub_212FA8A90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<389ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<398ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<398ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0D0F0;
  a1[45] = &unk_24CF0D1F0;
  a1[46] = &unk_24CF0D218;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0D0F0;
  a1[45] = &unk_24CF0D178;
  a1[46] = &unk_24CF0D1A0;
  return a1;
}

void sub_212FA8B78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<398ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t ___ZN14sparse_bundles8band_ptr17erase_if_unmappedEy_block_invoke(uint64_t a1)
{
  _BYTE *v2;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v4 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)_block_invoke";
    *((_QWORD *)&v4 + 1) = 43;
    v5 = 2;
    di_log::logger<di_log::log_printer<405ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Background erase of ", 20);
    sparse_bundles::operator<<(&v7);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x2199A89AC](&v8);
  }
  v2 = *(_BYTE **)(a1 + 32);
  v2[69] = 1;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 16))(v2);
}

void sub_212FA8C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<405ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<405ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<405ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0D310;
  a1[45] = &unk_24CF0D410;
  a1[46] = &unk_24CF0D438;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0D310;
  a1[45] = &unk_24CF0D398;
  a1[46] = &unk_24CF0D3C0;
  return a1;
}

void sub_212FA8D30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<405ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t sparse_bundles::Band::get_block_size(sparse_bundles::Band *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 48);
}

uint64_t sparse_bundles::Band::get_num_blocks(sparse_bundles::Band *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 40) / *(_QWORD *)(*((_QWORD *)this + 5) + 48);
}

uint64_t sparse_bundles::Band::is_writable(sparse_bundles::Band *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

_QWORD *sparse_bundles::Band::_create_ctx(sparse_bundles::Band *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = off_24CF0D528;
  v2[1] = this;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return v2;
}

void sub_212FA8E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void sparse_bundles::Band::ContextsList::~ContextsList(sparse_bundles::Band::ContextsList *this)
{
  void **v2;

  sparse_bundles::Band::ContextsList::clear((uint64_t **)this);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  v2 = (void **)this;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void sparse_bundles::Band::ContextsList::clear(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v10 = "sparse_bundles::Band::ContextsList::clear()";
    *((_QWORD *)&v10 + 1) = 41;
    v11 = 2;
    di_log::logger<di_log::log_printer<92ul>>::logger(v12, &v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Resetting ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" band contexts", 14);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf((uint64_t)v12);
    MEMORY[0x2199A89AC](&v14);
  }
  v2 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v4 = (uint64_t *)(this + 11);
    do
    {
      v5 = *v2;
      v6 = (std::__shared_weak_count *)v2[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        std::shared_ptr<DiskImage>::operator=[abi:ne180100]((_QWORD *)(v5 + 16), v4);
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      else
      {
        std::shared_ptr<DiskImage>::operator=[abi:ne180100]((_QWORD *)(v5 + 16), v4);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_212FA8FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<92ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<47ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<47ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<47ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0AE68;
  di_log::logger_buf<di_log::log_printer<47ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<47ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA93A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<47ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 47;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 47;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<56ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<56ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<56ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0B088;
  di_log::logger_buf<di_log::log_printer<56ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<56ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA9994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<56ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 56;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 56;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<63ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<63ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<63ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0B2A8;
  di_log::logger_buf<di_log::log_printer<63ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<63ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FA9F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<63ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 63;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 63;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<74ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<74ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<74ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0B4C8;
  di_log::logger_buf<di_log::log_printer<74ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<74ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAA56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<74ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 74;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 74;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<116ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<116ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<116ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0B6E8;
  di_log::logger_buf<di_log::log_printer<116ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<116ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAAB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<116ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 116;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 116;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<126ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<126ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<126ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0B908;
  di_log::logger_buf<di_log::log_printer<126ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<126ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAB144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<126ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 126;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 126;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<139ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<139ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<139ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0BB28;
  di_log::logger_buf<di_log::log_printer<139ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<139ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAB730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<139ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 139;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 139;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<151ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<151ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<151ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<151ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<151ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0BD48;
  di_log::logger_buf<di_log::log_printer<151ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<151ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<151ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FABD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<151ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<151ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 151;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 151;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<153ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<153ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<153ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<153ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<153ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0BF68;
  di_log::logger_buf<di_log::log_printer<153ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<153ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<153ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAC308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<153ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<153ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 153;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 153;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<202ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<202ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<202ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<202ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<202ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0C188;
  di_log::logger_buf<di_log::log_printer<202ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<202ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<202ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAC8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<202ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<202ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 202;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 202;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<330ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<330ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<330ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<330ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<330ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0C3A8;
  di_log::logger_buf<di_log::log_printer<330ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<330ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<330ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FACEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<330ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<330ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 330;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 330;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<339ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<339ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<339ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<339ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<339ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0C5C8;
  di_log::logger_buf<di_log::log_printer<339ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<339ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<339ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAD4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<339ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<339ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 339;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 339;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<342ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<342ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<342ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<342ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<342ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0C7E8;
  di_log::logger_buf<di_log::log_printer<342ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<342ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<342ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FADAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<342ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<342ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 342;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 342;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<346ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<346ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<346ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<346ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<346ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0CA08;
  di_log::logger_buf<di_log::log_printer<346ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<346ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<346ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAE0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<346ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<346ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 346;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 346;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<381ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<381ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<381ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0CC28;
  di_log::logger_buf<di_log::log_printer<381ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<381ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAE690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<381ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 381;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 381;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<386ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<386ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<386ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<386ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<386ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0CE48;
  di_log::logger_buf<di_log::log_printer<386ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<386ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<386ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAEC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<386ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<386ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 386;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 386;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<389ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<389ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<389ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<389ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<389ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0D068;
  di_log::logger_buf<di_log::log_printer<389ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<389ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<389ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAF268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<389ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<389ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 389;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 389;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<398ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<398ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<398ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0D288;
  di_log::logger_buf<di_log::log_printer<398ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<398ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAF854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<398ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 398;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 398;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<405ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<405ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<405ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<405ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<405ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0D4A8;
  di_log::logger_buf<di_log::log_printer<405ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<405ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<405ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FAFE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<405ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<405ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 405;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 405;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void sparse_bundles::Band::ContextBand::~ContextBand(sparse_bundles::Band::ContextBand *this)
{
  *(_QWORD *)this = off_24CF0D528;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = off_24CF0D528;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0AE68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB014C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0B088;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB01C8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0B2A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB0244(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0B4C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB02C0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int,std::string,int &,void>(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int,std::string,int &,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212FB0338(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int,std::string,int &,std::allocator<FileLocal>,0>(_QWORD *a1, int *a2, uint64_t a3, int *a4)
{
  int v5;
  int v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF38;
  v5 = *a4;
  v6 = FileDescriptorWrapper::open_from(*a2, a3, *a4);
  FileLocal::FileLocal((FileLocal *)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_212FB03A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,std::allocator<crypto_format_backend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212FB0420(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,std::allocator<crypto_format_backend>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF620;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,crypto_format_backend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_212FB0468(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,crypto_format_backend*>(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v6 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  crypto_format_backend::header_ignore_fields_t::header_ignore_fields_t(&v13, *a4);
  crypto_format_backend::crypto_format_backend(a1, &v14, a3, &v13);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_212FB0520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *crypto_format_backend::header_ignore_fields_t::header_ignore_fields_t(_DWORD *this, int a2)
{
  unsigned int v2;
  _QWORD *exception;

  *this = a2;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    v2 = a2 & 0xFFFFFFFC;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_24CEEDAA0;
    exception[1] = "header_ignore_fields_t";
    *((_DWORD *)exception + 8) = v2;
  }
  return this;
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0B6E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB060C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0B908;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB0688(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0BB28;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB0704(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<151ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0BD48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB0780(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<153ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0BF68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB07FC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<sparse_bundles::Band::ContextBand>::shared_ptr[abi:ne180100]<sparse_bundles::Band::ContextBand,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CF0D580;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212FB0864(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sparse_bundles::Band::ContextBand *,std::shared_ptr<sparse_bundles::Band::ContextBand>::__shared_ptr_default_delete<sparse_bundles::Band::ContextBand,sparse_bundles::Band::ContextBand>,std::allocator<sparse_bundles::Band::ContextBand>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<sparse_bundles::Band::ContextBand *,std::shared_ptr<sparse_bundles::Band::ContextBand>::__shared_ptr_default_delete<sparse_bundles::Band::ContextBand,sparse_bundles::Band::ContextBand>,std::allocator<sparse_bundles::Band::ContextBand>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<sparse_bundles::Band::ContextBand *,std::shared_ptr<sparse_bundles::Band::ContextBand>::__shared_ptr_default_delete<sparse_bundles::Band::ContextBand,sparse_bundles::Band::ContextBand>,std::allocator<sparse_bundles::Band::ContextBand>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<202ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0C188;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB096C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<sparse_bundles::Band::get_mapped_blocks(void)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void (*v4)(uint64_t);
  void *v5;
  uint64_t v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;

  v1 = ***a1;
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v3 = "sparse_bundles::Band::get_mapped_blocks()::(anonymous class)::operator()() const";
    *((_QWORD *)&v3 + 1) = 72;
    LODWORD(v4) = 2;
    di_log::logger<di_log::log_printer<218ul>>::logger(v7, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Opening mapped blocks for ", 26);
    sparse_bundles::operator<<(&v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x2199A89AC](&v9);
  }
  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)&v3 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v3 + 1) = 0x40000000;
  v4 = ___ZZN14sparse_bundles4Band17get_mapped_blocksEvENK3__0clEv_block_invoke;
  v5 = &__block_descriptor_tmp_107;
  v6 = v1;
  sparse_bundles::bundle_commons_t::run_in_high_tier(v2, (uint64_t)&v3);
}

void ___ZZN14sparse_bundles4Band17get_mapped_blocksEvENK3__0clEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  off_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v1 = *(_QWORD **)(a1 + 32);
  get_sink_backend((uint64_t)(v1 + 2), &v10);
  v3 = v10;
  v2 = v11;
  v12 = v10;
  v13 = v11;
  v4 = operator new();
  v6 = v1[4];
  v5 = v1[5];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  sparse_bundles::mapped_blocks_t::mapped_blocks_t(v4, v5, v6, v7, 1);
  atomic_store(v4, v1 + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_212FB0C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<225ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<225ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0D620;
  a1[45] = &unk_24CF0D720;
  a1[46] = &unk_24CF0D748;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0D620;
  a1[45] = &unk_24CF0D6A8;
  a1[46] = &unk_24CF0D6D0;
  return a1;
}

void sub_212FB0CDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<225ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<225ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0D7B8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB0DA8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0D7B8;
  di_log::logger_buf<di_log::log_printer<225ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<225ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<225ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<225ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<225ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<225ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<225ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<225ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<225ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB119C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<225ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 225;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 225;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<330ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0C3A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB1410(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<339ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0C5C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB148C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<342ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0C7E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB1508(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<346ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0CA08;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB1584(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0CC28;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB1600(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<386ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0CE48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB167C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<389ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0D068;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB16F8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0D288;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB1774(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<405ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0D4A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB17F0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

unint64_t *sparse_bundles::eviction_t::increase(unint64_t *this)
{
  unint64_t v1;

  do
    v1 = __ldaxr(this);
  while (__stlxr(v1 + 1, this));
  return this;
}

void sparse_bundles::eviction_t::decrease(sparse_bundles::eviction_t *this)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  do
  {
    v3 = __ldaxr((unint64_t *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unint64_t *)this));
  if (!v4 && *((_BYTE *)this + 72))
  {
    *((_BYTE *)this + 72) = 0;
    std::condition_variable::notify_one((std::condition_variable *)((char *)this + 80));
  }
  std::mutex::unlock(v2);
}

uint64_t sparse_bundles::eviction_t::start_flush(uint64_t this)
{
  unint64_t v1;

  do
    v1 = __ldaxr((unint64_t *)this);
  while (__stlxr(v1 + 1, (unint64_t *)this));
  *(_BYTE *)(this + 72) = 1;
  return this;
}

void sparse_bundles::eviction_t::complete_flush(sparse_bundles::eviction_t *this)
{
  unint64_t v2;
  unint64_t v3;
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  do
  {
    v2 = __ldaxr((unint64_t *)this);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unint64_t *)this));
  if (v3)
  {
    while (*((_BYTE *)this + 72))
      std::condition_variable::wait((std::condition_variable *)((char *)this + 80), &v4);
  }
  else
  {
    *((_BYTE *)this + 72) = 0;
  }
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

uint64_t sparse_bundles::open_bands_t::insert(uint64_t **this, unint64_t a2)
{
  char v3;
  char v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t **v11;
  __int128 v13;
  int v14;
  _QWORD v15[45];
  uint64_t v16;
  _BYTE v17[152];
  std::unique_lock<std::mutex> __lk;
  unint64_t v19;

  v19 = a2;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(this + 3);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(this + 3));
  LOBYTE(v15[0]) = 0;
  std::__tree<std::__value_type<unsigned long long,BOOL>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,BOOL>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,BOOL>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,BOOL>(this, &v19, &v19, v15);
  v4 = v3;
  if ((v3 & 1) == 0)
  {
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((_QWORD *)&v13 + 1) = 36;
      v14 = 2;
      di_log::logger<di_log::log_printer<72ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Band ", 5);
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" was opened in the background, waiting for it to become available", 65);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf((uint64_t)v15);
      MEMORY[0x2199A89AC](v17);
    }
    v7 = this[1];
    v6 = (char *)(this + 1);
    v5 = v7;
    if (v7)
    {
      do
      {
        v8 = v6;
        do
        {
          v9 = v5[4];
          v10 = v9 >= v19;
          if (v9 >= v19)
            v11 = (uint64_t **)v5;
          else
            v11 = (uint64_t **)(v5 + 1);
          if (v10)
            v8 = (char *)v5;
          v5 = *v11;
        }
        while (*v11);
        if (v8 == v6)
          break;
        if (v19 < *((_QWORD *)v8 + 4))
          break;
        if (v8[40])
          break;
        std::condition_variable::wait((std::condition_variable *)(v6 + 80), &__lk);
        v5 = *(uint64_t **)v6;
      }
      while (*(_QWORD *)v6);
    }
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((_QWORD *)&v13 + 1) = 36;
      v14 = 2;
      di_log::logger<di_log::log_printer<79ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Band ", 5);
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v17[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" is now available", 17);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf((uint64_t)v15);
      MEMORY[0x2199A89AC](v17);
    }
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4 & 1;
}

void sub_212FB1B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (*(_BYTE *)(v13 - 64))
    std::mutex::unlock(*(std::mutex **)(v13 - 72));
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<72ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<72ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0D868;
  a1[45] = &unk_24CF0D968;
  a1[46] = &unk_24CF0D990;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0D868;
  a1[45] = &unk_24CF0D8F0;
  a1[46] = &unk_24CF0D918;
  return a1;
}

void sub_212FB1C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<72ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<79ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<79ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0DA88;
  a1[45] = &unk_24CF0DB88;
  a1[46] = &unk_24CF0DBB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0DA88;
  a1[45] = &unk_24CF0DB10;
  a1[46] = &unk_24CF0DB38;
  return a1;
}

void sub_212FB1D30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<79ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void sparse_bundles::open_bands_t::mark_as_placed(sparse_bundles::open_bands_t *this, unint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v5)
    goto LABEL_12;
  v6 = (char *)this + 8;
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = (char *)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == (char *)this + 8 || *((_QWORD *)v6 + 4) > a2)
LABEL_12:
    v6 = (char *)this + 8;
  v6[40] = 1;
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  std::mutex::unlock(v4);
}

void sparse_bundles::open_bands_t::remove(sparse_bundles::open_bands_t *this, unint64_t a2)
{
  std::mutex *v3;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v9 = a2;
  v3 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>((uint64_t)this, &v9);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v4 = "sparse_bundles::open_bands_t::remove(uint64_t)";
    *((_QWORD *)&v4 + 1) = 36;
    v5 = 2;
    di_log::logger<di_log::log_printer<96ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Band ", 5);
    *(_DWORD *)((char *)&v7 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)&v7 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v7 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)&v7 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)" is closed, notifying waiters", 29);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x2199A89AC](&v8);
  }
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  std::mutex::unlock(v3);
}

void sub_212FB1F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<96ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<96ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0DCA8;
  a1[45] = &unk_24CF0DDA8;
  a1[46] = &unk_24CF0DDD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0DCA8;
  a1[45] = &unk_24CF0DD30;
  a1[46] = &unk_24CF0DD58;
  return a1;
}

void sub_212FB1FF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<96ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

sparse_bundles::bundle_commons_t *sparse_bundles::bundle_commons_t::bundle_commons_t(sparse_bundles::bundle_commons_t *this, DiskImageSparseBundle *a2)
{
  __int128 v3;
  system_properties *v4;
  unsigned int logical_cpus;
  void *__p[2];
  char v8;
  int v9;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v9 = 0;
  std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,int,void>(&v9, __p);
  v3 = *(_OWORD *)__p;
  *((_QWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = v3;
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_QWORD *)this + 17) = 1018212795;
  *(_OWORD *)((char *)this + 56) = xmmword_212FF5300;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 113) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 850045863;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 1018212795;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v4 = (system_properties *)std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.diskimages.band_management");
  logical_cpus = system_properties::get_logical_cpus(v4);
  workqueue::workqueue::workqueue((char *)this + 328, __p, logical_cpus);
  if (v8 < 0)
    operator delete(__p[0]);
  workqueue::workqueue::create_transaction((sparse_bundles::bundle_commons_t *)((char *)this + 328), 0, (uint64_t)this + 392);
  workqueue::workqueue::set_target_priority((uint64_t)this + 328, 3);
  return this;
}

void sub_212FB2180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  sparse_bundles::open_bands_t *v15;
  std::condition_variable *v16;
  void **v17;
  workqueue::transaction *v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  workqueue::transaction::~transaction(v18);
  workqueue::workqueue::~workqueue(v17);
  v21 = *(_QWORD *)(v14 + 320);
  *(_QWORD *)(v14 + 320) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sparse_bundles::open_bands_t::~open_bands_t(v15);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex((std::mutex *)((char *)v15 - 120));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v14 + 24);
  v22 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 16) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v23 = *v19;
  *v19 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sparse_bundles::open_bands_t::~open_bands_t(sparse_bundles::open_bands_t *this)
{
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void sparse_bundles::bundle_commons_t::run_in_high_tier(uint64_t a1, uint64_t a2)
{
  char *exception;
  uint64_t *v4;
  uint64_t v5;
  const std::error_category *v6;
  uint64_t v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  void *__p;
  uint64_t v15;
  uint64_t v16;
  int v17;
  dispatch_group_t v18[19];

  v18[18] = *(dispatch_group_t *)MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = &v9;
  v11 = 0x4802000000;
  v12 = __Block_byref_object_copy__7;
  v13 = __Block_byref_object_dispose__7;
  v15 = 0;
  v16 = 0;
  __p = 0;
  v17 = 0;
  workqueue::workqueue::create_transaction((workqueue::workqueue *)(a1 + 328), 0, (uint64_t)v18);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14sparse_bundles16bundle_commons_t16run_in_high_tierEU13block_pointerFvvE_block_invoke;
  v8[3] = &unk_24CF0D830;
  v8[4] = a2;
  v8[5] = &v9;
  workqueue::transaction::add(v18, v8);
  workqueue::transaction::~transaction((workqueue::transaction *)v18);
  if (*((_DWORD *)v10 + 16))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    v4 = v10;
    v5 = *((unsigned int *)v10 + 16);
    *(_QWORD *)exception = &off_24CF07908;
    v6 = std::generic_category();
    *((_QWORD *)exception + 1) = v5;
    *((_QWORD *)exception + 2) = v6;
    v7 = v4[7];
    *(_OWORD *)(exception + 24) = *(_OWORD *)(v4 + 5);
    *((_QWORD *)exception + 5) = v7;
    v4[6] = 0;
    v4[7] = 0;
    v4[5] = 0;
    exception[48] = 1;
  }
  _Block_object_dispose(&v9, 8);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
}

void sub_212FB23E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a15, 8);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t ___ZN14sparse_bundles16bundle_commons_t16run_in_high_tierEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sparse_bundles::band_to_filename@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v4;
  _QWORD v5[10];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v4 - 24)) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(v4 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v5[-1] + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[0] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199A89AC](&v7);
}

void sub_212FB2608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<72ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<72ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<72ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0DA00;
  di_log::logger_buf<di_log::log_printer<72ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<72ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB29D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<72ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 72;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 72;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<79ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<79ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<79ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0DC20;
  di_log::logger_buf<di_log::log_printer<79ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<79ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB2FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<79ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 79;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 79;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<96ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<96ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<96ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<96ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<96ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0DE40;
  di_log::logger_buf<di_log::log_printer<96ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<96ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<96ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB35AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<96ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<96ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 96;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 96;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,BOOL>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,BOOL>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,BOOL>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,BOOL>(uint64_t **a1, unint64_t *a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  _QWORD *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = operator new(0x30uLL);
    v12[4] = *a3;
    *((_BYTE *)v12 + 40) = *a4;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0DA00;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB39FC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0DC20;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB3A78(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<96ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0DE40;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB3AF4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,int,void>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<BackendNull>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_212FB3B54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<BackendNull>,0>(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24CEEEFD8;
  v3 = *a2;
  v4 = di_utils::random_uuid((di_utils *)a1);
  v6 = v5;
  Backend::Backend((Backend *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = &off_24CEEF028;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v6;
  return a1;
}

void sub_212FB3BCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t AEA_backend::AEA_backend(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v27;

  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a2);
  *v6 = &off_24CF0DEC0;
  v7 = (uint64_t **)(v6 + 5);
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v27 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
  v14 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = operator new(0x38uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_24CF0DFA0;
  v17[3] = 0;
  v18 = (char *)(v17 + 3);
  *((_DWORD *)v17 + 8) = v12;
  v17[5] = v14;
  v17[6] = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 48) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 48) = v17;
  }
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v24 = operator new();
  *(_QWORD *)v24 = 850045863;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_QWORD *)(v24 + 56) = 0;
  std::shared_ptr<AEA_backend::shared_state_t>::shared_ptr[abi:ne180100]<AEA_backend::shared_state_t,void>((_QWORD *)(a1 + 72), v24);
  AEA_backend::create_streams((AEA_backend *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8));
  v25 = *v7;
  *v25 = AEAwrapper::DecryptionStream::getRawSize(*(AEAContext **)(a1 + 56));
  return a1;
}

void sub_212FB3DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BackendInternalBackend *v9;
  uint64_t v10;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  BackendInternalBackend::~BackendInternalBackend(v9);
  _Unwind_Resume(a1);
}

void AEA_backend::create_streams(AEA_backend *this, int a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint8_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  AAByteStream v17;
  AAByteStream v18;
  std::__shared_weak_count *v19;
  AEAContext v20;
  AAByteStream v21;

  v4 = (std::mutex *)*((_QWORD *)this + 9);
  std::mutex::lock(v4);
  lseek(a2, 0, 0);
  v18 = AAFileStreamOpenWithFD(a2, 0);
  AEAwrapper::ByteStream::ByteStream(&v21, &v18);
  AEAwrapper::Context::Context((AEAwrapper::Context *)&v20, (AEAwrapper::ByteStream *)&v21);
  v5 = *((_QWORD *)this + 5);
  v6 = *(uint8_t **)(v5 + 16);
  v7 = *(std::__shared_weak_count **)(v5 + 24);
  v18 = (AAByteStream)v6;
  v19 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  AEAwrapper::Context::setSymmetricKey(&v20, v6, 0x20uLL);
  AEAwrapper::ByteStream::make_DecryptionRandomAccessInputStream(&v21, &v20, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 1, (uint64_t *)&v17);
  std::allocate_shared[abi:ne180100]<AEAwrapper::DecryptionStream,std::allocator<AEAwrapper::DecryptionStream>,AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,void>(&v21, (uint64_t *)&v20, &v17, &v16);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 56, &v16);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  AEAwrapper::ByteStream::~ByteStream(&v17);
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  AEAwrapper::Context::~Context(&v20);
  AEAwrapper::ByteStream::~ByteStream(&v21);
  std::mutex::unlock(v4);
}

void sub_212FB3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  AAByteStream v5;
  va_list va;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  AEAContext v10;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, AEAContext);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  AEAwrapper::Context::~Context((AEAContext *)va2);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va3);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t AEA_backend::AEA_backend(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a3);
  *v5 = &off_24CF0DEC0;
  v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v9 = a2[10];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  AEA_backend::create_streams((AEA_backend *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8));
  return a1;
}

void sub_212FB4088(_Unwind_Exception *a1)
{
  BackendInternalBackend *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

double AEA_backend::construct_context_from_inner@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  std::allocate_shared[abi:ne180100]<AEA_backend,std::allocator<AEA_backend>,AEA_backend&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

ssize_t AEA_backend::read(uint64_t a1, uint64_t a2)
{
  return AEAwrapper::DecryptionStream::pread(*(AAByteStream **)(a1 + 56), *(void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t AEA_backend::get_size(AEA_backend *this)
{
  return **((_QWORD **)this + 5);
}

uint64_t AEA_backend::get_compressed_blk_size(AEAContext **this)
{
  return AEAwrapper::DecryptionStream::getCompressionBlockSize(this[7]);
}

void AEA_backend::~AEA_backend(AEA_backend *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CF0DEC0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CF0DEC0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x2199A8A18);
}

_QWORD *AEA_backend::name(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AEA", 3);
}

void std::__shared_ptr_emplace<aea_format::AEA_format>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0DFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<aea_format::AEA_format>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0DFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<aea_format::AEA_format>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 40);
}

_QWORD *std::shared_ptr<AEA_backend::shared_state_t>::shared_ptr[abi:ne180100]<AEA_backend::shared_state_t,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CF0DFF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212FB42BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AEA_backend::shared_state_t>::reset[abi:ne180100]((std::mutex **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AEA_backend::shared_state_t *,std::shared_ptr<AEA_backend::shared_state_t>::__shared_ptr_default_delete<AEA_backend::shared_state_t,AEA_backend::shared_state_t>,std::allocator<AEA_backend::shared_state_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

std::mutex *std::__shared_ptr_pointer<AEA_backend::shared_state_t *,std::shared_ptr<AEA_backend::shared_state_t>::__shared_ptr_default_delete<AEA_backend::shared_state_t,AEA_backend::shared_state_t>,std::allocator<AEA_backend::shared_state_t>>::__on_zero_shared(uint64_t a1)
{
  std::mutex *result;

  result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    std::mutex::~mutex(result);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AEA_backend::shared_state_t *,std::shared_ptr<AEA_backend::shared_state_t>::__shared_ptr_default_delete<AEA_backend::shared_state_t,AEA_backend::shared_state_t>,std::allocator<AEA_backend::shared_state_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::mutex *std::unique_ptr<AEA_backend::shared_state_t>::reset[abi:ne180100](std::mutex **a1, std::mutex *a2)
{
  std::mutex *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::mutex::~mutex(result);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<AEAwrapper::DecryptionStream,std::allocator<AEAwrapper::DecryptionStream>,AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,void>@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::__shared_ptr_emplace[abi:ne180100]<AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,std::allocator<AEAwrapper::DecryptionStream>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_212FB4408(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::__shared_ptr_emplace[abi:ne180100]<AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,std::allocator<AEAwrapper::DecryptionStream>,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CF0E068;
  AEAwrapper::DecryptionStream::DecryptionStream(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_212FB4450(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0E068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0E068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::__on_zero_shared(AAByteStream *a1)
{
  AAByteStream *v2;

  v2 = a1 + 3;
  AEAwrapper::ByteStream::~ByteStream(a1 + 5);
  AEAwrapper::Context::~Context(a1 + 4);
  AEAwrapper::ByteStream::~ByteStream(v2);
}

void std::allocate_shared[abi:ne180100]<AEA_backend,std::allocator<AEA_backend>,AEA_backend&,std::shared_ptr<Backend> const&,void>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x70uLL);
  std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<AEA_backend&,std::shared_ptr<Backend> const&,std::allocator<AEA_backend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212FB4530(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<AEA_backend&,std::shared_ptr<Backend> const&,std::allocator<AEA_backend>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF6C0;
  AEA_backend::AEA_backend((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_212FB4578(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *operator<<(_QWORD *a1, int a2)
{
  const char *v2;
  uint64_t v3;

  if (a2 == 2)
  {
    v2 = "full_fsync";
    v3 = 10;
  }
  else if (a2 == 1)
  {
    v2 = "fsync";
    v3 = 5;
  }
  else if (a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"bad flush type (", 16);
    a1 = (_QWORD *)std::ostream::operator<<();
    v2 = ")";
    v3 = 1;
  }
  else
  {
    v2 = "barrier";
    v3 = 7;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

_QWORD *operator<<(_QWORD *a1)
{
  char *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  char v15;
  char v16;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v3 = *((_DWORD *)v2 + 2);
  *((_DWORD *)v2 + 2) = v3 & 0xFFFFFFB5 | 8;
  v16 = 48;
  v4 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, &v16);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 2;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) |= 0x200u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"sg: buffer = ", 13);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
  v9 = *v8;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(v9 - 24) + 24) = 0;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) &= ~0x200u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" size = ", 8);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" buffer_size = ", 15);
  v11 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  v15 = 48;
  v12 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, &v15);
  v13 = *v12;
  *(uint64_t *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 2;
  *(_DWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) |= 0x200u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" offset = ", 10);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v3;
  return a1;
}

void Backend::Backend(Backend *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24CF0E0B8;
}

uint64_t operator<<(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, a1);
}

void get_sink_backend(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[3];
  std::__shared_weak_count *v21;

  v4 = *(const void **)a1;
  if (v4
  {
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    v20[2] = v5;
    v21 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)v5 + 4);
    v20[0] = *((_QWORD *)v5 + 3);
    v20[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    get_sink_backend(v20);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v14 = v21;
    if (v21)
    {
      v15 = (unint64_t *)&v21->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    *a2 = *(_QWORD *)a1;
    a2[1] = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
}

void sub_212FB4920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t replace_internal_backend(uint64_t a1, const void **a2, uint64_t *a3)
{
  const void *v4;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  const void *v28;
  std::__shared_weak_count *v29;

  v4 = *(const void **)a1;
  if (v4 == *a2)
    return 4294967274;
  if (!v4)
    return 4294967294;
  if (!v7)
    return 4294967294;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (const void *)*((_QWORD *)v7 + 3);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v7 + 4);
  v28 = v11;
  v29 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (v11 == *a2)
  {
    v17 = *a3;
    v16 = a3[1];
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)v7 + 4);
    *((_QWORD *)v7 + 3) = v17;
    *((_QWORD *)v7 + 4) = v16;
    if (v15)
    {
      v20 = (unint64_t *)&v15->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      v15 = 0;
    }
  }
  else
  {
    v15 = (std::__shared_weak_count *)replace_internal_backend(&v28, a2, a3);
  }
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v8)
  {
    v25 = (unint64_t *)&v8->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return (uint64_t)v15;
}

void sub_212FB4ADC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
    replace_internal_backend(v2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void get_next_backend_in_graph(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(const void **)a1;
  if (*(_QWORD *)a1
  {
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = v5[4];
    *a2 = v5[3];
    a2[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 8);
    *a2 = v4;
    a2[1] = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
}

uint64_t BackendSG::BackendSG(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;

  v12 = a4;
  v13 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24CF08AD0;
  *(_QWORD *)(a1 + 24) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)a1 = &off_24CF0E178;
  *(_QWORD *)(a1 + 40) = a3;
  v11 = 0;
  std::allocate_shared[abi:ne180100]<BufferAllocator,std::allocator<BufferAllocator>,unsigned long &,int,unsigned long &,void>(&v13, &v11, &v12, (_QWORD *)(a1 + 48));
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 112) = a5;
  return a1;
}

void sub_212FB4CB8(_Unwind_Exception *a1)
{
  BackendInternalBackend *v1;

  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

uint64_t BackendSG::write(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  int v17;
  __int128 v18;
  _BYTE v19[25];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  BufferAllocator::allocate(*(std::condition_variable **)(a1 + 48), &v22);
  if ((_QWORD)v22)
  {
    memcpy((void *)v22, *(const void **)a2, *(_QWORD *)(a2 + 16));
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a1 + 40);
    v18 = v22;
    if (*((_QWORD *)&v22 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *(_OWORD *)v19 = v4;
    *(_QWORD *)&v19[16] = v5;
    v19[24] = 0;
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 64, &v18);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)&v19[9];
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), a1 + 64);
  }
  else
  {
    *(_QWORD *)&v16 = "int BackendSG::write(const sg_entry &)";
    *((_QWORD *)&v16 + 1) = 20;
    v17 = 16;
    di_log::logger<di_log::log_printer<124ul>>::logger(&v18, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"BackendSG: error allocating buffer", 34);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)&v18);
    MEMORY[0x2199A89AC](&v21);
    v11 = 4294967284;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_212FB4E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<124ul>>::~logger((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 48);
  _Unwind_Resume(a1);
}

uint64_t BackendSG::read(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  int v17;
  __int128 v18;
  _BYTE v19[25];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  BufferAllocator::allocate(*(std::condition_variable **)(a1 + 48), &v22);
  if ((_QWORD)v22)
  {
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a1 + 40);
    v18 = v22;
    if (*((_QWORD *)&v22 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *(_OWORD *)v19 = v4;
    *(_QWORD *)&v19[16] = v5;
    v19[24] = 0;
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 64, &v18);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)&v19[9];
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a1 + 64);
    if ((v11 & 0x80000000) == 0 && *(_BYTE *)(a1 + 112))
      memcpy(*(void **)a2, *(const void **)(a1 + 64), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_QWORD *)&v16 = "int BackendSG::read(const sg_entry &)";
    *((_QWORD *)&v16 + 1) = 19;
    v17 = 16;
    di_log::logger<di_log::log_printer<138ul>>::logger(&v18, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"BackendSG: error allocating buffer", 34);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf((uint64_t)&v18);
    MEMORY[0x2199A89AC](&v21);
    v11 = 4294967284;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_212FB504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<138ul>>::~logger((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 64);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<138ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<138ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0E340;
  a1[45] = &unk_24CF0E440;
  a1[46] = &unk_24CF0E468;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0E340;
  a1[45] = &unk_24CF0E3C8;
  a1[46] = &unk_24CF0E3F0;
  return a1;
}

void sub_212FB50F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<138ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t BackendSG::truncate(BackendSG *this, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  int v14;
  __int128 v15;
  _BYTE v16[25];
  uint64_t v17;
  uint64_t v18;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  if ((_DWORD)v4)
  {
    *(_QWORD *)&v13 = "int BackendSG::truncate(uint64_t)";
    *((_QWORD *)&v13 + 1) = 23;
    v14 = 16;
    di_log::logger<di_log::log_printer<157ul>>::logger(&v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"BackendSG: truncating the inner backend failed, error = ", 56);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf((uint64_t)&v15);
    MEMORY[0x2199A89AC](&v18);
  }
  else
  {
    v6 = *(_OWORD *)((char *)this + 88);
    v7 = *((_QWORD *)this + 9);
    *(_QWORD *)&v15 = *((_QWORD *)this + 8);
    *((_QWORD *)&v15 + 1) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_QWORD *)v16 = a2;
    *(_OWORD *)&v16[8] = v6;
    v16[24] = 0;
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 64, &v15);
    *((_OWORD *)this + 5) = *(_OWORD *)v16;
    *(_OWORD *)((char *)this + 89) = *(_OWORD *)&v16[9];
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v4;
}

void sub_212FB52A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<157ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 BackendSG::BackendSG(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24CF08AD0;
  v3 = a3[1];
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)a1 = &off_24CF0E178;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  result = *(__n128 *)(a2 + 80);
  *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  *(__n128 *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return result;
}

double BackendSG::construct_context_from_inner@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,BackendSG&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t BufferedWriteBackend::BufferedWriteBackend(uint64_t a1, _QWORD *a2, std::vector<char>::size_type __n)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24CF08AD0;
  v4 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)a1 = &off_24CF0E240;
  *(_QWORD *)(a1 + 40) = 850045863;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 104), __n);
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_212FB5430(_Unwind_Exception *a1)
{
  BackendInternalBackend *v1;
  std::mutex *v2;

  std::mutex::~mutex(v2);
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

uint64_t BufferedWriteBackend::reset_last_offset(BufferedWriteBackend *this, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = *((_QWORD *)this + 13);
  v5 = a2 % (*((_QWORD *)this + 14) - v4);
  if (!v5)
    goto LABEL_11;
  v6 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v14 = v4;
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v16 = v5;
  v17 = a2 - v5;
  v18 = v5;
  v19 = 0;
  v9 = (*(uint64_t (**)(BufferedWriteBackend *, uint64_t *))(*(_QWORD *)this + 104))(this, &v14);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v5 == (int)v9)
  {
LABEL_11:
    v9 = 0;
    *((_QWORD *)this + 16) = a2;
    *((_BYTE *)this + 136) = 1;
  }
  return v9;
}

void sub_212FB553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t BufferedWriteBackend::write(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t offset;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  size_t v30;
  std::__shared_weak_count *v31;
  unint64_t v32;
  size_t v33;
  size_t v34;
  char v35;

  v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (!*(_BYTE *)(a1 + 136))
  {
    offset = BufferedWriteBackend::reset_last_offset((BufferedWriteBackend *)a1, *(_QWORD *)(a2 + 24));
    if ((_DWORD)offset)
      goto LABEL_34;
  }
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112) - v6;
  v8 = v5 % v7;
  if (v5 % v7)
  {
    v9 = v7 - v8;
    if (v9 >= *(_QWORD *)(a2 + 16))
      v10 = *(_QWORD *)(a2 + 16);
    else
      v10 = v9;
    memcpy((void *)(v6 + v8), *(const void **)a2, v10);
    v11 = *(_QWORD *)(a1 + 104);
    v7 = *(_QWORD *)(a1 + 112) - v11;
    if (v10 + v8 == v7)
    {
      v12 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
      v30 = v11;
      v31 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      v32 = v10 + v8;
      v33 = v5 - v8;
      v34 = v10 + v8;
      v35 = 0;
      offset = (*(uint64_t (**)(_QWORD, size_t *))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), &v30);
      v16 = v31;
      v17 = v32;
      if (v31)
      {
        v18 = (unint64_t *)&v31->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v17 != (int)offset)
        goto LABEL_34;
      v7 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    }
  }
  else
  {
    v10 = 0;
  }
  offset = *(_QWORD *)(a2 + 16);
  v20 = (offset - v10) / v7 * v7;
  if (offset - v10 == (offset - v10) % v7)
  {
LABEL_31:
    if (offset > v10)
    {
      memcpy(*(void **)(a1 + 104), (const void *)(*(_QWORD *)a2 + v10), offset - v10);
      offset = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)(a1 + 128) += offset;
    goto LABEL_34;
  }
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 24) + v10;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  v30 = *(_QWORD *)a2 + v10;
  v31 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v32 = v20;
  v33 = v22;
  v34 = v21 - v10;
  v35 = 0;
  offset = (*(uint64_t (**)(_QWORD, size_t *))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), &v30);
  v26 = v31;
  if (v31)
  {
    v27 = (unint64_t *)&v31->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v20 == (int)offset)
  {
    v10 += v20;
    offset = *(_QWORD *)(a2 + 16);
    goto LABEL_31;
  }
LABEL_34:
  std::mutex::unlock(v4);
  return offset;
}

void sub_212FB579C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t BufferedWriteBackend::flush(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_BYTE *)(a1 + 136))
  {
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 112) - v5;
    v7 = *(_QWORD *)(a1 + 128) % v6;
    if (!v7)
      goto LABEL_15;
    bzero((void *)(v5 + v7), v6 - v7);
    v8 = *(_QWORD *)(a1 + 128);
    v9 = *(_QWORD *)(a1 + 104);
    v10 = *(_QWORD *)(a1 + 112);
    v11 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
    v22 = v9;
    v23 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v24 = v10 - v9;
    v25 = v8 - v7;
    v26 = v10 - v9;
    v27 = 0;
    v14 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24), &v22);
    v15 = v14;
    v16 = v14 >= 0 ? 4294967291 : v14;
    v17 = v23;
    v18 = v24;
    if (v23)
    {
      v19 = (unint64_t *)&v23->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v18 == v15)
LABEL_15:
      v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2);
  }
  else
  {
    v16 = 0;
  }
  std::mutex::unlock(v4);
  return v16;
}

void sub_212FB5910(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void BufferedWriteBackend::~BufferedWriteBackend(BufferedWriteBackend *this)
{
  BufferedWriteBackend::~BufferedWriteBackend(this);
  JUMPOUT(0x2199A8A18);
}

{
  void *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_24CF0E240;
  BufferedWriteBackend::flush((uint64_t)this, 1);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

_QWORD *BufferedWriteBackend::name(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BufferedWriteBackend", 20);
}

_QWORD *BufferedWriteBackend::construct_context_from_inner@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(a2, (_QWORD *)(a1 + 8));
}

void BackendSG::~BackendSG(BackendSG *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CF0E178;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CF0E178;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x2199A8A18);
}

_QWORD *BackendSG::name(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendSG", 9);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<138ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<138ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<138ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0E4D8;
  di_log::logger_buf<di_log::log_printer<138ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<138ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB5E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<138ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 138;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 138;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<BufferAllocator,std::allocator<BufferAllocator>,unsigned long &,int,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0xB8uLL);
  result = std::__shared_ptr_emplace<BufferAllocator>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,unsigned long &,std::allocator<BufferAllocator>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_212FB610C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BufferAllocator>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,unsigned long &,std::allocator<BufferAllocator>,0>(_QWORD *a1, uint64_t *a2, unsigned int *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CF0E558;
  BufferAllocator::BufferAllocator((BufferAllocator *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_212FB6160(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BufferAllocator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0E558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BufferAllocator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0E558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_emplace<BufferAllocator>::__on_zero_shared(uint64_t a1)
{
  BufferAllocator::~BufferAllocator((BufferAllocator *)(a1 + 24));
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0E4D8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB6228(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,BackendSG&,std::shared_ptr<Backend> const&,void>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x90uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24CF02510;
  BackendSG::BackendSG((uint64_t)(v6 + 3), a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

double CompressedBackend::make_backend@<D0>(_QWORD *a1@<X0>, int *a2@<X1>, size_t a3@<X2>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v6;
  size_t v7;

  v7 = a3;
  if (*a2 == 4)
    std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,std::shared_ptr<Backend> const&,unsigned long &,void>(a1, &v7, &v6);
  else
    std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,void>(a1, a2, &v7, &v6);
  result = *(double *)&v6;
  *a4 = v6;
  return result;
}

uint64_t CompressedBackend::CompressedBackend(uint64_t a1, _QWORD *a2, _DWORD *a3, size_t a4)
{
  uint64_t v7;
  void *v8;

  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a2);
  *(_QWORD *)v7 = off_24CF0E5A8;
  *(_DWORD *)(v7 + 40) = *a3;
  *(_QWORD *)(v7 + 48) = a4;
  v8 = (void *)operator new[]();
  bzero(v8, a4);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = a1 + 96;
  *(_OWORD *)(a1 + 80) = xmmword_212FEBC40;
  return a1;
}

void sub_212FB63A4(_Unwind_Exception *a1)
{
  BackendInternalBackend *v1;

  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

uint64_t CompressedBackend::CompressedBackend(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  size_t v6;
  void *v7;

  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a3);
  *(_QWORD *)v5 = off_24CF0E5A8;
  *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 48) = v6;
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = a1 + 96;
  *(_OWORD *)(a1 + 80) = xmmword_212FEBC40;
  return a1;
}

void sub_212FB6444(_Unwind_Exception *a1)
{
  BackendInternalBackend *v1;

  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

void CompressedBackend::~CompressedBackend(CompressedBackend *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_24CF0E5A8;
  boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 72);
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    MEMORY[0x2199A8A00](v2, 0x1000C8077774924);
  *(_QWORD *)this = off_24CF08AD0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t CompressedBackend::read(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const std::locale::facet *v8;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  _BYTE v14[152];
  std::locale v15;

  v4 = *(char **)(a1 + 64);
  if (v4 != *(char **)(a1 + 56))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
    v4 = *(char **)(a1 + 56);
  }
  v5 = Backend::read(*(Backend **)(a1 + 24), v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if ((v5 & 0x80000000) != 0)
  {
    v7 = v5;
    *(_QWORD *)&v10 = "int CompressedBackend::read(const sg_entry &)";
    *((_QWORD *)&v10 + 1) = 27;
    v11 = 16;
    di_log::logger<di_log::log_printer<49ul>>::logger(v12, &v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Internal backend read() failed. ret=", 36);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)&v14[*(_QWORD *)(v13 - 24) - 8]);
    v8 = std::locale::use_facet(&v15, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v15);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf((uint64_t)v12);
    MEMORY[0x2199A89AC](v14);
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, a2, *(_QWORD *)(a1 + 56));
    if (v6)
    {
      return v6;
    }
    else
    {
      *(_QWORD *)&v10 = "int CompressedBackend::read(const sg_entry &)";
      *((_QWORD *)&v10 + 1) = 27;
      v11 = 16;
      di_log::logger<di_log::log_printer<55ul>>::logger(v12, &v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Decompression failed", 20);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf((uint64_t)v12);
      MEMORY[0x2199A89AC](v14);
      return 4294967291;
    }
  }
  return v7;
}

void sub_212FB6688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<55ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<49ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<49ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0E880;
  a1[45] = &unk_24CF0E980;
  a1[46] = &unk_24CF0E9A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0E880;
  a1[45] = &unk_24CF0E908;
  a1[46] = &unk_24CF0E930;
  return a1;
}

void sub_212FB6740(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<49ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<55ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<55ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0EAA0;
  a1[45] = &unk_24CF0EBA0;
  a1[46] = &unk_24CF0EBC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0EAA0;
  a1[45] = &unk_24CF0EB28;
  a1[46] = &unk_24CF0EB50;
  return a1;
}

void sub_212FB6828(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<55ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

unint64_t CompressedBackend::future_read@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  BOOL v18;
  const void *v19;
  uint64_t tagged_ptr_cond;
  __int128 *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t result;
  __int128 v34;
  _BYTE v35[25];
  __int128 *v36;
  _DWORD v37[10];
  uint64_t v38;
  _DWORD v39[10];
  __int128 *v40;
  _QWORD v41[5];
  __int128 *v42;

  v6 = a1[8];
  v7 = a2 + 2;
  v8 = a2[2];
  if (a1[6] - v6 + a1[7] < v8)
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    v6 = a1[8];
    v8 = *v7;
  }
  v9 = a1[3];
  v10 = a2[3];
  v11 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
  *(_QWORD *)&v34 = v6;
  *((_QWORD *)&v34 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)v35 = v8;
  *(_QWORD *)&v35[8] = v10;
  *(_QWORD *)&v35[16] = v8;
  v35[24] = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v9 + 128))(v41, v9, &v34);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (BYTE4(v41[0]))
    v18 = 0;
  else
    v18 = v41[4] == 0;
  if (v18)
    return lw_future<int>::lw_future(a3, v41);
  LOBYTE(v34) = 0;
  BYTE4(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  *(_QWORD *)v35 = ref::details::_get_tagged_ptr_lock((unint64_t)&v34, v14);
  tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v34, v19);
  v42 = &v34;
  *(_QWORD *)&v35[8] = tagged_ptr_cond;
  *(_QWORD *)&v35[16] = &v42;
  lw_future<int>::lw_future((unint64_t)v39, &v34);
  v21 = v42;
  v40 = v42;
  *((_QWORD *)v42 + 4) = &v40;
  v22 = a2[1];
  *(_QWORD *)&v34 = *a2;
  *((_QWORD *)&v34 + 1) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v21 = v40;
  }
  *(_OWORD *)&v35[9] = *(_OWORD *)((char *)v7 + 9);
  *(_OWORD *)v35 = *(_OWORD *)v7;
  v36 = v21;
  v40 = 0;
  *((_QWORD *)v21 + 4) = &v36;
  lw_future<int>::lw_future((unint64_t)v37, v41);
  v25 = a1[9];
  v38 = a1[8];
  v26 = a1[10];
  v27 = (_OWORD *)(v25 + 104 * v26);
  if (v26 == a1[11])
  {
    boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(a1 + 9, (_QWORD *)(v25 + 104 * v26), (const char *)1, (uint64_t)&v34, &v42);
  }
  else
  {
    *v27 = v34;
    v34 = 0uLL;
    v28 = *(_OWORD *)v35;
    *(_OWORD *)((char *)v27 + 25) = *(_OWORD *)&v35[9];
    v27[1] = v28;
    v29 = (_QWORD *)(v25 + 104 * v26);
    v29[6] = v36;
    v29 += 6;
    v36 = 0;
    *(_QWORD *)(*v29 + 32) = v29;
    lw_future<int>::lw_future((unint64_t)(v29 + 1), v37);
    *(_QWORD *)(v25 + 104 * v26 + 96) = v38;
    ++a1[10];
  }
  if (v36)
    *((_QWORD *)v36 + 4) = 0;
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  a1[8] += *v7;
  result = lw_future<int>::lw_future(a3, v39);
  if (v40)
    *((_QWORD *)v40 + 4) = 0;
  return result;
}

void sub_212FB6B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a15)
    *(_QWORD *)(a15 + 32) = 0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a28)
    *(_QWORD *)(a28 + 32) = 0;
  _Unwind_Resume(a1);
}

_QWORD *CompressedBackend::run_futures(CompressedBackend *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  __int128 v16;
  int v17;
  _QWORD v18[45];
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 144))(*((_QWORD *)this + 3));
  v3 = *((_QWORD *)this + 9);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    v4 = v3 + 48;
    v5 = 104 * v2;
    do
    {
      v6 = lw_future<int>::get((unsigned int *)(v4 + 8));
      v7 = v6;
      if ((v6 & 0x80000000) != 0)
      {
        v10 = v3 + 48;
        v11 = *(unsigned int **)v4;
        *v11 = v7;
        v9 = v11 + 1;
      }
      else if (*(_QWORD *)(v4 - 32) <= (unint64_t)v6)
      {
        v12 = (*(uint64_t (**)(CompressedBackend *, uint64_t, _QWORD))(*(_QWORD *)this + 192))(this, v4 - 48, *(_QWORD *)(v4 + 48));
        if (v12)
        {
          v13 = v12;
          v10 = v3 + 48;
          v14 = *(unsigned int **)v4;
          **(_DWORD **)v4 = v13;
        }
        else
        {
          *(_QWORD *)&v16 = "void CompressedBackend::run_futures()";
          *((_QWORD *)&v16 + 1) = 35;
          v17 = 16;
          di_log::logger<di_log::log_printer<94ul>>::logger(v18, &v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Decompression failed", 20);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf((uint64_t)v18);
          MEMORY[0x2199A89AC](&v20);
          v10 = v3 + 48;
          v14 = *(unsigned int **)v4;
          **(_DWORD **)v4 = -5;
        }
        v9 = v14 + 1;
      }
      else
      {
        v8 = *(unsigned int **)v4;
        *v8 = -5;
        v9 = v8 + 1;
        v10 = v4;
      }
      *v9 = 1;
      lw_promise<int>::notify_future(v10);
      v3 += 104;
      v4 += 104;
      v5 -= 104;
    }
    while (v5);
  }
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  return boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_destroy_all((_QWORD *)this + 9);
}

void sub_212FB6D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<94ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<94ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<94ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0ECC0;
  a1[45] = &unk_24CF0EDC0;
  a1[46] = &unk_24CF0EDE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0ECC0;
  a1[45] = &unk_24CF0ED48;
  a1[46] = &unk_24CF0ED70;
  return a1;
}

void sub_212FB6DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<94ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t CompressedBackend::write(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const std::locale::facet *v8;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;
  std::locale v15;

  if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2);
  if (!v4)
    return 4294967291;
  v5 = v4;
  v6 = Backend::write(*(Backend **)(a1 + 24), *(char **)(a1 + 56), v4, *(_QWORD *)(a2 + 24));
  if ((v6 & 0x80000000) == 0)
    return v5;
  v7 = v6;
  *(_QWORD *)&v10 = "int CompressedBackend::write(const sg_entry &)";
  *((_QWORD *)&v10 + 1) = 28;
  v11 = 16;
  di_log::logger<di_log::log_printer<117ul>>::logger(v12, &v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Internal backend write() failed. ret=", 37);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)&v13 + *(_QWORD *)(v13 - 24)));
  v8 = std::locale::use_facet(&v15, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf((uint64_t)v12);
  MEMORY[0x2199A89AC](&v14);
  return v7;
}

void sub_212FB6FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::locale::~locale((std::locale *)(v5 - 40));
  di_log::logger<di_log::log_printer<117ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *CompressedBackend::name(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v6;

  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Compressed(", 11);
  v6 = *(_DWORD *)(a1 + 40);
  v4 = operator<<(v3, &v6);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)")", 1);
}

_QWORD *StandardCompressedBackend::StandardCompressedBackend(_QWORD *a1, _QWORD *a2, int *a3, size_t a4)
{
  _QWORD *v6;
  compression_algorithm *v7;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  int v13;
  int v14;

  v13 = *a3;
  v6 = (_QWORD *)CompressedBackend::CompressedBackend((uint64_t)a1, a2, &v13, a4);
  *v6 = &off_24CF0E680;
  v6[221] = 0;
  v7 = (compression_algorithm *)operator new();
  v14 = *a3;
  StandardCompressedBackend::pimpl::pimpl(v7, &v14);
  a1[222] = v7;
  v8 = compression_encode_scratch_buffer_size(*v7);
  v9 = compression_decode_scratch_buffer_size((compression_algorithm)*(_DWORD *)a1[222]);
  if (v8 <= v9)
    v8 = v9;
  a1[220] = v8;
  v10 = (void *)operator new[]();
  bzero(v10, v8);
  v11 = a1[221];
  a1[221] = v10;
  if (v11)
    MEMORY[0x2199A8A00](v11, 0x1000C8077774924);
  return a1;
}

void sub_212FB7164(_Unwind_Exception *a1)
{
  CompressedBackend *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)v1 + 222);
  *((_QWORD *)v1 + 222) = 0;
  if (v3)
    MEMORY[0x2199A8A18](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)v1 + 221);
  *((_QWORD *)v1 + 221) = 0;
  if (v4)
    MEMORY[0x2199A8A00](v4, 0x1000C8077774924);
  CompressedBackend::~CompressedBackend(v1);
  _Unwind_Resume(a1);
}

_QWORD *StandardCompressedBackend::StandardCompressedBackend(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v5 = (_QWORD *)CompressedBackend::CompressedBackend((uint64_t)a1, a2, a3);
  *v5 = &off_24CF0E680;
  v5[220] = *(_QWORD *)(a2 + 1760);
  v5[221] = 0;
  v6 = *(_DWORD **)(a2 + 1776);
  v7 = (_DWORD *)operator new();
  *v7 = *v6;
  a1[222] = v7;
  v8 = a1[220];
  v9 = (void *)operator new[]();
  bzero(v9, v8);
  v10 = a1[221];
  a1[221] = v9;
  if (v10)
    MEMORY[0x2199A8A00](v10, 0x1000C8077774924);
  return a1;
}

void sub_212FB728C(_Unwind_Exception *a1)
{
  CompressedBackend *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)v1 + 222);
  *((_QWORD *)v1 + 222) = 0;
  if (v3)
    MEMORY[0x2199A8A18](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)v1 + 221);
  *((_QWORD *)v1 + 221) = 0;
  if (v4)
    MEMORY[0x2199A8A00](v4, 0x1000C8077774924);
  CompressedBackend::~CompressedBackend(v1);
  _Unwind_Resume(a1);
}

size_t StandardCompressedBackend::decompress(uint64_t a1, uint64_t a2, const uint8_t *a3)
{
  return compression_decode_buffer(*(uint8_t **)a2, *(_QWORD *)(a2 + 32), a3, *(_QWORD *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

size_t StandardCompressedBackend::compress(uint64_t a1, uint64_t a2)
{
  return compression_encode_buffer(*(uint8_t **)(a1 + 56), *(_QWORD *)(a2 + 16), *(const uint8_t **)a2, *(_QWORD *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

double StandardCompressedBackend::construct_context_from_inner@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,StandardCompressedBackend&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t BZIPCompressedBackend::decompress(uint64_t a1, uint64_t a2, char *a3)
{
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;
  unsigned int destLen;

  destLen = *(_QWORD *)(a2 + 32);
  if (!BZ2_bzBuffToBuffDecompress(*(char **)a2, &destLen, a3, *(_DWORD *)(a2 + 16), 0, 0))
    return destLen;
  *(_QWORD *)&v4 = "size_t BZIPCompressedBackend::decompress(const sg_entry &, char *) const";
  *((_QWORD *)&v4 + 1) = 40;
  v5 = 16;
  di_log::logger<di_log::log_printer<242ul>>::logger(v6, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"BZIP decompression failed, res=", 31);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf((uint64_t)v6);
  MEMORY[0x2199A89AC](&v8);
  return 0;
}

void sub_212FB743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<242ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<242ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<242ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0EF58;
  a1[45] = &unk_24CF0F058;
  a1[46] = &unk_24CF0F080;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0EF58;
  a1[45] = &unk_24CF0EFE0;
  a1[46] = &unk_24CF0F008;
  return a1;
}

void sub_212FB74D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<242ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t BZIPCompressedBackend::compress(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;
  unsigned int destLen;

  v2 = *(_QWORD *)(a2 + 16);
  destLen = v2;
  v3 = v2 / 0x186A0;
  if ((int)(v2 / 0x186A0) >= 8)
    LODWORD(v3) = 8;
  v4 = BZ2_bzBuffToBuffCompress(*(char **)(a1 + 56), &destLen, *(char **)a2, v2, v3 + 1, 0, 0);
  if (v4 != -8)
  {
    if (!v4)
      return destLen;
    *(_QWORD *)&v6 = "size_t BZIPCompressedBackend::compress(const sg_entry &) const";
    *((_QWORD *)&v6 + 1) = 38;
    v7 = 16;
    di_log::logger<di_log::log_printer<265ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"BZIP compression failed, res=", 29);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x2199A89AC](&v10);
  }
  return 0;
}

void sub_212FB7638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<265ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<265ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<265ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0F178;
  a1[45] = &unk_24CF0F278;
  a1[46] = &unk_24CF0F2A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0F178;
  a1[45] = &unk_24CF0F200;
  a1[46] = &unk_24CF0F228;
  return a1;
}

void sub_212FB76D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<265ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

double BZIPCompressedBackend::construct_context_from_inner@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,BZIPCompressedBackend&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void StandardCompressedBackend::~StandardCompressedBackend(StandardCompressedBackend *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24CF0E680;
  v2 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v2)
    MEMORY[0x2199A8A18](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v3)
    MEMORY[0x2199A8A00](v3, 0x1000C8077774924);
  CompressedBackend::~CompressedBackend(this);
}

{
  StandardCompressedBackend::~StandardCompressedBackend(this);
  JUMPOUT(0x2199A8A18);
}

void BZIPCompressedBackend::~BZIPCompressedBackend(BZIPCompressedBackend *this)
{
  CompressedBackend::~CompressedBackend(this);
  JUMPOUT(0x2199A8A18);
}

uint64_t boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD **)a1;
    do
    {
      v4 = v3[6];
      if (v4)
        *(_QWORD *)(v4 + 32) = 0;
      --v2;
      v3 = (_QWORD *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v3) + 104);
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<49ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<49ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<49ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0EA18;
  di_log::logger_buf<di_log::log_printer<49ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<49ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB7C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<49ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 49;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 49;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<55ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<55ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<55ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0EC38;
  di_log::logger_buf<di_log::log_printer<55ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<55ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB8238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<55ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 55;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 55;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<94ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<94ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<94ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0EE58;
  di_log::logger_buf<di_log::log_printer<94ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<94ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB8824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<94ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 94;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 94;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_DWORD *StandardCompressedBackend::pimpl::pimpl(_DWORD *a1, int *a2)
{
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  uint64_t v9;
  int v10;

  *a1 = StandardCompressedBackend::pimpl::pimpl(CompressedBackend::algo_t)::algos[*a2];
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v5 = "StandardCompressedBackend::pimpl::pimpl(algo_t)";
    *((_QWORD *)&v5 + 1) = 39;
    v6 = 2;
    di_log::logger<di_log::log_printer<175ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Using compression ", 18);
    v10 = *a2;
    operator<<(&v8, &v10);
    *(_DWORD *)((char *)&v8 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)&v8 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" constant ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x2199A89AC](&v9);
  }
  return a1;
}

void sub_212FB8B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<175ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<242ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<242ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<242ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0F0F0;
  di_log::logger_buf<di_log::log_printer<242ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<242ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB8F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<242ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 242;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 242;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<265ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<265ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<265ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0F310;
  di_log::logger_buf<di_log::log_printer<265ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<265ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FB9518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<265ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 265;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 265;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,std::shared_ptr<Backend> const&,unsigned long &,void>(_QWORD *a1@<X1>, size_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x6F8uLL);
  std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,std::allocator<BZIPCompressedBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212FB97A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,std::allocator<BZIPCompressedBackend>,0>(_QWORD *a1, _QWORD *a2, size_t *a3)
{
  size_t v4;
  int v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CF0F390;
  v4 = *a3;
  v6 = 4;
  CompressedBackend::CompressedBackend((uint64_t)(a1 + 3), a2, &v6, v4);
  a1[3] = &off_24CF0E758;
  return a1;
}

void sub_212FB980C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BZIPCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0F390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BZIPCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0F390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<BZIPCompressedBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,void>(_QWORD *a1@<X1>, int *a2@<X2>, size_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x710uLL);
  std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,std::allocator<StandardCompressedBackend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212FB98D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,std::allocator<StandardCompressedBackend>,0>(_QWORD *a1, _QWORD *a2, int *a3, size_t *a4)
{
  int v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CF0F3E0;
  v6 = *a3;
  StandardCompressedBackend::StandardCompressedBackend(a1 + 3, a2, &v6, *a4);
  return a1;
}

void sub_212FB9934(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<StandardCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0F3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<StandardCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CF0F3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<StandardCompressedBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0EA18;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB9A00(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0EC38;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB9A7C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x13B13B13B13B13CLL)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(104 * v11);
  boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>((uint64_t)a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0x13B13B13B13B13BLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x13B13B13B13B13BLL - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0x13B13B13B13B13BLL)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_QWORD *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(a1, *(_QWORD **)a1, a4, (_QWORD *)(*(_QWORD *)a1 + 104 * *(_QWORD *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (i = *(_QWORD *)(a1 + 8); i; v10 += 104)
    {
      v12 = *(_QWORD *)(v10 + 48);
      if (v12)
        *(_QWORD *)(v12 + 32) = 0;
      --i;
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10);
    }
    if (a1 + 24 != *(_QWORD *)a1)
      operator delete(*(void **)a1);
  }
  v13 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_212FB9C70(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  __int128 v13;

  v12 = boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>(a1, a2, a3, a5);
  *(_OWORD *)v12 = *(_OWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  v13 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(a7 + 48);
  *(_QWORD *)(a7 + 48) = 0;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 32) = v12 + 48;
  lw_future<int>::lw_future(v12 + 56, (_DWORD *)(a7 + 56));
  *(_QWORD *)(v12 + 96) = *(_QWORD *)(a7 + 96);
  return boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>(a1, a3, a4, v12 + 104 * a6);
}

void sub_212FB9D50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_QWORD *)v3)
    *(_QWORD *)(*(_QWORD *)v3 + 32) = 0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  for (; v1 != v2; v1 += 104)
  {
    v5 = *(_QWORD *)(v1 + 48);
    if (v5)
      *(_QWORD *)(v5 + 32) = 0;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &a2[v7];
      v9 = a4 + v7 * 8;
      *(_OWORD *)v9 = *(_OWORD *)&a2[v7];
      *v8 = 0;
      v8[1] = 0;
      v10 = *(_OWORD *)&a2[v7 + 2];
      *(_OWORD *)(v9 + 25) = *(_OWORD *)((char *)&a2[v7 + 3] + 1);
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(a4 + v7 * 8 + 48) = a2[v7 + 6];
      v8[6] = 0;
      *(_QWORD *)(*(_QWORD *)(a4 + v7 * 8 + 48) + 32) = a4 + v7 * 8 + 48;
      lw_future<int>::lw_future(a4 + v7 * 8 + 56, &a2[v7 + 7]);
      *(_QWORD *)(v9 + 96) = a2[v7 + 12];
      v7 += 13;
    }
    while (v8 + 13 != a3);
    a4 += v7 * 8;
  }
  return a4;
}

void sub_212FB9E4C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
    *(_QWORD *)(v4 + 32) = 0;
  boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>(v3, a1, a2, v2);
  __cxa_rethrow();
}

void sub_212FB9E74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0EE58;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FB9EF0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2)
  {
    result = (_QWORD *)*result;
    do
    {
      v3 = result[6];
      if (v3)
        *(_QWORD *)(v3 + 32) = 0;
      --v2;
      result = (_QWORD *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)result) + 104);
    }
    while (v2);
  }
  v1[1] = 0;
  return result;
}

void std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,StandardCompressedBackend&,std::shared_ptr<Backend> const&,void>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x710uLL);
  std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<StandardCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<StandardCompressedBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212FB9FA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<StandardCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<StandardCompressedBackend>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CF0F3E0;
  StandardCompressedBackend::StandardCompressedBackend(a1 + 3, a2, a3);
  return a1;
}

void sub_212FB9FE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0F0F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FBA064(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF0F310;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212FBA0E0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,BZIPCompressedBackend&,std::shared_ptr<Backend> const&,void>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x6F8uLL);
  std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<BZIPCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<BZIPCompressedBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212FBA148(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<BZIPCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<BZIPCompressedBackend>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CF0F390;
  CompressedBackend::CompressedBackend((uint64_t)(a1 + 3), a2, a3);
  a1[3] = &off_24CF0E758;
  return a1;
}

void sub_212FBA19C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptorWrapper::handle_open_from_error_message@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  group *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  _QWORD *v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  std::string v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  stat v35;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v36);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Couldn't open ", 14);
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(_QWORD *)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"' with flags ", 13);
  v14 = *v13;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(v14 - 24) + 8) |= 0x200u;
  v15 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
  if (a3 == 13)
  {
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const char *)a2;
    else
      v16 = *(const char **)a2;
    if (fstatat(a1, v16, &v35, 0))
    {
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)"std::string FileDescriptorWrapper::handle_open_from_error_message(int, const std::string &, int, int)";
      v34.__r_.__value_.__l.__size_ = 65;
      LODWORD(v34.__r_.__value_.__r.__words[2]) = 16;
      di_log::logger<di_log::log_printer<66ul>>::logger(&v31, (__int128 *)&v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"fstatfs failed with err code", 28);
      __error();
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)" trying to check permission after EACCES", 40);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf((uint64_t)&v31);
      MEMORY[0x2199A89AC](&v33);
    }
    else
    {
      std::to_string(&v31, v35.st_gid);
      v17 = getgrgid(v35.st_gid);
      if (v17)
        std::string::__assign_external(&v31, v17->gr_name);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)", UID:GID(Name)=", 16);
      std::to_string(&v34, v35.st_uid);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v34;
      else
        v19 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      else
        size = v34.__r_.__value_.__l.__size_;
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v31;
      else
        v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        v24 = v31.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)" mode=", 6);
      v26 = *v25;
      *(_DWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v25 + *(_QWORD *)(v26 - 24) + 8) |= 0x200u;
      v27 = (_QWORD *)std::ostream::operator<<();
      *(_DWORD *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(*v27 - 24) + 8) & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (our euid is ", 14);
      geteuid();
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")", 1);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v38, a4);
  v36[0] = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v37 = v29;
  v38[0] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete((void *)v38[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199A89AC](&v40);
}

void sub_212FBA538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<66ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<66ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0F768;
  a1[45] = &unk_24CF0F868;
  a1[46] = &unk_24CF0F890;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0F768;
  a1[45] = &unk_24CF0F7F0;
  a1[46] = &unk_24CF0F818;
  return a1;
}

void sub_212FBA620(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<66ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t FileDescriptorWrapper::open_file(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  NSObject *DIOSLog;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  void *exception;
  uint64_t v19;
  int *v20;
  __int128 v21;
  int v22;
  uint8_t buf[8];
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  _QWORD v31[20];

  v2 = a1;
  v31[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  v3 = open((const char *)a1, a2, 438);
  if ((_DWORD)v3 == -1)
  {
    v11 = *__error();
    if (DIForwardLogs())
    {
      *(_QWORD *)&v21 = 0;
      DIOSLog = getDIOSLog();
      os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
      if (*(char *)(v2 + 23) < 0)
        v2 = *(_QWORD *)v2;
      v13 = *__error();
      *(_DWORD *)buf = 68158467;
      *(_DWORD *)&buf[4] = 69;
      v24 = 2080;
      v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
      v26 = 2081;
      v27 = v2;
      v28 = 1024;
      v29 = v13;
      v14 = (const char *)_os_log_send_and_compose_impl();
      if (v14)
      {
        v15 = (char *)v14;
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v14);
        free(v15);
      }
    }
    else
    {
      v16 = getDIOSLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v2 + 23) < 0)
          v2 = *(_QWORD *)v2;
        v17 = *__error();
        *(_DWORD *)buf = 68158467;
        *(_DWORD *)&buf[4] = 69;
        v24 = 2080;
        v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
        v26 = 2081;
        v27 = v2;
        v28 = 1024;
        v29 = v17;
        _os_log_impl(&dword_212EB0000, v16, OS_LOG_TYPE_ERROR, "%.*s: Failed opening %{private}s, errno %d", buf, 0x22u);
      }
    }
    *__error() = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Couldn't open file with flags ", 30);
    v19 = *(_QWORD *)buf;
    *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 8] = *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 8] & 0xFFFFFFB5 | 8;
    *(_DWORD *)&buf[*(_QWORD *)(v19 - 24) + 8] |= 0x200u;
    std::ostream::operator<<();
    v20 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)buf, *v20);
  }
  v4 = v3;
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v21 = "int FileDescriptorWrapper::open_file(const std::string &, int)";
    *((_QWORD *)&v21 + 1) = 36;
    v22 = 2;
    di_log::logger<di_log::log_printer<78ul>>::logger(buf, &v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"'", 1);
    v5 = *(char *)(v2 + 23);
    if (v5 >= 0)
      v6 = v2;
    else
      v6 = *(_QWORD *)v2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(v2 + 23);
    else
      v7 = *(_QWORD *)(v2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"' opened successfully with flags ", 33);
    v8 = v30;
    *(_DWORD *)((char *)v31 + *(_QWORD *)(v30 - 24)) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(v30 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v31 + *(_QWORD *)(v8 - 24)) |= 0x200u;
    std::ostream::operator<<();
    v9 = v30;
    *(_DWORD *)((char *)v31 + *(_QWORD *)(v30 - 24)) &= ~0x200u;
    *(_DWORD *)((char *)v31 + *(_QWORD *)(v9 - 24)) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(v9 - 24)) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf((uint64_t)buf);
    MEMORY[0x2199A89AC](v31);
  }
  return v4;
}

void sub_212FBAA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<78ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<78ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0F988;
  a1[45] = &unk_24CF0FA88;
  a1[46] = &unk_24CF0FAB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0F988;
  a1[45] = &unk_24CF0FA10;
  a1[46] = &unk_24CF0FA38;
  return a1;
}

void sub_212FBAB3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<78ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t FileDescriptorWrapper::open_from(int a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *exception;
  int *v15;
  __int128 *v16;
  uint64_t v17;
  int *v18;
  _QWORD v19[45];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  unsigned __int8 v24;
  _DWORD v25[2];
  uint64_t v26;

  if (*(char *)(a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  v25[1] = 438;
  v26 = v5;
  v25[0] = a3 | 0x100;
  v6 = fcntl(a1, 56, v25);
  if ((_DWORD)v6 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    v15 = __error();
    FileDescriptorWrapper::handle_open_from_error_message(a1, a2, *v15, &v22);
    if ((v24 & 0x80u) == 0)
      v16 = &v22;
    else
      v16 = (__int128 *)v22;
    if ((v24 & 0x80u) == 0)
      v17 = v24;
    else
      v17 = *((_QWORD *)&v22 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v16, v17);
    v18 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v19, *v18);
  }
  v7 = v6;
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v22 = "int FileDescriptorWrapper::open_from(int, const std::string &, int)";
    *((_QWORD *)&v22 + 1) = 36;
    v23 = 2;
    di_log::logger<di_log::log_printer<95ul>>::logger(v19, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"'", 1);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"' opened successfully with flags ", 33);
    v11 = v20;
    *(_DWORD *)((char *)&v20 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)&v20 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v20 + *(_QWORD *)(v11 - 24) + 8) |= 0x200u;
    std::ostream::operator<<();
    v12 = v20;
    *(_DWORD *)((char *)&v20 + *(_QWORD *)(v20 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v20 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)&v20 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x2199A89AC](&v21);
  }
  return v7;
}

void sub_212FBADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v5 - 65) < 0)
  {
    operator delete(*(void **)(v5 - 88));
    std::ostringstream::~ostringstream((uint64_t)va);
    if ((v4 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    std::ostringstream::~ostringstream((uint64_t)va);
    if (!v4)
      goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *di_log::logger<di_log::log_printer<95ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<95ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0FBA8;
  a1[45] = &unk_24CF0FCA8;
  a1[46] = &unk_24CF0FCD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0FBA8;
  a1[45] = &unk_24CF0FC30;
  a1[46] = &unk_24CF0FC58;
  return a1;
}

void sub_212FBAEC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<95ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void FileDescriptorWrapper::~FileDescriptorWrapper(FileDescriptorWrapper *this)
{
  int v1;
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24CF0F430;
  v1 = *((_DWORD *)this + 2);
  if (v1 != -1)
  {
    close(v1);
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v2 = "FileDescriptorWrapper::~FileDescriptorWrapper()";
      *((_QWORD *)&v2 + 1) = 45;
      v3 = 2;
      di_log::logger<di_log::log_printer<103ul>>::logger(v4, &v2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"File descriptor ", 16);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" closed", 7);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf((uint64_t)v4);
      MEMORY[0x2199A89AC](&v6);
    }
  }
}

{
  FileDescriptorWrapper::~FileDescriptorWrapper(this);
  JUMPOUT(0x2199A8A18);
}

_QWORD *di_log::logger<di_log::log_printer<103ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<103ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0FDC8;
  a1[45] = &unk_24CF0FEC8;
  a1[46] = &unk_24CF0FEF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0FDC8;
  a1[45] = &unk_24CF0FE50;
  a1[46] = &unk_24CF0FE78;
  return a1;
}

void sub_212FBB088(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<103ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void FileDescriptor::FileDescriptor(FileDescriptor *this, int a2, char a3)
{
  *((_DWORD *)this + 2) = a2;
  *(_QWORD *)this = &off_24CEEEE20;
  *((_BYTE *)this + 12) = a3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  FileDescriptor::update_info(this);
}

void sub_212FBB154(_Unwind_Exception *a1)
{
  FileDescriptorWrapper *v1;

  FileDescriptorWrapper::~FileDescriptorWrapper(v1);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptor::update_info(FileDescriptor *this)
{
  uint64_t result;
  mach_port_t v3;
  const __CFDictionary *v4;
  io_service_t MatchingService;
  io_registry_entry_t v6;
  const __CFAllocator *v7;
  CFTypeRef CFProperty;
  CFTypeID TypeID;
  unint64_t v10;
  CFTypeRef v11;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  __darwin_ino64_t st_ino;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::error_category *v19;
  DiskImagesRuntimeException *exception;
  int *v21;
  void *v22;
  DiskImagesRuntimeException *v23;
  int *v24;
  void *v25;
  DiskImagesRuntimeException *v26;
  void *v27;
  cf::CFUtilException *v28;
  CFTypeID v29;
  void *v30;
  cf::CFUtilException *v31;
  cf::CFUtilException *v32;
  CFTypeRef v33;
  CFTypeRef cf;
  stat v35;
  uint64_t valuePtr;
  char bsdName[1024];
  char v38[1024];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  memset(&v35, 0, sizeof(v35));
  result = FileDescriptor::get_stat(this, &v35);
  if ((v35.st_mode & 0xB000) != 0x2000)
  {
    *((_QWORD *)this + 2) = v35.st_size;
    goto LABEL_17;
  }
  bzero(v38, 0x400uLL);
  bzero(bsdName, 0x400uLL);
  if (fcntl(*((_DWORD *)this + 2), 50, v38) < 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v21 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "get path failed", *v21);
  }
  if (!basename_r(v38, bsdName))
  {
    v23 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v24 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(v23, "basename_r failed", *v24);
  }
  v3 = *MEMORY[0x24BDD8B18];
  v4 = IOBSDNameMatching(*MEMORY[0x24BDD8B18], 0, bsdName);
  MatchingService = IOServiceGetMatchingService(v3, v4);
  v6 = MatchingService;
  if (!MatchingService)
  {
    v26 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(v26, "device not found in registry", 0x13u);
  }
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  CFProperty = IORegistryEntryCreateCFProperty(MatchingService, CFSTR("Size"), (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  TypeID = CFNumberGetTypeID();
  if (CFProperty)
  {
    v10 = TypeID;
    if (CFGetTypeID(CFProperty) != TypeID)
    {
      v28 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      v29 = CFGetTypeID(CFProperty);
      v30 = (void *)cf::CFUtilException::CFUtilException(v28, v29, v10);
    }
  }
  cf = CFProperty;
  v11 = IORegistryEntryCreateCFProperty(v6, CFSTR("Preferred Block Size"), v7, 0);
  v12 = CFNumberGetTypeID();
  if (v11 && CFGetTypeID(v11) != v12)
  {
    v31 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v11);
    v32 = cf::CFUtilException::CFUtilException(v31);
  }
  v33 = v11;
  IOObjectRelease(v6);
  if (!cf || (v13 = CFGetTypeID(cf), v13 != CFNumberGetTypeID()))
  {
    v16 = "device size not found in registry";
LABEL_20:
    v17 = 19;
    goto LABEL_22;
  }
  valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr))
  {
LABEL_21:
    v16 = "Failed converting CFNumber to longlong";
    v17 = 22;
LABEL_22:
    v18 = __cxa_allocate_exception(0x40uLL);
    *v18 = &off_24CF07908;
    v19 = std::generic_category();
    v18[1] = v17;
    v18[2] = v19;
    *((_BYTE *)v18 + 24) = 0;
    *((_BYTE *)v18 + 48) = 0;
    v18[7] = v16;
  }
  *((_QWORD *)this + 2) = valuePtr;
  if (!v33 || (v14 = CFGetTypeID(v33), v14 != CFNumberGetTypeID()))
  {
    v16 = "device block size not found in registry";
    goto LABEL_20;
  }
  valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)v33, kCFNumberLongLongType, &valuePtr))
    goto LABEL_21;
  *((_QWORD *)this + 3) = valuePtr;
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&v33);
  result = (uint64_t)CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&cf);
LABEL_17:
  st_ino = v35.st_ino;
  *((_QWORD *)this + 4) = v35.st_dev;
  *((_QWORD *)this + 5) = st_ino;
  return result;
}

void sub_212FBB528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13)
{
  void *v13;

  __cxa_free_exception(v13);
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&a13);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptor::get_stat@<X0>(FileDescriptor *this@<X0>, stat *a2@<X8>)
{
  uint64_t result;
  DiskImagesRuntimeException *exception;
  int *v4;
  void *v5;

  result = fstat(*((_DWORD *)this + 2), a2);
  if ((_DWORD)result)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v4 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "fstat failed", *v4);
  }
  return result;
}

void sub_212FBB5E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptor::get_statfs@<X0>(FileDescriptor *this@<X0>, statfs *a2@<X8>)
{
  uint64_t result;
  DiskImagesRuntimeException *exception;
  int *v4;
  void *v5;

  result = fstatfs(*((_DWORD *)this + 2), a2);
  if ((result & 0x80000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v4 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "fstatfs failed", *v4);
  }
  return result;
}

void sub_212FBB654(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL FileDescriptor::is_device(FileDescriptor *this, const stat *a2)
{
  return (*((_WORD *)this + 2) & 0xB000) == 0x2000;
}

BOOL FileDescriptor::is_device(FileDescriptor *this)
{
  stat v2;

  FileDescriptor::get_stat(this, &v2);
  return (v2.st_mode & 0xB000) == 0x2000;
}

uint64_t FileDescriptor::get_mounted_on_fs(FileDescriptor *this)
{
  FileDescriptor *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  statfs __src;
  char __dst[2168];
  uint64_t v12;

  v1 = (FileDescriptor *)MEMORY[0x24BDAC7A8](this);
  v3 = v2;
  v12 = *MEMORY[0x24BDAC8D0];
  FileDescriptor::get_statfs(v1, &__src);
  memcpy(__dst, &__src, sizeof(__dst));
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v3, &__dst[72]);
  *(_QWORD *)&v8 = "FileDescriptor::get_mounted_on_fs() const";
  *((_QWORD *)&v8 + 1) = 33;
  v9 = 2;
  di_log::logger<di_log::log_printer<159ul>>::logger(&__src, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src.f_mntonname[272], (uint64_t)"File system is ", 15);
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src.f_mntonname[272], v5, v6);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf((uint64_t)&__src);
  return MEMORY[0x2199A89AC](&__src.f_mntonname[280]);
}

void sub_212FBB7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(exception_object);
}

BOOL FileDescriptor::mounted_on_same_fs(FileDescriptor *this, const FileDescriptor *a2, const FileDescriptor *a3)
{
  int32_t v4;
  int32_t v5;
  statfs v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  FileDescriptor::get_statfs(this, &v8);
  v4 = v8.f_fsid.val[0];
  v5 = v8.f_fsid.val[1];
  FileDescriptor::get_statfs(a2, &v8);
  return v4 == v8.f_fsid.val[0] && v5 == v8.f_fsid.val[1];
}

void FileLocal::shared_state_t::init_unmap_zeros(FileLocal::shared_state_t *this)
{
  unint64_t *v2;
  unint64_t v3;
  FileLocal::shared_state_t *v4;
  FileLocal::shared_state_t ***v5;
  FileLocal::shared_state_t **v6;

  v2 = (unint64_t *)((char *)this + 144);
  v4 = this;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<FileLocal::shared_state_t::init_unmap_zeros(void)::$_0 &&>>);
  }
}

uint64_t FileLocal::unlink_from(int a1, uint64_t *a2)
{
  uint64_t *v2;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  if (fcntl(a1, 57, v2) < 0)
    return -*__error();
  else
    return 0;
}

off_t FileLocal::get_file_size_from(int a1, uint64_t a2)
{
  uint64_t v2;
  FileLocal *v4;
  int v5;
  uint64_t v6;
  void *exception;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD v13[33];
  stat v14;

  v2 = a2;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  if (!fstatat(a1, (const char *)a2, &v14, 32))
    return v14.st_size;
  if (*__error() != 13 && *__error() != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Cannot stat ", 12);
    v9 = *(char *)(v2 + 23);
    if (v9 >= 0)
      v10 = v2;
    else
      v10 = *(_QWORD *)v2;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v2 + 23);
    else
      v11 = *(_QWORD *)(v2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v10, v11);
    v12 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v13, *v12);
  }
  v4 = (FileLocal *)operator new();
  v5 = FileDescriptorWrapper::open_from(a1, v2, 0);
  FileLocal::FileLocal(v4, v5, 0, 0);
  v6 = (*(uint64_t (**)(FileLocal *))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(FileLocal *))(*(_QWORD *)v4 + 8))(v4);
  return v6;
}

void sub_212FBBAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FileLocal::write(uint64_t a1, uint64_t a2)
{
  ssize_t v4;
  ssize_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  uint64_t v15;

  v4 = pwrite(**(_DWORD **)(a1 + 56), *(const void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v5 = v4;
  if (v4 < 0 || v4 != *(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)&v11 = "int FileLocal::write(const sg_entry &)";
    *((_QWORD *)&v11 + 1) = 20;
    v12 = 16;
    di_log::logger<di_log::log_printer<298ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Error writing file @ ", 21);
    operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x2199A89AC](&v15);
    if (v5 == -1)
      return -*__error();
    else
      return 4294967291;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24) + v4;
    v7 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 64);
    v8 = atomic_load(v7);
    if (v8 < v6)
    {
      do
      {
        v9 = __ldaxr(v7);
        if (v9 == v8)
        {
          if (!__stlxr(v6, v7))
            return v5;
        }
        else
        {
          __clrex();
        }
        v8 = v9;
      }
      while (v9 < v6);
    }
  }
  return v5;
}

void sub_212FBBCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<298ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<298ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<298ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF0FFE8;
  a1[45] = &unk_24CF100E8;
  a1[46] = &unk_24CF10110;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF0FFE8;
  a1[45] = &unk_24CF10070;
  a1[46] = &unk_24CF10098;
  return a1;
}

void sub_212FBBD68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<298ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t FileLocal::read(uint64_t a1, uint64_t a2)
{
  ssize_t v3;
  ssize_t v4;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;

  v3 = pread(**(_DWORD **)(a1 + 56), *(void **)a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v4 = v3;
  if (v3 < 0 || v3 != *(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)&v6 = "int FileLocal::read(const sg_entry &)";
    *((_QWORD *)&v6 + 1) = 19;
    v7 = 16;
    di_log::logger<di_log::log_printer<313ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Error reading file @ ", 21);
    operator<<(&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x2199A89AC](&v10);
    if (v4 == -1)
      return -*__error();
    else
      return 4294967291;
  }
  return v4;
}

void sub_212FBBEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<313ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<313ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<313ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF10208;
  a1[45] = &unk_24CF10308;
  a1[46] = &unk_24CF10330;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF10208;
  a1[45] = &unk_24CF10290;
  a1[46] = &unk_24CF102B8;
  return a1;
}

void sub_212FBBF8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<313ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t FileLocal::truncate(int **this, unint64_t a2)
{
  unint64_t v4;
  ssize_t v5;
  ssize_t v6;
  uint64_t result;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  _BYTE v12[159];
  char __buf;

  v4 = (*((uint64_t (**)(int **))*this + 5))(this);
  if (v4 < a2)
  {
    __buf = 0;
    v5 = pwrite(*this[7], &__buf, 1uLL, a2 - 1);
    if (v5 != 1)
    {
      v6 = v5;
      *(_QWORD *)&v8 = "int FileLocal::truncate(uint64_t)";
      *((_QWORD *)&v8 + 1) = 23;
      v9 = 16;
      di_log::logger<di_log::log_printer<331ul>>::logger(v10, &v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Failed to increase file size, pwrite returned ", 46);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)" errno: ", 8);
      __error();
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf((uint64_t)v10);
      MEMORY[0x2199A89AC](v12);
      if (v6 != -1)
        return 4294967291;
      return -*__error();
    }
LABEL_7:
    result = 0;
    atomic_store(a2, (unint64_t *)this[5] + 8);
    return result;
  }
  if (v4 <= a2 || ftruncate(*this[7], a2) != -1)
    goto LABEL_7;
  *(_QWORD *)&v8 = "int FileLocal::truncate(uint64_t)";
  *((_QWORD *)&v8 + 1) = 23;
  v9 = 16;
  di_log::logger<di_log::log_printer<336ul>>::logger(v10, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"ftruncate failed, errno: ", 25);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf((uint64_t)v10);
  MEMORY[0x2199A89AC](v12);
  return -*__error();
}

void sub_212FBC1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<336ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<331ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<331ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF10428;
  a1[45] = &unk_24CF10528;
  a1[46] = &unk_24CF10550;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF10428;
  a1[45] = &unk_24CF104B0;
  a1[46] = &unk_24CF104D8;
  return a1;
}

void sub_212FBC258(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<331ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<336ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<336ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF10648;
  a1[45] = &unk_24CF10748;
  a1[46] = &unk_24CF10770;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF10648;
  a1[45] = &unk_24CF106D0;
  a1[46] = &unk_24CF106F8;
  return a1;
}

void sub_212FBC340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<336ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t FileLocal::flush(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  int *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  int v17;
  _QWORD v18[45];
  uint64_t v19;
  _BYTE v20[152];

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v16 = "int FileLocal::flush(di_flush_mode)";
    *((_QWORD *)&v16 + 1) = 20;
    v17 = 2;
    di_log::logger<di_log::log_printer<370ul>>::logger(v18, &v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Calling ", 8);
    operator<<(&v19, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" on ", 4);
    operator<<((uint64_t)&v19, a1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf((uint64_t)v18);
    MEMORY[0x2199A89AC](v20);
  }
  if (a2 == 1)
  {
    if (fsync(**(_DWORD **)(a1 + 56)) == -1)
    {
      v4 = -*__error();
      goto LABEL_6;
    }
    return 0;
  }
  if (a2 == 2)
    v5 = 2;
  else
    v5 = 1;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) & v5) != 0)
  {
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v16 = "int FileLocal::flush(di_flush_mode)";
      *((_QWORD *)&v16 + 1) = 20;
      v17 = 2;
      di_log::logger<di_log::log_printer<381ul>>::logger(v18, &v16);
      operator<<(&v19, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" is not supported", 17);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf((uint64_t)v18);
      MEMORY[0x2199A89AC](v20);
    }
    return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 16))(a1, a2 != 2);
  }
  v7 = **(_DWORD **)(a1 + 56);
  if (a2 == 2)
    v8 = fcntl(v7, 51, 0);
  else
    v8 = fcntl(v7, 85, 0);
  if (v8 != -1)
    return 0;
  v10 = __error();
  v4 = -*v10;
  v11 = 45 - *v10;
  if (v11 <= 0x17 && ((1 << v11) & 0x900001) != 0)
  {
    v12 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 56);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 | v5, v12));
    *(_QWORD *)&v16 = "int FileLocal::flush(di_flush_mode)";
    *((_QWORD *)&v16 + 1) = 20;
    v17 = 0;
    di_log::logger<di_log::log_printer<388ul>>::logger(v18, &v16);
    operator<<(&v19, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" is not supported (err code ", 28);
    __error();
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)")", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf((uint64_t)v18);
    MEMORY[0x2199A89AC](v20);
    if (a2 == 2)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 0);
    v14 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 56);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 | 2, v14));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 1);
  }
LABEL_6:
  if ((_DWORD)v4)
  {
    *(_QWORD *)&v16 = "int FileLocal::flush(di_flush_mode)";
    *((_QWORD *)&v16 + 1) = 20;
    v17 = 16;
    di_log::logger<di_log::log_printer<398ul>>::logger(v18, &v16);
    operator<<(&v19, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" failed wih error ", 18);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf((uint64_t)v18);
    MEMORY[0x2199A89AC](v20);
  }
  return v4;
}

void sub_212FBC728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  di_log::logger<di_log::log_printer<388ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<370ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<370ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF10868;
  a1[45] = &unk_24CF10968;
  a1[46] = &unk_24CF10990;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF10868;
  a1[45] = &unk_24CF108F0;
  a1[46] = &unk_24CF10918;
  return a1;
}

void sub_212FBC7F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<370ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<388ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<388ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF10A88;
  a1[45] = &unk_24CF10B88;
  a1[46] = &unk_24CF10BB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF10A88;
  a1[45] = &unk_24CF10B10;
  a1[46] = &unk_24CF10B38;
  return a1;
}

void sub_212FBC8D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<388ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

size_t FileLocal::unmap_range(FileLocal *this, unint64_t a2, size_t a3)
{
  uint64_t v6;
  size_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  ssize_t v17;
  size_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  size_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  int v35;
  __int128 v36;
  size_t v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BYTE v45[152];

  v6 = *((_QWORD *)this + 5);
  FileLocal::shared_state_t::init_unmap_zeros((FileLocal::shared_state_t *)v6);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 88);
  v9 = *((_QWORD *)this + 5);
  FileLocal::shared_state_t::init_unmap_zeros((FileLocal::shared_state_t *)v9);
  if (!*(_BYTE *)(v9 + 136) || !v8)
  {
    *(_QWORD *)&v36 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
    *((_QWORD *)&v36 + 1) = 26;
    LODWORD(v37) = 0;
    di_log::logger<di_log::log_printer<411ul>>::logger(&v38, &v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"fd block size retrieval failed (err code ", 41);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)")", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf((uint64_t)&v38);
    goto LABEL_14;
  }
  v10 = *(char **)(v9 + 96);
  v11 = (a2 + v7 - 1) / v7 * v7;
  v12 = a3 + a2;
  if (a2 <= v11 && v11 < v12)
  {
    v14 = a2 - v11 + a3;
    v15 = v14 / v7 * v7;
    v16 = v14 == v14 % v7 ? 0 : (a2 + v7 - 1) / v7 * v7;
    if (v14 != v14 % v7)
    {
      *(_QWORD *)&v36 = 0;
      *((_QWORD *)&v36 + 1) = v16;
      v37 = v14 / v7 * v7;
      v19 = fcntl(**((_DWORD **)this + 7), 99, &v36);
      if (!(_DWORD)v19)
      {
        v20 = v16 - a2;
        if (v16 != a2)
        {
          v21 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
          v38 = v10;
          v39 = v21;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(p_shared_owners);
            while (__stxr(v23 + 1, p_shared_owners));
          }
          v40 = v16 - a2;
          v41 = a2;
          v42 = v16 - a2;
          v43 = 0;
          v7 = (*(uint64_t (**)(FileLocal *, char **))(*(_QWORD *)this + 80))(this, &v38);
          v24 = v39;
          if (v39)
          {
            v25 = (unint64_t *)&v39->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(_QWORD *)&v34 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((_QWORD *)&v34 + 1) = 26;
            v35 = 16;
            di_log::logger<di_log::log_printer<432ul>>::logger(&v38, &v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Write zeros to unmap unaligned start region failed (err code", 60);
            __error();
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)")", 1);
            di_log::logger<di_log::log_printer<432ul>>::~logger((uint64_t)&v38);
            return v7;
          }
        }
        if (v15 + v16 < v12)
        {
          v27 = a3 - (v20 + v15);
          v28 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
          v38 = v10;
          v39 = v28;
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v40 = v27;
          v41 = v15 + v16;
          v42 = v27;
          v43 = 0;
          v7 = (*(uint64_t (**)(FileLocal *, char **))(*(_QWORD *)this + 80))(this, &v38);
          v31 = v39;
          if (v39)
          {
            v32 = (unint64_t *)&v39->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(_QWORD *)&v34 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((_QWORD *)&v34 + 1) = 26;
            v35 = 16;
            di_log::logger<di_log::log_printer<441ul>>::logger(&v38, &v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Write zeros to unmap unaligned end region failed (err code", 58);
            __error();
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)")", 1);
            di_log::logger<di_log::log_printer<441ul>>::~logger((uint64_t)&v38);
            return v7;
          }
        }
        return 0;
      }
      v7 = v19;
      *(_QWORD *)&v34 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
      *((_QWORD *)&v34 + 1) = 26;
      v35 = 0;
      di_log::logger<di_log::log_printer<424ul>>::logger(&v38, &v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Punch hole is not supported (err code ", 38);
      __error();
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)")", 1);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf((uint64_t)&v38);
LABEL_14:
      MEMORY[0x2199A89AC](v45);
      return v7;
    }
  }
  v17 = FileLocal::write_zeros(this, a2, a3, v7, v10);
  if (v17 == a3)
    return 0;
  v7 = v17;
  *(_QWORD *)&v36 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
  *((_QWORD *)&v36 + 1) = 26;
  LODWORD(v37) = 16;
  di_log::logger<di_log::log_printer<449ul>>::logger(&v38, &v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Write zeros to unmap region failed (err code", 44);
  __error();
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)")", 1);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf((uint64_t)&v38);
  MEMORY[0x2199A89AC](v45);
  if ((v7 & 0x8000000000000000) == 0)
    return 4294967291;
  else
    return v7;
}

void sub_212FBCDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<411ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<411ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF10CA8;
  a1[45] = &unk_24CF10DA8;
  a1[46] = &unk_24CF10DD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF10CA8;
  a1[45] = &unk_24CF10D30;
  a1[46] = &unk_24CF10D58;
  return a1;
}

void sub_212FBCEE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<411ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<424ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<424ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF10EC8;
  a1[45] = &unk_24CF10FC8;
  a1[46] = &unk_24CF10FF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF10EC8;
  a1[45] = &unk_24CF10F50;
  a1[46] = &unk_24CF10F78;
  return a1;
}

void sub_212FBCFC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<424ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<432ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<432ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF110E8;
  a1[45] = &unk_24CF111E8;
  a1[46] = &unk_24CF11210;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF110E8;
  a1[45] = &unk_24CF11170;
  a1[46] = &unk_24CF11198;
  return a1;
}

void sub_212FBD0B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<432ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<441ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<441ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF11308;
  a1[45] = &unk_24CF11408;
  a1[46] = &unk_24CF11430;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF11308;
  a1[45] = &unk_24CF11390;
  a1[46] = &unk_24CF113B8;
  return a1;
}

void sub_212FBD198(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<441ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

ssize_t FileLocal::write_zeros(FileLocal *this, off_t a2, size_t a3, size_t a4, char *a5)
{
  size_t v7;
  iovec *v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  iovec *v16;
  iovec *v17;
  iovec *v18;
  iovec *v19;
  ssize_t v20;
  iovec *v22;
  iovec *v23;
  iovec *v24;

  v7 = a3;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<iovec>::reserve((void **)&v22, (a3 + a4 - 1) / a4 * a4);
  if (v7)
  {
    v10 = v23;
    do
    {
      if (v7 >= a4)
        v11 = a4;
      else
        v11 = v7;
      if (v10 >= v24)
      {
        v12 = v10 - v22;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<iovec>::__throw_length_error[abi:ne180100]();
        v13 = ((char *)v24 - (char *)v22) >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)((char *)v24 - (char *)v22) >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v24, v14);
        else
          v15 = 0;
        v16 = (iovec *)&v15[16 * v12];
        v16->iov_base = a5;
        v16->iov_len = v11;
        v18 = v22;
        v17 = v23;
        v19 = v16;
        if (v23 != v22)
        {
          do
          {
            v19[-1] = v17[-1];
            --v19;
            --v17;
          }
          while (v17 != v18);
          v17 = v22;
        }
        v10 = v16 + 1;
        v22 = v19;
        v23 = v16 + 1;
        v24 = (iovec *)&v15[16 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        v10->iov_base = a5;
        v10->iov_len = v11;
        ++v10;
      }
      v23 = v10;
      v7 -= v11;
    }
    while (v7);
  }
  else
  {
    v10 = v23;
  }
  v20 = pwritev(**((_DWORD **)this + 7), v22, (unint64_t)((char *)v10 - (char *)v22) >> 4, a2);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  return v20;
}

void sub_212FBD390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<449ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<449ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF11528;
  a1[45] = &unk_24CF11628;
  a1[46] = &unk_24CF11650;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF11528;
  a1[45] = &unk_24CF115B0;
  a1[46] = &unk_24CF115D8;
  return a1;
}

void sub_212FBD438(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<449ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void std::vector<iovec>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t FileLocal::lock(FileLocal *this)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  _BYTE v12[152];

  v1 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v1 + 48)
    || ((*(uint64_t (**)(FileLocal *))(*(_QWORD *)this + 48))(this) & 1) == 0
    && FileDescriptor::is_mounted_on_smb(*((FileDescriptor **)this + 5)))
  {
    return 0;
  }
  v4 = (*(uint64_t (**)(FileLocal *))(*(_QWORD *)this + 48))(this);
  if (v4)
    v5 = 6;
  else
    v5 = 5;
  if (!flock(**((_DWORD **)this + 7), v5))
  {
    *(_QWORD *)&v8 = "int FileLocal::lock()";
    *((_QWORD *)&v8 + 1) = 19;
    v9 = 0;
    di_log::logger<di_log::log_printer<485ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)") is locked", 11);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x2199A89AC](v12);
    result = 0;
    *(_BYTE *)(v1 + 48) = 1;
    return result;
  }
  if (*__error() != 35)
  {
    *(_QWORD *)&v8 = "int FileLocal::lock()";
    *((_QWORD *)&v8 + 1) = 19;
    v9 = 0;
    di_log::logger<di_log::log_printer<492ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"flock returned errno ", 21);
    __error();
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)", keeping file unlocked", 23);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x2199A89AC](v12);
    return 0;
  }
  *(_QWORD *)&v8 = "int FileLocal::lock()";
  *((_QWORD *)&v8 + 1) = 19;
  v9 = 16;
  di_log::logger<di_log::log_printer<489ul>>::logger(v10, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Cannot acquire ", 15);
  if (v4)
    v6 = "exclusive";
  else
    v6 = "shared";
  if (v4)
    v7 = 9;
  else
    v7 = 6;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)" lock, errno ", 13);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf((uint64_t)v10);
  MEMORY[0x2199A89AC](v12);
  return -*__error();
}

void sub_212FBD7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<489ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<489ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<489ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF11748;
  a1[45] = &unk_24CF11848;
  a1[46] = &unk_24CF11870;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF11748;
  a1[45] = &unk_24CF117D0;
  a1[46] = &unk_24CF117F8;
  return a1;
}

void sub_212FBD870(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<489ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t `non-virtual thunk to'FileLocal::lock(FileLocal *this)
{
  return FileLocal::lock((FileLocal *)((char *)this - 24));
}

uint64_t FileLocal::unlock_all(FileLocal *this)
{
  uint64_t v1;
  uint64_t result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  _BYTE v7[152];

  v1 = *((_QWORD *)this + 5);
  if (!*(_BYTE *)(v1 + 48))
    return 0;
  if (flock(**((_DWORD **)this + 7), 8))
  {
    *(_QWORD *)&v3 = "int FileLocal::unlock_all()";
    *((_QWORD *)&v3 + 1) = 25;
    v4 = 16;
    di_log::logger<di_log::log_printer<502ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Failed unlocking file with fd ", 30);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x2199A89AC](v7);
    return -*__error();
  }
  else
  {
    *(_QWORD *)&v3 = "int FileLocal::unlock_all()";
    *((_QWORD *)&v3 + 1) = 25;
    v4 = 0;
    di_log::logger<di_log::log_printer<505ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)") is unlocked", 13);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x2199A89AC](v7);
    result = 0;
    *(_BYTE *)(v1 + 48) = 0;
  }
  return result;
}

void sub_212FBDA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<505ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<502ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<502ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF11968;
  a1[45] = &unk_24CF11A68;
  a1[46] = &unk_24CF11A90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF11968;
  a1[45] = &unk_24CF119F0;
  a1[46] = &unk_24CF11A18;
  return a1;
}

void sub_212FBDB00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<502ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t `non-virtual thunk to'FileLocal::unlock_all(FileLocal *this)
{
  return FileLocal::unlock_all((FileLocal *)((char *)this - 24));
}

uint64_t FileLocal::is_locked(FileLocal *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 5) + 48);
}

uint64_t `non-virtual thunk to'FileLocal::is_locked(FileLocal *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48);
}

uint64_t FileLocal::remove_lock_ownership(FileLocal *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 5);
  result = *(unsigned __int8 *)(v1 + 48);
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

_QWORD *FileLocal::run_futures(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  off_t v13;
  ssize_t v14;
  uint64_t v15;
  int v16;
  ssize_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  size_t *p_iov_len;
  ssize_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  __int128 v39;
  iovec **v40;
  iovec *v41;
  __int128 v42;
  _QWORD v43[34];

  v43[32] = *MEMORY[0x24BDAC8D0];
  v1 = this[9];
  if (v1)
  {
    v2 = this;
    v38 = *(unsigned __int8 *)(this[5] + 49);
    v37 = this + 8;
    v3 = (_QWORD *)this[8];
    v4 = v3;
    while (1)
    {
      v41 = (iovec *)v43;
      v5 = v4[2];
      v43[0] = *v4;
      v43[1] = v5;
      v42 = xmmword_212FF5A60;
      v6 = &v3[8 * v1];
      v40 = &v41;
      if (v4 == v6)
      {
        v7 = 1;
        v8 = (unint64_t)v4;
      }
      else
      {
        v7 = 1;
        v8 = (unint64_t)v4;
        if (v4 + 8 != v6)
        {
          v9 = v4;
          while (v9[2] + v9[3] == v9[11] && *((_DWORD *)v9 + 12) == *((_DWORD *)v9 + 28))
          {
            *(_QWORD *)&v39 = v9[8];
            *((_QWORD *)&v39 + 1) = v9[10];
            std::back_insert_iterator<boost::container::small_vector<iovec,16ul,void,void>>::operator=[abi:ne180100]((uint64_t *)&v40, &v39);
            v8 = (unint64_t)(v9 + 8);
            v10 = v9 + 16;
            v9 += 8;
            if (v10 == v6)
              goto LABEL_11;
          }
          v8 = (unint64_t)v9;
LABEL_11:
          v7 = v42;
        }
      }
      v11 = v8 + 64;
      v12 = *((_DWORD *)v4 + 12);
      if (v12 == 1)
      {
        v15 = v4[3];
        v16 = *(_DWORD *)v2[7];
        if (v7 == 1)
          v17 = pwrite(v16, v41->iov_base, v41->iov_len, v4[3]);
        else
          v17 = pwritev(v16, v41, (v11 - (unint64_t)v4) >> 6, v4[3]);
        v19 = v17;
        if (v17 < 1)
          goto LABEL_45;
        v28 = v17 + v15;
        v29 = (unint64_t *)(v2[5] + 64);
        v30 = atomic_load(v29);
        if (v30 < v17 + v15)
        {
          do
          {
            v31 = __ldaxr(v29);
            if (v31 == v30)
            {
              if (!__stlxr(v28, v29))
                goto LABEL_45;
            }
            else
            {
              __clrex();
            }
            v30 = v31;
          }
          while (v31 < v28);
          goto LABEL_45;
        }
      }
      else
      {
        if (!v12)
        {
          v13 = v4[3];
          if (v7 == 1)
          {
            v14 = pread(*(_DWORD *)v2[7], v41->iov_base, v41->iov_len, v4[3]);
LABEL_44:
            v19 = v14;
LABEL_45:
            if (v19 == -1)
              v19 = -(uint64_t)*__error();
            goto LABEL_47;
          }
          if (!v38)
          {
            v14 = preadv(*(_DWORD *)v2[7], v41, (v11 - (unint64_t)v4) >> 6, v13);
            goto LABEL_44;
          }
          v18 = v11 - (_QWORD)v4;
          if ((v11 - (_QWORD)v4) << 26)
          {
            v19 = 0;
            v20 = 0;
            v21 = *(_DWORD *)v2[7];
            v22 = 16 * (int)(v18 >> 6);
            p_iov_len = &v41->iov_len;
            do
            {
              if ((v20 & 0x8000000000000000) == 0)
              {
                v24 = pread(v21, (void *)*(p_iov_len - 1), *p_iov_len, v20 + v13);
                v25 = *p_iov_len;
                v26 = v19 + v24;
                v27 = -5;
                if (v24 == -1)
                  v27 = -1;
                if (v24 == v25)
                  v19 += v24;
                else
                  v19 = v27;
                if (v24 == v25)
                  v20 = v26;
                else
                  v20 = v27;
              }
              p_iov_len += 2;
              v22 -= 16;
            }
            while (v22);
            goto LABEL_45;
          }
        }
        v19 = 0;
      }
LABEL_47:
      v32 = v4 + 7;
      do
      {
        v33 = v19;
        if (v19 >= 1)
        {
          if (*(v32 - 5) >= v19)
            v33 = v19;
          else
            v33 = *(v32 - 5);
        }
        v34 = *v32;
        *(_DWORD *)v34 = v33;
        *(_BYTE *)(v34 + 4) = 1;
        lw_promise<int>::notify_future((uint64_t)v32);
        v19 -= v33 & ~(v33 >> 63);
        v35 = v32 + 8;
        v36 = v32 + 1;
        v32 += 8;
      }
      while ((unint64_t)v36 <= v8);
      if (*((_QWORD *)&v42 + 1))
      {
        if (v43 != (_QWORD *)v41)
          operator delete(v41);
      }
      v4 = v35 - 7;
      v3 = (_QWORD *)v2[8];
      v1 = v2[9];
      if (v35 - 7 == &v3[8 * v1])
        return boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(v37);
    }
  }
  return this;
}

void sub_212FBDEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (a18)
  {
    if (v18 != __p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL FileLocal::mounted_on_same_fs(FileDescriptor **this, const FileDescriptor **a2, const FileDescriptor *a3)
{
  return FileDescriptor::mounted_on_same_fs(this[5], a2[5], a3);
}

void PurgeableFileBackend::~PurgeableFileBackend(PurgeableFileBackend *this)
{
  std::__shared_weak_count *v2;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24CF0F458;
  *((_QWORD *)this + 3) = &unk_24CF0F538;
  *((_QWORD *)this + 4) = &unk_24CF0F570;
  if (futimes(**((_DWORD **)this + 7), 0))
  {
    *(_QWORD *)&v3 = "PurgeableFileBackend::~PurgeableFileBackend()";
    *((_QWORD *)&v3 + 1) = 43;
    v4 = 16;
    di_log::logger<di_log::log_printer<643ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"futimes failed on ", 18);
    operator<<((uint64_t)&v6, (uint64_t)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x2199A89AC](&v7);
  }
  *(_QWORD *)this = &off_24CF0F5C0;
  *((_QWORD *)this + 3) = &unk_24CF0F6A0;
  *((_QWORD *)this + 4) = &unk_24CF0F6D8;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  PurgeableFileBackend::~PurgeableFileBackend(this);
  JUMPOUT(0x2199A8A18);
}

_QWORD *di_log::logger<di_log::log_printer<643ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<643ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF11B88;
  a1[45] = &unk_24CF11C88;
  a1[46] = &unk_24CF11CB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF11B88;
  a1[45] = &unk_24CF11C10;
  a1[46] = &unk_24CF11C38;
  return a1;
}

void sub_212FBE0EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<643ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void `non-virtual thunk to'PurgeableFileBackend::~PurgeableFileBackend(PurgeableFileBackend *this)
{
  PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24));
}

{
  PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 32));
}

{
  PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24));
  JUMPOUT(0x2199A8A18);
}

{
  PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 32));
  JUMPOUT(0x2199A8A18);
}

uint64_t get_fd_from_backend(uint64_t a1)
{
  const void *v1;
  uint64_t (***v3)(_QWORD);
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v1 = *(const void **)a1;
  if (!*(_QWORD *)a1)
    return 0xFFFFFFFFLL;
  if (!v3)
  {
    if (v11)
    {
      v4 = *(std::__shared_weak_count **)(a1 + 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 176))(v11);
      if (v4)
      {
        v14 = (unint64_t *)&v4->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
          goto LABEL_13;
      }
      return v7;
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (**v3)(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

void sub_212FBE32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL FileLocal::supports_unmap(FileDescriptor **this)
{
  return FileDescriptor::is_mounted_on_apfs(this[5]);
}

unint64_t FileLocal::get_size(FileLocal *this)
{
  return atomic_load((unint64_t *)(*((_QWORD *)this + 5) + 64));
}

uint64_t FileLocal::is_writable(FileLocal *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 5) + 12);
}

_QWORD *FileLocal::name(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"file(", 5);
  v2 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)")", 1);
}

double FileLocal::getContext@<D0>(FileLocal *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,FileLocal&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

unint64_t FileLocal::future_read@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  const void *v6;
  uint64_t tagged_ptr_cond;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t result;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _OWORD v24[2];
  int v25;
  uint64_t *v26;
  _DWORD v27[10];
  uint64_t *v28;
  uint64_t *v29;

  LOBYTE(v22) = 0;
  BYTE4(v22) = 0;
  v23 = 0;
  *(_QWORD *)&v24[0] = ref::details::_get_tagged_ptr_lock((unint64_t)&v22, a2);
  tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v22, v6);
  v29 = &v22;
  *((_QWORD *)&v24[0] + 1) = tagged_ptr_cond;
  *(_QWORD *)&v24[1] = &v29;
  lw_future<int>::lw_future((unint64_t)v27, &v22);
  v8 = v29;
  v28 = v29;
  v29[4] = (uint64_t)&v28;
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v8 = v28;
  }
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a2 + 25);
  v24[0] = *((_OWORD *)a2 + 1);
  v25 = 0;
  v26 = v8;
  v28 = 0;
  v8[4] = (uint64_t)&v26;
  v13 = a1[9];
  v14 = a1[8] + (v13 << 6);
  if (v13 == a1[10])
  {
    boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(a1 + 8, v14, (const char *)1, (uint64_t)&v22, &v29);
    if (v26)
      v26[4] = 0;
  }
  else
  {
    *(_QWORD *)v14 = v9;
    *(_QWORD *)(v14 + 8) = v10;
    v22 = 0;
    v23 = 0;
    v15 = v24[0];
    *(_OWORD *)(v14 + 25) = *(_OWORD *)((char *)v24 + 9);
    *(_OWORD *)(v14 + 16) = v15;
    v16 = v25;
    *(_QWORD *)(v14 + 56) = v26;
    v17 = v14 + 56;
    *(_DWORD *)(v17 - 8) = v16;
    v26 = 0;
    *(_QWORD *)(*(_QWORD *)v17 + 32) = v17;
    ++a1[9];
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  result = lw_future<int>::lw_future(a3, v27);
  if (v28)
    v28[4] = 0;
  return result;
}

void sub_212FBE5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17)
    *(_QWORD *)(a17 + 32) = 0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23)
    *(_QWORD *)(a23 + 32) = 0;
  _Unwind_Resume(a1);
}

void sub_212FBE630()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 40))
    JUMPOUT(0x212FBE628);
  JUMPOUT(0x212FBE624);
}

unint64_t FileLocal::future_write@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  const void *v6;
  uint64_t tagged_ptr_cond;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t result;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _OWORD v24[2];
  int v25;
  uint64_t *v26;
  _DWORD v27[10];
  uint64_t *v28;
  uint64_t *v29;

  LOBYTE(v22) = 0;
  BYTE4(v22) = 0;
  v23 = 0;
  *(_QWORD *)&v24[0] = ref::details::_get_tagged_ptr_lock((unint64_t)&v22, a2);
  tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v22, v6);
  v29 = &v22;
  *((_QWORD *)&v24[0] + 1) = tagged_ptr_cond;
  *(_QWORD *)&v24[1] = &v29;
  lw_future<int>::lw_future((unint64_t)v27, &v22);
  v8 = v29;
  v28 = v29;
  v29[4] = (uint64_t)&v28;
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v8 = v28;
  }
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a2 + 25);
  v24[0] = *((_OWORD *)a2 + 1);
  v25 = 1;
  v26 = v8;
  v28 = 0;
  v8[4] = (uint64_t)&v26;
  v13 = a1[9];
  v14 = a1[8] + (v13 << 6);
  if (v13 == a1[10])
  {
    boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(a1 + 8, v14, (const char *)1, (uint64_t)&v22, &v29);
    if (v26)
      v26[4] = 0;
  }
  else
  {
    *(_QWORD *)v14 = v9;
    *(_QWORD *)(v14 + 8) = v10;
    v22 = 0;
    v23 = 0;
    v15 = v24[0];
    *(_OWORD *)(v14 + 25) = *(_OWORD *)((char *)v24 + 9);
    *(_OWORD *)(v14 + 16) = v15;
    v16 = v25;
    *(_QWORD *)(v14 + 56) = v26;
    v17 = v14 + 56;
    *(_DWORD *)(v17 - 8) = v16;
    v26 = 0;
    *(_QWORD *)(*(_QWORD *)v17 + 32) = v17;
    ++a1[9];
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  result = lw_future<int>::lw_future(a3, v27);
  if (v28)
    v28[4] = 0;
  return result;
}

void sub_212FBE7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17)
    *(_QWORD *)(a17 + 32) = 0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23)
    *(_QWORD *)(a23 + 32) = 0;
  _Unwind_Resume(a1);
}

void sub_212FBE814()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 40))
    JUMPOUT(0x212FBE80CLL);
  JUMPOUT(0x212FBE808);
}

uint64_t FileLocal::get_identifier(FileLocal *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 32);
}

uint64_t FileLocal::get_file_descriptor(FileLocal *this)
{
  return **((unsigned int **)this + 7);
}

void `non-virtual thunk to'FileLocal::~FileLocal(FileLocal *this)
{
  std::__shared_weak_count *v2;

  *((_QWORD *)this - 3) = &off_24CF0F5C0;
  *(_QWORD *)this = &unk_24CF0F6A0;
  *((_QWORD *)this + 1) = &unk_24CF0F6D8;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 40);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this - 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *((_QWORD *)this - 3) = &off_24CF0F5C0;
  *(_QWORD *)this = &unk_24CF0F6A0;
  *((_QWORD *)this + 1) = &unk_24CF0F6D8;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 40);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this - 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x2199A8A18);
}

{
  std::__shared_weak_count *v2;

  *((_QWORD *)this - 4) = &off_24CF0F5C0;
  *((_QWORD *)this - 1) = &unk_24CF0F6A0;
  *(_QWORD *)this = &unk_24CF0F6D8;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 32);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this - 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *((_QWORD *)this - 4) = &off_24CF0F5C0;
  *((_QWORD *)this - 1) = &unk_24CF0F6A0;
  *(_QWORD *)this = &unk_24CF0F6D8;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 32);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this - 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x2199A8A18);
}

uint64_t `non-virtual thunk to'FileLocal::get_file_descriptor(FileLocal *this)
{
  return **((unsigned int **)this + 3);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<66ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<66ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<66ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0F900;
  di_log::logger_buf<di_log::log_printer<66ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<66ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FBED68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<66ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 66;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 66;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<78ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<78ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<78ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0FB20;
  di_log::logger_buf<di_log::log_printer<78ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<78ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FBF354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<78ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 78;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 78;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<95ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<95ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<95ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0FD40;
  di_log::logger_buf<di_log::log_printer<95ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<95ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FBF940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<95ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 95;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 95;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<103ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<103ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<103ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF0FF60;
  di_log::logger_buf<di_log::log_printer<103ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<103ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FBFF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<103ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 103;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 103;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<298ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<298ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<298ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF10180;
  di_log::logger_buf<di_log::log_printer<298ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<298ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC0518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<298ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 298;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 298;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<313ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<313ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<313ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF103A0;
  di_log::logger_buf<di_log::log_printer<313ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<313ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC0B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<313ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 313;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 313;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<331ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<331ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<331ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF105C0;
  di_log::logger_buf<di_log::log_printer<331ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<331ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC10F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<331ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 331;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 331;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<336ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<336ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<336ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF107E0;
  di_log::logger_buf<di_log::log_printer<336ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<336ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC16DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<336ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 336;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 336;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<370ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<370ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<370ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF10A00;
  di_log::logger_buf<di_log::log_printer<370ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<370ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC1CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<370ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 370;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 370;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<388ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<388ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<388ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF10C20;
  di_log::logger_buf<di_log::log_printer<388ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<388ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC22B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<388ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 388;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 388;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<411ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<411ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<411ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF10E40;
  di_log::logger_buf<di_log::log_printer<411ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<411ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC28A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<411ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 411;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 411;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<424ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<424ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<424ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF11060;
  di_log::logger_buf<di_log::log_printer<424ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<424ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC2E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<424ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 424;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 424;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<432ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<432ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<432ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF11280;
  di_log::logger_buf<di_log::log_printer<432ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<432ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC3478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<432ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 432;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 432;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<441ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<441ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<441ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF114A0;
  di_log::logger_buf<di_log::log_printer<441ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<441ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC3A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<441ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 441;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 441;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<449ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<449ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<449ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF116C0;
  di_log::logger_buf<di_log::log_printer<449ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<449ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC4050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<449ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 449;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 449;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<489ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<489ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<489ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF118E0;
  di_log::logger_buf<di_log::log_printer<489ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<489ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC463C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<489ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 489;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 489;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<502ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<502ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<502ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF11B00;
  di_log::logger_buf<di_log::log_printer<502ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<502ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC4C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<502ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 502;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 502;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<643ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<643ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<643ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF11D20;
  di_log::logger_buf<di_log::log_printer<643ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<643ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212FC5214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<643ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 643;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 643;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,FileLocal&,void>(const FileLocal *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<FileLocal&,std::allocator<FileLocal>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_212FC5494(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

