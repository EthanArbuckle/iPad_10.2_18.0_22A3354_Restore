uint64_t PluginsManager::get(PluginsManager *this)
{
  unint64_t v1;
  void *v3;
  void ***v4;
  void **v5;

  v3 = &__block_literal_global;
  v1 = atomic_load(&PluginsManager::get(void)::initOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&PluginsManager::get(void)::initOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>);
  }
  return PluginsManager::manager;
}

double ___ZN14PluginsManager3getEv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  PluginsManager::manager = v0;
  return result;
}

void PluginsManager::get_plugin_ptr(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void **v8;
  char v9;
  unsigned __int8 v10;
  uint64_t *v11;
  int v12;
  PluginsManager *v13;
  uint64_t v14;
  PluginsManager *v15;
  int v16;
  void *v17;
  uint64_t v18;
  const std::error_category *v19;
  uint64_t i;
  __int128 v21;
  int v22;
  std::unique_lock<std::mutex> v23;
  void *v24[5];
  _QWORD v25[5];
  _QWORD v26[35];
  uint64_t v27;
  _QWORD v28[20];

  v28[19] = *MEMORY[0x24BDAC8D0];
  v23.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v23.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v8 = std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>(a1, (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(_QWORD *)a4 = v8[7];
    v9 = 1;
LABEL_19:
    *(_BYTE *)(a4 + 16) = v9;
    goto LABEL_20;
  }
  std::unique_lock<std::mutex>::unlock(&v23);
  if (!a3 || !os_variant_allows_internal_security_policies())
  {
    *(_QWORD *)&v21 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((_QWORD *)&v21 + 1) = 63;
    v22 = 16;
    di_log::logger<di_log::log_printer<92ul>>::logger(v24, &v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Plugin ", 7);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = (void *)a2;
    else
      v17 = *(void **)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)" is not registered", 18);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf((uint64_t)v24);
    MEMORY[0x2199A89AC](v28);
    v19 = std::generic_category();
    v9 = 0;
    *(_QWORD *)a4 = 45;
    *(_QWORD *)(a4 + 8) = v19;
    goto LABEL_19;
  }
  if ((v10 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "com.apple.raw");
    v24[3] = rawTestPluginCreate;
    v24[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, "com.apple.diskimage-plugin.nbd");
    v25[3] = amberPluginCreate;
    v25[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(v26, "com.apple.diskimage-plugin.amber");
    v26[3] = amberPluginCreate;
    v26[4] = 16;
    std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::map[abi:ne180100]((uint64_t)&register_internal_plugin(std::string const&)::internal_plugins, v24, 3);
    for (i = 0; i != -15; i -= 5)
    {
      if (SHIBYTE(v26[i + 2]) < 0)
        operator delete((void *)v26[i]);
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::~map[abi:ne180100], &register_internal_plugin(std::string const&)::internal_plugins, &dword_212EB0000);
  }
  if (std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>((uint64_t)&register_internal_plugin(std::string const&)::internal_plugins, (void **)a2) != (void **)&unk_254B6CF78)
  {
    v24[0] = (void *)a2;
    v11 = std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&register_internal_plugin(std::string const&)::internal_plugins, (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v24);
    v12 = *(char *)(a2 + 23);
    v13 = *(PluginsManager **)a2;
    v14 = ((uint64_t (*)(uint64_t))v11[7])(v11[8]);
    if (v12 >= 0)
      v15 = (PluginsManager *)a2;
    else
      v15 = v13;
    di_plugin_register(v15, v14);
  }
  PluginsManager::get_plugin_ptr(a1, a2, 0);
LABEL_20:
  if (v23.__owns_)
    std::mutex::unlock(v23.__m_);
}

void sub_212EB22B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v20;

  v20 = 0;
  while (1)
  {
    if (*(char *)(v18 + v20 + 103) < 0)
      operator delete(*(void **)(v18 + v20 + 80));
    v20 -= 40;
    if (v20 == -120)
    {
      if (a14)
        std::mutex::unlock(a13);
      _Unwind_Resume(a1);
    }
  }
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    di_log::logger<di_log::log_printer<92ul>>::logger();
  }
}

_QWORD *di_log::logger<di_log::log_printer<92ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<92ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEBF18;
  a1[45] = &unk_24CEEC018;
  a1[46] = &unk_24CEEC040;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEBF18;
  a1[45] = &unk_24CEEBFA0;
  a1[46] = &unk_24CEEBFC8;
  return a1;
}

void sub_212EB2418(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *PluginsManager::create_plugin_image(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  NSObject *DIOSLog;
  const char *v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  const char *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *exception;
  _QWORD v18[2];
  __CFError *v19;
  uint64_t buf;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = *__error();
  if (DIForwardLogs())
  {
    v18[0] = 0;
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEFAULT);
    buf = 0x6704100402;
    v9 = "RO";
    v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    v21 = 2080;
    if ((a3 & 3) != 0)
      v9 = "RW";
    v23 = 2080;
    v24 = v9;
    v25 = 2112;
    v26 = a4;
    v10 = (const char *)_os_log_send_and_compose_impl();
    if (v10)
    {
      v11 = (char *)v10;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v10);
      free(v11);
    }
  }
  else
  {
    v12 = getDIOSLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = "RW";
      buf = 0x6704100402;
      v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      v21 = 2080;
      if ((a3 & 3) == 0)
        v13 = "RO";
      v23 = 2080;
      v24 = v13;
      v25 = 2112;
      v26 = a4;
      _os_log_impl(&dword_212EB0000, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Creating %s plugin instance with params: %@", (uint8_t *)&buf, 0x26u);
    }
  }
  *__error() = v7;
  v18[1] = a4;
  v19 = 0;
  LODWORD(v18[0]) = 16;
  HIDWORD(v18[0]) = a3;
  v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *, __CFError **))(a2 + 8))(v18, &v19);
  v15 = v14;
  if (v14 && *(_DWORD *)v14 <= 0x57u)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"Plugin image struct size ", 25);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }
  verify_plugin_image(v14, v19);
  return v15;
}

void sub_212EB2724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_212EB2828(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 112);
  return a1;
}

_QWORD *verify_plugin_image(_QWORD *result, __CFError *a2)
{
  DiskImagesRuntimeException *exception;
  const char *v3;
  unsigned int v4;
  void *v5;
  int v7;
  NSObject *DIOSLog;
  const char *v9;
  char *v10;
  NSObject *v11;
  __CFError *v12;
  int Code;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  __CFError *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!result)
  {
    if (a2)
    {
      v7 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 68158210;
        v16 = 71;
        v17 = 2080;
        v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        v19 = 2114;
        v20 = a2;
        v9 = (const char *)_os_log_send_and_compose_impl();
        if (v9)
        {
          v10 = (char *)v9;
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
          free(v10);
        }
      }
      else
      {
        v11 = getDIOSLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68158210;
          v16 = 71;
          v17 = 2080;
          v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          v19 = 2114;
          v20 = a2;
          _os_log_impl(&dword_212EB0000, v11, OS_LOG_TYPE_ERROR, "%.*s: Failed initializing plugin: %{public}@", buf, 0x1Cu);
        }
      }
      *__error() = v7;
      v12 = a2;
      Code = CFErrorGetCode(a2);
      if (Code < 0)
        v14 = Code;
      else
        v14 = -Code;
      CFRelease(v12);
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      v3 = "Plugin initialization failed";
      v4 = v14;
    }
    else
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      v3 = "Plugin bug: returned init failure without supplying the error";
      v4 = -14;
    }
LABEL_9:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v3, v4);
  }
  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v3 = "Mandatory callbacks in the plugin's image struct are missing";
    v4 = -22;
    goto LABEL_9;
  }
  return result;
}

_QWORD *PluginsManager::decode_plugin_image(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  int v7;
  NSObject *DIOSLog;
  const char *v9;
  char *v10;
  NSObject *v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint8_t *);
  _QWORD *v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[8];
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = *__error();
  if (DIForwardLogs())
  {
    v17 = 0;
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)&buf[4] = 114;
    v19 = 2080;
    v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = 114;
      v19 = 2080;
      v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl(&dword_212EB0000, v11, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }
  *__error() = v7;
  *(_QWORD *)buf = 0;
  v12 = *(uint64_t (**)(__int128 *, uint64_t, uint8_t *))(a2 + 16);
  v15 = *a3;
  v16 = *((_QWORD *)a3 + 2);
  v13 = (_QWORD *)v12(&v15, a4, buf);
  return verify_plugin_image(v13, *(__CFError **)buf);
}

uint64_t PluginsManager::register_plugin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::mutex *v7;
  int v8;
  const std::string::value_type *v9;
  uint64_t v10;
  _QWORD *v12;
  __int128 *v13;
  std::string *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  const std::string::value_type *v20;
  uint64_t v21;
  std::string v22;
  __int128 v23;
  __int128 *v24;
  std::string __p;
  uint64_t v26;
  _BYTE v27[152];
  std::string v28;

  if (!a3)
    return 4294967274;
  if (*(_DWORD *)(a3 + 4) != 1)
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<147ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Plugin version ", 15);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" is incompatible with the framework, expected ", 46);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf((uint64_t)&v24);
    goto LABEL_6;
  }
  if (*(_DWORD *)a3 <= 0x27u)
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<152ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Plugin struct size ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf((uint64_t)&v24);
LABEL_6:
    MEMORY[0x2199A89AC](v27);
    return 4294967209;
  }
  if (!*(_QWORD *)(a3 + 8) || !*(_QWORD *)(a3 + 16))
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<157ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Mandatory callbacks in the plugin's struct are missing", 54);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf((uint64_t)&v24);
    MEMORY[0x2199A89AC](v27);
    return 4294967274;
  }
  v7 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>(a1, (void **)a2))
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v22 = *(std::string *)a2;
    *(_QWORD *)&v23 = a3;
    v12 = (_QWORD *)operator new();
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v28, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      v28 = v22;
    v12[1] = 0;
    v12[2] = 0;
    *v12 = off_24CEECEC8;
    v24 = (__int128 *)a3;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      v13 = v24;
    }
    else
    {
      __p = v28;
      v13 = (__int128 *)a3;
    }
    v12[3] = v13;
    v14 = (std::string *)(v12 + 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v12[6] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    *((_QWORD *)&v23 + 1) = v12;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    v24 = (__int128 *)a2;
    v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)a2, (uint64_t)&std::piecewise_construct, &v24);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)(v15 + 7), &v23);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 0;
    di_log::logger<di_log::log_printer<171ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Registered plugin ", 18);
    v19 = *(char *)(a2 + 23);
    if (v19 >= 0)
      v20 = (const std::string::value_type *)a2;
    else
      v20 = *(const std::string::value_type **)a2;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)v20, v21);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf((uint64_t)&v24);
    MEMORY[0x2199A89AC](v27);
    v4 = 0;
  }
  else
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<163ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Plugin ", 7);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a2;
    else
      v9 = *(const std::string::value_type **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" cannot be re-registered", 24);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf((uint64_t)&v24);
    MEMORY[0x2199A89AC](v27);
    v4 = 4294967279;
  }
  std::mutex::unlock(v7);
  return v4;
}

void sub_212EB31B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;

  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v24);
  if (*(char *)(v25 - 73) < 0)
    operator delete(*(void **)(v25 - 96));
  MEMORY[0x2199A8A18](v24, 0x10B3C401459F3A3);
  __cxa_begin_catch(a1);
  PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()((uint64_t)&a9, v23);
  __cxa_rethrow();
}

void sub_212EB3244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::mutex *v5;
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<171ul>>::~logger((uint64_t)va);
  std::mutex::unlock(v5);
  JUMPOUT(0x212EB32C8);
}

void sub_212EB3254()
{
  __cxa_end_catch();
  JUMPOUT(0x212EB325CLL);
}

void sub_212EB3274(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_212EB327C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  di_log::logger<di_log::log_printer<157ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212EB328C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<163ul>>::~logger((uint64_t)va);
  JUMPOUT(0x212EB3298);
}

void sub_212EB32A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  di_log::logger<di_log::log_printer<152ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<147ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<147ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEC138;
  a1[45] = &unk_24CEEC238;
  a1[46] = &unk_24CEEC260;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEC138;
  a1[45] = &unk_24CEEC1C0;
  a1[46] = &unk_24CEEC1E8;
  return a1;
}

void sub_212EB3354(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<152ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<152ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEC358;
  a1[45] = &unk_24CEEC458;
  a1[46] = &unk_24CEEC480;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEC358;
  a1[45] = &unk_24CEEC3E0;
  a1[46] = &unk_24CEEC408;
  return a1;
}

void sub_212EB343C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<157ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<157ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEC578;
  a1[45] = &unk_24CEEC678;
  a1[46] = &unk_24CEEC6A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEC578;
  a1[45] = &unk_24CEEC600;
  a1[46] = &unk_24CEEC628;
  return a1;
}

void sub_212EB3524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<163ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<163ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEC798;
  a1[45] = &unk_24CEEC898;
  a1[46] = &unk_24CEEC8C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEC798;
  a1[45] = &unk_24CEEC820;
  a1[46] = &unk_24CEEC848;
  return a1;
}

void sub_212EB360C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<171ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<171ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEC9B8;
  a1[45] = &unk_24CEECAB8;
  a1[46] = &unk_24CEECAE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEC9B8;
  a1[45] = &unk_24CEECA40;
  a1[46] = &unk_24CEECA68;
  return a1;
}

void sub_212EB3758(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void PluginsManager::release_plugin(uint64_t a1, void **a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__erase_unique<std::string>((uint64_t **)a1, a2);
  std::mutex::unlock(v4);
}

void sub_212EB3800(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFStringRef PluginsManager::copy_plugin_description(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t);
  const char *v7;
  uint64_t v8;
  char v9;

  PluginsManager::get_plugin_ptr(a1, a2, 1, (uint64_t)&v8);
  if (v9)
  {
    v5 = *(uint64_t (**)(uint64_t))(v8 + 24);
    if (v5)
      return (CFStringRef)v5(a3);
  }
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  return CFStringCreateWithCString(0, v7, 0x8000100u);
}

uint64_t plugin_header::plugin_header(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  __int128 v12;
  uint64_t v13;
  PluginsManager *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *plugin_image;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *exception;
  __int128 v33;
  __int128 v34;
  uint64_t v35[2];
  char v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v12 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }
  v13 = PluginsManager::get((PluginsManager *)a1);
  PluginsManager::get_plugin_ptr(v13, a2, 1, (uint64_t)v35);
  if (!v36)
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    v33 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v35);
    *(_QWORD *)exception = &off_24CF07908;
    *(_OWORD *)(exception + 8) = v33;
    exception[24] = 0;
    exception[48] = 0;
    *((_QWORD *)exception + 7) = "Failed to get plugin instance";
  }
  v41[0] = &off_24CEED188;
  v42 = v41;
  if (!a6)
  {
    v18 = PluginsManager::get(v14);
    plugin_image = PluginsManager::create_plugin_image(v18, v35[0], a4, a3);
    v20 = (uint64_t)v42;
    if (v42)
    {
      if (v42 == v41)
      {
        v38 = v37;
        (*(void (**)(uint64_t, _QWORD *))(v41[0] + 24))((uint64_t)v41, v37);
        goto LABEL_23;
      }
      v20 = (*(uint64_t (**)(void))(*v42 + 16))();
    }
    v38 = (_QWORD *)v20;
LABEL_23:
    std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>((uint64_t *)&v34, (uint64_t)plugin_image, (uint64_t)v37);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, &v34);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v24 = v38;
    if (v38 == v37)
    {
      v25 = 4;
      v24 = v37;
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  v15 = PluginsManager::get(v14);
  v16 = PluginsManager::decode_plugin_image(v15, v35[0], a5, a6);
  v17 = (uint64_t)v42;
  if (v42)
  {
    if (v42 == v41)
    {
      v40 = v39;
      (*(void (**)(uint64_t, _QWORD *))(v41[0] + 24))((uint64_t)v41, v39);
      goto LABEL_15;
    }
    v17 = (*(uint64_t (**)(void))(*v42 + 16))();
  }
  v40 = (_QWORD *)v17;
LABEL_15:
  std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>((uint64_t *)&v34, (uint64_t)v16, (uint64_t)v39);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, &v34);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v40;
  if (v40 == v39)
  {
    v25 = 4;
    v24 = v39;
    goto LABEL_32;
  }
LABEL_29:
  if (!v24)
    goto LABEL_33;
  v25 = 5;
LABEL_32:
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_33:
  v29 = v42;
  if (v42 == v41)
  {
    v30 = 4;
    v29 = v41;
    goto LABEL_37;
  }
  if (v42)
  {
    v30 = 5;
LABEL_37:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  return a1;
}

void sub_212EB3BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  uint64_t v25;
  void **v26;
  char *v27;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v29 = a17;
  if (a17 == v27)
  {
    v30 = 4;
    v29 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  v31 = a25;
  if (a25 == &a22)
  {
    v32 = 4;
    v31 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_11:
  if (*(char *)(v25 + 39) < 0)
    operator delete(*v26);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CEED160;
  }
  return result;
}

void DiskImagePlugin::create_sync_ring(DiskImagePlugin *this)
{
  unint64_t *v2;
  unint64_t v3;
  _QWORD v4[5];
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v7;

  v2 = (unint64_t *)((char *)this + 264);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN15DiskImagePlugin16create_sync_ringEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_18;
  v4[4] = this;
  v5 = v4;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>);
  }
}

uint64_t ___ZN15DiskImagePlugin16create_sync_ringEv_block_invoke(uint64_t a1)
{
  return std::optional<PluginRing>::emplace[abi:ne180100]<_di_plugin_image_t *,void (&)(io_rings_desc_t *,void *),DiskImagePlugin *,void>((PluginRing *)(*(_QWORD *)(a1 + 32) + 56));
}

uint64_t std::optional<PluginRing>::emplace[abi:ne180100]<_di_plugin_image_t *,void (&)(io_rings_desc_t *,void *),DiskImagePlugin *,void>(PluginRing *a1)
{
  uint64_t v1;
  uint64_t result;

  if (*((_BYTE *)a1 + 200))
  {
    PluginRing::~PluginRing(a1);
    *(_BYTE *)(v1 + 200) = 0;
  }
  result = PluginRing::PluginRing();
  *(_BYTE *)(result + 200) = 1;
  return result;
}

void di_plugin_sync_cqe_callback(int a1, DiskImagePlugin *this)
{
  DiskImagePlugin::sync_cqe_callback(this);
}

uint64_t DiskImagePlugin::sync_enter_and_wait(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  PluginRing::set_dest_obj_id(a1 + 56, a2);
  *(_QWORD *)(a2 + 16) = a3 + 16;
  v6 = io_rings_enter(*(_QWORD *)(a1 + 104), 1, 0);
  if ((_DWORD)v6)
  {
    v7 = v6;
    *(_QWORD *)&v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((_QWORD *)&v9 + 1) = 36;
    v10 = 16;
    di_log::logger<di_log::log_printer<243ul>>::logger(v11, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"failed to enter SQE to the ring, ret code ", 42);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf((uint64_t)v11);
    MEMORY[0x2199A89AC](&v13);
  }
  else
  {
    gcd::gcd_semaphore::wait((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }
  return v7;
}

void sub_212EB3EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<243ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<243ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<243ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEECBD8;
  a1[45] = &unk_24CEECCD8;
  a1[46] = &unk_24CEECD00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEECBD8;
  a1[45] = &unk_24CEECC60;
  a1[46] = &unk_24CEECC88;
  return a1;
}

void sub_212EB3F50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImagePlugin::read(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(void);
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78[8];
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _OWORD v86[2];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  _OWORD v97[2];
  char *v98;
  char *v99;
  char *v100;

  v9 = PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 7));
  if (!v8)
    return -35;
  v10 = v8;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v11 = *(_QWORD *)(a4 + 72);
  v12 = a3[9];
  v13 = (*(uint64_t (**)(_QWORD *, double))(*a1 + 24))(a1, v9);
  v76 = a2;
  memset(v97, 0, sizeof(v97));
  (*(void (**)(_OWORD *__return_ptr, _QWORD *))(*a1 + 72))(v97, a1);
  v77 = a3[18];
  v14 = (*(_QWORD *)(a4 + 144) - v77) & ~((uint64_t)(*(_QWORD *)(a4 + 144) - v77) >> 63);
  if (*(_QWORD *)&v97[0]
    && v11 - v12 >= *((_QWORD *)&v97[0] + 1) * *(_QWORD *)&v97[0]
                  + (v14 - 1 + *(_QWORD *)&v97[0]) / *(_QWORD *)&v97[0] * *(_QWORD *)&v97[0])
  {
    v15 = *(uint64_t (**)(void))(a1[2] + 32);
    if (v15)
    {
      v16 = v15();
      v17 = v77;
      v18 = v77;
      if (v16)
        v18 = v77 / v16 * v16;
    }
    else
    {
      v17 = a3[18];
      v18 = v17;
    }
    v14 = (v14 - 1 + v17 - v18 + *(_QWORD *)&v97[0]) / *(_QWORD *)&v97[0] * *(_QWORD *)&v97[0];
    v77 = v18;
  }
  v20 = (std::__shared_weak_count *)a3[1];
  v84 = *a3;
  v85 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v86[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
  v88 = *(_OWORD *)(a3 + 7);
  v23 = *(_OWORD *)(a3 + 11);
  v89 = *(_OWORD *)(a3 + 9);
  v87 = a3[6];
  v90 = v23;
  v91 = *((_BYTE *)a3 + 104);
  v24 = (std::__shared_weak_count *)a3[15];
  v92 = a3[14];
  v93 = v24;
  v75 = v14 / v13;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v94 = *((_OWORD *)a3 + 8);
  v95 = a3[18];
  v96 = *((_BYTE *)a3 + 152);
  while (!sg_vec_ns::details::sg_vec_iterator::is_end_of_buffers((sg_vec_ns::details::sg_vec_iterator *)&v84))
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)&v88);
    v27 = v92;
    v28 = v93;
    v81 = v92;
    v82 = v93;
    if (v93)
    {
      v29 = (unint64_t *)&v93->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v83 = v94;
      if (v14 >= (unint64_t)v94)
        v31 = v83;
      else
        v31 = v14;
      if (!v31)
      {
        do
          v52 = __ldaxr(v29);
        while (__stlxr(v52 - 1, v29));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        break;
      }
    }
    else
    {
      v83 = v94;
      if (v14 >= (unint64_t)v94)
        v31 = v83;
      else
        v31 = v14;
      if (!v31)
        break;
    }
    v32 = v99;
    if (v99 >= v100)
    {
      v34 = (v99 - v98) >> 4;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      v36 = v100 - v98;
      if ((v100 - v98) >> 3 > v35)
        v35 = v36 >> 3;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
        v37 = 0xFFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v100, v37);
      else
        v38 = 0;
      v39 = &v38[16 * v34];
      *(_QWORD *)v39 = v27;
      *((_QWORD *)v39 + 1) = v31;
      v41 = v98;
      v40 = v99;
      v42 = v39;
      if (v99 != v98)
      {
        do
        {
          *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
          v42 -= 16;
          v40 -= 16;
        }
        while (v40 != v41);
        v40 = v98;
      }
      v33 = v39 + 16;
      v98 = v42;
      v99 = v39 + 16;
      v100 = &v38[16 * v37];
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_QWORD *)v99 = v27;
      *((_QWORD *)v32 + 1) = v31;
      v33 = v32 + 16;
    }
    v99 = v33;
    v43 = v82;
    if (v82)
    {
      v44 = (unint64_t *)&v82->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&v84, (uint64_t)v78);
    v46 = v80;
    if (v80)
    {
      v47 = (unint64_t *)&v80->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v14 -= v31;
    v49 = v79;
    if (v79)
    {
      v50 = (unint64_t *)&v79->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  v53 = v93;
  if (v93)
  {
    v54 = (unint64_t *)&v93->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v85;
  if (v85)
  {
    v57 = (unint64_t *)&v85->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v98;
  *(_BYTE *)v10 = 2;
  *(_QWORD *)(v10 + 24) = v59;
  *(_QWORD *)(v10 + 32) = v77 / v13;
  *(_QWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 48) = v75;
  v60 = DiskImagePlugin::sync_enter_and_wait((uint64_t)a1, v10, v76);
  if (v60 == (unint64_t)v75)
  {
    v61 = (std::__shared_weak_count *)a3[1];
    v19 = v13 * v60;
    v84 = *a3;
    v85 = v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v86[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
    v88 = *(_OWORD *)(a3 + 7);
    v64 = *(_OWORD *)(a3 + 11);
    v89 = *(_OWORD *)(a3 + 9);
    v87 = a3[6];
    v90 = v64;
    v91 = *((_BYTE *)a3 + 104);
    v65 = (std::__shared_weak_count *)a3[15];
    v92 = a3[14];
    v93 = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v94 = *((_OWORD *)a3 + 8);
    v95 = a3[18];
    v96 = *((_BYTE *)a3 + 152);
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v84, v19);
    v68 = v93;
    if (v93)
    {
      v69 = (unint64_t *)&v93->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v85;
    if (v85)
    {
      v72 = (unint64_t *)&v85->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else if (v60 < 0)
  {
    v19 = v60;
  }
  else
  {
    v19 = -5;
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  return v19;
}

void sub_212EB45E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void *v45;

  v45 = *(void **)(v43 - 120);
  if (v45)
  {
    *(_QWORD *)(v43 - 112) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a2, a1);
  return sg_vec_ns::details::sg_vec_iterator::operator++(a1);
}

void sub_212EB467C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 112);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImagePlugin::write(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  BOOL v49;
  char v50;
  sg_vec_ns::details::sg_vec_iterator *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[25];
  __int128 v82;
  __int128 v83;
  char v84;
  _BYTE v85[25];
  __int128 v86;
  __int128 v87;
  char v88;
  __int128 v89;
  unint64_t v90;
  char v91;
  char *__p;
  char *v93;
  char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  _OWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  char v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  _OWORD v111[2];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  unint64_t v120;
  char v121;
  _QWORD v122[2];
  _OWORD v123[2];
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  _QWORD v129[2];
  __int128 v130;
  unint64_t v131;
  char v132;
  _QWORD v133[2];
  char v134;
  _BYTE v135[248];
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  int64_t v139;
  sg_vec_ns::details::sg_vec_iterator *v140;
  _BYTE v141[544];

  PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 56));
  if (!v8)
    return -35;
  __p = 0;
  v93 = 0;
  v94 = 0;
  v9 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v78 = v8;
  *(_OWORD *)v85 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a3 + 25);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a3[8];
  v86 = *(_OWORD *)(a3 + 9);
  v87 = *(_OWORD *)(a3 + 11);
  v88 = *((_BYTE *)a3 + 104);
  v16 = a3[14];
  v17 = (std::__shared_weak_count *)a3[15];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v79 = a2;
  v80 = a1;
  v21 = a3[18];
  v20 = a3 + 18;
  v89 = *((_OWORD *)v20 - 1);
  v90 = v21;
  v91 = *((_BYTE *)v20 + 8);
  v22 = *a4;
  v23 = (std::__shared_weak_count *)a4[1];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_OWORD *)v81 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v81[9] = *(_OWORD *)((char *)a4 + 25);
  v26 = a4[6];
  v27 = a4[7];
  v28 = a4[8];
  v82 = *(_OWORD *)(a4 + 9);
  v83 = *(_OWORD *)(a4 + 11);
  v84 = *((_BYTE *)a4 + 104);
  v29 = a4[14];
  v30 = (std::__shared_weak_count *)a4[15];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = 0;
  v111[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v111 + 9) = *(_OWORD *)&v85[9];
  v114 = v86;
  v115 = v87;
  v119 = v89;
  v97[0] = *(_OWORD *)v81;
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)&v81[9];
  v102 = v83;
  v109 = v9;
  v110 = v10;
  v112 = v13;
  *(_QWORD *)&v113 = v14;
  *((_QWORD *)&v113 + 1) = v15;
  v116 = v88;
  v117 = v16;
  v118 = v17;
  v120 = v90;
  v121 = v91;
  v95 = v22;
  v96 = v23;
  v98 = v26;
  v99 = v27;
  v100 = v28;
  v103 = v84;
  v101 = v82;
  v104 = v29;
  v105 = v30;
  v106 = *((_OWORD *)a4 + 8);
  v108 = *((_BYTE *)a4 + 152);
  v107 = a4[18];
  v34 = v107;
  v141[0] = 0;
  v141[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v109, (uint64_t)&v95))
  {
    if (v120 >= v34 || v33 == -1)
      break;
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v138 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((_QWORD *)&v138 + 1) = 104;
      LODWORD(v139) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v133, &v138);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v136, (uint64_t)"sg: ", 4);
      operator<<(&v136);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v133);
      MEMORY[0x2199A89AC](&v137);
    }
    v133[0] = 0;
    v133[1] = v34;
    v134 = 2;
    trim_sg_to_interval(&v109, (uint64_t)v133, (uint64_t)&v138);
    v36 = v138;
    v37 = v139;
    if (v93 >= v94)
    {
      v39 = (v93 - __p) >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      v41 = v94 - __p;
      if ((v94 - __p) >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
        v43 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v94, v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v37;
      v45 = v93;
      v46 = v44;
      if (v93 != __p)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v45 - 1);
          v46 -= 16;
          v45 -= 16;
        }
        while (v45 != __p);
        v45 = __p;
      }
      v38 = v44 + 16;
      __p = v46;
      v94 = &v43[16 * v42];
      if (v45)
        operator delete(v45);
    }
    else
    {
      *(_QWORD *)v93 = v138;
      *((_QWORD *)v93 + 1) = v37;
      v38 = v93 + 16;
    }
    v93 = v38;
    v47 = (int)v139;
    if ((v139 & 0x80000000) != 0)
      v48 = (int)v139;
    else
      v48 = v139;
    v49 = v48 >= 0 || (_DWORD)v48 == 0;
    v50 = v49;
    if (v49)
    {
      v51 = v140;
      if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v109, (const sg_vec_ns::details::sg_vec_iterator *)&v95, v140, v48))
      {
        v122[0] = v109;
        v122[1] = v110;
        if (v110)
        {
          v55 = (unint64_t *)&v110->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v123[0] = v111[0];
        *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v111 + 9);
        v124 = v112;
        v125 = v113;
        v126 = v114;
        v127 = v115;
        v128 = v116;
        v129[0] = v117;
        v129[1] = v118;
        if (v118)
        {
          v57 = (unint64_t *)&v118->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v130 = v119;
        v131 = v120;
        v132 = v121;
        sg_vec_ns::generate_vec_ref((uint64_t)v122, (uint64_t)&v95, (uint64_t)v51, v48, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)v133);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v141, (uint64_t)v133);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v133);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v129);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v122);
        sg_vec_ref::begin((sg_vec_ref *)v141, (uint64_t)v133);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v109, (uint64_t)v133);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v135);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v133);
        sg_vec_ref::end((sg_vec_ref *)v141, (uint64_t)v133);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v95, (uint64_t)v133);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v135);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v133);
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v109, v48);
      v33 += v48;
    }
    else
    {
      if ((int)v139 >= 0)
        v47 = -(uint64_t)(int)v139;
      v77 = v47;
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    if (!*((_QWORD *)&v138 + 1))
      goto LABEL_55;
    v53 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      if ((v50 & 1) == 0)
        goto LABEL_70;
    }
    else
    {
LABEL_55:
      if ((v50 & 1) == 0)
        goto LABEL_70;
    }
  }
  v77 = v33;
LABEL_70:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v141);
  v59 = v105;
  if (v105)
  {
    v60 = (unint64_t *)&v105->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v96;
  if (v96)
  {
    v63 = (unint64_t *)&v96->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v118;
  if (v118)
  {
    v66 = (unint64_t *)&v118->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v110;
  if (v110)
  {
    v69 = (unint64_t *)&v110->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
  v72 = *v20 / v71;
  *(_BYTE *)v78 = 4;
  *(_QWORD *)(v78 + 24) = __p;
  *(_QWORD *)(v78 + 32) = v72;
  *(_QWORD *)(v78 + 40) = 0;
  *(_DWORD *)(v78 + 48) = v77 / v71;
  v73 = DiskImagePlugin::sync_enter_and_wait(v80, v78, v79);
  v74 = -5;
  if (v73 < 0)
    v74 = v73;
  if (v73 == (unint64_t)(v77 / v71))
    v75 = v71 * v73;
  else
    v75 = v74;
  if (__p)
    operator delete(__p);
  return v75;
}

void sub_212EB4F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a69;
  char a71;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5E0]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x610]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a26);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImagePlugin::flush(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 56));
  if (!v6)
    return 4294967261;
  *(_BYTE *)v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;
  return DiskImagePlugin::sync_enter_and_wait(a1, v6, a2);
}

uint64_t DiskImagePlugin::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  PluginRing *v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!a4)
    return 0;
  v4 = a4;
  v7 = (PluginRing *)(a1 + 56);
  for (i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    PluginRing::try_sub_sqe_allocate(v7);
    if (!v9)
      break;
    v10 = *(i - 1);
    v11 = *i;
    *(_BYTE *)v9 = 6;
    *(_QWORD *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 32) = v11;
    result = DiskImagePlugin::sync_enter_and_wait(a1, v9, a2);
    if ((_DWORD)result)
      return result;
    if (!--v4)
      return 0;
  }
  return 4294967261;
}

void DiskImagePlugin::sync_cqe_callback(DiskImagePlugin *this)
{
  PluginRing *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;

  v1 = (DiskImagePlugin *)((char *)this + 56);
  PluginRing::get_next_cqe((DiskImagePlugin *)((char *)this + 56), (uint64_t)&v4);
  if (v6)
  {
    v2 = v4;
    v3 = v5;
    do
    {
      *(_DWORD *)v2 = v3;
      gcd::gcd_semaphore::signal((dispatch_semaphore_t *)(v2 + 8));
      PluginRing::get_next_cqe(v1, (uint64_t)&v4);
      v2 = v4;
      v3 = v5;
    }
    while (v6);
  }
}

unint64_t DiskImagePlugin::read_async(DiskImagePlugin *this, DiskImagePlugin::ContextPluginAsync *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  void *v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  BOOL v46;
  char v47;
  sg_vec_ns::details::sg_vec_iterator *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v81;
  unint64_t *v82;
  _BYTE v85[25];
  __int128 v86;
  __int128 v87;
  char v88;
  _BYTE v89[25];
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  unint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  void *v101[4];
  _BYTE v102[40];
  uint64_t v103;
  std::__shared_weak_count *v104;
  _OWORD v105[2];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  _OWORD v119[2];
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  char v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  unint64_t v128;
  char v129;
  _QWORD v130[2];
  _OWORD v131[2];
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  _QWORD v137[2];
  __int128 v138;
  unint64_t v139;
  char v140;
  _QWORD v141[2];
  char v142;
  _BYTE v143[248];
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  int64_t v147;
  sg_vec_ns::details::sg_vec_iterator *v148;
  void **v149[66];
  char v150;

  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v96 = 0u;
  v4 = *(_QWORD *)a3;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *(_OWORD *)v89 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v89[9] = *(_OWORD *)((char *)a3 + 25);
  v8 = *((_QWORD *)a3 + 6);
  v9 = *((_QWORD *)a3 + 7);
  v10 = *((_QWORD *)a3 + 8);
  v90 = *(_OWORD *)((char *)a3 + 72);
  v91 = *(_OWORD *)((char *)a3 + 88);
  v92 = *((_BYTE *)a3 + 104);
  v11 = *((_QWORD *)a3 + 14);
  v12 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v16 = *((_QWORD *)a3 + 18);
  v15 = (char *)a3 + 144;
  v93 = *((_OWORD *)v15 - 1);
  v94 = v16;
  v82 = (unint64_t *)v15;
  v95 = v15[8];
  v17 = *(_QWORD *)a4;
  v18 = (std::__shared_weak_count *)*((_QWORD *)a4 + 1);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)v85 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a4 + 25);
  v21 = *((_QWORD *)a4 + 6);
  v22 = *((_QWORD *)a4 + 7);
  v23 = *((_QWORD *)a4 + 8);
  v86 = *(_OWORD *)((char *)a4 + 72);
  v87 = *(_OWORD *)((char *)a4 + 88);
  v88 = *((_BYTE *)a4 + 104);
  v25 = *((_QWORD *)a4 + 14);
  v24 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = 0;
  v117 = v4;
  v118 = v5;
  v119[0] = *(_OWORD *)v89;
  *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)&v89[9];
  v120 = v8;
  *(_QWORD *)&v121 = v9;
  *((_QWORD *)&v121 + 1) = v10;
  v122 = v90;
  v123 = v91;
  v124 = v92;
  v125 = v11;
  v126 = v12;
  v127 = v93;
  v128 = v94;
  v129 = v95;
  v103 = v17;
  v104 = v18;
  v105[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)&v85[9];
  v106 = v21;
  v107 = v22;
  v108 = v23;
  v111 = v88;
  v109 = v86;
  v110 = v87;
  v112 = v25;
  v113 = v24;
  v114 = *((_OWORD *)a4 + 8);
  v116 = *((_BYTE *)a4 + 152);
  v115 = *((_QWORD *)a4 + 18);
  v29 = v115;
  LOBYTE(v149[0]) = 0;
  v150 = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v117, (uint64_t)&v103))
  {
    if (v128 >= v29 || v28 == -1)
      break;
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v146 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((_QWORD *)&v146 + 1) = 104;
      LODWORD(v147) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v141, &v146);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v144, (uint64_t)"sg: ", 4);
      operator<<(&v144);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v141);
      MEMORY[0x2199A89AC](&v145);
    }
    v141[0] = 0;
    v141[1] = v29;
    v142 = 2;
    trim_sg_to_interval(&v117, (uint64_t)v141, (uint64_t)&v146);
    std::vector<std::shared_ptr<char>>::emplace_back<std::shared_ptr<char> const&>((char **)v102, &v146);
    v31 = v146;
    v32 = v147;
    v33 = v101[2];
    if (v101[2] >= v101[3])
    {
      v35 = ((char *)v101[2] - (char *)v101[1]) >> 4;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60)
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      v37 = (char *)v101[3] - (char *)v101[1];
      if (((char *)v101[3] - (char *)v101[1]) >> 3 > v36)
        v36 = v37 >> 3;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v101[3], v38);
      else
        v39 = 0;
      v40 = &v39[16 * v35];
      *(_QWORD *)v40 = v31;
      *((_QWORD *)v40 + 1) = v32;
      v41 = (char *)v101[2];
      v42 = (char *)v101[1];
      v43 = v40;
      if (v101[2] != v101[1])
      {
        do
        {
          *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
          v43 -= 16;
          v41 -= 16;
        }
        while (v41 != v42);
        v41 = (char *)v101[1];
      }
      v34 = v40 + 16;
      v101[1] = v43;
      v101[2] = v40 + 16;
      v101[3] = &v39[16 * v38];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_QWORD *)v101[2] = v146;
      v33[1] = v32;
      v34 = v33 + 2;
    }
    v101[2] = v34;
    v44 = (int)v147;
    if ((v147 & 0x80000000) != 0)
      v45 = (int)v147;
    else
      v45 = v147;
    v46 = v45 >= 0 || (_DWORD)v45 == 0;
    v47 = v46;
    if (v46)
    {
      v48 = v148;
      if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v117, (const sg_vec_ns::details::sg_vec_iterator *)&v103, v148, v45))
      {
        v130[0] = v117;
        v130[1] = v118;
        if (v118)
        {
          v52 = (unint64_t *)&v118->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v131[0] = v119[0];
        *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)((char *)v119 + 9);
        v132 = v120;
        v133 = v121;
        v134 = v122;
        v135 = v123;
        v136 = v124;
        v137[0] = v125;
        v137[1] = v126;
        if (v126)
        {
          v54 = (unint64_t *)&v126->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        v138 = v127;
        v139 = v128;
        v140 = v129;
        sg_vec_ns::generate_vec_ref((uint64_t)v130, (uint64_t)&v103, (uint64_t)v48, v45, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)v141);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v149, (uint64_t)v141);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v141);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v137);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v130);
        sg_vec_ref::begin((sg_vec_ref *)v149, (uint64_t)v141);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v117, (uint64_t)v141);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v143);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v141);
        sg_vec_ref::end((sg_vec_ref *)v149, (uint64_t)v141);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v103, (uint64_t)v141);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v143);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v141);
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v117, v45);
      v28 += v45;
    }
    else
    {
      if ((int)v147 >= 0)
        v44 = -(uint64_t)(int)v147;
      v81 = v44;
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    if (*((_QWORD *)&v146 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if ((v47 & 1) == 0)
      goto LABEL_68;
  }
  v81 = v28;
LABEL_68:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v149);
  v56 = v113;
  if (v113)
  {
    v57 = (unint64_t *)&v113->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v104;
  if (v104)
  {
    v60 = (unint64_t *)&v104->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v126;
  if (v126)
  {
    v63 = (unint64_t *)&v126->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v118;
  if (v118)
  {
    v66 = (unint64_t *)&v118->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *v82;
  v69 = (*(uint64_t (**)(DiskImagePlugin *))(*(_QWORD *)this + 24))(this);
  v70 = (*(uint64_t (**)(DiskImagePlugin *))(*(_QWORD *)this + 24))(this);
  LOBYTE(v96) = 2;
  *((void **)&v97 + 1) = v101[1];
  v98 = v68 / v69;
  LODWORD(v99) = v81 / v70;
  v71 = *((_QWORD *)a2 + 3);
  if (v71 >= *((_QWORD *)a2 + 4))
  {
    v76 = std::vector<di_async_sub_transaction_t>::__emplace_back_slow_path<di_async_sub_transaction_t>((uint64_t *)a2 + 2, (uint64_t)&v96);
    v77 = *(std::__shared_weak_count **)&v102[32];
    *((_QWORD *)a2 + 3) = v76;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }
  else
  {
    v72 = v97;
    *(_OWORD *)v71 = v96;
    *(_OWORD *)(v71 + 16) = v72;
    v73 = v98;
    v74 = v100;
    v75 = v101[0];
    *(_OWORD *)(v71 + 48) = v99;
    *(_OWORD *)(v71 + 64) = v74;
    *(_OWORD *)(v71 + 32) = v73;
    *(_QWORD *)(v71 + 80) = v75;
    *(_QWORD *)(v71 + 88) = 0;
    *(_QWORD *)(v71 + 96) = 0;
    *(_QWORD *)(v71 + 104) = 0;
    *(_OWORD *)(v71 + 88) = *(_OWORD *)&v101[1];
    v101[1] = 0;
    v101[2] = 0;
    *(void **)(v71 + 104) = v101[3];
    *(_QWORD *)(v71 + 112) = 0;
    v101[3] = 0;
    *(_QWORD *)(v71 + 120) = 0;
    *(_QWORD *)(v71 + 128) = 0;
    *(_OWORD *)(v71 + 112) = *(_OWORD *)v102;
    *(_QWORD *)(v71 + 128) = *(_QWORD *)&v102[16];
    memset(v102, 0, 24);
    *(_OWORD *)(v71 + 136) = *(_OWORD *)&v102[24];
    *(_QWORD *)&v102[32] = 0;
    *(_QWORD *)&v102[24] = 0;
    *((_QWORD *)a2 + 3) = v71 + 152;
  }
  v149[0] = (void **)v102;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](v149);
  if (v101[1])
  {
    v101[2] = v101[1];
    operator delete(v101[1]);
  }
  return v81;
}

void sub_212EB5B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x678]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x6A8]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x288]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x328]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a27);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  di_async_sub_transaction_t::~di_async_sub_transaction_t((di_async_sub_transaction_t *)&a71);
  _Unwind_Resume(a1);
}

void di_async_sub_transaction_t::~di_async_sub_transaction_t(di_async_sub_transaction_t *this)
{
  void *v2;
  void **v3;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
}

uint64_t DiskImagePlugin::subscribe_to_ring(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 56))();
  if (v3)
    return io_rings_subscriber_subscribe(a2, v3);
  else
    return 4294967284;
}

void DiskImagePlugin::~DiskImagePlugin(DiskImagePlugin *this)
{
  *(_QWORD *)this = &off_24CEEB990;
  if (*((_BYTE *)this + 256))
    PluginRing::~PluginRing((DiskImagePlugin *)((char *)this + 56));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24CEEB990;
  if (*((_BYTE *)this + 256))
    PluginRing::~PluginRing((DiskImagePlugin *)((char *)this + 56));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImagePlugin::get_block_size(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 2) + 8))();
}

uint64_t DiskImagePlugin::get_num_blocks(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 2) + 16))();
}

uint64_t DiskImagePlugin::is_writable(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 2) + 24))();
}

void DiskImage::create_image_info(DiskImage *this)
{
  DiskImagesRuntimeException *exception;
  void *v2;

  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Image info is not supported for the given image type", 0x16u);
}

uint64_t DiskImage::verify_image()
{
  return 1;
}

uint64_t DiskImagePlugin::set_size(DiskImagePlugin *this)
{
  return 4294967218;
}

double DiskImagePlugin::get_io_constraints@<D0>(DiskImagePlugin *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  int v6;
  uint64_t (*v7)(void);
  unsigned int v8;
  double result;
  uint64_t v10;

  v4 = *((_QWORD *)this + 2);
  v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    v6 = v5();
    v4 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (v8 = v7()) != 0)
  {
    v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t DiskImagePlugin::supports_unmap(DiskImagePlugin *this)
{
  return 1;
}

uint64_t DiskImage::supports_get_extents(DiskImage *this)
{
  return 0;
}

BOOL DiskImagePlugin::may_read_extra(DiskImagePlugin *this)
{
  BOOL v1;
  _QWORD v4[4];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 72))(v4);
  if (v4[0])
    v1 = 0;
  else
    v1 = v4[1] == 0;
  return !v1 || v4[2] != 0 || v4[3] != 0;
}

__n128 DiskImage::get_extents_iterator_interface@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  __n128 result;

  v12 = operator new();
  result = *a4;
  *(__n128 *)(v12 + 16) = *a4;
  *(_QWORD *)(v12 + 32) = a4[1].n128_u64[0];
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a1;
  *(_QWORD *)(v12 + 56) = a3;
  *(_QWORD *)v12 = off_24CEECDF0;
  *(_QWORD *)(v12 + 8) = a2;
  *a6 = v12;
  return result;
}

DiskImagePlugin::ContextPluginSync *DiskImagePlugin::_create_ctx(DiskImagePlugin *this)
{
  DiskImagePlugin::ContextPluginSync *v2;

  v2 = (DiskImagePlugin::ContextPluginSync *)operator new();
  DiskImagePlugin::ContextPluginSync::ContextPluginSync(v2, this);
  return v2;
}

void sub_212EB5F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10A1C4088054FEALL);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::read(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _BYTE v38[8];
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  _BYTE v41[8];
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44[18];
  void *__p;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[72];
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  sg_vec::sg_vec(v44, a3);
  sg_vec_ref::begin((sg_vec_ref *)v48, (uint64_t)v41);
  v5 = sg_vec_ref::end((sg_vec_ref *)v48, (uint64_t)v38);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(_QWORD *)a1 + 144))(a1, a2, v41, v38, v5);
  v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v39;
  if (v39)
  {
    v11 = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v43;
  if (v43)
  {
    v14 = (unint64_t *)&v43->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v42;
  if (v42)
  {
    v17 = (unint64_t *)&v42->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v54;
  if (v54)
  {
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v53;
  if (v53)
  {
    v23 = (unint64_t *)&v53->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v51;
  if (v51)
  {
    v29 = (unint64_t *)&v51->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v50;
  if (v50)
  {
    v32 = (unint64_t *)&v50->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v49;
  if (v49)
  {
    v35 = (unint64_t *)&v49->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v46 && &v47 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v44);
  return v6;
}

void sub_212EB62C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  sg_vec::~sg_vec((sg_vec *)&a50);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::write(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _BYTE v38[8];
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  _BYTE v41[8];
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44[18];
  void *__p;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[72];
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  sg_vec::sg_vec(v44, a3);
  sg_vec_ref::begin((sg_vec_ref *)v48, (uint64_t)v41);
  v5 = sg_vec_ref::end((sg_vec_ref *)v48, (uint64_t)v38);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(_QWORD *)a1 + 152))(a1, a2, v41, v38, v5);
  v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v39;
  if (v39)
  {
    v11 = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v43;
  if (v43)
  {
    v14 = (unint64_t *)&v43->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v42;
  if (v42)
  {
    v17 = (unint64_t *)&v42->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v54;
  if (v54)
  {
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v53;
  if (v53)
  {
    v23 = (unint64_t *)&v53->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v51;
  if (v51)
  {
    v29 = (unint64_t *)&v51->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v50;
  if (v50)
  {
    v32 = (unint64_t *)&v50->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v49;
  if (v49)
  {
    v35 = (unint64_t *)&v49->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v46 && &v47 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v44);
  return v6;
}

void sub_212EB6628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  sg_vec::~sg_vec((sg_vec *)&a50);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t amberPluginCreate(uint64_t a1)
{
  if (amberPluginCreate(unsigned long long)::once != -1)
    dispatch_once(&amberPluginCreate(unsigned long long)::once, &__block_literal_global_26);
  if (amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate)
    return amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate(a1);
  else
    return 0;
}

uint64_t std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24CEEAFA0, MEMORY[0x24BEDAAF0]);
}

void sub_212EB6814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_212EB6984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<58ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<52ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<52ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEBAD8;
  a1[45] = &unk_24CEEBBD8;
  a1[46] = &unk_24CEEBC00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEBAD8;
  a1[45] = &unk_24CEEBB60;
  a1[46] = &unk_24CEEBB88;
  return a1;
}

void sub_212EB6A2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<58ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<58ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEBCF8;
  a1[45] = &unk_24CEEBDF8;
  a1[46] = &unk_24CEEBE20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEBCF8;
  a1[45] = &unk_24CEEBD80;
  a1[46] = &unk_24CEEBDA8;
  return a1;
}

void sub_212EB6B14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2199A8778](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2199A8784](v13);
  return a1;
}

void sub_212EB6C80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2199A8784](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x212EB6C60);
}

void sub_212EB6CC8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_212EB6DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEBC70;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EB6F28(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEBC70;
  di_log::logger_buf<di_log::log_printer<52ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<52ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<52ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EB731C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<52ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 52;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 52;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void std::stringbuf::str[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v4);
  v5 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEBE90;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EB77E0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEBE90;
  di_log::logger_buf<di_log::log_printer<58ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<58ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<58ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EB7BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<58ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 58;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 58;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::map[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_212EB7E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

__n128 std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_212EB80EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void **std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_212EB864C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<92ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEC0B0;
  di_log::logger_buf<di_log::log_printer<92ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<92ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EB8A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<92ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 92;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 92;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t DiskImagesRuntimeException::DiskImagesRuntimeException(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const std::error_category *v6;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_24CF07908;
  v6 = std::generic_category();
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v6;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_212EB8CCC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void DiskImagesRuntimeException::~DiskImagesRuntimeException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_24CF07908;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  DiskImagesRuntimeException::~DiskImagesRuntimeException(this);
  JUMPOUT(0x2199A8A18);
}

void DiskImagesRuntimeException::DiskImagesRuntimeException(DiskImagesRuntimeException *this, const char *a2, unsigned int a3)
{
  const std::error_category *v6;

  *(_QWORD *)this = &off_24CF07908;
  v6 = std::generic_category();
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = v6;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = a2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<147ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEC2D0;
  di_log::logger_buf<di_log::log_printer<147ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<147ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EB9130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<147ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 147;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 147;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<152ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEC4F0;
  di_log::logger_buf<di_log::log_printer<152ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<152ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EB971C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<152ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 152;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 152;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<157ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEC710;
  di_log::logger_buf<di_log::log_printer<157ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<157ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EB9D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<157ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 157;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 157;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<163ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEC930;
  di_log::logger_buf<di_log::log_printer<163ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<163ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EBA2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<163ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 163;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 163;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<171ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEECB50;
  di_log::logger_buf<di_log::log_printer<171ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<171ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EBA96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<171ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 171;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 171;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<243ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEECD70;
  di_log::logger_buf<di_log::log_printer<243ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<243ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EBAF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<243ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 243;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 243;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

__n128 sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 result;
  uint64_t v12;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  v12 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v12;
  return result;
}

void sg_vec_ns::details::buffer_iterator::sync(sg_vec_ns::details::buffer_iterator *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5[2];

  sg_vec_ns::details::buffer_iterator::make_value((uint64_t)this, 1, (uint64_t)v5);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 56, v5);
  *(_OWORD *)((char *)this + 72) = v5[1];
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5[0] + 1);
  if (*((_QWORD *)&v5[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t std::shared_ptr<char>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::vector<iovec>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::allocator<iovec>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::vector<di_async_sub_transaction_t>::__emplace_back_slow_path<di_async_sub_transaction_t>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[5];

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xD79435E50D7943)
    v9 = 0x1AF286BCA1AF286;
  else
    v9 = v5;
  v19[4] = a1 + 2;
  v10 = (char *)std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](v7, v9);
  v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v11 + 13) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *((_QWORD *)v11 + 16) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_QWORD *)v11 + 16) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v19[2] = v11 + 152;
  std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_212EBB49C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<di_async_sub_transaction_t>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(152 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<di_async_sub_transaction_t>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = (__n128 *)(a7 - 64);
    do
    {
      v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 72) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 88) = v9;
      v10 = *(__n128 *)(a3 - 120);
      v11 = *(__n128 *)(a3 - 104);
      v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(_QWORD *)(a3 - 72);
      v8->n128_u64[0] = 0;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 40) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v8[1].n128_u64[1] = 0;
      v8[2].n128_u64[0] = 0;
      v8[2].n128_u64[1] = 0;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152;
      a3 -= 152;
    }
    while (a3 != a5);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 136);
  v3 = (void **)(a1 + 112);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(i - 152);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 DiskImage::default_extents_iterator_interface::make_val@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[1];
  *a2 = result;
  a2[1].n128_u64[0] = this[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

__n128 DiskImage::default_extents_iterator_interface::clone@<Q0>(DiskImage::default_extents_iterator_interface *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(v4 + 40) = *((_QWORD *)this + 5);
  result = *((__n128 *)this + 3);
  *(__n128 *)(v4 + 48) = result;
  *(_QWORD *)v4 = off_24CEECDF0;
  *a2 = v4;
  return result;
}

void DiskImage::default_extents_iterator_interface::~default_extents_iterator_interface(DiskImage::default_extents_iterator_interface *this)
{
  JUMPOUT(0x2199A8A18);
}

DiskImagePlugin::ContextPluginSync *DiskImagePlugin::ContextPluginSync::ContextPluginSync(DiskImagePlugin::ContextPluginSync *this, DiskImagePlugin *a2)
{
  *(_QWORD *)this = off_24CEECE60;
  *((_QWORD *)this + 1) = a2;
  gcd::gcd_semaphore::gcd_semaphore((DiskImagePlugin::ContextPluginSync *)((char *)this + 24), 0);
  DiskImagePlugin::create_sync_ring(a2);
  return this;
}

void sub_212EBB808(_Unwind_Exception *a1)
{
  NSObject **v1;

  gcd::gcd_group::~gcd_group(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::Context::_read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), a1, a2, a3);
}

uint64_t DiskImage::Context::_write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), a1, a2, a3);
}

uint64_t DiskImage::Context::_unmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), a1, a2, a3);
}

uint64_t DiskImage::Context::_flush(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), a1, a2);
}

void DiskImagePlugin::ContextPluginSync::~ContextPluginSync(NSObject **this)
{
  *this = off_24CEECE60;
  gcd::gcd_group::~gcd_group(this + 3);
}

{
  *this = off_24CEECE60;
  gcd::gcd_group::~gcd_group(this + 3);
  JUMPOUT(0x2199A8A18);
}

void sg_vec::~sg_vec(sg_vec *this)
{
  char *v2;
  char *v3;

  v2 = (char *)this + 576;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 688);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 528);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  if (*((_QWORD *)this + 20))
  {
    v3 = (char *)*((_QWORD *)this + 18);
    if ((char *)this + 168 != v3)
      operator delete(v3);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this);
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, uint64_t *a2)
{
  _QWORD *dummy_shared_ptr;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t *v17[2];
  uint64_t v18[3];
  _QWORD *v19;
  __int128 v20;
  _QWORD v21[16];

  v21[15] = *MEMORY[0x24BDAC8D0];
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  v5 = *a2;
  v6 = dummy_shared_ptr[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[4];
  v17[0] = 0;
  v17[1] = 0;
  v18[2] = v9;
  v19 = v21;
  v21[0] = v5;
  v21[1] = v6;
  v18[0] = 0;
  v18[1] = 0;
  v21[2] = v9;
  v20 = xmmword_212FEB320;
  sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, (uint64_t)&v19);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v19);
  v11 = a2[2];
  v10 = a2[3];
  v13 = (unint64_t *)a1[18];
  v12 = a1[19];
  v14 = a1[1];
  v19 = (_QWORD *)*a1;
  v18[0] = (uint64_t)&v19[3 * v14];
  v16 = &v13[v12];
  v17[0] = v13;
  sg_vec_ref::sg_vec_ref((uint64_t)(a1 + 26), (uint64_t *)&v19, v18, v17, &v16, v10, v11);
  return a1;
}

void sub_212EBBA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  sg_vec_ns::details::sg_vec_data *v16;

  sg_vec_ns::details::sg_vec_data::~sg_vec_data(v16);
  _Unwind_Resume(a1);
}

uint64_t sg_vec_ns::details::sg_vec_data::sg_vec_data(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_212FEB330;
  boost::container::small_vector_base<std::pair<std::shared_ptr<char>,unsigned long>,void,void>::move_construct_impl((char *)a1, a2);
  *(_QWORD *)(a1 + 144) = a1 + 168;
  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_212FEB330;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>(a1 + 144, v3);
  return a1;
}

void sub_212EBBB10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;

  if (*(_QWORD *)(v1 + 160))
  {
    if (v3 != *v2)
      operator delete(*v2);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(v1);
  _Unwind_Resume(a1);
}

void sg_vec_ns::details::sg_vec_data::~sg_vec_data(sg_vec_ns::details::sg_vec_data *this)
{
  char *v2;

  if (*((_QWORD *)this + 20))
  {
    v2 = (char *)*((_QWORD *)this + 18);
    if ((char *)this + 168 != v2)
      operator delete(v2);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this);
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, (const char *)this);
  __cxa_throw(exception, (struct type_info *)off_24CEEAFA0, MEMORY[0x24BEDAAF0]);
}

void sub_212EBBBB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *boost::container::small_vector_base<std::pair<std::shared_ptr<char>,unsigned long>,void,void>::move_construct_impl(char *result, uint64_t a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;

  v4 = (const char *)(a2 + 24);
  v3 = *(const char **)a2;
  if (v4 == v3)
  {
    result = (char *)boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::assign<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>((uint64_t *)result, v3, (uint64_t)&v3[24 * *(_QWORD *)(a2 + 8)]);
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      result = *(char **)a2;
      do
      {
        --v5;
        result = (char *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)result) + 24);
      }
      while (v5);
    }
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_QWORD *)result = v3;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

_QWORD *boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::assign<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>(uint64_t *a1, const char *a2, uint64_t a3)
{
  unint64_t v5;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3);
  if (v5 <= a1[2])
  {
    result = (_QWORD *)boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>,std::pair<std::shared_ptr<char>,unsigned long>*>((uint64_t)a1, (uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3), *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x555555555555556)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    v7 = operator new(a3 - (_QWORD)a2);
    v8 = (uint64_t *)*a1;
    if (*a1)
    {
      v9 = a1[1];
      if (v9)
      {
        v10 = *a1;
        do
        {
          --v9;
          v10 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10) + 24;
        }
        while (v9);
      }
      a1[1] = 0;
      if (a1 + 3 != v8)
        operator delete(v8);
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    return boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>(a1, (uint64_t)a2, a3);
  }
  return result;
}

_QWORD *boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result[1];
  v4 = *result + 24 * v3;
  v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v5 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      v5 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    v3 = result[1];
  }
  result[1] = v3 - 0x5555555555555555 * ((v5 - v4) >> 3);
  return result;
}

uint64_t boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>,std::pair<std::shared_ptr<char>,unsigned long>*>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a2;
  v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      v14 = a3;
      do
      {
        --v14;
        result = std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a4, (__int128 *)v8);
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v8 + 16);
        a4 += 24;
        v8 += 24;
      }
      while (v14);
    }
    if (a5 != a3)
    {
      v15 = a3 - a5;
      do
      {
        result = std::shared_ptr<char>::~shared_ptr[abi:ne180100](a4);
        a4 += 24;
        v13 = __CFADD__(v15++, 1);
      }
      while (!v13);
    }
  }
  else
  {
    if (a5)
    {
      v10 = a2;
      v8 = a2 + 24 * a5;
      v11 = a5;
      do
      {
        --v11;
        result = std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a4, (__int128 *)v10);
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v10 + 16);
        a4 += 24;
        v10 += 24;
      }
      while (v11);
    }
    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v8 + 16);
        v8 += 24;
        a4 += 24;
        v13 = __CFADD__(v9++, 1);
      }
      while (!v13);
    }
  }
  return result;
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2 - v3;
  if (a2 >= v3)
  {
    v5 = (char *)(*(_QWORD *)a1 + 8 * v3);
    if (*(_QWORD *)(a1 + 16) - v3 < v4)
    {
      boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>((void **)a1, v5, (const char *)v4, &v6);
    }
    else
    {
      boost::container::expand_forward_and_insert_alloc<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *,boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(a1, v5, v5, v4);
      *(_QWORD *)(a1 + 8) += v4;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(void **a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v8;
  unint64_t v9;
  const char *v10;
  char *v11;
  char *v12;

  v8 = *a1;
  v9 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v9 >> 60)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v10);
  v11 = (char *)v9;
  v12 = (char *)operator new(8 * v9);
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(a1, v12, v11, a2, (uint64_t)a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void boost::container::expand_forward_and_insert_alloc<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *,boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(int a1, _BYTE *__src, _BYTE *__dst, unint64_t a4)
{
  int64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  char *v12;

  if (a4)
  {
    v7 = __dst - __src;
    if (__dst == __src)
    {
      v9 = 8 * a4;
      goto LABEL_9;
    }
    if (a4 <= v7 >> 3)
    {
      v11 = 8 * a4;
      v12 = &__dst[-8 * a4];
      memmove(__dst, v12, 8 * a4);
      if (v12 != __src)
        memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
      v10 = __src;
      v9 = v11;
      goto LABEL_13;
    }
    v8 = v7 >> 3;
    if (__src)
      memmove(&__src[8 * a4], __src, __dst - __src);
    bzero(__src, v7);
    if (a4 != v8)
    {
      v9 = 8 * (a4 - v8);
LABEL_9:
      v10 = __dst;
LABEL_13:
      bzero(v10, v9);
    }
  }
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0xFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0xFFFFFFFFFFFFFFFLL)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>(void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  char *v10;
  char *v11;
  BOOL v12;
  BOOL v13;
  char *v14;
  char *v15;
  char *v17;

  v10 = (char *)*a1;
  v11 = (char *)a1[1];
  if (*a1)
    v12 = __dst == 0;
  else
    v12 = 1;
  v13 = v12 || v10 == __src;
  v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    v14 = &__dst[__src - v10];
  }
  if (a5)
    bzero(v14, 8 * a5);
  if (__src)
  {
    v15 = &v10[8 * (_QWORD)v11];
    if (v15 != __src && v14 != 0)
      memmove(&v14[8 * a5], __src, v15 - __src);
  }
  if (v10 && a1 + 3 != *a1)
    operator delete(*a1);
  v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

uint64_t boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void **)a1;
    do
    {
      --v2;
      v3 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v3) + 24);
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>(_QWORD ***a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(***a1 + 16))(**a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEC0B0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBC290(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEC2D0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBC30C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEC4F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBC388(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEC710;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBC404(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEC930;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBC480(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_212EBC5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>(uint64_t a1)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t);
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)&v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((_QWORD *)&v9 + 1) = 93;
  v10 = 0;
  di_log::logger<di_log::log_printer<167ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unregistering plugin ", 21);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, v5, v6);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf((uint64_t)v11);
  result = MEMORY[0x2199A89AC](&v13);
  v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8)
    return v8(a2);
  return result;
}

void sub_212EBC70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<167ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24CEECEC8;
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24CEECEC8;
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()(a1 + 32, *(_QWORD *)(a1 + 24));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v2);
}

uint64_t std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *di_log::logger<di_log::log_printer<167ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<167ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEECF30;
  a1[45] = &unk_24CEED030;
  a1[46] = &unk_24CEED058;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEECF30;
  a1[45] = &unk_24CEECFB8;
  a1[46] = &unk_24CEECFE0;
  return a1;
}

void sub_212EBC904(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEED0C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBC9D0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEED0C8;
  di_log::logger_buf<di_log::log_printer<167ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<167ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<167ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EBCDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<167ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 167;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 167;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEECB50;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBD038(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::bad_expected_access<void>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CEED188;
  return result;
}

void std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CEED188;
}

uint64_t std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t (*v3)(void);

  result = *a2;
  v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3)
    return v3();
  return result;
}

uint64_t std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::target_type()
{
}

uint64_t *std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v6 = (_QWORD *)operator new();
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
  std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__shared_ptr_pointer[abi:ne180100](v6, a2, (uint64_t)v10);
  a1[1] = (uint64_t)v6;
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_212EBD64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2)
    _Unwind_Resume(exception_object);
  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_7;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_7:
  MEMORY[0x2199A8A18](v14, 0x10A1C40FC8AAF90);
  __cxa_begin_catch(exception_object);
  v18 = *(_QWORD *)(v13 + 24);
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &a9);
  __cxa_rethrow();
}

uint64_t std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__shared_ptr_pointer[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEED218;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  a1[3] = a2;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 4), (uint64_t)v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  uint64_t *p_shared_owners;
  uint64_t *shared_owners;
  uint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEED218;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    v4 = 4;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }
  if (shared_owners)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  uint64_t *p_shared_owners;
  uint64_t *shared_owners;
  uint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEED218;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    v4 = 4;
    shared_owners = p_shared_owners;
  }
  else
  {
    if (!shared_owners)
    {
LABEL_6:
      std::__shared_weak_count::~__shared_weak_count(this);
      JUMPOUT(0x2199A8A18);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*shared_owners + 8 * v4))();
  goto LABEL_6;
}

_QWORD *std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v5 = a1[3];
  v2 = a1[7];
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  result = (_QWORD *)a1[7];
  if (result == a1 + 4)
  {
    v4 = 4;
    result = a1 + 4;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEECD70;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBDA70(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<545ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<545ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEED320;
  a1[45] = &unk_24CEED420;
  a1[46] = &unk_24CEED448;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEED320;
  a1[45] = &unk_24CEED3A8;
  a1[46] = &unk_24CEED3D0;
  return a1;
}

void sub_212EBDB08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

sg_vec_ref *std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>(sg_vec_ref *a1, uint64_t a2)
{
  if (*((_BYTE *)a1 + 528))
  {
    sg_vec_ref::operator=((uint64_t)a1, a2);
  }
  else
  {
    sg_vec_ref::sg_vec_ref(a1, a2);
    *((_BYTE *)a1 + 528) = 1;
  }
  return a1;
}

void sg_vec_ref::~sg_vec_ref(sg_vec_ref *this)
{
  char *v2;

  v2 = (char *)this + 368;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, (__int128 *)a2);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 112, (__int128 *)(a2 + 112));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  return a1;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  std::shared_ptr<DiskImage>::operator=[abi:ne180100]((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  std::shared_ptr<DiskImage>::operator=[abi:ne180100]((_QWORD *)(a1 + 112), (uint64_t *)(a2 + 112));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEED4B8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EBDCFC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEED4B8;
  di_log::logger_buf<di_log::log_printer<545ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<545ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<545ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EBE0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<545ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 545;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 545;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t sg_vec_ref::operator=(uint64_t a1, uint64_t a2)
{
  const sg_vec_ns::details::buffer_iterator *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (const sg_vec_ns::details::buffer_iterator *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 64, (__int128 *)(a2 + 64));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v7;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 152, (__int128 *)(a2 + 152));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v22, (sg_vec_ref *)a1, v4, 1);
  sg_vec_ns::details::sg_vec_iterator::operator=(a1 + 368, (uint64_t)&v22);
  v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v22, (sg_vec_ref *)a1, (const sg_vec_ns::details::buffer_iterator *)(a1 + 96), 0);
  sg_vec_ns::details::sg_vec_iterator::operator=(a1 + 208, (uint64_t)&v22);
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

sg_vec_ref *sg_vec_ref::sg_vec_ref(sg_vec_ref *a1, uint64_t a2)
{
  uint64_t v3;
  const sg_vec_ns::details::buffer_iterator *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v3;
  v4 = (sg_vec_ref *)((char *)a1 + 8);
  *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *((_BYTE *)a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)((char *)a1 + 40) = v6;
  *(_OWORD *)((char *)a1 + 24) = v5;
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  *((_QWORD *)a1 + 12) = *(_QWORD *)(a2 + 96);
  *((_QWORD *)a1 + 13) = *(_QWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *((_BYTE *)a1 + 144) = *(_BYTE *)(a2 + 144);
  *((_OWORD *)a1 + 7) = v7;
  *((_OWORD *)a1 + 8) = v8;
  *(_OWORD *)((char *)a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)((char *)a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)((char *)a1 + 184) = *(_OWORD *)(a2 + 184);
  *((_BYTE *)a1 + 200) = *(_BYTE *)(a2 + 200);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ref *)((char *)a1 + 208), a1, (sg_vec_ref *)((char *)a1 + 96), 0);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ref *)((char *)a1 + 368), a1, v4, 1);
  return a1;
}

void sub_212EBE5CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 320);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 480);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 368);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 320);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 208);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 152);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 64);
  }
  return a1;
}

char *std::vector<std::shared_ptr<char>>::emplace_back<std::shared_ptr<char> const&>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_212EBFE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t _diskDisappearedCallback(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "onDiskDisappearedWithDisk:", a1);
}

uint64_t _idleCallback(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setCallbackReached:", 1);
}

void _daOperationCallback(uint64_t a1, const __DADissenter *a2, void *a3)
{
  void *v4;
  uint64_t Status;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  if (a2)
  {
    v4 = (void *)MEMORY[0x24BDD17C8];
    Status = DADissenterGetStatus(a2);
    objc_msgSend(v4, "stringWithFormat:", CFSTR("Dissented with status 0x%X, pid %d"), Status, DADissenterGetProcessID());
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError errorWithEnumValue:verboseInfo:](DIError, "errorWithEnumValue:verboseInfo:", 156, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setOperationError:", v7);

  }
  objc_msgSend(v8, "setCallbackReached:", 1);

}

void sub_212EC44A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_212EC4B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_212EC4D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_212EC5280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_212EC6124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  id v24;
  void *v25;

  if (a2 == 1)
  {
    v24 = objc_begin_catch(exception_object);
    objc_msgSend(v24, "reason");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v25, v23);

    objc_end_catch();
    JUMPOUT(0x212EC60E8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_212EC659C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  id v18;
  void *v19;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(exception_object);
    objc_msgSend(v18, "reason");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v19, v17);

    objc_end_catch();
    JUMPOUT(0x212EC6564);
  }
  _Unwind_Resume(exception_object);
}

void sub_212EC6E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_212EC7380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_212EC74A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void create_stack_vector_from_single_path(const std::__fs::filesystem::path *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  void *v8;
  void *v9;
  uint64_t v10;
  const std::__fs::filesystem::path *v11;
  void *v12;
  void *v13;
  BOOL v14;
  id v15;
  id v16;
  void *v17;
  DiskImageGraph *v18;
  id v19;
  void *v20;
  _BOOL4 v21;
  int v22;
  NSObject *v23;
  void *v24;
  char *v25;
  int v26;
  NSObject *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  void *v31;
  _QWORD *exception;
  unsigned int v33;
  const std::error_category *v34;
  unint64_t v35;
  NSObject *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t error_code;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v6 = SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]);
  v7 = a1->__pn_.__r_.__value_.__r.__words[0];
  v8 = (void *)MEMORY[0x24BDBCF48];
  v9 = (void *)MEMORY[0x24BDD17C8];
  v10 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v6 >= 0)
    v11 = a1;
  else
    v11 = (const std::__fs::filesystem::path *)v7;
  objc_msgSend(v9, "stringWithCString:encoding:", v11, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "fileURLWithPath:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v44 = 0;
  v45 = 0;
  v14 = +[DiskImageGraph loadPlistDictFromURL:dict:error:](DiskImageGraph, "loadPlistDictFromURL:dict:error:", v13, &v45, &v44);
  v15 = v45;
  v16 = v44;
  v17 = v16;
  if (!v14)
  {
    objc_msgSend(v16, "domain");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v20, "isEqualToString:", CFSTR("com.apple.DiskImages2.ErrorDomain")))
    {
      v21 = objc_msgSend(v17, "code") == 167;

      if (v21)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        goto LABEL_10;
      }
    }
    else
    {

    }
    v22 = *__error();
    if (DIForwardLogs())
    {
      v43 = 0;
      getDIOSLog();
      v23 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      objc_msgSend(v17, "description");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 68158210;
      v47 = 124;
      v48 = 2080;
      v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesyste"
            "m::path &, BOOL)";
      v50 = 2112;
      v51 = v24;
      v25 = (char *)_os_log_send_and_compose_impl();

      if (v25)
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v25);
        free(v25);
      }
    }
    else
    {
      getDIOSLog();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v17, "description");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 68158210;
        v47 = 124;
        v48 = 2080;
        v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesys"
              "tem::path &, BOOL)";
        v50 = 2112;
        v51 = v31;
        _os_log_impl(&dword_212EB0000, v30, OS_LOG_TYPE_ERROR, "%.*s: Failed to read pstack: %@.", buf, 0x1Cu);

      }
    }
    *__error() = v22;
    exception = __cxa_allocate_exception(0x40uLL);
    objc_msgSend(v17, "domain");
    if (objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "isEqualToString:", *MEMORY[0x24BDD1128]))
    {
      v33 = objc_msgSend(v17, "code");
      v34 = std::generic_category();
      v35 = 0;
    }
    else
    {
      error_code = make_error_code(150);
      v33 = error_code;
      v35 = error_code & 0xFFFFFFFF00000000;
    }
    *exception = &off_24CF07908;
    exception[1] = v33 | v35;
    exception[2] = v34;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Failed to read pstack.";
  }
  v42 = v16;
  v18 = -[DiskImageGraph initWithData:pstackURL:imported:error:]([DiskImageGraph alloc], "initWithData:pstackURL:imported:error:", v15, v13, 0, &v42);
  v19 = v42;

  if (!v18)
  {
    v26 = *__error();
    if (DIForwardLogs())
    {
      v43 = 0;
      getDIOSLog();
      v27 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
      objc_msgSend(v19, "description");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 68158210;
      v47 = 124;
      v48 = 2080;
      v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesyste"
            "m::path &, BOOL)";
      v50 = 2112;
      v51 = v28;
      v29 = (char *)_os_log_send_and_compose_impl();

      if (v29)
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v29);
        free(v29);
      }
    }
    else
    {
      getDIOSLog();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v19, "description");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 68158210;
        v47 = 124;
        v48 = 2080;
        v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesys"
              "tem::path &, BOOL)";
        v50 = 2112;
        v51 = v37;
        _os_log_impl(&dword_212EB0000, v36, OS_LOG_TYPE_ERROR, "%.*s: Failed to create graph from plist: %@.", buf, 0x1Cu);

      }
    }
    *__error() = v26;
    v38 = __cxa_allocate_exception(0x40uLL);
    v39 = make_error_code(161);
    *v38 = &off_24CF07908;
    v38[1] = v39;
    v38[2] = v40;
    *((_BYTE *)v38 + 24) = 0;
    *((_BYTE *)v38 + 48) = 0;
    v38[7] = "Failed to create graph from plist.";
  }
  create_stack_vec_from_graph(v18, a2, (uint64_t **)a3);

  v17 = v19;
LABEL_10:

}

void sub_212EC7B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void create_stack_vec_from_graph(DiskImageGraph *a1@<X0>, char a2@<W1>, uint64_t **a3@<X8>)
{
  DiskImageGraph *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int64x2_t v37;
  diskimage_uio::stack_image_node *v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  int64x2_t v46;
  diskimage_uio::stack_image_node *v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *exception;
  uint64_t error_code;
  uint64_t v52;
  DiskImageGraph *v53;
  char *v54;
  std::string v55;
  diskimage_uio::stack_image_node *v56;
  std::string v57;
  void *__p;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;

  v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v53 = v5;
  -[DiskImageGraph activeNode](v5, "activeNode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = 3;
    do
    {
      if ((objc_msgSend(v6, "isCache") & 1) != 0)
      {
        v8 = 2;
        v9 = 1;
      }
      else
      {
        objc_msgSend(v6, "parent");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
          v9 = v7;
        else
          v9 = 0;

        v8 = 0;
      }
      if (*a3 == a3[1] && (a2 & 1) == 0)
      {
        v8 = 1;
        if ((_DWORD)v9)
        {
          if ((_DWORD)v9 != 3)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            error_code = make_error_code(150);
            *exception = &off_24CF07908;
            exception[1] = error_code;
            exception[2] = v52;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 48) = 0;
            exception[7] = "Stack with cache as top image cannot be opened for writing.";
          }
        }
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v6, "filePath");
        v11 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "path");
        v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v54 = (char *)objc_msgSend(v12, "UTF8String");
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v55, &v54);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v57, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
        else
          v57 = v55;
        v23 = operator new();
        __p = 0;
        v59 = 0uLL;
        diskimage_uio::stack_image_node::stack_image_node(v23, v9, v8, &v57, &__p, 0);
        v56 = (diskimage_uio::stack_image_node *)v23;
        if (v59.i8[15] < 0)
          operator delete(__p);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        v24 = a3[1];
        v25 = (unint64_t)a3[2];
        if ((unint64_t)v24 >= v25)
        {
          v26 = v24 - *a3;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<iovec>::__throw_length_error[abi:ne180100]();
          v28 = v25 - (_QWORD)*a3;
          if (v28 >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          v61 = a3 + 2;
          if (v29)
            v30 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a3 + 2), v29);
          else
            v30 = 0;
          v31 = (uint64_t *)&v30[8 * v26];
          v32 = &v30[8 * v29];
          v60 = v32;
          v56 = 0;
          *v31 = v23;
          v33 = v31 + 1;
          v59.i64[1] = (uint64_t)(v31 + 1);
          v35 = *a3;
          v34 = a3[1];
          if (v34 == *a3)
          {
            v38 = 0;
            v37 = vdupq_n_s64((unint64_t)v34);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v31 = v36;
            }
            while (v34 != v35);
            v37 = *(int64x2_t *)a3;
            v33 = (uint64_t *)v59.i64[1];
            v32 = v60;
            v38 = v56;
          }
          *a3 = v31;
          a3[1] = v33;
          v59 = v37;
          v39 = a3[2];
          a3[2] = (uint64_t *)v32;
          v60 = (char *)v39;
          __p = (void *)v37.i64[0];
          std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer((uint64_t)&__p);
          a3[1] = v33;
          if (v38)
          {
            diskimage_uio::stack_image_node::~stack_image_node(v38);
            MEMORY[0x2199A8A18]();
          }
        }
        else
        {
          v56 = 0;
          *v24 = v23;
          a3[1] = v24 + 1;
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);

      }
      else
      {
        v11 = v6;
        objc_msgSend(v11, "pluginName");
        v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(&v57, (char *)objc_msgSend(v13, "UTF8String"));

        objc_msgSend(v11, "pluginParams");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        v15 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        diskimage_uio::stack_image_node::stack_image_node(v15, v9, v8, &__p, &v57, v14);
        v55.__r_.__value_.__r.__words[0] = v15;
        if (v59.i8[15] < 0)
          operator delete(__p);
        v16 = a3[1];
        v17 = (unint64_t)a3[2];
        if ((unint64_t)v16 >= v17)
        {
          v18 = v16 - *a3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<iovec>::__throw_length_error[abi:ne180100]();
          v20 = v17 - (_QWORD)*a3;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          v61 = a3 + 2;
          if (v21)
            v22 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a3 + 2), v21);
          else
            v22 = 0;
          v40 = (uint64_t *)&v22[8 * v18];
          v41 = &v22[8 * v21];
          v60 = v41;
          v55.__r_.__value_.__r.__words[0] = 0;
          *v40 = v15;
          v42 = v40 + 1;
          v59.i64[1] = (uint64_t)(v40 + 1);
          v44 = *a3;
          v43 = a3[1];
          if (v43 == *a3)
          {
            v47 = 0;
            v46 = vdupq_n_s64((unint64_t)v43);
          }
          else
          {
            do
            {
              v45 = *--v43;
              *v43 = 0;
              *--v40 = v45;
            }
            while (v43 != v44);
            v46 = *(int64x2_t *)a3;
            v42 = (uint64_t *)v59.i64[1];
            v41 = v60;
            v47 = (diskimage_uio::stack_image_node *)v55.__r_.__value_.__r.__words[0];
          }
          *a3 = v40;
          a3[1] = v42;
          v59 = v46;
          v48 = a3[2];
          a3[2] = (uint64_t *)v41;
          v60 = (char *)v48;
          __p = (void *)v46.i64[0];
          std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer((uint64_t)&__p);
          a3[1] = v42;
          if (v47)
          {
            diskimage_uio::stack_image_node::~stack_image_node(v47);
            MEMORY[0x2199A8A18]();
          }
        }
        else
        {
          v55.__r_.__value_.__r.__words[0] = 0;
          *v16 = v15;
          a3[1] = v16 + 1;
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }

      objc_msgSend(v6, "parent");
      v49 = objc_claimAutoreleasedReturnValue();

      v7 = 2;
      v6 = (void *)v49;
    }
    while (v49);
  }

}

void sub_212EC80FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);

  _Unwind_Resume(a1);
}

void create_stack_vector_from_single_fd(const std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X8>)
{
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  DiskImageGraph *v15;
  id v16;
  _QWORD *exception;
  uint64_t error_code;
  uint64_t v19;
  _QWORD *v20;
  const std::error_category *v21;
  int v22;
  NSObject *v23;
  void *v24;
  char *v25;
  NSObject *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1578]), "initWithFileDescriptor:closeOnDealloc:", a2, 0);
  v33 = 0;
  objc_msgSend(v7, "readDataUpToLength:error:", 0x100000, &v33);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v33;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    error_code = make_error_code(154);
    *exception = &off_24CF07908;
    exception[1] = error_code;
    exception[2] = v19;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Failed to read from fd.";
  }
  v32 = 0;
  objc_msgSend(MEMORY[0x24BDD1770], "propertyListWithData:options:format:error:", v8, 0, &v34, &v32);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v32;

  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!a1->__pn_.__r_.__value_.__l.__size_)
        goto LABEL_14;
      a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
    }
    else if (!*((_BYTE *)&a1->__pn_.__r_.__value_.__s + 23))
    {
LABEL_14:
      v20 = __cxa_allocate_exception(0x40uLL);
      v21 = std::generic_category();
      *v20 = &off_24CF07908;
      v20[1] = 22;
      v20[2] = v21;
      *((_BYTE *)v20 + 24) = 0;
      *((_BYTE *)v20 + 48) = 0;
      v20[7] = "Cannot initialize pstack disk image without path.";
    }
    v12 = (void *)MEMORY[0x24BDBCF48];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", a1, objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "fileURLWithPath:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v31 = v11;
    v15 = -[DiskImageGraph initWithData:pstackURL:imported:error:]([DiskImageGraph alloc], "initWithData:pstackURL:imported:error:", v10, v14, 0, &v31);
    v16 = v31;

    if (!v15)
    {
      v22 = *__error();
      if (DIForwardLogs())
      {
        getDIOSLog();
        v23 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
        objc_msgSend(v16, "description");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 68158210;
        v36 = 127;
        v37 = 2080;
        v38 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::file"
              "system::path &, BOOL)";
        v39 = 2112;
        v40 = v24;
        v25 = (char *)_os_log_send_and_compose_impl();

        if (v25)
        {
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v25);
          free(v25);
        }
      }
      else
      {
        getDIOSLog();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(v16, "description");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 68158210;
          v36 = 127;
          v37 = 2080;
          v38 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::fi"
                "lesystem::path &, BOOL)";
          v39 = 2112;
          v40 = v27;
          _os_log_impl(&dword_212EB0000, v26, OS_LOG_TYPE_ERROR, "%.*s: Failed to create graph from plist: %@.", buf, 0x1Cu);

        }
      }
      *__error() = v22;
      v28 = __cxa_allocate_exception(0x40uLL);
      v29 = make_error_code(161);
      *v28 = &off_24CF07908;
      v28[1] = v29;
      v28[2] = v30;
      *((_BYTE *)v28 + 24) = 0;
      *((_BYTE *)v28 + 48) = 0;
      v28[7] = "Failed to create graph from plist.";
    }
    create_stack_vec_from_graph(v15, a3, (uint64_t **)a4);

    v11 = v16;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }

}

void sub_212EC86B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  __cxa_free_exception(v7);

  _Unwind_Resume(a1);
}

void *std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100]((diskimage_uio::stack_image_node **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_212EC8828(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_212EC899C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

diskimage_uio::stack_image_node *std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100](diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  diskimage_uio::stack_image_node *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    diskimage_uio::stack_image_node::~stack_image_node(result);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

void std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  diskimage_uio::stack_image_node **v2;
  diskimage_uio::stack_image_node **v4;
  void *v5;

  v1 = *a1;
  v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    v4 = (diskimage_uio::stack_image_node **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_212EC8BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EC8C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EC8DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EC9220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EC96AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_212EC9A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EC9E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_212EC9F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_212ECA044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ECA0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212ECA134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECA278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ECA32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ECAC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECAE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECB0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECB1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ECB274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ECB38C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECB810(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  id v13;
  void *v14;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    objc_msgSend(v13, "reason");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v14, v10);

    objc_end_catch();
    JUMPOUT(0x212ECB7D8);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_212ECBBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_212ECBDD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECBF60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_212ECC0BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_212ECC250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_212ECC4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECC53C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECC610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECC6E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECC7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECC83C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECC9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECCB8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_212ECCCD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECD068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_212ECD2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_212ECD384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECD404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECDACC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  void *v17;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 16))(a12);

  if (a2 == 1)
  {
    objc_msgSend(objc_begin_catch(a1), "reason");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v17, v12);

    objc_end_catch();
    JUMPOUT(0x212ECD630);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImage::Context::flush(_QWORD *a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1[1] + 8) & 1) == 0)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v2 = "DiskImage::Context::flush(di_flush_mode)";
    *((_QWORD *)&v2 + 1) = 25;
    v3 = 2;
    di_log::logger<di_log::log_printer<191ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Disk image is terminated, skipping flush", 40);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf((uint64_t)v4);
    MEMORY[0x2199A89AC](&v6);
  }
  return 4294967290;
}

void sub_212ECDD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<191ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<191ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<191ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEED6F8;
  a1[45] = &unk_24CEED7F8;
  a1[46] = &unk_24CEED820;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEED6F8;
  a1[45] = &unk_24CEED780;
  a1[46] = &unk_24CEED7A8;
  return a1;
}

void sub_212ECDE18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEED890;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212ECDEE4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEED890;
  di_log::logger_buf<di_log::log_printer<191ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<191ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<191ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212ECE2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<191ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 191;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 191;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

void sub_212ECE86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_212ECECA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_212ECF304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECF394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_212ECF49C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECF54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212ECF5F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECF6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ECF75C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECF858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ECF9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECFBF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECFCB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ECFD54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED0324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_212ED0A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ED0C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ED0C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED0D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ED0DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ED0E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ED1244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  void *v21;

  if (a21)
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a19);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_212ED1414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_212ED14DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212ED1558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED19F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_212ED1B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_212ED1CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_212ED1EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_212ED26AC()
{
  JUMPOUT(0x212ED26B4);
}

void sub_212ED26BC()
{
  void *v0;

  JUMPOUT(0x212ED26F0);
}

void sub_212ED26CC()
{
  JUMPOUT(0x212ED26F8);
}

void sub_212ED26D8()
{
  JUMPOUT(0x212ED2710);
}

void sub_212ED2704()
{
  void *v0;

  JUMPOUT(0x212ED2720);
}

void sub_212ED2718(_Unwind_Exception *a1, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v6;
  void *v7;

  if (a2 == 1)
  {
    v6 = __cxa_begin_catch(a1);
    objc_msgSend(v2, "path");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError nilWithDIException:prefix:error:](DIError, "nilWithDIException:prefix:error:", v6, v7, v3);
    objc_claimAutoreleasedReturnValue();

    __cxa_end_catch();
    JUMPOUT(0x212ED1FD8);
  }

  _Unwind_Resume(a1);
}

#error "212ED2A94: call analysis failed (funcsize=134)"

void sub_212ED2C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED2E98(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, AEAAuthData a13, uint64_t a14)
{
  void *v14;
  uint64_t v15;
  uint64_t v16;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,AEAHelper::kms_t,AEAHelper::wkms_t>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a14);
  AEAwrapper::AuthData::~AuthData(&a13);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v16 - 48);
  if (a2 == 1)
  {
    +[DIError nilWithDIException:description:error:](DIError, "nilWithDIException:description:error:", __cxa_begin_catch(a1), CFSTR("Error while creating AEA backend"), v15);
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x212ED2E7CLL);
  }

  _Unwind_Resume(a1);
}

void sub_212ED3130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED3140(void *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va);
  __cxa_begin_catch(a1);
  +[DIError nilWithEnumValue:verboseInfo:error:](DIError, "nilWithEnumValue:verboseInfo:error:", 150, CFSTR("Error checking for AEA file"), v2);
  objc_claimAutoreleasedReturnValue();
  __cxa_end_catch();
  JUMPOUT(0x212ED3088);
}

void sub_212ED3190(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x212ED3134);
}

void sub_212ED3334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, uint64_t a20,uint64_t a21,std::string *buf,uint64_t a23,uint64_t bufa,__int16 a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  uint64_t v30;
  DiskImageParamsUDIF_XPC *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;

  v30 = a23;
  a23 = 0;
  if (v30)
    MEMORY[0x2199A8A18](v30, 0x1000C404247E4FDLL);
  if (a2 == 2)
  {
    +[DIError nilWithDIException:description:error:](DIError, "nilWithDIException:description:error:", __cxa_begin_catch(a1), 0, v27);
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
  }
  else
  {
    if (a2 != 1)
    {

      _Unwind_Resume(a1);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    objc_msgSend(v26, "backend");
    UDIF_header::UDIF_header(&bufa, &a19);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
    std::make_unique[abi:ne180100]<udif::header,udif::header const&>(bufa, (uint64_t *)&a19);
    v31 = [DiskImageParamsUDIF_XPC alloc];
    v32 = a19;
    a19 = 0;
    buf = v32;
    -[DiskImageParamsUDIF_XPC initWithBackendXPC:header:](v31, "initWithBackendXPC:header:", v26, &buf);
    v33 = buf;
    buf = 0;
    if (v33)
      MEMORY[0x2199A8A18](v33, 0x1000C407784F2AFLL);
    v34 = a19;
    a19 = 0;
    if (v34)
      MEMORY[0x2199A8A18](v34, 0x1000C407784F2AFLL);
    UDIF_header::~UDIF_header((UDIF_header *)&bufa);
  }
  JUMPOUT(0x212ED32F8);
}

__n128 std::make_unique[abi:ne180100]<udif::header,udif::header const&>@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = 0x4796C6F6BLL;
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 8) = 512;
  *(_DWORD *)(v4 + 12) = v5;
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a1 + 216);
  v7 = *(_OWORD *)(a1 + 232);
  v8 = *(_OWORD *)(a1 + 248);
  v9 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v4 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v4 + 280) = v9;
  *(_OWORD *)(v4 + 248) = v8;
  *(_OWORD *)(v4 + 232) = v7;
  v10 = *(_OWORD *)(a1 + 296);
  v11 = *(_OWORD *)(a1 + 312);
  v12 = *(_OWORD *)(a1 + 328);
  *(_QWORD *)(v4 + 344) = *(_QWORD *)(a1 + 344);
  *(_OWORD *)(v4 + 312) = v11;
  *(_OWORD *)(v4 + 328) = v12;
  *(_OWORD *)(v4 + 296) = v10;
  *(_QWORD *)(v4 + 352) = *(_QWORD *)(a1 + 352);
  *(_OWORD *)(v4 + 424) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(v4 + 440) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(v4 + 456) = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(v4 + 472) = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(v4 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(v4 + 376) = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(v4 + 392) = *(_OWORD *)(a1 + 392);
  result = *(__n128 *)(a1 + 408);
  *(__n128 *)(v4 + 408) = result;
  *(_DWORD *)(v4 + 488) = *(_DWORD *)(a1 + 488);
  *(_QWORD *)(v4 + 492) = *(_QWORD *)(a1 + 492);
  *a2 = v4;
  return result;
}

void UDIF_header::~UDIF_header(UDIF_header *this)
{
  uint64_t v2;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x2199A8A18](v2, 0x1000C407784F2AFLL);
}

void sub_212ED3B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ED3BC4(_Unwind_Exception *a1, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:](DIError, "failWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("Error encrypting new image"), v3);
    __cxa_end_catch();
    JUMPOUT(0x212ED3BA8);
  }

  _Unwind_Resume(a1);
}

void sub_212ED3CE0(_Unwind_Exception *a1, int a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:](DIError, "failWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("Error encrypting new image"), v3);
    __cxa_end_catch();
    JUMPOUT(0x212ED3CC4);
  }

  _Unwind_Resume(a1);
}

void sub_212ED3DDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED4110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212ED4120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint8_t buf,int a27,__int16 a28,uint64_t a29,__int16 a30,uint64_t a31)
{
  void *v31;

  std::ostringstream::~ostringstream((uint64_t)&buf);
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void sub_212ED4164()
{
  JUMPOUT(0x212ED4170);
}

#error "212ED42AC: call analysis failed (funcsize=133)"

void sub_212ED43C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_212ED43CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_212ED43E4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x212ED43ECLL);
  __clang_call_terminate(a1);
}

void sub_212ED45A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED50AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint8_t buf,int a51,__int16 a52,__int16 a53,int a54,__int16 a55,__int16 a56,__int16 a57)
{
  __break(1u);
}

void sub_212ED55F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_212ED561C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_212ED5628(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<DiskImage>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::insert(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[24 * v12];
    v20 = v19;
    v21 = &v16[24 * v15];
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::push_back(&v18, a3);
    v4 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }
  else
  {
    std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__move_range((uint64_t)a1, a2, v6, a2 + 24);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v4, (__int128 *)a3);
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }
  return v4;
}

void sub_212ED5814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::emplace_back<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD v16[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = v4;
    if (v12)
      v13 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v4, v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_212ED5948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212ED5B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED5C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ED5D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ED5E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212ED606C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212ED623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212ED642C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

#error "212ED6604: call analysis failed (funcsize=169)"

void sub_212ED6720()
{
  __cxa_end_catch();
  JUMPOUT(0x212ED6440);
}

void sub_212ED6760(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x212ED6440);
}

_QWORD *di_log::logger<di_log::log_printer<651ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<651ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEDAD8;
  a1[45] = &unk_24CEEDBD8;
  a1[46] = &unk_24CEEDC00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEDAD8;
  a1[45] = &unk_24CEEDB60;
  a1[46] = &unk_24CEEDB88;
  return a1;
}

void sub_212ED67F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void sub_212ED68D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x2199A8A18](v10, 0x10E1C40ACB1F3BALL);

  _Unwind_Resume(a1);
}

void sub_212ED6DD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED6FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED70A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED7134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x2199A8A18](v10, 0x10B3C402F18E594);

  _Unwind_Resume(a1);
}

void sub_212ED71A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED72FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212ED7390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED7444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED7558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);

  _Unwind_Resume(a1);
}

void sub_212ED78F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212ED7C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::ostringstream::~ostringstream((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_212ED7CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED7DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED7F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED8048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED8838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_212ED8CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::ostringstream::~ostringstream((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_212ED8DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212ED8ED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(uint64_t a1, const void **a2)
{
  memcpy(**(void ***)(*(_QWORD *)a1 + 72), *a2, **(_QWORD **)(*(_QWORD *)a1 + 80));
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  int v4;
  std::string::size_type v5;
  uint64_t v6;
  std::string *p_p;
  void *v8;
  uint64_t v9;
  std::string __p;

  v2 = *a1;
  v3 = (void *)MEMORY[0x24BDD17C8];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v4 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v5 = __p.__r_.__value_.__r.__words[0];
  v6 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding", __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    p_p = &__p;
  else
    p_p = (std::string *)v5;
  objc_msgSend(v3, "stringWithCString:encoding:", p_p, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = objc_msgSend(**(id **)(v2 + 24), "getAEAKeyFromSAKSWithMetadata:key:error:", v8, **(_QWORD **)(v2 + 32), **(_QWORD **)(v2 + 40));

  return v9;
}

void sub_212ED9060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(_QWORD ***a1, uint64_t *a2)
{
  _QWORD **v2;
  void *v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v2 = *a1;
  v3 = (void *)MEMORY[0x24BDBCF48];
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v4, 4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "URLWithString:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = +[DIKeyRetriever KKMSKeyWithURL:destKey:destKeySize:error:](DIKeyRetriever, "KKMSKeyWithURL:destKey:destKeySize:error:", v6, **v2, *v2[1], *v2[2]);
  return v7;
}

void sub_212ED9124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>(_QWORD *a1, uint64_t *a2)
{
  _QWORD **v3;
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v3 = (_QWORD **)*a1;
  v4 = (void *)MEMORY[0x24BDBCF48];
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v5, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "URLWithString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = +[DIKeyRetriever WKMSKeyWithURL:authData:destKey:destKeySize:error:](DIKeyRetriever, "WKMSKeyWithURL:authData:destKey:destKeySize:error:", v7, a2[3], *v3[6], *v3[7], *v3[8]);
  return v8;
}

void sub_212ED91E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,AEAHelper::kms_t,AEAHelper::wkms_t>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CEEDA58[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    JUMPOUT(0x2199A8A00);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>(a2, v7, v6);
}

__n128 std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int64x2_t v22;
  uint64_t v23;
  __n128 result;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v6 = *a1;
    v5 = a1[1];
    if (v5 <= *a1)
    {
      v11 = v4 - v6;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v28 = a1[4];
      v15 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v28, v13);
      v17 = &v15[24 * v14];
      v18 = a1[1];
      v19 = a1[2] - v18;
      if (v19)
      {
        v20 = &v17[v19];
        v21 = &v15[24 * v14];
        do
        {
          *(_OWORD *)v21 = *(_OWORD *)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          *((_DWORD *)v21 + 4) = *(_DWORD *)(v18 + 16);
          v21 += 24;
          v18 += 24;
        }
        while (v21 != v20);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v18);
        v20 = &v15[24 * v14];
      }
      v25 = *a1;
      *a1 = v15;
      a1[1] = v17;
      v26 = v22;
      v23 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[24 * v16];
      v27 = v23;
      std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)&v25);
      v4 = a1[2];
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -3 * (v8 >> 1);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>(v5, v4, v5 - 24 * (v8 >> 1));
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  result = *a2;
  *(__n128 *)v4 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24;
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(v7 + 16);
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)v10 = *(_OWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a3 + 16);
      v10 += 24;
      a3 += 24;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a3 - 24, (__int128 *)(v6 - 24));
      *(_DWORD *)(a3 - 8) = *(_DWORD *)(v6 - 8);
      a3 -= 24;
      v6 -= 24;
    }
    while (v6 != a1);
  }
  return a2;
}

void *std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a3, (__int128 *)v4);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    a3 += 24;
    v4 += 24;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t smart_enums::validators::flags<unsigned int>(uint64_t result, int a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD *exception;

  if (a4)
  {
    v4 = 4 * a4;
    do
    {
      v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4;
    }
    while (v4);
  }
  if (a2)
  {
    v6 = result;
    v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    *exception = &off_24CEEDAA0;
    exception[1] = v6;
    *((_DWORD *)exception + 8) = v7;
  }
  return result;
}

void smart_enums::validators::validator_exception<unsigned int>::~validator_exception(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x2199A8A18);
}

void smart_enums::validators::validator_exception<unsigned int>::reason(smart_enums::validators::validator_exception_base *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  void *v15[2];
  unsigned __int8 v16;

  v3 = (char *)smart_enums::validators::validator_exception_base::what(a1);
  std::string::basic_string[abi:ne180100]<0>(v15, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  if ((v16 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (uint64_t)v15[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11 = v9;
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](&v14);
  if ((char)v16 < 0)
    operator delete(v15[0]);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_212ED99D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL FileDescriptor::is_mounted_on_apfs(FileDescriptor *this)
{
  unint64_t v1;
  void **v2;
  _BOOL8 v3;
  void *__p[2];
  unsigned __int8 v6;

  FileDescriptor::get_mounted_on_fs((uint64_t *)__p, this);
  v1 = v6;
  if ((v6 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  if (v1 == 4)
  {
    v2 = (void **)__p[0];
    if ((v6 & 0x80u) == 0)
      v2 = __p;
    v3 = *(_DWORD *)v2 == 1936093281;
    if ((char)v6 < 0)
      goto LABEL_9;
  }
  else
  {
    v3 = 0;
    if ((char)v6 < 0)
LABEL_9:
      operator delete(__p[0]);
  }
  return v3;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<651ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEDC70;
  di_log::logger_buf<di_log::log_printer<651ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<651ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212ED9EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<651ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 651;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 651;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

void DiskImageROChunkRaw::~DiskImageROChunkRaw(DiskImageROChunkRaw *this)
{
  *(_QWORD *)this = &off_24CEEDCF0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24CEEDCF0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImageROChunkRaw::get_block_size(DiskImageROChunkRaw *this)
{
  return *((_QWORD *)this + 4);
}

unint64_t DiskImageROChunkRaw::get_num_blocks(DiskImageROChunkRaw *this)
{
  return (unint64_t)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2))
       / *((_QWORD *)this + 4);
}

uint64_t DiskImageROChunkRaw::is_writable(DiskImageROChunkRaw *this)
{
  return 0;
}

info::DiskImageInfoRaw *DiskImageROChunkRaw::create_image_info@<X0>(DiskImageROChunkRaw *this@<X0>, _QWORD *a2@<X8>)
{
  info::DiskImageInfoRaw *v4;
  info::DiskImageInfoRaw *result;

  v4 = (info::DiskImageInfoRaw *)operator new();
  result = info::DiskImageInfoRaw::DiskImageInfoRaw(v4, this);
  *a2 = (char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 104);
  return result;
}

void sub_212EDA200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C408DB67ED7);
  _Unwind_Resume(a1);
}

uint64_t DiskImageROChunkRaw::set_size(DiskImageROChunkRaw *this)
{
  return 4294967251;
}

__n128 DiskImageROChunkRaw::get_io_constraints@<Q0>(DiskImageROChunkRaw *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 40);
  v3 = *(_OWORD *)((char *)this + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t DiskImage::supports_unmap(DiskImage *this)
{
  return 0;
}

uint64_t DiskImage::may_read_extra(DiskImage *this)
{
  return 0;
}

_QWORD *DiskImageROChunkRaw::_create_ctx(DiskImageROChunkRaw *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = off_24CEEDDF0;
  v2[1] = this;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return v2;
}

void sub_212EDA2A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

unint64_t DiskImage::read(DiskImage *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  DiskImage *v55;
  DiskImage::Context *v56;

  v54 = xmmword_212FEBC20;
  v55 = this;
  v56 = a2;
  v4 = *((_QWORD *)a3 + 1);
  *(_QWORD *)&v42 = *(_QWORD *)a3;
  *((_QWORD *)&v42 + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v43[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)a3 + 25);
  v44 = *((_QWORD *)a3 + 6);
  v45 = *(_OWORD *)((char *)a3 + 56);
  v46 = *(_OWORD *)((char *)a3 + 72);
  v47 = *(_OWORD *)((char *)a3 + 88);
  v48 = *((_BYTE *)a3 + 104);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  v49 = *((_QWORD *)a3 + 14);
  v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v51 = *((_OWORD *)a3 + 8);
  v52 = *((_QWORD *)a3 + 18);
  v53 = *((_BYTE *)a3 + 152);
  v10 = *((_QWORD *)a4 + 1);
  *(_QWORD *)&v30 = *(_QWORD *)a4;
  *((_QWORD *)&v30 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v31[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)a4 + 25);
  v32 = *((_QWORD *)a4 + 6);
  v33 = *(_OWORD *)((char *)a4 + 56);
  v34 = *(_OWORD *)((char *)a4 + 72);
  v35 = *(_OWORD *)((char *)a4 + 88);
  v36 = *((_BYTE *)a4 + 104);
  v13 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
  v37 = *((_QWORD *)a4 + 14);
  v38 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v39 = *((_OWORD *)a4 + 8);
  v40 = *((_QWORD *)a4 + 18);
  v41 = *((_BYTE *)a4 + 152);
  v16 = for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  v17 = v38;
  if (v38)
  {
    v18 = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v50;
  if (v50)
  {
    v24 = (unint64_t *)&v50->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v16;
}

void sub_212EDA540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

unint64_t DiskImage::write(DiskImage *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  DiskImage *v55;
  DiskImage::Context *v56;

  v54 = xmmword_212FEBC30;
  v55 = this;
  v56 = a2;
  v4 = *((_QWORD *)a3 + 1);
  *(_QWORD *)&v42 = *(_QWORD *)a3;
  *((_QWORD *)&v42 + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v43[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)a3 + 25);
  v44 = *((_QWORD *)a3 + 6);
  v45 = *(_OWORD *)((char *)a3 + 56);
  v46 = *(_OWORD *)((char *)a3 + 72);
  v47 = *(_OWORD *)((char *)a3 + 88);
  v48 = *((_BYTE *)a3 + 104);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  v49 = *((_QWORD *)a3 + 14);
  v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v51 = *((_OWORD *)a3 + 8);
  v52 = *((_QWORD *)a3 + 18);
  v53 = *((_BYTE *)a3 + 152);
  v10 = *((_QWORD *)a4 + 1);
  *(_QWORD *)&v30 = *(_QWORD *)a4;
  *((_QWORD *)&v30 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v31[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)a4 + 25);
  v32 = *((_QWORD *)a4 + 6);
  v33 = *(_OWORD *)((char *)a4 + 56);
  v34 = *(_OWORD *)((char *)a4 + 72);
  v35 = *(_OWORD *)((char *)a4 + 88);
  v36 = *((_BYTE *)a4 + 104);
  v13 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
  v37 = *((_QWORD *)a4 + 14);
  v38 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v39 = *((_OWORD *)a4 + 8);
  v40 = *((_QWORD *)a4 + 18);
  v41 = *((_BYTE *)a4 + 152);
  v16 = for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  v17 = v38;
  if (v38)
  {
    v18 = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v50;
  if (v50)
  {
    v24 = (unint64_t *)&v50->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v16;
}

void sub_212EDA7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t DiskImageROChunkRaw::read(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  DiskImageROChunkRaw::get_rounded_sg_entry(a1, a3, (uint64_t)&v9);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16), &v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_212EDA8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t DiskImageROChunkRaw::write()
{
  return -102;
}

uint64_t DiskImageROChunkRaw::flush()
{
  return 4294967251;
}

uint64_t DiskImage::unmap()
{
  return 4294967251;
}

uint64_t DiskImage::set_size(DiskImage *this)
{
  return 4294967218;
}

double DiskImage::get_io_constraints@<D0>(DiskImage *this@<X0>, _OWORD *a2@<X8>)
{
  double result;

  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

void DiskImageROChunkRaw::ContextROChunkRaw::~ContextROChunkRaw(DiskImageROChunkRaw::ContextROChunkRaw *this)
{
  *(_QWORD *)this = off_24CEEDDF0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = off_24CEEDDF0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2199A8A18);
}

unint64_t for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = details::for_each_sg_in_vec_internal<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>(a1, (sg_vec_ns *)&v40, (const sg_vec_ns::details::sg_vec_iterator *)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_212EDAB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

unint64_t details::for_each_sg_in_vec_internal<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>(uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, _QWORD, __int128 *);
  _QWORD *v13;
  int64_t v14;
  const sg_vec_ns::details::sg_vec_iterator *v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  _BYTE v28[112];
  uint64_t v29;
  _QWORD v30[2];
  char v31;
  _BYTE v32[248];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  _BYTE v37[544];

  v8 = 0;
  v9 = *((_QWORD *)a3 + 18);
  v37[0] = 0;
  v37[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((_QWORD *)a2 + 18) >= v9 || v8 >= a4)
      break;
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v35 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((_QWORD *)&v35 + 1) = 142;
      v36 = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v30, &v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"sg: ", 4);
      operator<<(&v33);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v30);
      MEMORY[0x2199A89AC](&v34);
    }
    v30[0] = 0;
    v30[1] = v9;
    v31 = 2;
    trim_sg_to_interval(a2, (uint64_t)v30, (uint64_t)&v35);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(uint64_t (**)(_QWORD *, _QWORD, __int128 *))a1;
    v13 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (v11 >> 1));
    if ((v11 & 1) != 0)
      v12 = *(uint64_t (**)(_QWORD *, _QWORD, __int128 *))(*v13 + v12);
    v14 = v12(v13, *(_QWORD *)(a1 + 24), &v35);
    v16 = v14;
    v17 = v14 >= 0 || (_DWORD)v14 == 0;
    v18 = v17;
    if (v17)
    {
      v19 = (uint64_t)v15;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v15, v14))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v28, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v28, (uint64_t)a3, v19, v16, a4, (sg_vec_ref *)v30);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v37, (uint64_t)v30);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v30);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v28);
        sg_vec_ref::begin((sg_vec_ref *)v37, (uint64_t)v30);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, (uint64_t)v30);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v32);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v30);
        sg_vec_ref::end((sg_vec_ref *)v37, (uint64_t)v30);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, (uint64_t)v30);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v32);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v30);
      }
      if ((a5 & 1) != 0)
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v16);
      else
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v16);
      v8 += v16;
    }
    else
    {
      if ((int)v14 >= 0)
        v23 = v14;
      else
        v23 = -(int)v14;
      v25 = -v23;
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((v18 & 1) == 0)
      goto LABEL_37;
  }
  v25 = v8;
LABEL_37:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v37);
  return v25;
}

void sub_212EDAE48(_Unwind_Exception *a1)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x320]);
  _Unwind_Resume(a1);
}

_QWORD *DiskImageROChunkRaw::get_rounded_sg_entry@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = a2[2];
  v6 = a2[3];
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v9 = a2[4];
  v10 = *a2;
  result = details::get_dummy_shared_ptr();
  v12 = result[1];
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v6 / v7 * v7;
  v16 = v8 - v15;
  v17 = v5 + v6 + v7 - 1 - v15 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v17)
    v17 = v9;
  if (v16 >= v17)
    v16 = v17;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v16;
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

uint64_t DiskImageRaw::DiskImageRaw(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *exception;
  const std::error_category *v9;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CEEDE48;
  v4 = a2[1];
  *(_QWORD *)(a1 + 16) = *a2;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v9 = std::generic_category();
    exception[1] = 152;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Size is not a multiple of block size";
  }
  return a1;
}

void sub_212EDB058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void DiskImageRaw::~DiskImageRaw(DiskImageRaw *this)
{
  *(_QWORD *)this = &off_24CEEDE48;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24CEEDE48;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImageRaw::get_block_size(DiskImageRaw *this)
{
  return *((_QWORD *)this + 4);
}

unint64_t DiskImageRaw::get_num_blocks(DiskImageRaw *this)
{
  return (unint64_t)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2))
       / *((_QWORD *)this + 4);
}

uint64_t DiskImageRaw::is_writable(DiskImageRaw *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
}

info::DiskImageInfoRaw *DiskImageRaw::create_image_info@<X0>(DiskImageRaw *this@<X0>, _QWORD *a2@<X8>)
{
  info::DiskImageInfoRaw *v4;
  info::DiskImageInfoRaw *result;

  v4 = (info::DiskImageInfoRaw *)operator new();
  result = info::DiskImageInfoRaw::DiskImageInfoRaw(v4, this);
  *a2 = (char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 104);
  return result;
}

void sub_212EDB18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C408DB67ED7);
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::set_size(DiskImageRaw *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
}

uint64_t DiskImageRaw::supports_unmap(DiskImageRaw *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

_QWORD *DiskImageRaw::_create_ctx(DiskImageRaw *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = off_24CEEDF48;
  v2[1] = this;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return v2;
}

void sub_212EDB22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::read(DiskImageRaw *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unsigned int *v36;
  uint64_t v37;
  int v38;
  int v39;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  _OWORD v54[2];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  _QWORD v65[2];
  void *__p;
  __int128 v67;
  _QWORD v68[81];

  v68[80] = *MEMORY[0x24BDAC8D0];
  __p = v68;
  v67 = xmmword_212FEBC40;
  v7 = sg_vec_ns::count_buffers(a3, a4, a3);
  v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v10, v9, (_DWORD *)__p + 10 * v67, 0, 0);
  }
  v65[0] = &__p;
  v65[1] = a2;
  v11 = *((_QWORD *)a3 + 1);
  *(_QWORD *)&v53 = *(_QWORD *)a3;
  *((_QWORD *)&v53 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v54[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)a3 + 25);
  v55 = *((_QWORD *)a3 + 6);
  v56 = *(_OWORD *)((char *)a3 + 56);
  v57 = *(_OWORD *)((char *)a3 + 72);
  v58 = *(_OWORD *)((char *)a3 + 88);
  v59 = *((_BYTE *)a3 + 104);
  v14 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  v60 = *((_QWORD *)a3 + 14);
  v61 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v62 = *((_OWORD *)a3 + 8);
  v63 = *((_QWORD *)a3 + 18);
  v64 = *((_BYTE *)a3 + 152);
  v17 = *((_QWORD *)a4 + 1);
  *(_QWORD *)&v41 = *(_QWORD *)a4;
  *((_QWORD *)&v41 + 1) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v42[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)a4 + 25);
  v43 = *((_QWORD *)a4 + 6);
  v44 = *(_OWORD *)((char *)a4 + 56);
  v45 = *(_OWORD *)((char *)a4 + 72);
  v46 = *(_OWORD *)((char *)a4 + 88);
  v47 = *((_BYTE *)a4 + 104);
  v20 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
  v48 = *((_QWORD *)a4 + 14);
  v49 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v50 = *((_OWORD *)a4 + 8);
  v51 = *((_QWORD *)a4 + 18);
  v52 = *((_BYTE *)a4 + 152);
  _Z18for_each_sg_in_vecIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m((uint64_t)v65, &v53, &v41, 0xFFFFFFFFFFFFFFFFLL);
  v23 = v49;
  if (v49)
  {
    v24 = (unint64_t *)&v49->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v61;
  if (v61)
  {
    v30 = (unint64_t *)&v61->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 2) + 144))(*((_QWORD *)a2 + 2));
  if ((_QWORD)v67)
  {
    v35 = 0;
    v36 = (unsigned int *)__p;
    v37 = 40 * v67;
    do
    {
      v38 = lw_future<int>::get(v36);
      v39 = v38;
      if (v38 < 0)
        break;
      v35 += v38;
      v36 += 10;
      v39 = v35;
      v37 -= 40;
    }
    while (v37);
  }
  else
  {
    v39 = 0;
  }
  if (*((_QWORD *)&v67 + 1) && v68 != __p)
    operator delete(__p);
  return v39;
}

void sub_212EDB5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  void *v55;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v54);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v53);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a53)
  {
    if (v55 != __p)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::write(DiskImageRaw *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unsigned int *v36;
  uint64_t v37;
  int v38;
  int v39;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  _OWORD v54[2];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  _QWORD v65[2];
  void *__p;
  __int128 v67;
  _QWORD v68[81];

  v68[80] = *MEMORY[0x24BDAC8D0];
  __p = v68;
  v67 = xmmword_212FEBC40;
  v7 = sg_vec_ns::count_buffers(a3, a4, a3);
  v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v10, v9, (_DWORD *)__p + 10 * v67, 0, 0);
  }
  v65[0] = &__p;
  v65[1] = a2;
  v11 = *((_QWORD *)a3 + 1);
  *(_QWORD *)&v53 = *(_QWORD *)a3;
  *((_QWORD *)&v53 + 1) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v54[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)a3 + 25);
  v55 = *((_QWORD *)a3 + 6);
  v56 = *(_OWORD *)((char *)a3 + 56);
  v57 = *(_OWORD *)((char *)a3 + 72);
  v58 = *(_OWORD *)((char *)a3 + 88);
  v59 = *((_BYTE *)a3 + 104);
  v14 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
  v60 = *((_QWORD *)a3 + 14);
  v61 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v62 = *((_OWORD *)a3 + 8);
  v63 = *((_QWORD *)a3 + 18);
  v64 = *((_BYTE *)a3 + 152);
  v17 = *((_QWORD *)a4 + 1);
  *(_QWORD *)&v41 = *(_QWORD *)a4;
  *((_QWORD *)&v41 + 1) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v42[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)a4 + 25);
  v43 = *((_QWORD *)a4 + 6);
  v44 = *(_OWORD *)((char *)a4 + 56);
  v45 = *(_OWORD *)((char *)a4 + 72);
  v46 = *(_OWORD *)((char *)a4 + 88);
  v47 = *((_BYTE *)a4 + 104);
  v20 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
  v48 = *((_QWORD *)a4 + 14);
  v49 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v50 = *((_OWORD *)a4 + 8);
  v51 = *((_QWORD *)a4 + 18);
  v52 = *((_BYTE *)a4 + 152);
  _Z18for_each_sg_in_vecIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m((uint64_t)v65, &v53, &v41, 0xFFFFFFFFFFFFFFFFLL);
  v23 = v49;
  if (v49)
  {
    v24 = (unint64_t *)&v49->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v61;
  if (v61)
  {
    v30 = (unint64_t *)&v61->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 2) + 144))(*((_QWORD *)a2 + 2));
  if ((_QWORD)v67)
  {
    v35 = 0;
    v36 = (unsigned int *)__p;
    v37 = 40 * v67;
    do
    {
      v38 = lw_future<int>::get(v36);
      v39 = v38;
      if (v38 < 0)
        break;
      v35 += v38;
      v36 += 10;
      v39 = v35;
      v37 -= 40;
    }
    while (v37);
  }
  else
  {
    v39 = 0;
  }
  if (*((_QWORD *)&v67 + 1) && v68 != __p)
    operator delete(__p);
  return v39;
}

void sub_212EDB9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  void *v55;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v54);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v53);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a53)
  {
    if (v55 != __p)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16), a3);
}

uint64_t DiskImageRaw::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *i;
  uint64_t result;

  if (!a4)
    return 0;
  v4 = a4;
  for (i = (_QWORD *)(a3 + 8); ; i += 2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 24))(*(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 32) * *(i - 1), *i * *(_QWORD *)(a1 + 32));
    if ((_DWORD)result)
      break;
    if (!--v4)
      return 0;
  }
  return result;
}

void DiskImageRaw::ContextRaw::~ContextRaw(DiskImageRaw::ContextRaw *this)
{
  *(_QWORD *)this = off_24CEEDF48;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = off_24CEEDF48;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2199A8A18);
}

uint64_t sg_vec_ns::count_buffers(sg_vec_ns *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t i;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;

  v3 = *(_OWORD *)((char *)this + 72);
  v21 = *(_OWORD *)((char *)this + 56);
  v22 = v3;
  v23 = *(_OWORD *)((char *)this + 88);
  v24 = *((_BYTE *)this + 104);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  v25 = *((_QWORD *)this + 14);
  v26 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v27 = *((_OWORD *)this + 8);
  v7 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 8);
  v20 = *(_OWORD *)((char *)a2 + 72);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 15);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  for (i = 0; ; ++i)
  {
    v13 = (_QWORD)v21 == v7 && *((_QWORD *)&v21 + 1) == v8;
    if (v13 && (_QWORD)v22 == (_QWORD)v20)
      break;
    sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)&v21);
  }
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return i;
}

void sub_212EDBCA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t _Z18for_each_sg_in_vecIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(a1, (sg_vec_ns *)&v40, (const sg_vec_ns::details::sg_vec_iterator *)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_212EDBEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>(a1, *(_DWORD **)a1, a4, (_DWORD *)(*(_QWORD *)a1 + 40 * *(_QWORD *)(a1 + 8)), a2, a5, a6);
  if (v10 && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  v11 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_212EDBF60(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unint64_t a5, uint64_t a6, _DWORD *a7)
{
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v11 = a3;
  if (a2 != a3)
  {
    v12 = a2;
    do
    {
      lw_future<int>::lw_future(a5, v12);
      v12 += 10;
      a5 += 40;
    }
    while (v12 != v11);
  }
  if (a6)
  {
    v13 = a6;
    v14 = a5;
    do
    {
      v15 = lw_future<int>::lw_future(v14, a7);
      a7 += 10;
      v14 = v15 + 40;
      --v13;
    }
    while (v13);
  }
  if (v11 != a4)
  {
    v16 = a5 + 40 * a6;
    do
    {
      v17 = lw_future<int>::lw_future(v16, v11);
      v11 += 10;
      v16 = v17 + 40;
    }
    while (v11 != a4);
  }
}

void sub_212EDC034(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_212EDC03C()
{
  __break(1u);
}

void sub_212EDC078()
{
  __cxa_end_catch();
  JUMPOUT(0x212EDC080);
}

unint64_t lw_future<int>::lw_future(unint64_t a1, _DWORD *a2)
{
  const void *v4;
  unint64_t *v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = ref::details::_get_tagged_ptr_lock(a1, a2);
  *(_QWORD *)(a1 + 24) = ref::details::_get_tagged_ptr_cond(a1, v4);
  if (*((_BYTE *)a2 + 4))
  {
    *(_DWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 4) = 1;
  }
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v5 = *(unint64_t **)(a1 + 32);
  if (v5)
    *v5 = a1;
  return a1;
}

uint64_t _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  BOOL v14;
  char v15;
  sg_vec_ns::details::sg_vec_iterator *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  _BYTE v25[112];
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  _BYTE v29[248];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int64_t v33;
  sg_vec_ns::details::sg_vec_iterator *v34;
  _BYTE v35[536];
  uint64_t v36;

  v7 = 0;
  v8 = *((_QWORD *)a3 + 18);
  v35[0] = 0;
  v35[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((_QWORD *)a2 + 18) >= v8 || v7 >= a4)
      break;
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((_QWORD *)&v32 + 1) = 104;
      LODWORD(v33) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v27, &v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"sg: ", 4);
      operator<<(&v30);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v27);
      MEMORY[0x2199A89AC](&v31);
    }
    v27[0] = 0;
    v27[1] = v8;
    v28 = 2;
    trim_sg_to_interval(a2, (uint64_t)v27, (uint64_t)&v32);
    v10 = *(uint64_t **)a1;
    (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 128))(v27, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), &v32);
    v11 = v10[1];
    if (v11 == v10[2])
    {
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(v10, (_DWORD *)(*v10 + 40 * v11), (const char *)1, v27, &v36);
    }
    else
    {
      lw_future<int>::lw_future(*v10 + 40 * v11, v27);
      ++v10[1];
    }
    v12 = (int)v33;
    if ((v33 & 0x80000000) != 0)
      v13 = (int)v33;
    else
      v13 = v33;
    v14 = v13 >= 0 || (_DWORD)v13 == 0;
    v15 = v14;
    if (v14)
    {
      v16 = v34;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v34, v13))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v25, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v25, (uint64_t)a3, (uint64_t)v16, v13, a4, (sg_vec_ref *)v27);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v25);
        sg_vec_ref::begin((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
        sg_vec_ref::end((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
      }
      if ((a5 & 1) != 0)
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      else
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      v7 += v13;
    }
    else
    {
      if ((int)v33 >= 0)
        v12 = -(uint64_t)(int)v33;
      v21 = v12;
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((v15 & 1) == 0)
      goto LABEL_40;
  }
  v21 = v7;
LABEL_40:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v35);
  return v21;
}

void sub_212EDC428(_Unwind_Exception *a1)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E8]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x318]);
  _Unwind_Resume(a1);
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x333333333333334)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(40 * v11);
  boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>((uint64_t)a1, (unint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0x333333333333333;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x333333333333333 - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0x333333333333333)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(a1, *(_DWORD **)a1, a4, (_DWORD *)(*(_QWORD *)a1 + 40 * *(_QWORD *)(a1 + 8)), a2, a5, a6);
  if (v10 && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  v11 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_212EDC648(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    if ((void *)(v2 + 24) != v1)
      operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unint64_t a5, uint64_t a6, _DWORD *a7)
{
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t result;
  unint64_t v15;

  v11 = a3;
  if (a2 != a3)
  {
    v12 = a2;
    do
    {
      v13 = lw_future<int>::lw_future(a5, v12);
      v12 += 10;
      a5 = v13 + 40;
    }
    while (v12 != v11);
  }
  result = lw_future<int>::lw_future(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      v15 = lw_future<int>::lw_future(result, v11);
      v11 += 10;
      result = v15 + 40;
    }
    while (v11 != a4);
  }
  return result;
}

void sub_212EDC6FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_212EDC704()
{
  __break(1u);
}

void sub_212EDC724()
{
  __cxa_end_catch();
  JUMPOUT(0x212EDC72CLL);
}

uint64_t lw_future<int>::get(unsigned int *a1)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t v5;
  std::mutex *v6;
  std::condition_variable *v7;
  unint64_t v8;
  std::unique_lock<std::mutex> v9;

  if (*((_BYTE *)a1 + 4))
    return *a1;
  v4 = (unint64_t *)(a1 + 2);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (std::mutex *)*((_QWORD *)a1 + 2);
  v9.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((_QWORD *)a1 + 2);
  v9.__owns_ = 1;
  std::mutex::lock(v6);
  if (!*((_BYTE *)a1 + 4))
  {
    v7 = (std::condition_variable *)*((_QWORD *)a1 + 3);
    do
      std::condition_variable::wait(v7, &v9);
    while (!*((_BYTE *)a1 + 4));
  }
  do
    v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  std::unique_lock<std::mutex>::unlock(&v9);
  v2 = *a1;
  if (v9.__owns_)
    std::mutex::unlock(v9.__m_);
  return v2;
}

void sub_212EDC7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t _Z18for_each_sg_in_vecIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  v42 = *((_QWORD *)a2 + 6);
  v43 = *(__int128 *)((char *)a2 + 56);
  v44 = *(__int128 *)((char *)a2 + 72);
  v45 = *(__int128 *)((char *)a2 + 88);
  v46 = *((_BYTE *)a2 + 104);
  v6 = a2[7];
  v7 = a2[8];
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v47 = v6;
  v48 = v7;
  v50 = *((_BYTE *)a2 + 152);
  v49 = *((_QWORD *)a2 + 18);
  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  v31 = *((_QWORD *)a3 + 6);
  v32 = *(__int128 *)((char *)a3 + 56);
  v10 = *(__int128 *)((char *)a3 + 72);
  v11 = *(__int128 *)((char *)a3 + 88);
  v35 = *((_BYTE *)a3 + 104);
  v34 = v11;
  v33 = v10;
  v12 = a3[7];
  v13 = a3[8];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  v36 = v12;
  v37 = v13;
  v14 = *((_QWORD *)a3 + 18);
  v39 = *((_BYTE *)a3 + 152);
  v38 = v14;
  v15 = _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(a1, (sg_vec_ns *)&v40, (const sg_vec_ns::details::sg_vec_iterator *)&v29, a4, 0);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_212EDC9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb(uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  BOOL v14;
  char v15;
  sg_vec_ns::details::sg_vec_iterator *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  _BYTE v25[112];
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  _BYTE v29[248];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int64_t v33;
  sg_vec_ns::details::sg_vec_iterator *v34;
  _BYTE v35[536];
  uint64_t v36;

  v7 = 0;
  v8 = *((_QWORD *)a3 + 18);
  v35[0] = 0;
  v35[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((_QWORD *)a2 + 18) >= v8 || v7 >= a4)
      break;
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((_QWORD *)&v32 + 1) = 104;
      LODWORD(v33) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v27, &v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"sg: ", 4);
      operator<<(&v30);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v27);
      MEMORY[0x2199A89AC](&v31);
    }
    v27[0] = 0;
    v27[1] = v8;
    v28 = 2;
    trim_sg_to_interval(a2, (uint64_t)v27, (uint64_t)&v32);
    v10 = *(uint64_t **)a1;
    (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 136))(v27, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), &v32);
    v11 = v10[1];
    if (v11 == v10[2])
    {
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(v10, (_DWORD *)(*v10 + 40 * v11), (const char *)1, v27, &v36);
    }
    else
    {
      lw_future<int>::lw_future(*v10 + 40 * v11, v27);
      ++v10[1];
    }
    v12 = (int)v33;
    if ((v33 & 0x80000000) != 0)
      v13 = (int)v33;
    else
      v13 = v33;
    v14 = v13 >= 0 || (_DWORD)v13 == 0;
    v15 = v14;
    if (v14)
    {
      v16 = v34;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v34, v13))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v25, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v25, (uint64_t)a3, (uint64_t)v16, v13, a4, (sg_vec_ref *)v27);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v25);
        sg_vec_ref::begin((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
        sg_vec_ref::end((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
      }
      if ((a5 & 1) != 0)
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      else
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      v7 += v13;
    }
    else
    {
      if ((int)v33 >= 0)
        v12 = -(uint64_t)(int)v33;
      v21 = v12;
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((v15 & 1) == 0)
      goto LABEL_40;
  }
  v21 = v7;
LABEL_40:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v35);
  return v21;
}

void sub_212EDCD4C(_Unwind_Exception *a1)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E8]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x318]);
  _Unwind_Resume(a1);
}

uint64_t DiskImagePlugin::DiskImagePlugin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CEEB990;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  return a1;
}

void sub_212EDCE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *DiskImageUDIF::DiskImageUDIF(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD v6[17];

  udif::details::UDIF_base::UDIF_base((uint64_t)v6, a2);
  v6[0] = &off_24CEEDFA0;
  DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::DiskImageUDIFRead((uint64_t)a1, (uint64_t)v6, a3);
  udif::details::UDIF_base::~UDIF_base((udif::details::UDIF_base *)v6);
  *a1 = &unk_24CF021A0;
  return a1;
}

void sub_212EDCED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  udif::details::UDIF_base::~UDIF_base((udif::details::UDIF_base *)va);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::DiskImageUDIFRead(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CEEDFE0;
  v5 = a3[1];
  *(_QWORD *)(a1 + 48) = *a3;
  *(_QWORD *)(a1 + 56) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)udif::details::UDIF_base::UDIF_base(a1 + 64, a2) = &off_24CEEDFA0;
  if (*(_BYTE *)(a2 + 88))
  {
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = 2 * v8;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return a1;
}

void sub_212EDCF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void UDIFReader<locks::None>::~UDIFReader(udif::details::UDIF_base *a1)
{
  udif::details::UDIF_base::~UDIF_base(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_block_size()
{
  return 512;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_num_blocks(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

__n128 DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_io_constraints@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::may_read_extra(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::_create_ctx(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::ContextUDIF(v2, a1);
  return v2;
}

void sub_212EDD038(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10A1C40622C4E86);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::read(uint64_t a1, uint64_t a2, sg_vec_ns *this, sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  const std::locale::facet *v35;
  int v36;
  int8x16_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  char v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t **v49;
  int v50;
  const std::locale::facet *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char cow;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const std::locale::facet *v95;
  const std::locale::facet *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  BOOL v100;
  unsigned int *v101;
  unsigned int *v102;
  _DWORD *v103;
  int v104;
  int v105;
  const std::locale::facet *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v120;
  unint64_t v122;
  uint64_t **v123;
  char *v124;
  uint64_t v125;
  _DWORD *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  int v138;
  __int128 v139;
  int8x16_t v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  _BYTE v144[25];
  __int128 v145;
  _BYTE v146[25];
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  __int128 v154;
  uint64_t v155;
  char v156;
  _BYTE v157[297];
  char v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  _OWORD v161[2];
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  char v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  __int128 v169;
  uint64_t v170;
  char v171;
  std::locale v172;
  void *__p;
  __int128 v174;
  _BYTE v175[393];
  void *v176;
  __int128 v177;
  _QWORD v178[130];

  v178[128] = *MEMORY[0x24BDAC8D0];
  v176 = v178;
  v177 = xmmword_212FEBC40;
  __p = v175;
  v174 = xmmword_212FEBC40;
  v7 = sg_vec_ns::count_buffers(this, a4, this);
  v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v10, v9, (_DWORD *)__p + 10 * v174, 0, 0);
  }
  v11 = *((_QWORD *)a4 + 18) - *((_QWORD *)this + 18);
  udif::details::UDIF_base::_get_runs_for_io((udif::details::UDIF_base *)(a1 + 64), *((_QWORD *)this + 3), v11 & ~(v11 >> 63), (uint64_t *)&v176);
  v12 = (std::__shared_weak_count *)*((_QWORD *)a4 + 1);
  v159 = *(_QWORD *)a4;
  v160 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *(_OWORD *)((char *)a4 + 56);
  v161[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)((char *)a4 + 25);
  v162 = *((_QWORD *)a4 + 6);
  v163 = v15;
  v16 = *(_OWORD *)((char *)a4 + 88);
  v164 = *(_OWORD *)((char *)a4 + 72);
  v165 = v16;
  v166 = *((_BYTE *)a4 + 104);
  v17 = (std::__shared_weak_count *)*((_QWORD *)a4 + 15);
  v167 = *((_QWORD *)a4 + 14);
  v168 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v169 = *((_OWORD *)a4 + 8);
  v170 = *((_QWORD *)a4 + 18);
  v171 = *((_BYTE *)a4 + 152);
  v157[0] = 0;
  v158 = 0;
  v20 = (char *)v176;
  v122 = *((_QWORD *)v176 + 3);
  v21 = *((_QWORD *)this + 1);
  *(_QWORD *)&v145 = *(_QWORD *)this;
  *((_QWORD *)&v145 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)v146 = *((_OWORD *)this + 1);
  *(_OWORD *)&v146[9] = *(_OWORD *)((char *)this + 25);
  v147 = *((_QWORD *)this + 6);
  v148 = v24;
  v25 = *(_OWORD *)((char *)this + 88);
  v149 = *(_OWORD *)((char *)this + 72);
  v150 = v25;
  v151 = *((_BYTE *)this + 104);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  v152 = *((_QWORD *)this + 14);
  v153 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v154 = *((_OWORD *)this + 8);
  v155 = *((_QWORD *)this + 18);
  v156 = *((_BYTE *)this + 152);
  v120 = a2;
  if (!(_QWORD)v177)
  {
    v29 = 0;
    v125 = 0;
    goto LABEL_126;
  }
  v29 = 0;
  v124 = &v20[64 * (_QWORD)v177];
  v125 = 0;
  v123 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v30 = *((_QWORD *)v20 + 4);
    if (v30)
    {
      if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v145, (uint64_t)&v159))
        break;
    }
    if (v30 > *(_QWORD *)&v146[16])
      sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&v145);
    if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v145, (uint64_t)&v159))
    {
      *(_QWORD *)&v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((_QWORD *)&v143 + 1) = 75;
      *(_DWORD *)v144 = 16;
      di_log::logger<di_log::log_printer<184ul>>::logger(&v126, &v143);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Udif: advanced buffer, needs to read ", 37);
      udif::operator<<(&v133, (int *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" but buffer is full", 19);
      std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(_QWORD *)(v133 - 24)));
      v95 = std::locale::use_facet((const std::locale *)&v139, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
      std::locale::~locale((std::locale *)&v139);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf((uint64_t)&v126);
      goto LABEL_125;
    }
    v31 = v145;
    v143 = v145;
    if (*((_QWORD *)&v145 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_OWORD *)&v144[9] = *(_OWORD *)&v146[9];
    *(_OWORD *)v144 = *(_OWORD *)v146;
    v34 = *(_OWORD *)&v146[9] >> 56;
    if (v30 > v34)
    {
      *(_QWORD *)&v139 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((_QWORD *)&v139 + 1) = 75;
      v140.i32[0] = 16;
      di_log::logger<di_log::log_printer<193ul>>::logger(&v126, &v139);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Udif: needs to read ", 20);
      udif::operator<<(&v133, (int *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" but buffer is too small ", 25);
      std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(_QWORD *)(v133 - 24)));
      v35 = std::locale::use_facet((const std::locale *)&v137, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
      std::locale::~locale((std::locale *)&v137);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf((uint64_t)&v126);
      MEMORY[0x2199A89AC](&v134);
      v36 = 2;
      v29 = -28;
      goto LABEL_45;
    }
    if (!*(_DWORD *)v20)
    {
      bzero((void *)v31, v30);
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
LABEL_44:
      v36 = 0;
      v125 += v30;
      goto LABEL_45;
    }
    v37 = *(int8x16_t *)(v20 + 8);
    v38 = *((_QWORD *)v20 + 4);
    v139 = v31;
    if (*((_QWORD *)&v31 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v140 = vextq_s8(v37, v37, 8uLL);
    v141 = v38;
    v142 = 0;
    if (v125)
    {
      *(_QWORD *)&v137 = v20;
      v41 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(v123, (unsigned int *)v20, (uint64_t)&std::piecewise_construct, (_DWORD **)&v137);
      (*(void (**)(_DWORD **__return_ptr, uint64_t *, __int128 *))(*v41[5] + 128))(&v126, v41[5], &v139);
      if ((_QWORD)v174 == *((_QWORD *)&v174 + 1))
      {
        boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>((uint64_t *)&__p, (_DWORD *)__p + 10 * v174, (const char *)1, &v126, &v137);
      }
      else
      {
        lw_future<int>::lw_future((unint64_t)__p + 40 * v174, &v126);
        *(_QWORD *)&v174 = v174 + 1;
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
    }
    else
    {
      v126 = v20;
      v49 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(v123, (unsigned int *)v20, (uint64_t)&std::piecewise_construct, &v126);
      v50 = (*(uint64_t (**)(uint64_t *, __int128 *))(*v49[5] + 88))(v49[5], &v139);
      v29 = v50;
      if (v50 < 0)
      {
        v42 = 0;
        v36 = 2;
        goto LABEL_37;
      }
      if (*(_BYTE *)(v120 + 56) && *((int *)v20 + 8) > (uint64_t)v50)
      {
        *(_QWORD *)&v137 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((_QWORD *)&v137 + 1) = 75;
        v138 = 16;
        di_log::logger<di_log::log_printer<214ul>>::logger(&v126, &v137);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Error: Not enough data read. expected: ", 39);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" read: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" backend: ", 10);
        std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(_QWORD *)(v133 - 24)));
        v51 = std::locale::use_facet(&v172, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
        std::locale::~locale(&v172);
        std::ostream::put();
        std::ostream::flush();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf((uint64_t)&v126);
        MEMORY[0x2199A89AC](&v134);
        v42 = 0;
        v36 = 2;
        v29 = -5;
        goto LABEL_37;
      }
      v52 = DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::trim_io(a1, (void **)&v139, (uint64_t)v20, &v176, v34);
      v30 -= v52;
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
      if ((_QWORD)v177)
      {
        v53 = 0;
        v54 = 0;
        v55 = (_QWORD)v177 << 6;
        v56 = (uint64_t *)((char *)v176 + 32);
        do
        {
          v58 = *v56;
          v56 += 8;
          v57 = v58;
          v59 = v58 + v53;
          v60 = v58 + v54;
          v61 = v34 - v54;
          v62 = v58 + v54 > v34;
          if (v58 + v54 >= v34)
            v54 = 0;
          else
            v54 = v60;
          if (v62)
          {
            v54 = v57;
            v63 = v61;
          }
          else
          {
            v63 = 0;
          }
          v53 = v59 + v63;
          v55 -= 64;
        }
        while (v55);
      }
      else
      {
        v53 = 0;
      }
      cow = sg_vec_ns::details::sg_vec_iterator::get_cow(this);
      v122 += v52;
      sg_vec_ref::sg_vec_ref((sg_vec_ref *)&v126, (sg_vec_ns *)((char *)this + 56), (sg_vec_ns::details::sg_vec_iterator *)((char *)a4 + 56), v122, v53 - v52, cow);
      std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v157);
      sg_vec_ref::sg_vec_ref((sg_vec_ref *)v157, (uint64_t)&v126);
      v158 = 1;
      v65 = v136;
      if (v136)
      {
        v66 = (unint64_t *)&v136->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = v135;
      if (v135)
      {
        v69 = (unint64_t *)&v135->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = v132;
      if (v132)
      {
        v72 = (unint64_t *)&v132->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v131;
      if (v131)
      {
        v75 = (unint64_t *)&v131->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = v130;
      if (v130)
      {
        v78 = (unint64_t *)&v130->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = v128;
      if (v128)
      {
        v81 = (unint64_t *)&v128->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      sg_vec_ref::begin((sg_vec_ref *)v157, (uint64_t)&v126);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v145, (uint64_t)&v126);
      v83 = v129;
      if (v129)
      {
        v84 = (unint64_t *)&v129->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = v127;
      if (v127)
      {
        v87 = (unint64_t *)&v127->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
      sg_vec_ref::end((sg_vec_ref *)v157, (uint64_t)&v126);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v159, (uint64_t)&v126);
      v89 = v129;
      if (v129)
      {
        v90 = (unint64_t *)&v129->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = v127;
      if (v127)
      {
        v93 = (unint64_t *)&v127->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
    }
    v36 = 0;
    v42 = 1;
LABEL_37:
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
    if (!*((_QWORD *)&v139 + 1))
      goto LABEL_41;
    v44 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if ((v42 & 1) != 0)
        goto LABEL_44;
    }
    else
    {
LABEL_41:
      if ((v42 & 1) != 0)
        goto LABEL_44;
    }
LABEL_45:
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
    if (*((_QWORD *)&v143 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (!v36)
    {
      v20 += 64;
      if (v20 != v124)
        continue;
    }
    goto LABEL_126;
  }
  *(_QWORD *)&v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((_QWORD *)&v143 + 1) = 75;
  *(_DWORD *)v144 = 16;
  di_log::logger<di_log::log_printer<175ul>>::logger(&v126, &v143);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Udif: needs to read ", 20);
  udif::operator<<(&v133, (int *)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" but buffer is full", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(_QWORD *)(v133 - 24)));
  v96 = std::locale::use_facet((const std::locale *)&v139, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf((uint64_t)&v126);
LABEL_125:
  MEMORY[0x2199A89AC](&v134);
  v29 = -28;
LABEL_126:
  v97 = *(_QWORD **)(v120 + 16);
  if (v97 != (_QWORD *)(v120 + 24))
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v97[5] + 144))(v97[5]);
      v98 = (_QWORD *)v97[1];
      if (v98)
      {
        do
        {
          v99 = v98;
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (_QWORD *)v97[2];
          v100 = *v99 == (_QWORD)v97;
          v97 = v99;
        }
        while (!v100);
      }
      v97 = v99;
    }
    while (v99 != (_QWORD *)(v120 + 24));
  }
  if (v29 < 0)
  {
LABEL_144:
    v125 = v29;
  }
  else if ((_QWORD)v174)
  {
    v101 = (unsigned int *)__p;
    v102 = (unsigned int *)((char *)__p + 40 * v174);
    v103 = v176;
    while (1)
    {
      do
      {
        v104 = v103[16];
        v103 += 16;
      }
      while (!v104);
      v105 = lw_future<int>::get(v101);
      v29 = v105;
      if (v105 < 0)
        goto LABEL_144;
      if (*(_BYTE *)(v120 + 56) && (int)v103[8] > (uint64_t)v105)
      {
        *(_QWORD *)&v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((_QWORD *)&v143 + 1) = 75;
        *(_DWORD *)v144 = 16;
        di_log::logger<di_log::log_printer<254ul>>::logger(&v126, &v143);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Error: Not enough data read. expected: ", 39);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" read: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" backend: ", 10);
        std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(_QWORD *)(v133 - 24)));
        v106 = std::locale::use_facet((const std::locale *)&v139, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
        std::locale::~locale((std::locale *)&v139);
        std::ostream::put();
        std::ostream::flush();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf((uint64_t)&v126);
        MEMORY[0x2199A89AC](&v134);
        v29 = -5;
        goto LABEL_144;
      }
      v101 += 10;
      if (v101 == v102)
      {
        if ((v105 & 0x80000000) == 0)
          break;
        goto LABEL_144;
      }
    }
  }
  v107 = v153;
  if (v153)
  {
    v108 = (unint64_t *)&v153->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v157);
  v113 = v168;
  if (v168)
  {
    v114 = (unint64_t *)&v168->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v160;
  if (v160)
  {
    v117 = (unint64_t *)&v160->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (*((_QWORD *)&v174 + 1) && v175 != __p)
    operator delete(__p);
  if (*((_QWORD *)&v177 + 1) && v178 != v176)
    operator delete(v176);
  return v125;
}

void sub_212EDDFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E0]);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x380]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x608]);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x598]);
  if (STACK[0x650] && a11 != STACK[0x640])
    operator delete((void *)STACK[0x640]);
  if (STACK[0x8E8])
  {
    if (a12 != STACK[0x8D8])
      operator delete((void *)STACK[0x8D8]);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::flush()
{
  return 4294967251;
}

uint64_t udif::details::UDIF_base::UDIF_base(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = &off_24CF08E30;
  *(_QWORD *)(result + 8) = v2;
  v3 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v4;
  v5 = result + 16;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 24) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 8) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v5;
  }
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v7 = (_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 40) = v8;
  v9 = result + 40;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 32) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(result + 32) = v9;
  }
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(result + 72) = v11;
  v12 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(result + 80) = v12;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  v13 = (_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 112) = v14;
  v15 = result + 112;
  v16 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 120) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    *(_QWORD *)(a2 + 104) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 120) = 0;
  }
  else
  {
    *(_QWORD *)(result + 104) = v15;
  }
  return result;
}

void std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::ContextUDIF(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = off_24CEEE0E0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  v4 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  udif::details::UDIF_base::make_backend_contexts((udif::details::UDIF_base *)(a2 + 64), (uint64_t)&v12);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)v4, *(_QWORD **)(a1 + 24));
  v6 = v13;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = v14;
  *(_QWORD *)(a1 + 32) = v14;
  if (v7)
  {
    v6[2] = v3;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    *v4 = v3;
  }
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v5, &v15);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)&v12, v13);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

void sub_212EDE358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::~ContextUDIF(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CEEE0E0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 40);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::~ContextUDIF(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CEEE0E0;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 40);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x2199A8A18);
}

void std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(a1, a2[1]);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

_QWORD *di_log::logger<di_log::log_printer<175ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<175ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEE140;
  a1[45] = &unk_24CEEE240;
  a1[46] = &unk_24CEEE268;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEE140;
  a1[45] = &unk_24CEEE1C8;
  a1[46] = &unk_24CEEE1F0;
  return a1;
}

void sub_212EDE4CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<184ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<184ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEE360;
  a1[45] = &unk_24CEEE460;
  a1[46] = &unk_24CEEE488;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEE360;
  a1[45] = &unk_24CEEE3E8;
  a1[46] = &unk_24CEEE410;
  return a1;
}

void sub_212EDE5B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<193ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<193ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEE580;
  a1[45] = &unk_24CEEE680;
  a1[46] = &unk_24CEEE6A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEE580;
  a1[45] = &unk_24CEEE608;
  a1[46] = &unk_24CEEE630;
  return a1;
}

void sub_212EDE69C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<214ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<214ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEE7A0;
  a1[45] = &unk_24CEEE8A0;
  a1[46] = &unk_24CEEE8C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEE7A0;
  a1[45] = &unk_24CEEE828;
  a1[46] = &unk_24CEEE850;
  return a1;
}

void sub_212EDE784(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::trim_io(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a4[1];
  if (!v5)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = v5 << 6;
  v9 = (uint64_t *)(*a4 + 32);
  do
  {
    v11 = *v9;
    v9 += 8;
    v10 = v11;
    v12 = v11 + v6;
    v13 = v11 + v7;
    v14 = a5 - v7;
    v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5)
      v7 = 0;
    else
      v7 = v13;
    if (v15)
    {
      v7 = v10;
      v16 = v14;
    }
    else
    {
      v16 = 0;
    }
    v6 = v12 + v16;
    v8 -= 64;
  }
  while (v8);
  if (v6 <= a5 + a5 * *(_QWORD *)(a1 + 24))
    return 0;
  v17 = *(_QWORD *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(_QWORD *)(a3 + 32) - v17);
  return v17;
}

_QWORD *di_log::logger<di_log::log_printer<254ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<254ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEE9C0;
  a1[45] = &unk_24CEEEAC0;
  a1[46] = &unk_24CEEEAE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEE9C0;
  a1[45] = &unk_24CEEEA48;
  a1[46] = &unk_24CEEEA70;
  return a1;
}

void sub_212EDE900(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEE2D8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EDE9CC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEE2D8;
  di_log::logger_buf<di_log::log_printer<175ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<175ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<175ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EDEDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<175ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 175;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 175;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEE4F8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EDF044(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEE4F8;
  di_log::logger_buf<di_log::log_printer<184ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<184ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<184ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EDF438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<184ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 184;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 184;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEE718;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EDF6BC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEE718;
  di_log::logger_buf<di_log::log_printer<193ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<193ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<193ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EDFAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<193ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 193;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 193;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t **std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEE938;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EDFE5C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEE938;
  di_log::logger_buf<di_log::log_printer<214ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<214ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<214ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EE0250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<214ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 214;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 214;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 528))
  {
    v1 = result;
    v2 = result + 368;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](result + 480);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 320);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 208);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 152);
    result = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 64);
    *(_BYTE *)(v1 + 528) = 0;
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEEB58;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EE0534(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEEB58;
  di_log::logger_buf<di_log::log_printer<254ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<254ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<254ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EE0928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<254ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 254;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 254;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

void udif::details::UDIF_base::~UDIF_base(udif::details::UDIF_base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24CF08E30;
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x2199A8A18](v2, 0x1000C407784F2AFLL);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  udif::details::UDIF_base::~UDIF_base(this);
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24CEEEBD8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212EE0C14(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_212EE0C3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x2199A8A00);
  return result;
}

uint64_t std::__shared_ptr_pointer<char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::shared_ptr<unsigned char>::shared_ptr[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24CEEEC38;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212EE0D30(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_212EE0D58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<unsigned char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x2199A8A00);
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::allocate_shared[abi:ne180100]<DiskImageASIF,std::allocator<DiskImageASIF>,std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,void>@<X0>(DiskImageASIF **a1@<X1>, Backend *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x1008uLL);
  result = std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,std::allocator<DiskImageASIF>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_212EE0E50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,std::allocator<DiskImageASIF>,0>(_QWORD *a1, DiskImageASIF **a2, Backend *a3, uint64_t a4)
{
  uint64_t dir_latest_offset;
  uint64_t v9;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEECD0;
  dir_latest_offset = DiskImageASIF::get_dir_latest_offset(*a2, a3, (const di_asif::header *)a3);
  DiskImageASIF::DiskImageASIF(a1 + 3, a2, a3, dir_latest_offset, v9, a4);
  return a1;
}

void sub_212EE0ED0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DiskImageASIF>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEECD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DiskImageASIF>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEECD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<DiskImageASIF>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<DiskImageASIF,std::allocator<DiskImageASIF>,unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,void>@<X0>(unsigned __int16 *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, unint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X6>, _OWORD *a7@<X7>, _QWORD *a8@<X8>, __int128 *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x1008uLL);
  result = std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,std::allocator<DiskImageASIF>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_212EE0FD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,std::allocator<DiskImageASIF>,0>(_QWORD *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t *a7, _OWORD *a8, __int128 *a9)
{
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEECD0;
  v10 = *a2;
  v11 = *a3;
  v12 = *a4;
  v13 = *a5;
  v15 = *a9;
  v16 = 1;
  DiskImageASIF::DiskImageASIF((uint64_t)(a1 + 3), v10, v11, v12, v13, a6, a7, a8, &v15);
  return a1;
}

void sub_212EE1078(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DiskImage  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<DiskImage  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImage  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::allocate_shared[abi:ne180100]<PurgeableFileBackend,std::allocator<PurgeableFileBackend>,char const*,void>(char **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x470uLL);
  std::__shared_ptr_emplace<PurgeableFileBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<PurgeableFileBackend>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_212EE1158(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PurgeableFileBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<PurgeableFileBackend>,0>(_QWORD *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEED80;
  std::construct_at[abi:ne180100]<PurgeableFileBackend,char const*,PurgeableFileBackend*>((FileLocal *)(a1 + 3), a2);
  return a1;
}

void sub_212EE11A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PurgeableFileBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEED80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PurgeableFileBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEED80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<PurgeableFileBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

FileLocal *std::construct_at[abi:ne180100]<PurgeableFileBackend,char const*,PurgeableFileBackend*>(FileLocal *a1, char **a2)
{
  int v3;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  v3 = FileDescriptorWrapper::open_file((uint64_t)__p, 514);
  FileLocal::FileLocal(a1, v3, 1, 0);
  *(_QWORD *)a1 = &off_24CF0F458;
  *((_QWORD *)a1 + 3) = &unk_24CF0F538;
  *((_QWORD *)a1 + 4) = &unk_24CF0F570;
  if (v6 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_212EE1284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FileLocal::FileLocal(FileLocal *this, int a2, BOOL a3, char a4)
{
  _QWORD *v7;
  char v8;
  _BYTE v9[48];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  Backend::Backend((Backend *)this);
  *v7 = &off_24CF0F5C0;
  v7[3] = &unk_24CF0F6A0;
  v7[4] = &unk_24CF0F6D8;
  FileDescriptor::FileDescriptor((FileDescriptor *)v9, a2, a3);
  std::allocate_shared[abi:ne180100]<FileLocal::shared_state_t,std::allocator<FileLocal::shared_state_t>,FileDescriptor,BOOL &,void>((uint64_t)v9, &v8, (_QWORD *)this + 5);
  FileDescriptorWrapper::~FileDescriptorWrapper((FileDescriptorWrapper *)v9);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 5) + 8;
  *((_QWORD *)this + 8) = (char *)this + 88;
  *(_OWORD *)((char *)this + 72) = xmmword_212FEBC40;
}

void sub_212EE1370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  va_list va;

  va_start(va, a2);
  FileDescriptorWrapper::~FileDescriptorWrapper((FileDescriptorWrapper *)va);
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<FileLocal::shared_state_t,std::allocator<FileLocal::shared_state_t>,FileDescriptor,BOOL &,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xB0uLL);
  result = std::__shared_ptr_emplace<FileLocal::shared_state_t>::__shared_ptr_emplace[abi:ne180100]<FileDescriptor,BOOL &,std::allocator<FileLocal::shared_state_t>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_212EE13E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<FileLocal::shared_state_t>::__shared_ptr_emplace[abi:ne180100]<FileDescriptor,BOOL &,std::allocator<FileLocal::shared_state_t>,0>(_QWORD *a1, uint64_t a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEDD0;
  FileLocal::shared_state_t::shared_state_t((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_212EE1434(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEDD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEDD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<FileLocal::shared_state_t,0>((FileDescriptorWrapper *)(a1 + 24));
}

uint64_t FileLocal::shared_state_t::shared_state_t(uint64_t a1, uint64_t a2, char a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = -1;
  *(_QWORD *)a1 = &off_24CEEEE20;
  v4 = *(_OWORD *)(a2 + 12);
  v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 49) = FileDescriptor::is_mounted_on_smb((FileDescriptor *)a1);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_212EE1518(_Unwind_Exception *a1)
{
  FileDescriptorWrapper *v1;

  FileDescriptorWrapper::~FileDescriptorWrapper(v1);
  _Unwind_Resume(a1);
}

BOOL FileDescriptor::is_mounted_on_smb(FileDescriptor *this)
{
  unint64_t v1;
  void **v2;
  int v3;
  int v4;
  _BOOL8 v6;
  void *__p[2];
  unsigned __int8 v9;

  FileDescriptor::get_mounted_on_fs((uint64_t *)__p, this);
  v1 = v9;
  if ((v9 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  if (v1 == 5)
  {
    v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v2 = __p;
    v3 = *(_DWORD *)v2;
    v4 = *((unsigned __int8 *)v2 + 4);
    v6 = v3 == 1717726579 && v4 == 115;
    if ((char)v9 < 0)
      goto LABEL_15;
  }
  else
  {
    v6 = 0;
    if ((char)v9 < 0)
LABEL_15:
      operator delete(__p[0]);
  }
  return v6;
}

uint64_t FileDescriptorWrapper::get_file_descriptor(FileDescriptorWrapper *this)
{
  return *((unsigned int *)this + 2);
}

void FileDescriptor::~FileDescriptor(FileDescriptor *this)
{
  FileDescriptorWrapper::~FileDescriptorWrapper(this);
  JUMPOUT(0x2199A8A18);
}

void std::__destroy_at[abi:ne180100]<FileLocal::shared_state_t,0>(FileDescriptorWrapper *this)
{
  if (*((_BYTE *)this + 136))
    std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 12);
  FileDescriptorWrapper::~FileDescriptorWrapper(this);
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEDC70;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EE17D4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BufferedWriteBackend,std::allocator<BufferedWriteBackend>,std::shared_ptr<Backend> &,unsigned long,void>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xA8uLL);
  std::__shared_ptr_emplace<BufferedWriteBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,unsigned long,std::allocator<BufferedWriteBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE183C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BufferedWriteBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,unsigned long,std::allocator<BufferedWriteBackend>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEE60;
  BufferedWriteBackend::BufferedWriteBackend(a1 + 3, a2, *a3);
  return a1;
}

void sub_212EE1888(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BufferedWriteBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BufferedWriteBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<BufferedWriteBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_212EE19A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void crypto::header_serializer::decode(crypto::header_serializer *this@<X0>, crypto::header **a2@<X8>)
{
  crypto::header_serializer *v4;
  const char *v5;
  crypto::header *v6;
  void *exception;
  _QWORD v8[33];
  uint64_t v9;

  v9 = 0;
  v4 = objc_retainAutorelease(this);
  v5 = (const char *)-[crypto::header_serializer decodeBytesForKey:returnedLength:](v4, "decodeBytesForKey:returnedLength:", CFSTR("crypto_header"), &v9);
  if (v5)
  {
    if (v9 != 76)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unexpected crypto header length (", 33);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)")", 1);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v8, 0x9Au);
    }
    v6 = (crypto::header *)operator new();
    crypto::header::header(v6, v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_212EE1AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::ostringstream::~ostringstream((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_212EE1B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_212EE1CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212EE1DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_212EE1EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x2199A8A18](v9, 0x1000C4015A9971DLL);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212EE2008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EE2288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EE25F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v19 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  crypto::keys::~keys((crypto::keys *)va);

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void crypto::keys::~keys(crypto::keys *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    MEMORY[0x2199A8A18](v3, 0x1000C4015A9971DLL);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

void sub_212EE27C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_212EE2AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EE2C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE2E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;
  void *v13;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_212EE2F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE326C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE32D4()
{
  JUMPOUT(0x212EE32C4);
}

void crypto::format_serializer::decode(void *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  const void *v6;
  id v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  void *v11[3];
  void *v12;
  void *v13;
  uint64_t v14;
  void *__p;
  void *v16;
  __n128 v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  size_t v23;

  v22 = 0;
  v23 = 0;
  v5 = objc_retainAutorelease(a1);
  v6 = (const void *)objc_msgSend(v5, "decodeBytesForKey:returnedLength:", CFSTR("encKeys"), &v23);
  v7 = objc_retainAutorelease(v5);
  v8 = objc_msgSend(v7, "decodeBytesForKey:returnedLength:", CFSTR("prngKeys"), &v22);
  if (v6 && (v9 = (const void *)v8) != 0)
  {
    v20 = 0;
    v21 = 0;
    v19 = 0;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>(&v19, v6, (uint64_t)v6 + v23, v23);
    v18 = 0;
    v17 = 0uLL;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>(&v17, v9, (uint64_t)v9 + v22, v22);
    crypto::keys::keys(v11, (uint64_t)&v19, &v17, a2);
    std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>(a3);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    v10 = v14;
    v14 = 0;
    if (v10)
      MEMORY[0x2199A8A18](v10, 0x1000C4015A9971DLL);
    if (v12)
    {
      v13 = v12;
      operator delete(v12);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (v17.n128_u64[0])
    {
      v17.n128_u64[1] = v17.n128_u64[0];
      operator delete((void *)v17.n128_u64[0]);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }

}

void sub_212EE3438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  uint64_t v22;
  void *v24;

  crypto::keys::~keys((crypto::keys *)&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  v24 = *(void **)(v22 - 96);
  if (v24)
  {
    *(_QWORD *)(v22 - 88) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_212EE368C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 48);
  _Unwind_Resume(a1);
}

void crypto::format_serializer::encode(crypto::format_serializer *this, NSCoder *a2, const crypto::format *a3)
{
  crypto::format_serializer *v4;

  v4 = this;
  -[crypto::format_serializer encodeBytes:length:forKey:](v4, "encodeBytes:length:forKey:", a2[6].super.isa, 76, CFSTR("crypto_header"));
  -[crypto::format_serializer encodeBytes:length:forKey:](v4, "encodeBytes:length:forKey:", a2->super.isa, a2[1].super.isa - a2->super.isa, CFSTR("encKeys"));
  -[crypto::format_serializer encodeBytes:length:forKey:](v4, "encodeBytes:length:forKey:", a2[3].super.isa, a2[4].super.isa - a2[3].super.isa, CFSTR("prngKeys"));

}

void sub_212EE3758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_212EE388C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE39D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE3A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212EE3BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32);

  _Unwind_Resume(a1);
}

void sub_212EE3D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_212EE3E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

#error "212EE4194: call analysis failed (funcsize=120)"

void sub_212EE4430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;
  void *v13;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_212EE4564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE4664(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EE4800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE4BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212EE4D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE4F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE50E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE51A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE5374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE5610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE56FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE5968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_212EE5C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_212EE5D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EE6018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_212EE62DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t plugin_decode_buffer(void *a1, const char *a2, void **a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  char *v17;
  NSObject *v18;
  int v20;
  NSObject *v21;
  char *v22;
  NSObject *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2 && a3)
  {
    v5 = a1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v7, "length"))
      {
        v8 = malloc_type_malloc(objc_msgSend(v7, "length"), 0x2E7B6484uLL);
        *a3 = v8;
        if (v8)
        {
          v9 = objc_retainAutorelease(v7);
          memcpy(v8, (const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"));
          v10 = objc_msgSend(v9, "length");
        }
        else
        {
          v20 = *__error();
          if (DIForwardLogs())
          {
            getDIOSLog();
            v21 = objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 68158466;
            v25 = 59;
            v26 = 2080;
            v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            v28 = 2048;
            v29 = objc_msgSend(v7, "length");
            v30 = 2112;
            v31 = v6;
            v22 = (char *)_os_log_send_and_compose_impl();

            if (v22)
            {
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v22);
              free(v22);
            }
          }
          else
          {
            getDIOSLog();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68158466;
              v25 = 59;
              v26 = 2080;
              v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
              v28 = 2048;
              v29 = objc_msgSend(v7, "length");
              v30 = 2112;
              v31 = v6;
              _os_log_impl(&dword_212EB0000, v23, OS_LOG_TYPE_ERROR, "%.*s: Out of memory, failed to allocated %zu bytes for key %@", buf, 0x26u);
            }

          }
          *__error() = v20;
          v10 = -12;
        }
      }
      else
      {
        v15 = *__error();
        if (DIForwardLogs())
        {
          getDIOSLog();
          v16 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 68158210;
          v25 = 59;
          v26 = 2080;
          v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
          v28 = 2112;
          v29 = (uint64_t)v6;
          v17 = (char *)_os_log_send_and_compose_impl();

          if (v17)
          {
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v17);
            free(v17);
          }
        }
        else
        {
          getDIOSLog();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            v25 = 59;
            v26 = 2080;
            v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            v28 = 2112;
            v29 = (uint64_t)v6;
            _os_log_impl(&dword_212EB0000, v18, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }

        }
        *__error() = v15;
        v10 = -22;
      }
    }
    else
    {
      v10 = -2;
    }

  }
  else
  {
    v11 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      v12 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      v25 = 59;
      v26 = 2080;
      v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
      v13 = (char *)_os_log_send_and_compose_impl();

      if (v13)
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v13);
        free(v13);
      }
    }
    else
    {
      getDIOSLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v25 = 59;
        v26 = 2080;
        v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
        _os_log_impl(&dword_212EB0000, v14, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v11;
    return -22;
  }
  return v10;
}

void sub_212EE68AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t plugin_decode_fd(void *a1, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v3 = a1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v6 = dup(objc_msgSend(v5, "fileDescriptor"));
        if ((v6 & 0x80000000) != 0)
          v6 = -*__error();
      }
      else
      {
        v11 = *__error();
        if (DIForwardLogs())
        {
          getDIOSLog();
          v12 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 68158210;
          v17 = 42;
          v18 = 2080;
          v19 = "int plugin_decode_fd(void *, const char *)";
          v20 = 2112;
          v21 = v4;
          v13 = (char *)_os_log_send_and_compose_impl();

          if (v13)
          {
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v13);
            free(v13);
          }
        }
        else
        {
          getDIOSLog();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            v17 = 42;
            v18 = 2080;
            v19 = "int plugin_decode_fd(void *, const char *)";
            v20 = 2112;
            v21 = v4;
            _os_log_impl(&dword_212EB0000, v14, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }

        }
        *__error() = v11;
        v6 = 4294967274;
      }
    }
    else
    {
      v6 = 4294967294;
    }

  }
  else
  {
    v7 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      v8 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      v17 = 42;
      v18 = 2080;
      v19 = "int plugin_decode_fd(void *, const char *)";
      v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      getDIOSLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v17 = 42;
        v18 = 2080;
        v19 = "int plugin_decode_fd(void *, const char *)";
        _os_log_impl(&dword_212EB0000, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v7;
    return 4294967274;
  }
  return v6;
}

void sub_212EE6C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EE6DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void plugin_encode_buffer(void *a1, const char *a2, const void *a3, uint64_t a4)
{
  void *v7;
  void *v8;
  int v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2 && a3 && a4)
  {
    v13 = a1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", a3, a4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v8, v7);

  }
  else
  {
    v9 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      v10 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      v15 = 69;
      v16 = 2080;
      v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
      v11 = (char *)_os_log_send_and_compose_impl();

      if (v11)
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v11);
        free(v11);
      }
    }
    else
    {
      getDIOSLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v15 = 69;
        v16 = 2080;
        v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
        _os_log_impl(&dword_212EB0000, v12, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v9;
  }
}

void sub_212EE7008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void plugin_encode_fd(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  int v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  id v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    v11 = a1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1578]), "initWithFileDescriptor:", a3);
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v6, v5);

  }
  else
  {
    v7 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      v8 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      v13 = 48;
      v14 = 2080;
      v15 = "void plugin_encode_fd(void *, const char *, int)";
      v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      getDIOSLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        v13 = 48;
        v14 = 2080;
        v15 = "void plugin_encode_fd(void *, const char *, int)";
        _os_log_impl(&dword_212EB0000, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }

    }
    *__error() = v7;
  }
}

void sub_212EE725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_212EE7384(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::byte>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<crypto::keys,std::allocator<crypto::format>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_212EE7424(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<crypto::keys,std::allocator<crypto::format>,0>(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEED8;
  crypto::format::format(a1 + 3);
  return a1;
}

void sub_212EE746C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<crypto::format>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto::format>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_emplace<crypto::format>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<crypto::format,0>(a1 + 24);
}

void std::__destroy_at[abi:ne180100]<crypto::format,0>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 56);
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    MEMORY[0x2199A8A18](v2, 0x1000C4015A9971DLL);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,std::allocator<crypto::format>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_212EE759C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,std::allocator<crypto::format>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEED8;
  crypto::format::format(a1 + 3, a2, a3, *a4, *a5);
  return a1;
}

void sub_212EE75EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,char const*,int &,void>(char **a1@<X1>, _DWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<FileLocal>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE7654(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<FileLocal>,0>(_QWORD *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF38;
  std::construct_at[abi:ne180100]<FileLocal,char const*,int &,FileLocal*>((FileLocal *)(a1 + 3), a2, a3);
  return a1;
}

void sub_212EE769C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FileLocal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEF38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FileLocal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEF38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<FileLocal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

FileLocal *std::construct_at[abi:ne180100]<FileLocal,char const*,int &,FileLocal*>(FileLocal *a1, char **a2, _DWORD *a3)
{
  int v5;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  LODWORD(a3) = *a3;
  v5 = FileDescriptorWrapper::open_file((uint64_t)__p, (int)a3);
  FileLocal::FileLocal(a1, v5, (a3 & 3) != 0, 0);
  if (v8 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_212EE7770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL &,BOOL &,void>(int *a1@<X1>, BOOL *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,BOOL &,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212EE77F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,BOOL &,std::allocator<FileLocal>,0>(_QWORD *a1, int *a2, BOOL *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF38;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_212EE7844(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,void>(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,std::allocator<SparseBundleBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE78C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,std::allocator<SparseBundleBackend>,0>(_QWORD *a1, unsigned int *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF88;
  SparseBundleBackend::SparseBundleBackend(a1 + 3, *a2, *a3);
  return a1;
}

void sub_212EE7914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SparseBundleBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEF88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SparseBundleBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEF88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<SparseBundleBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,char const*,int &,unsigned long &,void>(char **a1@<X1>, unsigned int *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,unsigned long &,std::allocator<SparseBundleBackend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212EE79DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,unsigned long &,std::allocator<SparseBundleBackend>,0>(_QWORD *a1, char **a2, unsigned int *a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF88;
  std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,unsigned long &,SparseBundleBackend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_212EE7A24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,unsigned long &,SparseBundleBackend*>(uint64_t a1, char **a2, unsigned int *a3, uint64_t *a4)
{
  di_utils *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v7 = (di_utils *)std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  v8 = *a3;
  v9 = *a4;
  v14[0] = di_utils::random_uuid(v7);
  v14[1] = v10;
  SparseBundleBackend::SparseBundleBackend(a1, __p, v8, v9, v14);
  if (v13 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_212EE7AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,char const*,int &,void>(char **a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<SparseBundleBackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE7B58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<SparseBundleBackend>,0>(_QWORD *a1, char **a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF88;
  std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,SparseBundleBackend*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_212EE7BA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,SparseBundleBackend*>(uint64_t a1, char **a2, unsigned int *a3)
{
  di_utils *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v5 = (di_utils *)std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  v6 = *a3;
  v11[0] = di_utils::random_uuid(v5);
  v11[1] = v7;
  SparseBundleBackend::SparseBundleBackend(a1, __p, v6, 0, v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_212EE7C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,unsigned long long &,void>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,std::allocator<BackendNull>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_212EE7CBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,std::allocator<BackendNull>,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24CEEEFD8;
  v3 = *a2;
  v4 = di_utils::random_uuid((di_utils *)a1);
  v6 = v5;
  Backend::Backend((Backend *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = &off_24CEEF028;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v6;
  return a1;
}

void sub_212EE7D34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BackendNull>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendNull>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEEFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void BackendNull::~BackendNull(BackendNull *this)
{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x2199A8A18);
}

uint64_t BackendNull::flush()
{
  return 0;
}

uint64_t Backend::unmap_range(Backend *this)
{
  return 4294967251;
}

uint64_t Backend::supports_unmap(Backend *this)
{
  return 0;
}

uint64_t BackendNull::get_size(BackendNull *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t BackendNull::is_writable(BackendNull *this)
{
  return 1;
}

uint64_t BackendNull::truncate(BackendNull *this, uint64_t a2)
{
  *((_QWORD *)this + 3) = a2;
  return 0;
}

_QWORD *BackendNull::name(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendNull", 11);
}

_QWORD *Backend::getContext@<X0>(Backend *this@<X0>, _QWORD *a2@<X8>)
{
  return std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(a2, (_QWORD *)this + 1);
}

uint64_t BackendNull::write(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t BackendNull::read(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t Backend::write(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;
  _OWORD v10[2];

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 80))(a1, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_212EE7EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Backend::read(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;
  _OWORD v10[2];

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_212EE7F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Backend::read(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  v2 = a2[1];
  if (!v2)
    return 0;
  v4 = *a2;
  v5 = 48 * v2;
  while (1)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v4);
    if ((v6 & 0x80000000) != 0)
      break;
    v4 += 48;
    v5 -= 48;
    if (!v5)
      return 0;
  }
  v7 = v6;
  *(_QWORD *)&v9 = "int Backend::read(const elements_t &)";
  *((_QWORD *)&v9 + 1) = 17;
  v10 = 16;
  di_log::logger<di_log::log_printer<124ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Backend: failed reading element in vector", 41);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)v11);
  MEMORY[0x2199A89AC](&v13);
  return v7;
}

void sub_212EE8070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<124ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Backend::write(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  v2 = a2[1];
  if (!v2)
    return 0;
  v4 = *a2;
  v5 = 48 * v2;
  while (1)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v4);
    if ((v6 & 0x80000000) != 0)
      break;
    v4 += 48;
    v5 -= 48;
    if (!v5)
      return 0;
  }
  v7 = v6;
  *(_QWORD *)&v9 = "int Backend::write(const elements_t &)";
  *((_QWORD *)&v9 + 1) = 18;
  v10 = 16;
  di_log::logger<di_log::log_printer<135ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Backend: failed writing element in vector", 41);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf((uint64_t)v11);
  MEMORY[0x2199A89AC](&v13);
  return v7;
}

void sub_212EE8160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<135ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t Backend::future_read@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X8>)
{
  const void *v6;
  int v7;
  int *v8;
  unint64_t result;
  _DWORD v10[10];
  int *v11;
  int *v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t tagged_ptr_lock;
  uint64_t tagged_ptr_cond;
  int **v18;

  LOBYTE(v13) = 0;
  v14 = 0;
  v15 = 0;
  tagged_ptr_lock = ref::details::_get_tagged_ptr_lock((unint64_t)&v13, a2);
  v12 = &v13;
  tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v13, v6);
  v18 = &v12;
  lw_future<int>::lw_future((unint64_t)v10, &v13);
  v11 = v12;
  *((_QWORD *)v12 + 4) = &v11;
  v7 = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)a1 + 88))(a1, a2);
  v8 = v11;
  *v11 = v7;
  *((_BYTE *)v8 + 4) = 1;
  lw_promise<int>::notify_future((uint64_t)&v11);
  result = lw_future<int>::lw_future(a3, v10);
  if (v11)
    *((_QWORD *)v11 + 4) = 0;
  return result;
}

void sub_212EE823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    *(_QWORD *)(a14 + 32) = 0;
  _Unwind_Resume(a1);
}

unint64_t Backend::future_write@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X8>)
{
  const void *v6;
  int v7;
  int *v8;
  unint64_t result;
  _DWORD v10[10];
  int *v11;
  int *v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t tagged_ptr_lock;
  uint64_t tagged_ptr_cond;
  int **v18;

  LOBYTE(v13) = 0;
  v14 = 0;
  v15 = 0;
  tagged_ptr_lock = ref::details::_get_tagged_ptr_lock((unint64_t)&v13, a2);
  v12 = &v13;
  tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v13, v6);
  v18 = &v12;
  lw_future<int>::lw_future((unint64_t)v10, &v13);
  v11 = v12;
  *((_QWORD *)v12 + 4) = &v11;
  v7 = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)a1 + 80))(a1, a2);
  v8 = v11;
  *v11 = v7;
  *((_BYTE *)v8 + 4) = 1;
  lw_promise<int>::notify_future((uint64_t)&v11);
  result = lw_future<int>::lw_future(a3, v10);
  if (v11)
    *((_QWORD *)v11 + 4) = 0;
  return result;
}

void sub_212EE8324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    *(_QWORD *)(a14 + 32) = 0;
  _Unwind_Resume(a1);
}

uint64_t Backend::full_name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t BackendNull::get_identifier(BackendNull *this)
{
  return *((_QWORD *)this + 4);
}

_QWORD *std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

_QWORD *di_log::logger<di_log::log_printer<124ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<124ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEF108;
  a1[45] = &unk_24CEEF208;
  a1[46] = &unk_24CEEF230;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEF108;
  a1[45] = &unk_24CEEF190;
  a1[46] = &unk_24CEEF1B8;
  return a1;
}

void sub_212EE845C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEF2A0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EE8528(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEF2A0;
  di_log::logger_buf<di_log::log_printer<124ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<124ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<124ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EE891C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<124ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 124;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 124;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<135ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<135ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEF328;
  a1[45] = &unk_24CEEF428;
  a1[46] = &unk_24CEEF450;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEF328;
  a1[45] = &unk_24CEEF3B0;
  a1[46] = &unk_24CEEF3D8;
  return a1;
}

void sub_212EE8BBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEF4C0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EE8C88(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEF4C0;
  di_log::logger_buf<di_log::log_printer<135ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<135ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<135ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EE907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<135ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 135;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 135;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

void lw_promise<int>::notify_future(uint64_t a1)
{
  std::mutex *v2;

  if (*(_QWORD *)(*(_QWORD *)a1 + 8))
  {
    v2 = *(std::mutex **)(*(_QWORD *)a1 + 16);
    std::mutex::lock(v2);
    if (atomic_load((unint64_t *)(*(_QWORD *)a1 + 8)))
      std::condition_variable::notify_all(*(std::condition_variable **)(*(_QWORD *)a1 + 24));
    std::mutex::unlock(v2);
  }
}

void std::allocate_shared[abi:ne180100]<Ram,std::allocator<Ram>,unsigned long long,boost::uuids::uuid,void>(size_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x80uLL);
  std::__shared_ptr_emplace<Ram>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::allocator<Ram>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE934C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<Ram>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::allocator<Ram>,0>(_QWORD *a1, size_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF540;
  Ram::Ram((uint64_t)(a1 + 3), *a2, *a3, a3[1]);
  return a1;
}

void sub_212EE93A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Ram>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ram>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<Ram>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Ram::Ram(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  Backend::Backend((Backend *)a1);
  *v8 = &off_24CF12040;
  v8[3] = 0;
  v9 = v8 + 3;
  v8[7] = 0;
  v8[9] = a2;
  v8[10] = a3;
  v8[11] = a4;
  v10 = malloc_type_valloc(a2, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v18[0] = &off_24CEEF590;
  v19 = v18;
  v16 = v10;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v17, (uint64_t)v18);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
    goto LABEL_6;
  }
  if (v19)
  {
    v12 = 5;
LABEL_6:
    (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::operator=[abi:ne180100](v9, (uint64_t *)&v16);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v16);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 96) = getpagesize();
  return a1;
}

void sub_212EE9550(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v4;

  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

{
  JUMPOUT(0x2199A8A18);
}

{
  JUMPOUT(0x2199A8A18);
}

{
  JUMPOUT(0x2199A8A18);
}

{
  JUMPOUT(0x2199A8A18);
}

{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CEEF590;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CEF08B8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF03100;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF08BE8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF08C68;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CF11FC0;
  return result;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CEEF590;
}

{
  *a2 = &off_24CEF08B8;
}

{
  *a2 = &off_24CF03100;
}

{
  *a2 = &off_24CF08BE8;
}

{
  *a2 = &off_24CF08C68;
}

{
  *a2 = &off_24CF11FC0;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::operator()(uint64_t a1, void **a2)
{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

uint64_t std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::target_type()
{
}

{
}

{
}

{
}

{
}

{
}

uint64_t std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,unsigned long long &,boost::uuids::uuid &,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,boost::uuids::uuid &,std::allocator<BackendNull>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE979C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,boost::uuids::uuid &,std::allocator<BackendNull>,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24CEEEFD8;
  v4 = *a2;
  v5 = *a3;
  v6 = a3[1];
  Backend::Backend((Backend *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = &off_24CEEF028;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  return a1;
}

void sub_212EE9808(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,std::allocator<crypto_format_backend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE9870(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,std::allocator<crypto_format_backend>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF620;
  v5 = 0;
  crypto_format_backend::crypto_format_backend(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_212EE98C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<crypto_format_backend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto_format_backend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<crypto_format_backend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,std::allocator<crypto_format_backend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE9980(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,std::allocator<crypto_format_backend>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF620;
  v5 = 0;
  crypto_format_backend::crypto_format_backend(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_212EE99D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,std::shared_ptr<Backend> &,void>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x68uLL);
  std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::allocator<readSynchronizer>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_212EE9A38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::allocator<readSynchronizer>,0>(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF670;
  readSynchronizer::readSynchronizer(a1 + 3);
  return a1;
}

void sub_212EE9A80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<readSynchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<readSynchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<readSynchronizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,std::shared_ptr<Backend>,void>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x68uLL);
  std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::allocator<readSynchronizer>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_212EE9B30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::allocator<readSynchronizer>,0>(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF670;
  readSynchronizer::readSynchronizer(a1 + 3);
  return a1;
}

void sub_212EE9B78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AEA_backend,std::allocator<AEA_backend>,std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,void>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x70uLL);
  std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,std::allocator<AEA_backend>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_212EE9BE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,std::allocator<AEA_backend>,0>(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF6C0;
  AEA_backend::AEA_backend(a1 + 3);
  return a1;
}

void sub_212EE9C28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AEA_backend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AEA_backend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<AEA_backend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::string,std::allocator<std::string>,char const*,void>@<X0>(char **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::string>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<std::string>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_212EE9CD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::string>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<std::string>,0>(_QWORD *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24CEEF710;
  std::string::basic_string[abi:ne180100]<0>(a1 + 3, *a2);
  return a1;
}

void sub_212EE9D20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CEEF710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CEEF710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::allocate_shared[abi:ne180100]<Knoxbackend,std::allocator<Knoxbackend>,std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,void>(uint64_t a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x50uLL);
  std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,std::allocator<Knoxbackend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212EE9DF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,std::allocator<Knoxbackend>,0>(_QWORD *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF760;
  Knoxbackend::Knoxbackend(a1 + 3, a2, *a3);
  return a1;
}

void sub_212EE9E44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Knoxbackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Knoxbackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<Knoxbackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<plugin_header,std::allocator<plugin_header>,char const*&,__CFDictionary const*,int &,void>@<X0>(char **a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*&,__CFDictionary const*,int &,std::allocator<plugin_header>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_212EE9F04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*&,__CFDictionary const*,int &,std::allocator<plugin_header>,0>(_QWORD *a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF7B0;
  std::construct_at[abi:ne180100]<plugin_header,char const*&,__CFDictionary const*,int &,plugin_header*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_212EE9F4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<plugin_header>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<plugin_header>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<plugin_header>::__on_zero_shared(uint64_t a1)
{
  return std::__destroy_at[abi:ne180100]<plugin_header,0>(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<plugin_header,char const*&,__CFDictionary const*,int &,plugin_header*>(uint64_t a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v10[3];
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  v7 = *a3;
  v8 = *a4;
  memset(v10, 0, sizeof(v10));
  plugin_header::plugin_header(a1, __p, v7, v8 | 0x100000000, v10, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_212EEA028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__destroy_at[abi:ne180100]<plugin_header,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1);
}

void std::allocate_shared[abi:ne180100]<BackendPlugin,std::allocator<BackendPlugin>,std::shared_ptr<plugin_header> &,void>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x40uLL);
  std::__shared_ptr_emplace<BackendPlugin>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<plugin_header> &,std::allocator<BackendPlugin>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_212EEA0C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendPlugin>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<plugin_header> &,std::allocator<BackendPlugin>,0>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24CEEF800;
  Backend::Backend((Backend *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = &off_24CEEF850;
  v4 = a2[1];
  *(_QWORD *)(a1 + 48) = *a2;
  *(_QWORD *)(a1 + 56) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return a1;
}

void sub_212EEA138(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BackendPlugin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendPlugin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEEF800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_emplace<BackendPlugin>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void BackendPlugin::~BackendPlugin(BackendPlugin *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CEEF850;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CEEF850;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x2199A8A18);
}

uint64_t BackendPlugin::flush()
{
  return 4294967251;
}

uint64_t BackendPlugin::get_size(BackendPlugin *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))(**((_QWORD **)this + 3) + 16))();
  return (*(uint64_t (**)(void))(**((_QWORD **)this + 3) + 8))() * v2;
}

_QWORD *BackendPlugin::is_writable(BackendPlugin *this)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**((_QWORD **)this + 3) + 24))(*((_QWORD **)this + 3));
}

uint64_t BackendPlugin::truncate(BackendPlugin *this)
{
  return 4294967251;
}

_QWORD *BackendPlugin::name(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendPlugin", 13);
}

uint64_t BackendPlugin::write()
{
  return 4294967251;
}

uint64_t BackendPlugin::read()
{
  return 4294967251;
}

uint64_t BackendPlugin::get_identifier(plugin_header **this)
{
  return plugin_header::get_uuid(this[3]);
}

uint64_t plugin_header::get_uuid(plugin_header *this)
{
  uint64_t v1;
  const __CFUUID *v3;

  v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(_QWORD *)this + 48))();
  v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v3);
  return v1;
}

void sub_212EEA300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

const void **CFAutoRelease<__CFUUID const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<plugin_header,std::allocator<plugin_header>,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,void>@<X0>(char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,std::allocator<plugin_header>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_212EEA3B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,std::allocator<plugin_header>,0>(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF7B0;
  std::construct_at[abi:ne180100]<plugin_header,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,plugin_header*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_212EEA400(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<plugin_header,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,plugin_header*>(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  plugin_header::plugin_header(a1, __p, 0, 0, a5, *a6);
  if (v11 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_212EEA484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_212EEA508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEA580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEA5E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEA7A0(_Unwind_Exception *a1, int a2)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v9;
  void *v10;

  v6 = v5;

  if (a2 == 1)
  {
    +[DIError errorWithDIException:description:prefix:error:](DIError, "errorWithDIException:description:prefix:error:", __cxa_begin_catch(a1), 0, 0, 0);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v3[6];
    v3[6] = v9;

    __cxa_end_catch();
    JUMPOUT(0x212EEA780);
  }

  _Unwind_Resume(a1);
}

void sub_212EEA82C()
{
  JUMPOUT(0x212EEA7D0);
}

void sub_212EEA834()
{
  __cxa_end_catch();
  JUMPOUT(0x212EEA7D0);
}

void sub_212EEA960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212EEAAF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EEAD34(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v7;

  if (a2 == 1)
  {
    objc_msgSend(objc_begin_catch(a1), "reason");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v7, v2);

    objc_end_catch();
    JUMPOUT(0x212EEACFCLL);
  }
  _Unwind_Resume(a1);
}

void sub_212EEB30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEB57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEB8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEB9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEBC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20,__int16 a21,int a22)
{
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:](DIError, "failWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("Failed opening the shadow/cache file(s)"), v23);
    __cxa_end_catch();
    JUMPOUT(0x212EEBBC8);
  }

  _Unwind_Resume(a1);
}

void sub_212EEBFC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEC07C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEC0C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEC10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_212EEC2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_212EEC418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212EEC484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEC5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_212EED0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EED190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212EED478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EED7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_212EEDAA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEDC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEDD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEDEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_212EEDFF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_212EEE074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEE0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

#error "212EEE860: call analysis failed (funcsize=223)"

void sub_212EEED34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEF2E0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v10;

  v7 = v5;

  if (a2 == 1)
  {
    objc_msgSend(objc_begin_catch(a1), "reason");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError nilWithEnumValue:verboseInfo:error:](DIError, "nilWithEnumValue:verboseInfo:error:", 150, v10, v2);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x212EEF298);
  }

  _Unwind_Resume(a1);
}

void sub_212EEF528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEF764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEF7FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EEF91C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_212EEF9C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EEFAC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EEFBA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EEFE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  FileLocal::~FileLocal((FileLocal *)&a20);

  _Unwind_Resume(a1);
}

void FileLocal::~FileLocal(FileLocal *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CF0F5C0;
  *((_QWORD *)this + 3) = &unk_24CF0F6A0;
  *((_QWORD *)this + 4) = &unk_24CF0F6D8;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_24CF0F5C0;
  *((_QWORD *)this + 3) = &unk_24CF0F6A0;
  *((_QWORD *)this + 4) = &unk_24CF0F6D8;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x2199A8A18);
}

void sub_212EF05C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EF0750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EF0888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EF08D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EF091C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_212EF0A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EF0AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EF0E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  FileLocal::~FileLocal((FileLocal *)&a22);
  if (a2 == 1)
  {
    +[DIError nilWithDIException:prefix:error:](DIError, "nilWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("failed to open existing output file"), v22);
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x212EF0D18);
  }
  _Unwind_Resume(a1);
}

void sub_212EF19AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v30;

  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    objc_msgSend(objc_begin_catch(a1), "reason");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:](DIError, "failWithEnumValue:verboseInfo:error:", 150, v30, v22);

    objc_end_catch();
    JUMPOUT(0x212EF0FE0);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_212EF1D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD **)a1;
    do
    {
      v4 = v3[7];
      if (v4)
        *(_QWORD *)(v4 + 32) = 0;
      --v2;
      v3 = (_QWORD *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v3) + 64);
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16) && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_212EF2DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PluginRingSubscriber::PluginRingSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int v6;
  DiskImagesRuntimeException *exception;
  void *v8;

  *(_QWORD *)a1 = a3;
  v4 = io_rings_subscriber_subscribe(a3, a2);
  if ((v4 & 0x80000000) != 0)
  {
    v6 = v4;
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Failed to subscribe to the plugin's IO ring", v6);
  }
  *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

void PluginRingSubscriber::~PluginRingSubscriber(PluginRingSubscriber *this)
{
  io_rings_unsubscribe_dest_object(*(_QWORD *)this, *((_DWORD *)this + 2));
  io_rings_release(*(_QWORD *)this);
}

uint64_t PluginRing::PluginRing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  DiskImagesRuntimeException *exception;
  void *v14;
  _QWORD *v15;
  const std::error_category *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  LODWORD(v18[0]) = io_rings_get_max_version(0, 0);
  HIDWORD(v18[0]) = 48;
  v18[1] = 0;
  v18[2] = di_plugin_cq_event_callback;
  v19 = 0;
  v20 = a3;
  v21 = a4;
  v17 = 0;
  v8 = io_rings_setup(0x100u, (uint64_t)v18, &v17);
  if (v8)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Failed to setup the plugin's IO ring", v8);
  }
  v18[0] = &off_24CEF0588;
  v19 = v18;
  *(_QWORD *)(a1 + 8) = v17;
  std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::__value_func[abi:ne180100](a1 + 16, (uint64_t)v18);
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v11 = (*(uint64_t (**)(uint64_t))(a2 + 56))(a2);
  if (!v11)
  {
    v15 = __cxa_allocate_exception(0x40uLL);
    *v15 = &off_24CF07908;
    v16 = std::generic_category();
    v15[1] = 4294967284;
    v15[2] = v16;
    *((_BYTE *)v15 + 24) = 0;
    *((_BYTE *)v15 + 48) = 0;
    v15[7] = "Cannot get subscriber from plugin";
  }
  PluginRingSubscriber::PluginRingSubscriber(a1 + 56, v11, *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 1018212795;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 850045863;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  return a1;
}

void sub_212EF30E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void PluginRing::~PluginRing(PluginRing *this)
{
  io_rings_suspend(*((_QWORD *)this + 6));
  io_rings_cancel(*((_QWORD *)this + 6));
  std::mutex::~mutex((std::mutex *)((char *)this + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  PluginRingSubscriber::~PluginRingSubscriber((PluginRing *)((char *)this + 56));
  std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1);
}

double PluginRing::try_sub_sqe_allocate(PluginRing *this)
{
  unsigned int v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;

  v1 = atomic_load((unsigned int *)this + 19);
  v2 = (unsigned int *)((char *)this + 72);
  v3 = atomic_load((unsigned int *)this + 18);
  if (v3 - v1 < *(_DWORD *)(*((_QWORD *)this + 1) + 8))
  {
    do
    {
      while (1)
      {
        v4 = __ldaxr(v2);
        if (v4 == v3)
          break;
        __clrex();
        v5 = atomic_load((unsigned int *)this + 19);
        v6 = v4 - v5;
        v3 = v4;
        if (v6 >= *(_DWORD *)(*((_QWORD *)this + 1) + 8))
          return result;
      }
    }
    while (__stlxr(v3 + 1, v2));
    return io_rings_sqe_allocate(*((_QWORD *)this + 6));
  }
  return result;
}

void PluginRing::get_next_cqe(PluginRing *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t cqe;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v12;

  cqe = io_rings_get_cqe(*((_QWORD *)this + 6));
  if ((v5 & 0x100000000) != 0)
  {
    v7 = cqe;
    v8 = v5;
    v9 = (unsigned int *)((char *)this + 76);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    if (atomic_load((unint64_t *)this + 10))
    {
      v12 = atomic_load((unsigned int *)this + 18);
      if (v10 + 1 == v12)
      {
        std::mutex::lock((std::mutex *)((char *)this + 136));
        std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
        std::mutex::unlock((std::mutex *)((char *)this + 136));
      }
    }
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v6;
}

uint64_t PluginRing::set_dest_obj_id(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 64);
  return result;
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24CEF0618;
  v6[1] = a1;
  v7 = v6;
  io_rings_di_subscriber_t::io_rings_di_subscriber_t();
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  *(_QWORD *)(a1 + 280) = di_hybrid_subscriber_t::get_cache_di((di_hybrid_subscriber_t *)a1);
  v4 = *(_QWORD *)(*(_QWORD *)(io_rings_di_subscriber_t::get_di((io_rings_di_subscriber_t *)a1) + 24) - 24);
  *(_QWORD *)(a1 + 288) = v4;
  *(_QWORD *)(a1 + 296) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  PluginRing::PluginRing(a1 + 304, *(_QWORD *)(*(_QWORD *)(a1 + 288) + 16), (uint64_t)async_cqe_callback, a1);
  gcd::gcd_queue::gcd_queue(a1 + 504, "com.apple.diskimages_cache_update", 2);
  *(_QWORD *)(a1 + 512) = 850045863;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  gcd::gcd_queue::gcd_queue(a1 + 624, "hybrid_queue", 2);
  *(_DWORD *)(a1 + 632) = 2;
  *(_QWORD *)a1 = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_1::__invoke;
  *(_QWORD *)(a1 + 16) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_2::__invoke;
  *(_QWORD *)(a1 + 24) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_3::__invoke;
  *(_QWORD *)(a1 + 32) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_4::__invoke;
  *(_QWORD *)(a1 + 40) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_5::__invoke;
  return a1;
}

void sub_212EF3434(_Unwind_Exception *a1)
{
  io_rings_di_subscriber_t *v1;
  PluginRing *v2;
  NSObject **v3;
  std::mutex *v4;
  NSObject **v5;

  v5 = v3;
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((_QWORD *)v1 + 72);
  std::mutex::~mutex(v4);
  gcd::gcd_group::~gcd_group(v5);
  PluginRing::~PluginRing(v2);
  io_rings_di_subscriber_t::~io_rings_di_subscriber_t(v1);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::get_cache_di(di_hybrid_subscriber_t *this)
{
  uint64_t di;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  di = io_rings_di_subscriber_t::get_di(this);
  v2 = *(_QWORD *)(di + 16);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(di + 24) - v2) >> 4);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (v4
    && *(_DWORD *)(v2 + 48 * v5) == 2
    && (v6 = v2 + 48 * v5,
        v8 = *(_QWORD *)(v6 + 8),
        v7 = v6 + 8,
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8)))
  {
    return *(_QWORD *)v7;
  }
  else
  {
    return 0;
  }
}

void async_cqe_callback(int a1, dispatch_queue_t *this)
{
  di_hybrid_subscriber_t::cqe_callback(this);
}

void io_rings_di_subscriber_t::~io_rings_di_subscriber_t(io_rings_di_subscriber_t *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 248;
  v3 = (char *)*((_QWORD *)this + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t((uint64_t)this + 120);
}

uint64_t di_hybrid_subscriber_t::exec_sync(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned int v4;
  uint64_t sqe;
  uint64_t v6;
  _QWORD v8[3];

  io_rings_di_subscriber_t::get_ctx((io_rings_di_subscriber_t *)a1, v8);
  if (v8[1])
  {
    v4 = io_rings_parse_and_execute_sqe((uint64_t)a1, (uint64_t)v8, (uint64_t)a2);
    if (*a2 - 1 > 1)
      sqe = io_rings_return_status(a1[7], (uint64_t)a2, v4, 0);
    else
      sqe = di_hybrid_subscriber_t::handle_read_sqe((uint64_t)a1, (uint64_t)a2, (uint64_t)v8, v4);
  }
  else
  {
    sqe = io_rings_return_status(a1[7], (uint64_t)a2, 0xFFFFFFF4, 0);
  }
  v6 = sqe;
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)v8);
  return v6;
}

void sub_212EF3638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::handle_read_sqe(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t *v39;
  std::__shared_weak_count *v40;
  void **v41;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) - 16);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 24);
  if (v8 == v9)
    return io_rings_return_status(*(_QWORD *)(a1 + 56), a2, a4, 0);
  if ((a4 & 0x80000000) != 0)
  {
    do
    {
      v9 -= 152;
      std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v9);
    }
    while (v9 != v8);
    *(_QWORD *)(v7 + 24) = v8;
    return io_rings_return_status(*(_QWORD *)(a1 + 56), a2, a4, 0);
  }
  v10 = operator new();
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 8) = a2;
  *(_DWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 20) = a4;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v7 + 16);
  *(_QWORD *)(v10 + 40) = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  v39 = (uint64_t *)v10;
  v11 = (std::__shared_weak_count *)operator new();
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24CEF0818;
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v40 = v11;
  v12 = v39;
  memset(v38, 0, sizeof(v38));
  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(v7 + 8) + 72))(v38);
  if (*(_QWORD *)(a1 + 280))
  {
    v13 = v38[0];
    if (LODWORD(v38[0]))
    {
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 24))(*(_QWORD *)(v7 + 8));
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 32))(*(_QWORD *)(v7 + 8));
      compact_sub_transactions(v12 + 3, v13, v13, v14, v15, (uint64_t *)&v36);
      std::vector<di_async_sub_transaction_t>::__vdeallocate((void **)v12 + 3);
      *(_OWORD *)(v12 + 3) = v36;
      v12[5] = v37;
      v37 = 0;
      v36 = 0uLL;
      v41 = (void **)&v36;
      std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v41);
    }
  }
  v17 = v12[3];
  v16 = v12[4];
  if (v17 == v16)
    goto LABEL_17;
  v18 = v12[3];
  do
  {
    std::shared_ptr<DiskImage>::operator=[abi:ne180100]((_QWORD *)(v17 + 136), (uint64_t *)&v39);
    *(_QWORD *)(v17 + 16) = v18;
    v17 += 152;
    v18 += 152;
  }
  while (v17 != v16);
  v17 = v12[3];
  if (v12[4] == v17)
  {
LABEL_17:
    v20 = 0;
    v19 = 0;
    v27 = v17;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 304));
      if (!v21)
        break;
      v22 = v12[3] + 152 * v19;
      v23 = *(_OWORD *)(v22 + 32);
      v24 = *(_OWORD *)(v22 + 48);
      v25 = *(_OWORD *)(v22 + 64);
      *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
      *(_OWORD *)(v21 + 48) = v24;
      *(_OWORD *)(v21 + 64) = v25;
      *(_OWORD *)(v21 + 32) = v23;
      v26 = *(_OWORD *)(v22 + 16);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(v21 + 16) = v26;
      *(_DWORD *)(v21 + 8) = *(_DWORD *)(a1 + 368);
      v19 = ++v20;
      v17 = v12[3];
      v27 = v12[4];
      if (0x86BCA1AF286BCA1BLL * ((v27 - v17) >> 3) <= v20)
        goto LABEL_19;
    }
    v17 = v12[3];
    v27 = v12[4];
  }
LABEL_19:
  if (0x86BCA1AF286BCA1BLL * ((v27 - v17) >> 3) > v19)
  {
    std::mutex::lock((std::mutex *)(a1 + 512));
    v29 = v12[3];
    if (0x86BCA1AF286BCA1BLL * ((v12[4] - v29) >> 3) > v20)
    {
      v30 = v20 + 1;
      v31 = v20;
      do
      {
        *(_QWORD *)&v36 = v29 + 152 * v31;
        std::deque<di_async_sub_transaction_t *>::emplace_back<di_async_sub_transaction_t *>((_QWORD *)(a1 + 576), &v36);
        v31 = v30;
        v29 = v12[3];
      }
      while (0x86BCA1AF286BCA1BLL * ((v12[4] - v29) >> 3) > v30++);
    }
    std::mutex::unlock((std::mutex *)(a1 + 512));
  }
  if (v20)
    io_rings_enter(*(_QWORD *)(a1 + 352), v20, 0);
  else
    di_hybrid_subscriber_t::handle_pending_sqes((di_hybrid_subscriber_t *)a1);
  v33 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return 0;
}

void sub_212EF39DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::add_sqe(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL4 is_barrier;
  dispatch_queue_t *v5;
  _QWORD v7[6];
  _QWORD v8[6];

  is_barrier = io_rings_sqe_is_barrier(a2);
  v5 = (dispatch_queue_t *)(a1 + 624);
  if (is_barrier)
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 0x40000000;
    v8[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke;
    v8[3] = &__block_descriptor_tmp_3;
    v8[4] = a1;
    v8[5] = a2;
    gcd::gcd_queue::barrier_async(v5, v8);
  }
  else
  {
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 0x40000000;
    v7[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_3;
    v7[3] = &__block_descriptor_tmp_4;
    v7[4] = a1;
    v7[5] = a2;
    gcd::gcd_queue::async(v5, v7);
  }
  return 0;
}

void ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v5[6];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = atomic_load((unsigned int *)(v2 + 632));
  if (v3 == 1)
  {
    io_rings_return_status(*(_QWORD *)(v2 + 56), *(_QWORD *)(a1 + 40), 0xFFFFFFA7, 0);
  }
  else
  {
    PluginRing::wait_for_pending_ios((PluginRing *)(v2 + 304));
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 0x40000000;
    v5[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_0;
    v4 = *(_QWORD *)(a1 + 40);
    v5[4] = v2;
    v5[5] = v4;
    gcd::gcd_queue::async((dispatch_queue_t *)(v2 + 624), v5);
  }
}

void PluginRing::wait_for_pending_ios(PluginRing *this)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  std::unique_lock<std::mutex> v11;

  v1 = atomic_load((unsigned int *)this + 18);
  v2 = atomic_load((unsigned int *)this + 19);
  if (v1 != v2)
  {
    v4 = (unint64_t *)((char *)this + 80);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 136);
    v11.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 136));
    v6 = atomic_load((unsigned int *)this + 18);
    v7 = atomic_load((unsigned int *)this + 19);
    if (v6 != v7)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)((char *)this + 88), &v11);
        v8 = atomic_load((unsigned int *)this + 18);
        v9 = atomic_load((unsigned int *)this + 19);
      }
      while (v8 != v9);
    }
    if (v11.__owns_)
      std::mutex::unlock(v11.__m_);
    do
      v10 = __ldaxr(v4);
    while (__stlxr(v10 - 1, v4));
  }
}

uint64_t ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_2(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 32);
  __dmb(9u);
  return di_hybrid_subscriber_t::exec_sync(v1, *(unsigned __int8 **)(a1 + 40));
}

uint64_t ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_3(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 32);
  __dmb(9u);
  return di_hybrid_subscriber_t::exec_sync(v1, *(unsigned __int8 **)(a1 + 40));
}

uint64_t di_hybrid_subscriber_t::suspend(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = (unsigned int *)(this + 632);
  while (1)
  {
    v3 = __ldaxr(v2);
    if (v3 != 2)
      break;
    if (!__stlxr(0, v2))
    {
      gcd::gcd_queue::suspend((dispatch_object_t *)(this + 624));
      io_rings_suspend(*(_QWORD *)(v1 + 352));
      *(_QWORD *)&v4 = "di_hybrid_subscriber_t::suspend()";
      *((_QWORD *)&v4 + 1) = 31;
      v5 = 0;
      di_log::logger<di_log::log_printer<250ul>>::logger(v6, &v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Plugin's ring suspended, ret code ", 34);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf((uint64_t)v6);
      return MEMORY[0x2199A89AC](&v8);
    }
  }
  __clrex();
  return this;
}

void sub_212EF3D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<250ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<250ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<250ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEFCB0;
  a1[45] = &unk_24CEEFDB0;
  a1[46] = &unk_24CEEFDD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEFCB0;
  a1[45] = &unk_24CEEFD38;
  a1[46] = &unk_24CEEFD60;
  return a1;
}

void sub_212EF3E1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_hybrid_subscriber_t::resume(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = (unsigned int *)(this + 632);
  while (!__ldaxr(v2))
  {
    if (!__stlxr(2u, v2))
    {
      gcd::gcd_queue::resume((dispatch_object_t *)(this + 624));
      io_rings_resume(*(_QWORD *)(v1 + 352));
      *(_QWORD *)&v4 = "di_hybrid_subscriber_t::resume()";
      *((_QWORD *)&v4 + 1) = 30;
      v5 = 0;
      di_log::logger<di_log::log_printer<259ul>>::logger(v6, &v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Plugin's ring resumed, ret code ", 32);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf((uint64_t)v6);
      return MEMORY[0x2199A89AC](&v8);
    }
  }
  __clrex();
  return this;
}

void sub_212EF3F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<259ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<259ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<259ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEFED0;
  a1[45] = &unk_24CEEFFD0;
  a1[46] = &unk_24CEEFFF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEFED0;
  a1[45] = &unk_24CEEFF58;
  a1[46] = &unk_24CEEFF80;
  return a1;
}

void sub_212EF3FE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void di_async_sub_transaction_t::append_empty_buffer(int64x2_t *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  if (a2)
  {
    v6 = a2;
    v7 = (uint64_t *)di_async_sub_transaction_t::enqueue_new_buffer(this);
    v8 = this[6].u64[1];
    v9 = *v7;
    v10 = (_QWORD *)this[6].i64[0];
    if ((unint64_t)v10 >= v8)
    {
      v12 = this[5].i64[1];
      v13 = ((uint64_t)v10 - v12) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      v15 = v8 - v12;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&this[6].i64[1], v16);
      else
        v17 = 0;
      v18 = &v17[16 * v13];
      v19 = &v17[16 * v16];
      *(_QWORD *)v18 = v9;
      *((_QWORD *)v18 + 1) = v6;
      v11 = v18 + 16;
      v21 = (char *)this[5].i64[1];
      v20 = (char *)this[6].i64[0];
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
          v18 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        v20 = (char *)this[5].i64[1];
      }
      this[5].i64[1] = (uint64_t)v18;
      this[6].i64[0] = (uint64_t)v11;
      this[6].i64[1] = (uint64_t)v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v10 = v9;
      v10[1] = v6;
      v11 = v10 + 2;
    }
    this[6].i64[0] = (uint64_t)v11;
    this[3].i32[0] += a2 / a3;
  }
}

uint64_t di_async_sub_transaction_t::enqueue_new_buffer(int64x2_t *this)
{
  uint64_t v2;
  unint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  __int128 v16;
  int64x2_t v17;
  _OWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t *v28;

  v2 = operator new[]();
  std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char *)#1},void>(&v24, v2);
  v3 = this[8].u64[0];
  v4 = (_OWORD *)this[7].i64[1];
  if ((unint64_t)v4 >= v3)
  {
    v5 = this[7].i64[0];
    v6 = ((uint64_t)v4 - v5) >> 4;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v5;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v9 = 0xFFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    v28 = this + 8;
    v10 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)this[8].i64, v9);
    v12 = &v10[16 * v6];
    *(_OWORD *)v12 = v24;
    v24 = 0uLL;
    v14 = (_QWORD *)this[7].i64[0];
    v13 = (_QWORD *)this[7].i64[1];
    if (v13 == v14)
    {
      v17 = vdupq_n_s64((unint64_t)v13);
      v15 = &v10[16 * v6];
    }
    else
    {
      v15 = &v10[16 * v6];
      do
      {
        v16 = *((_OWORD *)v13 - 1);
        v13 -= 2;
        *((_OWORD *)v15 - 1) = v16;
        v15 -= 16;
        *v13 = 0;
        v13[1] = 0;
      }
      while (v13 != v14);
      v17 = this[7];
    }
    v18 = v12 + 16;
    this[7].i64[0] = (uint64_t)v15;
    this[7].i64[1] = (uint64_t)(v12 + 16);
    v26 = v17;
    v19 = this[8].i64[0];
    this[8].i64[0] = (uint64_t)&v10[16 * v11];
    v27 = v19;
    v25 = v17.i64[0];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v25);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    this[7].i64[1] = (uint64_t)v18;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    *v4 = v24;
    this[7].i64[1] = (uint64_t)(v4 + 1);
  }
  return this[7].i64[1] - 16;
}

void sub_212EF42E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *di_async_sub_transaction_t::append_moved_transaction_buffers(uint64_t a1, uint64_t a2)
{
  char *result;

  std::vector<std::shared_ptr<char>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>>((uint64_t *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 4);
  result = std::vector<iovec>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<iovec*>>,std::move_iterator<std::__wrap_iter<iovec*>>>(a1 + 88, *(char **)(a1 + 96), *(__int128 **)(a2 + 88), *(__int128 **)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 4);
  *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  return result;
}

void compact_sub_transactions(uint64_t *a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  int64x2_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  __int128 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *__p[4];
  _OWORD v49[3];
  void **v50;

  v7 = *a1;
  v42 = a1[1];
  if (*a1 == v42)
  {
    *a6 = v7;
    a6[1] = v7;
    a6[2] = a1[2];
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v9 = a4;
  v10 = a2;
  v40 = a4 * a5;
  v39 = a3 - 1;
  do
  {
    v11 = *(_QWORD *)(v7 + 32) * v9;
    v12 = v11 / v10 * v10;
    v13 = a6[1];
    if (*a6 != v13)
    {
      v14 = *(_DWORD *)(v13 - 104) * a4 + *(_QWORD *)(v13 - 120) * v9;
      LODWORD(v15) = v11 - v14;
      v16 = v11 >= v14 && v14 + a3 > v12;
      if (v16
        && (unint64_t)(((uint64_t)(*(_QWORD *)(v13 - 56) - *(_QWORD *)(v13 - 64)) >> 4)
                            + ((uint64_t)(*(_QWORD *)(v7 + 96) - *(_QWORD *)(v7 + 88)) >> 4)
                            + 1) < 0x400)
      {
        goto LABEL_23;
      }
      v17 = (int64x2_t *)(v13 - 152);
      v18 = (v39 + v14) / a3 * a3;
      if (v40 < v18)
        LODWORD(v18) = v40;
      di_async_sub_transaction_t::append_empty_buffer(v17, v18 - v14, a4);
    }
    memset(v49, 0, 40);
    memset(__p, 0, sizeof(__p));
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    std::shared_ptr<DiskImage>::operator=[abi:ne180100]((_QWORD *)&v49[1] + 1, (uint64_t *)(v7 + 136));
    v20 = *(_OWORD *)(v7 + 48);
    v19 = *(_OWORD *)(v7 + 64);
    v21 = *(void **)(v7 + 80);
    v45 = *(_OWORD *)(v7 + 32);
    v46 = v20;
    v22 = *(_OWORD *)(v7 + 16);
    v43 = *(_OWORD *)v7;
    v44 = v22;
    __p[0] = v21;
    v47 = v19;
    LODWORD(v46) = 0;
    *(_QWORD *)&v45 = v12 / v9;
    v23 = a6[1];
    if (v23 >= a6[2])
    {
      v28 = std::vector<di_async_sub_transaction_t>::__push_back_slow_path<di_async_sub_transaction_t>(a6, (uint64_t)&v43);
      v29 = *(std::__shared_weak_count **)&v49[2];
      a6[1] = v28;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    else
    {
      v24 = v44;
      *(_OWORD *)v23 = v43;
      *(_OWORD *)(v23 + 16) = v24;
      v25 = v45;
      v26 = v47;
      v27 = __p[0];
      *(_OWORD *)(v23 + 48) = v46;
      *(_OWORD *)(v23 + 64) = v26;
      *(_OWORD *)(v23 + 32) = v25;
      *(_QWORD *)(v23 + 80) = v27;
      *(_QWORD *)(v23 + 88) = 0;
      *(_QWORD *)(v23 + 96) = 0;
      *(_QWORD *)(v23 + 104) = 0;
      *(_OWORD *)(v23 + 88) = *(_OWORD *)&__p[1];
      __p[1] = 0;
      __p[2] = 0;
      *(void **)(v23 + 104) = __p[3];
      *(_QWORD *)(v23 + 112) = 0;
      __p[3] = 0;
      *(_QWORD *)(v23 + 120) = 0;
      *(_QWORD *)(v23 + 128) = 0;
      *(_OWORD *)(v23 + 112) = v49[0];
      *(_QWORD *)(v23 + 128) = *(_QWORD *)&v49[1];
      memset(v49, 0, 24);
      *(_OWORD *)(v23 + 136) = *(_OWORD *)((char *)&v49[1] + 8);
      *((_QWORD *)&v49[1] + 1) = 0;
      *(_QWORD *)&v49[2] = 0;
      a6[1] = v23 + 152;
    }
    v50 = (void **)v49;
    std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v50);
    if (__p[1])
    {
      __p[2] = __p[1];
      operator delete(__p[1]);
    }
    v15 = v11 % v10;
    v13 = a6[1];
LABEL_23:
    v32 = v13 - 152;
    di_async_sub_transaction_t::append_empty_buffer((int64x2_t *)(v13 - 152), v15, a4);
    di_async_sub_transaction_t::append_moved_transaction_buffers(v32, v7);
    v7 += 152;
  }
  while (v7 != v42);
  v33 = a6[1];
  v34 = (int64x2_t *)(v33 - 152);
  v35 = *(_DWORD *)(v33 - 104) * a4 + *(_QWORD *)(v33 - 120) * v9;
  v36 = (v39 + v35) / a3 * a3;
  if (v40 < v36)
    LODWORD(v36) = v40;
  di_async_sub_transaction_t::append_empty_buffer(v34, v36 - v35, a4);
  v37 = *a6;
  v38 = a6[1];
  while (v37 != v38)
  {
    if (*(_BYTE *)v37 == 2)
      *(_QWORD *)(v37 + 24) = *(_QWORD *)(v37 + 88);
    v37 += 152;
  }
}

void sub_212EF4658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<di_async_sub_transaction_t *>::emplace_back<di_async_sub_transaction_t *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<di_async_sub_transaction_t *>::__add_back_capacity(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  v10 = v7 + v8 + 1;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 9));
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 8;
}

void di_hybrid_subscriber_t::handle_pending_sqes(di_hybrid_subscriber_t *this)
{
  char *v2;
  std::mutex *v3;
  int i;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*((_QWORD *)this + 77))
  {
    v2 = (char *)this + 576;
    v3 = (std::mutex *)((char *)this + 512);
    std::mutex::lock((std::mutex *)this + 8);
    for (i = 0; *((_QWORD *)this + 77); --i)
    {
      PluginRing::try_sub_sqe_allocate((di_hybrid_subscriber_t *)((char *)this + 304));
      if (!v5)
        break;
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 73) + ((*((_QWORD *)this + 76) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*((_QWORD *)this + 76) & 0x1FFLL));
      v7 = *(_OWORD *)(v6 + 32);
      v8 = *(_OWORD *)(v6 + 48);
      v9 = *(_OWORD *)(v6 + 64);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(v6 + 80);
      *(_OWORD *)(v5 + 48) = v8;
      *(_OWORD *)(v5 + 64) = v9;
      *(_OWORD *)(v5 + 32) = v7;
      v10 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)v5 = *(_OWORD *)v6;
      *(_OWORD *)(v5 + 16) = v10;
      *(_DWORD *)(v5 + 8) = *((_DWORD *)this + 92);
      *((int64x2_t *)this + 38) = vaddq_s64(*((int64x2_t *)this + 38), (int64x2_t)xmmword_212FEC790);
      std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2, 1);
    }
    std::mutex::unlock(v3);
    if (i)
      io_rings_enter(*((_QWORD *)this + 44), -i, 0);
  }
}

void sub_212EF4850(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::cancel(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  std::mutex *v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  _OWORD v23[7];
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (unsigned int *)(this + 632);
  v2 = atomic_load((unsigned int *)(this + 632));
  if (v2 != 1)
  {
    v3 = this;
    do
      v4 = __ldaxr(v1);
    while (__stlxr(1u, v1));
    if (v4 == 2)
      gcd::gcd_queue::suspend((dispatch_object_t *)(this + 624));
    gcd::gcd_queue::resume((dispatch_object_t *)(v3 + 624));
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(v3 + 624), &__block_literal_global_3);
    if (io_rings_cancel(*(_QWORD *)(v3 + 352)) < 0)
      goto LABEL_31;
    v5 = (std::mutex *)(v3 + 512);
    std::mutex::lock((std::mutex *)(v3 + 512));
    v6 = *(void ***)(v3 + 584);
    v7 = *(void ***)(v3 + 592);
    if (v7 == v6)
    {
      v11 = (_QWORD *)(v3 + 616);
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 608);
      v9 = &v6[v8 >> 9];
      v10 = (uint64_t *)((char *)*v9 + 8 * (v8 & 0x1FF));
      v11 = (_QWORD *)(v3 + 616);
      v12 = *(uint64_t *)((char *)v6 + (((*(_QWORD *)(v3 + 616) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(_QWORD *)(v3 + 616) + v8) & 0x1FF);
      if (v10 != (uint64_t *)v12)
      {
        do
        {
          v13 = *v10;
          v26 = 0;
          v24 = 0u;
          v25 = 0u;
          memset(v23, 0, sizeof(v23));
          *(_QWORD *)(v13 + 80) = 0;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          *(_OWORD *)(v13 + 16) = 0u;
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)v13 = 0u;
          v14 = *(void **)(v13 + 88);
          if (v14)
          {
            *(_QWORD *)(v13 + 96) = v14;
            operator delete(v14);
            *(_QWORD *)(v13 + 88) = 0;
            *(_QWORD *)(v13 + 96) = 0;
            *(_QWORD *)(v13 + 104) = 0;
          }
          *(_OWORD *)(v13 + 88) = *(_OWORD *)((char *)&v23[5] + 8);
          *(_QWORD *)(v13 + 104) = *((_QWORD *)&v23[6] + 1);
          memset((char *)&v23[5] + 8, 0, 24);
          std::vector<std::shared_ptr<char>>::__vdeallocate((void **)(v13 + 112));
          *(_OWORD *)(v13 + 112) = v24;
          *(_QWORD *)(v13 + 128) = v25;
          v24 = 0uLL;
          *(_QWORD *)&v25 = 0;
          std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v13 + 136, (__int128 *)((char *)&v25 + 8));
          v15 = v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          *(_QWORD *)&v21 = &v24;
          std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
          if (*((_QWORD *)&v23[5] + 1))
          {
            *(_QWORD *)&v23[6] = *((_QWORD *)&v23[5] + 1);
            operator delete(*((void **)&v23[5] + 1));
          }
          if ((char *)++v10 - (_BYTE *)*v9 == 4096)
          {
            v18 = (uint64_t *)v9[1];
            ++v9;
            v10 = v18;
          }
        }
        while (v10 != (uint64_t *)v12);
        v6 = *(void ***)(v3 + 584);
        v7 = *(void ***)(v3 + 592);
        v5 = (std::mutex *)(v3 + 512);
        v11 = (_QWORD *)(v3 + 616);
      }
    }
    *v11 = 0;
    v19 = (char *)v7 - (char *)v6;
    if (v19 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        v6 = (void **)(*(_QWORD *)(v3 + 584) + 8);
        *(_QWORD *)(v3 + 584) = v6;
        v19 = *(_QWORD *)(v3 + 592) - (_QWORD)v6;
      }
      while (v19 > 0x10);
    }
    if (v19 >> 3 == 1)
    {
      v20 = 256;
    }
    else
    {
      if (v19 >> 3 != 2)
      {
LABEL_30:
        std::mutex::unlock(v5);
LABEL_31:
        *(_QWORD *)&v21 = "di_hybrid_subscriber_t::cancel()";
        *((_QWORD *)&v21 + 1) = 30;
        v22 = 0;
        di_log::logger<di_log::log_printer<486ul>>::logger(v23, &v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Plugin's async ring cancelled, ret code ", 40);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf((uint64_t)v23);
        return MEMORY[0x2199A89AC](&v28);
      }
      v20 = 512;
    }
    *(_QWORD *)(v3 + 608) = v20;
    goto LABEL_30;
  }
  return this;
}

void sub_212EF4B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  di_log::logger<di_log::log_printer<486ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<486ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<486ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF0150;
  a1[45] = &unk_24CEF0250;
  a1[46] = &unk_24CEF0278;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF0150;
  a1[45] = &unk_24CEF01D8;
  a1[46] = &unk_24CEF0200;
  return a1;
}

void sub_212EF4C08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void di_hybrid_subscriber_t::cqe_callback(dispatch_queue_t *this)
{
  PluginRing *v2;
  char v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  dispatch_queue_t *v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  _BYTE v25[7];
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  char v29;
  _BYTE v30[7];

  v2 = (PluginRing *)(this + 38);
  PluginRing::get_next_cqe((PluginRing *)(this + 38), (uint64_t)&v28);
  v3 = v29;
  if (v29)
  {
    v4 = v28;
    v5 = MEMORY[0x24BDAC760];
    do
    {
      v7 = *(_QWORD *)(v4 + 136);
      v6 = *(std::__shared_weak_count **)(v4 + 144);
      *(_QWORD *)&v28 = v7;
      *((_QWORD *)&v28 + 1) = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v18[0] = v5;
      v18[1] = 1174405120;
      v19 = ___ZN22di_hybrid_subscriber_t12cqe_callbackEv_block_invoke;
      v20 = &__block_descriptor_tmp_12;
      v21 = this;
      v22 = v4;
      v23 = v4;
      v24 = v3;
      *(_DWORD *)v25 = *(_DWORD *)v30;
      *(_DWORD *)&v25[3] = *(_DWORD *)&v30[3];
      v26 = v7;
      v27 = v6;
      if (v6)
      {
        v10 = (unint64_t *)&v6->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      if (this[35])
        gcd::gcd_queue::async(this + 63, v18);
      else
        v19((uint64_t)v18);
      v12 = v27;
      if (v27)
      {
        v13 = (unint64_t *)&v27->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      PluginRing::get_next_cqe(v2, (uint64_t)&v28);
      v4 = v28;
      v3 = v29;
    }
    while (v29);
  }
  if (!this[35])
    di_hybrid_subscriber_t::handle_pending_sqes((di_hybrid_subscriber_t *)this);
}

void sub_212EF4E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN22di_hybrid_subscriber_t12cqe_callbackEv_block_invoke(uint64_t a1)
{
  di_hybrid_subscriber_t *v2;
  unsigned int v3;
  unsigned int *v4;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  void **v14;

  v2 = *(di_hybrid_subscriber_t **)(a1 + 32);
  v3 = di_hybrid_subscriber_t::handle_sub_cqe(v2, *(di_async_sub_transaction_t **)(a1 + 40), *(_DWORD *)(a1 + 56));
  if (v3)
  {
    v4 = (unsigned int *)(*(_QWORD *)(a1 + 72) + 16);
    while (!__ldaxr(v4))
    {
      if (!__stlxr(v3, v4))
        goto LABEL_7;
    }
    __clrex();
  }
LABEL_7:
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v7 = *(void **)(v6 + 88);
  if (v7)
  {
    *(_QWORD *)(v6 + 96) = v7;
    operator delete(v7);
  }
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  std::vector<std::shared_ptr<char>>::__vdeallocate((void **)(v6 + 112));
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  v11 = 0uLL;
  *(_QWORD *)&v12 = 0;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v6 + 136, (__int128 *)((char *)&v12 + 8));
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v14 = (void **)&v11;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (*((_QWORD *)v2 + 35))
    di_hybrid_subscriber_t::handle_pending_sqes(v2);
}

uint64_t di_hybrid_subscriber_t::handle_sub_cqe(di_hybrid_subscriber_t *this, di_async_sub_transaction_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *dummy_shared_ptr;
  const char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  DiskImage::Context *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  void *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t *v73;
  void *__p;
  __int128 v75;
  _BYTE v76[120];
  void *v77;
  __int128 v78;
  _BYTE v79[40];
  _BYTE v80[72];
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned int *)a2 + 12);
  if (a3 == v3)
  {
    v4 = *((_QWORD *)this + 35);
    if (v4)
    {
      v6 = *((_QWORD *)a2 + 4);
      v7 = *((_QWORD *)this + 37);
      dummy_shared_ptr = details::get_dummy_shared_ptr();
      v10 = dummy_shared_ptr;
      v12 = (char *)*((_QWORD *)a2 + 11);
      v11 = (char *)*((_QWORD *)a2 + 12);
      v13 = v76;
      __p = v76;
      v14 = xmmword_212FEB330;
      v75 = xmmword_212FEB330;
      v15 = (unint64_t)(v11 - v12 - 16) >> 4;
      if (v11 == v12)
        v16 = 0;
      else
        v16 = v15 + 1;
      if (v16 < 6)
      {
        if (v12 == v11)
        {
          v16 = 0;
        }
        else
        {
          v27 = v15 + 1;
          do
          {
            v28 = *(_QWORD *)v12;
            v29 = dummy_shared_ptr[1];
            if (v29)
            {
              v30 = (unint64_t *)(v29 + 8);
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }
            v32 = *((_QWORD *)v12 + 1);
            *v13 = v28;
            v13[1] = v29;
            v13[2] = v32;
            v12 += 16;
            v13 += 3;
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        if (v16 >= 0x555555555555556)
          boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v9);
        v17 = operator new(24 * v16);
        if (__p)
        {
          v65 = v7;
          v18 = v75;
          if ((_QWORD)v75)
          {
            v19 = __p;
            do
            {
              --v18;
              v19 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v19) + 24);
            }
            while (v18);
          }
          *(_QWORD *)&v75 = 0;
          v7 = v65;
          if (v76 != __p)
            operator delete(__p);
        }
        *(_QWORD *)&v75 = 0;
        *((_QWORD *)&v75 + 1) = v16;
        __p = v17;
        if (v12 == v11)
        {
          v26 = 0;
          v20 = (char *)v17;
          v14 = xmmword_212FEB330;
        }
        else
        {
          v20 = (char *)v17;
          v14 = xmmword_212FEB330;
          do
          {
            v21 = *(_QWORD *)v12;
            v22 = v10[1];
            if (v22)
            {
              v23 = (unint64_t *)(v22 + 8);
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
            v25 = *((_QWORD *)v12 + 1);
            *(_QWORD *)v20 = v21;
            *((_QWORD *)v20 + 1) = v22;
            *((_QWORD *)v20 + 2) = v25;
            v12 += 16;
            v20 += 24;
          }
          while (v12 != v11);
          v26 = v75;
        }
        v16 = v26 - 0x5555555555555555 * ((v20 - (_BYTE *)v17) >> 3);
      }
      *(_QWORD *)&v75 = v16;
      v77 = v79;
      v78 = v14;
      boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v77, v16);
      v69 = __p;
      v66 = (uint64_t)__p + 24 * v16;
      v73 = (unint64_t *)v77;
      v72 = (unint64_t *)((char *)v77 + 8 * v78);
      sg_vec_ref::sg_vec_ref((uint64_t)v80, (uint64_t *)&v69, &v66, &v73, &v72, v7 * v6, v7 * v3);
      v33 = (DiskImage::Context *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
      sg_vec_ref::begin((sg_vec_ref *)v80, (uint64_t)&v69);
      sg_vec_ref::end((sg_vec_ref *)v80, (uint64_t)&v66);
      v4 = DiskImage::Context::write(v33, (const sg_vec_ns::details::sg_vec_iterator *)&v69, (const sg_vec_ns::details::sg_vec_iterator *)&v66);
      v34 = v68;
      if (v68)
      {
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v67;
      if (v67)
      {
        v38 = (unint64_t *)&v67->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v71;
      if (v71)
      {
        v41 = (unint64_t *)&v71->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v70;
      if (v70)
      {
        v44 = (unint64_t *)&v70->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v33)
        (*(void (**)(DiskImage::Context *))(*(_QWORD *)v33 + 40))(v33);
      v46 = v86;
      if (v86)
      {
        v47 = (unint64_t *)&v86->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = v85;
      if (v85)
      {
        v50 = (unint64_t *)&v85->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v84;
      if (v84)
      {
        v53 = (unint64_t *)&v84->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = v83;
      if (v83)
      {
        v56 = (unint64_t *)&v83->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = v82;
      if (v82)
      {
        v59 = (unint64_t *)&v82->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v81;
      if (v81)
      {
        v62 = (unint64_t *)&v81->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (*((_QWORD *)&v78 + 1) && v79 != v77)
        operator delete(v77);
      if (v4 < 0)
        v4 = v4;
      else
        v4 = 0;
      boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&__p);
    }
  }
  else if (a3 < 0)
  {
    return a3;
  }
  else
  {
    return 4294967291;
  }
  return v4;
}

void sub_212EF54F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  uint64_t v58;
  _Unwind_Exception *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;

  if (a29)
    di_hybrid_subscriber_t::handle_sub_cqe((std::__shared_weak_count *)a29);
  di_hybrid_subscriber_t::handle_sub_cqe((uint64_t)&a14, a1, a2, (uint64_t)&a55);
  v61 = (_Unwind_Exception *)a55;
  v62 = (std::__shared_weak_count *)a49;
  if (a49)
  {
    v63 = (unint64_t *)(a49 + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)a35;
  if (a35)
  {
    v66 = (unint64_t *)(a35 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
  v68 = (std::__shared_weak_count *)STACK[0x438];
  if (STACK[0x438])
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)STACK[0x398];
  if (STACK[0x398])
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)STACK[0x328];
  if (STACK[0x328])
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)STACK[0x298];
  if (STACK[0x298])
  {
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (STACK[0x220])
  {
    if (v58 != STACK[0x210])
      operator delete((void *)STACK[0x210]);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a57);
  _Unwind_Resume(v61);
}

uint64_t __copy_helper_block_e8_72c47_ZTSNSt3__110shared_ptrI19di_hybrid_context_tEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_72c47_ZTSNSt3__110shared_ptrI19di_hybrid_context_tEE(uint64_t a1)
{
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 72);
}

uint64_t di_plugin_cq_event_callback(uint64_t a1)
{
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  io_rings_cq_get_overruns(a1);
  *(_QWORD *)&v3 = "di_plugin_cq_event_callback(io_uhandle_t, void *, enum io_rings_event_type_t, struct io_rings_event_type_data_t *)";
  *((_QWORD *)&v3 + 1) = 27;
  v4 = 16;
  di_log::logger<di_log::log_printer<57ul>>::logger(v5, &v3);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)" overrun events occurred in the plugin's ring!", 46);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x2199A89AC](&v7);
  return io_rings_cq_clear_overruns(a1);
}

void sub_212EF5828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<57ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<57ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<57ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEEFA90;
  a1[45] = &unk_24CEEFB90;
  a1[46] = &unk_24CEEFBB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEEFA90;
  a1[45] = &unk_24CEEFB18;
  a1[46] = &unk_24CEEFB40;
  return a1;
}

void sub_212EF58C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEFC28;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EF598C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEFC28;
  di_log::logger_buf<di_log::log_printer<57ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<57ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<57ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EF5D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<57ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 57;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 57;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_1::__invoke(uint64_t a1, unsigned __int8 *a2)
{
  di_hybrid_subscriber_t::add_sqe(a1, a2);
  return 0;
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_2::__invoke()
{
  return 1;
}

void pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(uint64_t a1)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t v5;

  v2 = (_QWORD *)(a1 + 64);
  while (*(_QWORD *)(a1 + 104))
  {
    v3 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + ((*(_QWORD *)(a1 + 96) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * (*(_QWORD *)(a1 + 96) & 0x1FFLL));
    if (atomic_load(v3))
    {
      v5 = atomic_load(v3);
      if (v5)
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    *(int64x2_t *)(a1 + 96) = vaddq_s64(*(int64x2_t *)(a1 + 96), (int64x2_t)xmmword_212FEC790);
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2, 1);
  }
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v2);
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<250ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEEFE48;
  di_log::logger_buf<di_log::log_printer<250ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<250ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EF6658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<250ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 250;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 250;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<259ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF0068;
  di_log::logger_buf<di_log::log_printer<259ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<259ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EF6C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<259ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 259;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 259;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char *)#1},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CEF00E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212EF6ECC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_212EF6EF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x2199A8A00);
  return result;
}

uint64_t std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN26di_async_sub_transaction_t15allocate_bufferEmEUlPT_E_))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::vector<std::shared_ptr<char>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD v29[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v29[4] = v9;
    if (v17)
      v18 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v9, v17);
    else
      v18 = 0;
    v25 = &v18[16 * v15];
    v29[0] = v18;
    v29[1] = v25;
    v29[3] = &v18[16 * v17];
    v26 = 16 * a5;
    v27 = &v25[16 * a5];
    do
    {
      *(_OWORD *)v25 = *(_OWORD *)a3;
      v25 += 16;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      a3 += 16;
      v26 -= 16;
    }
    while (v26);
    v29[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(a1, v29, v5);
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)v29);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = a3 + 16 * a5;
LABEL_18:
    std::vector<std::shared_ptr<char>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v24 = (uint64_t)v5;
      do
      {
        std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v24, (__int128 *)a3);
        a3 += 16;
        v24 += 16;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = a3 + 16 * v19;
  v21 = *(_QWORD *)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_OWORD **)(v9 - 8);
    do
    {
      *v23++ = *(_OWORD *)v22;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v22 += 16;
      v21 += 16;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_212EF7124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<char>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

char *std::vector<iovec>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<iovec*>>,std::move_iterator<std::__wrap_iter<iovec*>>>(uint64_t a1, char *__src, __int128 *a3, __int128 *a4, uint64_t a5)
{
  char *v5;
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  char *v21;
  __int128 *v22;
  _OWORD *v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *__p;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v5 = __src;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *(_BYTE **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 >> 60)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v15 = (__src - v13) >> 4;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v40 = v9;
    if (v17)
      v18 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v9, v17);
    else
      v18 = 0;
    v31 = &v18[16 * v15];
    __p = v18;
    v37 = v31;
    v39 = &v18[16 * v17];
    v32 = 16 * a5;
    v33 = &v31[16 * a5];
    do
    {
      v34 = *v7++;
      *(_OWORD *)v31 = v34;
      v31 += 16;
      v32 -= 16;
    }
    while (v32);
    v38 = v33;
    v5 = (char *)std::vector<iovec>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37)
      v38 += (v37 - v38 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)__src) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
    v21 = *(char **)(v9 - 8);
LABEL_18:
    v25 = &__src[16 * a5];
    v26 = &v21[-16 * a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *(_OWORD *)v26;
        v26 += 16;
        *(_OWORD *)v27 = v28;
        v27 += 16;
      }
      while ((unint64_t)v26 < v12);
    }
    *(_QWORD *)(a1 + 8) = v27;
    if (v21 != v25)
      memmove(&v21[-16 * ((v21 - v25) >> 4)], __src, v21 - v25);
    if (v20 != v7)
    {
      v29 = v5;
      do
      {
        v30 = *v7++;
        *(_OWORD *)v29 = v30;
        v29 += 16;
      }
      while (v7 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_OWORD **)(v9 - 8);
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      v21 += 16;
    }
    while (v22 != a4);
  }
  *(_QWORD *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (_QWORD)__src) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_212EF7430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<iovec>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::vector<di_async_sub_transaction_t>::__push_back_slow_path<di_async_sub_transaction_t>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[5];

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xD79435E50D7943)
    v9 = 0x1AF286BCA1AF286;
  else
    v9 = v5;
  v19[4] = a1 + 2;
  v10 = (char *)std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](v7, v9);
  v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v11 + 13) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *((_QWORD *)v11 + 15) = 0;
  *((_QWORD *)v11 + 16) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_QWORD *)v11 + 16) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v19[2] = v11 + 152;
  std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_212EF7694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<di_async_sub_transaction_t>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 152;
        std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::shared_ptr<char>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<486ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF02E8;
  di_log::logger_buf<di_log::log_printer<486ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<486ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EF7B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<486ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 486;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 486;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t DiskImage::Context::write(DiskImage::Context *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) == 0)
    return (*(uint64_t (**)(DiskImage::Context *, const sg_vec_ns::details::sg_vec_iterator *, const sg_vec_ns::details::sg_vec_iterator *))(*(_QWORD *)this + 8))(this, a2, a3);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v4 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((_QWORD *)&v4 + 1) = 25;
    v5 = 2;
    di_log::logger<di_log::log_printer<166ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Disk image is terminated, skipping write", 40);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x2199A89AC](&v8);
  }
  return -6;
}

void sub_212EF7E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<166ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<166ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<166ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF0370;
  a1[45] = &unk_24CEF0470;
  a1[46] = &unk_24CEF0498;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF0370;
  a1[45] = &unk_24CEF03F8;
  a1[46] = &unk_24CEF0420;
  return a1;
}

void sub_212EF7F0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF0508;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EF7FD8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF0508;
  di_log::logger_buf<di_log::log_printer<166ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<166ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<166ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212EF83CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<166ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 166;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 166;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEEFE48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EF8640(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CEF0588;
  return result;
}

void std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CEF0588;
}

uint64_t std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 32))();
}

uint64_t std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::target_type()
{
}

void std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CEF0618;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CEF0618;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  DiskImageStackable *di;
  uint64_t result;
  uint64_t v5;

  di = (DiskImageStackable *)io_rings_di_subscriber_t::get_di(*(io_rings_di_subscriber_t **)(a1 + 8));
  result = DiskImageStackable::create_async_ctx(di, &v5);
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target_type()
{
}

uint64_t DiskImageStackable::create_async_ctx@<X0>(DiskImageStackable *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = DiskImageStackable::ContextStackable::ContextStackable(v4, (uint64_t)this, 1);
  *a2 = v4;
  return result;
}

void sub_212EF885C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10A1C40D4D23789);
  _Unwind_Resume(a1);
}

uint64_t DiskImageStackable::ContextStackable::ContextStackable(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t bottom_async_cache;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30[2];
  _QWORD *v31;

  *(_QWORD *)a1 = off_24CEF0698;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a3 == 1)
  {
    bottom_async_cache = DiskImageStackable::ContextStackable::get_bottom_async_cache(a1, a2);
    v8 = 0;
    *(_QWORD *)(a1 + 40) = bottom_async_cache;
    *(_QWORD *)(a1 + 48) = v9;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) - 24) + 96))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 24));
  }
  *(_BYTE *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 16);
  for (i = *(_QWORD *)(a2 + 24); v10 != i; v10 += 48)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4) == (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4)
    {
      v13 = *(_QWORD *)(v10 + 24);
      v12 = *(std::__shared_weak_count **)(v10 + 32);
      v30[0] = v13;
      v30[1] = (uint64_t)v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = (_QWORD *)operator new();
      *v16 = off_24CEF0750;
      v16[1] = v13;
      v16[3] = 0;
      v16[4] = 0;
      v16[2] = 0;
      v31 = v16;
      v17 = *(_QWORD **)(a1 + 24);
      if ((unint64_t)v17 >= *(_QWORD *)(a1 + 32))
      {
        v25 = std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImagePlugin::ContextPluginAsync>>(v6, (uint64_t *)&v31);
        v26 = (uint64_t)v31;
        *(_QWORD *)(a1 + 24) = v25;
        v31 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
      }
      else
      {
        *v17 = v16;
        v18 = (_QWORD *)operator new();
        v19 = (uint64_t)v31;
        *v18 = &off_24CEF06F0;
        v18[1] = 0;
        v18[2] = 0;
        v18[3] = v19;
        v17[1] = v18;
        *(_QWORD *)(a1 + 24) = v17 + 2;
        v31 = 0;
      }
      if (v12)
      {
        v27 = (unint64_t *)&v12->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      v20 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 136))(*(_QWORD *)(v10 + 8));
      v30[0] = (uint64_t)v20;
      v21 = *(_QWORD **)(a1 + 24);
      if ((unint64_t)v21 >= *(_QWORD *)(a1 + 32))
      {
        v23 = std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImage::Context>>(v6, v30);
        v24 = v30[0];
        *(_QWORD *)(a1 + 24) = v23;
        v30[0] = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      }
      else
      {
        *v21 = v20;
        if (v20)
        {
          v20 = (_QWORD *)operator new();
          v22 = v30[0];
          *v20 = &off_24CEF07A8;
          v20[1] = 0;
          v20[2] = 0;
          v20[3] = v22;
        }
        v21[1] = v20;
        *(_QWORD *)(a1 + 24) = v21 + 2;
      }
    }
  }
  return a1;
}

void sub_212EF8B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void DiskImageStackable::ContextStackable::~ContextStackable(DiskImageStackable::ContextStackable *this)
{
  void **v1;

  *(_QWORD *)this = off_24CEF0698;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24CEF0698;
  v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2199A8A18](this, 0x10A1C40D4D23789);
}

uint64_t std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImagePlugin::ContextPluginAsync>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImagePlugin::ContextPluginAsync,std::default_delete<DiskImagePlugin::ContextPluginAsync>,void>((uint64_t *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_212EF8D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImagePlugin::ContextPluginAsync,std::default_delete<DiskImagePlugin::ContextPluginAsync>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_24CEF06F0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unint64_t DiskImagePlugin::ContextPluginAsync::_read(DiskImagePlugin **this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  return DiskImagePlugin::read_async(this[1], (DiskImagePlugin::ContextPluginAsync *)this, a2, a3);
}

void DiskImagePlugin::ContextPluginAsync::~ContextPluginAsync(DiskImagePlugin::ContextPluginAsync *this)
{
  void **v1;

  *(_QWORD *)this = off_24CEF0750;
  v1 = (void **)((char *)this + 16);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24CEF0750;
  v2 = (void **)((char *)this + 16);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2199A8A18](this, 0xA1C40987D6AD5);
}

uint64_t std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImage::Context>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImage::Context,std::default_delete<DiskImage::Context>,void>((uint64_t *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_212EF8FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<DiskImage::Context>::shared_ptr[abi:ne180100]<DiskImage::Context,std::default_delete<DiskImage::Context>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_24CEF07A8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<DiskImage::Context  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<DiskImage::Context  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImage::Context  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == -2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  }
  else if (v2 == -1)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v3 = *(std::mutex **)a1;
      std::mutex::lock(*(std::mutex **)a1);
      std::deque<std::atomic<DiskImage::Context *>>::emplace_back<DiskImage::Context *&>((_QWORD *)(*(_QWORD *)a1 + 64), (_QWORD *)(a1 + 8));
      std::mutex::unlock(v3);
    }
  }
  else if ((v2 & 0x8000000000000000) == 0)
  {
    atomic_store(*(_QWORD *)(a1 + 8), (unint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72)+ (((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 96) + v2) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*(_QWORD *)(*(_QWORD *)a1 + 96) + v2) & 0x1FF)));
  }
  return a1;
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::emplace_back<DiskImage::Context *&>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<std::atomic<DiskImage::Context *>>::__add_back_capacity(a1);
    v7 = a1[4];
    v8 = a1[5];
    v5 = a1[1];
    v9 = v7 + v8;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  v10 = v8 + 1;
  a1[5] = v10;
  v11 = v7 + v10;
  v12 = (_QWORD *)(v5 + 8 * (v11 >> 9));
  v13 = v11 & 0x1FF;
  if (v13)
    v14 = *v12 + 8 * v13;
  else
    v14 = *(v12 - 1) + 4096;
  return v14 - 8;
}

void std::deque<std::atomic<DiskImage::Context *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_212EF9524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF0068;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EF9A34(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  void **v4;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = atomic_load((unsigned int *)(v1 + 16));
  if (!v2)
    v2 = *(_DWORD *)(v1 + 20);
  io_rings_return_status(*(_QWORD *)(*(_QWORD *)v1 + 56), *(_QWORD *)(v1 + 8), v2, 0);
  v4 = (void **)(v1 + 24);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x2199A8A18](v1, 0x1060C40352A0DA6);
}

uint64_t std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::deque<di_async_sub_transaction_t *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_212EF9DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF02E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212EF9E9C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_212EFABB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFAC2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFACE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFAD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EFAF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_212EFB184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EFB228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFB414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFB524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFB6AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v17;
  void *v18;
  void *v19;

  v14 = v13;

  if (a11)
    MEMORY[0x2199A8A00](a11, 0x1000C8077774924);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (void *)MEMORY[0x24BDD17C8];
    (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    objc_msgSend(v18, "stringWithFormat:", CFSTR("Invalid public key: %s"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithPOSIXCode:verboseInfo:error:](DIError, "failWithPOSIXCode:verboseInfo:error:", 22, v19, v12);

    __cxa_end_catch();
    JUMPOUT(0x212EFB5E4);
  }

  _Unwind_Resume(a1);
}

void sub_212EFB948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFBC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_212EFBDE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EFBEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_212EFC278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 16))(a12);
  _Unwind_Resume(exception_object);
}

void sub_212EFC674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFC934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFCB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212EFCC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_212EFCD84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EFCEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    MEMORY[0x2199A8A18](a10, 0x1000C404247E4FDLL);

  _Unwind_Resume(a1);
}

_DWORD *crypto::header::encryption_key_bits_size_t::encryption_key_bits_size_t(_DWORD *this, int a2)
{
  _QWORD *exception;

  *this = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    *exception = &off_24CEEDAA0;
    exception[1] = "encryption_key_bits_size_t";
    *((_DWORD *)exception + 8) = a2;
  }
  return this;
}

void sub_212EFD508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Backend::read(Backend *this, char *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v8 = (std::__shared_weak_count *)*((_QWORD *)details::get_dummy_shared_ptr() + 1);
  v16 = a2;
  v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v18 = a3;
  v19 = a4;
  v20 = a3;
  v21 = 0;
  v11 = (*(uint64_t (**)(Backend *, char **))(*(_QWORD *)this + 104))(this, &v16);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_212EFD610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_212EFD758(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A00](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_212EFD958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<crypto::public_key_header>::operator=[abi:ne180100]<crypto::public_key_header,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  if (*(_BYTE *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    v5 = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(_BYTE *)(a1 + 564) = 1;
  }
  return a1;
}

void sub_212EFDFD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFE0D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_212EFE23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFE358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_212EFE4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  uint64_t v11;

  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a9);
  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

const void **CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_212EFE64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_212EFE80C(_Unwind_Exception *a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v8;

  v8 = v6;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:](DIError, "failWithDIException:prefix:error:", __cxa_begin_catch(a1), CFSTR("Failed to create disk image with shadow/cache"), v4);
    __cxa_end_catch();
    JUMPOUT(0x212EFE7C4);
  }

  _Unwind_Resume(a1);
}

void diskimage_uio::resolve_stack_nodes_from_path(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int64x2_t v18;
  char *v19;
  int64x2_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  std::string v24;
  char *v25;
  char **v26;

  create_stack_vector_from_single_path((const std::__fs::filesystem::path *)a1, *(_BYTE *)(a1 + 24), (uint64_t)&v20);
  v5 = (_QWORD *)v20.i64[1];
  v4 = v20.i64[0];
  if (v20.i64[0] == v20.i64[1])
  {
    v6 = *(_BYTE *)(a1 + 24) == 0;
    v7 = operator new();
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v24 = *(std::string *)a1;
    v22 = 0uLL;
    v23 = 0;
    diskimage_uio::stack_image_node::stack_image_node(v7, 0, v6, (__int128 *)&v24, &v22, 0);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    v8 = v20.i64[1];
    if (v20.i64[1] >= (unint64_t)v21)
    {
      v9 = (v20.i64[1] - v20.i64[0]) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      v10 = (uint64_t)&v21[-v20.i64[0]] >> 2;
      if (v10 <= v9 + 1)
        v10 = v9 + 1;
      if ((unint64_t)&v21[-v20.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v26 = &v21;
      if (v11)
        v12 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)&v21, v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v9];
      v14 = &v12[8 * v11];
      v25 = v14;
      *v13 = v7;
      v5 = v13 + 1;
      v24.__r_.__value_.__r.__words[2] = (std::string::size_type)(v13 + 1);
      v15 = (_QWORD *)v20.i64[1];
      v16 = (_QWORD *)v20.i64[0];
      if (v20.i64[1] == v20.i64[0])
      {
        v18 = vdupq_n_s64(v20.u64[1]);
      }
      else
      {
        do
        {
          v17 = *--v15;
          *v15 = 0;
          *--v13 = v17;
        }
        while (v15 != v16);
        v18 = v20;
        v5 = (_QWORD *)v24.__r_.__value_.__r.__words[2];
        v14 = v25;
      }
      v20.i64[0] = (uint64_t)v13;
      v20.i64[1] = (uint64_t)v5;
      *(int64x2_t *)&v24.__r_.__value_.__r.__words[1] = v18;
      v19 = v21;
      v21 = v14;
      v25 = v19;
      v24.__r_.__value_.__r.__words[0] = v18.i64[0];
      std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer((uint64_t)&v24);
      v20.i64[1] = (uint64_t)v5;
    }
    else
    {
      *(_QWORD *)v20.i64[1] = v7;
      v5 = (_QWORD *)(v8 + 8);
      v20.i64[1] = (uint64_t)v5;
    }
    v4 = v20.i64[0];
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v21;
  v21 = 0;
  v20 = 0uLL;
  *(_BYTE *)(a2 + 24) = 1;
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_212EFEAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, __int16 *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  int v29;
  const std::error_category *v30;

  MEMORY[0x2199A8A18](v26, 0x1072C40D6CB2E0FLL);
  a17 = &a12;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a2 == 1)
  {
    v29 = *((_DWORD *)__cxa_begin_catch(a1) + 2);
    v30 = std::generic_category();
    *(_DWORD *)v25 = v29;
    *(_QWORD *)(v25 + 8) = v30;
    *(_BYTE *)(v25 + 24) = 0;
    __cxa_end_catch();
    JUMPOUT(0x212EFEAC0);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_impl::diskimage_impl(uint64_t a1, const std::error_category **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  _OWORD *exception;
  __int128 v13;
  int v14;
  _QWORD v15[45];
  _QWORD v16[20];
  _BYTE v17[24];

  *(_QWORD *)a1 = &off_24CEF0938;
  *(_QWORD *)(a1 + 8) = 0;
  diskimage_uio::details::diskimage_open_params_impl::query_image_format(*a2, (uint64_t)v17);
  if (!v17[16])
  {
    *(_QWORD *)&v13 = "diskimage_uio::details::diskimage_impl::diskimage_impl(diskimage_open_params &&)";
    *((_QWORD *)&v13 + 1) = 54;
    v14 = 16;
    di_log::logger<di_log::log_printer<1109ul>>::logger(v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Diskimageuio: Can't get image format", 36);
    di_log::logger<di_log::log_printer<1109ul>>::~logger((uint64_t)v15);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v17);
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership((diskimage_uio::details::diskimage_open_params_impl *)*a2, v15);
  v4 = v15[0];
  v15[0] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v6 = v15[0];
    v15[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 72))(v15);
  if (v15[0] || v15[1] || v15[2] || v15[3])
  {
    v7 = *(const void **)(a1 + 8);
    if (!v7
    {
      *(_QWORD *)&v13 = "diskimage_uio::details::diskimage_impl::diskimage_impl(diskimage_open_params &&)";
      *((_QWORD *)&v13 + 1) = 54;
      v14 = 16;
      di_log::logger<di_log::log_printer<1122ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
      di_log::logger<di_log::log_printer<1122ul>>::~logger((uint64_t)v15);
      v10 = __cxa_allocate_exception(0x10uLL);
      *v10 = make_error_code(164);
      v10[1] = v11;
    }
  }
  return a1;
}

void sub_212EFEDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v14;
  uint64_t v16;

  __cxa_free_exception(v14);
  v16 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::diskimage_open_params::query_image_format@<X0>(const std::error_category **this@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::query_image_format(*this, a2);
}

_QWORD *di_log::logger<di_log::log_printer<1109ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1109ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF0A40;
  a1[45] = &unk_24CEF0B40;
  a1[46] = &unk_24CEF0B68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF0A40;
  a1[45] = &unk_24CEF0AC8;
  a1[46] = &unk_24CEF0AF0;
  return a1;
}

void sub_212EFEEA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t diskimage_uio::diskimage_open_params::get_internal(diskimage_uio::diskimage_open_params *this)
{
  return *(_QWORD *)this;
}

void diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(diskimage_uio::details::diskimage_open_params_impl *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *exception;
  uint64_t v18[2];
  char v19;
  void *__p[2];
  char v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(v18, this);
  if (!v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v18);
  }
  bzero(__p, 0x270uLL);
  diskimage_uio::details::diskimage_open_params_impl::operator=((uint64_t)this, (__int128 *)__p);
  v4 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v26;
  if (v26)
  {
    v8 = (unint64_t *)&v26->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v25;
  if (v25)
  {
    v11 = (unint64_t *)&v25->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v24);
  v13 = v23;
  v23 = 0;
  if (v13)
    MEMORY[0x2199A8A18](v13, 0x1000C4015A9971DLL);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  *a2 = v18[0];
}

void sub_212EFF0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11)
  {
    if (a9)
      (*(void (**)(uint64_t))(*(_QWORD *)a9 + 16))(a9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<1122ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1122ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF0CC0;
  a1[45] = &unk_24CEF0DC0;
  a1[46] = &unk_24CEF0DE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF0CC0;
  a1[45] = &unk_24CEF0D48;
  a1[46] = &unk_24CEF0D70;
  return a1;
}

void sub_212EFF1C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t make_error_code(uint64_t result)
{
  unsigned __int8 v1;
  int v2;
  int v3;

  if ((v1 & 1) == 0)
  {
    v3 = result;
    LODWORD(result) = v3;
    if (v2)
    {
      LODWORD(result) = v3;
    }
  }
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(diskimage_uio::details::diskimage_open_params_impl *this)
{
  uint64_t v1;
  diskimage_uio::details::diskimage_open_params_impl *v3;
  diskimage_uio::details::diskimage_open_params_impl **v4;

  v3 = this;
  v1 = *((unsigned int *)this + 138);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(diskimage_uio::details::diskimage_open_params_impl ***, char *))off_24CEF0EC8[v1])(&v4, (char *)this + 48);
}

_QWORD *diskimage_uio::const_extents_iterator::const_extents_iterator(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

diskimage_uio::const_extents_iterator *diskimage_uio::const_extents_iterator::const_extents_iterator(diskimage_uio::const_extents_iterator *this, const diskimage_uio::details::extents_iterator_impl **a2)
{
  diskimage_uio::details::extents_iterator_impl *v4;

  v4 = (diskimage_uio::details::extents_iterator_impl *)operator new();
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(v4, *a2);
  *(_QWORD *)this = v4;
  return this;
}

void sub_212EFF35C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x1020C40FA731AC5);
  _Unwind_Resume(a1);
}

diskimage_uio::details::extents_iterator_impl **diskimage_uio::const_extents_iterator::operator=(diskimage_uio::details::extents_iterator_impl **a1, const diskimage_uio::details::extents_iterator_impl **a2)
{
  diskimage_uio::details::extents_iterator_impl *v4;

  v4 = (diskimage_uio::details::extents_iterator_impl *)operator new();
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(v4, *a2);
  *a1 = v4;
  return a1;
}

void sub_212EFF3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x1020C40FA731AC5);
  _Unwind_Resume(a1);
}

_QWORD *diskimage_uio::const_extents_iterator::const_extents_iterator(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t ***diskimage_uio::const_extents_iterator::operator=(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t **v4;

  v4 = *a1;
  if (*a1)
  {
    std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](*a1, 0);
    MEMORY[0x2199A8A18](v4, 0x1020C40FA731AC5);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

BOOL diskimage_uio::const_extents_iterator::operator==(uint64_t **a1, uint64_t **a2)
{
  return DiskImage::const_extents_iterator_t::operator==(**a1, **a2);
}

BOOL diskimage_uio::const_extents_iterator::operator!=(uint64_t **a1, uint64_t **a2)
{
  return DiskImage::const_extents_iterator_t::operator!=(**a1, **a2);
}

uint64_t diskimage_uio::const_extents_iterator::operator*(_QWORD *a1)
{
  return *a1 + 8;
}

uint64_t diskimage_uio::const_extents_iterator::operator->(_QWORD *a1)
{
  return *a1 + 8;
}

uint64_t *diskimage_uio::const_extents_iterator::operator++(uint64_t *a1)
{
  diskimage_uio::details::extents_iterator_impl::operator++(*a1);
  return a1;
}

uint64_t diskimage_uio::details::extents_iterator_impl::operator++(uint64_t a1)
{
  __int128 v3;
  int v4;

  DiskImage::const_extents_iterator_t::operator++(*(DiskImage::const_extents_iterator_t **)a1);
  diskimage_uio::details::extents_iterator_impl::make_val(a1, (uint64_t)&v3);
  *(_OWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t diskimage_uio::const_extents_iterator::operator++@<X0>(const diskimage_uio::details::extents_iterator_impl **a1@<X0>, diskimage_uio::const_extents_iterator *a2@<X8>)
{
  diskimage_uio::const_extents_iterator::const_extents_iterator(a2, a1);
  return diskimage_uio::details::extents_iterator_impl::operator++((uint64_t)*a1);
}

void sub_212EFF590(_Unwind_Exception *a1)
{
  uint64_t ***v1;

  diskimage_uio::const_extents_iterator::~const_extents_iterator(v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::const_extents_iterator::~const_extents_iterator(uint64_t ***this)
{
  uint64_t **v2;

  v2 = *this;
  if (*this)
  {
    std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](*this, 0);
    MEMORY[0x2199A8A18](v2, 0x1020C40FA731AC5);
  }
  *this = 0;
}

uint64_t *diskimage_uio::extents_db::extents_db(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;

  v10 = operator new();
  diskimage_uio::details::extents_db_impl::extents_db_impl(v10, a2, a3, a4, a5);
  *a1 = v10;
  return a1;
}

{
  return diskimage_uio::extents_db::extents_db(a1, a2, a3, a4, a5);
}

void sub_212EFF66C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void diskimage_uio::extents_db::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char v7;
  const std::error_category *v8;
  uint64_t v9;

  if ((a4 & 8) != 0)
  {
    v8 = std::generic_category();
    v7 = 0;
    *(_QWORD *)(a5 + 8) = v8;
    v6 = 45;
  }
  else
  {
    diskimage_uio::extents_db::extents_db(&v9, a1, a2, a3, a4);
    v6 = v9;
    v9 = 0;
    diskimage_uio::extents_db::~extents_db((diskimage_uio::extents_db *)&v9);
    v7 = 1;
  }
  *(_QWORD *)a5 = v6;
  *(_BYTE *)(a5 + 16) = v7;
}

uint64_t std::make_error_code[abi:ne180100](unsigned int a1)
{
  std::generic_category();
  return a1;
}

_QWORD *diskimage_uio::extents_db::extents_db(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

_QWORD **diskimage_uio::extents_db::operator=(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *a1;
  if (*a1)
  {
    v5 = (_QWORD *)*v4;
    *v4 = 0;
    if (v5)
      std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((uint64_t)v4, v5);
    MEMORY[0x2199A8A18](v4, 0x1020C403A5D3213);
  }
  *a1 = (_QWORD *)*a2;
  *a2 = 0;
  return a1;
}

uint64_t diskimage_uio::extents_db::begin@<X0>(DiskImage::extents_t ***this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = diskimage_uio::details::extents_db_impl::begin(*this);
  *a2 = result;
  return result;
}

uint64_t diskimage_uio::details::extents_db_impl::begin(DiskImage::extents_t **this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t *v8;

  DiskImage::extents_t::begin(*this, (uint64_t)&v4);
  v1 = operator new();
  *(_QWORD *)v1 = v4;
  *(_OWORD *)(v1 + 8) = v5;
  *(_OWORD *)(v1 + 24) = v6;
  *(_DWORD *)(v1 + 40) = v7;
  v8 = (uint64_t *)v1;
  v2 = operator new();
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(v2, (uint64_t *)&v8);
  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](&v8, 0);
  return v2;
}

void sub_212EFF888(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v5 = v2;
  MEMORY[0x2199A8A18](v5, 0x1020C40FA731AC5);
  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100]((uint64_t **)(v3 - 24), 0);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v7 = operator new();
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x212EFF874);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::extents_db::end@<X0>(DiskImage::extents_t ***this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = diskimage_uio::details::extents_db_impl::end(*this);
  *a2 = result;
  return result;
}

uint64_t diskimage_uio::details::extents_db_impl::end(DiskImage::extents_t **this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t *v8;

  DiskImage::extents_t::end(*this, (uint64_t)&v4);
  v1 = operator new();
  *(_QWORD *)v1 = v4;
  *(_OWORD *)(v1 + 8) = v5;
  *(_OWORD *)(v1 + 24) = v6;
  *(_DWORD *)(v1 + 40) = v7;
  v8 = (uint64_t *)v1;
  v2 = operator new();
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(v2, (uint64_t *)&v8);
  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](&v8, 0);
  return v2;
}

void sub_212EFFA10(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v5 = v2;
  MEMORY[0x2199A8A18](v5, 0x1020C40FA731AC5);
  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100]((uint64_t **)(v3 - 24), 0);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v7 = operator new();
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x212EFF9FCLL);
  }
  _Unwind_Resume(a1);
}

void diskimage_uio::extents_db::~extents_db(diskimage_uio::extents_db *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v3 = (_QWORD *)*v2;
    *v2 = 0;
    if (v3)
      std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((uint64_t)v2, v3);
    MEMORY[0x2199A8A18](v2, 0x1020C403A5D3213);
  }
  *(_QWORD *)this = 0;
}

uint64_t diskimage_uio::is_read_only(unsigned int a1)
{
  return (a1 > 0xB) | (0x67Du >> a1) & 1;
}

_QWORD *diskimage_uio::diskimage_open_params::diskimage_open_params(_QWORD *a1, std::__fs::filesystem::path *a2, int a3)
{
  void *v6;
  uint64_t v7;
  int error_code;
  uint64_t v9;
  _OWORD *exception;
  _BYTE v13[24];

  v6 = (void *)operator new();
  bzero(v6, 0x270uLL);
  *a1 = v6;
  diskimage_uio::details::diskimage_open_params_impl::set_path(a2, (uint64_t)v6, a3, (uint64_t)v13);
  if (!v13[16])
  {
    v7 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    error_code = make_error_code(162);
    if (*(_QWORD *)(v7 + 8) != v9 || *(_DWORD *)v7 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    }
  }
  return a1;
}

void sub_212EFFC1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::set_path@<X0>(std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  const std::error_category *result;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  __int128 v13;
  int v14;
  _QWORD v15[45];
  uint64_t v16;
  uint64_t v17;

  std::__fs::filesystem::__status(a1, 0);
  if (LOBYTE(v15[0]) == 255 || LOBYTE(v15[0]) == 0)
  {
    *(_QWORD *)&v13 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((_QWORD *)&v13 + 1) = 75;
    v14 = 16;
    di_log::logger<di_log::log_printer<573ul>>::logger(v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Diskimageuio: path ", 19);
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    else
      __p = a1->__pn_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" doesn't exist", 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf((uint64_t)v15);
    MEMORY[0x2199A89AC](&v17);
    result = std::generic_category();
    *(_QWORD *)a4 = 2;
    *(_QWORD *)(a4 + 8) = result;
    *(_BYTE *)(a4 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 564) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(a2, 0, 1);
  }
  return result;
}

void sub_212EFFD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  di_log::logger<di_log::log_printer<573ul>>::~logger((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_QWORD *diskimage_uio::diskimage_open_params::diskimage_open_params(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v8;
  uint64_t v9;
  int error_code;
  uint64_t v11;
  _OWORD *exception;
  _BYTE v15[24];

  v8 = (void *)operator new();
  bzero(v8, 0x270uLL);
  *a1 = v8;
  diskimage_uio::details::diskimage_open_params_impl::open_with_plugin((uint64_t)v8, a2, a3, a4, v15);
  if (!v15[16])
  {
    v9 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    error_code = make_error_code(162);
    if (*(_QWORD *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    }
  }
  return a1;
}

void sub_212EFFEB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::details::diskimage_open_params_impl::open_with_plugin(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;
  _QWORD v15[3];

  memset(v15, 0, sizeof(v15));
  if (a4 == 1)
    v7 = 0x100000002;
  else
    v7 = 0x100000000;
  plugin_header::plugin_header(&v11, a2, a3, v7, v15, 0);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>(a1 + 48, a1 + 48, (uint64_t)&v11);
  if (v14 < 0)
    operator delete(__p);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)(a1 + 560) = 12;
  *a5 = 0;
  a5[16] = 1;
}

_QWORD *diskimage_uio::diskimage_open_params::diskimage_open_params(_QWORD *a1, int a2, int a3, char a4)
{
  void *v8;
  uint64_t v9;
  int error_code;
  uint64_t v11;
  _OWORD *exception;
  _BYTE v15[24];

  v8 = (void *)operator new();
  bzero(v8, 0x270uLL);
  *a1 = v8;
  diskimage_uio::details::diskimage_open_params_impl::set_fd((uint64_t)v8, a2, a3, a4, (uint64_t)v15);
  if (!v15[16])
  {
    v9 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    error_code = make_error_code(162);
    if (*(_QWORD *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    }
  }
  return a1;
}

void sub_212F0010C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::set_fd@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  Backend *v10;
  crypto::header *v11;
  uint64_t v12;
  int v14;
  __int128 v15;
  char v16;
  int v17;

  v17 = a2;
  v16 = a4;
  *(_DWORD *)(a1 + 564) = a3;
  *(_DWORD *)(a1 + 568) = a3;
  v14 = 2 * ((a3 - 1) < 2);
  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,int,BOOL &,void>(&v17, &v14, &v16, &v15);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 24, &v15);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(Backend **)(a1 + 24);
  v11 = (crypto::header *)operator new();
  crypto::header::header(v11, v10);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  if (v12)
    MEMORY[0x2199A8A18](v12, 0x1000C4015A9971DLL);
  return diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(a1, *(_DWORD *)(a1 + 564), 0, a5);
}

void sub_212F00238(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  const std::error_category *v7;

  MEMORY[0x2199A8A18](v3, 0x1000C4015A9971DLL);
  if (a2 == 2)
  {
    v6 = *((unsigned int *)__cxa_begin_catch(a1) + 2);
    v7 = std::generic_category();
    *(_QWORD *)v2 = v6;
    *(_QWORD *)(v2 + 8) = v7;
    *(_BYTE *)(v2 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x212F00220);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x212F0020CLL);
  }
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::create(std::__fs::filesystem::path *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  diskimage_uio::diskimage_open_params::diskimage_open_params(&v4, a1, a2);
  *(_QWORD *)a3 = v4;
  v4 = 0;
  *(_BYTE *)(a3 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
}

void diskimage_uio::diskimage_open_params::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  diskimage_uio::diskimage_open_params::diskimage_open_params(&v5, a1, a2, a3);
  *(_QWORD *)a4 = v5;
  v5 = 0;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

void diskimage_uio::diskimage_open_params::create(int a1@<W0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  diskimage_uio::diskimage_open_params::diskimage_open_params(&v5, a1, a2, a3);
  *(_QWORD *)a4 = v5;
  v5 = 0;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

_QWORD *diskimage_uio::diskimage_open_params::diskimage_open_params(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  if (*a1)
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 608);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 592);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 576);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + 48);
    v5 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
    if (v5)
      MEMORY[0x2199A8A18](v5, 0x1000C4015A9971DLL);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 24);
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x2199A8A18](v4, 0x1032C40F3DE37C8);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl(diskimage_uio::details::diskimage_open_params_impl *this)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 576;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 592);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 48);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    MEMORY[0x2199A8A18](v3, 0x1000C4015A9971DLL);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params(diskimage_uio::diskimage_open_params *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 608);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 592);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 576);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 48);
    v3 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v3)
      MEMORY[0x2199A8A18](v3, 0x1000C4015A9971DLL);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 24);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x2199A8A18](v2, 0x1032C40F3DE37C8);
  }
  *(_QWORD *)this = 0;
}

_QWORD *diskimage_uio::diskimage_open_params::diskimage_open_params(_QWORD *this, diskimage_uio::details::diskimage_open_params_impl *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

void diskimage_uio::diskimage_open_params::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    diskimage_uio::details::diskimage_open_params_impl::encode(v2, a2);
}

void diskimage_uio::details::diskimage_open_params_impl::encode(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void (*v5)(uint64_t, const char *, unsigned int *, uint64_t);
  unsigned int *v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void (*v14)(uint64_t, const char *, uint64_t);
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void (*v24)(uint64_t, const char *, uint64_t);
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;

  v4 = bswap32(*(_DWORD *)(a1 + 564));
  v28 = bswap32(*(_DWORD *)(a1 + 568));
  v29 = v4;
  (*(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2)(a2, "required_mode", &v29, 4);
  (*(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2)(a2, "current_mode", &v28, 4);
  v5 = *(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2;
  if (*(_DWORD *)(a1 + 552) == 5)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      v6 = *(unsigned int **)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v6 = (unsigned int *)(a1 + 64);
      v7 = *(unsigned __int8 *)(a1 + 87);
    }
    v5(a2, "plugin_name", v6, v7 + 1);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 64))();
    return;
  }
  v8 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v8 = *(const char **)a1;
  v9 = strlen(v8);
  v5(a2, "path", (unsigned int *)v8, v9 + 1);
  v10 = *(_QWORD *)(a1 + 576);
  if (v10 && *(_QWORD *)(a1 + 592) && *(_QWORD *)(a1 + 608))
  {
    v11 = *(std::__shared_weak_count **)(a1 + 584);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = *(void (**)(uint64_t, const char *, uint64_t))(a2 + 8);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
    v14(a2, "crypto_fd", v15);
    crypto::format_serializer::encode((void (**)(_QWORD, const char *, _QWORD, uint64_t))a2, *(_QWORD **)(a1 + 592));
    if (v11)
    {
      v16 = (unint64_t *)&v11->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        v18 = v11;
LABEL_27:
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))a2)(a2, "crypto_hdr", v19, 76);
    v20 = *(_QWORD *)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(void (**)(uint64_t, const char *, uint64_t))(a2 + 8);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 176))(v20);
    v24(a2, "fd", v25);
    if (v21)
    {
      v26 = (unint64_t *)&v21->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        v18 = v21;
        goto LABEL_27;
      }
    }
  }
}

void sub_212F0083C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5[39];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  diskimage_uio::details::diskimage_open_params_impl::decode(a1, (uint64_t)v5);
  if (v6)
  {
    v3 = operator new();
    diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(v3, v5);
    *(_QWORD *)a2 = v3;
    v4 = 0;
    *(_BYTE *)(a2 + 16) = 1;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::details::diskimage_open_params_impl,std::error_code>::error((uint64_t)v5);
    *(_BYTE *)(a2 + 16) = 0;
  }
  if (v6)
    diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>((uint64_t)v5);
}

void sub_212F00920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (LOBYTE(STACK[0x280]))
    diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::decode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *result;
  unsigned int v5;
  unsigned int v6;
  char v7;
  const std::error_category *v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const std::error_category *v16;
  int v17;
  int v18;
  const std::error_category *v19;
  int v20;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type v24;
  const std::error_category *v25;
  int v26;
  const std::error_category *v27;
  unsigned int *v28;
  const std::error_category *v29;
  int v30;
  std::string::size_type v31[2];
  char v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[2];
  void *__p[2];
  __int128 v37;
  __int128 v38;
  int v39;
  std::string v40;
  char *v41;
  char *v42;
  _QWORD v43[2];
  char v44;
  _QWORD v45[2];
  char v46;
  unsigned int v47;
  __int128 v48;
  std::string::value_type v49;
  unsigned int v50;
  _BYTE v51[72];
  char v52;
  char v53;
  std::string v54;
  _DWORD v55[144];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v50 = 0;
  diskimage_uio::details::diskimage_open_params_impl::decode_buffer(a1, (uint64_t)"required_mode", &v50, 4uLL, (uint64_t)&v48);
  if (!v49)
  {
    result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v48);
LABEL_40:
    *(_OWORD *)a2 = *result;
    goto LABEL_41;
  }
  v47 = 0;
  diskimage_uio::details::diskimage_open_params_impl::decode_buffer(a1, (uint64_t)"current_mode", &v47, 4uLL, (uint64_t)&v54);
  if (!v54.__r_.__value_.__s.__data_[16] || !v49)
  {
    if (!v54.__r_.__value_.__s.__data_[16])
    {
      v48 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
      if (v49)
        v49 = 0;
      result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v48);
      goto LABEL_40;
    }
    if (v49)
      v48 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    else
      v49 = v54.__r_.__value_.__s.__data_[16];
  }
  v5 = bswap32(v50);
  v50 = v5;
  v6 = bswap32(v47);
  v47 = v6;
  if (v5 == 2)
  {
    LOBYTE(v5) = 0;
    LODWORD(v45[0]) = 2;
LABEL_18:
    v7 = 1;
    goto LABEL_20;
  }
  if (v5 != 1)
  {
    if (v5)
    {
      v8 = std::generic_category();
      v7 = 0;
      v45[0] = 34;
      v45[1] = v8;
      LOBYTE(v5) = 1;
      v6 = v47;
      goto LABEL_20;
    }
    LODWORD(v45[0]) = 0;
    goto LABEL_18;
  }
  LOBYTE(v5) = 0;
  v7 = 1;
  LODWORD(v45[0]) = 1;
LABEL_20:
  v46 = v7;
  if (v6 == 2 || v6 == 1)
  {
    LODWORD(v43[0]) = v6;
  }
  else
  {
    if (v6)
    {
      v43[0] = 34;
      v43[1] = std::generic_category();
      v44 = 0;
      if (v46)
      {
        result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v43);
        goto LABEL_40;
      }
      goto LABEL_26;
    }
    LODWORD(v43[0]) = 0;
  }
  v44 = 1;
  if ((v5 & 1) != 0)
  {
LABEL_26:
    result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v45);
    goto LABEL_40;
  }
  LODWORD(v54.__r_.__value_.__l.__data_) = 1;
  v54.__r_.__value_.__s.__data_[16] = 1;
  if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)v43, (uint64_t)&v54))
  {
    LODWORD(v54.__r_.__value_.__l.__data_) = 0;
    v54.__r_.__value_.__s.__data_[16] = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)v45, (uint64_t)&v54))
    {
      result = std::generic_category();
      *(_QWORD *)a2 = 22;
      *(_QWORD *)(a2 + 8) = result;
LABEL_41:
      *(_BYTE *)(a2 + 624) = 0;
      return result;
    }
  }
  v9 = v45[0];
  v10 = v43[0];
  v42 = 0;
  v11 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a1, "plugin_name", &v42);
  if (v11 < 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = v42;
    if (!v42[v11 - 1])
    {
      bzero(&v54, 0x270uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      if (v10 == 1)
        v13 = 0x100000002;
      else
        v13 = 0x100000000;
      plugin_header::plugin_header(v51, __p, 0, v13, a1, a1);
      std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>::operator=[abi:ne180100]<plugin_header,0,plugin_header,5ul,0>((uint64_t)v55, (uint64_t)v51);
      std::__destroy_at[abi:ne180100]<plugin_header,0>((uint64_t)v51);
      if (SBYTE7(v37) < 0)
        operator delete(__p[0]);
      v55[128] = 12;
      diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (__int128 *)&v54);
      *(_BYTE *)(a2 + 624) = 1;
      diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v54);
      return (_OWORD *)MEMORY[0x2199A8A00](v12, 0x1000C8077774924);
    }
  }
  v41 = 0;
  v14 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a1, "path", &v41);
  v15 = v41;
  if (v41 && v14 > 0)
  {
    if (v41[v14 - 1])
    {
      v16 = std::generic_category();
      *(_QWORD *)a2 = 22;
      *(_QWORD *)(a2 + 8) = v16;
      *(_BYTE *)(a2 + 624) = 0;
      goto LABEL_80;
    }
    std::string::basic_string[abi:ne180100]<0>(&v54, v41);
    v40 = v54;
    v17 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a1, "crypto_fd");
    v39 = v17;
    if (v17 < 0 && v17 != -2)
    {
      v18 = -v17;
      v19 = std::generic_category();
      *(_DWORD *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v19;
      *(_BYTE *)(a2 + 624) = 0;
      goto LABEL_78;
    }
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)__p = 0u;
    v35[0] = 0;
    v35[1] = 0;
    if ((v17 & 0x80000000) == 0)
    {
      crypto::format_serializer::decode(a1, (uint64_t)v51);
      if (v52)
      {
        LOBYTE(v30) = v10 == 1;
        v32 = 0;
        std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>(&v39, (BOOL *)&v30, &v32, &v33);
        v34 = v33;
        v33 = 0uLL;
        std::make_shared[abi:ne180100]<crypto::format,crypto::format,void>((uint64_t)v51, v31);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(&v54, &v34, v31);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::operator=((uint64_t)__p, (__int128 *)&v54);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)&v54);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v31);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
        if (v10 == v9)
        {
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(&v54, (__int128 *)&v40, v9, (uint64_t)__p);
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (__int128 *)&v54);
          *(_BYTE *)(a2 + 624) = 1;
          diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v54);
          goto LABEL_69;
        }
        v25 = std::generic_category();
        *(_QWORD *)a2 = 22;
        *(_QWORD *)(a2 + 8) = v25;
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::format,std::error_code>::error((uint64_t)v51);
      }
      *(_BYTE *)(a2 + 624) = 0;
LABEL_69:
      if (v52)
        std::__destroy_at[abi:ne180100]<crypto::format,0>((uint64_t)v51);
      goto LABEL_77;
    }
    v30 = 0;
    v20 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a1, "fd");
    v30 = v20;
    if (v20 < 0)
    {
      v26 = -v20;
      v27 = std::generic_category();
      *(_DWORD *)a2 = v26;
      *(_QWORD *)(a2 + 8) = v27;
    }
    else
    {
      crypto::header_serializer::decode((uint64_t (**)(_QWORD, const char *, char **))a1, (uint64_t)v51);
      if (v53)
      {
        v31[0] = 0;
LABEL_60:
        std::make_unique[abi:ne180100]<crypto::header,crypto::header>((uint64_t)v51, (uint64_t *)&v54);
        v21 = v54.__r_.__value_.__r.__words[0];
        v54.__r_.__value_.__r.__words[0] = 0;
        v31[0] = v21;
LABEL_61:
        LOBYTE(v33) = v10 == 1;
        v32 = 0;
        std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>(&v30, (BOOL *)&v33, &v32, &v34);
        v33 = v34;
        if (*((_QWORD *)&v34 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(&v54, (__int128 *)&v40, (std::string::size_type *)&v33, v10, v9, v31);
        diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (__int128 *)&v54);
        *(_BYTE *)(a2 + 624) = 1;
        diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v54);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
        v24 = v31[0];
        v31[0] = 0;
        if (v24)
          MEMORY[0x2199A8A18](v24, 0x1000C4015A9971DLL);
        goto LABEL_77;
      }
      v28 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v51);
      v29 = std::generic_category();
      v54.__r_.__value_.__r.__words[0] = 2;
      v54.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      if ((std::operator==[abi:ne180100](v28, (unsigned int *)&v54) & 1) != 0)
      {
        v31[0] = 0;
        if (!v53)
          goto LABEL_61;
        goto LABEL_60;
      }
      *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v51);
    }
    *(_BYTE *)(a2 + 624) = 0;
LABEL_77:
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v35);
    diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)__p);
LABEL_78:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
LABEL_80:
    result = (_OWORD *)MEMORY[0x2199A8A00](v15, 0x1000C8077774924);
    if (v12)
      return (_OWORD *)MEMORY[0x2199A8A00](v12, 0x1000C8077774924);
    return result;
  }
  result = std::generic_category();
  *(_QWORD *)a2 = 22;
  *(_QWORD *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 624) = 0;
  if (v12)
    return (_OWORD *)MEMORY[0x2199A8A00](v12, 0x1000C8077774924);
  return result;
}

void sub_212F0102C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60)
{
  uint64_t v60;
  uint64_t v61;
  void **v62;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)&__p);
  if (a35 < 0)
    operator delete(*v62);
  MEMORY[0x2199A8A00](v61, 0x1000C8077774924);
  if (v60)
    MEMORY[0x2199A8A00](v60, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::details::diskimage_open_params_impl,std::error_code>::error(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 624))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CEED160;
  }
  return result;
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::query_image_format@<X0>(const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *result;
  char v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  _QWORD v9[45];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  result = diskimage_uio::details::diskimage_open_params_impl::validate_unlocked(this, (uint64_t)v12);
  if (v12[16])
  {
    *(_DWORD *)a2 = this[70].__vftable;
    v5 = 1;
  }
  else
  {
    *(_QWORD *)&v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::query_image_format() const";
    *((_QWORD *)&v7 + 1) = 85;
    v8 = 16;
    di_log::logger<di_log::log_printer<660ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Diskimageuio: query format failed ", 34);
    v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v9, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x2199A89AC](&v11);
    result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    v5 = 0;
    *(_OWORD *)a2 = *result;
  }
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

void sub_212F01348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<660ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::diskimage_open_params::is_locked@<X0>(const std::error_category **this@<X0>, BOOL *a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::is_locked(*this, a2);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::is_locked@<X0>(const std::error_category *this@<X0>, BOOL *a2@<X8>)
{
  _OWORD *result;
  char v5;
  _BYTE v6[24];

  result = diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = this[5].__vftable != 0;
    v5 = 1;
  }
  else
  {
    result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v6);
    v5 = 0;
    *(_OWORD *)a2 = *result;
  }
  a2[16] = v5;
  return result;
}

_OWORD *diskimage_uio::diskimage_open_params::is_encrypted@<X0>(const std::error_category **this@<X0>, _BYTE *a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::is_encrypted(*this, a2);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::is_encrypted@<X0>(const std::error_category *this@<X0>, _BYTE *a2@<X8>)
{
  _OWORD *result;
  std::error_category_vtbl *v5;
  char v6;
  _BYTE v7[24];

  result = diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v7);
  if (v7[16])
  {
    if (this[5].__vftable)
    {
      LOBYTE(v5) = 1;
    }
    else
    {
      v5 = this[72].__vftable;
      if (v5)
      {
        v5 = this[74].__vftable;
        if (v5)
          LOBYTE(v5) = this[76].__vftable != 0;
      }
    }
    *a2 = (_BYTE)v5;
    v6 = 1;
  }
  else
  {
    result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v7);
    v6 = 0;
    *(_OWORD *)a2 = *result;
  }
  a2[16] = v6;
  return result;
}

uint64_t diskimage_uio::diskimage_open_params::is_read_only@<X0>(diskimage_uio::diskimage_open_params *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_QWORD *)this;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 24) + 48))(*(_QWORD *)(*(_QWORD *)this + 24));
  LOBYTE(v5) = 1;
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(v3 + 568) && (v6 = *(_DWORD *)(v3 + 560), v6 <= 0xB))
      v5 = (0x67Du >> v6) & 1;
    else
      LOBYTE(v5) = 1;
  }
  *a2 = v5;
  a2[16] = 1;
  return result;
}

double diskimage_uio::diskimage_open_params::get_block_size@<D0>(const std::error_category **this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = diskimage_uio::details::diskimage_open_params_impl::get_block_size(*this, a2).n128_u64[0];
  return result;
}

__n128 diskimage_uio::details::diskimage_open_params_impl::get_block_size@<Q0>(const std::error_category *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  __n128 *v7;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  diskimage_uio::details::diskimage_open_params_impl::validate_unlocked(this, (uint64_t)v13);
  if (v13[16])
  {
    v4 = LODWORD(this[69].__vftable);
    if ((_DWORD)v4 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v10[0] = &v8;
    ((void (*)(_QWORD *, const std::error_category *))off_24CEF63F8[v4])(v10, &this[6]);
  }
  else
  {
    *(_QWORD *)&v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_block_size() const";
    *((_QWORD *)&v8 + 1) = 81;
    v9 = 16;
    di_log::logger<di_log::log_printer<671ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Diskimageuio: query format failed ", 34);
    v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v10, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x2199A89AC](&v12);
    v7 = (__n128 *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }
  return result;
}

void sub_212F015D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<671ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>(const std::error_category **this@<X0>, __n128 *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks(*this, a2).n128_u64[0];
  return result;
}

__n128 diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks@<Q0>(const std::error_category *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  __n128 *v7;
  __int128 v8;
  int v9;
  _QWORD v10[45];
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  diskimage_uio::details::diskimage_open_params_impl::validate_unlocked(this, (uint64_t)v13);
  if (v13[16])
  {
    v4 = LODWORD(this[69].__vftable);
    if ((_DWORD)v4 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v10[0] = &v8;
    ((void (*)(_QWORD *, const std::error_category *))off_24CEF6868[v4])(v10, &this[6]);
  }
  else
  {
    *(_QWORD *)&v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((_QWORD *)&v8 + 1) = 80;
    v9 = 16;
    di_log::logger<di_log::log_printer<681ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Diskimageuio: query format failed ", 34);
    v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v10, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x2199A89AC](&v12);
    v7 = (__n128 *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }
  return result;
}

void sub_212F016F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<681ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::get_uuid(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

void diskimage_uio::diskimage_open_params::set_passphrase(diskimage_uio::details::diskimage_open_params_impl **this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl::set_passphrase(*this, a2, 1, a3);
}

void diskimage_uio::details::diskimage_open_params_impl::set_passphrase(diskimage_uio::details::diskimage_open_params_impl *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  const std::error_category *v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[152];
  _BYTE v31[24];

  diskimage_uio::details::diskimage_open_params_impl::is_encrypted((const std::error_category *)this, v31);
  if (!v31[16])
  {
    *(_QWORD *)&v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((_QWORD *)&v24 + 1) = 81;
    v25 = 16;
    di_log::logger<di_log::log_printer<741ul>>::logger(&v26, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, can't get encrypted status ", 63);
    v17 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v31);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v26, v17);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x2199A89AC](v30);
    v18 = (__int128 *)v31;
LABEL_24:
    *(_OWORD *)a4 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v18);
    goto LABEL_25;
  }
  if (!v31[0])
  {
    *(_QWORD *)&v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((_QWORD *)&v24 + 1) = 81;
    v25 = 16;
    di_log::logger<di_log::log_printer<745ul>>::logger(&v26, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, image not encrypted", 55);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x2199A89AC](v30);
    *(_QWORD *)a4 = make_error_code(161);
    *(_QWORD *)(a4 + 8) = v19;
LABEL_25:
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  diskimage_uio::details::diskimage_open_params_impl::is_locked((const std::error_category *)this, (BOOL *)&v24);
  if (!(_BYTE)v25)
  {
    *(_QWORD *)&v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((_QWORD *)&v22 + 1) = 81;
    v23 = 16;
    di_log::logger<di_log::log_printer<751ul>>::logger(&v26, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, can't get locked status ", 60);
    v20 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v24);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v26, v20);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x2199A89AC](v30);
    v18 = &v24;
    goto LABEL_24;
  }
  if (!(_BYTE)v24)
  {
    *(_QWORD *)&v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((_QWORD *)&v22 + 1) = 81;
    v23 = 16;
    di_log::logger<di_log::log_printer<755ul>>::logger(&v26, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Diskimageuio: can't set passphrase, image already unlocked", 58);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x2199A89AC](v30);
    v21 = std::generic_category();
    *(_QWORD *)a4 = 17;
    *(_QWORD *)(a4 + 8) = v21;
    goto LABEL_25;
  }
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t((uint64_t)&v26, (uint64_t)this + 40, (_QWORD *)this + 3, (uint64_t)a2);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 576, &v26);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 592, &v27);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 608, &v28);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::shared_ptr<DiskImage>::operator=[abi:ne180100]((_QWORD *)this + 3, (uint64_t *)this + 76);
  diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(this, a2, a3, a4);
}

void sub_212F01A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  di_log::logger<di_log::log_printer<755ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::diskimage_context::read@<X0>(DiskImage::Context **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  DiskImage::Context **v8;
  _QWORD *dummy_shared_ptr;
  const char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  DiskImage::Context **v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  DiskImage::Context *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  const std::error_category *v54;
  char v55;
  uint64_t error_code;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t *v87;
  void *__p;
  __int128 v89;
  _BYTE v90[120];
  void *v91;
  __int128 v92;
  _BYTE v93[40];
  _BYTE v94[72];
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;

  v8 = a1;
  v101 = *MEMORY[0x24BDAC8D0];
  v79 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a1 + 1) + 24))(*((_QWORD *)*a1 + 1));
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  v12 = dummy_shared_ptr;
  v13 = *(uint64_t **)a2;
  v14 = *(unsigned int *)(a2 + 8);
  v15 = v90;
  __p = v90;
  v16 = xmmword_212FEB330;
  v89 = xmmword_212FEB330;
  v17 = (v14 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if ((_DWORD)v14)
    v18 = v17 + 1;
  else
    v18 = 0;
  if (v18 < 6)
  {
    if ((_DWORD)v14)
    {
      v32 = v17 + 1;
      v25 = a5;
      do
      {
        v33 = *v13;
        v34 = dummy_shared_ptr[1];
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = v13[1];
        *v15 = v33;
        v15[1] = v34;
        v15[2] = v37;
        v13 += 2;
        v15 += 3;
        --v32;
      }
      while (v32);
    }
    else
    {
      v18 = 0;
      v25 = a5;
    }
  }
  else
  {
    v78 = a3;
    if (v18 >= 0x555555555555556)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v11);
    v77 = a5;
    v19 = operator new(24 * v18);
    if (__p)
    {
      v20 = v8;
      v21 = v89;
      if ((_QWORD)v89)
      {
        v22 = __p;
        do
        {
          --v21;
          v22 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v22) + 24);
        }
        while (v21);
      }
      *(_QWORD *)&v89 = 0;
      v8 = v20;
      if (v90 != __p)
        operator delete(__p);
    }
    *(_QWORD *)&v89 = 0;
    *((_QWORD *)&v89 + 1) = v18;
    __p = v19;
    if ((_DWORD)v14)
    {
      v23 = &v13[2 * v14];
      v24 = (char *)v19;
      v25 = v77;
      v16 = xmmword_212FEB330;
      do
      {
        v26 = *v13;
        v27 = v12[1];
        if (v27)
        {
          v28 = (unint64_t *)(v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = v13[1];
        *(_QWORD *)v24 = v26;
        *((_QWORD *)v24 + 1) = v27;
        *((_QWORD *)v24 + 2) = v30;
        v13 += 2;
        v24 += 24;
      }
      while (v13 != v23);
      v31 = v89;
    }
    else
    {
      v31 = 0;
      v24 = (char *)v19;
      v25 = v77;
      v16 = xmmword_212FEB330;
    }
    v18 = v31 - 0x5555555555555555 * ((v24 - (_BYTE *)v19) >> 3);
    a3 = v78;
  }
  *(_QWORD *)&v89 = v18;
  v91 = v93;
  v92 = v16;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v91, v18);
  v83 = __p;
  v80 = (uint64_t)__p + 24 * v89;
  v87 = (unint64_t *)v91;
  v86 = (unint64_t *)((char *)v91 + 8 * v92);
  sg_vec_ref::sg_vec_ref((uint64_t)v94, (uint64_t *)&v83, &v80, &v87, &v86, v79 * a3, v79 * a4);
  v38 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v94, (uint64_t)&v83);
  sg_vec_ref::end((sg_vec_ref *)v94, (uint64_t)&v80);
  v39 = DiskImage::Context::read(v38, (const sg_vec_ns::details::sg_vec_iterator *)&v83, (const sg_vec_ns::details::sg_vec_iterator *)&v80);
  v41 = v40;
  v42 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v81;
  if (v81)
  {
    v46 = (unint64_t *)&v81->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v85;
  if (v85)
  {
    v49 = (unint64_t *)&v85->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v84;
  if (!v84)
    goto LABEL_48;
  v52 = (unint64_t *)&v84->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if ((v39 & 0x8000000000000000) == 0)
      goto LABEL_52;
  }
  else
  {
LABEL_48:
    if ((v39 & 0x8000000000000000) == 0)
      goto LABEL_52;
  }
  if ((_DWORD)v39)
  {
    v54 = std::generic_category();
    v55 = 0;
    *(_DWORD *)v25 = v39;
    *(_QWORD *)(v25 + 8) = v54;
    goto LABEL_55;
  }
LABEL_52:
  if (v41 == v79 * a3)
  {
    *(_QWORD *)v25 = v39;
    v55 = 1;
  }
  else
  {
    error_code = make_error_code(164);
    v55 = 0;
    *(_QWORD *)v25 = error_code;
    *(_QWORD *)(v25 + 8) = v57;
  }
LABEL_55:
  *(_BYTE *)(v25 + 16) = v55;
  v58 = v100;
  if (v100)
  {
    v59 = (unint64_t *)&v100->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v99;
  if (v99)
  {
    v62 = (unint64_t *)&v99->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v98;
  if (v98)
  {
    v65 = (unint64_t *)&v98->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v97;
  if (v97)
  {
    v68 = (unint64_t *)&v97->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v96;
  if (v96)
  {
    v71 = (unint64_t *)&v96->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v95;
  if (v95)
  {
    v74 = (unint64_t *)&v95->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (*((_QWORD *)&v92 + 1) && v93 != v91)
    operator delete(v91);
  return boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&__p);
}

void sub_212F02120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v57 + 112);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  sg_vec::~sg_vec((sg_vec *)&a57);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::Context::read(DiskImage::Context *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) == 0)
    return (**(uint64_t (***)(DiskImage::Context *, const sg_vec_ns::details::sg_vec_iterator *, const sg_vec_ns::details::sg_vec_iterator *))this)(this, a2, a3);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v4 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((_QWORD *)&v4 + 1) = 24;
    v5 = 2;
    di_log::logger<di_log::log_printer<159ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Disk image is terminated, skipping read", 39);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x2199A89AC](&v8);
  }
  return -6;
}

void sub_212F0224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<159ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::diskimage_context::write@<X0>(DiskImage::Context **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  DiskImage::Context **v8;
  _QWORD *dummy_shared_ptr;
  const char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  DiskImage::Context **v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  DiskImage::Context *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  const std::error_category *v54;
  char v55;
  uint64_t error_code;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t *v87;
  void *__p;
  __int128 v89;
  _BYTE v90[120];
  void *v91;
  __int128 v92;
  _BYTE v93[40];
  _BYTE v94[72];
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  char v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;

  v8 = a1;
  v102 = *MEMORY[0x24BDAC8D0];
  v79 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a1 + 1) + 24))(*((_QWORD *)*a1 + 1));
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  v12 = dummy_shared_ptr;
  v13 = *(uint64_t **)a2;
  v14 = *(unsigned int *)(a2 + 8);
  v15 = v90;
  __p = v90;
  v16 = xmmword_212FEB330;
  v89 = xmmword_212FEB330;
  v17 = (v14 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if ((_DWORD)v14)
    v18 = v17 + 1;
  else
    v18 = 0;
  if (v18 < 6)
  {
    if ((_DWORD)v14)
    {
      v32 = v17 + 1;
      v25 = a5;
      do
      {
        v33 = *v13;
        v34 = dummy_shared_ptr[1];
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = v13[1];
        *v15 = v33;
        v15[1] = v34;
        v15[2] = v37;
        v13 += 2;
        v15 += 3;
        --v32;
      }
      while (v32);
    }
    else
    {
      v18 = 0;
      v25 = a5;
    }
  }
  else
  {
    v78 = a3;
    if (v18 >= 0x555555555555556)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v11);
    v77 = a5;
    v19 = operator new(24 * v18);
    if (__p)
    {
      v20 = v8;
      v21 = v89;
      if ((_QWORD)v89)
      {
        v22 = __p;
        do
        {
          --v21;
          v22 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v22) + 24);
        }
        while (v21);
      }
      *(_QWORD *)&v89 = 0;
      v8 = v20;
      if (v90 != __p)
        operator delete(__p);
    }
    *(_QWORD *)&v89 = 0;
    *((_QWORD *)&v89 + 1) = v18;
    __p = v19;
    if ((_DWORD)v14)
    {
      v23 = &v13[2 * v14];
      v24 = (char *)v19;
      v25 = v77;
      v16 = xmmword_212FEB330;
      do
      {
        v26 = *v13;
        v27 = v12[1];
        if (v27)
        {
          v28 = (unint64_t *)(v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = v13[1];
        *(_QWORD *)v24 = v26;
        *((_QWORD *)v24 + 1) = v27;
        *((_QWORD *)v24 + 2) = v30;
        v13 += 2;
        v24 += 24;
      }
      while (v13 != v23);
      v31 = v89;
    }
    else
    {
      v31 = 0;
      v24 = (char *)v19;
      v25 = v77;
      v16 = xmmword_212FEB330;
    }
    v18 = v31 - 0x5555555555555555 * ((v24 - (_BYTE *)v19) >> 3);
    a3 = v78;
  }
  *(_QWORD *)&v89 = v18;
  v91 = v93;
  v92 = v16;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v91, v18);
  v83 = __p;
  v80 = (uint64_t)__p + 24 * v89;
  v87 = (unint64_t *)v91;
  v86 = (unint64_t *)((char *)v91 + 8 * v92);
  sg_vec_ref::sg_vec_ref((uint64_t)v94, (uint64_t *)&v83, &v80, &v87, &v86, v79 * a3, v79 * a4);
  v97 = 1;
  v38 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v94, (uint64_t)&v83);
  sg_vec_ref::end((sg_vec_ref *)v94, (uint64_t)&v80);
  v39 = DiskImage::Context::write(v38, (const sg_vec_ns::details::sg_vec_iterator *)&v83, (const sg_vec_ns::details::sg_vec_iterator *)&v80);
  v41 = v40;
  v42 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v81;
  if (v81)
  {
    v46 = (unint64_t *)&v81->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v85;
  if (v85)
  {
    v49 = (unint64_t *)&v85->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v84;
  if (!v84)
    goto LABEL_48;
  v52 = (unint64_t *)&v84->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if ((v39 & 0x8000000000000000) == 0)
      goto LABEL_52;
  }
  else
  {
LABEL_48:
    if ((v39 & 0x8000000000000000) == 0)
      goto LABEL_52;
  }
  if ((_DWORD)v39)
  {
    v54 = std::generic_category();
    v55 = 0;
    *(_DWORD *)v25 = v39;
    *(_QWORD *)(v25 + 8) = v54;
    goto LABEL_55;
  }
LABEL_52:
  if (v41 == v79 * a3)
  {
    *(_QWORD *)v25 = v39;
    v55 = 1;
  }
  else
  {
    error_code = make_error_code(164);
    v55 = 0;
    *(_QWORD *)v25 = error_code;
    *(_QWORD *)(v25 + 8) = v57;
  }
LABEL_55:
  *(_BYTE *)(v25 + 16) = v55;
  v58 = v101;
  if (v101)
  {
    v59 = (unint64_t *)&v101->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v100;
  if (v100)
  {
    v62 = (unint64_t *)&v100->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v99;
  if (v99)
  {
    v65 = (unint64_t *)&v99->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v98;
  if (v98)
  {
    v68 = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v96;
  if (v96)
  {
    v71 = (unint64_t *)&v96->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v95;
  if (v95)
  {
    v74 = (unint64_t *)&v95->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (*((_QWORD *)&v92 + 1) && v93 != v91)
    operator delete(v91);
  return boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&__p);
}

void sub_212F02804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v57 + 112);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  sg_vec::~sg_vec((sg_vec *)&a57);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::diskimage_context::flush@<X0>(_QWORD **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;

  if (a2 >= 3)
  {
    result = make_error_code(164);
    v6 = 0;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v7;
  }
  else
  {
    result = DiskImage::Context::flush(*a1);
    if ((_DWORD)result)
    {
      v5 = result;
      result = (uint64_t)std::generic_category();
      v6 = 0;
      *(_DWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = result;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      v6 = 1;
    }
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t diskimage_uio::diskimage_context::unmap@<X0>(_QWORD **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result = DiskImage::Context::unmap(*a1);
  if ((_DWORD)result)
  {
    v6 = result;
    result = (uint64_t)std::generic_category();
    v7 = 0;
    *(_DWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = result;
  }
  else
  {
    v8 = a2[2];
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 16 * v8;
      v11 = (uint64_t *)(*(_QWORD *)a2 + 8);
      do
      {
        v12 = *v11;
        v11 += 2;
        v9 += v12;
        v10 -= 16;
      }
      while (v10);
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)a3 = v9;
    v7 = 1;
  }
  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

uint64_t DiskImage::Context::unmap(_QWORD *a1)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1[1] + 8) & 1) == 0)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v2 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
    *((_QWORD *)&v2 + 1) = 25;
    v3 = 2;
    di_log::logger<di_log::log_printer<173ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Disk image is terminated, skipping unmap", 40);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf((uint64_t)v4);
    MEMORY[0x2199A89AC](&v6);
  }
  return 4294967290;
}

void sub_212F02A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<173ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_context::get_extents(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  diskimage_uio::extents_db::create(a1, a2, a3, a4, a5);
}

void diskimage_uio::diskimage_context::get_extents(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  diskimage_uio::diskimage_context::get_extents(a1, a2, a3, 7, a4);
}

_QWORD *diskimage_uio::diskimage_context::diskimage_context(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *diskimage_uio::diskimage_context::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void diskimage_uio::diskimage_context::~diskimage_context(diskimage_uio::diskimage_context *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  *(_QWORD *)this = 0;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  *(_QWORD *)this = 0;
}

_QWORD *diskimage_uio::diskimage::diskimage(_QWORD *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = *a2;
  *a2 = 0;
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>((uint64_t)&v4, (uint64_t)&v6, 0);
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
  return a1;
}

void sub_212F02C3C(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

_QWORD *diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  int v7;
  const std::error_category *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *exception;
  uint64_t v13;
  _QWORD *v14;
  const std::error_category *v15;
  int v16;
  diskimage_uio::details::diskimage_open_params_impl *v17;
  __int128 v18;
  int v19;
  _QWORD v20[2];
  char v21;
  _QWORD v22[20];

  if (a1 == a2)
  {
    *(_QWORD *)&v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((_QWORD *)&v18 + 1) = 77;
    v19 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v20, &v18);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)v20, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = make_error_code(157);
    exception[1] = v13;
  }
  if (a1 + 16 == a2)
  {
    v16 = *(_DWORD *)a1;
    v7 = *(_DWORD *)a1;
    v8 = *(const std::error_category **)(a1 + 8);
    v17 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      *(_QWORD *)&v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
      *((_QWORD *)&v18 + 1) = 77;
      v19 = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(v20, &v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
      diskimage_uio::operator<<(v22, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" rather than image", 18);
      di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v20);
      v14 = __cxa_allocate_exception(0x10uLL);
      v15 = std::generic_category();
      *v14 = 22;
      v14[1] = v15;
    }
    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v8, (uint64_t)&v18);
    LODWORD(v20[0]) = 12;
    v21 = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v18, (uint64_t)v20))
    {
      v6 = (_QWORD *)operator new();
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      *v6 = &off_24CEF09E0;
    }
    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v17, (uint64_t)&v18);
      LODWORD(v20[0]) = 11;
      v21 = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v18, (uint64_t)v20)&& (v9 = (uint64_t *)*((_QWORD *)v17 + 6), v10 = v9[1], v10 - *v9 == 16))
      {
        v6 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(*v9, v10, a3);
      }
      else
      {
        v6 = (_QWORD *)operator new();
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      }
    }
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v17);
  }
  else
  {
    v6 = (_QWORD *)operator new();
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>(v6, a1, a2, a3);
  }
  return v6;
}

void sub_212F02ED0(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

_QWORD *diskimage_uio::diskimage::diskimage(_QWORD *a1, _DWORD **a2, uint64_t a3, char a4)
{
  _DWORD *v8;
  int v9;
  diskimage_uio::details::diskimage_open_params_impl **v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  _DWORD **v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  void *v37;
  const void *v38;
  void *v39;
  int v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  const void *v50;
  _OWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *exception;
  uint64_t v60;
  _QWORD *v61;
  const std::error_category *v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  diskimage_uio::details::diskimage_open_params_impl *v69;
  char v70;
  __int128 v71;
  unint64_t v72;
  void *lpsrc;
  diskimage_uio::details::diskimage_open_params_impl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[152];
  void *v79;
  int v80;
  std::error_category *v81;
  int v82;
  __int128 v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    *(_QWORD *)&v71 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
    *((_QWORD *)&v71 + 1) = 151;
    LODWORD(v72) = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(&lpsrc, &v71);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)&lpsrc, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)&lpsrc);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = make_error_code(157);
    exception[1] = v60;
  }
  if (a3 == 1)
  {
    v8 = *a2;
    LODWORD(lpsrc) = **a2;
    v9 = (int)lpsrc;
    v74 = (diskimage_uio::details::diskimage_open_params_impl *)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
    v68 = v9;
    v10 = &v69;
    v69 = v74;
    v74 = 0;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v74);
    if (v68)
    {
      *(_QWORD *)&v71 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((_QWORD *)&v71 + 1) = 151;
      LODWORD(v72) = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(&lpsrc, &v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
      diskimage_uio::operator<<(&v77, v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)" rather than image", 18);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf((uint64_t)&lpsrc);
      MEMORY[0x2199A89AC](v78);
      v61 = __cxa_allocate_exception(0x10uLL);
      v62 = std::generic_category();
      *v61 = 22;
      v61[1] = v62;
    }
    diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v69, (uint64_t)&v71);
    LODWORD(lpsrc) = 12;
    LOBYTE(v75) = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v71, (uint64_t)&lpsrc))
    {
      v11 = (_QWORD *)operator new();
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v11, (const std::error_category **)&v69);
      *v11 = &off_24CEF09E0;
    }
    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v69, (uint64_t)&v71);
      LODWORD(lpsrc) = 11;
      LOBYTE(v75) = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v71, (uint64_t)&lpsrc)&& (v18 = (uint64_t *)*((_QWORD *)v69 + 6), v19 = v18[1], v19 - *v18 == 16))
      {
        v11 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(*v18, v19, a4);
      }
      else
      {
        v11 = (_QWORD *)operator new();
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v11, (const std::error_category **)&v69);
      }
    }
    goto LABEL_70;
  }
  v12 = (_QWORD *)operator new();
  *v12 = &off_24CEF0938;
  v12[1] = 0;
  v13 = *a2;
  LODWORD(lpsrc) = **a2;
  v14 = (int)lpsrc;
  v74 = (diskimage_uio::details::diskimage_open_params_impl *)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = 0;
  v80 = v14;
  v10 = (diskimage_uio::details::diskimage_open_params_impl **)&v81;
  v81 = (std::error_category *)v74;
  v74 = 0;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v74);
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required(v81);
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership((diskimage_uio::details::diskimage_open_params_impl *)v81, &v79);
  v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v79 + 24))(v79);
  if (!v80)
  {
    *(_QWORD *)&v71 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
    *((_QWORD *)&v71 + 1) = 65;
    LODWORD(v72) = 16;
    di_log::logger<di_log::log_printer<1002ul>>::logger(&lpsrc, &v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot", 93);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf((uint64_t)&lpsrc);
    MEMORY[0x2199A89AC](v78);
    v63 = __cxa_allocate_exception(0x10uLL);
    *v63 = make_error_code(163);
    v63[1] = v64;
  }
  v16 = v15;
  v71 = 0uLL;
  v72 = 0;
  v17 = v79;
  v66 = a1;
  v67 = v12;
  v65 = a4;
  if (v80 == 1)
  {
    v79 = 0;
    lpsrc = v17;
    LODWORD(v74) = 2;
LABEL_24:
    v29 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v71, (uint64_t)&lpsrc);
    v30 = lpsrc;
    *((_QWORD *)&v71 + 1) = v29;
    lpsrc = 0;
    if (v30)
      (*(void (**)(void *))(*(_QWORD *)v30 + 16))(v30);
    goto LABEL_29;
  }
  v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v79 + 40))(v79);
  if (v80 == 3)
    v21 = v20;
  else
    v21 = 0;
  v22 = v79;
  if (v21 == 1 && v79 != 0)
  {
    if (v24)
      v24[184] = 0;
  }
  v25 = v21 ^ 1;
  v26 = *((_QWORD *)&v71 + 1);
  v79 = 0;
  lpsrc = v22;
  LODWORD(v74) = v25;
  if (*((_QWORD *)&v71 + 1) >= v72)
    goto LABEL_24;
  **((_QWORD **)&v71 + 1) = v22;
  if (v22)
  {
    v27 = (_QWORD *)operator new();
    v28 = lpsrc;
    *v27 = &off_24CEEED20;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
  }
  else
  {
    v27 = 0;
  }
  *(_QWORD *)(v26 + 8) = v27;
  lpsrc = 0;
  *(_DWORD *)(v26 + 16) = (_DWORD)v74;
  *((_QWORD *)&v71 + 1) = v26 + 24;
LABEL_29:
  v31 = a2 + 1;
  v32 = v80;
  v33 = v80 == 1;
  v34 = 8 * a3 - 8;
  do
  {
    v35 = *v31;
    LODWORD(lpsrc) = **v31;
    v36 = (int)lpsrc;
    v74 = (diskimage_uio::details::diskimage_open_params_impl *)*((_QWORD *)v35 + 1);
    *((_QWORD *)v35 + 1) = 0;
    v80 = v36;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v81, (uint64_t *)&v74);
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v74);
    diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required(v81);
    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v81, (uint64_t)&v68);
    if (!v70)
    {
      *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((_QWORD *)&v83 + 1) = 65;
      v84 = 16;
      di_log::logger<di_log::log_printer<1028ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Can't get image format", 36);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf((uint64_t)&lpsrc);
      MEMORY[0x2199A89AC](v78);
      v52 = __cxa_allocate_exception(0x10uLL);
      *v52 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v68);
    }
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership((diskimage_uio::details::diskimage_open_params_impl *)v81, &lpsrc);
    v37 = lpsrc;
    lpsrc = 0;
    v38 = v79;
    v79 = v37;
    if (v38)
    {
      (*(void (**)(const void *))(*(_QWORD *)v38 + 16))(v38);
      v39 = lpsrc;
      lpsrc = 0;
      if (v39)
        (*(void (**)(void *))(*(_QWORD *)v39 + 16))(v39);
      v37 = v79;
    }
    if (v37
    {
      *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((_QWORD *)&v83 + 1) = 65;
      v84 = 16;
      di_log::logger<di_log::log_printer<1035ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Nested stacking is not allowed.", 45);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf((uint64_t)&lpsrc);
      goto LABEL_75;
    }
    if ((*(uint64_t (**)(void *))(*(_QWORD *)v37 + 24))(v37) != v16)
    {
      *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((_QWORD *)&v83 + 1) = 65;
      v84 = 16;
      di_log::logger<di_log::log_printer<1040ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Multiple images given but block size differ. ", 59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)" block_size: ", 13);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)" / ", 3);
      (*(void (**)(void *))(*(_QWORD *)v79 + 24))(v79);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf((uint64_t)&lpsrc);
      goto LABEL_75;
    }
    if (v34 != 8)
    {
      if (v68 == 8)
      {
        if (v80 == 1)
        {
          if (v33)
          {
            *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
            *((_QWORD *)&v83 + 1) = 65;
            v84 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&lpsrc, &v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Only single cache is allowed", 42);
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf((uint64_t)&lpsrc);
          }
          else
          {
            if (v32 != 2)
            {
              v33 = 1;
              v40 = 2;
              goto LABEL_50;
            }
            *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
            *((_QWORD *)&v83 + 1) = 65;
            v84 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&lpsrc, &v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Snapshot detected on top of cache", 47);
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf((uint64_t)&lpsrc);
          }
        }
        else
        {
          if (v80 == 2)
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v79 + 40))(v79))
            {
              *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
              *((_QWORD *)&v83 + 1) = 65;
              v84 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&lpsrc, &v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Snapshots should be read only", 43);
              std::ostream::~ostream();
              di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf((uint64_t)&lpsrc);
              goto LABEL_82;
            }
            goto LABEL_46;
          }
          *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
          *((_QWORD *)&v83 + 1) = 65;
          v84 = 16;
          di_log::logger<di_log::log_printer<1063ul>>::logger(&lpsrc, &v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ", 109);
          diskimage_uio::operator<<(&v77, v80);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf((uint64_t)&lpsrc);
        }
LABEL_82:
        MEMORY[0x2199A89AC](v78);
        v57 = __cxa_allocate_exception(0x10uLL);
        *v57 = make_error_code(163);
        v57[1] = v58;
      }
      *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((_QWORD *)&v83 + 1) = 65;
      v84 = 16;
      di_log::logger<di_log::log_printer<1056ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ", 48);
      v56 = diskimage_uio::operator<<(&v77, v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" instead", 8);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf((uint64_t)&lpsrc);
LABEL_75:
      MEMORY[0x2199A89AC](v78);
      v53 = 163;
LABEL_76:
      v54 = __cxa_allocate_exception(0x10uLL);
      *v54 = make_error_code(v53);
      v54[1] = v55;
    }
    if (v80)
    {
      *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((_QWORD *)&v83 + 1) = 65;
      v84 = 16;
      di_log::logger<di_log::log_printer<1048ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ", 59);
      diskimage_uio::operator<<(&v77, v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)" given", 6);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf((uint64_t)&lpsrc);
      goto LABEL_75;
    }
    (*(void (**)(void *))(*(_QWORD *)v79 + 40))(v79);
LABEL_46:
    v40 = 1;
LABEL_50:
    if (v68 != 12)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v79 + 72))(&lpsrc);
      if (lpsrc || v74 || v75 || v76)
      {
        *(_QWORD *)&v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
        *((_QWORD *)&v83 + 1) = 65;
        v84 = 16;
        di_log::logger<di_log::log_printer<1089ul>>::logger(&lpsrc, &v83);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf((uint64_t)&lpsrc);
        MEMORY[0x2199A89AC](v78);
        v53 = 164;
        goto LABEL_76;
      }
    }
    v41 = v79;
    v79 = 0;
    lpsrc = v41;
    LODWORD(v74) = v40;
    v42 = *((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1) >= v72)
    {
      v45 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v71, (uint64_t)&lpsrc);
      v46 = lpsrc;
      *((_QWORD *)&v71 + 1) = v45;
      lpsrc = 0;
      if (v46)
        (*(void (**)(void *))(*(_QWORD *)v46 + 16))(v46);
    }
    else
    {
      **((_QWORD **)&v71 + 1) = v41;
      if (v41)
      {
        v43 = (_QWORD *)operator new();
        v44 = lpsrc;
        *v43 = &off_24CEEED20;
        v43[1] = 0;
        v43[2] = 0;
        v43[3] = v44;
      }
      else
      {
        v43 = 0;
      }
      *(_QWORD *)(v42 + 8) = v43;
      lpsrc = 0;
      *(_DWORD *)(v42 + 16) = (_DWORD)v74;
      *((_QWORD *)&v71 + 1) = v42 + 24;
    }
    ++v31;
    v34 -= 8;
  }
  while (v34);
  v47 = operator new();
  if ((v65 & 1) != 0)
    v48 = 1;
  else
    v48 = 2;
  v82 = v48;
  *(_QWORD *)&v83 = 0x200000001;
  v11 = v67;
  smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v48, (int *)&v83, 2);
  a1 = v66;
  DiskImageStackable::DiskImageStackable(v47, &v71, &v82);
  v49 = v67[1];
  v67[1] = v47;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
  lpsrc = &v71;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  v50 = v79;
  v79 = 0;
  if (v50)
    (*(void (**)(const void *))(*(_QWORD *)v50 + 16))(v50);
LABEL_70:
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v10);
  *a1 = v11;
  return a1;
}

void sub_212F03C98(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

void sub_212F03DA0()
{
  JUMPOUT(0x212F040E4);
}

void sub_212F03DA8()
{
  JUMPOUT(0x212F04134);
}

void sub_212F03DB0()
{
  uint64_t v0;

  MEMORY[0x2199A8A18](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x212F03DD0);
}

void sub_212F03E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  diskimage_uio::diskimage_open_params *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  __cxa_end_catch();
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  v22 = *(_QWORD *)(v20 - 152);
  *(_QWORD *)(v20 - 152) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v19);
  v23 = *(_QWORD *)(a12 + 8);
  *(_QWORD *)(a12 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  MEMORY[0x2199A8A18](a12, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_212F03EC4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x212F04134);
}

void sub_212F03ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F03EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F03F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F03F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F03F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  diskimage_uio::diskimage_open_params *v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  __cxa_free_exception(v20);
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  v23 = *(_QWORD *)(v21 - 152);
  *(_QWORD *)(v21 - 152) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v19);
  v24 = *(_QWORD *)(a12 + 8);
  *(_QWORD *)(a12 + 8) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  MEMORY[0x2199A8A18](a12, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_212F03F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F03FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F03FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F03FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F04020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf((uint64_t)va);
  JUMPOUT(0x212F04080);
}

void sub_212F04048()
{
  JUMPOUT(0x212F040A4);
}

_QWORD *diskimage_uio::diskimage::diskimage(_QWORD *a1, uint64_t *a2, char a3)
{
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(*a2, a2[1], a3);
  return a1;
}

{
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(*a2, a2[1], a3);
  return a1;
}

_QWORD *diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  int v7;
  const std::error_category *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *exception;
  uint64_t v13;
  _QWORD *v14;
  const std::error_category *v15;
  int v16;
  diskimage_uio::details::diskimage_open_params_impl *v17;
  __int128 v18;
  int v19;
  _QWORD v20[2];
  char v21;
  _QWORD v22[20];

  if (a1 == a2)
  {
    *(_QWORD *)&v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((_QWORD *)&v18 + 1) = 77;
    v19 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v20, &v18);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)v20, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = make_error_code(157);
    exception[1] = v13;
  }
  if (a1 + 16 == a2)
  {
    v16 = *(_DWORD *)a1;
    v7 = *(_DWORD *)a1;
    v8 = *(const std::error_category **)(a1 + 8);
    v17 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      *(_QWORD *)&v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
      *((_QWORD *)&v18 + 1) = 77;
      v19 = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(v20, &v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
      diskimage_uio::operator<<(v22, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" rather than image", 18);
      di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v20);
      v14 = __cxa_allocate_exception(0x10uLL);
      v15 = std::generic_category();
      *v14 = 22;
      v14[1] = v15;
    }
    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v8, (uint64_t)&v18);
    LODWORD(v20[0]) = 12;
    v21 = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v18, (uint64_t)v20))
    {
      v6 = (_QWORD *)operator new();
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      *v6 = &off_24CEF09E0;
    }
    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v17, (uint64_t)&v18);
      LODWORD(v20[0]) = 11;
      v21 = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v18, (uint64_t)v20)&& (v9 = (uint64_t *)*((_QWORD *)v17 + 6), v10 = v9[1], v10 - *v9 == 16))
      {
        v6 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(*v9, v10, a3);
      }
      else
      {
        v6 = (_QWORD *)operator new();
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      }
    }
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v17);
  }
  else
  {
    v6 = (_QWORD *)operator new();
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(v6, a1, a2, a3);
  }
  return v6;
}

void sub_212F043EC(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

_QWORD *diskimage_uio::diskimage::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = diskimage_uio::diskimage::diskimage(&v4, a1);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void diskimage_uio::diskimage::~diskimage(diskimage_uio::diskimage *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = 0;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = 0;
}

_QWORD *diskimage_uio::diskimage::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;

  result = diskimage_uio::diskimage::diskimage(&v6, a1, a2, a3);
  *(_QWORD *)a4 = v6;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *diskimage_uio::diskimage::create@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *result;

  result = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(*a1, a1[1], a2);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *diskimage_uio::diskimage::diskimage(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *diskimage_uio::diskimage::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

uint64_t diskimage_uio::diskimage::is_read_only(diskimage_uio::diskimage *this)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8) + 40))(*(_QWORD *)(*(_QWORD *)this + 8)) ^ 1;
}

uint64_t diskimage_uio::diskimage::get_block_size(diskimage_uio::diskimage *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8) + 24))(*(_QWORD *)(*(_QWORD *)this + 8));
}

uint64_t diskimage_uio::diskimage::get_nr_blocks(diskimage_uio::diskimage *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8) + 32))(*(_QWORD *)(*(_QWORD *)this + 8));
}

uint64_t diskimage_uio::diskimage::create_context@<X0>(diskimage_uio::details::diskimage_impl **this@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_impl::create_context(*this, a2);
}

uint64_t diskimage_uio::details::diskimage_impl::create_context@<X0>(diskimage_uio::details::diskimage_impl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD v4[2];
  char v5;

  result = diskimage_uio::details::diskimage_impl::create_context_impl(this, (uint64_t)v4);
  if (v5)
  {
    *(_QWORD *)a2 = v4[0];
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    result = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v4);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_BYTE *)(a2 + 16) = 0;
    if (v5)
    {
      result = v4[0];
      v4[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
  }
  return result;
}

void sub_212F04720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
    diskimage_uio::details::diskimage_impl::create_context(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::details::diskimage_impl::subscribe_to_ring(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2))
{
  const void *v4;
  _QWORD *v5;
  di_hybrid_subscriber_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    if (!v5 || (v4 = *(const void **)(v5[3] - 24)) != 0)
    {
      {
        v6 = (di_hybrid_subscriber_t *)operator new();
        di_hybrid_subscriber_t::di_hybrid_subscriber_t(v6, a2, a1);
        *((_QWORD *)v6 + 8) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke;
        *((_QWORD *)v6 + 9) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_2::__invoke;
        *((_QWORD *)v6 + 10) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_1::__invoke;
        *((_QWORD *)v6 + 11) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_3::__invoke;
        v14[0] = v6;
        *((_QWORD *)v6 + 12) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_4::__invoke;
        *((_QWORD *)v6 + 13) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_5::__invoke;
        *((_QWORD *)v6 + 14) = diskimage_uio::details::setup_di_subscriber<di_hybrid_subscriber_t>(di_hybrid_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke;
        v7 = io_rings_subscriber_subscribe((uint64_t)a2, (uint64_t)v6);
        if ((v7 & 0x80000000) != 0)
        {
          di_hybrid_subscriber_t::~di_hybrid_subscriber_t(v6);
          MEMORY[0x2199A8A18]();
        }
        return v7;
      }
    }
  }
  v8 = (_QWORD *)operator new();
  v15 = 0;
  io_rings_di_subscriber_t::io_rings_di_subscriber_t((uint64_t)v8, a2, a1, (uint64_t)v14);
  v13 = v8;
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_11;
  }
  if (v15)
  {
    v10 = 5;
LABEL_11:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v8[8] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke;
  v8[9] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_2::__invoke;
  v8[10] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_1::__invoke;
  v8[11] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_3::__invoke;
  v8[12] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_4::__invoke;
  v8[13] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_5::__invoke;
  v8[14] = diskimage_uio::details::setup_di_subscriber<io_rings_di_subscriber_t>(io_rings_di_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke;
  v7 = io_rings_subscriber_subscribe((uint64_t)a2, (uint64_t)v8);
  if ((v7 & 0x80000000) != 0)
  {
    v11 = (uint64_t)v13;
    v13 = 0;
    if (v11)
      std::default_delete<io_rings_di_subscriber_t>::operator()[abi:ne180100]((uint64_t)&v13, v11);
  }
  return v7;
}

void sub_212F0496C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<di_hybrid_subscriber_t>::reset[abi:ne180100]((di_hybrid_subscriber_t **)va, 0);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x212F04938);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_plugin_impl::subscribe_to_ring(uint64_t a1, uint64_t a2)
{
  return DiskImagePlugin::subscribe_to_ring(*(_QWORD *)(a1 + 8), a2);
}

uint64_t diskimage_uio::diskimage::subscribe_to_ring(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
}

uint64_t diskimage_uio::add_di_role@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = *a2;
  *a2 = 0;
  return result;
}

_QWORD *diskimage_uio::operator<<(_QWORD *a1, int a2)
{
  const char *v2;
  uint64_t v3;

  if (a2 == 2)
  {
    v2 = "auto";
    v3 = 4;
  }
  else if (a2 == 1)
  {
    v2 = "read write";
    v3 = 10;
  }
  else if (a2)
  {
    v2 = "unknown";
    v3 = 7;
  }
  else
  {
    v2 = "read only";
    v3 = 9;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;

  switch(a2)
  {
    case 0:
      v2 = "image";
      goto LABEL_6;
    case 1:
      v2 = "cache";
LABEL_6:
      v3 = 5;
      break;
    case 2:
      v2 = "snapshot";
      v3 = 8;
      break;
    case 3:
      v2 = "shadow";
      v3 = 6;
      break;
    default:
      v2 = "unknown";
      v3 = 7;
      break;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;

  switch(a2)
  {
    case 1:
      v2 = "raw";
      v3 = 3;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
    case 2:
      v2 = "udro";
      goto LABEL_11;
    case 3:
      v2 = "udzo";
      goto LABEL_11;
    case 4:
      v2 = "ulfo";
      goto LABEL_11;
    case 5:
      v2 = "ulmo";
      goto LABEL_11;
    case 6:
      v2 = "udzo_max";
      v3 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
    case 7:
      v2 = "udsb";
      goto LABEL_11;
    case 8:
      v2 = "asif";
LABEL_11:
      v3 = 4;
      break;
    case 11:
      v2 = "pstack";
      v3 = 6;
      break;
    default:
      v2 = "unknown";
      v3 = 7;
      break;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  int v2;
  int v4;

  if ((a2 - 1) >= 3)
    v2 = 0;
  else
    v2 = a2;
  v4 = v2;
  return operator<<(a1, &v4);
}

uint64_t io_rings_di_subscriber_t::io_rings_di_subscriber_t(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2), uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a1 + 120) = 850045863;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = -1;
  *(_QWORD *)(a1 + 240) = a3;
  if (*(_QWORD *)(a4 + 24))
  {
    std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 248, a4);
  }
  else
  {
    *(_QWORD *)(a1 + 248) = &off_24CEF88F0;
    *(_QWORD *)(a1 + 256) = a1;
    *(_QWORD *)(a1 + 272) = a1 + 248;
  }
  io_rings_subscriber_sync_init((uint64_t (**)(uint64_t, uint64_t))a1, a2);
  *(_QWORD *)a1 = io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_1::__invoke;
  return a1;
}

void sub_212F04D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(v1);
  _Unwind_Resume(a1);
}

uint64_t io_rings_di_subscriber_t::get_di(io_rings_di_subscriber_t *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 30) + 8);
}

uint64_t io_rings_di_subscriber_t::get_ctx@<X0>(io_rings_di_subscriber_t *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;

  v4 = (char *)this + 120;
  v5 = *((_QWORD *)this + 28);
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 24)
                                          + (((unint64_t)(*((_QWORD *)this + 27) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((*((_QWORD *)this + 27) + v6) & 0x1FF));
      do
        v8 = __ldaxr(v7);
      while (__stlxr(0, v7));
      if (v8)
        break;
      if (++v6 == v5)
        goto LABEL_7;
    }
    *a2 = v4;
    a2[1] = v8;
    v16 = (unint64_t)v4;
    a2[2] = v6;
    v17 = -2;
  }
  else
  {
LABEL_7:
    v16 = 0uLL;
    v17 = -1;
    v9 = *((_QWORD *)this + 34);
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9 + 48))(&v14);
    if (v15)
    {
      v10 = *((_QWORD *)this + 29);
      if ((v10 & 0x8000000000000000) != 0 || *((_QWORD *)this + 28) + 1 <= v10)
        v11 = -1;
      else
        v11 = -2;
      v12 = v14;
      *a2 = v4;
      a2[1] = v12;
      a2[2] = v11;
    }
    else
    {
      *(_OWORD *)a2 = v16;
      a2[2] = v17;
      *((_QWORD *)&v16 + 1) = 0;
      v17 = -2;
    }
  }
  return pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)&v16);
}

void sub_212F04E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)va);
  _Unwind_Resume(a1);
}

void ***pstack_header::pstack_header(void ***a1, const void **a2, char *a3, char a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int **v10;
  int **i;
  const std::error_category *v12;
  char *v13;
  uint64_t v14;
  void **v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  std::string::size_type v28;
  void *v29;
  char *v30;
  int v31;
  std::string::size_type v32;
  void *v33;
  char *v35;
  __int128 v36;
  _QWORD *exception;
  const std::error_category *v38;
  _QWORD *v39;
  const std::error_category *v40;
  std::__fs::filesystem::path v41;
  _QWORD v42[2];
  char v43;
  int **v44;
  int **v45;
  _QWORD v46[3];
  std::string __p;
  void *v48;
  void **v49;

  *a1 = 0;
  if (!*a2
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v38 = std::generic_category();
    exception[1] = 22;
    exception[2] = v38;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "pstack_header";
    *exception = &off_24CEF8488;
  }
  memset(v46, 0, sizeof(v46));
  v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 176))(v7);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  create_stack_vector_from_single_fd((const std::__fs::filesystem::path *)&__p, v8, a4, (uint64_t)&v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v44 == v45)
  {
    v39 = __cxa_allocate_exception(0x40uLL);
    *v39 = &off_24CF07908;
    v40 = std::generic_category();
    v39[1] = 22;
    v39[2] = v40;
    *((_BYTE *)v39 + 24) = 0;
    *((_BYTE *)v39 + 48) = 0;
    v39[7] = "pstack_header";
    *v39 = &off_24CEF8488;
  }
  v9 = operator new();
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  __p.__r_.__value_.__r.__words[0] = 0;
  std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](a1, (void **)v9);
  std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<diskimage_uio::diskimage_open_params_pair>::reserve((char **)*a1, v45 - v44);
  v10 = v44;
  for (i = v45; v10 != i; ++v10)
  {
    v12 = std::generic_category();
    v42[0] = 22;
    v42[1] = v12;
    v43 = 0;
    v13 = (char *)*v10;
    v14 = *((_QWORD *)*v10 + 7);
    if (v14)
    {
      diskimage_uio::diskimage_open_params::create((uint64_t)(v13 + 32), v14, *((_DWORD *)v13 + 1), (uint64_t)&__p);
      diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::operator=((diskimage_uio::diskimage_open_params *)v42, (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16])
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
    }
    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v41.__pn_, v13 + 8);
      diskimage_uio::diskimage_open_params::create(&v41, (*v10)[1], (uint64_t)&__p);
      diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::operator=((diskimage_uio::diskimage_open_params *)v42, (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16])
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
      if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__pn_.__r_.__value_.__l.__data_);
    }
    if (!v43)
    {
      v35 = (char *)__cxa_allocate_exception(0x40uLL);
      v36 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v42);
      *(_QWORD *)v35 = &off_24CF07908;
      *(_OWORD *)(v35 + 8) = v36;
      v35[24] = 0;
      v35[48] = 0;
      *((_QWORD *)v35 + 7) = "pstack: unsupported node";
    }
    v15 = *a1;
    v16 = **v10;
    LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = v16;
    v17 = v42[0];
    v41.__pn_.__r_.__value_.__l.__size_ = v42[0];
    v42[0] = 0;
    v18 = (char *)v15[1];
    v19 = (char *)v15[2];
    if (v18 >= v19)
    {
      v21 = (v18 - (_BYTE *)*v15) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        std::vector<iovec>::__throw_length_error[abi:ne180100]();
      v23 = v19 - (_BYTE *)*v15;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      v49 = v15 + 2;
      v25 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)(v15 + 2), v24);
      v27 = &v25[16 * v21];
      *(_DWORD *)v27 = v41.__pn_.__r_.__value_.__l.__data_;
      *((_QWORD *)v27 + 1) = v41.__pn_.__r_.__value_.__l.__size_;
      v41.__pn_.__r_.__value_.__l.__size_ = 0;
      v29 = *v15;
      v28 = (std::string::size_type)v15[1];
      if ((void *)v28 == *v15)
      {
        v32 = (std::string::size_type)v15[1];
        v30 = &v25[16 * v21];
      }
      else
      {
        v30 = &v25[16 * v21];
        do
        {
          v31 = *(_DWORD *)(v28 - 16);
          v28 -= 16;
          *((_DWORD *)v30 - 4) = v31;
          v30 -= 16;
          *((_QWORD *)v30 + 1) = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
        }
        while ((void *)v28 != v29);
        v32 = (std::string::size_type)*v15;
        v28 = (std::string::size_type)v15[1];
      }
      v20 = v27 + 16;
      *v15 = v30;
      __p.__r_.__value_.__r.__words[0] = v32;
      __p.__r_.__value_.__l.__size_ = v32;
      v15[1] = v27 + 16;
      __p.__r_.__value_.__r.__words[2] = v28;
      v33 = v15[2];
      v15[2] = &v25[16 * v26];
      v48 = v33;
      std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&__p);
    }
    else
    {
      *(_DWORD *)v18 = v16;
      *((_QWORD *)v18 + 1) = v17;
      v20 = v18 + 16;
      v41.__pn_.__r_.__value_.__l.__size_ = 0;
    }
    v15[1] = v20;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v41.__pn_.__r_.__value_.__r.__words[1]);
    if (v43)
      diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v42);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return a1;
}

void sub_212F052D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,char a27,int a28,__int16 a29,char a30)
{
  void ***v30;

  a16 = &a19;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](v30, 0);
  _Unwind_Resume(a1);
}

void header_exception::header_exception(header_exception *this, const char *a2, unsigned int a3)
{
  const std::error_category *v6;

  *(_QWORD *)this = &off_24CF07908;
  v6 = std::generic_category();
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = v6;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = a2;
  *(_QWORD *)this = &off_24CEF8488;
}

uint64_t std::vector<diskimage_uio::diskimage_open_params_pair>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  int v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](result, a2);
    v9 = *a1;
    v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      v12 = vdupq_n_s64(v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((_QWORD *)v10 + 1) = *(_QWORD *)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;
      }
      while ((char *)v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

diskimage_uio::diskimage_open_params *diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::operator=(diskimage_uio::diskimage_open_params *a1, __int128 *a2)
{
  __int128 v4;
  char v5;

  v5 = *((_BYTE *)a2 + 16);
  if (v5)
  {
    *(_QWORD *)&v4 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v4 = *a2;
  }
  diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::swap((diskimage_uio::diskimage_open_params *)&v4, a1);
  if (v5)
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  return a1;
}

void sub_212F05550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node(uint64_t a1, int a2, int a3, __int128 *a4, __int128 *a5, CFTypeRef cf)
{
  __int128 v9;
  __int128 v10;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(_QWORD *)(a1 + 56) = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

void sub_212F05610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    CFRelease(v2);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void diskimage_uio::details::diskimage_impl::~diskimage_impl(diskimage_uio::details::diskimage_impl *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24CEF0938;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24CEF0938;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  JUMPOUT(0x2199A8A18);
}

void diskimage_uio::details::diskimage_plugin_impl::~diskimage_plugin_impl(diskimage_uio::details::diskimage_plugin_impl *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24CEF0938;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24CEF0938;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  JUMPOUT(0x2199A8A18);
}

void diskimage_uio::`anonymous namespace'::di_err_category::~di_err_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2199A8A18);
}

const char *diskimage_uio::`anonymous namespace'::di_err_category::name(diskimage_uio::_anonymous_namespace_::di_err_category *this)
{
  return "disk image";
}

_QWORD *diskimage_uio::`anonymous namespace'::di_err_category::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if ((a1 - 150) > 0x10)
    v3 = "(unrecognized error)";
  else
    v3 = off_24CEF8960[a1 - 150];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1109ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF0BD8;
  di_log::logger_buf<di_log::log_printer<1109ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1109ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F05BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1109ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1109;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1109;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 24, (__int128 *)((char *)a2 + 24));
  v5 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    MEMORY[0x2199A8A18](v6, 0x1000C4015A9971DLL);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(a1 + 48, (uint64_t)(a2 + 3));
  v7 = *((_QWORD *)a2 + 70);
  *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
  *(_QWORD *)(a1 + 560) = v7;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 576, a2 + 36);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 592, a2 + 37);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 608, a2 + 38);
  return a1;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::operator=(uint64_t a1, __int128 *a2)
{
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, a2);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 16, a2 + 1);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 32, a2 + 2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 504);
  v4 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CEF0C48[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24CEF0C78[v4])(&v5, result, a2);
}

void ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS8_SA_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void ***a2)
{
  return std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](a2, 0);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS8_SA_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 504))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<1ul,udif::header,udif::header>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = *a1;
  if (*(_DWORD *)(result + 504) != 2)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<2ul,di_asif::header>(result, (uint64_t)a3);
  *a2 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 504) != 3)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<3ul,raw_header>(result, a3);
  *a2 = *a3;
  return result;
}

void ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, void ***a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<4ul,pstack_header,pstack_header>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<0ul,std::monostate>(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CEF0C48[v2])(&v4, a1);
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<1ul,udif::header,udif::header>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v3 = *(_OWORD *)(a3 + 16);
    v4 = *(_OWORD *)(a3 + 32);
    v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + 32) = v4;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    v6 = *(_OWORD *)(a3 + 88);
    v7 = *(_OWORD *)(a3 + 104);
    v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 88) = v6;
    v9 = *(_OWORD *)(a3 + 152);
    v10 = *(_OWORD *)(a3 + 168);
    v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 168) = v10;
    *(_OWORD *)(a2 + 152) = v9;
    v12 = *(_OWORD *)(a3 + 248);
    v13 = *(_OWORD *)(a3 + 264);
    v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 264) = v13;
    *(_OWORD *)(a2 + 280) = v14;
    *(_OWORD *)(a2 + 248) = v12;
    v16 = *(_OWORD *)(a3 + 312);
    v15 = *(_OWORD *)(a3 + 328);
    v17 = *(_OWORD *)(a3 + 296);
    *(_QWORD *)(a2 + 344) = *(_QWORD *)(a3 + 344);
    *(_OWORD *)(a2 + 312) = v16;
    *(_OWORD *)(a2 + 328) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 352) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    v18 = *(_OWORD *)(a3 + 360);
    v19 = *(_OWORD *)(a3 + 376);
    v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 408) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 392) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 360) = v18;
    v21 = *(_OWORD *)(a3 + 424);
    v22 = *(_OWORD *)(a3 + 440);
    v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 440) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    v24 = *(_QWORD *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(_QWORD *)(a2 + 488) = v24;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<1ul,udif::header>(a1, a3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<1ul,udif::header>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CEF0C48[v4])(&v5, a1);
  *(_DWORD *)(a1 + 504) = -1;
  std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + 8) = 512;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  v7 = *(_OWORD *)(a2 + 152);
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  v10 = *(_OWORD *)(a2 + 248);
  v11 = *(_OWORD *)(a2 + 264);
  v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 248) = v10;
  v14 = *(_OWORD *)(a2 + 312);
  v13 = *(_OWORD *)(a2 + 328);
  v15 = *(_OWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  v16 = *(_OWORD *)(a2 + 360);
  v17 = *(_OWORD *)(a2 + 376);
  v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 360) = v16;
  result = *(__n128 *)(a2 + 424);
  v20 = *(_OWORD *)(a2 + 440);
  v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 440) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 492) = *(_QWORD *)(a2 + 492);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<2ul,di_asif::header>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v9;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CEF0C48[v4])(&v9, a1);
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 62) = *(_QWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 70) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<3ul,raw_header>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CEF0C48[v4])(&v6, a1);
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void ***std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<4ul,pstack_header,pstack_header>(uint64_t a1, void ***a2, uint64_t *a3)
{
  void **v3;

  if (*(_DWORD *)(a1 + 504) != 4)
    return (void ***)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<4ul,pstack_header>(a1, a3);
  v3 = (void **)*a3;
  *a3 = 0;
  return std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](a2, v3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<4ul,pstack_header>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CEF0C48[v4])(&v7, a1);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  __int128 v6;

  if (*(_DWORD *)(a1 + 504) == 5)
  {
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a2, (__int128 *)a3);
    v5 = (void **)(a2 + 16);
    if (*(char *)(a2 + 39) < 0)
      operator delete(*v5);
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v5 = v6;
    *(_BYTE *)(a3 + 39) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<5ul,plugin_header>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<5ul,plugin_header>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24CEF0C48[v4])(&v7, a1);
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1122ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF0E58;
  di_log::logger_buf<di_log::log_printer<1122ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1122ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F069E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<1122ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1122;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1122;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(uint64_t a1@<X8>)
{
  const std::error_category *result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)&v3 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((_QWORD *)&v3 + 1) = 110;
  v4 = 16;
  di_log::logger<di_log::log_printer<1134ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x2199A89AC](&v7);
  result = std::generic_category();
  *(_QWORD *)a1 = 6;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_212F06CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf((uint64_t)va);
  MEMORY[0x2199A89AC](v4 + 368);
  _Unwind_Resume(a1);
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  const std::error_category *result;
  __int128 v27;
  int v28;
  uint64_t v29[2];
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[504];
  int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(**a1 + 24);
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif (v5, (uint64_t)v33);
  if (!v35)
    goto LABEL_4;
  if (v34 != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (!udif::header::operator==((uint64_t)v33, a2))
  {
    *(_QWORD *)&v27 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = udif::header]";
    *((_QWORD *)&v27 + 1) = 110;
    v28 = 16;
    di_log::logger<di_log::log_printer<1146ul>>::logger(v29, &v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Diskimageuio: UDIF header changed while unlocked", 48);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf((uint64_t)v29);
    MEMORY[0x2199A89AC](&v32);
    result = std::generic_category();
    *(_QWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
LABEL_4:
    v6 = operator new();
    *(_QWORD *)v6 = 0x4796C6F6BLL;
    v7 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(v6 + 8) = 512;
    *(_DWORD *)(v6 + 12) = v7;
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v6 + 32) = v8;
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v6 + 80) = *(_QWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 88);
    v10 = *(_OWORD *)(a2 + 104);
    v11 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v6 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v6 + 120) = v11;
    *(_OWORD *)(v6 + 104) = v10;
    *(_OWORD *)(v6 + 88) = v9;
    v12 = *(_OWORD *)(a2 + 152);
    v13 = *(_OWORD *)(a2 + 168);
    v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v6 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(v6 + 184) = v14;
    *(_OWORD *)(v6 + 168) = v13;
    *(_OWORD *)(v6 + 152) = v12;
    *(_OWORD *)(v6 + 216) = *(_OWORD *)(a2 + 216);
    v15 = *(_OWORD *)(a2 + 232);
    v16 = *(_OWORD *)(a2 + 248);
    v17 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(v6 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v6 + 280) = v17;
    *(_OWORD *)(v6 + 248) = v16;
    *(_OWORD *)(v6 + 232) = v15;
    v18 = *(_OWORD *)(a2 + 296);
    v19 = *(_OWORD *)(a2 + 312);
    v20 = *(_OWORD *)(a2 + 328);
    *(_QWORD *)(v6 + 344) = *(_QWORD *)(a2 + 344);
    *(_OWORD *)(v6 + 312) = v19;
    *(_OWORD *)(v6 + 328) = v20;
    *(_OWORD *)(v6 + 296) = v18;
    *(_QWORD *)(v6 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(v6 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(v6 + 440) = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(v6 + 456) = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(v6 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(v6 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(v6 + 408) = *(_OWORD *)(a2 + 408);
    *(_DWORD *)(v6 + 488) = *(_DWORD *)(a2 + 488);
    *(_QWORD *)(v6 + 492) = *(_QWORD *)(a2 + 492);
    *(_QWORD *)&v27 = v6;
    UDIF_header::UDIF_header(v29, (uint64_t *)&v27, v5);
    v21 = (_QWORD *)operator new();
    DiskImageUDIF::DiskImageUDIF(v21, v29, v5);
    *(_QWORD *)a3 = v21;
    *(_BYTE *)(a3 + 16) = 1;
    v22 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v29[0];
    v29[0] = 0;
    if (v25)
      MEMORY[0x2199A8A18](v25, 0x1000C407784F2AFLL);
    result = (const std::error_category *)v27;
    *(_QWORD *)&v27 = 0;
    if (result)
      result = (const std::error_category *)MEMORY[0x2199A8A18](result, 0x1000C407784F2AFLL);
  }
  if (v35)
    return (const std::error_category *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v33);
  return result;
}

void sub_212F0700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf((uint64_t)&a13);
  MEMORY[0x2199A89AC](&a59);
  if (LOBYTE(STACK[0x430]))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(_QWORD **a1@<X0>, Backend *a2@<X1>, uint64_t a3@<X8>)
{
  Backend **v5;
  uint64_t v6;
  const di_asif::header *v7;
  uint64_t dir_latest_offset;
  uint64_t v9;
  const std::error_category *result;
  char v11;
  __int128 v12;
  int v13;
  _QWORD v14[45];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[504];
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (Backend **)(**a1 + 24);
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif (v5, (uint64_t)v17);
  if (!v19)
    goto LABEL_4;
  if (v18 != 2)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (!di_asif::header::operator==((uint64_t)v17, (uint64_t)a2))
  {
    *(_QWORD *)&v12 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = di_asif::header]";
    *((_QWORD *)&v12 + 1) = 110;
    v13 = 16;
    di_log::logger<di_log::log_printer<1153ul>>::logger(v14, &v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Diskimageuio: ASIF header changed while unlocked", 48);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x2199A89AC](&v16);
    result = std::generic_category();
    v11 = 0;
    *(_QWORD *)a3 = 35;
    *(_QWORD *)(a3 + 8) = result;
  }
  else
  {
LABEL_4:
    v6 = operator new();
    dir_latest_offset = DiskImageASIF::get_dir_latest_offset((DiskImageASIF *)*v5, a2, v7);
    result = (const std::error_category *)DiskImageASIF::DiskImageASIF(v6, v5, a2, dir_latest_offset, v9, &DiskImageASIF::default_options);
    *(_QWORD *)a3 = v6;
    v11 = 1;
  }
  *(_BYTE *)(a3 + 16) = v11;
  if (v19)
    return (const std::error_category *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
  return result;
}

void sub_212F07290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf((uint64_t)&a13);
  MEMORY[0x2199A89AC](&a59);
  if (LOBYTE(STACK[0x430]))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(_QWORD **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  const Backend **v5;
  unint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[63];
  int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (const Backend **)(**a1 + 24);
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw(v5, *a2, (uint64_t)v15);
  if (v17)
  {
    if (v16 != 3)
      std::__throw_bad_variant_access[abi:ne180100]();
    v6 = v15[0];
    if (v15[0] != *a2 || v15[1] != a2[1])
    {
      *(_QWORD *)&v10 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = raw_header]";
      *((_QWORD *)&v10 + 1) = 110;
      v11 = 16;
      di_log::logger<di_log::log_printer<1139ul>>::logger(v12, &v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Diskimageuio: Raw header changed while unlocked", 47);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf((uint64_t)v12);
      MEMORY[0x2199A89AC](&v14);
      result = (uint64_t)std::generic_category();
      v8 = 0;
      *(_QWORD *)a3 = 35;
      *(_QWORD *)(a3 + 8) = result;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = *a2;
  }
  v9 = operator new();
  result = DiskImageRaw::DiskImageRaw(v9, v5, v6);
  *(_QWORD *)a3 = v9;
  v8 = 1;
LABEL_8:
  *(_BYTE *)(a3 + 16) = v8;
  if (v17)
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
  return result;
}

void sub_212F07484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf((uint64_t)&a13);
  MEMORY[0x2199A89AC](&a59);
  if (LOBYTE(STACK[0x430]))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>(diskimage_uio::details::diskimage_open_params_impl ****a1@<X1>, uint64_t a2@<X8>)
{
  diskimage_uio::details::diskimage_open_params_impl **v3;
  int *v4;
  int v5;
  int v6;
  diskimage_uio::details::diskimage_open_params_impl *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  const std::error_category *v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _BYTE v35[152];
  __int128 v36;
  int v37;
  __int128 v38;
  _QWORD v39[2];

  v38 = 0uLL;
  v39[0] = 0;
  v3 = **a1;
  v4 = (int *)(*a1)[1];
  if (v3 == (diskimage_uio::details::diskimage_open_params_impl **)v4)
  {
    v25 = 0;
    v24 = 0;
LABEL_26:
    if (v25 - v24 == 16)
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format(*(const std::error_category **)(v24 + 8), (uint64_t)&v36);
      LODWORD(v30) = 12;
      v31.i8[8] = 1;
      v26 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v36, (uint64_t)&v30);
      v24 = v38;
      if (v26)
      {
        if (*(_DWORD *)v38)
        {
          *(_QWORD *)&v36 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = pstack_header]";
          *((_QWORD *)&v36 + 1) = 110;
          v37 = 16;
          di_log::logger<di_log::log_printer<1170ul>>::logger(&v30, &v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Diskimageuio: Single element in pstack that isn't an image", 58);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf((uint64_t)&v30);
          MEMORY[0x2199A89AC](v35);
          v27 = std::generic_category();
          *(_QWORD *)a2 = 22;
          *(_QWORD *)(a2 + 8) = v27;
          *(_BYTE *)(a2 + 16) = 0;
          goto LABEL_33;
        }
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)&v30, (const std::error_category **)(v38 + 8));
LABEL_32:
        *(_QWORD *)a2 = v31.i64[0];
        *(_BYTE *)(a2 + 16) = 1;
        goto LABEL_33;
      }
      v25 = *((_QWORD *)&v38 + 1);
    }
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(&v30, v24, v25, 0);
    goto LABEL_32;
  }
  while (1)
  {
    diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr((uint64_t *)&v36, v3[1]);
    v5 = v37;
    if ((_BYTE)v37)
    {
      v6 = *(_DWORD *)v3;
      LODWORD(v28) = *(_DWORD *)v3;
      v7 = v3[1];
      *((_QWORD *)&v28 + 1) = v7;
      v3[1] = 0;
      v8 = *((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) >= v39[0])
      {
        v10 = (uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 4;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          std::vector<iovec>::__throw_length_error[abi:ne180100]();
        v12 = v39[0] - v38;
        if ((uint64_t)(v39[0] - v38) >> 3 > v11)
          v11 = v12 >> 3;
        v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v11;
        v33 = v39;
        v14 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)v39, v13);
        v16 = &v14[16 * v10];
        *(_DWORD *)v16 = v28;
        *((_QWORD *)v16 + 1) = *((_QWORD *)&v28 + 1);
        *((_QWORD *)&v28 + 1) = 0;
        v17 = *((_QWORD *)&v38 + 1);
        v18 = v38;
        if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
        {
          v21 = vdupq_n_s64(*((unint64_t *)&v38 + 1));
          v19 = &v14[16 * v10];
        }
        else
        {
          v19 = &v14[16 * v10];
          do
          {
            v20 = *(_DWORD *)(v17 - 16);
            v17 -= 16;
            *((_DWORD *)v19 - 4) = v20;
            v19 -= 16;
            *((_QWORD *)v19 + 1) = *(_QWORD *)(v17 + 8);
            *(_QWORD *)(v17 + 8) = 0;
          }
          while (v17 != v18);
          v21 = (int64x2_t)v38;
        }
        v9 = v16 + 16;
        *(_QWORD *)&v38 = v19;
        *((_QWORD *)&v38 + 1) = v16 + 16;
        v31 = v21;
        v22 = v39[0];
        v39[0] = &v14[16 * v15];
        v32 = v22;
        v30 = v21.i64[0];
        std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&v30);
      }
      else
      {
        **((_DWORD **)&v38 + 1) = v6;
        *(_QWORD *)(v8 + 8) = v7;
        v9 = (char *)(v8 + 16);
        *((_QWORD *)&v28 + 1) = 0;
      }
      *((_QWORD *)&v38 + 1) = v9;
      diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)((char *)&v28 + 8));
    }
    else
    {
      *(_QWORD *)&v28 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = pstack_header]";
      *((_QWORD *)&v28 + 1) = 110;
      v29 = 16;
      di_log::logger<di_log::log_printer<1162ul>>::logger(&v30, &v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Diskimageuio: Invalid pstack element", 36);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf((uint64_t)&v30);
      MEMORY[0x2199A89AC](v35);
      *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v36);
      *(_BYTE *)(a2 + 16) = 0;
    }
    if ((_BYTE)v37)
    {
      v23 = v36;
      *(_QWORD *)&v36 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    }
    if (!v5)
      break;
    v3 += 2;
    if (v3 == (diskimage_uio::details::diskimage_open_params_impl **)v4)
    {
      v25 = *((_QWORD *)&v38 + 1);
      v24 = v38;
      goto LABEL_26;
    }
  }
LABEL_33:
  *(_QWORD *)&v36 = &v38;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_212F07844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  if (a2 == 1)
  {
    *(_OWORD *)v13 = *(_OWORD *)__cxa_begin_catch(a1);
    *(_BYTE *)(v13 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x212F077F8);
  }
  *(_QWORD *)(v14 - 136) = v14 - 112;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 136));
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = DiskImagePlugin::DiskImagePlugin(v4, a1);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void sub_212F07990(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10B3C402F18E594);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<1134ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1134ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF0F10;
  a1[45] = &unk_24CEF1010;
  a1[46] = &unk_24CEF1038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF0F10;
  a1[45] = &unk_24CEF0F98;
  a1[46] = &unk_24CEF0FC0;
  return a1;
}

void sub_212F07A38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF10A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F07B04(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF10A8;
  di_log::logger_buf<di_log::log_printer<1134ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1134ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1134ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F07EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1134ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1134;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1134;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _DWORD *v30;
  int v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t result;
  void *lpsrc;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41[2];
  std::__shared_weak_count *v42;
  uint64_t v43;
  int v44;
  int v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  int v80;
  _BYTE v81[512];
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  UDIF_header::UDIF_header(v41, a1);
  v4 = *(_DWORD *)(v41[0] + 12);
  v5 = *(_OWORD *)(v41[0] + 32);
  v38 = *(_OWORD *)(v41[0] + 16);
  v39 = v5;
  v40 = *(_QWORD *)(v41[0] + 48);
  v6 = *(_QWORD *)(v41[0] + 56);
  v7 = *(_OWORD *)(v41[0] + 64);
  v8 = *(_QWORD *)(v41[0] + 80);
  v9 = *(_OWORD *)(v41[0] + 88);
  v10 = *(_OWORD *)(v41[0] + 104);
  v11 = *(_OWORD *)(v41[0] + 136);
  v102 = *(_OWORD *)(v41[0] + 120);
  v103 = v11;
  v100 = v9;
  v101 = v10;
  v12 = *(_OWORD *)(v41[0] + 152);
  v13 = *(_OWORD *)(v41[0] + 168);
  v14 = *(_OWORD *)(v41[0] + 184);
  v107 = *(_OWORD *)(v41[0] + 200);
  v108 = v7;
  v105 = v13;
  v106 = v14;
  v104 = v12;
  v15 = *(_OWORD *)(v41[0] + 216);
  v16 = *(_OWORD *)(v41[0] + 232);
  v17 = *(_OWORD *)(v41[0] + 264);
  v18 = *(_OWORD *)(v41[0] + 280);
  v93 = *(_OWORD *)(v41[0] + 248);
  v94 = v17;
  v91 = v15;
  v92 = v16;
  v19 = *(_OWORD *)(v41[0] + 296);
  v20 = *(_OWORD *)(v41[0] + 312);
  v21 = *(_OWORD *)(v41[0] + 328);
  v99 = *(_QWORD *)(v41[0] + 344);
  v97 = v20;
  v98 = v21;
  v95 = v18;
  v96 = v19;
  v22 = *(_QWORD *)(v41[0] + 352);
  v23 = *(_OWORD *)(v41[0] + 440);
  v87 = *(_OWORD *)(v41[0] + 424);
  v88 = v23;
  v24 = *(_OWORD *)(v41[0] + 472);
  v89 = *(_OWORD *)(v41[0] + 456);
  v90 = v24;
  v25 = *(_OWORD *)(v41[0] + 376);
  v83 = *(_OWORD *)(v41[0] + 360);
  v84 = v25;
  v26 = *(_OWORD *)(v41[0] + 408);
  v85 = *(_OWORD *)(v41[0] + 392);
  v86 = v26;
  v27 = *(_DWORD *)(v41[0] + 488);
  v28 = *(_QWORD *)(v41[0] + 492);
  v29 = (_QWORD *)operator new();
  DiskImageUDIF::DiskImageUDIF(v29, v41, a1);
  (*(void (**)(void **__return_ptr, _QWORD *, _QWORD))(*v29 + 48))(&lpsrc, v29, 0);
  if (!v30)
    __cxa_bad_cast();
  v31 = v30[2];
  v43 = 0x4796C6F6BLL;
  v44 = 512;
  v45 = v4;
  v46 = v38;
  v47 = v39;
  v48 = v40;
  v49 = v6;
  v50 = v108;
  v51 = v8;
  v55 = v103;
  v54 = v102;
  v53 = v101;
  v52 = v100;
  v59 = v107;
  v58 = v106;
  v57 = v105;
  v56 = v104;
  v63 = v94;
  v64 = v95;
  v66 = v97;
  v67 = v98;
  v65 = v96;
  v60 = v91;
  v62 = v93;
  v61 = v92;
  v68 = v99;
  v69 = v22;
  v74 = v87;
  v75 = v88;
  v76 = v89;
  v77 = v90;
  v70 = v83;
  v71 = v84;
  v72 = v85;
  v73 = v86;
  v78 = v27;
  v79 = v28;
  v80 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v81, (uint64_t)&v43);
  v82 = v31;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)v81);
  *(_DWORD *)(a2 + 512) = v82;
  *(_BYTE *)(a2 + 520) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v81);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v43);
  v32 = lpsrc;
  lpsrc = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  (*(void (**)(_QWORD *))(*v29 + 16))(v29);
  v33 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  result = v41[0];
  v41[0] = 0;
  if (result)
    return MEMORY[0x2199A8A18](result, 0x1000C407784F2AFLL);
  return result;
}

void sub_212F08478(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  diskimage_uio::details::diskimage_open_params_impl *v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x258]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
    if (a4)
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    UDIF_header::~UDIF_header((UDIF_header *)va);
    v12 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v12);
  }
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<1146ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1146ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF14A0;
  a1[45] = &unk_24CEF15A0;
  a1[46] = &unk_24CEF15C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF14A0;
  a1[45] = &unk_24CEF1528;
  a1[46] = &unk_24CEF1550;
  return a1;
}

void sub_212F085E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(diskimage_uio::details::diskimage_open_params_impl *this)
{
  __cxa_rethrow();
}

void sub_212F08678(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (!a2)
    goto LABEL_8;
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      v3 = __cxa_begin_catch(a1);
      *(_QWORD *)&v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((_QWORD *)&v5 + 1) = 146;
      v6 = 16;
      di_log::logger<di_log::log_printer<393ul>>::logger(v8, &v5);
      operator<<(&v9, (uint64_t)v3);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf((uint64_t)v8);
      MEMORY[0x2199A89AC](&v10);
      *(_QWORD *)v2 = make_error_code(161);
      *(_QWORD *)(v2 + 8) = v4;
      *(_BYTE *)(v2 + 520) = 0;
      goto LABEL_7;
    }
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  v7 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)&v5);
  v11 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(v2, (uint64_t)v8);
  *(_DWORD *)(v2 + 512) = v11;
  *(_BYTE *)(v2 + 520) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_212F0886C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 504);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CEF0C48[v4])(&v7, result);
  *(_DWORD *)(v3 + 504) = -1;
  v5 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CEF1238[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a2 = 2003069043;
  *(_QWORD *)(a2 + 4) = *(_QWORD *)(a3 + 4);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 62) = *(_QWORD *)(a3 + 62);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 70) = 0;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = *(__n128 *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CEF0C48[v2])(&v4, a1);
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<393ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<393ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF1280;
  a1[45] = &unk_24CEF1380;
  a1[46] = &unk_24CEF13A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF1280;
  a1[45] = &unk_24CEF1308;
  a1[46] = &unk_24CEF1330;
  return a1;
}

void sub_212F08A80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF1418;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F08B4C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF1418;
  di_log::logger_buf<di_log::log_printer<393ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<393ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<393ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F08F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<393ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 393;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 393;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

BOOL udif::header::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  _BOOL8 result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24)
    || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32)
    || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40)
    || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)
    || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
  {
    return 0;
  }
  v4 = 0;
  do
  {
    v5 = *(unsigned __int8 *)(a1 + 64 + v4);
    v6 = *(unsigned __int8 *)(a2 + 64 + v4);
    v7 = v5 != v6 || v4++ == 15;
  }
  while (!v7);
  if (v5 != v6)
    return 0;
  result = udif::details::checksum::operator==((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  if (!result)
    return result;
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a2 + 216) || *(_QWORD *)(a1 + 224) != *(_QWORD *)(a2 + 224))
    return 0;
  v9 = 0;
  do
  {
    v10 = *(unsigned __int8 *)(a1 + 232 + v9);
    v11 = *(unsigned __int8 *)(a2 + 232 + v9);
    if (v10 != v11)
      break;
    v7 = v9++ == 63;
  }
  while (!v7);
  if (v10 != v11 || *(_QWORD *)(a1 + 296) != *(_QWORD *)(a2 + 296) || *(_QWORD *)(a1 + 304) != *(_QWORD *)(a2 + 304))
    return 0;
  v12 = 0;
  do
  {
    v13 = *(unsigned __int8 *)(a1 + 312 + v12);
    v14 = *(unsigned __int8 *)(a2 + 312 + v12);
    if (v13 != v14)
      break;
    v7 = v12++ == 39;
  }
  while (!v7);
  if (v13 != v14)
    return 0;
  result = udif::details::checksum::operator==((_DWORD *)(a1 + 352), (_DWORD *)(a2 + 352));
  if (!result)
    return result;
  return *(_DWORD *)(a1 + 488) == *(_DWORD *)(a2 + 488) && *(_QWORD *)(a1 + 492) == *(_QWORD *)(a2 + 492);
}

BOOL udif::details::checksum::operator==(_DWORD *a1, _DWORD *a2)
{
  unint64_t v2;

  if (*a1 == *a2 && (v2 = a1[1], (_DWORD)v2 == a2[1]))
    return memcmp(a1 + 2, a2 + 2, v2 >> 3) == 0;
  else
    return 0;
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF1638;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F093F8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF1638;
  di_log::logger_buf<di_log::log_printer<1146ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1146ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1146ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F097EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1146ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1146;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1146;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif@<X0>(Backend **a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[12];
  int v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[22];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[22];
  __int16 v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  di_asif::header::header((di_asif::header *)v4, *a1);
  v10 = 2003069043;
  v11 = *(_QWORD *)&v4[4];
  v12 = v5;
  v13 = v6;
  v14 = v7;
  *(_OWORD *)v15 = *(_OWORD *)v8;
  *(_QWORD *)&v15[14] = *(_QWORD *)&v8[14];
  v16 = 0;
  v17 = v9;
  v18 = 2;
  v19 = 8;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v10);
  *(_DWORD *)(a2 + 512) = v19;
  *(_BYTE *)(a2 + 520) = 1;
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v10);
}

void sub_212F09AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  diskimage_uio::details::diskimage_open_params_impl *v20;

  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a19);
    v20 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(exception_object);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v20);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<1153ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1153ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF16C0;
  a1[45] = &unk_24CEF17C0;
  a1[46] = &unk_24CEF17E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF16C0;
  a1[45] = &unk_24CEF1748;
  a1[46] = &unk_24CEF1770;
  return a1;
}

void sub_212F09BB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

BOOL di_asif::header::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
  {
    return 0;
  }
  v2 = 0;
  do
  {
    v3 = *(unsigned __int8 *)(a1 + 32 + v2);
    v4 = *(unsigned __int8 *)(a2 + 32 + v2);
  }
  while (v3 == v4 && v2++ != 15);
  return v3 == v4
      && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(unsigned __int16 *)(a1 + 68) == *(unsigned __int16 *)(a2 + 68)
      && *(unsigned __int16 *)(a1 + 70) == *(unsigned __int16 *)(a2 + 70)
      && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF1858;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F09D78(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF1858;
  di_log::logger_buf<di_log::log_printer<1153ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1153ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1153ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0A16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1153ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1153;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1153;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw@<X0>(const Backend **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  _OWORD v6[31];
  int v7;
  _BYTE v8[512];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  raw_header::raw_header((raw_header *)&v5, *a1, a2);
  v6[0] = v5;
  v7 = 3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v6);
  v9 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)v8);
  *(_DWORD *)(a3 + 512) = v9;
  *(_BYTE *)(a3 + 520) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
}

void sub_212F0A42C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  diskimage_uio::details::diskimage_open_params_impl *v5;
  va_list va;

  va_start(va, a4);
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x210]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
    v5 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v5);
  }
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<1139ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1139ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF18E0;
  a1[45] = &unk_24CEF19E0;
  a1[46] = &unk_24CEF1A08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF18E0;
  a1[45] = &unk_24CEF1968;
  a1[46] = &unk_24CEF1990;
  return a1;
}

void sub_212F0A524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void raw_header::raw_header(raw_header *this, const Backend *a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  header_exception *exception;

  v5 = (*(uint64_t (**)(const Backend *))(*(_QWORD *)a2 + 40))(a2);
  v6 = 512;
  if (a3)
    v6 = a3;
  if (v5 % v6)
  {
    exception = (header_exception *)__cxa_allocate_exception(0x40uLL);
    header_exception::header_exception(exception, "raw_header", 0x16u);
  }
  *(_QWORD *)this = v6;
  *((_QWORD *)this + 1) = v5 / v6;
}

void sub_212F0A60C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF1A78;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0A688(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF1A78;
  di_log::logger_buf<di_log::log_printer<1139ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1139ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1139ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0AA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1139ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1139;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1139;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<1162ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1162ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF1B00;
  a1[45] = &unk_24CEF1C00;
  a1[46] = &unk_24CEF1C28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF1B00;
  a1[45] = &unk_24CEF1B88;
  a1[46] = &unk_24CEF1BB0;
  return a1;
}

void sub_212F0AD0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1170ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1170ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF1D60;
  a1[45] = &unk_24CEF1E60;
  a1[46] = &unk_24CEF1E88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF1D60;
  a1[45] = &unk_24CEF1DE8;
  a1[46] = &unk_24CEF1E10;
  return a1;
}

void sub_212F0ADF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF1C98;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0AEC0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF1C98;
  di_log::logger_buf<di_log::log_printer<1162ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1162ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1162ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0B2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1162ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1162;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1162;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

BOOL diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 16) != 0) != (*(_BYTE *)(a2 + 16) != 0))
    return 0;
  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(_DWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(a1);
    return v4 == *(_DWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(a2);
  }
  else
  {
    v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(a1);
    v7 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(a2);
    return *(_QWORD *)(v6 + 8) == *(_QWORD *)(v7 + 8) && *(_DWORD *)v6 == *(_DWORD *)v7;
  }
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(uint64_t result)
{
  __int128 *v1;
  char *exception;
  __int128 v3;

  if (!*(_BYTE *)(result + 16))
  {
    v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_24CEF1D30;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::bad_expected_access<std::error_code>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF1EF8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0B638(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF1EF8;
  di_log::logger_buf<di_log::log_printer<1170ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1170ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1170ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0BA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1170ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1170;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1170;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  diskimage_uio::details::diskimage_open_params_impl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  BOOL v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _OWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *exception;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  const std::error_category *v55;
  char v56;
  int v57[4];
  char v58;
  void *lpsrc;
  int v60;
  diskimage_uio::details::diskimage_open_params_impl *v61;
  __int128 v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[20];
  int v69;
  __int128 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24CEF0938;
  a1[1] = 0;
  if (a2 == a3)
  {
    *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__"
                      "wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((_QWORD *)&v62 + 1) = 54;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: No diskimage given", 32);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v64);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = make_error_code(157);
    exception[1] = v51;
  }
  v60 = *(_DWORD *)a2;
  v61 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  v8 = v61;
  *(_QWORD *)(a2 + 8) = 0;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v8);
  v9 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &lpsrc);
    v10 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
    if (!v60)
    {
      *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
      *((_QWORD *)&v62 + 1) = 54;
      LODWORD(v63) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v64, &v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot", 93);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v64);
      v52 = __cxa_allocate_exception(0x10uLL);
      *v52 = make_error_code(163);
      v52[1] = v53;
    }
    v11 = v10;
    v62 = 0uLL;
    v63 = 0;
    v12 = lpsrc;
    v56 = a4;
    if (v60 == 1)
    {
      lpsrc = 0;
      v64 = v12;
      LODWORD(v65) = 2;
    }
    else
    {
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
      if (v60 == 3)
        v17 = v16;
      else
        v17 = 0;
      v18 = lpsrc;
      if (v17 == 1 && lpsrc != 0)
      {
        if (v20)
          v20[184] = 0;
      }
      v21 = v17 ^ 1;
      v22 = *((_QWORD *)&v62 + 1);
      lpsrc = 0;
      v64 = v18;
      LODWORD(v65) = v21;
      if (*((_QWORD *)&v62 + 1) < v63)
      {
        **((_QWORD **)&v62 + 1) = v18;
        if (v18)
        {
          v23 = (_QWORD *)operator new();
          v24 = v64;
          *v23 = &off_24CEEED20;
          v23[1] = 0;
          v23[2] = 0;
          v23[3] = v24;
        }
        else
        {
          v23 = 0;
        }
        *(_QWORD *)(v22 + 8) = v23;
        v64 = 0;
        *(_DWORD *)(v22 + 16) = v65;
        *((_QWORD *)&v62 + 1) = v22 + 24;
LABEL_26:
        v27 = v60;
        v28 = v60 == 1;
        while (1)
        {
          v60 = *(_DWORD *)v9;
          diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v61, (uint64_t *)(v9 + 8));
          diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v61);
          diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v61, (uint64_t)v57);
          if (!v58)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1028ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Can't get image format", 36);
            di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v64);
            v43 = __cxa_allocate_exception(0x10uLL);
            *v43 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v57);
          }
          diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
          v29 = v64;
          v64 = 0;
          v30 = lpsrc;
          lpsrc = v29;
          if (v30)
          {
            (*(void (**)(void *))(*(_QWORD *)v30 + 16))(v30);
            v31 = v64;
            v64 = 0;
            if (v31)
              (*(void (**)(void *))(*(_QWORD *)v31 + 16))(v31);
            v29 = lpsrc;
          }
          if (v29
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1035ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Nested stacking is not allowed.", 45);
            di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }
          if ((*(uint64_t (**)(void *))(*(_QWORD *)v29 + 24))(v29) != v11)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1040ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Multiple images given but block size differ. ", 59);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" block_size: ", 13);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" / ", 3);
            (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
            std::ostream::operator<<();
            di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v64);
LABEL_72:
            v44 = 163;
LABEL_73:
            v45 = __cxa_allocate_exception(0x10uLL);
            *v45 = make_error_code(v44);
            v45[1] = v46;
          }
          v9 += 16;
          if (v9 == a3)
            break;
          if (v57[0] != 8)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1056ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ", 48);
            v47 = diskimage_uio::operator<<(v68, v57[0]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8);
            di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }
          if (v60 != 1)
          {
            if (v60 != 2)
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1063ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ", 109);
              diskimage_uio::operator<<(v68, v60);
              di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v64);
LABEL_79:
              v48 = __cxa_allocate_exception(0x10uLL);
              *v48 = make_error_code(163);
              v48[1] = v49;
            }
            if ((*(unsigned int (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc))
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Snapshots should be read only", 43);
              di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v64);
              goto LABEL_79;
            }
LABEL_43:
            v32 = 1;
            goto LABEL_47;
          }
          if (v28)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Only single cache is allowed", 42);
            di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }
          if (v27 == 2)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Snapshot detected on top of cache", 47);
            di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }
          v28 = 1;
          v32 = 2;
LABEL_47:
          if (v57[0] != 12)
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)lpsrc + 72))(&v64);
            if (v64 || v65 || v66 || v67)
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1089ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
              di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v64);
              v44 = 164;
              goto LABEL_73;
            }
          }
          v33 = lpsrc;
          lpsrc = 0;
          v64 = v33;
          LODWORD(v65) = v32;
          v34 = *((_QWORD *)&v62 + 1);
          if (*((_QWORD *)&v62 + 1) >= v63)
          {
            v37 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v62, (uint64_t)&v64);
            v38 = v64;
            *((_QWORD *)&v62 + 1) = v37;
            v64 = 0;
            if (v38)
              (*(void (**)(void *))(*(_QWORD *)v38 + 16))(v38);
          }
          else
          {
            **((_QWORD **)&v62 + 1) = v33;
            if (v33)
            {
              v35 = (_QWORD *)operator new();
              v36 = v64;
              *v35 = &off_24CEEED20;
              v35[1] = 0;
              v35[2] = 0;
              v35[3] = v36;
            }
            else
            {
              v35 = 0;
            }
            *(_QWORD *)(v34 + 8) = v35;
            v64 = 0;
            *(_DWORD *)(v34 + 16) = v65;
            *((_QWORD *)&v62 + 1) = v34 + 24;
          }
          if (v9 == a3)
          {
            v39 = operator new();
            if ((v56 & 1) != 0)
              v40 = 1;
            else
              v40 = 2;
            v69 = v40;
            *(_QWORD *)&v70 = 0x200000001;
            smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v40, (int *)&v70, 2);
            DiskImageStackable::DiskImageStackable(v39, &v62, &v69);
            v41 = a1[1];
            a1[1] = v39;
            if (v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
            v64 = &v62;
            std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            v15 = lpsrc;
            lpsrc = 0;
            if (v15)
              goto LABEL_66;
            goto LABEL_67;
          }
        }
        if (v60)
        {
          *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
          *((_QWORD *)&v70 + 1) = 54;
          v71 = 16;
          di_log::logger<di_log::log_printer<1048ul>>::logger(&v64, &v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ", 59);
          diskimage_uio::operator<<(v68, v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" given", 6);
          di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v64);
          goto LABEL_72;
        }
        (*(void (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
        goto LABEL_43;
      }
    }
    v25 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v62, (uint64_t)&v64);
    v26 = v64;
    *((_QWORD *)&v62 + 1) = v25;
    v64 = 0;
    if (v26)
      (*(void (**)(void *))(*(_QWORD *)v26 + 16))(v26);
    goto LABEL_26;
  }
  if (v60)
  {
    *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__"
                      "wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((_QWORD *)&v62 + 1) = 54;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v68, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v64);
    v54 = __cxa_allocate_exception(0x10uLL);
    v55 = std::generic_category();
    *v54 = 22;
    v54[1] = v55;
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
  v13 = v64;
  v64 = 0;
  v14 = a1[1];
  a1[1] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    v15 = v64;
    v64 = 0;
    if (v15)
LABEL_66:
      (*(void (**)(void *))(*(_QWORD *)v15 + 16))(v15);
  }
LABEL_67:
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v61);
  return a1;
}

void sub_212F0C6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  void **v22;
  uint64_t v23;

  v22 = a20;
  a20 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 2))(v22);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v23 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_212F0C6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)va);
  JUMPOUT(0x212F0C984);
}

void sub_212F0C6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)va);
  JUMPOUT(0x212F0C99CLL);
}

void sub_212F0C704(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;
  uint64_t v2;
  uint64_t v4;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  v4 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  _Unwind_Resume(a1);
}

void sub_212F0C758()
{
  uint64_t v0;

  MEMORY[0x2199A8A18](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x212F0C778);
}

void sub_212F0C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  __cxa_end_catch();
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C834(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x212F0C9BCLL);
}

void sub_212F0C844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  void *v21;
  uint64_t v23;

  __cxa_free_exception(v21);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v23 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_212F0C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F0C904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
  JUMPOUT(0x212F0C970);
}

_QWORD *di_log::logger<di_log::log_printer<978ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<978ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF1F80;
  a1[45] = &unk_24CEF2080;
  a1[46] = &unk_24CEF20A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF1F80;
  a1[45] = &unk_24CEF2008;
  a1[46] = &unk_24CEF2030;
  return a1;
}

void sub_212F0CA48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required(const std::error_category *this)
{
  uint64_t *v2;
  std::error_category_vtbl *v3;
  uint64_t (***v4)(_QWORD);
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t (***v9)(_QWORD);
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *exception;
  uint64_t v15;
  _QWORD *v16;
  const std::error_category *v17;
  int v18;
  int v19;
  const std::error_category *v20;
  __int128 v21;
  int v22;
  void *lpsrc;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (***v27)(_QWORD);
  std::__shared_weak_count *v28;
  _BYTE v29[24];

  diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v29);
  if (!v29[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = std::make_error_code[abi:ne180100](0x16u);
    exception[1] = v15;
  }
  v3 = this[3].__vftable;
  v2 = (uint64_t *)&this[3];
  if (v3)
  {
    get_sink_backend((uint64_t)v2, &lpsrc);
    if (lpsrc
    {
      v27 = v4;
      v28 = v24;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = (void **)&v27;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v6 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = v27;
    if (v27 && ((*v27)[2](v27) & 1) == 0)
    {
      v10 = (**v9)(v9);
      if (v10)
      {
        v18 = v10;
        *(_QWORD *)&v21 = "diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required()";
        *((_QWORD *)&v21 + 1) = 76;
        v22 = 16;
        di_log::logger<di_log::log_printer<957ul>>::logger(&lpsrc, &v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Diskimageuio: Couldn't lock backend ", 36);
        operator<<((uint64_t)&v25, *v2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)" err: ", 6);
        v19 = v18;
        v20 = std::generic_category();
        std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&lpsrc, (uint64_t)&v19);
        di_log::logger<di_log::log_printer<957ul>>::~logger((uint64_t)&lpsrc);
        v16 = __cxa_allocate_exception(0x10uLL);
        v17 = std::generic_category();
        *(_DWORD *)v16 = v18;
        v16[1] = v17;
      }
      *(_QWORD *)&v21 = "diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required()";
      *((_QWORD *)&v21 + 1) = 76;
      v22 = 2;
      di_log::logger<di_log::log_printer<960ul>>::logger(&lpsrc, &v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Diskimageuio: locked backend ", 29);
      operator<<((uint64_t)&v25, *v2);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf((uint64_t)&lpsrc);
      MEMORY[0x2199A89AC](&v26);
    }
    v11 = v28;
    if (v28)
    {
      v12 = (unint64_t *)&v28->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_212F0CD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  di_log::logger<di_log::log_printer<957ul>>::~logger((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<989ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<989ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF2800;
  a1[45] = &unk_24CEF2900;
  a1[46] = &unk_24CEF2928;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF2800;
  a1[45] = &unk_24CEF2888;
  a1[46] = &unk_24CEF28B0;
  return a1;
}

void sub_212F0CDF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1002ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1002ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF2A20;
  a1[45] = &unk_24CEF2B20;
  a1[46] = &unk_24CEF2B48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF2A20;
  a1[45] = &unk_24CEF2AA8;
  a1[46] = &unk_24CEF2AD0;
  return a1;
}

void sub_212F0CEE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1028ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1028ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF2C40;
  a1[45] = &unk_24CEF2D40;
  a1[46] = &unk_24CEF2D68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF2C40;
  a1[45] = &unk_24CEF2CC8;
  a1[46] = &unk_24CEF2CF0;
  return a1;
}

void sub_212F0CFC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1035ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1035ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF2E60;
  a1[45] = &unk_24CEF2F60;
  a1[46] = &unk_24CEF2F88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF2E60;
  a1[45] = &unk_24CEF2EE8;
  a1[46] = &unk_24CEF2F10;
  return a1;
}

void sub_212F0D0B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1040ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1040ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF3080;
  a1[45] = &unk_24CEF3180;
  a1[46] = &unk_24CEF31A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF3080;
  a1[45] = &unk_24CEF3108;
  a1[46] = &unk_24CEF3130;
  return a1;
}

void sub_212F0D198(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1048ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1048ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF32A0;
  a1[45] = &unk_24CEF33A0;
  a1[46] = &unk_24CEF33C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF32A0;
  a1[45] = &unk_24CEF3328;
  a1[46] = &unk_24CEF3350;
  return a1;
}

void sub_212F0D280(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1056ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1056ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF34C0;
  a1[45] = &unk_24CEF35C0;
  a1[46] = &unk_24CEF35E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF34C0;
  a1[45] = &unk_24CEF3548;
  a1[46] = &unk_24CEF3570;
  return a1;
}

void sub_212F0D368(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1063ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1063ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF36E0;
  a1[45] = &unk_24CEF37E0;
  a1[46] = &unk_24CEF3808;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF36E0;
  a1[45] = &unk_24CEF3768;
  a1[46] = &unk_24CEF3790;
  return a1;
}

void sub_212F0D450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1068ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1068ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF3900;
  a1[45] = &unk_24CEF3A00;
  a1[46] = &unk_24CEF3A28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF3900;
  a1[45] = &unk_24CEF3988;
  a1[46] = &unk_24CEF39B0;
  return a1;
}

void sub_212F0D538(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1074ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1074ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF3B20;
  a1[45] = &unk_24CEF3C20;
  a1[46] = &unk_24CEF3C48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF3B20;
  a1[45] = &unk_24CEF3BA8;
  a1[46] = &unk_24CEF3BD0;
  return a1;
}

void sub_212F0D620(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1079ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1079ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF3D40;
  a1[45] = &unk_24CEF3E40;
  a1[46] = &unk_24CEF3E68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF3D40;
  a1[45] = &unk_24CEF3DC8;
  a1[46] = &unk_24CEF3DF0;
  return a1;
}

void sub_212F0D708(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1089ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1089ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF3F60;
  a1[45] = &unk_24CEF4060;
  a1[46] = &unk_24CEF4088;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF3F60;
  a1[45] = &unk_24CEF3FE8;
  a1[46] = &unk_24CEF4010;
  return a1;
}

void sub_212F0D7F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1101ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1101ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF4180;
  a1[45] = &unk_24CEF4280;
  a1[46] = &unk_24CEF42A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF4180;
  a1[45] = &unk_24CEF4208;
  a1[46] = &unk_24CEF4230;
  return a1;
}

void sub_212F0D8D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2118;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0D9A4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2118;
  di_log::logger_buf<di_log::log_printer<978ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<978ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<978ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0DD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<978ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 978;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 978;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::verify_backend@<X0>(const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  if (LODWORD(this[70].__vftable) == 12 || this[3].__vftable)
  {
    *(_BYTE *)a2 = 0;
    v3 = 1;
  }
  else
  {
    *(_QWORD *)&v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((_QWORD *)&v4 + 1) = 81;
    v5 = 16;
    di_log::logger<di_log::log_printer<617ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Diskimageuio: backend doesn't exist", 35);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x2199A89AC](&v8);
    this = std::generic_category();
    v3 = 0;
    *(_QWORD *)a2 = 6;
    *(_QWORD *)(a2 + 8) = this;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return this;
}

void sub_212F0E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<617ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const char *v4;
  size_t v5;
  _QWORD *v6;
  char v8;

  v3 = (_QWORD *)(a1 + 360);
  v4 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v5 = strlen(v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  v8 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
  std::ostream::operator<<();
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<957ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<957ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF23C0;
  a1[45] = &unk_24CEF24C0;
  a1[46] = &unk_24CEF24E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF23C0;
  a1[45] = &unk_24CEF2448;
  a1[46] = &unk_24CEF2470;
  return a1;
}

void sub_212F0E178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<960ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<960ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF25E0;
  a1[45] = &unk_24CEF26E0;
  a1[46] = &unk_24CEF2708;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF25E0;
  a1[45] = &unk_24CEF2668;
  a1[46] = &unk_24CEF2690;
  return a1;
}

void sub_212F0E260(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<617ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<617ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF21A0;
  a1[45] = &unk_24CEF22A0;
  a1[46] = &unk_24CEF22C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF21A0;
  a1[45] = &unk_24CEF2228;
  a1[46] = &unk_24CEF2250;
  return a1;
}

void sub_212F0E348(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2338;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0E414(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2338;
  di_log::logger_buf<di_log::log_printer<617ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<617ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<617ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0E808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<617ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 617;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 617;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2558;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0EA7C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2558;
  di_log::logger_buf<di_log::log_printer<957ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<957ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<957ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0EE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<957ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 957;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 957;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2778;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0F0E4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2778;
  di_log::logger_buf<di_log::log_printer<960ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<960ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<960ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0F4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<960ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 960;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 960;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2998;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0F74C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2998;
  di_log::logger_buf<di_log::log_printer<989ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<989ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<989ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F0FB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<989ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 989;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 989;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2BB8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F0FDB4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2BB8;
  di_log::logger_buf<di_log::log_printer<1002ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1002ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1002ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F101A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1002ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1002;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1002;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  *((_DWORD *)std::shared_ptr<DiskImage>::shared_ptr[abi:ne180100]<DiskImage,std::default_delete<DiskImage>,void>(v14, (uint64_t *)a2)+ 4) = *(_DWORD *)(a2 + 8);
  v15 += 3;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_212F104AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<DiskImage>::shared_ptr[abi:ne180100]<DiskImage,std::default_delete<DiskImage>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_24CEEED20;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2DD8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F10594(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2DD8;
  di_log::logger_buf<di_log::log_printer<1028ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1028ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1028ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F10988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1028ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1028;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1028;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF2FF8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F10BFC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF2FF8;
  di_log::logger_buf<di_log::log_printer<1035ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1035ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1035ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F10FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1035ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1035;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1035;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF3218;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F11264(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF3218;
  di_log::logger_buf<di_log::log_printer<1040ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1040ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1040ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F11658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1040ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1040;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1040;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF3438;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F118CC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF3438;
  di_log::logger_buf<di_log::log_printer<1048ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1048ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1048ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F11CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1048ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1048;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1048;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF3658;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F11F34(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF3658;
  di_log::logger_buf<di_log::log_printer<1056ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1056ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1056ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F12328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1056ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1056;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1056;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF3878;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1259C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF3878;
  di_log::logger_buf<di_log::log_printer<1063ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1063ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1063ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F12990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1063ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1063;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1063;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF3A98;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F12C04(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF3A98;
  di_log::logger_buf<di_log::log_printer<1068ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1068ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1068ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F12FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1068ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1068;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1068;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF3CB8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1326C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF3CB8;
  di_log::logger_buf<di_log::log_printer<1074ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1074ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1074ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F13660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1074ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1074;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1074;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF3ED8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F138D4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF3ED8;
  di_log::logger_buf<di_log::log_printer<1079ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1079ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1079ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F13CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1079ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1079;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1079;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF40F8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F13F3C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF40F8;
  di_log::logger_buf<di_log::log_printer<1089ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1089ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1089ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F14330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1089ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1089;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1089;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF4318;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F145A4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF4318;
  di_log::logger_buf<di_log::log_printer<1101ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1101ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1101ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F14998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1101ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1101;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1101;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

diskimage_uio::details::extents_iterator_impl *diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(diskimage_uio::details::extents_iterator_impl *this, const diskimage_uio::details::extents_iterator_impl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;
  int v7;

  v3 = *(_QWORD **)a2;
  v4 = operator new();
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(v4, v3);
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  diskimage_uio::details::extents_iterator_impl::make_val((uint64_t)this, (uint64_t)&v6);
  *(_OWORD *)((char *)this + 8) = v6;
  *((_DWORD *)this + 6) = v7;
  return this;
}

void sub_212F14C2C(_Unwind_Exception *a1)
{
  uint64_t **v1;

  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::extents_iterator_impl::make_val@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(_DWORD *)(*(_QWORD *)this + 32);
  if ((v3 - 1) >= 3)
    v3 = 0;
  v4 = (*(_BYTE *)(*(_QWORD *)this + 24) & 1) + *(_QWORD *)(*(_QWORD *)this + 16);
  if ((*(_BYTE *)(*(_QWORD *)this + 24) & 2) == 0)
    ++v2;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  return this;
}

uint64_t **std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

uint64_t diskimage_uio::details::extents_db_impl::extents_db_impl(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v9 = *a2;
  v10 = *(_QWORD *)(*a2 + 8);
  v11 = operator new();
  *(_QWORD *)v11 = v10;
  *(_QWORD *)(v11 + 8) = a3;
  *(_QWORD *)(v11 + 16) = a4;
  *(_BYTE *)(v11 + 24) = 2;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v9;
  *(_DWORD *)(v11 + 48) = a5 & 0xF;
  *(_QWORD *)(v11 + 56) = &off_24CEF4398;
  *(_QWORD *)(v11 + 80) = v11 + 56;
  v12 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v11;
  if (v12)
    std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100](a1, v12);
  return a1;
}

void sub_212F14DA4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = (_QWORD *)*v1;
  *v1 = 0;
  if (v3)
    std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEED0Ev()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *_ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CEF4398;
  return result;
}

void _ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CEF4398;
}

_QWORD *_ZNSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEEclES5_Oy@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD *, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)*a1 + 128))(&v5, *a1, a1, a1[5], a1 + 1, *a2);
  *a3 = v5;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN9DiskImage9extents_t17interface_factoryMUlRKS0_yE_E))
    return a1 + 8;
  else
    return 0;
}

void *_ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE11target_typeEv()
{
  return &_ZTIN9DiskImage9extents_t17interface_factoryMUlRKS0_yE_E;
}

void std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = (_QWORD *)a2[10];
    if (v3 == a2 + 7)
    {
      v4 = 4;
      v3 = a2 + 7;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = a2[4];
    a2[4] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    JUMPOUT(0x2199A8A18);
  }
}

uint64_t DiskImage::extents_t::begin@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 10);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, DiskImage::extents_t *, uint64_t *))(*(_QWORD *)v4 + 48))(&v6, v4, this, &v7);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a2, &v6, *((_DWORD *)this + 12));
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_212F14FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t DiskImage::const_extents_iterator_t::const_extents_iterator_t(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD v8[2];

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *(_QWORD *)(a1 + 8) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  v6 = (_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  DiskImage::const_extents_iterator_t::make_val((DiskImage::const_extents_iterator_t *)a1, (uint64_t)v8);
  *v6 = v8[0];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_212F1503C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v6;
  int v7;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  diskimage_uio::details::extents_iterator_impl::make_val(a1, (uint64_t)&v6);
  *v4 = v6;
  *(_DWORD *)(a1 + 24) = v7;
  return a1;
}

void sub_212F150BC(_Unwind_Exception *a1)
{
  uint64_t **v1;

  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::extents_t::end@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 10);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, DiskImage::extents_t *, uint64_t *))(*(_QWORD *)v4 + 48))(&v6, v4, this, &v7);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a2, &v6, *((_DWORD *)this + 12));
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_212F15150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<573ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<573ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF4430;
  a1[45] = &unk_24CEF4530;
  a1[46] = &unk_24CEF4558;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF4430;
  a1[45] = &unk_24CEF44B8;
  a1[46] = &unk_24CEF44E0;
  return a1;
}

void sub_212F151F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::open_and_resolve@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  Backend *v21;
  crypto::header *v22;
  uint64_t v23;
  _OWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  unsigned int *v30;
  const std::error_category *v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  _BYTE v37[152];
  int v38[4];
  char v39;
  _BYTE v40[32];
  __int128 v41;
  uint64_t v42;
  _BYTE v43[152];
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 24;
  if (!*(_QWORD *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    std::shared_ptr<Backend>::reset[abi:ne180100]((_QWORD *)(a1 + 24));
    v41 = 0u;
    memset(v40, 0, sizeof(v40));
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 576, (__int128 *)v40);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 592, (__int128 *)&v40[16]);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 608, &v41);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&v40[24];
    if (*(_QWORD *)&v40[24])
    {
      v13 = (unint64_t *)(*(_QWORD *)&v40[24] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(std::__shared_weak_count **)&v40[8];
    if (*(_QWORD *)&v40[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&v40[8] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      *(_QWORD *)&v40[16] = *(_QWORD *)(a1 + 16);
    }
    v38[0] = 2 * ((a2 - 1) < 2);
    std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,std::string,int,void>((uint64_t)v40, v38, &v34);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v8, &v34);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if ((v40[23] & 0x80000000) != 0)
      operator delete(*(void **)v40);
    *(_DWORD *)(a1 + 568) = a2;
    v21 = *(Backend **)(a1 + 24);
    v22 = (crypto::header *)operator new();
    crypto::header::header(v22, v21);
    v23 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v22;
    if (v23)
      MEMORY[0x2199A8A18](v23, 0x1000C4015A9971DLL);
  }
  diskimage_uio::details::diskimage_open_params_impl::is_locked((const std::error_category *)a1, (BOOL *)v38);
  if (!v39)
  {
    *(_QWORD *)&v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((_QWORD *)&v34 + 1) = 83;
    v35 = 16;
    di_log::logger<di_log::log_printer<534ul>>::logger(v40, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Diskimageuio: Couldn't get locked status ", 41);
    v26 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v38);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v40, v26);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf((uint64_t)v40);
    MEMORY[0x2199A89AC](v43);
    result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v38);
    *(_OWORD *)a4 = *result;
    goto LABEL_34;
  }
  if (LOBYTE(v38[0]))
  {
    *(_QWORD *)&v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((_QWORD *)&v34 + 1) = 83;
    v35 = 16;
    di_log::logger<di_log::log_printer<565ul>>::logger(v40, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Diskimageuio: decryption key missing", 36);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf((uint64_t)v40);
    MEMORY[0x2199A89AC](v43);
    result = (_OWORD *)make_error_code(162);
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = v25;
LABEL_34:
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }
  *(_QWORD *)&v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((_QWORD *)&v34 + 1) = 83;
  v35 = 2;
  di_log::logger<di_log::log_printer<539ul>>::logger(v40, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Diskimageuio: backend isn't locked", 34);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf((uint64_t)v40);
  MEMORY[0x2199A89AC](v43);
  diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header((const Backend **)a1, 0, (uint64_t)v40);
  if (v44)
  {
    v27 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value((uint64_t)v40);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>(a1 + 48, v27);
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(v27 + 512);
    *(_QWORD *)&v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((_QWORD *)&v32 + 1) = 83;
    v33 = 2;
    di_log::logger<di_log::log_printer<561ul>>::logger(&v34, &v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Diskimageuio: resolved disk image format ", 41);
    diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf((uint64_t)&v34);
    result = (_OWORD *)MEMORY[0x2199A89AC](v37);
    *(_BYTE *)a4 = 0;
    v28 = 1;
  }
  else
  {
    v29 = *(_DWORD *)(a1 + 564);
    if (v29)
    {
      if (*(_DWORD *)(a1 + 568) != v29)
      {
        v30 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)v40);
        v31 = std::generic_category();
        *(_QWORD *)&v34 = 35;
        *((_QWORD *)&v34 + 1) = v31;
        if ((*(unsigned int (**)(_QWORD, _QWORD, __int128 *))(**((_QWORD **)v30 + 1) + 32))(*((_QWORD *)v30 + 1), *v30, &v34)|| (*(unsigned int (**)(_QWORD, unsigned int *, _QWORD))(**((_QWORD **)&v34 + 1) + 40))(*((_QWORD *)&v34 + 1), v30, v34))
        {
          *(_QWORD *)&v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((_QWORD *)&v32 + 1) = 83;
          v33 = 2;
          di_log::logger<di_log::log_printer<545ul>>::logger(&v34, &v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v34);
          MEMORY[0x2199A89AC](v37);
          if (a3)
          {
            *(_QWORD *)&v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((_QWORD *)&v32 + 1) = 83;
            v33 = 2;
            di_log::logger<di_log::log_printer<551ul>>::logger(&v34, &v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Diskimageuio: reopen backend to required mode ", 46);
            diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
            di_log::logger<di_log::log_printer<551ul>>::~logger((uint64_t)&v34);
            result = (_OWORD *)diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(a1, *(unsigned int *)(a1 + 564), 0);
            goto LABEL_47;
          }
          *(_QWORD *)&v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((_QWORD *)&v32 + 1) = 83;
          v33 = 16;
          di_log::logger<di_log::log_printer<554ul>>::logger(&v34, &v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          di_log::logger<di_log::log_printer<554ul>>::~logger((uint64_t)&v34);
        }
      }
    }
    result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)v40);
    v28 = 0;
    *(_OWORD *)a4 = *result;
  }
  *(_BYTE *)(a4 + 16) = v28;
LABEL_47:
  if (v44)
    return (_OWORD *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v40);
  return result;
}

void sub_212F158D0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x448]))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF45C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F15ABC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF45C8;
  di_log::logger_buf<di_log::log_printer<573ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<573ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<573ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F15EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<573ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 573;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 573;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void std::shared_ptr<Backend>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t(diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *this)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_QWORD *di_log::logger<di_log::log_printer<534ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<534ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF4650;
  a1[45] = &unk_24CEF4750;
  a1[46] = &unk_24CEF4778;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF4650;
  a1[45] = &unk_24CEF46D8;
  a1[46] = &unk_24CEF4700;
  return a1;
}

void sub_212F161CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<539ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<539ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF4870;
  a1[45] = &unk_24CEF4970;
  a1[46] = &unk_24CEF4998;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF4870;
  a1[45] = &unk_24CEF48F8;
  a1[46] = &unk_24CEF4920;
  return a1;
}

void sub_212F162B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

double diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header@<D0>(const Backend **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  double result;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  const std::error_category *v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[33];
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  double v23[64];
  int v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(0, this + 3, *((_DWORD *)this + 141) == 0, (uint64_t)this, a2, (uint64_t)v23);
  if (v25)
  {
    v5 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value((uint64_t)v23);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v19, v5);
    v22 = *(_DWORD *)(v5 + 512);
    v6 = v22 > 0xB || ((1 << v22) & 0x982) == 0;
    if (v6 || *((_DWORD *)this + 142) || !*((_DWORD *)this + 141))
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v14, (uint64_t)v19);
      v18 = v22;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)&v14);
      *(_DWORD *)(a3 + 512) = v18;
      *(_BYTE *)(a3 + 520) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
    }
    else
    {
      *(_QWORD *)&v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((_QWORD *)&v12 + 1) = 107;
      v13 = 2;
      di_log::logger<di_log::log_printer<503ul>>::logger(&v14, &v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Diskimageuio: Required read-write disk image (", 46);
      v10 = diskimage_uio::operator<<(&v16, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf((uint64_t)&v14);
      MEMORY[0x2199A89AC](&v17);
      v11 = std::generic_category();
      *(_QWORD *)a3 = 35;
      *(_QWORD *)(a3 + 8) = v11;
      *(_BYTE *)(a3 + 520) = 0;
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)&v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((_QWORD *)&v14 + 1) = 107;
    v15 = 16;
    di_log::logger<di_log::log_printer<495ul>>::logger(v19, &v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Diskimageuio: Couldn't get diskimage: ", 38);
    v8 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)v23);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v19, v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x2199A89AC](&v21);
    *(_BYTE *)a3 = 0;
    v9 = v25;
    *(_BYTE *)(a3 + 520) = v25;
    if (!v9)
    {
      result = v23[0];
      *(_OWORD *)a3 = *(_OWORD *)v23;
      return result;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)v23);
    *(_DWORD *)(a3 + 512) = v24;
  }
  if (v25)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v23);
  return result;
}

void sub_212F16580(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x220]);
  if (LOBYTE(STACK[0x630]))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x428]);
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100](unsigned int *a1, unsigned int *a2)
{
  if (((*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1), *a1, a2) & 1) != 0)return 1;
  else
    return (*(uint64_t (**)(_QWORD, unsigned int *, _QWORD))(**((_QWORD **)a2 + 1) + 40))(*((_QWORD *)a2 + 1), a1, *a2);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CEED160;
  }
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<551ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<551ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF50F0;
  a1[45] = &unk_24CEF51F0;
  a1[46] = &unk_24CEF5218;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF50F0;
  a1[45] = &unk_24CEF5178;
  a1[46] = &unk_24CEF51A0;
  return a1;
}

void sub_212F16714(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<554ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<554ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF5310;
  a1[45] = &unk_24CEF5410;
  a1[46] = &unk_24CEF5438;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF5310;
  a1[45] = &unk_24CEF5398;
  a1[46] = &unk_24CEF53C0;
  return a1;
}

void sub_212F167FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value(uint64_t result)
{
  __int128 *v1;
  char *exception;
  __int128 v3;

  if (!*(_BYTE *)(result + 520))
  {
    v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_24CEF1D30;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<561ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<561ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF5530;
  a1[45] = &unk_24CEF5630;
  a1[46] = &unk_24CEF5658;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF5530;
  a1[45] = &unk_24CEF55B8;
  a1[46] = &unk_24CEF55E0;
  return a1;
}

void sub_212F16938(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<565ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<565ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF5750;
  a1[45] = &unk_24CEF5850;
  a1[46] = &unk_24CEF5878;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF5750;
  a1[45] = &unk_24CEF57D8;
  a1[46] = &unk_24CEF5800;
  return a1;
}

void sub_212F16A20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,std::string,int,void>(uint64_t a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<std::string,int,std::allocator<FileLocal>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_212F16AD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<std::string,int,std::allocator<FileLocal>,0>(_QWORD *a1, uint64_t a2, int *a3)
{
  int v4;
  int v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF38;
  v4 = *a3;
  v5 = FileDescriptorWrapper::open_file(a2, *a3);
  FileLocal::FileLocal((FileLocal *)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_212F16B44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF47E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F16BC0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF47E8;
  di_log::logger_buf<di_log::log_printer<534ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<534ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<534ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F16FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<534ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 534;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 534;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF4A08;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F17228(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF4A08;
  di_log::logger_buf<di_log::log_printer<539ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<539ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<539ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<539ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 539;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 539;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(int a1@<W0>, const Backend **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  void **v16;
  void **v17;
  std::string v18;
  int v19;
  _QWORD v20[45];
  uint64_t v21;
  _DWORD v22[36];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v12 = 1;
      break;
    case 1:
LABEL_17:
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw(a2, a5, a6);
      return;
    case 2:
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif (a2, a6);
      return;
    case 7:
    case 9:
    case 12:
      v19 = 0;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v20, (uint64_t)&v18);
      v23 = 0;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a6, (uint64_t)v20);
      *(_DWORD *)(a6 + 512) = v23;
      *(_BYTE *)(a6 + 520) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v18);
      return;
    case 8:
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif ((Backend **)a2, a6);
      return;
    case 11:
      if (*(char *)(a4 + 23) < 0)
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        v18 = *(std::string *)a4;
      pstack_header::pstack_header(&v17, (const void **)a2, (char *)&v18, a3);
      v16 = v17;
      v17 = 0;
      v20[0] = v16;
      v22[34] = 4;
      v23 = 11;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a6, (uint64_t)v20);
      *(_DWORD *)(a6 + 512) = v23;
      *(_BYTE *)(a6 + 520) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
      std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](&v17, 0);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      return;
    default:
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      v18.__r_.__value_.__l.__size_ = 132;
      LODWORD(v18.__r_.__value_.__r.__words[2]) = 16;
      di_log::logger<di_log::log_printer<485ul>>::logger(v20, (__int128 *)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Diskimageuio: Unsupported image format", 38);
      diskimage_uio::operator<<(&v21, a1);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf((uint64_t)v20);
      MEMORY[0x2199A89AC](v22);
      *(_QWORD *)a6 = make_error_code(161);
      *(_QWORD *)(a6 + 8) = v15;
      *(_BYTE *)(a6 + 520) = 0;
      return;
  }
  while (1)
  {
    v13 = 2;
    if ((v12 - 2) >= 5)
    {
      if ((_DWORD)v12 == 1)
        goto LABEL_16;
      if ((_DWORD)v12 == 10)
        v13 = 2;
      else
        v13 = v12;
    }
    if ((_DWORD)v12 == v13)
    {
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(v12, a2, a3, a4, a5);
      if (!*(_BYTE *)(a6 + 520))
        return;
      v14 = *(_DWORD *)(diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value(a6)
                      + 512);
      if (v14 || !*(_BYTE *)(a6 + 520))
      {
        if (v14)
          return;
      }
      else
      {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(a6);
      }
    }
LABEL_16:
    v12 = (v12 + 1);
    if ((_DWORD)v12 == 13)
      goto LABEL_17;
  }
}

void sub_212F17B64(_Unwind_Exception *a1, int a2)
{
  diskimage_uio::details::diskimage_open_params_impl *v2;

  if (a2)
  {
    v2 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v2);
  }
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<495ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<495ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF4CB0;
  a1[45] = &unk_24CEF4DB0;
  a1[46] = &unk_24CEF4DD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF4CB0;
  a1[45] = &unk_24CEF4D38;
  a1[46] = &unk_24CEF4D60;
  return a1;
}

void sub_212F17CB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<503ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<503ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF4ED0;
  a1[45] = &unk_24CEF4FD0;
  a1[46] = &unk_24CEF4FF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF4ED0;
  a1[45] = &unk_24CEF4F58;
  a1[46] = &unk_24CEF4F80;
  return a1;
}

void sub_212F17D9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<485ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<485ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF4A90;
  a1[45] = &unk_24CEF4B90;
  a1[46] = &unk_24CEF4BB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF4A90;
  a1[45] = &unk_24CEF4B18;
  a1[46] = &unk_24CEF4B40;
  return a1;
}

void sub_212F17E84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF4C28;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F17F50(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF4C28;
  di_log::logger_buf<di_log::log_printer<485ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<485ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<485ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F18344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<485ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 485;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 485;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF4E48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F185B8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF4E48;
  di_log::logger_buf<di_log::log_printer<495ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<495ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<495ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F189AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<495ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 495;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 495;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF5068;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F18C20(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF5068;
  di_log::logger_buf<di_log::log_printer<503ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<503ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<503ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F19014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<503ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 503;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 503;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF5288;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F19288(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF5288;
  di_log::logger_buf<di_log::log_printer<551ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<551ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<551ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1967C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<551ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 551;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 551;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF54A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F198F0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF54A8;
  di_log::logger_buf<di_log::log_printer<554ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<554ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<554ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F19CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<554ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 554;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 554;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF56C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F19F58(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF56C8;
  di_log::logger_buf<di_log::log_printer<561ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<561ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<561ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1A34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<561ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 561;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 561;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF58E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1A5C0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF58E8;
  di_log::logger_buf<di_log::log_printer<565ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<565ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<565ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1A9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<565ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 565;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 565;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>::operator=[abi:ne180100]<plugin_header,0,plugin_header,5ul,0>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>(a1, a1, a2);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<610ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<610ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF5970;
  a1[45] = &unk_24CEF5A70;
  a1[46] = &unk_24CEF5A98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF5970;
  a1[45] = &unk_24CEF59F8;
  a1[46] = &unk_24CEF5A20;
  return a1;
}

void sub_212F1AC74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF5B08;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1AD40(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF5B08;
  di_log::logger_buf<di_log::log_printer<610ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<610ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<610ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1B134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<610ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 610;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 610;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,int,BOOL &,void>(int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,int,BOOL &,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212F1B3A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,int,BOOL &,std::allocator<FileLocal>,0>(_QWORD *a1, int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF38;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_212F1B400(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t crypto::format_serializer::encode(void (**a1)(_QWORD, const char *, _QWORD, uint64_t), _QWORD *a2)
{
  (*a1)(a1, "crypto_hdr", a2[6], 76);
  (*a1)(a1, "enc_keys", *a2, a2[1] - *a2);
  return ((uint64_t (*)(_QWORD, const char *, _QWORD, _QWORD))*a1)(a1, "prng_keys", a2[3], a2[4] - a2[3]);
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::decode_buffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void *v10;
  BOOL v11;
  const std::error_category *result;
  char v13;
  void *__src;

  __src = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, void **))a1)(a1, a2, &__src);
  v10 = __src;
  if (__src)
    v11 = v9 <= 0;
  else
    v11 = 1;
  if (v11)
    goto LABEL_8;
  if (v9 != a4)
  {
    (*(void (**)(void *))(a1 + 16))(__src);
LABEL_8:
    result = std::generic_category();
    v13 = 0;
    *(_QWORD *)a5 = 22;
    *(_QWORD *)(a5 + 8) = result;
    goto LABEL_9;
  }
  memcpy(a3, __src, a4);
  result = (const std::error_category *)(*(uint64_t (**)(void *))(a1 + 16))(v10);
  *(_BYTE *)a5 = 0;
  v13 = 1;
LABEL_9:
  *(_BYTE *)(a5 + 16) = v13;
  return result;
}

void crypto::format_serializer::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  const std::error_category *v10;
  const std::error_category *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18[3];
  void *v19;
  void *v20;
  uint64_t v21;
  void *__p;
  void *v23;
  __n128 v24;
  uint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  const void *v30;
  _BYTE v31[8];
  __int128 v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  crypto::header_serializer::decode((uint64_t (**)(_QWORD, const char *, char **))a1, (uint64_t)v31);
  if (!v38)
  {
    *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v31);
LABEL_20:
    *(_BYTE *)(a2 + 72) = 0;
    return;
  }
  v30 = 0;
  v4 = (*(uint64_t (**)(uint64_t, const char *, const void **))a1)(a1, "enc_keys", &v30);
  if (!v30 || v4 <= 0)
  {
    v10 = std::generic_category();
    *(_QWORD *)a2 = 22;
    *(_QWORD *)(a2 + 8) = v10;
    goto LABEL_20;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v27, v30, (uint64_t)v30 + v4, v4);
  (*(void (**)(const void *))(a1 + 16))(v30);
  v26 = 0;
  v5 = (*(uint64_t (**)(uint64_t, const char *, const void **))a1)(a1, "prng_keys", &v26);
  if (v26 && v5 > 0)
  {
    v24 = 0uLL;
    v25 = 0;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v24, v26, (uint64_t)v26 + v5, v5);
    (*(void (**)(const void *))(a1 + 16))(v26);
    v6 = operator new();
    *(_QWORD *)v6 = 0x6173646372636E65;
    *(_OWORD *)(v6 + 8) = v32;
    *(_QWORD *)(v6 + 24) = v33;
    *(_DWORD *)(v6 + 32) = v34;
    *(_OWORD *)(v6 + 36) = v35;
    *(_OWORD *)(v6 + 52) = v36;
    *(_QWORD *)(v6 + 68) = v37;
    *(_QWORD *)&v12 = v6;
    v7 = crypto::keys::keys(v18, (uint64_t)&v27, &v24, (uint64_t *)&v12);
    v8 = v12;
    *(_QWORD *)&v12 = 0;
    if (v8)
      MEMORY[0x2199A8A18](v8, 0x1000C4015A9971DLL, v7);
    crypto::format::format(&v12);
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v13;
    v12 = 0uLL;
    *(_OWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 40) = v15;
    v13 = 0;
    v14 = 0uLL;
    v15 = 0;
    *(_OWORD *)(a2 + 48) = v16;
    *(_QWORD *)(a2 + 64) = v17;
    *(_BYTE *)(a2 + 72) = 1;
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    v9 = v21;
    v21 = 0;
    if (v9)
      MEMORY[0x2199A8A18](v9, 0x1000C4015A9971DLL);
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
    if (v24.n128_u64[0])
    {
      v24.n128_u64[1] = v24.n128_u64[0];
      operator delete((void *)v24.n128_u64[0]);
    }
  }
  else
  {
    v11 = std::generic_category();
    *(_QWORD *)a2 = 22;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 72) = 0;
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_212F1B7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  crypto::keys::~keys((crypto::keys *)&a19);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  v32 = *(void **)(v30 - 160);
  if (v32)
  {
    *(_QWORD *)(v30 - 152) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::format,std::error_code>::error(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 72))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CEED160;
  }
  return result;
}

void std::make_shared[abi:ne180100]<crypto::format,crypto::format,void>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24CEEEED8;
  std::construct_at[abi:ne180100]<crypto::format,crypto::format,crypto::format*>((uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
}

const std::error_category *crypto::header_serializer::decode@<X0>(uint64_t (**a1)(_QWORD, const char *, char **)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  BOOL v5;
  const std::error_category *result;
  const std::error_category *v7;
  char *v8;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v3 = (*a1)(a1, "crypto_hdr", &v8);
  v4 = v8;
  if (v8)
    v5 = v3 <= 0;
  else
    v5 = 1;
  if (v5)
  {
    result = std::generic_category();
    *(_QWORD *)a2 = 2;
    *(_QWORD *)(a2 + 8) = result;
    *(_BYTE *)(a2 + 80) = 0;
  }
  else
  {
    if (v3 == 76)
    {
      crypto::header::header((crypto::header *)v9, v8);
      *(_QWORD *)a2 = 0x6173646372636E65;
      *(_OWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 24) = v11;
      *(_DWORD *)(a2 + 32) = v12;
      *(_OWORD *)(a2 + 36) = v13;
      *(_OWORD *)(a2 + 52) = v14;
      *(_QWORD *)(a2 + 68) = v15;
      *(_BYTE *)(a2 + 80) = 1;
    }
    else
    {
      v7 = std::generic_category();
      *(_QWORD *)a2 = 22;
      *(_QWORD *)(a2 + 8) = v7;
      *(_BYTE *)(a2 + 80) = 0;
    }
    return (const std::error_category *)MEMORY[0x2199A8A00](v4, 0x1000C8077774924);
  }
  return result;
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 80))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CEED160;
  }
  return result;
}

__n128 std::make_unique[abi:ne180100]<crypto::header,crypto::header>@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = 0x6173646372636E65;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 36) = *(_OWORD *)(a1 + 36);
  result = *(__n128 *)(a1 + 52);
  *(__n128 *)(v4 + 52) = result;
  *(_QWORD *)(v4 + 68) = *(_QWORD *)(a1 + 68);
  *a2 = v4;
  return result;
}

_QWORD *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_212F1BB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>(int *a1@<X1>, BOOL *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL,BOOL,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212F1BBE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL,BOOL,std::allocator<FileLocal>,0>(_QWORD *a1, int *a2, BOOL *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEEF38;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_212F1BC38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double std::construct_at[abi:ne180100]<crypto::format,crypto::format,crypto::format*>(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v3;

  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

_QWORD *diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v14;
  __int128 v15;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = *a3;
  v7 = a3[1];
  a1[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[4] = 0;
  a1[5] = 0;
  v14 = 0;
  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,void>((uint64_t)a1, (uint64_t)(a1 + 2), &v14, &v15);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)(a1 + 4), &v15);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_212F1BD98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212F1BE20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF620;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_212F1BE68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9[0] = 0x200000001;
  smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", v8, (int *)v9, 2);
  crypto_format_backend::crypto_format_backend(a1, a2, a3, &v8);
  return a1;
}

std::string *diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(std::string *this, __int128 *a2, int a3, uint64_t a4)
{
  __int128 v7;
  std::__shared_weak_count *size;
  std::string::pointer data;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _OWORD *exception;
  _BYTE v16[24];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[23].__r_.__value_.__l.__data_) = 0;
  LODWORD(this[23].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  HIDWORD(this[23].__r_.__value_.__r.__words[1]) = a3;
  LODWORD(this[23].__r_.__value_.__r.__words[2]) = a3;
  *(_OWORD *)&this[24].__r_.__value_.__l.__data_ = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)&this[24].__r_.__value_.__r.__words[2] = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_OWORD *)&this[25].__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  std::shared_ptr<DiskImage>::operator=[abi:ne180100](this[1].__r_.__value_.__r.__words, (uint64_t *)&this[25].__r_.__value_.__l.__size_);
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, this[23].__r_.__value_.__r.__words[2], 0, (uint64_t)v16);
  if (!v16[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v16);
  }
  if (LODWORD(this[23].__r_.__value_.__r.__words[1]) == 8)
  {
    data = this[1].__r_.__value_.__l.__data_;
    size = (std::__shared_weak_count *)this[1].__r_.__value_.__l.__size_;
    if (size)
    {
      p_shared_owners = (unint64_t *)&size->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v17[0] = 0x200000001;
    smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", 2, (int *)v17, 2);
    *((_DWORD *)data + 48) = 2;
    if (size)
    {
      v12 = (unint64_t *)&size->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  return this;
}

void sub_212F1C0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)(v2 + 576));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 48);
  v5 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v5)
    MEMORY[0x2199A8A18](v5, 0x1000C4015A9971DLL);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

std::string *diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(std::string *this, __int128 *a2, std::string::size_type *a3, int a4, int a5, std::string::size_type *a6)
{
  __int128 v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type v15;
  _OWORD *exception;
  _BYTE v18[24];

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  this[1].__r_.__value_.__r.__words[0] = *a3;
  v12 = a3[1];
  this[1].__r_.__value_.__l.__size_ = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *a6;
  *a6 = 0;
  this[1].__r_.__value_.__r.__words[2] = v15;
  LODWORD(this[23].__r_.__value_.__l.__data_) = 0;
  LODWORD(this[23].__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(this[23].__r_.__value_.__r.__words[1]) = a5;
  LODWORD(this[23].__r_.__value_.__r.__words[2]) = a4;
  *(_OWORD *)&this[24].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[24].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[25].__r_.__value_.__r.__words[1] = 0u;
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, a4, 1, (uint64_t)v18);
  if (!v18[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v18);
  }
  return this;
}

void sub_212F1C26C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  __cxa_free_exception(v3);
  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)(v1 + 576));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v1 + 48);
  v5 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v5)
    MEMORY[0x2199A8A18](v5, 0x1000C4015A9971DLL);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v5 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 40) = v5;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 48, (uint64_t)(a2 + 3));
  v6 = *((_QWORD *)a2 + 70);
  *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
  *(_QWORD *)(a1 + 560) = v6;
  *(_OWORD *)(a1 + 576) = a2[36];
  a2[36] = 0u;
  *(_OWORD *)(a1 + 592) = a2[37];
  *((_QWORD *)a2 + 75) = 0;
  *((_QWORD *)a2 + 74) = 0;
  *(_OWORD *)(a1 + 608) = a2[38];
  *((_QWORD *)a2 + 77) = 0;
  *((_QWORD *)a2 + 76) = 0;
  return a1;
}

void sub_212F1C380(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v4)
    MEMORY[0x2199A8A18](v4, 0x1000C4015A9971DLL);
  diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(v2, v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 576;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 608);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 592);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 48);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    MEMORY[0x2199A8A18](v3, 0x1000C4015A9971DLL);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_BYTE *diskimage_uio::details::diskimage_open_params_impl::validate_unlocked@<X0>(const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  _QWORD v9[45];
  uint64_t v10;
  _BYTE v11[152];
  BOOL v12[24];

  diskimage_uio::details::diskimage_open_params_impl::is_locked(this, v12);
  if (v12[16])
  {
    result = (_BYTE *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value((uint64_t)v12);
    if (*result)
    {
      *(_QWORD *)&v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((_QWORD *)&v7 + 1) = 84;
      v8 = 16;
      di_log::logger<di_log::log_printer<650ul>>::logger(v9, &v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Diskimageuio: image is locked", 29);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x2199A89AC](v11);
      result = (_BYTE *)make_error_code(162);
      v4 = 0;
      *(_QWORD *)a2 = result;
      *(_QWORD *)(a2 + 8) = v5;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      v4 = 1;
    }
  }
  else
  {
    *(_QWORD *)&v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((_QWORD *)&v7 + 1) = 84;
    v8 = 16;
    di_log::logger<di_log::log_printer<645ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Diskimageuio: can't get lock status ", 36);
    v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v9, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x2199A89AC](v11);
    result = (_BYTE *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

void sub_212F1C594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  di_log::logger<di_log::log_printer<650ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<660ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<660ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF5FD0;
  a1[45] = &unk_24CEF60D0;
  a1[46] = &unk_24CEF60F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF5FD0;
  a1[45] = &unk_24CEF6058;
  a1[46] = &unk_24CEF6080;
  return a1;
}

void sub_212F1C63C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<645ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<645ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF5B90;
  a1[45] = &unk_24CEF5C90;
  a1[46] = &unk_24CEF5CB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF5B90;
  a1[45] = &unk_24CEF5C18;
  a1[46] = &unk_24CEF5C40;
  return a1;
}

void sub_212F1C724(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<650ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<650ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF5DB0;
  a1[45] = &unk_24CEF5EB0;
  a1[46] = &unk_24CEF5ED8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF5DB0;
  a1[45] = &unk_24CEF5E38;
  a1[46] = &unk_24CEF5E60;
  return a1;
}

void sub_212F1C80C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF5D28;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1C8D8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF5D28;
  di_log::logger_buf<di_log::log_printer<645ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<645ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<645ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1CCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<645ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 645;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 645;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF5F48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1CF40(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF5F48;
  di_log::logger_buf<di_log::log_printer<650ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<650ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<650ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1D334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<650ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 650;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 650;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF6168;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1D5A8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF6168;
  di_log::logger_buf<di_log::log_printer<660ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<660ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<660ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1D99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<660ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 660;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 660;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<671ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<671ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF61F0;
  a1[45] = &unk_24CEF62F0;
  a1[46] = &unk_24CEF6318;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF61F0;
  a1[45] = &unk_24CEF6278;
  a1[46] = &unk_24CEF62A0;
  return a1;
}

void sub_212F1DC2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF6388;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1DCF8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF6388;
  di_log::logger_buf<di_log::log_printer<671ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<671ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<671ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1E0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<671ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 671;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 671;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X8>)
{
  const std::error_category *result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)&v3 = "hdr_get_block_size(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((_QWORD *)&v3 + 1) = 70;
  v4 = 16;
  di_log::logger<di_log::log_printer<100ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x2199A89AC](&v7);
  result = std::generic_category();
  *(_QWORD *)a1 = 6;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_212F1E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf((uint64_t)va);
  MEMORY[0x2199A89AC](v4 + 368);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 512;
  *(_BYTE *)(a1 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(unsigned __int16 *)(a1 + 68);
  *(_BYTE *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_BYTE *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 v3;

  diskimage_uio::details::diskimage_open_params_impl::get_block_size(*(const std::error_category **)(*(_QWORD *)(*(_QWORD *)a1 + 8) - 8), &v3);
  *(_QWORD *)a2 = v3.n128_u64[0];
  *(_BYTE *)(a2 + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<100ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<100ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF6440;
  a1[45] = &unk_24CEF6540;
  a1[46] = &unk_24CEF6568;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF6440;
  a1[45] = &unk_24CEF64C8;
  a1[46] = &unk_24CEF64F0;
  return a1;
}

void sub_212F1E4FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF65D8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1E5C8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF65D8;
  di_log::logger_buf<di_log::log_printer<100ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<100ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<100ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1E9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<100ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 100;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 100;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<681ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<681ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF6660;
  a1[45] = &unk_24CEF6760;
  a1[46] = &unk_24CEF6788;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF6660;
  a1[45] = &unk_24CEF66E8;
  a1[46] = &unk_24CEF6710;
  return a1;
}

void sub_212F1EC4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF67F8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1ED18(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF67F8;
  di_log::logger_buf<di_log::log_printer<681ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<681ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<681ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1F10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<681ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 681;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 681;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X8>)
{
  const std::error_category *result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)&v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((_QWORD *)&v3 + 1) = 69;
  v4 = 16;
  di_log::logger<di_log::log_printer<112ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x2199A89AC](&v7);
  result = std::generic_category();
  *(_QWORD *)a1 = 6;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_212F1F3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf((uint64_t)va);
  MEMORY[0x2199A89AC](v4 + 368);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 492);
  *(_BYTE *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 v3;

  diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks(*(const std::error_category **)(*(_QWORD *)(*(_QWORD *)a1 + 8) - 8), &v3);
  *(_QWORD *)a2 = v3.n128_u64[0];
  *(_BYTE *)(a2 + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<112ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<112ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF68B0;
  a1[45] = &unk_24CEF69B0;
  a1[46] = &unk_24CEF69D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF68B0;
  a1[45] = &unk_24CEF6938;
  a1[46] = &unk_24CEF6960;
  return a1;
}

void sub_212F1F520(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF6A48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F1F5EC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF6A48;
  di_log::logger_buf<di_log::log_printer<112ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<112ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<112ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F1F9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<112ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 112;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 112;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<741ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<741ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF6AD0;
  a1[45] = &unk_24CEF6BD0;
  a1[46] = &unk_24CEF6BF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF6AD0;
  a1[45] = &unk_24CEF6B58;
  a1[46] = &unk_24CEF6B80;
  return a1;
}

void sub_212F1FC70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<745ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<745ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF6CF0;
  a1[45] = &unk_24CEF6DF0;
  a1[46] = &unk_24CEF6E18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF6CF0;
  a1[45] = &unk_24CEF6D78;
  a1[46] = &unk_24CEF6DA0;
  return a1;
}

void sub_212F1FD58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<751ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<751ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF6F10;
  a1[45] = &unk_24CEF7010;
  a1[46] = &unk_24CEF7038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF6F10;
  a1[45] = &unk_24CEF6F98;
  a1[46] = &unk_24CEF6FC0;
  return a1;
}

void sub_212F1FE40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<755ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<755ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF7130;
  a1[45] = &unk_24CEF7230;
  a1[46] = &unk_24CEF7258;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF7130;
  a1[45] = &unk_24CEF71B8;
  a1[46] = &unk_24CEF71E0;
  return a1;
}

void sub_212F1FF28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<764ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<764ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF7350;
  a1[45] = &unk_24CEF7450;
  a1[46] = &unk_24CEF7478;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF7350;
  a1[45] = &unk_24CEF73D8;
  a1[46] = &unk_24CEF7400;
  return a1;
}

void sub_212F20010(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(diskimage_uio::details::diskimage_open_params_impl *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  _BYTE v24[152];
  __int128 v25;
  char v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, *((_DWORD *)this + 142), 0, (uint64_t)&v25);
  if (!v26)
  {
    if (*((_DWORD *)this + 141) == 1 && *((_DWORD *)this + 142) != 1)
    {
      v17 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v25);
      *(_QWORD *)&v21 = 35;
      *((_QWORD *)&v21 + 1) = std::generic_category();
      if ((*(unsigned int (**)(_QWORD, _QWORD, __int128 *))(**((_QWORD **)v17 + 1) + 32))(*((_QWORD *)v17 + 1), *v17, &v21)|| (*(unsigned int (**)(_QWORD, unsigned int *, _QWORD))(**((_QWORD **)&v21 + 1) + 40))(*((_QWORD *)&v21 + 1), v17, v21))
      {
        *(_QWORD *)&v27 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
        *((_QWORD *)&v27 + 1) = 96;
        v28 = 2;
        di_log::logger<di_log::log_printer<698ul>>::logger(&v21, &v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Diskimageuio: required mode ", 28);
        diskimage_uio::operator<<(&v23, *((_DWORD *)this + 141));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)" is different than current mode ", 32);
        diskimage_uio::operator<<(&v23, *((_DWORD *)this + 142));
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf((uint64_t)&v21);
        MEMORY[0x2199A89AC](v24);
        diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, *((_DWORD *)this + 141), 0, (uint64_t)&v21);
        if (v22 && v26)
          goto LABEL_32;
        if (v22)
        {
          if (v26)
            v25 = v21;
          else
            v26 = v22;
LABEL_32:
          *(_QWORD *)&v27 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
          *((_QWORD *)&v27 + 1) = 96;
          v28 = 16;
          di_log::logger<di_log::log_printer<703ul>>::logger(&v21, &v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Diskimageuio: after reopening backend to read-write, it's no longer encrypted", 77);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf((uint64_t)&v21);
          goto LABEL_33;
        }
        v25 = v21;
        if (v26)
          v26 = 0;
        if (a3)
        {
          diskimage_uio::details::diskimage_open_params_impl::set_passphrase(this, a2, 0);
          return;
        }
      }
    }
    *(_QWORD *)&v27 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((_QWORD *)&v27 + 1) = 96;
    v28 = 16;
    di_log::logger<di_log::log_printer<714ul>>::logger(&v21, &v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Diskimageuio: couldn't resolve image while setting passphrase ", 62);
    v14 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v25);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v21, v14);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf((uint64_t)&v21);
    MEMORY[0x2199A89AC](v24);
    v15 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v25);
LABEL_18:
    *(_OWORD *)a4 = *v15;
LABEL_34:
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  diskimage_uio::details::diskimage_open_params_impl::is_encrypted((const std::error_category *)this, &v27);
  if (!(_BYTE)v28)
  {
    *(_QWORD *)&v19 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((_QWORD *)&v19 + 1) = 96;
    v20 = 16;
    di_log::logger<di_log::log_printer<719ul>>::logger(&v21, &v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Diskimageuio: can't set passphrase, can't get encrypted status ", 63);
    v16 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v27);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v21, v16);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf((uint64_t)&v21);
    MEMORY[0x2199A89AC](v24);
    v15 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v27);
    goto LABEL_18;
  }
  if (!(_BYTE)v27)
  {
    *(_QWORD *)&v19 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((_QWORD *)&v19 + 1) = 96;
    v20 = 16;
    di_log::logger<di_log::log_printer<723ul>>::logger(&v21, &v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Diskimageuio: can't set passphrase, image not encrypted after reopen", 68);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf((uint64_t)&v21);
LABEL_33:
    MEMORY[0x2199A89AC](v24);
    *(_QWORD *)a4 = make_error_code(161);
    *(_QWORD *)(a4 + 8) = v18;
    goto LABEL_34;
  }
  if (*((_DWORD *)this + 140) == 8)
  {
    v9 = *((_QWORD *)this + 3);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    *(_QWORD *)&v21 = v9;
    *((_QWORD *)&v21 + 1) = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    *(_QWORD *)&v27 = 0x200000001;
    smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", 2, (int *)&v27, 2);
    *(_DWORD *)(v9 + 192) = 2;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_212F204F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<703ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF6C68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F205C8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF6C68;
  di_log::logger_buf<di_log::log_printer<741ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<741ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<741ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F209BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<741ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 741;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 741;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF6E88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F20C30(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF6E88;
  di_log::logger_buf<di_log::log_printer<745ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<745ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<745ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F21024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<745ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 745;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 745;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF70A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F21298(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF70A8;
  di_log::logger_buf<di_log::log_printer<751ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<751ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<751ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F2168C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<751ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 751;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 751;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF72C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F21900(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF72C8;
  di_log::logger_buf<di_log::log_printer<755ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<755ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<755ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F21CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<755ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 755;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 755;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v17;
  __int128 v18;
  void *v19[3];
  void *v20;
  void *v21;
  uint64_t v22;
  void *__p;
  void *v24;

  *(_QWORD *)a1 = *a3;
  v6 = a3[1];
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  crypto::keys::keys(v19, *a3, a2, a4);
  std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>(&v18);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 16, &v18);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17 = 0;
  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,void>((uint64_t)a3, a1 + 16, &v17, &v18);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 32, &v18);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v15 = v22;
  v22 = 0;
  if (v15)
    MEMORY[0x2199A8A18](v15, 0x1000C4015A9971DLL);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  return a1;
}

void sub_212F2208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a4);
  crypto::keys::~keys((crypto::keys *)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,void>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_212F22128(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CEEF620;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_212F22170(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF74E8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F221EC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF74E8;
  di_log::logger_buf<di_log::log_printer<764ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<764ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<764ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F225E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<764ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 764;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 764;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<698ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<698ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF7570;
  a1[45] = &unk_24CEF7670;
  a1[46] = &unk_24CEF7698;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF7570;
  a1[45] = &unk_24CEF75F8;
  a1[46] = &unk_24CEF7620;
  return a1;
}

void sub_212F22870(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<703ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<703ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF7790;
  a1[45] = &unk_24CEF7890;
  a1[46] = &unk_24CEF78B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF7790;
  a1[45] = &unk_24CEF7818;
  a1[46] = &unk_24CEF7840;
  return a1;
}

void sub_212F22958(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<714ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<714ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF79B0;
  a1[45] = &unk_24CEF7AB0;
  a1[46] = &unk_24CEF7AD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF79B0;
  a1[45] = &unk_24CEF7A38;
  a1[46] = &unk_24CEF7A60;
  return a1;
}

void sub_212F22A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<719ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<719ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF7BD0;
  a1[45] = &unk_24CEF7CD0;
  a1[46] = &unk_24CEF7CF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF7BD0;
  a1[45] = &unk_24CEF7C58;
  a1[46] = &unk_24CEF7C80;
  return a1;
}

void sub_212F22B28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<723ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<723ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF7DF0;
  a1[45] = &unk_24CEF7EF0;
  a1[46] = &unk_24CEF7F18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF7DF0;
  a1[45] = &unk_24CEF7E78;
  a1[46] = &unk_24CEF7EA0;
  return a1;
}

void sub_212F22C10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF7708;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F22CDC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF7708;
  di_log::logger_buf<di_log::log_printer<698ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<698ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<698ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F230D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<698ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 698;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 698;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF7928;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F23344(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF7928;
  di_log::logger_buf<di_log::log_printer<703ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<703ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<703ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F23738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<703ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 703;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 703;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF7B48;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F239AC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF7B48;
  di_log::logger_buf<di_log::log_printer<714ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<714ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<714ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F23DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<714ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 714;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 714;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF7D68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F24014(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF7D68;
  di_log::logger_buf<di_log::log_printer<719ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<719ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<719ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F24408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<719ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 719;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 719;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF7F88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F2467C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF7F88;
  di_log::logger_buf<di_log::log_printer<723ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<723ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<723ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F24A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<723ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 723;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 723;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<159ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<159ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF8010;
  a1[45] = &unk_24CEF8110;
  a1[46] = &unk_24CEF8138;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF8010;
  a1[45] = &unk_24CEF8098;
  a1[46] = &unk_24CEF80C0;
  return a1;
}

void sub_212F24D00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF81A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F24DCC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF81A8;
  di_log::logger_buf<di_log::log_printer<159ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<159ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<159ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F251C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<159ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 159;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 159;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<173ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<173ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF8230;
  a1[45] = &unk_24CEF8330;
  a1[46] = &unk_24CEF8358;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF8230;
  a1[45] = &unk_24CEF82B8;
  a1[46] = &unk_24CEF82E0;
  return a1;
}

void sub_212F25450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF83C8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F2551C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF83C8;
  di_log::logger_buf<di_log::log_printer<173ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<173ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<173ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F25910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<173ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 173;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 173;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_impl::create_context_impl@<X0>(diskimage_uio::details::diskimage_impl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

di_hybrid_subscriber_t *std::unique_ptr<di_hybrid_subscriber_t>::reset[abi:ne180100](di_hybrid_subscriber_t **a1, di_hybrid_subscriber_t *a2)
{
  di_hybrid_subscriber_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    di_hybrid_subscriber_t::~di_hybrid_subscriber_t(result);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

void di_hybrid_subscriber_t::~di_hybrid_subscriber_t(di_hybrid_subscriber_t *this)
{
  NSObject **v2;
  di_hybrid_subscriber_t *v3;
  uint64_t v4;

  v2 = (NSObject **)((char *)this + 504);
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 63, &__block_literal_global_4);
  gcd::gcd_group::~gcd_group((NSObject **)this + 78);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((_QWORD *)this + 72);
  std::mutex::~mutex((std::mutex *)this + 8);
  gcd::gcd_group::~gcd_group(v2);
  PluginRing::~PluginRing((di_hybrid_subscriber_t *)((char *)this + 304));
  v3 = (di_hybrid_subscriber_t *)*((_QWORD *)this + 34);
  if (v3 == (di_hybrid_subscriber_t *)((char *)this + 248))
  {
    v4 = 4;
    v3 = (di_hybrid_subscriber_t *)((char *)this + 248);
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t((uint64_t)this + 120);
}

void std::default_delete<io_rings_di_subscriber_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = *(_QWORD **)(a2 + 272);
    if (v3 == (_QWORD *)(a2 + 248))
    {
      v4 = 4;
      v3 = (_QWORD *)(a2 + 248);
    }
    else
    {
      if (!v3)
      {
LABEL_8:
        pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(a2 + 120);
        JUMPOUT(0x2199A8A18);
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }
}

uint64_t io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_1::__invoke(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD v7[3];

  io_rings_di_subscriber_t::get_ctx((io_rings_di_subscriber_t *)a1, v7);
  if (v7[1])
    v4 = io_rings_parse_and_execute_sqe((uint64_t)a1, (uint64_t)v7, a2);
  else
    v4 = -12;
  v5 = io_rings_return_status(a1[7], a2, v4, 0);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)v7);
  return v5;
}

void sub_212F25D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)va);
  _Unwind_Resume(a1);
}

void header_exception::~header_exception(std::exception *this)
{
  DiskImagesRuntimeException::~DiskImagesRuntimeException(this);
  JUMPOUT(0x2199A8A18);
}

void ***std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x2199A8A18](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF0BD8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F25EDC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF0E58;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F25F58(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>(uint64_t a1, char *__s)
{
  _QWORD *v4;
  size_t v5;

  v4 = (_QWORD *)(a1 + 360);
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v5);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1908ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1908ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF84B8;
  a1[45] = &unk_24CEF85B8;
  a1[46] = &unk_24CEF85E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF84B8;
  a1[45] = &unk_24CEF8540;
  a1[46] = &unk_24CEF8568;
  return a1;
}

void sub_212F26038(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<1915ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<1915ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF86D8;
  a1[45] = &unk_24CEF87D8;
  a1[46] = &unk_24CEF8800;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF86D8;
  a1[45] = &unk_24CEF8760;
  a1[46] = &unk_24CEF8788;
  return a1;
}

void sub_212F26120(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  int v7;
  const std::error_category *v8;
  _QWORD *exception;
  uint64_t v11;
  _QWORD *v12;
  const std::error_category *v13;
  int v14;
  diskimage_uio::details::diskimage_open_params_impl *v15;
  __int128 v16;
  int v17;
  _QWORD v18[2];
  char v19;
  _QWORD v20[20];

  if (a1 == a2)
  {
    *(_QWORD *)&v16 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((_QWORD *)&v16 + 1) = 77;
    v17 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v18, &v16);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>((uint64_t)v18, "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v18);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = make_error_code(157);
    exception[1] = v11;
  }
  if (a1 + 16 == a2)
  {
    v14 = *(_DWORD *)a1;
    v7 = *(_DWORD *)a1;
    v8 = *(const std::error_category **)(a1 + 8);
    v15 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      *(_QWORD *)&v16 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
      *((_QWORD *)&v16 + 1) = 77;
      v17 = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(v18, &v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
      diskimage_uio::operator<<(v20, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" rather than image", 18);
      di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v18);
      v12 = __cxa_allocate_exception(0x10uLL);
      v13 = std::generic_category();
      *v12 = 22;
      v12[1] = v13;
    }
    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v8, (uint64_t)&v16);
    LODWORD(v18[0]) = 12;
    v19 = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v16, (uint64_t)v18))
    {
      v6 = (_QWORD *)operator new();
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v15);
      *v6 = &off_24CEF09E0;
    }
    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v15, (uint64_t)&v16);
      LODWORD(v18[0]) = 11;
      v19 = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>((uint64_t)&v16, (uint64_t)v18)&& *(_QWORD *)(*((_QWORD *)v15 + 6) + 8) - **((_QWORD **)v15 + 6) == 16)
      {
        v6 = (_QWORD *)diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>();
      }
      else
      {
        v6 = (_QWORD *)operator new();
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v15);
      }
    }
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v15);
  }
  else
  {
    v6 = (_QWORD *)operator new();
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(v6, a1, a2, a3);
  }
  return v6;
}

void sub_212F26404(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF8650;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F264FC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF8650;
  di_log::logger_buf<di_log::log_printer<1908ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1908ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1908ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F268F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1908ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1908;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1908;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF8870;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F26B64(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF8870;
  di_log::logger_buf<di_log::log_printer<1915ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<1915ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1915ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F26F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1915ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 1915;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 1915;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  diskimage_uio::details::diskimage_open_params_impl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  BOOL v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _OWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *exception;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  const std::error_category *v55;
  char v56;
  int v57[4];
  char v58;
  void *lpsrc;
  int v60;
  diskimage_uio::details::diskimage_open_params_impl *v61;
  __int128 v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[20];
  int v69;
  __int128 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24CEF0938;
  a1[1] = 0;
  if (a2 == a3)
  {
    *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((_QWORD *)&v62 + 1) = 54;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: No diskimage given", 32);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v64);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = make_error_code(157);
    exception[1] = v51;
  }
  v60 = *(_DWORD *)a2;
  v61 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  v8 = v61;
  *(_QWORD *)(a2 + 8) = 0;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v8);
  v9 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &lpsrc);
    v10 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
    if (!v60)
    {
      *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
      *((_QWORD *)&v62 + 1) = 54;
      LODWORD(v63) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v64, &v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot", 93);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v64);
      v52 = __cxa_allocate_exception(0x10uLL);
      *v52 = make_error_code(163);
      v52[1] = v53;
    }
    v11 = v10;
    v62 = 0uLL;
    v63 = 0;
    v12 = lpsrc;
    v56 = a4;
    if (v60 == 1)
    {
      lpsrc = 0;
      v64 = v12;
      LODWORD(v65) = 2;
    }
    else
    {
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
      if (v60 == 3)
        v17 = v16;
      else
        v17 = 0;
      v18 = lpsrc;
      if (v17 == 1 && lpsrc != 0)
      {
        if (v20)
          v20[184] = 0;
      }
      v21 = v17 ^ 1;
      v22 = *((_QWORD *)&v62 + 1);
      lpsrc = 0;
      v64 = v18;
      LODWORD(v65) = v21;
      if (*((_QWORD *)&v62 + 1) < v63)
      {
        **((_QWORD **)&v62 + 1) = v18;
        if (v18)
        {
          v23 = (_QWORD *)operator new();
          v24 = v64;
          *v23 = &off_24CEEED20;
          v23[1] = 0;
          v23[2] = 0;
          v23[3] = v24;
        }
        else
        {
          v23 = 0;
        }
        *(_QWORD *)(v22 + 8) = v23;
        v64 = 0;
        *(_DWORD *)(v22 + 16) = v65;
        *((_QWORD *)&v62 + 1) = v22 + 24;
LABEL_26:
        v27 = v60;
        v28 = v60 == 1;
        while (1)
        {
          v60 = *(_DWORD *)v9;
          diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v61, (uint64_t *)(v9 + 8));
          diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v61);
          diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v61, (uint64_t)v57);
          if (!v58)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1028ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Can't get image format", 36);
            di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v64);
            v43 = __cxa_allocate_exception(0x10uLL);
            *v43 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v57);
          }
          diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
          v29 = v64;
          v64 = 0;
          v30 = lpsrc;
          lpsrc = v29;
          if (v30)
          {
            (*(void (**)(void *))(*(_QWORD *)v30 + 16))(v30);
            v31 = v64;
            v64 = 0;
            if (v31)
              (*(void (**)(void *))(*(_QWORD *)v31 + 16))(v31);
            v29 = lpsrc;
          }
          if (v29
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1035ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Nested stacking is not allowed.", 45);
            di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }
          if ((*(uint64_t (**)(void *))(*(_QWORD *)v29 + 24))(v29) != v11)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1040ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Multiple images given but block size differ. ", 59);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" block_size: ", 13);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" / ", 3);
            (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
            std::ostream::operator<<();
            di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v64);
LABEL_72:
            v44 = 163;
LABEL_73:
            v45 = __cxa_allocate_exception(0x10uLL);
            *v45 = make_error_code(v44);
            v45[1] = v46;
          }
          v9 += 16;
          if (v9 == a3)
            break;
          if (v57[0] != 8)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1056ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ", 48);
            v47 = diskimage_uio::operator<<(v68, v57[0]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8);
            di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }
          if (v60 != 1)
          {
            if (v60 != 2)
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1063ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ", 109);
              diskimage_uio::operator<<(v68, v60);
              di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v64);
LABEL_79:
              v48 = __cxa_allocate_exception(0x10uLL);
              *v48 = make_error_code(163);
              v48[1] = v49;
            }
            if ((*(unsigned int (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc))
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Snapshots should be read only", 43);
              di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v64);
              goto LABEL_79;
            }
LABEL_43:
            v32 = 1;
            goto LABEL_47;
          }
          if (v28)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Only single cache is allowed", 42);
            di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }
          if (v27 == 2)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Snapshot detected on top of cache", 47);
            di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }
          v28 = 1;
          v32 = 2;
LABEL_47:
          if (v57[0] != 12)
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)lpsrc + 72))(&v64);
            if (v64 || v65 || v66 || v67)
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1089ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
              di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v64);
              v44 = 164;
              goto LABEL_73;
            }
          }
          v33 = lpsrc;
          lpsrc = 0;
          v64 = v33;
          LODWORD(v65) = v32;
          v34 = *((_QWORD *)&v62 + 1);
          if (*((_QWORD *)&v62 + 1) >= v63)
          {
            v37 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v62, (uint64_t)&v64);
            v38 = v64;
            *((_QWORD *)&v62 + 1) = v37;
            v64 = 0;
            if (v38)
              (*(void (**)(void *))(*(_QWORD *)v38 + 16))(v38);
          }
          else
          {
            **((_QWORD **)&v62 + 1) = v33;
            if (v33)
            {
              v35 = (_QWORD *)operator new();
              v36 = v64;
              *v35 = &off_24CEEED20;
              v35[1] = 0;
              v35[2] = 0;
              v35[3] = v36;
            }
            else
            {
              v35 = 0;
            }
            *(_QWORD *)(v34 + 8) = v35;
            v64 = 0;
            *(_DWORD *)(v34 + 16) = v65;
            *((_QWORD *)&v62 + 1) = v34 + 24;
          }
          if (v9 == a3)
          {
            v39 = operator new();
            if ((v56 & 1) != 0)
              v40 = 1;
            else
              v40 = 2;
            v69 = v40;
            *(_QWORD *)&v70 = 0x200000001;
            smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v40, (int *)&v70, 2);
            DiskImageStackable::DiskImageStackable(v39, &v62, &v69);
            v41 = a1[1];
            a1[1] = v39;
            if (v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
            v64 = &v62;
            std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            v15 = lpsrc;
            lpsrc = 0;
            if (v15)
              goto LABEL_66;
            goto LABEL_67;
          }
        }
        if (v60)
        {
          *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
          *((_QWORD *)&v70 + 1) = 54;
          v71 = 16;
          di_log::logger<di_log::log_printer<1048ul>>::logger(&v64, &v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ", 59);
          diskimage_uio::operator<<(v68, v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" given", 6);
          di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v64);
          goto LABEL_72;
        }
        (*(void (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
        goto LABEL_43;
      }
    }
    v25 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v62, (uint64_t)&v64);
    v26 = v64;
    *((_QWORD *)&v62 + 1) = v25;
    v64 = 0;
    if (v26)
      (*(void (**)(void *))(*(_QWORD *)v26 + 16))(v26);
    goto LABEL_26;
  }
  if (v60)
  {
    *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((_QWORD *)&v62 + 1) = 54;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v68, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v64);
    v54 = __cxa_allocate_exception(0x10uLL);
    v55 = std::generic_category();
    *v54 = 22;
    v54[1] = v55;
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
  v13 = v64;
  v64 = 0;
  v14 = a1[1];
  a1[1] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    v15 = v64;
    v64 = 0;
    if (v15)
LABEL_66:
      (*(void (**)(void *))(*(_QWORD *)v15 + 16))(v15);
  }
LABEL_67:
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v61);
  return a1;
}

void sub_212F27C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  void **v22;
  uint64_t v23;

  v22 = a20;
  a20 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 2))(v22);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v23 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_212F27C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)va);
  JUMPOUT(0x212F27EB0);
}

void sub_212F27C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)va);
  JUMPOUT(0x212F27EC8);
}

void sub_212F27C30(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;
  uint64_t v2;
  uint64_t v4;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  v4 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  _Unwind_Resume(a1);
}

void sub_212F27C84()
{
  uint64_t v0;

  MEMORY[0x2199A8A18](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x212F27CA4);
}

void sub_212F27D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  __cxa_end_catch();
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27D60(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x212F27EE8);
}

void sub_212F27D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  void *v21;
  uint64_t v23;

  __cxa_free_exception(v21);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v23 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_212F27DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F27E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
  JUMPOUT(0x212F27E9CLL);
}

_QWORD *diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  diskimage_uio::details::diskimage_open_params_impl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  BOOL v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _OWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *exception;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  const std::error_category *v55;
  char v56;
  int v57[4];
  char v58;
  void *lpsrc;
  int v60;
  diskimage_uio::details::diskimage_open_params_impl *v61;
  __int128 v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[20];
  int v69;
  __int128 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24CEF0938;
  a1[1] = 0;
  if (a2 == a3)
  {
    *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((_QWORD *)&v62 + 1) = 54;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: No diskimage given", 32);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v64);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = make_error_code(157);
    exception[1] = v51;
  }
  v60 = *(_DWORD *)a2;
  v61 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  v8 = v61;
  *(_QWORD *)(a2 + 8) = 0;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v8);
  v9 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &lpsrc);
    v10 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
    if (!v60)
    {
      *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
      *((_QWORD *)&v62 + 1) = 54;
      LODWORD(v63) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v64, &v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot", 93);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v64);
      v52 = __cxa_allocate_exception(0x10uLL);
      *v52 = make_error_code(163);
      v52[1] = v53;
    }
    v11 = v10;
    v62 = 0uLL;
    v63 = 0;
    v12 = lpsrc;
    v56 = a4;
    if (v60 == 1)
    {
      lpsrc = 0;
      v64 = v12;
      LODWORD(v65) = 2;
    }
    else
    {
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
      if (v60 == 3)
        v17 = v16;
      else
        v17 = 0;
      v18 = lpsrc;
      if (v17 == 1 && lpsrc != 0)
      {
        if (v20)
          v20[184] = 0;
      }
      v21 = v17 ^ 1;
      v22 = *((_QWORD *)&v62 + 1);
      lpsrc = 0;
      v64 = v18;
      LODWORD(v65) = v21;
      if (*((_QWORD *)&v62 + 1) < v63)
      {
        **((_QWORD **)&v62 + 1) = v18;
        if (v18)
        {
          v23 = (_QWORD *)operator new();
          v24 = v64;
          *v23 = &off_24CEEED20;
          v23[1] = 0;
          v23[2] = 0;
          v23[3] = v24;
        }
        else
        {
          v23 = 0;
        }
        *(_QWORD *)(v22 + 8) = v23;
        v64 = 0;
        *(_DWORD *)(v22 + 16) = v65;
        *((_QWORD *)&v62 + 1) = v22 + 24;
LABEL_26:
        v27 = v60;
        v28 = v60 == 1;
        while (1)
        {
          v60 = *(_DWORD *)v9;
          diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v61, (uint64_t *)(v9 + 8));
          diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v61);
          diskimage_uio::details::diskimage_open_params_impl::query_image_format((const std::error_category *)v61, (uint64_t)v57);
          if (!v58)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1028ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Can't get image format", 36);
            di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v64);
            v43 = __cxa_allocate_exception(0x10uLL);
            *v43 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v57);
          }
          diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
          v29 = v64;
          v64 = 0;
          v30 = lpsrc;
          lpsrc = v29;
          if (v30)
          {
            (*(void (**)(void *))(*(_QWORD *)v30 + 16))(v30);
            v31 = v64;
            v64 = 0;
            if (v31)
              (*(void (**)(void *))(*(_QWORD *)v31 + 16))(v31);
            v29 = lpsrc;
          }
          if (v29
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1035ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Nested stacking is not allowed.", 45);
            di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }
          if ((*(uint64_t (**)(void *))(*(_QWORD *)v29 + 24))(v29) != v11)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1040ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Multiple images given but block size differ. ", 59);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" block_size: ", 13);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" / ", 3);
            (*(void (**)(void *))(*(_QWORD *)lpsrc + 24))(lpsrc);
            std::ostream::operator<<();
            di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v64);
LABEL_72:
            v44 = 163;
LABEL_73:
            v45 = __cxa_allocate_exception(0x10uLL);
            *v45 = make_error_code(v44);
            v45[1] = v46;
          }
          v9 += 16;
          if (v9 == a3)
            break;
          if (v57[0] != 8)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1056ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ", 48);
            v47 = diskimage_uio::operator<<(v68, v57[0]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8);
            di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }
          if (v60 != 1)
          {
            if (v60 != 2)
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1063ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ", 109);
              diskimage_uio::operator<<(v68, v60);
              di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v64);
LABEL_79:
              v48 = __cxa_allocate_exception(0x10uLL);
              *v48 = make_error_code(163);
              v48[1] = v49;
            }
            if ((*(unsigned int (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc))
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Snapshots should be read only", 43);
              di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v64);
              goto LABEL_79;
            }
LABEL_43:
            v32 = 1;
            goto LABEL_47;
          }
          if (v28)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Only single cache is allowed", 42);
            di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }
          if (v27 == 2)
          {
            *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((_QWORD *)&v70 + 1) = 54;
            v71 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: Snapshot detected on top of cache", 47);
            di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }
          v28 = 1;
          v32 = 2;
LABEL_47:
          if (v57[0] != 12)
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)lpsrc + 72))(&v64);
            if (v64 || v65 || v66 || v67)
            {
              *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
              *((_QWORD *)&v70 + 1) = 54;
              v71 = 16;
              di_log::logger<di_log::log_printer<1089ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: images with constraints currently not supported", 61);
              di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v64);
              v44 = 164;
              goto LABEL_73;
            }
          }
          v33 = lpsrc;
          lpsrc = 0;
          v64 = v33;
          LODWORD(v65) = v32;
          v34 = *((_QWORD *)&v62 + 1);
          if (*((_QWORD *)&v62 + 1) >= v63)
          {
            v37 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v62, (uint64_t)&v64);
            v38 = v64;
            *((_QWORD *)&v62 + 1) = v37;
            v64 = 0;
            if (v38)
              (*(void (**)(void *))(*(_QWORD *)v38 + 16))(v38);
          }
          else
          {
            **((_QWORD **)&v62 + 1) = v33;
            if (v33)
            {
              v35 = (_QWORD *)operator new();
              v36 = v64;
              *v35 = &off_24CEEED20;
              v35[1] = 0;
              v35[2] = 0;
              v35[3] = v36;
            }
            else
            {
              v35 = 0;
            }
            *(_QWORD *)(v34 + 8) = v35;
            v64 = 0;
            *(_DWORD *)(v34 + 16) = v65;
            *((_QWORD *)&v62 + 1) = v34 + 24;
          }
          if (v9 == a3)
          {
            v39 = operator new();
            if ((v56 & 1) != 0)
              v40 = 1;
            else
              v40 = 2;
            v69 = v40;
            *(_QWORD *)&v70 = 0x200000001;
            smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v40, (int *)&v70, 2);
            DiskImageStackable::DiskImageStackable(v39, &v62, &v69);
            v41 = a1[1];
            a1[1] = v39;
            if (v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
            v64 = &v62;
            std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            v15 = lpsrc;
            lpsrc = 0;
            if (v15)
              goto LABEL_66;
            goto LABEL_67;
          }
        }
        if (v60)
        {
          *(_QWORD *)&v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
          *((_QWORD *)&v70 + 1) = 54;
          v71 = 16;
          di_log::logger<di_log::log_printer<1048ul>>::logger(&v64, &v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ", 59);
          diskimage_uio::operator<<(v68, v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" given", 6);
          di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v64);
          goto LABEL_72;
        }
        (*(void (**)(void *))(*(_QWORD *)lpsrc + 40))(lpsrc);
        goto LABEL_43;
      }
    }
    v25 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>((uint64_t *)&v62, (uint64_t)&v64);
    v26 = v64;
    *((_QWORD *)&v62 + 1) = v25;
    v64 = 0;
    if (v26)
      (*(void (**)(void *))(*(_QWORD *)v26 + 16))(v26);
    goto LABEL_26;
  }
  if (v60)
  {
    *(_QWORD *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((_QWORD *)&v62 + 1) = 54;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Diskimageuio: single image given, but role is ", 46);
    diskimage_uio::operator<<(v68, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" rather than image", 18);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v64);
    v54 = __cxa_allocate_exception(0x10uLL);
    v55 = std::generic_category();
    *v54 = 22;
    v54[1] = v55;
  }
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
  v13 = v64;
  v64 = 0;
  v14 = a1[1];
  a1[1] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    v15 = v64;
    v64 = 0;
    if (v15)
LABEL_66:
      (*(void (**)(void *))(*(_QWORD *)v15 + 16))(v15);
  }
LABEL_67:
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v61);
  return a1;
}

void sub_212F28990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  void **v22;
  uint64_t v23;

  v22 = a20;
  a20 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 2))(v22);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v23 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_212F2899C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)va);
  JUMPOUT(0x212F28C3CLL);
}

void sub_212F289AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)va);
  JUMPOUT(0x212F28C54);
}

void sub_212F289BC(_Unwind_Exception *a1)
{
  diskimage_uio::diskimage_open_params *v1;
  uint64_t v2;
  uint64_t v4;

  diskimage_uio::diskimage_open_params::~diskimage_open_params(v1);
  v4 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  _Unwind_Resume(a1);
}

void sub_212F28A10()
{
  uint64_t v0;

  MEMORY[0x2199A8A18](v0, 0x10B3C4051218ED1);
  JUMPOUT(0x212F28A30);
}

void sub_212F28ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  __cxa_end_catch();
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28AEC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x212F28C74);
}

void sub_212F28AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  void *v21;
  uint64_t v23;

  __cxa_free_exception(v21);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v23 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_212F28B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  diskimage_uio::diskimage_open_params *v20;
  uint64_t v22;

  di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&a20);
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  v22 = *(_QWORD *)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  _Unwind_Resume(a1);
}

void sub_212F28BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
  JUMPOUT(0x212F28C28);
}

unint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  DiskImage::Context **v8;
  unint64_t v9;
  diskimage_uio *v10;
  DiskImage::Context *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BYTE v44[8];
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  _BYTE v47[8];
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50[18];
  void *__p;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[72];
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v8 = (DiskImage::Context **)(a2 + 8);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v10 = (diskimage_uio *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)*v8 + 1) + 24))(*((_QWORD *)*v8 + 1));
  diskimage_uio::create_sg_vec_from_buffer(v10, a4, a3, a5, v50);
  v11 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v54, (uint64_t)v47);
  sg_vec_ref::end((sg_vec_ref *)v54, (uint64_t)v44);
  v12 = DiskImage::Context::read(v11, (const sg_vec_ns::details::sg_vec_iterator *)v47, (const sg_vec_ns::details::sg_vec_iterator *)v44);
  v13 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v45;
  if (v45)
  {
    v17 = (unint64_t *)&v45->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v49;
  if (v49)
  {
    v20 = (unint64_t *)&v49->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v48;
  if (v48)
  {
    v23 = (unint64_t *)&v48->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if ((v12 & 0x8000000000000000) == 0)
    v12 /= v9;
  v25 = v60;
  if (v60)
  {
    v26 = (unint64_t *)&v60->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v59;
  if (v59)
  {
    v29 = (unint64_t *)&v59->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v58;
  if (v58)
  {
    v32 = (unint64_t *)&v58->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v57;
  if (v57)
  {
    v35 = (unint64_t *)&v57->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v56;
  if (v56)
  {
    v38 = (unint64_t *)&v56->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v55;
  if (v55)
  {
    v41 = (unint64_t *)&v55->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v52 && &v53 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v50);
  return v12;
}

void sub_212F28FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,_Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a72;
  unint64_t *p_shared_owners;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;

  if (a25)
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }
  if (a31)
  {
    v74 = (unint64_t *)&a31->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }
  v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (a72)
  {
    if (&STACK[0x200] != __p)
      operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

void diskimage_uio::create_sg_vec_from_buffer(diskimage_uio *this@<X0>, char *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v7 = a2 * (_QWORD)this;
  v8 = a4 * (_QWORD)this;
  v9 = *((_QWORD *)details::get_dummy_shared_ptr() + 1);
  *(_QWORD *)&v15 = a3;
  *((_QWORD *)&v15 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v16 = v7;
  v17 = v8;
  v18 = v7;
  v19 = 0;
  sg_vec::sg_vec(a5, &v15);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_212F292B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14[3];
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 4);
  v5 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14[2] = v4;
  v15 = &v17;
  v14[0] = 0;
  v14[1] = 0;
  v18 = v4;
  v16 = xmmword_212FEB320;
  v17 = v5;
  sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, (uint64_t)&v15);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v15);
  v7 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  v9 = (unint64_t *)a1[18];
  v8 = a1[19];
  v10 = a1[1];
  v15 = (__int128 *)*a1;
  v13 = v9;
  v14[0] = (uint64_t)v15 + 24 * v10;
  v12 = &v9[v8];
  sg_vec_ref::sg_vec_ref((uint64_t)(a1 + 26), (uint64_t *)&v15, v14, &v13, &v12, v6, v7);
  return a1;
}

void sub_212F29394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  sg_vec_ns::details::sg_vec_data *v14;

  sg_vec_ns::details::sg_vec_data::~sg_vec_data(v14);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_1::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  DiskImage::Context *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char v50[8];
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  _BYTE v56[144];
  void *__p;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[72];
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v10 = v9 * a4;
  if (!v10)
    return 0;
  v11 = v9;
  v12 = -1;
  v13 = 8;
  v14 = v9 * a4;
  do
  {
    v15 = *(_QWORD *)(a3 + v13);
    v16 = v14 >= v15;
    v14 -= v15;
    if (!v16)
      return -22;
    ++v12;
    v13 += 16;
  }
  while (v14);
  v48 = v12 + 1;
  if (v12 <= 0x7FFFFFFFFFFFFFFELL)
  {
    v53 = a3;
    v54 = (std::__shared_weak_count *)(v12 + 1);
    diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>((uint64_t)&v53, v9 * a5, v10, (uint64_t)v56);
    v17 = *(DiskImage::Context **)(a2 + 8);
    sg_vec_ref::begin((sg_vec_ref *)v60, (uint64_t)&v53);
    sg_vec_ref::end((sg_vec_ref *)v60, (uint64_t)v50);
    v48 = DiskImage::Context::read(v17, (const sg_vec_ns::details::sg_vec_iterator *)&v53, (const sg_vec_ns::details::sg_vec_iterator *)v50);
    v18 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v51;
    if (v51)
    {
      v22 = (unint64_t *)&v51->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v55;
    if (v55)
    {
      v25 = (unint64_t *)&v55->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v54;
    if (v54)
    {
      v28 = (unint64_t *)&v54->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if ((v48 & 0x8000000000000000) == 0)
      v48 /= v11;
    v30 = v66;
    if (v66)
    {
      v31 = (unint64_t *)&v66->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v65;
    if (v65)
    {
      v34 = (unint64_t *)&v65->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v64;
    if (v64)
    {
      v37 = (unint64_t *)&v64->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v63;
    if (v63)
    {
      v40 = (unint64_t *)&v63->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v62;
    if (v62)
    {
      v43 = (unint64_t *)&v62->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v61;
    if (v61)
    {
      v46 = (unint64_t *)&v61->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v58 && &v59 != __p)
      operator delete(__p);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v56);
  }
  return v48;
}

void sub_212F29744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,_Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a72;
  unint64_t *p_shared_owners;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;

  if (a25)
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }
  if (a31)
  {
    v74 = (unint64_t *)&a31->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }
  v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (a72)
  {
    if (&STACK[0x200] != __p)
      operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

uint64_t diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *dummy_shared_ptr;
  const char *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  dummy_shared_ptr = details::get_dummy_shared_ptr();
  v10 = dummy_shared_ptr;
  v11 = *(uint64_t **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (_QWORD *)(a4 + 24);
  *(_QWORD *)a4 = a4 + 24;
  v14 = xmmword_212FEB330;
  *(_OWORD *)(a4 + 8) = xmmword_212FEB330;
  v15 = (v12 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v12)
    v16 = v15 + 1;
  else
    v16 = 0;
  if (v16 < 6)
  {
    if (v12)
    {
      v30 = v15 + 1;
      do
      {
        v31 = *v11;
        v32 = dummy_shared_ptr[1];
        if (v32)
        {
          v33 = (unint64_t *)(v32 + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v35 = v11[1];
        *v13 = v31;
        v13[1] = v32;
        v13[2] = v35;
        v11 += 2;
        v13 += 3;
        --v30;
      }
      while (v30);
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    if (v16 >= 0x555555555555556)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v9);
    v17 = (char *)operator new(24 * v16);
    v18 = *(_QWORD **)a4;
    if (*(_QWORD *)a4)
    {
      v40 = a2;
      v19 = a3;
      v20 = *(_QWORD *)(a4 + 8);
      if (v20)
      {
        v21 = *(_QWORD *)a4;
        do
        {
          --v20;
          v21 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v21) + 24;
        }
        while (v20);
      }
      *(_QWORD *)(a4 + 8) = 0;
      a3 = v19;
      a2 = v40;
      if (v13 != v18)
        operator delete(v18);
    }
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)a4 = v17;
    if (v12)
    {
      v22 = &v11[2 * v12];
      v23 = v17;
      v14 = xmmword_212FEB330;
      do
      {
        v24 = *v11;
        v25 = v10[1];
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = v11[1];
        *(_QWORD *)v23 = v24;
        *((_QWORD *)v23 + 1) = v25;
        *((_QWORD *)v23 + 2) = v28;
        v11 += 2;
        v23 += 24;
      }
      while (v11 != v22);
      v29 = *(_QWORD *)(a4 + 8);
    }
    else
    {
      v29 = 0;
      v23 = v17;
      v14 = xmmword_212FEB330;
    }
    v16 = v29 - 0x5555555555555555 * ((v23 - v17) >> 3);
  }
  *(_QWORD *)(a4 + 144) = a4 + 168;
  *(_QWORD *)(a4 + 8) = v16;
  *(_OWORD *)(a4 + 152) = v14;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>(a4 + 144, v16);
  v36 = *(_QWORD *)(a4 + 8);
  v44 = *(_QWORD *)a4;
  v37 = v44 + 24 * v36;
  v38 = *(_QWORD *)(a4 + 152);
  v42 = *(unint64_t **)(a4 + 144);
  v43 = v37;
  v41 = &v42[v38];
  return sg_vec_ref::sg_vec_ref(a4 + 208, &v44, &v43, &v42, &v41, a2, a3);
}

void sub_212F29BB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;

  if (*(_QWORD *)(v1 + 160))
  {
    if (v3 != *v2)
      operator delete(*v2);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(v1);
  _Unwind_Resume(a1);
}

unint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_2::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  DiskImage::Context **v8;
  unint64_t v9;
  diskimage_uio *v10;
  DiskImage::Context *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BYTE v44[8];
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  _BYTE v47[8];
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50[18];
  void *__p;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[72];
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v8 = (DiskImage::Context **)(a2 + 8);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v10 = (diskimage_uio *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)*v8 + 1) + 24))(*((_QWORD *)*v8 + 1));
  diskimage_uio::create_sg_vec_from_buffer(v10, a4, a3, a5, v50);
  v11 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v54, (uint64_t)v47);
  sg_vec_ref::end((sg_vec_ref *)v54, (uint64_t)v44);
  v12 = DiskImage::Context::write(v11, (const sg_vec_ns::details::sg_vec_iterator *)v47, (const sg_vec_ns::details::sg_vec_iterator *)v44);
  v13 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v45;
  if (v45)
  {
    v17 = (unint64_t *)&v45->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v49;
  if (v49)
  {
    v20 = (unint64_t *)&v49->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v48;
  if (v48)
  {
    v23 = (unint64_t *)&v48->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if ((v12 & 0x8000000000000000) == 0)
    v12 /= v9;
  v25 = v60;
  if (v60)
  {
    v26 = (unint64_t *)&v60->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v59;
  if (v59)
  {
    v29 = (unint64_t *)&v59->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v58;
  if (v58)
  {
    v32 = (unint64_t *)&v58->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v57;
  if (v57)
  {
    v35 = (unint64_t *)&v57->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v56;
  if (v56)
  {
    v38 = (unint64_t *)&v56->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v55;
  if (v55)
  {
    v41 = (unint64_t *)&v55->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v52 && &v53 != __p)
    operator delete(__p);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v50);
  return v12;
}

void sub_212F29F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,_Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a72;
  unint64_t *p_shared_owners;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;

  if (a25)
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }
  if (a31)
  {
    v74 = (unint64_t *)&a31->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }
  v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (a72)
  {
    if (&STACK[0x200] != __p)
      operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_3::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  DiskImage::Context *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char v50[8];
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  _BYTE v56[144];
  void *__p;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[72];
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v10 = v9 * a4;
  if (!v10)
    return 0;
  v11 = v9;
  v12 = -1;
  v13 = 8;
  v14 = v9 * a4;
  do
  {
    v15 = *(_QWORD *)(a3 + v13);
    v16 = v14 >= v15;
    v14 -= v15;
    if (!v16)
      return -22;
    ++v12;
    v13 += 16;
  }
  while (v14);
  v48 = v12 + 1;
  if (v12 <= 0x7FFFFFFFFFFFFFFELL)
  {
    v53 = a3;
    v54 = (std::__shared_weak_count *)(v12 + 1);
    diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>((uint64_t)&v53, v9 * a5, v10, (uint64_t)v56);
    v17 = *(DiskImage::Context **)(a2 + 8);
    sg_vec_ref::begin((sg_vec_ref *)v60, (uint64_t)&v53);
    sg_vec_ref::end((sg_vec_ref *)v60, (uint64_t)v50);
    v48 = DiskImage::Context::write(v17, (const sg_vec_ns::details::sg_vec_iterator *)&v53, (const sg_vec_ns::details::sg_vec_iterator *)v50);
    v18 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v51;
    if (v51)
    {
      v22 = (unint64_t *)&v51->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v55;
    if (v55)
    {
      v25 = (unint64_t *)&v55->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v54;
    if (v54)
    {
      v28 = (unint64_t *)&v54->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if ((v48 & 0x8000000000000000) == 0)
      v48 /= v11;
    v30 = v66;
    if (v66)
    {
      v31 = (unint64_t *)&v66->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v65;
    if (v65)
    {
      v34 = (unint64_t *)&v65->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v64;
    if (v64)
    {
      v37 = (unint64_t *)&v64->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v63;
    if (v63)
    {
      v40 = (unint64_t *)&v63->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v62;
    if (v62)
    {
      v43 = (unint64_t *)&v62->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v61;
    if (v61)
    {
      v46 = (unint64_t *)&v61->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v58 && &v59 != __p)
      operator delete(__p);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v56);
  }
  return v48;
}

void sub_212F2A4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,_Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a72;
  unint64_t *p_shared_owners;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;

  if (a25)
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }
  if (a31)
  {
    v74 = (unint64_t *)&a31->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }
  v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (a72)
  {
    if (&STACK[0x200] != __p)
      operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_4::__invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  unsigned int v5;

  v4 = DiskImage::Context::unmap(*(_QWORD **)(a2 + 8));
  if (v4 < 0)
    v5 = v4;
  else
    v5 = -v4;
  if (v4)
    return v5;
  else
    return a3;
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_5::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  switch((int)a3)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
      result = DiskImage::Context::flush(*(_QWORD **)(a2 + 8));
      break;
    default:
      a3 = 4294967274;
LABEL_3:
      result = a3;
      break;
  }
  return result;
}

di_hybrid_subscriber_t *diskimage_uio::details::setup_di_subscriber<di_hybrid_subscriber_t>(di_hybrid_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke(di_hybrid_subscriber_t *result)
{
  if (result)
  {
    di_hybrid_subscriber_t::~di_hybrid_subscriber_t(result);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

uint64_t diskimage_uio::details::setup_di_subscriber<io_rings_di_subscriber_t>(io_rings_di_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = (_QWORD *)(result + 248);
    v3 = *(_QWORD **)(result + 272);
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
      {
LABEL_8:
        pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(v1 + 120);
        JUMPOUT(0x2199A8A18);
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }
  return result;
}

void std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CEF88F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CEF88F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_impl::create_context_impl(*(diskimage_uio::details::diskimage_impl **)(*(_QWORD *)(a1 + 8) + 240), a2);
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_212F2A9C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::swap(diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  BOOL v4;
  __n128 result;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9[4];

  if (*((_BYTE *)this + 16))
    v4 = *((_BYTE *)a2 + 16) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v9[0] = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }
  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)a2 + 16))
    {
      *(_OWORD *)v9 = *(_OWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)this;
      *(_QWORD *)this = 0;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      v6 = *((_BYTE *)this + 16);
      *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
      *((_BYTE *)a2 + 16) = v6;
      return result;
    }
  }
  else if (*((_BYTE *)a2 + 16))
  {
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)this = v7;
    v9[0] = 0;
    v8 = *((_BYTE *)this + 16);
    *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a2 + 16) = v8;
    goto LABEL_11;
  }
  result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void OUTLINED_FUNCTION_0(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_1(_OWORD *a1)
{
  uint64_t v1;

  *(_OWORD *)v1 = *a1;
  *(_BYTE *)(v1 + 16) = 0;
  __cxa_end_catch();
}

uint64_t OUTLINED_FUNCTION_2()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

uint64_t OUTLINED_FUNCTION_4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void *OUTLINED_FUNCTION_7(void *a1)
{
  return __cxa_begin_catch(a1);
}

void OUTLINED_FUNCTION_8()
{
  __cxa_end_catch();
}

void OUTLINED_FUNCTION_9()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void OUTLINED_FUNCTION_10()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void OUTLINED_FUNCTION_12()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_QWORD *)v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void *rawTestPluginCreate()
{
  return &rawTestPlugin_t::get_plugin(void)::plugin;
}

uint64_t rawTestPlugin_t::Create(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  rawTestPlugin_t::rawTestPlugin_t(v2, a1);
  return v2;
}

void sub_212F2ABD4(_Unwind_Exception *a1, int a2)
{
  const pluginException_t *v2;
  uint64_t v3;
  uint64_t v5;
  rawTestPlugin_t *v7;
  __CFError **v8;

  v5 = v3;
  MEMORY[0x2199A8A18](v5, 0x1080C407694D455);
  if (a2 == 1)
  {
    v7 = (rawTestPlugin_t *)__cxa_begin_catch(a1);
    rawTestPlugin_t::CreationError(v7, v2, v8);
    __cxa_end_catch();
    JUMPOUT(0x212F2ABC0);
  }
  _Unwind_Resume(a1);
}

double rawTestPlugin_t::Decode(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  double result;
  _QWORD *exception;
  const std::error_category *v14;
  _QWORD *v15;
  const std::error_category *v16;
  _QWORD *v17;
  const std::error_category *v18;
  char *v19;

  v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24CEF90C0;
    v14 = std::generic_category();
    exception[1] = v4;
    exception[2] = v14;
    exception[3] = "Cannot decode file descriptor";
  }
  v19 = 0;
  v5 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "path", &v19);
  v6 = v5;
  if (v5 <= 0)
  {
    v15 = __cxa_allocate_exception(0x20uLL);
    *v15 = &off_24CEF90C0;
    v16 = std::generic_category();
    v15[1] = v6;
    v15[2] = v16;
    v15[3] = "Cannot decode path";
  }
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v19);
  v7 = objc_claimAutoreleasedReturnValue();
  (*(void (**)(char *))(a1 + 16))(v19);
  v8 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "writable", &v19);
  v9 = v8;
  if (v8 != 1)
  {
    v17 = __cxa_allocate_exception(0x20uLL);
    *v17 = &off_24CEF90C0;
    v18 = std::generic_category();
    v17[1] = v9;
    v17[2] = v18;
    v17[3] = "Cannot decode writable";
  }
  v10 = *v19;
  (*(void (**)(void))(a1 + 16))();
  v11 = operator new();
  *(_QWORD *)(v11 + 88) = v7;
  *(_BYTE *)(v11 + 96) = v10;
  *(_DWORD *)(v11 + 100) = v4;
  *(_QWORD *)&result = 88;
  *(_QWORD *)v11 = 88;
  *(_QWORD *)(v11 + 8) = rawTestPlugin_t::GetBlockSize;
  *(_QWORD *)(v11 + 16) = rawTestPlugin_t::GetNrBlocks;
  *(_QWORD *)(v11 + 24) = rawTestPlugin_t::IsWritable;
  *(_QWORD *)(v11 + 32) = rawTestPlugin_t::GetPreferredAlignment;
  *(_QWORD *)(v11 + 40) = rawTestPlugin_t::GetPreferredSize;
  *(_QWORD *)(v11 + 48) = rawTestPlugin_t::GetUUID;
  *(_QWORD *)(v11 + 56) = rawTestPlugin_t::GetSubscriber;
  *(_QWORD *)(v11 + 64) = rawTestPlugin_t::Encode;
  *(_QWORD *)(v11 + 72) = rawTestPlugin_t::ReleaseImage;
  *(_QWORD *)(v11 + 80) = 0;
  return result;
}

void sub_212F2AE8C(_Unwind_Exception *exception_object, int a2)
{
  const pluginException_t *v2;
  rawTestPlugin_t *v3;
  __CFError **v4;

  if (a2 == 1)
  {
    v3 = (rawTestPlugin_t *)__cxa_begin_catch(exception_object);
    rawTestPlugin_t::CreationError(v3, v2, v4);
    __cxa_end_catch();
    JUMPOUT(0x212F2AD8CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rawTestPlugin_t::Description(rawTestPlugin_t *this, const __CFDictionary *a2)
{
  -[rawTestPlugin_t objectForKeyedSubscript:](this, "objectForKeyedSubscript:", CFSTR("path"));
  return objc_claimAutoreleasedReturnValue();
}

uint64_t rawTestPlugin_t::rawTestPlugin_t(uint64_t a1, uint64_t a2)
{
  void *v4;
  BOOL v5;
  int v6;
  _QWORD *exception;
  uint64_t v9;
  const std::error_category *v10;

  objc_msgSend(*(id *)(a2 + 8), "objectForKeyedSubscript:", CFSTR("path"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 100) = -1;
  *(_QWORD *)a1 = 88;
  *(_QWORD *)(a1 + 8) = rawTestPlugin_t::GetBlockSize;
  *(_QWORD *)(a1 + 16) = rawTestPlugin_t::GetNrBlocks;
  *(_QWORD *)(a1 + 24) = rawTestPlugin_t::IsWritable;
  *(_QWORD *)(a1 + 32) = rawTestPlugin_t::GetPreferredAlignment;
  *(_QWORD *)(a1 + 40) = rawTestPlugin_t::GetPreferredSize;
  *(_QWORD *)(a1 + 48) = rawTestPlugin_t::GetUUID;
  *(_QWORD *)(a1 + 56) = rawTestPlugin_t::GetSubscriber;
  *(_QWORD *)(a1 + 64) = rawTestPlugin_t::Encode;
  *(_QWORD *)(a1 + 72) = rawTestPlugin_t::ReleaseImage;
  *(_QWORD *)(a1 + 80) = 0;
  v6 = open((const char *)objc_msgSend(v4, "fileSystemRepresentation"), *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 100) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = *__error();
    *exception = &off_24CEF90C0;
    v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }
  return a1;
}

void sub_212F2B034(_Unwind_Exception *a1)
{
  rawTestPlugin_t *v1;
  void *v2;

  __cxa_free_exception(v2);
  rawTestPlugin_t::~rawTestPlugin_t(v1);
  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::CreationError(rawTestPlugin_t *this, const pluginException_t *a2, __CFError **a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v7 = (*(uint64_t (**)(rawTestPlugin_t *))(*(_QWORD *)this + 16))(this);
    v8 = *((_DWORD *)this + 2);
    *(_DWORD *)buf = 68158466;
    v15 = 97;
    v16 = 2080;
    v17 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    v18 = 2080;
    v19 = v7;
    v20 = 1024;
    v21 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(rawTestPlugin_t *))(*(_QWORD *)this + 16))(this);
      v12 = *((_DWORD *)this + 2);
      *(_DWORD *)buf = 68158466;
      v15 = 97;
      v16 = 2080;
      v17 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      v18 = 2080;
      v19 = v11;
      v20 = 1024;
      v21 = v12;
      _os_log_impl(&dword_212EB0000, v10, OS_LOG_TYPE_ERROR, "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)", buf, 0x22u);
    }

  }
  *__error() = v5;
  if (a2)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD1128], *((int *)this + 2), 0);
    *(_QWORD *)a2 = objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

void pluginException_t::pluginException_t(pluginException_t *this, const char *a2, unsigned int a3)
{
  const std::error_category *v6;

  *(_QWORD *)this = &off_24CEF90C0;
  v6 = std::generic_category();
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = a2;
}

uint64_t rawTestPlugin_t::GetBlockSize()
{
  return 512;
}

unint64_t rawTestPlugin_t::GetNrBlocks(rawTestPlugin_t *a1)
{
  stat v2;

  rawTestPlugin_t::get_stat(a1, &v2);
  return (unint64_t)v2.st_size >> 9;
}

BOOL rawTestPlugin_t::IsWritable(uint64_t a1)
{
  return *(_BYTE *)(a1 + 96) != 0;
}

uint64_t rawTestPlugin_t::GetPreferredAlignment()
{
  return 1024;
}

uint64_t rawTestPlugin_t::GetPreferredSize()
{
  return 1024;
}

rawTestPlugin_t *rawTestPlugin_t::ReleaseImage(rawTestPlugin_t *result)
{
  if (result)
  {
    rawTestPlugin_t::~rawTestPlugin_t(result);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

uint64_t rawTestPlugin_t::get_stat@<X0>(rawTestPlugin_t *this@<X0>, stat *a2@<X8>)
{
  uint64_t result;
  pluginException_t *exception;
  int *v4;
  void *v5;

  result = fstat(*((_DWORD *)this + 25), a2);
  if ((_DWORD)result)
  {
    exception = (pluginException_t *)__cxa_allocate_exception(0x20uLL);
    v4 = __error();
    pluginException_t::pluginException_t(exception, "fstat failed", *v4);
  }
  return result;
}

void sub_212F2B3B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFUUIDRef rawTestPlugin_t::get_uuid(id *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  CFUUIDBytes v6;

  v5[2] = *MEMORY[0x24BDAC8D0];
  v5[0] = 0;
  v5[1] = 0;
  v1 = boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()((uint64_t)v5, (char *)objc_msgSend(this[11], "UTF8String"), objc_msgSend(this[11], "length"));
  v3 = v2;
  *(_QWORD *)&v6.byte0 = v1;
  *(_QWORD *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0, v6);
}

uint64_t boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE v12[16];
  __int128 v13;
  int v14;
  _BYTE v15[68];
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v6 = 0;
  v19 = *MEMORY[0x24BDAC8D0];
  v13 = xmmword_212FEEEE0;
  v14 = -1009589776;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  do
  {
    v7 = *(_BYTE *)(a1 + v6);
    v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      v16 = 0;
      boost::uuids::detail::sha1::process_block(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        MEMORY[0x2199A8694](v12, "sha1 too many bytes");
        boost::throw_exception<std::runtime_error>((uint64_t)v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++v6;
  }
  while (v6 != 16);
  for (; a3; --a3)
  {
    v9 = *a2;
    v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      v16 = 0;
      boost::uuids::detail::sha1::process_block(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        MEMORY[0x2199A8694](v12, "sha1 too many bytes");
        boost::throw_exception<std::runtime_error>((uint64_t)v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++a2;
  }
  return boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::hash_to_uuid(a1, (boost::uuids::detail::sha1 *)&v13);
}

void sub_212F2B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  MEMORY[0x2199A86AC](va);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::hash_to_uuid(int a1, boost::uuids::detail::sha1 *this)
{
  uint64_t i;
  _QWORD v4[3];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  memset(v4, 0, 20);
  boost::uuids::detail::sha1::get_digest(this, (unsigned int (*)[5])v4);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)((char *)v5 + i) = bswap32(*(_DWORD *)((char *)v4 + i));
  BYTE6(v5[0]) = BYTE6(v5[0]) & 0xF | 0x50;
  return v5[0];
}

void boost::throw_exception<std::runtime_error>(uint64_t a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x10uLL);
  v3 = (void *)MEMORY[0x2199A86A0](exception, a1);
  __cxa_throw(v3, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

_DWORD *boost::uuids::detail::sha1::process_block(_DWORD *this)
{
  uint64_t v1;
  const char *v2;
  uint16x8_t v3;
  uint16x8_t v4;
  uint16x8_t v13;
  uint16x8_t v14;
  int8x16_t v15;
  uint16x8_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  _OWORD v39[20];
  uint64_t v40;
  int8x16x4_t v41;

  v1 = 0;
  v40 = *MEMORY[0x24BDAC8D0];
  v2 = (const char *)(this + 5);
  v41 = vld4q_s8(v2);
  v3 = vmovl_u8(*(uint8x8_t *)v41.val[0].i8);
  v4 = vmovl_high_u8((uint8x16_t)v41.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v41.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v41.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  v13 = vmovl_high_u8((uint8x16_t)v41.val[2]);
  v14 = vmovl_u8(*(uint8x8_t *)v41.val[2].i8);
  v15 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  v16 = vmovl_high_u8((uint8x16_t)v41.val[3]);
  v41.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v41.val[3].i8);
  v39[3] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)), (int8x16_t)vmovl_high_u16(v16));
  v39[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v41.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v41.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + v1) = v17 >> 31;
    v1 += 4;
  }
  while (v1 != 256);
  v18 = 0;
  v19 = this[1];
  v21 = this[3];
  v20 = this[4];
  v22 = v20;
  v23 = this[2];
  v24 = v21;
  v25 = v23;
  v26 = v19;
  v27 = *this;
  do
  {
    v28 = v27;
    v29 = v25;
    v30 = v24;
    v31 = v25 ^ v26 ^ v24;
    v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      v33 = -1894007588;
    }
    else
    {
      v32 = v31;
      v33 = -899497514;
    }
    if (v18 <= 0x27)
    {
      v34 = 1859775393;
    }
    else
    {
      v31 = v32;
      v34 = v33;
    }
    if (v18 <= 0x13)
      v31 = v30 & ~v26 | v29 & v26;
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    v35 = v36 >> 27;
    if (v18 <= 0x13)
      v34 = 1518500249;
    v37 = v22 + v31 + v35 + v34;
    HIDWORD(v38) = v26;
    LODWORD(v38) = v26;
    v25 = v38 >> 2;
    v27 = v37 + *((_DWORD *)v39 + v18++);
    v22 = v30;
    v24 = v29;
    v26 = v28;
  }
  while (v18 != 80);
  *this += v27;
  this[1] = v28 + v19;
  this[2] = v25 + v23;
  this[3] = v29 + v21;
  this[4] = v30 + v20;
  return this;
}

_DWORD *boost::uuids::detail::sha1::get_digest(_DWORD *this, unsigned int (*a2)[5])
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v4 + 1;
  *((_BYTE *)this + v4 + 20) = 0x80;
  v5 = *((_QWORD *)this + 11);
  if (v5 == 64)
  {
    *((_QWORD *)this + 11) = 0;
    this = boost::uuids::detail::sha1::process_block(this);
    v5 = *(_QWORD *)(v3 + 88);
  }
  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *(_QWORD *)(v3 + 88) = v5 + 1;
        *(_BYTE *)(v3 + v5 + 20) = 0;
        v5 = *(_QWORD *)(v3 + 88);
      }
      while (v5 < 0x38);
    }
  }
  else
  {
    do
    {
      *(_QWORD *)(v3 + 88) = v5 + 1;
      *(_BYTE *)(v3 + v5 + 20) = 0;
      v5 = *(_QWORD *)(v3 + 88);
      if (v5 == 64)
      {
        *(_QWORD *)(v3 + 88) = 0;
        this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
        v5 = *(_QWORD *)(v3 + 88);
      }
    }
    while (v5);
    v6 = 0;
    do
    {
      v5 = v6 + 1;
      *(_BYTE *)(v3 + 20 + v6) = 0;
    }
    while (v6++ < 0x37);
  }
  v8 = *(_QWORD *)(v3 + 104) >> 24;
  *(_QWORD *)(v3 + 88) = v5 + 1;
  *(_BYTE *)(v3 + v5 + 20) = v8;
  v9 = *(_QWORD *)(v3 + 88);
  if (v9 == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    v9 = *(_QWORD *)(v3 + 88);
  }
  v10 = *(_QWORD *)(v3 + 104) >> 16;
  *(_QWORD *)(v3 + 88) = v9 + 1;
  *(_BYTE *)(v3 + v9 + 20) = v10;
  v11 = *(_QWORD *)(v3 + 88);
  if (v11 == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    v11 = *(_QWORD *)(v3 + 88);
  }
  v12 = *(_QWORD *)(v3 + 104) >> 8;
  *(_QWORD *)(v3 + 88) = v11 + 1;
  *(_BYTE *)(v3 + v11 + 20) = v12;
  v13 = *(_QWORD *)(v3 + 88);
  if (v13 == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    v13 = *(_QWORD *)(v3 + 88);
  }
  v14 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 88) = v13 + 1;
  *(_BYTE *)(v3 + v13 + 20) = v14;
  v15 = *(_QWORD *)(v3 + 88);
  if (v15 == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    v15 = *(_QWORD *)(v3 + 88);
  }
  v16 = *(_QWORD *)(v3 + 96) >> 24;
  *(_QWORD *)(v3 + 88) = v15 + 1;
  *(_BYTE *)(v3 + v15 + 20) = v16;
  v17 = *(_QWORD *)(v3 + 88);
  if (v17 == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    v17 = *(_QWORD *)(v3 + 88);
  }
  v18 = *(_QWORD *)(v3 + 96) >> 16;
  *(_QWORD *)(v3 + 88) = v17 + 1;
  *(_BYTE *)(v3 + v17 + 20) = v18;
  v19 = *(_QWORD *)(v3 + 88);
  if (v19 == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    v19 = *(_QWORD *)(v3 + 88);
  }
  v20 = *(_QWORD *)(v3 + 96) >> 8;
  *(_QWORD *)(v3 + 88) = v19 + 1;
  *(_BYTE *)(v3 + v19 + 20) = v20;
  v21 = *(_QWORD *)(v3 + 88);
  if (v21 == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    v21 = *(_QWORD *)(v3 + 88);
  }
  v22 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 88) = v21 + 1;
  *(_BYTE *)(v3 + v21 + 20) = v22;
  if (*(_QWORD *)(v3 + 88) == 64)
  {
    *(_QWORD *)(v3 + 88) = 0;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
  }
  (*a2)[0] = *(_DWORD *)v3;
  (*a2)[1] = *(_DWORD *)(v3 + 4);
  (*a2)[2] = *(_DWORD *)(v3 + 8);
  (*a2)[3] = *(_DWORD *)(v3 + 12);
  (*a2)[4] = *(_DWORD *)(v3 + 16);
  return this;
}

uint64_t rawTestPlugin_t::get_subscriber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 96) = dispatch_queue_create("com.apple.di_raw_test_plugin", MEMORY[0x24BDAC9C0]);
  *(_QWORD *)(v4 + 104) = 850045863;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)v4 = rawTestPlugin_t::AddSQE;
  *(_QWORD *)(v4 + 8) = rawTestPlugin_t::Execute;
  *(_QWORD *)(v4 + 16) = rawTestPlugin_t::IsAsync;
  *(_QWORD *)(v4 + 24) = rawTestPlugin_t::Suspend;
  *(_QWORD *)(v4 + 32) = rawTestPlugin_t::Resume;
  *(_QWORD *)(v4 + 40) = rawTestPlugin_t::Cancel;
  *(_QWORD *)(v4 + 56) = a2;
  *(_QWORD *)(v4 + 64) = a1;
  *(_QWORD *)(v4 + 48) = rawTestPlugin_t::ReleaseSubscriber;
  return v4;
}

uint64_t rawTestPlugin_t::IsAsync()
{
  return 1;
}

uint64_t rawTestPlugin_t::ReleaseSubscriber(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 104));

    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(_QWORD *)(v1 + 80) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_addSQE(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD *)(a1 + 72);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](a1 + 88, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    v17 = *(char **)(a1 + 72);
    v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 88) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 80) = v7;
  std::mutex::unlock(v4);
  return 0;
}

void sub_212F2BE68(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void rawTestPlugin_t::subscriber_t::_execute(rawTestPlugin_t::subscriber_t *this)
{
  std::mutex *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  NSObject *v8;
  _QWORD block[5];
  void *__p;
  void *v11;
  uint64_t v12;
  std::locale v13;

  v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  v3 = (void *)*((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  std::mutex::unlock(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"raw plugin: going to execute ", 29);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" SQEs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  v8 = *((_QWORD *)this + 12);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  block[2] = ___ZN15rawTestPlugin_t12subscriber_t8_executeEv_block_invoke;
  block[3] = &__block_descriptor_64_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE_e5_v8__0l;
  block[4] = this;
  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>(&__p, v3, v4, (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v8, block);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v3)
    operator delete(v3);
}

void sub_212F2BFD8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::locale::~locale((std::locale *)(v2 - 56));
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::do_io<io_rings_sqe_op_read_iov_t>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  NSObject *v15;
  int v16;
  char *v17;
  NSObject *v18;
  int v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v5 << 9;
    v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 2;
      v10 = v7 >= v9;
      v7 -= v9;
      if (!v10)
        break;
      ++v6;
      if (!v7)
        goto LABEL_8;
    }
    v6 = -22;
  }
  else
  {
    v6 = 0;
  }
LABEL_8:
  v11 = a2[1] << 9;
  v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0)
    return v12 >> 9;
  v14 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v15 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    v16 = *__error();
    *(_DWORD *)buf = 68158722;
    v22 = 132;
    v23 = 2080;
    v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    v25 = 2048;
    v26 = v11;
    v27 = 1024;
    v28 = v6;
    v29 = 1024;
    v30 = v16;
    v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    getDIOSLog();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = *__error();
      *(_DWORD *)buf = 68158722;
      v22 = 132;
      v23 = 2080;
      v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      v25 = 2048;
      v26 = v11;
      v27 = 1024;
      v28 = v6;
      v29 = 1024;
      v30 = v19;
      _os_log_impl(&dword_212EB0000, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }

  }
  *__error() = v14;
  v20 = *__error();
  if (v20 < 0)
    return v20;
  else
    return -v20;
}

void sub_212F2C338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::do_io<io_rings_sqe_op_write_iov_t>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  NSObject *v15;
  int v16;
  char *v17;
  NSObject *v18;
  int v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v5 << 9;
    v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 2;
      v10 = v7 >= v9;
      v7 -= v9;
      if (!v10)
        break;
      ++v6;
      if (!v7)
        goto LABEL_8;
    }
    v6 = -22;
  }
  else
  {
    v6 = 0;
  }
LABEL_8:
  v11 = a2[1] << 9;
  v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0)
    return v12 >> 9;
  v14 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v15 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    v16 = *__error();
    *(_DWORD *)buf = 68158722;
    v22 = 133;
    v23 = 2080;
    v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    v25 = 2048;
    v26 = v11;
    v27 = 1024;
    v28 = v6;
    v29 = 1024;
    v30 = v16;
    v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    getDIOSLog();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = *__error();
      *(_DWORD *)buf = 68158722;
      v22 = 133;
      v23 = 2080;
      v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      v25 = 2048;
      v26 = v11;
      v27 = 1024;
      v28 = v6;
      v29 = 1024;
      v30 = v19;
      _os_log_impl(&dword_212EB0000, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }

  }
  *__error() = v14;
  v20 = *__error();
  if (v20 < 0)
    return v20;
  else
    return -v20;
}

void sub_212F2C5B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::flush(rawTestPlugin_t *this)
{
  uint64_t result;
  int v3;

  result = fcntl(*((_DWORD *)this + 25), 51, 0);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result)
      return result;
    goto LABEL_8;
  }
  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (result = fsync(*((_DWORD *)this + 25)), (_DWORD)result))
  {
LABEL_8:
    v3 = *__error();
    if (v3 < 0)
      return v3;
    else
      return -v3;
  }
  return result;
}

_QWORD *__copy_helper_block_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
}

void __destroy_helper_block_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_212F2C6F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  result = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_suspend(rawTestPlugin_t::subscriber_t *this)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)&v2 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((_QWORD *)&v2 + 1) = 39;
  v3 = 0;
  di_log::logger<di_log::log_printer<121ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Suspended", 9);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x2199A89AC](&v6);
}

void sub_212F2C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<121ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<121ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<121ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF8A48;
  a1[45] = &unk_24CEF8B48;
  a1[46] = &unk_24CEF8B70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF8A48;
  a1[45] = &unk_24CEF8AD0;
  a1[46] = &unk_24CEF8AF8;
  return a1;
}

void sub_212F2C868(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF8BE0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F2C934(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF8BE0;
  di_log::logger_buf<di_log::log_printer<121ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<121ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<121ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F2CD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<121ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 121;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 121;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_resume(rawTestPlugin_t::subscriber_t *this)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)&v2 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((_QWORD *)&v2 + 1) = 38;
  v3 = 0;
  di_log::logger<di_log::log_printer<122ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Resumed", 7);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x2199A89AC](&v6);
}

void sub_212F2CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<122ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<122ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<122ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF8C68;
  a1[45] = &unk_24CEF8D68;
  a1[46] = &unk_24CEF8D90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF8C68;
  a1[45] = &unk_24CEF8CF0;
  a1[46] = &unk_24CEF8D18;
  return a1;
}

void sub_212F2D060(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF8E00;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F2D12C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF8E00;
  di_log::logger_buf<di_log::log_printer<122ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<122ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<122ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F2D520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<122ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 122;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 122;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_cancel(dispatch_queue_t *this)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  dispatch_barrier_sync(this[12], &__block_literal_global_5);
  *(_QWORD *)&v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((_QWORD *)&v2 + 1) = 38;
  v3 = 0;
  di_log::logger<di_log::log_printer<118ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cancelled", 9);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x2199A89AC](&v6);
}

void sub_212F2D7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<118ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<118ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<118ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF8EA8;
  a1[45] = &unk_24CEF8FA8;
  a1[46] = &unk_24CEF8FD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF8EA8;
  a1[45] = &unk_24CEF8F30;
  a1[46] = &unk_24CEF8F58;
  return a1;
}

void sub_212F2D86C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF9040;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F2D938(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF9040;
  di_log::logger_buf<di_log::log_printer<118ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<118ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<118ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F2DD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<118ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 118;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 118;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t rawTestPlugin_t::encode(uint64_t a1, void (*a2)(uint64_t, const char *, uint64_t, uint64_t), void (*a3)(uint64_t, const char *, _QWORD), uint64_t a4)
{
  a3(a4, "fd", *(unsigned int *)(a1 + 100));
  a2(a4, "path", objc_msgSend(*(id *)(a1 + 88), "UTF8String"), objc_msgSend(*(id *)(a1 + 88), "length") + 1);
  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1);
}

void pluginException_t::~pluginException_t(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2199A8A18);
}

uint64_t pluginException_t::what(pluginException_t *this)
{
  return *((_QWORD *)this + 3);
}

void rawTestPlugin_t::~rawTestPlugin_t(rawTestPlugin_t *this)
{
  __int128 v2;
  int v3;
  _QWORD v4[45];
  uint64_t v5;
  uint64_t v6;

  close(*((_DWORD *)this + 25));
  *(_QWORD *)&v2 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((_QWORD *)&v2 + 1) = 33;
  v3 = 0;
  di_log::logger<di_log::log_printer<325ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cleaning up!", 12);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf((uint64_t)v4);
  MEMORY[0x2199A89AC](&v6);

}

_QWORD *di_log::logger<di_log::log_printer<325ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<325ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEF90F0;
  a1[45] = &unk_24CEF91F0;
  a1[46] = &unk_24CEF9218;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEF90F0;
  a1[45] = &unk_24CEF9178;
  a1[46] = &unk_24CEF91A0;
  return a1;
}

void sub_212F2E130(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEF9288;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F2E1FC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEF9288;
  di_log::logger_buf<di_log::log_printer<325ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<325ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<325ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F2E5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<325ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *result;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    v6 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v16 = v4;
    v17 = 2080;
    v18 = v7;
    v19 = 2048;
    v20 = 325;
    v21 = 2082;
    v22 = v8;
    v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    getDIOSLog();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v16 = v4;
      v17 = 2080;
      v18 = v12;
      v19 = 2048;
      v20 = 325;
      v21 = 2082;
      v22 = v13;
      _os_log_impl(&dword_212EB0000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }

  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t io_rings_setup_impl(unsigned int a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _DWORD *v18;
  int v19;
  _QWORD *v21;

  v4 = 4294967274;
  if (a1 && a2 && a3 && a4)
  {
    if (*(_DWORD *)a2 > 1u)
      return 4294967251;
    v8 = *(unsigned int *)(a2 + 4);
    if (v8 < 9)
      return v4;
    if (v8 >= 0x10
      && ((v10 = *(_DWORD **)(a2 + 8)) != 0 && *v10
       || v8 >= 0x31
       && (*(_BYTE *)(a2 + 48) || memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v8 - 49))))
    {
      return 4294967251;
    }
    else
    {
      v11 = (_DWORD *)operator new();
      bzero(v11, 0x2D0uLL);
      v21 = v11;
      v11[178] = 2;
      v12 = malloc_type_malloc(0x28uLL, 0x10A004043F5785AuLL);
      v13 = v12;
      if (v12)
      {
        v12[4] = io_rings_setup_impl::$_0::__invoke;
        v14 = v21;
        io_rings_setup_copy_in_params(v21, a2);
        v15 = v21[88];
        v21[88] = a4;
        if (v15)
        {
          (*(void (**)(void))(v15 + 32))();
          v14 = v21;
        }
        v4 = io_rings_setup_prepare_ring((uint64_t)v14, a1);
        if (!(_DWORD)v4)
        {
          v18 = v21;
          *(_DWORD *)v13 = *(_DWORD *)a2 != 0;
          *((_DWORD *)v13 + 1) = 40;
          v19 = v18[78] - 1;
          *((_DWORD *)v13 + 2) = v18[34];
          *((_DWORD *)v13 + 3) = v19;
          v18[178] = 0;
          v13[3] = v18;
          *a3 = v13;
          return v4;
        }
        ((void (*)(_QWORD *))v13[4])(v13);
      }
      else
      {
        v4 = 4294967284;
      }
      v16 = v21;
      v21[88] = 0;
      io_rings_desc_free((uint64_t)v16);
      v17 = v21;
      v21 = 0;
      if (v17)
        std::default_delete<io_rings_desc_t>::operator()[abi:ne180100]((uint64_t)&v21, (uint64_t)v17);
    }
  }
  return v4;
}

void sub_212F2E9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<io_rings_desc_t>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = -22;
  else
    v2 = 1;
  if (a2 <= 0 && a1 == 0)
    return v2;
  else
    return 4294967251;
}

_QWORD *io_rings_setup_copy_in_params(_QWORD *result, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 4);
  if (v2 >= 0x18)
  {
    result[52] = *(_QWORD *)(a2 + 16);
    if (v2 >= 0x20)
    {
      result[53] = *(_QWORD *)(a2 + 24);
      if (v2 >= 0x28)
      {
        result[54] = *(_QWORD *)(a2 + 32);
        if (v2 >= 0x30)
          result[55] = *(_QWORD *)(a2 + 40);
      }
    }
  }
  return result;
}

uint64_t io_rings_setup_prepare_ring(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t (**v24)();
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x2000)
    v3 = 0x2000;
  else
    v3 = a2;
  if (a2 + 1 < 0x2000)
    v4 = a2 + 1;
  else
    v4 = 0x2000;
  if ((v4 & (v4 - 1)) != 0)
  {
    v5 = 0;
    v6 = 2 * v4;
    do
    {
      v6 >>= 1;
      ++v5;
    }
    while (v6 != 1);
    v4 = 1 << v5;
  }
  v7 = mmap(0, 88 * v3 + 8 + 4 * v4, 3, 4097, 0, 0);
  if (v7 == (void *)-1)
    v8 = 0;
  else
    v8 = v7;
  *(_QWORD *)a1 = v8;
  v9 = mmap(0, (16 * v4) | 8, 3, 4097, 0, 0);
  if (v9 == (void *)-1)
    v10 = 0;
  else
    v10 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  result = 4294967284;
  if (*(_QWORD *)a1 && v10)
  {
    std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100](a1 + 16);
    v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v24 = &off_24CEF9330;
    v25 = a1;
    v26 = &v24;
    io_rings_sq_t::io_rings_sq_t(a1 + 16, v12, v13, v3, v4, v4, (uint64_t)&v24);
    v14 = v26;
    if (v26 == &v24)
    {
      v15 = 4;
      v14 = &v24;
    }
    else
    {
      if (!v26)
        goto LABEL_24;
      v15 = 5;
    }
    (*v14)[v15]();
LABEL_24:
    *(_BYTE *)(a1 + 264) = 1;
    std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100](a1 + 272);
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD *)(a1 + 8);
    v24 = &off_24CEF93C0;
    v25 = a1;
    v26 = &v24;
    v22[0] = &off_24CEF9440;
    v22[1] = a1;
    v23 = v22;
    io_rings_cq_t::io_rings_cq_t(a1 + 272, v16, v17, v3, v4, v4, (uint64_t)&v24, (uint64_t)v22);
    v18 = v23;
    if (v23 == v22)
    {
      v19 = 4;
      v18 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_29;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_29:
    v20 = v26;
    if (v26 == &v24)
    {
      v21 = 4;
      v20 = &v24;
    }
    else
    {
      if (!v26)
        goto LABEL_34;
      v21 = 5;
    }
    (*v20)[v21]();
LABEL_34:
    *(_BYTE *)(a1 + 408) = 1;
    result = 4294967282;
    if (*(_BYTE *)(a1 + 264))
    {
      if (*(_BYTE *)(a1 + 408))
        return 0;
      else
        return 4294967282;
    }
  }
  return result;
}

void sub_212F2ECA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == v17)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x212F2EC54);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_desc_free(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t i;

  if (*(_BYTE *)(result + 264))
  {
    v1 = result;
    if (*(_BYTE *)(result + 408))
    {
      v2 = *(_DWORD *)(result + 136);
      v3 = *(unsigned int *)(result + 312);
      v4 = *(unsigned int *)(result + 56);
      std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100](result + 16);
      std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100](v1 + 272);
      if (*(_QWORD *)v1)
      {
        munmap(*(void **)v1, 4 * v4 + 88 * v2 + 8);
        *(_QWORD *)v1 = 0;
      }
      v5 = *(void **)(v1 + 8);
      if (v5)
      {
        munmap(v5, (16 * v3) | 8);
        *(_QWORD *)(v1 + 8) = 0;
      }
      v6 = *(_QWORD *)(v1 + 704);
      *(_QWORD *)(v1 + 704) = 0;
      if (v6)
        (*(void (**)(void))(v6 + 32))();
      for (i = 688; i != 432; i -= 16)
        std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + i);
      std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100](v1 + 272);
      std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100](v1 + 16);
      JUMPOUT(0x2199A8A18);
    }
  }
  return result;
}

uint64_t io_rings_setup(unsigned int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = operator new();
  *(_QWORD *)(v6 + 48) = 0;
  v7 = (uint64_t *)(v6 + 48);
  *(_OWORD *)v6 = default_consumer_cb;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)off_24CEF9308;
  *(_QWORD *)(v6 + 32) = $_9::__invoke<io_rings_consumer_t *>;
  *(_QWORD *)(v6 + 40) = 0;
  v8 = io_rings_setup_impl(a1, a2, a3, v6);
  if ((_DWORD)v8)
  {
    std::unique_ptr<GCDPool>::reset[abi:ne180100](v7, 0);
    MEMORY[0x2199A8A18](v6, 0xA0C40D24C6CC5);
  }
  else
  {
    *(_QWORD *)(v6 + 40) = *(_QWORD *)(*a3 + 24);
    v9 = operator new();
    GCDPool::GCDPool(v9, *(_QWORD *)(v6 + 40));
    std::unique_ptr<GCDPool>::reset[abi:ne180100](v7, v9);
  }
  return v8;
}

void sub_212F2EF30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x1020C4030AEDD8CLL);
  _Unwind_Resume(a1);
}

uint64_t io_rings_get_supported_features(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  if (a1)
    return 4294967194;
  result = 4294967274;
  if (a2)
  {
    if (a3)
    {
      bzero(a2, 8 * a3);
      result = 0;
      *a2 = 2;
    }
  }
  return result;
}

uint64_t io_rings_get_num_sqes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t io_rings_get_num_cqes(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 312) - 1);
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3)
    return 4294967194;
  if (*(_DWORD *)(a1 + 712) == 2)
    return 4294967207;
  return io_rings_t<unsigned int,true>::enter(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t sqe;
  double result;

  sqe = io_rings_sq_t::allocate_sqe((io_rings_sq_t *)(a1 + 16));
  if (sqe)
  {
    *(_DWORD *)(sqe + 12) = 0;
    result = 0.0;
    *(_OWORD *)(sqe + 24) = 0u;
    *(_OWORD *)(sqe + 40) = 0u;
    *(_OWORD *)(sqe + 56) = 0u;
    *(_OWORD *)(sqe + 72) = 0u;
    *(_DWORD *)(sqe + 1) = 0;
    *(_DWORD *)(sqe + 4) = 0;
  }
  return result;
}

uint64_t io_rings_sq_t::allocate_sqe(io_rings_sq_t *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = bitmap_allocator<unsigned long,(std::memory_order)4>::allocate((_QWORD *)this + 13);
  if (v2 < 0)
    return 0;
  v3 = (unsigned int *)((char *)this + 48);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (unsigned int *)((char *)this + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_DWORD *)(*((_QWORD *)this + 3) + 4 * (*((_DWORD *)this + 11) & v6)) = v2;
  return *((_QWORD *)this + 12) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return io_rings_cq_t::pop_cqe((unsigned int **)(a1 + 272));
}

uint64_t io_rings_cq_t::pop_cqe(unsigned int **this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  int v6;
  char v7;

  if (*((_BYTE *)this + 96))
  {
    v2 = atomic_load(*this);
    *((_DWORD *)this + 23) = v2;
    __dmb(9u);
    *((_BYTE *)this + 96) = 0;
  }
  v3 = atomic_load(this[2]);
  io_rings_t<io_rings_cqe_t,true>::pop_elem_at_tail((uint64_t)this, (uint64_t)&v5);
  if (!v7)
    return 0;
  if (v3 == *((_DWORD *)this + 23))
    *((_BYTE *)this + 96) = 1;
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  atomic_store(0, (unsigned int *)(result + 372));
  return result;
}

uint64_t io_rings_create_mkey()
{
  return 4294967194;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(void);

  if (*(_DWORD *)(a1 + 712))
    return 4294967274;
  v3 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 704) + 16);
  if (!v3 || (result = v3(), !(_DWORD)result))
  {
    object_subscribers_t<16ul>::suspend_all(a1 + 448);
    result = 0;
    *(_DWORD *)(a1 + 712) = 1;
  }
  return result;
}

uint64_t io_rings_resume(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 712) != 1)
    return 4294967274;
  v2 = a1 + 448;
  object_subscribers_t<16ul>::resume_all(a1 + 448);
  v3 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 704) + 24);
  if (v3 && (v4 = v3(), (_DWORD)v4))
  {
    v5 = v4;
    object_subscribers_t<16ul>::suspend_all(v2);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)(a1 + 712) = 0;
  }
  return v5;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  uint64_t (*v2)(void);
  int v3;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*(_DWORD *)(a1 + 712) != 1)
    return -16;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 704) + 8);
  if (v2 && (v3 = v2()) != 0)
  {
    if (v3 < 0)
      return v3;
    else
      return -v3;
  }
  else
  {
    *(_DWORD *)(a1 + 712) = 2;
    v7 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
    if ((v7 & 0xFF00000000) != 0)
    {
      v5 = 0;
      do
      {
        v8 = *(_QWORD *)(a1 + 112);
        if (!v8)
          break;
        v9 = v8 + 88 * v7;
        io_rings_cq_t::enter(a1 + 272, *(_QWORD *)(v9 + 16), 0x1FFFFFFA7, 0);
        v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - *(_QWORD *)(a1 + 112)) >> 3);
        v11 = 1 << v10;
        v12 = (unint64_t *)(*(_QWORD *)(a1 + 128) + 8 * (v10 >> 6));
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 | v11, v12));
        ++v5;
        v7 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
      }
      while ((v7 & 0xFF00000000) != 0);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t io_rings_pop_sqe(uint64_t a1)
{
  unint64_t v2;

  v2 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
  if ((v2 & 0xFF00000000) != 0)
    return *(_QWORD *)(a1 + 112) + 88 * v2;
  else
    return 0;
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
  object_subscribers_t<16ul>::unsubscribe(a1 + 448, a2);
}

void object_subscribers_t<16ul>::unsubscribe(uint64_t a1, unsigned int a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  std::atomic_store[abi:ne180100]<io_rings_subscriber_t>((uint64_t *)(a1 + 16 * a2), &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_212F2F3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t io_rings_release(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 712) == 2)
      return io_rings_desc_free(result);
  }
  return result;
}

uint64_t io_rings_cq_t::enter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;

  __dmb(0xBu);
  result = io_rings_t<io_rings_cqe_t,true>::insert_elem_safe(a1, a2, a3);
  if (!(_DWORD)result)
    return io_rings_t<unsigned int,true>::enter(a1, 1, a4);
  if ((_DWORD)result == -28)
  {
    v7 = (unsigned int *)(a1 + 100);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (!v8)
      std::function<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()(a1 + 104, 0, 4);
    return 4294967268;
  }
  return result;
}

BOOL io_rings_sqe_is_barrier(unsigned __int8 *a1)
{
  return *a1 == 5;
}

uint64_t io_rings_subscriber_subscribe(uint64_t a1, uint64_t a2)
{
  return object_subscribers_t<16ul>::subscribe(a1 + 448, a2);
}

uint64_t object_subscribers_t<16ul>::subscribe(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  BOOL v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  std::shared_ptr<io_rings_subscriber_t>::shared_ptr[abi:ne180100]<io_rings_subscriber_t,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t*)#1},void>(&v21, a2);
  v3 = 1;
  while (1)
  {
    v19 = 0;
    v20 = 0;
    v17 = v21;
    v18 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v6 = std::atomic_compare_exchange_strong[abi:ne180100]<io_rings_subscriber_t>((_QWORD *)(a1 + 16 * v3), &v19, &v17);
    v7 = v18;
    if (v18)
    {
      v8 = (unint64_t *)&v18->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v20;
    if (v20)
    {
      v11 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v6)
      break;
    if (++v3 == 16)
    {
      v3 = 4294967268;
      break;
    }
  }
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v3;
}

void sub_212F2F5D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x212F2F5B8);
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8;
  __int16 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;

  v8 = linked_elem_db_t::consume_elem((std::mutex *)(a1 + 144), (const void *)a2);
  v9 = *(_WORD *)(a2 + 2);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *(_QWORD *)(a1 + 112)) >> 3);
  v12 = 1 << v11;
  v13 = (unint64_t *)(*(_QWORD *)(a1 + 128) + 8 * (v11 >> 6));
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 | v12, v13));
  if ((v9 & 4) != 0)
    v15 = 0;
  else
    v15 = v8;
  return io_rings_cq_t::enter(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v15);
}

void io_rings_consumer_single_sqe_execute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    v8 = 0;
    v9 = 0;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }
  std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((_QWORD *)(a1 + 16 * v4 + 448), &v8);
  if (!v8)
    goto LABEL_6;
  if (!(*(unsigned int (**)(void))v8)())
    (*(void (**)(void))(v8 + 8))();
LABEL_7:
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_212F2F764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void io_rings_subscriber_get(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  if (a2 < 5)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((_QWORD *)(a1 + 16 * a2 + 448), a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

uint64_t io_rings_parse_and_execute_sqe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v4)(void);

  if ((*(_WORD *)(a3 + 2) & 0xFFFA) != 0)
    return 4294967194;
  switch(*(_BYTE *)a3)
  {
    case 0:
      return 0;
    case 1:
      v4 = *(uint64_t (**)(void))(a1 + 64);
      goto LABEL_9;
    case 2:
      v4 = *(uint64_t (**)(void))(a1 + 80);
      goto LABEL_9;
    case 3:
      v4 = *(uint64_t (**)(void))(a1 + 72);
      goto LABEL_9;
    case 4:
      v4 = *(uint64_t (**)(void))(a1 + 88);
LABEL_9:
      result = v4();
      break;
    case 5:
      if (*(_DWORD *)(a3 + 24) > 3u)
        return 4294967194;
      result = (*(uint64_t (**)(void))(a1 + 104))();
      break;
    case 6:
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 96))(a1, a2, *(unsigned int *)(a3 + 32), *(_QWORD *)(a3 + 24));
      break;
    default:
      return 4294967194;
  }
  return result;
}

uint64_t (**io_rings_subscriber_sync_init(uint64_t (**result)(uint64_t a1, uint64_t a2), uint64_t (*a2)(uint64_t a1, uint64_t a2)))(uint64_t a1, uint64_t a2)
{
  *result = io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_0::__invoke;
  result[1] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_1::__invoke;
  result[2] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_2::__invoke;
  result[3] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_3::__invoke;
  result[4] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_4::__invoke;
  result[5] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_5::__invoke;
  result[6] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_6::__invoke;
  result[7] = a2;
  return result;
}

void object_subscribers_t<16ul>::suspend_all(uint64_t a1)
{
  uint64_t i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  for (i = 0; i != 16; ++i)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((_QWORD *)(a1 + 16 * i), &v6);
    if (v6)
      (*(void (**)(void))(v6 + 24))();
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_212F2F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void object_subscribers_t<16ul>::resume_all(uint64_t a1)
{
  uint64_t i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  for (i = 0; i != 16; ++i)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((_QWORD *)(a1 + 16 * i), &v6);
    if (v6)
      (*(void (**)(void))(v6 + 32))();
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_212F2F9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void io_rings_subscribers_cancel_all(uint64_t a1)
{
  object_subscribers_t<16ul>::cancel_all(a1 + 448);
}

void object_subscribers_t<16ul>::cancel_all(uint64_t a1)
{
  uint64_t i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  for (i = 0; i != 16; ++i)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((_QWORD *)(a1 + 16 * i), &v6);
    if (v6)
      (*(void (**)(void))(v6 + 40))();
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_212F2FA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void linked_elem_db_t::add_elem_to_chain(std::mutex *this, const void *a2, int a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;

  std::mutex::lock(this);
  v8 = *(_QWORD *)&this[1].__m_.__opaque[40];
  if (a3)
  {
    if (v8)
      *(_BYTE *)(v8 + 4) = 1;
    v8 = operator new();
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 0;
    *(_QWORD *)&this[1].__m_.__opaque[40] = v8;
  }
  else if (a4 && v8)
  {
    *(_BYTE *)(v8 + 4) = 1;
  }
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  v10 = *(_QWORD *)&this[1].__m_.__opaque[40];
  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = v10;
  std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__emplace_unique_key_args<void const*,std::pair<void const*,linked_elem_db_t::node_t *>>((uint64_t)&this[1], &v11, &v11);
  if (a4)
    *(_QWORD *)&this[1].__m_.__opaque[40] = 0;
  ++*(_QWORD *)&this[1].__m_.__opaque[32];
  std::mutex::unlock(this);
}

void sub_212F2FB3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t linked_elem_db_t::consume_elem(std::mutex *this, const void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  const void *v7;

  v7 = a2;
  if (*(_QWORD *)&this[1].__m_.__opaque[32])
  {
    std::mutex::lock(this);
    v3 = std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::find<void const*>(&this[1].__m_.__sig, &v7);
    if (v3)
    {
      --*(_QWORD *)&this[1].__m_.__opaque[32];
      v4 = v3[3];
      std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::erase(&this[1].__m_.__sig, v3);
      std::mutex::unlock(this);
      if (v4)
      {
        do
          v5 = __ldaxr((unsigned int *)v4);
        while (__stlxr(v5 - 1, (unsigned int *)v4));
        if (v5 != 1 || !*(_BYTE *)(v4 + 4))
          return 0;
        MEMORY[0x2199A8A18](v4, 0x1000C4090D0E795);
      }
    }
    else
    {
      std::mutex::unlock(this);
    }
  }
  return 1;
}

void sub_212F2FC1C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void io_rings_consumer_add_linked_sqe(uint64_t a1, const void *a2, int a3)
{
  linked_elem_db_t::add_elem_to_chain((std::mutex *)(a1 + 144), a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(PluginsManager *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v4 = PluginsManager::get(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  v5 = PluginsManager::register_plugin(v4, (uint64_t)__p, a2);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_212F2FCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_plugin_release(PluginsManager *a1)
{
  uint64_t v2;
  void *__p[2];
  char v4;

  v2 = PluginsManager::get(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  PluginsManager::release_plugin(v2, __p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_212F2FD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 248))
  {
    v1 = result;
    v2 = (std::mutex *)(result + 128);
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table(result + 192);
    std::mutex::~mutex(v2);
    v3 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (v3)
      MEMORY[0x2199A8A00](v3, 0x1000C8000313F17);
    result = *(_QWORD *)(v1 + 80);
    if (result == v1 + 56)
    {
      v4 = 4;
      result = v1 + 56;
    }
    else
    {
      if (!result)
      {
LABEL_9:
        *(_BYTE *)(v1 + 248) = 0;
        return result;
      }
      v4 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
    goto LABEL_9;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CEF9330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CEF9330;
  a2[1] = v2;
  return result;
}

uint64_t (**std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::operator()(uint64_t a1))(void)
{
  uint64_t (**result)(void);

  result = *(uint64_t (***)(void))(*(_QWORD *)(a1 + 8) + 704);
  if (*result)
    return (uint64_t (**)(void))(*result)();
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::target_type()
{
}

uint64_t io_rings_sq_t::io_rings_sq_t(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v10 = a4;
  *(_QWORD *)&v13 = a2 + 88 * a4;
  *((_QWORD *)&v13 + 1) = a5;
  v11 = io_rings_t<unsigned int,true>::io_rings_t(a1, a2 + 4 * a5 + 88 * a4, a3 + 16 * a6 + 4, &v13, a5, a7);
  *(_QWORD *)(v11 + 96) = a2;
  bitmap_allocator<unsigned long,(std::memory_order)4>::bitmap_allocator((_QWORD *)(v11 + 104), v10);
  *(_DWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = 850045863;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_212F2FF98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 80);
  if (v3 == (_QWORD *)(v1 + 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_t<unsigned int,true>::io_rings_t(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  char v7;
  unsigned int v8;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 40) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    v7 = 0;
    v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }
    while (v8 != 1);
    a5 = 1 << v7;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](a1 + 56, a6);
  *(_WORD *)(a1 + 88) = 1;
  return a1;
}

_QWORD *bitmap_allocator<unsigned long,(std::memory_order)4>::bitmap_allocator(_QWORD *a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  size_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = a2;
  *a1 = a2;
  v4 = a2 + 63;
  v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  v6 = (unint64_t *)operator new[]();
  v7 = v6;
  if (v4 >= 0x40)
    bzero(v6, v5);
  a1[1] = v7;
  v8 = *a1 + 63;
  if (((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) != 0)
  {
    v9 = (((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) >> 3) + 1;
    v10 = v7;
    do
    {
      atomic_store(0xFFFFFFFFFFFFFFFFLL, v10++);
      --v9;
    }
    while (v9 > 1);
  }
  if ((v2 & 0x3F) != 0)
  {
    v11 = &v7[(v8 >> 6) - 1];
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 & ~(-1 << (v2 & 0x3F)), v11));
  }
  return a1;
}

uint64_t std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 136))
  {
    v1 = result;
    v2 = (_QWORD *)(result + 104);
    v3 = *(_QWORD **)(result + 128);
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    result = *(_QWORD *)(v1 + 80);
    if (result == v1 + 56)
    {
      v5 = 4;
      result = v1 + 56;
    }
    else
    {
      if (!result)
      {
LABEL_12:
        *(_BYTE *)(v1 + 136) = 0;
        return result;
      }
      v5 = 5;
    }
    result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v5))();
    goto LABEL_12;
  }
  return result;
}

void std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CEF93C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CEF93C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v2)(uint64_t, _QWORD);

  result = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(uint64_t, _QWORD))(result + 432);
  if (v2)
    return v2(result, *(_QWORD *)(result + 440));
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

_QWORD *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CEF9440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CEF9440;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, uint64_t);

  result = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(result + 416);
  if (v4)
    return v4(result, *(_QWORD *)(result + 424), *a2, a3);
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::target_type()
{
}

uint64_t io_rings_cq_t::io_rings_cq_t(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 v12;

  *(_QWORD *)&v12 = a3;
  *((_QWORD *)&v12 + 1) = a6;
  v10 = io_rings_t<unsigned int,true>::io_rings_t(a1, a3 + 16 * a6, 4 * a5 + 88 * a4 + a2 + 4, &v12, a6, a7);
  *(_BYTE *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 100) = 0;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100](v10 + 104, a8);
  return a1;
}

void sub_212F303D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 80);
  if (v3 == (_QWORD *)(v1 + 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 136))
    return a1;
  v2 = *(_QWORD **)(a1 + 128);
  if (v2 == (_QWORD *)(a1 + 104))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 104);
    goto LABEL_6;
  }
  if (v2)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v4 = *(_QWORD **)(a1 + 80);
  if (v4 == (_QWORD *)(a1 + 56))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 56);
    goto LABEL_11;
  }
  if (v4)
  {
    v5 = 5;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

uint64_t std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 248))
  {
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    v2 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v2)
      MEMORY[0x2199A8A00](v2, 0x1000C8000313F17);
    v3 = *(_QWORD **)(a1 + 80);
    if (v3 == (_QWORD *)(a1 + 56))
    {
      v4 = 4;
      v3 = (_QWORD *)(a1 + 56);
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  return a1;
}

void std::default_delete<io_rings_desc_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 704);
    *(_QWORD *)(a2 + 704) = 0;
    if (v3)
      (*(void (**)(void))(v3 + 32))();
    for (i = 688; i != 432; i -= 16)
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](a2 + i);
    std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100](a2 + 272);
    std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100](a2 + 16);
    JUMPOUT(0x2199A8A18);
  }
}

uint64_t $_5::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::signal_work(*(GCDPool **)(a1 + 48));
}

uint64_t $_6::__invoke<io_rings_consumer_t *,BOOL>(uint64_t a1)
{
  GCDPool::cancel(*(GCDPool **)(a1 + 48));
  return 0;
}

uint64_t $_7::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::suspend(*(GCDPool **)(a1 + 48));
}

uint64_t $_8::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::resume(*(GCDPool **)(a1 + 48));
}

uint64_t $_9::__invoke<io_rings_consumer_t *>(uint64_t result)
{
  if (result)
  {
    std::unique_ptr<GCDPool>::reset[abi:ne180100]((uint64_t *)(result + 48), 0);
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

uint64_t *std::unique_ptr<GCDPool>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    gcd::gcd_group::~gcd_group((NSObject **)(v2 + 16));
    JUMPOUT(0x2199A8A18);
  }
  return result;
}

uint64_t io_rings_t<unsigned int,true>::enter(uint64_t a1, int a2, int a3)
{
  unsigned int *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned int v32;

  v4 = (unsigned int *)(a1 + 52);
  v5 = *(_DWORD *)(a1 + 52);
  v6 = __ldaxr((unsigned int *)(a1 + 52));
  if (v6 != v5)
  {
    __clrex();
LABEL_5:
    while (1)
    {
      v7 = __ldaxr(v4);
      if (v7 != v6)
        break;
      if (__stlxr((v6 + 2 * a2) | a3, v4))
        goto LABEL_9;
      v8 = 1;
LABEL_10:
      v6 = v7;
      if (v8)
        goto LABEL_11;
    }
    __clrex();
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  if (__stlxr((v5 + 2 * a2) | a3, v4))
    goto LABEL_5;
LABEL_11:
  v9 = (unsigned int *)(a1 + 48);
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - a2;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    v12 = (unsigned __int8 *)(a1 + 89);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(1u, v12));
    if ((v13 & 1) == 0)
    {
      while (1)
      {
        v14 = *v4;
        if (atomic_load(v9))
          break;
        v16 = __ldaxr(v4);
        if (v16 == (_DWORD)v14)
        {
          if (!__stlxr(0, v4))
          {
            v17 = (v14 >> 1) | ((v14 & 1) << 32);
            goto LABEL_23;
          }
        }
        else
        {
          __clrex();
        }
      }
      v17 = 0;
LABEL_23:
      v18 = HIDWORD(v17);
      v19 = (unsigned __int8 *)(a1 + 88);
      if ((_DWORD)v17)
      {
LABEL_24:
        __dmb(0xBu);
        v20 = *(unsigned int **)a1;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + v17, v20));
        v22 = atomic_load(*(unsigned int **)(a1 + 16));
        if ((_DWORD)v17 + v21 != v22 && (_DWORD)v18 != 0)
        {
          while (1)
          {
            v24 = __ldaxr(v19);
            if (v24 != 1)
              break;
            if (!__stlxr(0, v19))
            {
              v25 = *(_QWORD *)(a1 + 80);
              if (!v25)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
              goto LABEL_34;
            }
          }
LABEL_39:
          __clrex();
        }
LABEL_34:
        while (1)
        {
          v26 = *v4;
          if (atomic_load(v9))
            break;
          v28 = __ldaxr(v4);
          if (v28 != v26)
            goto LABEL_39;
          if (!__stlxr(0, v4))
          {
            LODWORD(v17) = v26 >> 1;
            LODWORD(v18) = v26 & 1;
            if (v26 > 1)
              goto LABEL_24;
            break;
          }
        }
      }
LABEL_40:
      atomic_store(0, v12);
      __dmb(0xBu);
      if (*v4)
      {
        do
LABEL_41:
          v29 = __ldaxr(v12);
        while (__stlxr(1u, v12));
        if ((v29 & 1) == 0)
        {
          while (1)
          {
            v30 = *v4;
            if (atomic_load(v9))
              break;
            v32 = __ldaxr(v4);
            if (v32 == v30)
            {
              if (!__stlxr(0, v4))
              {
                if (v30 > 1)
                {
                  LODWORD(v18) = v30 & 1;
                  LODWORD(v17) = v30 >> 1;
                  if ((_DWORD)v17)
                    goto LABEL_24;
                  goto LABEL_40;
                }
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
          atomic_store(0, v12);
          __dmb(0xBu);
          if (*v4)
          {
            if (!atomic_load(v9))
              goto LABEL_41;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t bitmap_allocator<unsigned long,(std::memory_order)4>::allocate(_QWORD *a1)
{
  unint64_t v1;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *a1 + 63;
  if (v1 >= 0x40)
  {
    v3 = (unint64_t *)a1[1];
    v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          v6 = atomic_load(v3);
          if (!v6)
            break;
          v7 = __clz(__rbit64(v6));
          do
            v8 = __ldaxr(v3);
          while (__stlxr(v8 & ~(1 << v7), v3));
          if ((v8 & (1 << v7)) != 0)
            return v7 + 8 * ((_QWORD)v3 - a1[1]);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return -1;
}

uint64_t io_rings_t<io_rings_cqe_t,true>::pop_elem_at_tail@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  char v17;

  v2 = (unsigned __int8 *)(result + 88);
  while (1)
  {
    v3 = atomic_load(*(unsigned int **)result);
    v4 = atomic_load(*(unsigned int **)(result + 16));
    if (v3 == v4)
      break;
LABEL_8:
    v9 = atomic_load(*(unsigned int **)(result + 16));
    v10 = atomic_load(*(unsigned int **)result);
    if (v9 != v10)
    {
      v11 = *(unsigned int **)(result + 16);
      v12 = __ldaxr(v11);
      if (v12 == v9)
      {
        if (!__stlxr(v9 + 1, v11))
        {
          v13 = 1;
LABEL_15:
          if ((v13 & 1) != 0)
            goto LABEL_23;
          while (2)
          {
            v9 = v12;
            v10 = atomic_load(*(unsigned int **)result);
            if (v12 == v10)
              goto LABEL_9;
            v14 = *(unsigned int **)(result + 16);
            v15 = __ldaxr(v14);
            if (v15 == v12)
            {
              if (!__stlxr(v12 + 1, v14))
              {
                v16 = 1;
                goto LABEL_22;
              }
            }
            else
            {
              __clrex();
            }
            v16 = 0;
LABEL_22:
            v12 = v15;
            if ((v16 & 1) != 0)
              goto LABEL_23;
            continue;
          }
        }
      }
      else
      {
        __clrex();
      }
      v13 = 0;
      goto LABEL_15;
    }
LABEL_9:
    v10 = v9;
LABEL_23:
    if (v9 != v10)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(_QWORD *)(result + 24) + 16 * (*(_DWORD *)(result + 44) & v9));
      v17 = 1;
      goto LABEL_27;
    }
  }
  do
    v5 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v5 & 1) == 0)
  {
    v6 = atomic_load(*(unsigned int **)result);
    v7 = atomic_load(*(unsigned int **)(result + 16));
    if (v6 != v7)
    {
      while (1)
      {
        v8 = __ldaxr(v2);
        if (v8 != 1)
          break;
        if (!__stlxr(0, v2))
          goto LABEL_8;
      }
      __clrex();
    }
  }
  v17 = 0;
  *(_BYTE *)a2 = 0;
LABEL_27:
  *(_BYTE *)(a2 + 16) = v17;
  return result;
}

unint64_t io_rings_t<unsigned int,true>::pop_elem_at_tail(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;

  v1 = atomic_load(*(unsigned int **)a1);
  v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2)
  {
    v3 = (unsigned __int8 *)(a1 + 88);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(1u, v3));
    if ((v4 & 1) != 0
      || (v5 = atomic_load(*(unsigned int **)a1), v6 = atomic_load(*(unsigned int **)(a1 + 16)), v5 == v6))
    {
      LOBYTE(a1) = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
    else
    {
      while (1)
      {
        v10 = __ldaxr(v3);
        if (v10 != 1)
          break;
        if (!__stlxr(0, v3))
          goto LABEL_9;
      }
      LOBYTE(a1) = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      __clrex();
    }
  }
  else
  {
LABEL_9:
    v11 = atomic_load(*(unsigned int **)(a1 + 16));
    v12 = atomic_load(*(unsigned int **)a1);
    if (v11 != v12)
    {
      v13 = *(unsigned int **)(a1 + 16);
      v14 = __ldaxr(v13);
      if (v14 == v11)
      {
        if (__stlxr(v11 + 1, v13))
          goto LABEL_14;
LABEL_20:
        if (v11 != v12)
        {
          v7 = 0;
          LODWORD(a1) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 44) & v11));
          v9 = a1 & 0xFFFFFF00;
          v8 = 0x100000000;
          return v8 | v7 | v9 | a1;
        }
      }
      else
      {
        __clrex();
LABEL_14:
        while (1)
        {
          v12 = atomic_load(*(unsigned int **)a1);
          if (v14 == v12)
            break;
          v11 = v14;
          v15 = *(unsigned int **)(a1 + 16);
          v14 = __ldaxr(v15);
          if (v14 == v11)
          {
            if (!__stlxr(v11 + 1, v15))
              goto LABEL_20;
          }
          else
          {
            __clrex();
          }
        }
      }
    }
    a1 = io_rings_t<unsigned int,true>::pop_elem_at_tail();
    v9 = a1 & 0xFFFFFF00;
    v7 = a1 & 0xFFFFFF0000000000;
    v8 = a1 & 0xFF00000000;
  }
  return v8 | v7 | v9 | a1;
}

uint64_t io_rings_t<io_rings_cqe_t,true>::insert_elem_safe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD *v14;

  v3 = (unsigned int *)(a1 + 48);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (unsigned int *)(a1 + 8);
  v6 = atomic_load((unsigned int *)(a1 + 8));
  v7 = atomic_load(*(unsigned int **)(a1 + 16));
  v8 = v7 - v6;
  if (v7 - v6 != 1)
  {
    while (v8 != 1 - *(_DWORD *)(a1 + 40))
    {
      v9 = __ldaxr(v5);
      if (v9 == v6)
      {
        if (!__stlxr(v6 + 1, v5))
        {
          v13 = 0;
          v14 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * (*(_DWORD *)(a1 + 44) & v6));
          *v14 = a2;
          v14[1] = a3;
          return v13;
        }
      }
      else
      {
        __clrex();
      }
      v10 = atomic_load(*(unsigned int **)(a1 + 16));
      v8 = v10 - v9;
      v6 = v9;
      if (v8 == 1)
        goto LABEL_10;
    }
  }
  do
LABEL_10:
    v11 = __ldaxr(v3);
  while (__stlxr(v11 - 1, v3));
  if (v11 == 1)
    io_rings_t<unsigned int,true>::enter(a1, 0, 1);
  return 4294967268;
}

uint64_t std::function<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = a3;
  v5 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v5, &v6);
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4;

  v4 = io_rings_parse_and_execute_sqe(a1, 0, a2);
  return io_rings_return_status(*(_QWORD *)(a1 + 56), a2, v4, 0);
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_2::__invoke()
{
  return 0;
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_6::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

void std::atomic_store[abi:ne180100]<io_rings_subscriber_t>(uint64_t *a1, uint64_t *a2)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  uint64_t v6;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

BOOL std::atomic_compare_exchange_strong[abi:ne180100]<io_rings_subscriber_t>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v7 = (std::__shared_weak_count *)a1[1];
  v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](a1, a3);
    v9 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](a2, a1);
    v9 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v7 == v8;
}

void sub_212F30E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<io_rings_subscriber_t>::shared_ptr[abi:ne180100]<io_rings_subscriber_t,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t*)#1},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CEF94D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_212F30EE0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(v1 + 48))(v1);
  __cxa_rethrow();
}

void sub_212F30EF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 48))();
}

uint64_t std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::atomic_load[abi:ne180100]<io_rings_subscriber_t>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__sp_mut *sp_mut;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::__sp_mut::unlock(sp_mut);
}

_QWORD *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__emplace_unique_key_args<void const*,std::pair<void const*,linked_elem_db_t::node_t *>>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_212F31228(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::find<void const*>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t GCDPool::GCDPool(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = a2;
  gcd::gcd_queue::gcd_queue(a1 + 16, "rings_queue", 2);
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void GCDPool::exec_sync(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = atomic_load((unsigned int *)a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 == 1)
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  else
    io_rings_consumer_single_sqe_execute(v3, a2);
}

uint64_t GCDPool::signal_work(GCDPool *this)
{
  unsigned int v1;
  std::__shared_weak_count *v3;
  int v4;
  dispatch_queue_t *v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v22[6];
  _QWORD v23[6];
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v26 = 0;
  v27 = 0;
  v1 = atomic_load((unsigned int *)this);
  if (v1 != 2)
    goto LABEL_37;
  LODWORD(v3) = 0;
  v4 = 0;
  v5 = (dispatch_queue_t *)((char *)this + 16);
  v6 = MEMORY[0x24BDAC760];
  do
  {
    v7 = (_WORD *)io_rings_pop_sqe(*((_QWORD *)this + 1));
    v8 = (uint64_t)v7;
    if (!v7)
      break;
    __dmb(9u);
    if ((v7[1] & 1) != 0)
    {
      v9 = 1;
      goto LABEL_8;
    }
    if (*((_BYTE *)this + 24))
    {
      v9 = 2;
LABEL_8:
      if (*((_BYTE *)this + 24))
        v10 = v9;
      else
        v10 = 0;
      io_rings_consumer_add_linked_sqe(*((_QWORD *)this + 1), v7, v10);
      v11 = *(_BYTE *)(v8 + 2);
      goto LABEL_12;
    }
    v11 = v7[1];
LABEL_12:
    *((_BYTE *)this + 24) = v11 & 1;
    io_rings_subscriber_get(*((_QWORD *)this + 1), *(_DWORD *)(v8 + 8), &v24);
    if (v24)
    {
      if ((_DWORD)v3)
      {
        if (*(_DWORD *)(v8 + 8) != v4)
        {
          (*(void (**)(void))(v26 + 8))();
          v3 = v27;
          v26 = 0;
          v27 = 0;
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }
            LODWORD(v3) = 0;
          }
        }
      }
      if ((*(unsigned int (**)(void))(v24 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v24)(v24, v8);
        if (!v26)
        {
          v4 = *(_DWORD *)(v8 + 8);
          std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v26, &v24);
          LODWORD(v3) = 1;
        }
      }
      else if (io_rings_sqe_is_barrier((unsigned __int8 *)v8))
      {
        v23[0] = v6;
        v23[1] = 0x40000000;
        v23[2] = ___ZN7GCDPool11signal_workEv_block_invoke;
        v23[3] = &__block_descriptor_tmp_2;
        v23[4] = this;
        v23[5] = v8;
        gcd::gcd_queue::barrier_async(v5, v23);
      }
      else
      {
        v22[0] = v6;
        v22[1] = 0x40000000;
        v22[2] = ___ZN7GCDPool11signal_workEv_block_invoke_3;
        v22[3] = &__block_descriptor_tmp_3_0;
        v22[4] = this;
        v22[5] = v8;
        gcd::gcd_queue::async(v5, v22);
      }
    }
    else
    {
      io_rings_return_status(*((_QWORD *)this + 1), v8, 0xFFFFFFFA, 0);
    }
    v14 = v25;
    if (v25)
    {
      v15 = (unint64_t *)&v25->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = atomic_load((unsigned int *)this);
  }
  while (v17 == 2);
  if ((_DWORD)v3)
    (*(void (**)(void))(v26 + 8))();
LABEL_37:
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return 0;
}

void sub_212F319C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN7GCDPool11signal_workEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD v4[6];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    io_rings_return_status(*(_QWORD *)(v1 + 8), *(_QWORD *)(a1 + 40), 0xFFFFFFA7, 0);
  }
  else
  {
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 0x40000000;
    v4[2] = ___ZN7GCDPool11signal_workEv_block_invoke_2;
    v4[3] = &__block_descriptor_tmp_2;
    v3 = *(_QWORD *)(a1 + 40);
    v4[4] = v1;
    v4[5] = v3;
    gcd::gcd_queue::async((dispatch_queue_t *)(v1 + 16), v4);
  }
}

void ___ZN7GCDPool11signal_workEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  __dmb(9u);
  GCDPool::exec_sync(v1, *(_QWORD *)(a1 + 40));
}

void ___ZN7GCDPool11signal_workEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  __dmb(9u);
  GCDPool::exec_sync(v1, *(_QWORD *)(a1 + 40));
}

uint64_t GCDPool::suspend(GCDPool *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)this);
  if (v1 != 2)
    return 4294967260;
  atomic_store(0, (unsigned int *)this);
  gcd::gcd_queue::suspend((dispatch_object_t *)this + 2);
  return 0;
}

void GCDPool::cancel(GCDPool *this)
{
  unsigned int v1;
  unsigned int v3;

  v1 = atomic_load((unsigned int *)this);
  if (v1 != 1)
  {
    do
      v3 = __ldaxr((unsigned int *)this);
    while (__stlxr(1u, (unsigned int *)this));
    if (v3 == 2)
      gcd::gcd_queue::suspend((dispatch_object_t *)this + 2);
    io_rings_subscribers_cancel_all(*((_QWORD *)this + 1));
    gcd::gcd_queue::resume((dispatch_object_t *)this + 2);
    GCDPool::signal_work(this);
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 2, &__block_literal_global_6);
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 2, &__block_literal_global_6);
  }
}

uint64_t GCDPool::resume(GCDPool *this)
{
  if (atomic_load((unsigned int *)this))
    return 4294967274;
  atomic_store(2u, (unsigned int *)this);
  gcd::gcd_queue::resume((dispatch_object_t *)this + 2);
  GCDPool::signal_work(this);
  return 0;
}

void populate_backends_info(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    v25 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v24 = v3;
    v25 = 0;
  }
  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26 + 168))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    v26 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v26;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    v14 = v24;
    if (*((_QWORD *)&v23 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  while (v12 != v14);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_212F31D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

info::DiskImageInfoRaw *info::DiskImageInfoRaw::DiskImageInfoRaw(info::DiskImageInfoRaw *this, const DiskImageRaw *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = &off_24CEF9678;
  *((_QWORD *)this + 1) = &unk_24CEF96C0;
  *((_QWORD *)this + 2) = &unk_24CEF9708;
  *((_QWORD *)this + 3) = &unk_24CEF9750;
  *((_QWORD *)this + 4) = &unk_24CEF9798;
  *((_QWORD *)this + 5) = &unk_24CEF97E0;
  *((_QWORD *)this + 6) = &unk_24CEF9828;
  *((_QWORD *)this + 7) = &unk_24CEF9888;
  *((_QWORD *)this + 15) = &unk_24CEF98F8;
  v4 = (uint64_t *)((char *)a2 + 16);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 40))(*((_QWORD *)a2 + 2));
  v6 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 8) = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 112) + 56) = 0;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 16) = (*(uint64_t (**)(const DiskImageRaw *))(*(_QWORD *)a2 + 32))(a2);
  v7 = (*(uint64_t (**)(const DiskImageRaw *))(*(_QWORD *)a2 + 24))(a2);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 112);
  if (!v8[32])
    v8[32] = 1;
  *((_QWORD *)v8 + 3) = v7;
  populate_backends_info(v4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 104));
  return this;
}

void sub_212F31E84(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  *(_QWORD *)(v1 + 120) = &off_24CEF99C8;
  *(_QWORD *)(v1 + 24) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

info::DiskImageInfoRaw *info::DiskImageInfoRaw::DiskImageInfoRaw(info::DiskImageInfoRaw *this, const DiskImageROChunkRaw *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = &off_24CEF9678;
  *((_QWORD *)this + 1) = &unk_24CEF96C0;
  *((_QWORD *)this + 2) = &unk_24CEF9708;
  *((_QWORD *)this + 3) = &unk_24CEF9750;
  *((_QWORD *)this + 4) = &unk_24CEF9798;
  *((_QWORD *)this + 5) = &unk_24CEF97E0;
  *((_QWORD *)this + 6) = &unk_24CEF9828;
  *((_QWORD *)this + 7) = &unk_24CEF9888;
  *((_QWORD *)this + 15) = &unk_24CEF98F8;
  v4 = (uint64_t *)((char *)a2 + 16);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 40))(*((_QWORD *)a2 + 2));
  v6 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 8) = v5;
  v7 = (char *)this + *(_QWORD *)(v6 - 112);
  *((_QWORD *)v7 + 5) = *((_QWORD *)v7 + 1);
  v7[48] = 1;
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 112);
  *((_QWORD *)v8 + 3) = *((_QWORD *)v8 + 1);
  v8[32] = 1;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 56) = 0;
  v9 = (*(uint64_t (**)(const DiskImageROChunkRaw *))(*(_QWORD *)a2 + 32))(a2);
  v10 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 16) = v9;
  populate_backends_info(v4, (uint64_t)this + *(_QWORD *)(v10 - 104));
  return this;
}

void sub_212F31FCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  *(_QWORD *)(v1 + 120) = &off_24CEF99C8;
  *(_QWORD *)(v1 + 24) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t info::details::InfoNullGetter<info::CompressionInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::MasterChecksumInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::ASIFInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::IdentityInfo>::get()
{
  return 0;
}

{
  return 0;
}

const void **info::SizeInfo::serialize_to_dict@<X0>(info::SizeInfo *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFAllocator *v4;
  uint64_t i;
  const void *v7;
  uint64_t valuePtr;
  const __CFString **v9;
  uint64_t v10;
  const __CFString *v11;
  CFNumberRef v12;
  const __CFString *v13;
  CFNumberRef v14;
  const __CFString *v15;
  const void *v16[2];

  v16[1] = *(const void **)MEMORY[0x24BDAC8D0];
  cf::make_empty_dict((CFMutableDictionaryRef *)&v7);
  valuePtr = *((_QWORD *)this + 1);
  v9 = (const __CFString **)CFSTR("Total Bytes");
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v10 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
  v11 = CFSTR("Sector Count");
  valuePtr = *((_QWORD *)this + 2);
  v12 = 0;
  v12 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v13 = CFSTR("Empty Bytes");
  valuePtr = *((_QWORD *)this + 7);
  v14 = 0;
  v14 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v15 = (const __CFString *)&v9;
  v16[0] = (const void *)3;
  cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v15);
  for (i = 5; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v9)[i]);
  if (*((_BYTE *)this + 48))
  {
    v15 = CFSTR("Max Size Bytes");
    valuePtr = *((_QWORD *)this + 5);
    v16[0] = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
    v9 = &v15;
    v10 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v9);
    CFAutoRelease<void const*>::~CFAutoRelease(v16);
  }
  if (*((_BYTE *)this + 32))
  {
    v15 = CFSTR("Min Size Bytes");
    valuePtr = *((_QWORD *)this + 3);
    v16[0] = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
    v9 = &v15;
    v10 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v9);
    CFAutoRelease<void const*>::~CFAutoRelease(v16);
  }
  *a2 = v7;
  v7 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v7);
}

void sub_212F32218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212F32298()
{
  JUMPOUT(0x212F32290);
}

char *`virtual thunk to'info::details::InfoTrait<info::SizeInfo>::get(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

void info::EncryptionInfo::~EncryptionInfo(info::EncryptionInfo *this)
{
  *(_QWORD *)this = &off_24CEF9B00;
  *((_QWORD *)this + 4) = &unk_24CEF9B58;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
}

{
  *(_QWORD *)this = &off_24CEF9B00;
  *((_QWORD *)this + 4) = &unk_24CEF9B58;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  JUMPOUT(0x2199A8A18);
}

const void **info::EncryptionInfo::serialize_to_dict@<X0>(info::EncryptionInfo *this@<X0>, _QWORD *a2@<X8>)
{
  const void **v4;
  const void *v5;
  const void *v6;
  uint64_t i;
  const void *v9;
  const void *valuePtr;
  uint64_t **v11;
  uint64_t v12;
  const __CFString *v13;
  const void *v14;
  uint64_t *v15;
  const void *v16[2];

  v16[1] = *(const void **)MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 16))
    v4 = (const void **)MEMORY[0x24BDBD270];
  else
    v4 = (const void **)MEMORY[0x24BDBD268];
  v5 = *v4;
  v15 = (uint64_t *)CFSTR("Is Encrypted");
  v16[0] = v5;
  valuePtr = 0;
  v11 = &v15;
  v12 = 1;
  cf::create_dict_from_list((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  CFAutoRelease<void const*>::~CFAutoRelease(v16);
  CFAutoRelease<__CFBoolean const*>::~CFAutoRelease(&valuePtr);
  if (*((_BYTE *)this + 16))
  {
    valuePtr = (const void *)*((_QWORD *)this + 1);
    v11 = (uint64_t **)CFSTR("Key Size");
    v12 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
    v13 = CFSTR("UUID");
    v6 = (const void *)*((_QWORD *)this + 3);
    v14 = v6;
    if (v6)
      CFRetain(v6);
    v15 = (uint64_t *)&v11;
    v16[0] = (const void *)2;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (i = 3; i != -1; i -= 2)
      CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v11)[i]);
  }
  *a2 = v9;
  v9 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v9);
}

void sub_212F324A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

const __CFString *info::EncryptionInfo::get_category(info::EncryptionInfo *this)
{
  return CFSTR("Encryption Info");
}

void `virtual thunk to'info::EncryptionInfo::~EncryptionInfo(info::EncryptionInfo *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_24CEF9B00;
  *((_QWORD *)v1 + 4) = &unk_24CEF9B58;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_24CEF9B00;
  *((_QWORD *)v1 + 4) = &unk_24CEF9B58;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  JUMPOUT(0x2199A8A18);
}

char *`virtual thunk to'info::details::InfoTrait<info::EncryptionInfo>::get(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

void info::DiskImageInfoRaw::~DiskImageInfoRaw(info::DiskImageInfoRaw *this)
{
  *((_QWORD *)this + 15) = &off_24CEF99C8;
  *((_QWORD *)this + 3) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
}

{
  *((_QWORD *)this + 15) = &off_24CEF99C8;
  *((_QWORD *)this + 3) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
  JUMPOUT(0x2199A8A18);
}

const void **info::DiskImageInfoRaw::serialize_to_dict@<X0>(info::DiskImageInfoRaw *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(info::DiskImageInfoRaw *))(*(_QWORD *)this + 24))(this);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("RAW read-write image");
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoRaw *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)), &v9);
  v10[4] = CFSTR("Size Info");
  v10[5] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoRaw *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120)), &v9);
  v10[6] = CFSTR("Encryption Info");
  v10[7] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (i = 7; i != -1; i -= 2)
    result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_212F32770(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 56; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoRaw::get_category(info::DiskImageInfoRaw *this)
{
  return CFSTR("RAW");
}

void `virtual thunk to'info::DiskImageInfoRaw::~DiskImageInfoRaw(info::DiskImageInfoRaw *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 15) = &off_24CEF99C8;
  *((_QWORD *)v1 + 3) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 15) = &off_24CEF99C8;
  *((_QWORD *)v1 + 3) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x2199A8A18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 15) = &off_24CEF99C8;
  *((_QWORD *)v1 + 3) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 15) = &off_24CEF99C8;
  *((_QWORD *)v1 + 3) = &unk_24CEF9A20;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x2199A8A18);
}

const void **`virtual thunk to'info::DiskImageInfoRaw::serialize_to_dict@<X0>(info::DiskImageInfoRaw *this@<X0>, _QWORD *a2@<X8>)
{
  return info::DiskImageInfoRaw::serialize_to_dict((info::DiskImageInfoRaw *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

const __CFString *`virtual thunk to'info::DiskImageInfoRaw::get_category(info::DiskImageInfoRaw *this)
{
  return CFSTR("RAW");
}

const void **CFAutoRelease<__CFString const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **CFAutoRelease<void const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **CFAutoRelease<__CFDictionary *>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **CFAutoRelease<__CFBoolean const*>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t info::DiskImageInfoSparseBundle::count_mapped_bytes(info::DiskImageInfoSparseBundle *this, const DiskImageSparseBundle *a2)
{
  SparseBundleBackend *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v15 = 0;
  v4 = (SparseBundleBackend *)*((_QWORD *)a2 + 70);
  v13 = (unint64_t)(*((_QWORD *)v4 + 15) + *((_QWORD *)v4 + 16) - 1) / *((_QWORD *)v4 + 16);
  SparseBundleBackend::open_mapped_folder(v4, &v12);
  v15 = v12;
  v5 = *((_QWORD *)a2 + 70);
  v17 = 0;
  v6 = operator new(0x30uLL);
  *v6 = &off_24CEFA978;
  v6[1] = &v13;
  v6[2] = &v15;
  v6[3] = a2;
  v6[4] = &v14;
  v6[5] = this;
  v17 = v6;
  SparseBundleBackend::browse_bands_folder(v5, (uint64_t)v16);
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v10 = v14;
  v9 = v15;
  v15 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return v10;
}

void sub_212F32AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 16))(a13);
  _Unwind_Resume(exception_object);
}

void sub_212F32CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

info::DiskImageInfoSparseBundle *info::DiskImageInfoSparseBundle::DiskImageInfoSparseBundle(info::DiskImageInfoSparseBundle *this, const DiskImageSparseBundle *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  crypto::header **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  crypto::header **v25;
  std::__shared_weak_count *v26;

  *((_QWORD *)this + 4) = off_24CEFA1D0;
  *((_QWORD *)this + 5) = off_24CEFA218;
  *((_QWORD *)this + 6) = off_24CEFA260;
  *((_QWORD *)this + 7) = &off_24CEFA4E8;
  *(_QWORD *)this = off_24CEFA0B0;
  *((_QWORD *)this + 1) = &off_24CEFA540;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 15) = &off_24CEFA630;
  *((_QWORD *)this + 2) = off_24CEFA140;
  *((_QWORD *)this + 3) = &off_24CEFA688;
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = 0;
  info::IdentityInfo::IdentityInfo<DiskImageSparseBundle>((uint64_t *)this + 19, (uint64_t *)&off_24CEFA030, (uint64_t)a2);
  *(_QWORD *)this = &off_24CEF9BF8;
  *((_QWORD *)this + 1) = &unk_24CEF9C40;
  *((_QWORD *)this + 2) = &unk_24CEF9C88;
  *((_QWORD *)this + 3) = &unk_24CEF9CD0;
  *((_QWORD *)this + 4) = &unk_24CEF9D18;
  *((_QWORD *)this + 5) = &unk_24CEF9D60;
  *((_QWORD *)this + 6) = &unk_24CEF9DA8;
  *((_QWORD *)this + 7) = &unk_24CEF9E08;
  *((_QWORD *)this + 15) = &unk_24CEF9E78;
  *((_QWORD *)this + 19) = &unk_24CEF9EE8;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 70) + 40))(*((_QWORD *)a2 + 70));
  v5 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 8) = v4;
  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 112) + 8);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 56) = v6
                                                                        - info::DiskImageInfoSparseBundle::count_mapped_bytes(this, a2);
  v7 = (*(uint64_t (**)(const DiskImageSparseBundle *))(*(_QWORD *)a2 + 32))(a2);
  v8 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 16) = v7;
  v9 = (char *)this + *(_QWORD *)(v8 - 112);
  v10 = *((_QWORD *)a2 + 8);
  if (!v9[32])
    v9[32] = 1;
  *((_QWORD *)v9 + 3) = v10;
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 112);
  *((_QWORD *)v11 + 5) = 0x200000000000000;
  v11[48] = 1;
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 71);
  v25 = (crypto::header **)*((_QWORD *)a2 + 70);
  v26 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  populate_backends_info((uint64_t *)&v25, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 104));
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = *((_QWORD *)a2 + 70);
  v18 = *(crypto::header ***)(v17 + 96);
  v19 = *(std::__shared_weak_count **)(v17 + 104);
  v25 = v18;
  v26 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (v18)
    crypto::format::populate_crypto_info(v18, (DiskImageInfo *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)));
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return this;
}

void sub_212F32F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  info::IdentityInfo::~IdentityInfo(v11, (const void **)&off_24CEFA030);
  *(_QWORD *)(v9 + 120) = v12;
  *(_QWORD *)(v9 + 24) = v12 + 88;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageSparseBundle>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  const __CFString *v10;
  const __CFUUID *v11;

  *a1 = (uint64_t)off_24CEFA948;
  v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[2];
  v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v11 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFUUIDBytes *)(*(_QWORD *)(a3 + 560) + 136));
  v8 = CFUUIDCreateString(v7, v11);
  v10 = v8;
  if (*v6)
  {
    CFRelease(*v6);
    v8 = v10;
  }
  a1[1] = (uint64_t)v8;
  v10 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v10);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v11);
  return a1;
}

void sub_212F3309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;
  const void **v11;

  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 16));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v11);
  _Unwind_Resume(a1);
}

void info::IdentityInfo::~IdentityInfo(const void **this, const void **a2)
{
  _QWORD *v3;

  v3 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v3 - 3)) = a2[3];
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 1);
}

uint64_t info::details::InfoNullGetter<info::SizeInfo>::get()
{
  return 0;
}

{
  return 0;
}

uint64_t info::details::InfoNullGetter<info::EncryptionInfo>::get()
{
  return 0;
}

{
  return 0;
}

void info::SizeInfo::~SizeInfo(info::SizeInfo *this)
{
  JUMPOUT(0x2199A8A18);
}

const __CFString *info::SizeInfo::get_category(info::SizeInfo *this)
{
  return CFSTR("Size Info");
}

void `virtual thunk to'info::SizeInfo::~SizeInfo(info::SizeInfo *this)
{
  JUMPOUT(0x2199A8A18);
}

void info::IdentityInfo::~IdentityInfo(info::IdentityInfo *this)
{
  *(_QWORD *)this = &off_24CEFAA10;
  *((_QWORD *)this + 4) = &unk_24CEFAA68;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 1);
}

{
  *(_QWORD *)this = &off_24CEFAA10;
  *((_QWORD *)this + 4) = &unk_24CEFAA68;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 1);
  JUMPOUT(0x2199A8A18);
}

const void **info::IdentityInfo::serialize_to_dict@<X0>(info::IdentityInfo *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const __CFString **v8;
  uint64_t v9;
  const void *v10;
  const __CFString *v11;
  const void *v12[2];

  v12[1] = *(const void **)MEMORY[0x24BDAC8D0];
  v4 = (const void *)*((_QWORD *)this + 1);
  v11 = CFSTR("UUID");
  v12[0] = v4;
  if (v4)
    CFRetain(v4);
  v8 = &v11;
  v9 = 1;
  cf::create_dict_from_list((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  CFAutoRelease<void const*>::~CFAutoRelease(v12);
  v5 = (const void *)*((_QWORD *)this + 3);
  if (v5)
  {
    v11 = CFSTR("Parent UUID");
    v12[0] = v5;
    CFRetain(v5);
    v8 = &v11;
    v9 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    CFAutoRelease<void const*>::~CFAutoRelease(v12);
  }
  v6 = (const void *)*((_QWORD *)this + 2);
  if (v6)
  {
    v11 = CFSTR("Stable UUID");
    v12[0] = v6;
    CFRetain(v6);
    v8 = &v11;
    v9 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    CFAutoRelease<void const*>::~CFAutoRelease(v12);
  }
  *a2 = v10;
  v10 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
}

void sub_212F33364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void **v3;
  va_list va;

  va_start(va, a3);
  CFAutoRelease<void const*>::~CFAutoRelease(v3);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

const __CFString *info::IdentityInfo::get_category(info::IdentityInfo *this)
{
  return CFSTR("Identity Info");
}

void `virtual thunk to'info::IdentityInfo::~IdentityInfo(info::IdentityInfo *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_24CEFAA10;
  *((_QWORD *)v1 + 4) = &unk_24CEFAA68;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 1);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_24CEFAA10;
  *((_QWORD *)v1 + 4) = &unk_24CEFAA68;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 1);
  JUMPOUT(0x2199A8A18);
}

char *`virtual thunk to'info::details::InfoTrait<info::IdentityInfo>::get(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

void info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle(info::DiskImageInfoSparseBundle *this)
{
  *((_QWORD *)this + 19) = &off_24CEFA778;
  *((_QWORD *)this + 6) = &off_24CEFA7D0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
  *((_QWORD *)this + 15) = &off_24CEFA630;
  *((_QWORD *)this + 3) = &off_24CEFA688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
}

{
  *((_QWORD *)this + 19) = &off_24CEFA778;
  *((_QWORD *)this + 6) = &off_24CEFA7D0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
  *((_QWORD *)this + 15) = &off_24CEFA630;
  *((_QWORD *)this + 3) = &off_24CEFA688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
  JUMPOUT(0x2199A8A18);
}

const void **info::DiskImageInfoSparseBundle::serialize_to_dict@<X0>(info::DiskImageInfoSparseBundle *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[11];

  v10[10] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(info::DiskImageInfoSparseBundle *))(*(_QWORD *)this + 24))(this);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("Sparse bundle image");
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)), &v9);
  v10[4] = CFSTR("Size Info");
  v10[5] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120)), &v9);
  v10[6] = CFSTR("Encryption Info");
  v10[7] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::IdentityInfo::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128)), &v9);
  v10[8] = CFSTR("Identity Info");
  v10[9] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (i = 9; i != -1; i -= 2)
    result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_212F336EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t i;

  for (i = 72; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoSparseBundle::get_category(info::DiskImageInfoSparseBundle *this)
{
  return CFSTR("UDSB");
}

void `virtual thunk to'info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle(info::DiskImageInfoSparseBundle *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 19) = &off_24CEFA778;
  *((_QWORD *)v1 + 6) = &off_24CEFA7D0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = &off_24CEFA630;
  *((_QWORD *)v1 + 3) = &off_24CEFA688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 19) = &off_24CEFA778;
  *((_QWORD *)v1 + 6) = &off_24CEFA7D0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = &off_24CEFA630;
  *((_QWORD *)v1 + 3) = &off_24CEFA688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x2199A8A18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 19) = &off_24CEFA778;
  *((_QWORD *)v1 + 6) = &off_24CEFA7D0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = &off_24CEFA630;
  *((_QWORD *)v1 + 3) = &off_24CEFA688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 19) = &off_24CEFA778;
  *((_QWORD *)v1 + 6) = &off_24CEFA7D0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((_QWORD *)v1 + 15) = &off_24CEFA630;
  *((_QWORD *)v1 + 3) = &off_24CEFA688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  JUMPOUT(0x2199A8A18);
}

const void **`virtual thunk to'info::DiskImageInfoSparseBundle::serialize_to_dict@<X0>(info::DiskImageInfoSparseBundle *this@<X0>, _QWORD *a2@<X8>)
{
  return info::DiskImageInfoSparseBundle::serialize_to_dict((info::DiskImageInfoSparseBundle *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

const __CFString *`virtual thunk to'info::DiskImageInfoSparseBundle::get_category(info::DiskImageInfoSparseBundle *this)
{
  return CFSTR("UDSB");
}

void std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::~__func()
{
  JUMPOUT(0x2199A8A18);
}

__n128 std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24CEFA978;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24CEFA978;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

lock_free::bitmap_t *std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::operator()(lock_free::bitmap_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  lock_free::bitmap_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *exception;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  lock_free::bitmap_t *v15;
  uint64_t v16;

  v3 = *a3;
  if (**((_QWORD **)result + 1) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Bands folder contains an out of range band (", 44);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)")", 1);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)&v14, 0x16u);
  }
  v4 = result;
  v5 = (_QWORD *)*((_QWORD *)result + 2);
  if (*v5)
  {
    sparse_bundles::mapped_blocks_t::mapped_blocks_t((uint64_t)&v14, *((_QWORD *)result + 3) + 24, *a3, v5);
    **((_QWORD **)v4 + 4) += lock_free::bitmap_t::get_num_set(v15) << 12;
    v6 = v16;
    v16 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = v15;
    v15 = 0;
    if (result)
      return (lock_free::bitmap_t *)(*(uint64_t (**)(lock_free::bitmap_t *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v7 = *((_QWORD *)result + 3);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v7 + 560) + 120) + *(_QWORD *)(*(_QWORD *)(v7 + 560) + 128) - 1)
       / *(_QWORD *)(*(_QWORD *)(v7 + 560) + 128)
       - 1 == v3)
      v8 = *(_QWORD *)(*((_QWORD *)result + 5) + *(_QWORD *)(**((_QWORD **)result + 5) - 112) + 8)
         - *(_QWORD *)(v7 + 64) * v3;
    else
      v8 = *(_QWORD *)(v7 + 64);
    **((_QWORD **)result + 4) += v8;
  }
  return result;
}

void sub_212F33B54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __break(1u);
}

void sub_212F33CDC()
{
  __cxa_end_catch();
  JUMPOUT(0x212F33C10);
}

uint64_t std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::target_type()
{
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return std::ostream::~ostream();
}

void info::DiskImageInfoUDIF::extract_info_from_runs(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  _QWORD **v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  _QWORD **v14;
  _QWORD *v15[2];

  std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::map[abi:ne180100]((uint64_t)&v14, (uint64_t)a2 + 72);
  v3 = v14;
  if (v14 != v15)
  {
    v4 = (_DWORD *)((char *)this + 8);
    v5 = *(_QWORD *)this;
    do
    {
      v6 = *(_QWORD *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          v8 = dword_212FEF840[v7];
          v9 = dword_212FEF850[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *v4 = v9;
        }
      }
      v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 128) + 16) += v3[9];
      *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 112) + 56) -= v10 << 9;
      v11 = v3[1];
      if (v11)
      {
        do
        {
          v12 = (_QWORD **)v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD **)v3[2];
          v13 = *v12 == v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != v15);
  }
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v14, v15[0]);
}

uint64_t info::DiskImageInfoUDIF::extract_checksum_info(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  void *__p[2];
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
  v23 = *(_DWORD *)(*((_QWORD *)a2 + 17) + 352);
  udif::operator<<(&v24, &v23);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, __p);
  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 136);
  v5 = v4 + 8;
  if (v4[31] < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *((_QWORD *)v5 + 2) = v22;
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  std::stringbuf::str[abi:ne180100]((uint64_t)v25, (__int128 *)__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  v6 = *((_QWORD *)a2 + 17);
  v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    v8 = v6 + 360;
    v9 = v7 >> 3;
    v10 = *(_QWORD *)(v24 - 24);
    v11 = *(_DWORD *)((char *)v25 + v10);
    if (v9 == 1)
    {
      v16 = *(_DWORD *)((char *)v25 + v10);
    }
    else
    {
      v12 = v8;
      v13 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v25 + *(_QWORD *)(v24 - 24)) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(v24 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        v14 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v24, (char *)__p);
        *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
        ++v12;
        --v13;
      }
      while (v13);
      v10 = *(_QWORD *)(v24 - 24);
      v16 = *(_DWORD *)((char *)v25 + v10);
    }
    *(_DWORD *)((char *)v25 + v10) = v16 & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    v17 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v24, (char *)__p);
    *(_QWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 2;
    std::ostream::operator<<();
    *(_DWORD *)((char *)v25 + *(_QWORD *)(v24 - 24)) = v11;
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, __p);
  v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 136);
  v19 = v18 + 32;
  if (v18[55] < 0)
    operator delete(*(void **)v19);
  *(_OWORD *)v19 = *(_OWORD *)__p;
  *((_QWORD *)v19 + 2) = v22;
  v24 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v25[0] = MEMORY[0x24BEDB848] + 16;
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199A89AC](&v27);
}

void sub_212F340F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_212F342BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoUDIF::extract_raw_runs(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  int type;
  const __CFArray *value;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v14[8];
  std::__shared_weak_count *v15;
  const void *v16;
  char v17;
  CFDictionaryRef v18;
  std::__shared_weak_count *v19;
  const void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  const void *v25;
  char v26;

  udif::details::UDIF_base::get_rsrc_iterators((const DiskImageUDIF *)((char *)a2 + 64), (uint64_t)&v18);
  while (!udif::xml_rsrc_iterator::operator==((uint64_t)&v18, (uint64_t)&v23))
  {
    type = udif::xml_rsrc_iterator::get_type((udif::xml_rsrc_iterator *)&v18);
    udif::xml_rsrc_iterator::get_value(&v18);
    if (type == 1651272568)
    {
      udif::xml_rsrc_iterator::get_type((udif::xml_rsrc_iterator *)&v18);
      value = (const __CFArray *)udif::xml_rsrc_iterator::get_value(&v18);
      info::DiskImageInfoUDIF::extract_runs_from_blx_arr(this, value);
    }
    udif::xml_rsrc_iterator::xml_rsrc_iterator((udif::xml_rsrc_iterator *)v14, (const udif::xml_rsrc_iterator *)&v18);
    ++v22;
    if (v17)
      CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v16);
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v26)
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v25);
  v8 = v24;
  if (v24)
  {
    v9 = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v21)
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v20);
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_212F34478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

info::DiskImageInfoUDIF *info::DiskImageInfoUDIF::DiskImageInfoUDIF(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2, char a3)
{
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  CFMutableArrayRef Mutable;
  __CFArray *v21;

  *(_QWORD *)this = off_24CEFB100;
  *((_QWORD *)this + 7) = off_24CEFB268;
  *((_QWORD *)this + 8) = off_24CEFB2B0;
  *((_QWORD *)this + 9) = &off_24CEFB538;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 17) = &off_24CEFB680;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = &off_24CEFB7C8;
  *((_QWORD *)this + 3) = &off_24CEFB590;
  *((_QWORD *)this + 4) = &off_24CEFB820;
  *((_DWORD *)this + 44) = 0;
  *((_QWORD *)this + 25) = off_24CEFB970;
  *((_QWORD *)this + 5) = &off_24CEFB6D8;
  *((_QWORD *)this + 6) = off_24CEFB9C8;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  info::IdentityInfo::IdentityInfo<DiskImageUDIF>((uint64_t *)this + 32, (uint64_t *)&off_24CEFB080, (uint64_t)a2);
  *(_QWORD *)this = &off_24CEFAB18;
  *((_QWORD *)this + 3) = &unk_24CEFAB60;
  *((_QWORD *)this + 4) = &unk_24CEFABA8;
  *((_QWORD *)this + 5) = &unk_24CEFABF0;
  *((_QWORD *)this + 6) = &unk_24CEFAC38;
  *((_QWORD *)this + 7) = &unk_24CEFAC80;
  *((_QWORD *)this + 8) = &unk_24CEFACC8;
  *((_QWORD *)this + 9) = &unk_24CEFAD28;
  *((_QWORD *)this + 17) = &unk_24CEFAD98;
  *((_QWORD *)this + 21) = &unk_24CEFAE08;
  *((_QWORD *)this + 25) = &unk_24CEFAE78;
  *((_QWORD *)this + 32) = &unk_24CEFAEE8;
  *((_DWORD *)this + 2) = 2;
  *((_QWORD *)this + 2) = 0;
  v6 = (CFTypeRef *)((char *)this + 16);
  v7 = (*(uint64_t (**)(const DiskImageUDIF *))(*(_QWORD *)a2 + 32))(a2);
  v8 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 16) = v7;
  v9 = *(_QWORD *)((char *)this + *(_QWORD *)(v8 - 112) + 16);
  v10 = (*(uint64_t (**)(const DiskImageUDIF *))(*(_QWORD *)a2 + 24))(a2);
  v11 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 8) = v10 * v9;
  v12 = (char *)this + *(_QWORD *)(v11 - 112);
  *((_QWORD *)v12 + 5) = *((_QWORD *)v12 + 1);
  v12[48] = 1;
  v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 112);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v13 + 1);
  v13[32] = 1;
  v14 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 56) = *(_QWORD *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 112)
                                                                                    + 8);
  *(_QWORD *)((char *)this + *(_QWORD *)(v14 - 128) + 16) = 0;
  info::DiskImageInfoUDIF::extract_info_from_runs(this, a2);
  info::DiskImageInfoUDIF::extract_checksum_info(this, a2);
  v15 = *(_QWORD *)this;
  v16 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 8)
      - *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 56);
  v17 = *(_QWORD *)(*(_QWORD *)this - 128);
  if (v16)
    v18 = (float)*(unint64_t *)((char *)this + v17 + 16) / (float)v16;
  else
    v18 = 1.0;
  *(float *)((char *)this + v17 + 24) = v18;
  populate_backends_info((uint64_t *)a2 + 6, (uint64_t)this + *(_QWORD *)(v15 - 104));
  if ((a3 & 1) != 0)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v21 = Mutable;
    if (*v6)
    {
      CFRelease(*v6);
      Mutable = v21;
    }
    *((_QWORD *)this + 2) = Mutable;
    v21 = 0;
    CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)&v21);
    info::DiskImageInfoUDIF::extract_raw_runs(this, a2);
  }
  return this;
}

void sub_212F3475C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void **v3;
  void **v4;
  const void **v5;
  const void **v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFArray *>::~CFAutoRelease(v6);
  info::IdentityInfo::~IdentityInfo(v5, (const void **)&off_24CEFB080);
  info::MasterChecksumInfo::~MasterChecksumInfo(v4, (void **)&off_24CEFB060);
  *(_QWORD *)(v2 + 136) = v7;
  *(_QWORD *)(v2 + 40) = v7 + 88;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v3);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageUDIF>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  const void *identifier;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  const __CFString *v13;
  const __CFUUID *v14;
  CFUUIDBytes v15;

  *a1 = (uint64_t)off_24CEFA948;
  v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[2];
  v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  identifier = udif::details::UDIF_base::get_identifier((udif::details::UDIF_base *)(a3 + 64));
  v9 = v8;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)&v15.byte0 = identifier;
  *(_QWORD *)&v15.byte8 = v9;
  v14 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v15);
  v11 = CFUUIDCreateString(v10, v14);
  v13 = v11;
  if (*v6)
  {
    CFRelease(*v6);
    v11 = v13;
  }
  a1[1] = (uint64_t)v11;
  v13 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v13);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v14);
  return a1;
}

void sub_212F348A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;
  const void **v11;

  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 16));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v11);
  _Unwind_Resume(a1);
}

void info::MasterChecksumInfo::~MasterChecksumInfo(void **this, void **a2)
{
  _QWORD *v3;

  v3 = *a2;
  *this = *a2;
  *(void **)((char *)this + *(v3 - 3)) = a2[3];
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

const __CFString *info::DiskImageInfoUDIF::get_category(info::DiskImageInfoUDIF *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 2) - 3;
  if (v1 > 7)
    return CFSTR("UDRO");
  else
    return off_24CEFBFD8[v1];
}

const __CFString *`virtual thunk to'info::DiskImageInfoUDIF::get_category(info::DiskImageInfoUDIF *this)
{
  unsigned int v1;

  v1 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 8) - 3;
  if (v1 > 7)
    return CFSTR("UDRO");
  else
    return off_24CEFBFD8[v1];
}

_QWORD *udif::operator<<(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (udif::checksum_type::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 66)
    {
      v3 = "no_match";
      v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &udif::checksum_type::strings[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (udif::run_type::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 90)
    {
      v3 = "no_match";
      v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &udif::run_type::strings[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (udif::header::segment_num_t::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      v3 = "no_match";
      v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &udif::header::segment_num_t::strings[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (udif::header::segment_count_t::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      v3 = "no_match";
      v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &udif::header::segment_count_t::strings[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  v2 = 0;
  while (udif::header::image_variant_type::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 18)
    {
      v3 = "no_match";
      v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  v5 = &udif::header::image_variant_type::strings[v2];
  v3 = (const char *)*((_QWORD *)v5 + 1);
  v4 = *((_QWORD *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

uint64_t info::DiskImageInfoUDIF::extract_runs_from_blx_arr(info::DiskImageInfoUDIF *this, CFArrayRef theArray)
{
  unint64_t Count;
  CFIndex v5;
  size_t v6;
  void *v7;
  uint64_t i;
  const void *Value;
  CFTypeID TypeID;
  CFTypeID v11;
  CFIndex Length;
  char *v13;
  unsigned int v14;
  const char *v15;
  cf::CFUtilException *exception;
  cf::CFUtilException *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  _BYTE v27[200];
  unsigned int v28;
  uint64_t v29;
  CFRange v30;
  CFRange v31;

  v29 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(theArray);
  v5 = Count;
  if (Count >> 61)
    v6 = -1;
  else
    v6 = 8 * Count;
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  v30.location = 0;
  v30.length = v5;
  CFArrayGetValues(theArray, v30, (const void **)v7);
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      Value = (const void *)*((_QWORD *)v7 + i);
      TypeID = CFDictionaryGetTypeID();
      if (Value && CFGetTypeID(Value) != TypeID
        || (Value = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("Data")), v11 = CFDataGetTypeID(), Value)
        && CFGetTypeID(Value) != v11)
      {
        exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
        CFGetTypeID(Value);
        v18 = cf::CFUtilException::CFUtilException(exception);
      }
      Length = CFDataGetLength((CFDataRef)Value);
      v13 = (char *)operator new[]();
      bzero(v13, Length);
      v31.length = CFDataGetLength((CFDataRef)Value);
      v31.location = 0;
      CFDataGetBytes((CFDataRef)Value, v31, (UInt8 *)v13);
      udif::details::blocks::blocks((udif::details::blocks *)v27, v13);
      if (v28)
      {
        v14 = 0;
        v15 = v13 + 204;
        do
        {
          udif::details::run_t::run_t((udif::details::run_t *)&v23, v15);
          v19 = v23;
          v20 = v24;
          v21 = v25;
          v22 = v26;
          info::DiskImageInfoUDIF::add_run((uint64_t)this, &v19);
          ++v14;
          v15 += 40;
        }
        while (v14 < v28);
      }
      MEMORY[0x2199A8A00](v13, 0x1000C8077774924);
    }
  }
  return MEMORY[0x2199A8A00](v7, 0x80C80B8603338);
}

void sub_212F34C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A00](v1, 0x80C80B8603338);
  _Unwind_Resume(a1);
}

uint64_t std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::~pair(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 40;
  if (*(_BYTE *)(a1 + 64))
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(a1 + 56));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  if (*(_BYTE *)(a1 + 24))
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(a1 + 16));
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1);
}

void info::DiskImageInfoUDIF::add_run(uint64_t a1, int *a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  int v6;
  void **v7;
  CFStringRef v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  CFStringRef v12;
  int v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v6 = *a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  v13 = v6;
  udif::operator<<(&v15, &v13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, __p);
  if (v11 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = CFStringCreateWithCString(v4, (const char *)v7, 0x8000100u);
  v12 = v8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v12);
  if (v11 < 0)
    operator delete(__p[0]);
  v14[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15 = v9;
  v16[0] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](&v18);
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v8);
  CFRelease(v8);
  addCFNumber64ToDict(Mutable, CFSTR("Reserved"), a2[1]);
  addCFNumber64ToDict(Mutable, CFSTR("Sector Count"), *((_QWORD *)a2 + 2));
  addCFNumber64ToDict(Mutable, CFSTR("Start Offset"), *((_QWORD *)a2 + 1));
  addCFNumber64ToDict(Mutable, CFSTR("Compressed Offset"), *((_QWORD *)a2 + 3));
  addCFNumber64ToDict(Mutable, CFSTR("Compressed Length"), *((_QWORD *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_212F34EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v38;

  if (a15 < 0)
    operator delete(__p);
  a18 = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a18 + *(_QWORD *)(a18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a20 = v38;
  a21 = MEMORY[0x24BEDB848] + 16;
  if (a34 < 0)
    operator delete(a29);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199A89AC](&a37);
  _Unwind_Resume(a1);
}

void info::CompressionInfo::~CompressionInfo(info::CompressionInfo *this)
{
  JUMPOUT(0x2199A8A18);
}

const void **info::CompressionInfo::serialize_to_dict@<X0>(info::CompressionInfo *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFAllocator *v4;
  unsigned int v5;
  const __CFString *v6;
  uint64_t i;
  const void **result;
  uint64_t v9[2];
  const void *v10;
  uint64_t valuePtr;
  _QWORD v12[3];
  CFNumberRef v13;
  const __CFString *v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  valuePtr = *((_QWORD *)this + 2);
  v12[0] = CFSTR("Compressed Bytes");
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v12[1] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *((_DWORD *)this + 6);
  v12[2] = CFSTR("Compression Ratio");
  v13 = 0;
  v13 = CFNumberCreate(v4, kCFNumberFloatType, &valuePtr);
  v5 = *((_DWORD *)this + 2) - 1;
  if (v5 > 3)
    v6 = CFSTR("raw");
  else
    v6 = off_24CEFC018[v5];
  v14 = CFSTR("Compression Type");
  v15 = v6;
  v9[0] = (uint64_t)v12;
  v9[1] = 3;
  cf::create_dict_from_list(v9, (CFMutableDictionaryRef *)&v10);
  *a2 = v10;
  v10 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
  for (i = 5; i != -1; i -= 2)
    result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v12[i]);
  return result;
}

void sub_212F350B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 40; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::CompressionInfo::get_category(info::CompressionInfo *this)
{
  return CFSTR("Compression Info");
}

void `virtual thunk to'info::CompressionInfo::~CompressionInfo(info::CompressionInfo *this)
{
  JUMPOUT(0x2199A8A18);
}

void info::MasterChecksumInfo::~MasterChecksumInfo(info::MasterChecksumInfo *this)
{
  *(_QWORD *)this = off_24CEFBF60;
  *((_QWORD *)this + 7) = &unk_24CEFBFB8;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_24CEFBF60;
  *((_QWORD *)this + 7) = &unk_24CEFBFB8;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x2199A8A18);
}

const void **info::MasterChecksumInfo::serialize_to_dict@<X0>(info::MasterChecksumInfo *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFAllocator *v4;
  const UInt8 *v5;
  CFIndex v6;
  const UInt8 *v7;
  CFIndex v8;
  const void *v9;
  uint64_t i;
  uint64_t v12[2];
  const void *v13;
  CFTypeRef v14;
  CFTypeRef cf;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (*((char *)this + 55) < 0)
  {
    v5 = (const UInt8 *)*((_QWORD *)this + 4);
    v6 = *((_QWORD *)this + 5);
  }
  else
  {
    v5 = (const UInt8 *)this + 32;
    v6 = *((unsigned __int8 *)this + 55);
  }
  cf = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, v6, 0x8000100u, 0);
  if (*((char *)this + 31) < 0)
  {
    v7 = (const UInt8 *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (const UInt8 *)this + 8;
    v8 = *((unsigned __int8 *)this + 31);
  }
  v9 = CFStringCreateWithBytes(v4, v7, v8, 0x8000100u, 0);
  v14 = v9;
  v16[0] = CFSTR("Checksum Value");
  v16[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    v9 = v14;
  }
  v16[2] = CFSTR("Checksum Type");
  v16[3] = v9;
  if (v9)
    CFRetain(v9);
  v12[0] = (uint64_t)v16;
  v12[1] = 2;
  cf::create_dict_from_list(v12, (CFMutableDictionaryRef *)&v13);
  *a2 = v13;
  v13 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v13);
  for (i = 3; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v16[i]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&v14);
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
}

void sub_212F35330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void **v4;
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, const void *);
  CFAutoRelease<void const*>::~CFAutoRelease(v4);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

const __CFString *info::MasterChecksumInfo::get_category(info::MasterChecksumInfo *this)
{
  return CFSTR("Master Checksum Info");
}

void `virtual thunk to'info::MasterChecksumInfo::~MasterChecksumInfo(info::MasterChecksumInfo *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_24CEFBF60;
  *((_QWORD *)v1 + 7) = &unk_24CEFBFB8;
  if (v1[55] < 0)
    operator delete(*((void **)v1 + 4));
  if (v1[31] < 0)
    operator delete(*((void **)v1 + 1));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_24CEFBF60;
  *((_QWORD *)v1 + 7) = &unk_24CEFBFB8;
  if (v1[55] < 0)
    operator delete(*((void **)v1 + 4));
  if (v1[31] < 0)
    operator delete(*((void **)v1 + 1));
  JUMPOUT(0x2199A8A18);
}

void info::DiskImageInfoUDIF::~DiskImageInfoUDIF(info::DiskImageInfoUDIF *this)
{
  *(_QWORD *)this = &off_24CEFAB18;
  *((_QWORD *)this + 3) = &unk_24CEFAB60;
  *((_QWORD *)this + 4) = &unk_24CEFABA8;
  *((_QWORD *)this + 5) = &unk_24CEFABF0;
  *((_QWORD *)this + 6) = &unk_24CEFAC38;
  *((_QWORD *)this + 7) = &unk_24CEFAC80;
  *((_QWORD *)this + 8) = &unk_24CEFACC8;
  *((_QWORD *)this + 9) = &unk_24CEFAD28;
  *((_QWORD *)this + 17) = &unk_24CEFAD98;
  *((_QWORD *)this + 21) = &unk_24CEFAE08;
  *((_QWORD *)this + 25) = &unk_24CEFAE78;
  *((_QWORD *)this + 32) = &unk_24CEFAEE8;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 2);
  *((_QWORD *)this + 32) = &off_24CEFBB18;
  *((_QWORD *)this + 8) = &off_24CEFBB70;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 35);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 34);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 33);
  *((_QWORD *)this + 25) = off_24CEFB970;
  *((_QWORD *)this + 6) = off_24CEFB9C8;
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  *((_QWORD *)this + 17) = &off_24CEFB680;
  *((_QWORD *)this + 5) = &off_24CEFB6D8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF(this);
  JUMPOUT(0x2199A8A18);
}

const void **info::DiskImageInfoUDIF::serialize_to_dict@<X0>(info::DiskImageInfoUDIF *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void *v6;
  CFTypeRef cf;
  const void *v9;
  const void *v10;
  uint64_t **v11;
  uint64_t v12;
  const __CFString *v13;
  CFTypeRef v14;
  const __CFString *v15;
  const void *v16;
  const __CFString *v17;
  const void *v18;
  const __CFString *v19;
  const void *v20;
  const __CFString *v21;
  const void *v22;
  const __CFString *v23;
  const void *v24;
  uint64_t *v25;
  const void *v26[2];

  v26[1] = *(const void **)MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(info::DiskImageInfoUDIF *))(*(_QWORD *)this + 24))(this);
  v11 = (uint64_t **)CFSTR("Image Format");
  v12 = v4;
  info::DiskImageInfoUDIF::get_format_desc(this, (CFStringRef *)&cf);
  v13 = CFSTR("Format Description");
  v14 = cf;
  if (cf)
    CFRetain(cf);
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)), &v10);
  v15 = CFSTR("Size Info");
  v16 = v10;
  v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120)), &v10);
  v17 = CFSTR("Encryption Info");
  v18 = v10;
  v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::CompressionInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128)), &v10);
  v19 = CFSTR("Compression Info");
  v20 = v10;
  v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::MasterChecksumInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), &v10);
  v21 = CFSTR("Master Checksum Info");
  v22 = v10;
  v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::IdentityInfo::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 144)), &v10);
  v23 = CFSTR("Identity Info");
  v24 = v10;
  v10 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  v25 = (uint64_t *)&v11;
  v26[0] = (const void *)7;
  cf::create_dict_from_list((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (i = 13; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v11)[i]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
  v6 = (const void *)*((_QWORD *)this + 2);
  if (v6)
  {
    v25 = (uint64_t *)CFSTR("Runs");
    v26[0] = v6;
    CFRetain(v6);
    v11 = &v25;
    v12 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    CFAutoRelease<void const*>::~CFAutoRelease(v26);
  }
  *a2 = v9;
  v9 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v9);
}

void sub_212F357AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'info::DiskImageInfoUDIF::~DiskImageInfoUDIF(info::DiskImageInfoUDIF *this)
{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x2199A8A18);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 32)));
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 32)));
  JUMPOUT(0x2199A8A18);
}

const void **`virtual thunk to'info::DiskImageInfoUDIF::serialize_to_dict@<X0>(info::DiskImageInfoUDIF *this@<X0>, _QWORD *a2@<X8>)
{
  return info::DiskImageInfoUDIF::serialize_to_dict((info::DiskImageInfoUDIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

char *`virtual thunk to'info::details::InfoTrait<info::CompressionInfo>::get(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

char *`virtual thunk to'info::details::InfoTrait<info::MasterChecksumInfo>::get(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_212F35994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

udif::xml_rsrc_iterator *udif::xml_rsrc_iterator::xml_rsrc_iterator(udif::xml_rsrc_iterator *this, const udif::xml_rsrc_iterator *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::__optional_copy_base<CFAutoRelease<__CFDictionary const*>,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 16, (uint64_t)a2 + 16);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

void sub_212F35A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<CFAutoRelease<__CFDictionary const*>,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  const void *v3;

  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    *(_QWORD *)a1 = 0;
    v3 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v3)
      CFRetain(v3);
    a1[8] = 1;
  }
  return a1;
}

void sub_212F35A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)v1);
  _Unwind_Resume(exception_object);
}

cf::CFUtilException *cf::CFUtilException::CFUtilException(cf::CFUtilException *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"CoreFoundation type mismatch: ", 30);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" while expecting ", 17);
  std::ostream::operator<<();
  DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)this, (uint64_t)v3, 0x16u);
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](&v5);
  *(_QWORD *)this = &off_24CEFBDC8;
  return this;
}

void cf::CFUtilException::~CFUtilException(std::exception *this)
{
  DiskImagesRuntimeException::~DiskImagesRuntimeException(this);
  JUMPOUT(0x2199A8A18);
}

CFStringRef info::DiskImageInfoUDIF::get_format_desc@<X0>(info::DiskImageInfoUDIF *this@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3;
  const __CFString *v4;
  CFStringRef result;

  v3 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 8);
  if (v3)
  {
    if (v3 > 4)
      v4 = CFSTR("raw");
    else
      v4 = off_24CEFC018[v3 - 1];
    result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%s (%@)"), "UDIF read-only compressed image", v4);
  }
  else
  {
    result = CFSTR("UDIF uncompressed read-only image");
  }
  *a2 = result;
  return result;
}

const void **CFAutoRelease<__CFArray *>::~CFAutoRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>>((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_212F35CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>>(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_5;
  v5 = *(_BYTE *)(a5 + 16);
  v6 = (v5 & 1) + *(_QWORD *)(a5 + 8) - 1;
  v7 = a2[4];
  if ((a2[6] & 2) == 0)
    ++v7;
  if (v6 < v7)
  {
LABEL_5:
    v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v11 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v11);
    }
    v16 = *(_QWORD *)a5;
    if ((*(_BYTE *)(a5 + 16) & 2) == 0)
      ++v16;
    if ((unint64_t)(v10[6] & 1) + v10[5] - 1 < v16)
      goto LABEL_23;
    return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a3, a5);
  }
  v11 = (v5 & 2) == 0;
  v12 = *(_QWORD *)a5;
  if (v11)
    ++v12;
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        v11 = *a4 == v17;
        v17 = (uint64_t *)a4;
      }
      while (!v11);
    }
    if (a4 == a1 + 1)
      goto LABEL_34;
    v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0)
      ++v18;
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

_QWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  unint64_t v9;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 16) & 2) != 0)
      v6 = *(_QWORD *)a3;
    else
      v6 = *(_QWORD *)a3 + 1;
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = *(_BYTE *)(v4 + 48);
        v9 = v7[4];
        if ((v8 & 2) == 0)
          ++v9;
        if ((unint64_t)(*(_BYTE *)(a3 + 16) & 1) + *(_QWORD *)(a3 + 8) - 1 >= v9)
          break;
        v4 = *v7;
        result = v7;
        if (!*v7)
          goto LABEL_14;
      }
      if ((unint64_t)(v8 & 1) + v7[5] - 1 >= v6)
        break;
      result = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = result;
  }
LABEL_14:
  *a2 = v7;
  return result;
}

void info::DiskImageInfoASIF::count_used_extents(info::DiskImageInfoASIF *this, const DiskImageASIF *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  ref::details **v8;
  unint64_t v9;
  di_asif::details::table *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *DIOSLog;
  const char *v16;
  char *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD v22[3];
  std::__shared_weak_count *v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[8];
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)di_asif::header::get_dir_offset((const DiskImageASIF *)((char *)a2 + 32), *((_QWORD *)a2 + 22)))
  {
    v4 = *((_QWORD *)a2 + 44);
    v5 = *((_QWORD *)a2 + 45);
    v24 = 0u;
    v25 = 0u;
    di_asif::details::dir_base::create_context((const DiskImageASIF *)((char *)a2 + 200), v22);
    v6 = (uint64_t *)((char *)this + 16);
    if (v4 == v5)
    {
      v11 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v4 + 8 * (_QWORD)v8) * *((unsigned int *)a2 + 24);
        if (v9)
        {
          ++*(uint64_t *)((char *)v6 + *(_QWORD *)(*(_QWORD *)this - 136));
          di_asif::details::dir::load_create_table((uint64_t)a2 + 200, (di_asif::details::ContextASIF *)v22, v8, v9, 0, 1, (unint64_t *)buf);
          if (*(_QWORD *)buf && !*(_BYTE *)(*(_QWORD *)buf + 520))
          {
            if (*(_BYTE *)(*(_QWORD *)buf + 400))
              v10 = (di_asif::details::table *)(*(_QWORD *)buf + 40);
            else
              v10 = 0;
            info::DiskImageInfoASIF::count_table_extents((uint64_t *)this, v10, (di_asif::details::ContextASIF *)v22, &v24);
          }
          ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)buf);
        }
        v8 = (ref::details **)((char *)v8 + 1);
        v7 += 8;
      }
      while (v4 + v7 != v5);
      v11 = *((_QWORD *)&v24 + 1);
    }
    v12 = *v6;
    *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 56) -= v12
                                                                           + (*(uint64_t (**)(const DiskImageASIF *))(*(_QWORD *)a2 + 24))(a2)
                                                                           * v11;
    v13 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1) && DIDebugLogsEnabled())
    {
      v14 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&buf[4] = 71;
        v27 = 2080;
        v28 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
        v29 = 2048;
        v30 = v13;
        v16 = (const char *)_os_log_send_and_compose_impl();
        if (v16)
        {
          v17 = (char *)v16;
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v16);
          free(v17);
        }
      }
      else
      {
        v18 = getDIOSLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&buf[4] = 71;
          v27 = 2080;
          v28 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
          v29 = 2048;
          v30 = v13;
          _os_log_impl(&dword_212EB0000, v18, OS_LOG_TYPE_DEBUG, "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)", buf, 0x1Cu);
        }
      }
      *__error() = v14;
    }
    v22[0] = off_24CEFD000;
    v19 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_212F36340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_212F3652C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t info::DiskImageInfoASIF::set_uuids_info(info::DiskImageInfoASIF *this, di_asif::details::dir **a2)
{
  uint64_t stackable_source_identifier;
  unint64_t v5;
  CFAllocatorRef *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  CFTypeRef *v9;
  uint64_t result;
  CFUUIDBytes v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFTypeRef *v14;
  const __CFString *v15;
  const void *v16[3];
  const void *v17[7];
  CFUUIDBytes v18;

  v17[6] = *(const void **)MEMORY[0x24BDAC8D0];
  stackable_source_identifier = DiskImageASIF::get_stackable_source_identifier(a2);
  v17[4] = (const void *)stackable_source_identifier;
  v17[5] = (const void *)v5;
  v6 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (stackable_source_identifier | v5)
  {
    *(_QWORD *)&v18.byte8 = v5;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    *(_QWORD *)&v18.byte0 = stackable_source_identifier;
    v17[0] = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v18);
    v8 = CFUUIDCreateString(v7, (CFUUIDRef)v17[0]);
    v16[0] = v8;
    v9 = (CFTypeRef *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128));
    if (v9[3])
    {
      CFRelease(v9[3]);
      v8 = (CFStringRef)v16[0];
    }
    v9[3] = v8;
    v16[0] = 0;
    CFAutoRelease<__CFString const*>::~CFAutoRelease(v16);
    CFAutoRelease<__CFUUID const*>::~CFAutoRelease(v17);
  }
  result = DiskImageASIF::get_stable_uuid(a2);
  *(_QWORD *)&v11.byte8 = *(_QWORD *)&v11.byte0;
  v17[0] = (const void *)result;
  v17[1] = *(const void **)&v11.byte0;
  if (result | *(_QWORD *)&v11.byte0)
  {
    v12 = *v6;
    *(_QWORD *)&v11.byte0 = result;
    v16[0] = CFUUIDCreateFromUUIDBytes(*v6, v11);
    v13 = CFUUIDCreateString(v12, (CFUUIDRef)v16[0]);
    v15 = v13;
    v14 = (CFTypeRef *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128));
    if (v14[2])
    {
      CFRelease(v14[2]);
      v13 = v15;
    }
    v14[2] = v13;
    v15 = 0;
    CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v15);
    return (uint64_t)CFAutoRelease<__CFUUID const*>::~CFAutoRelease(v16);
  }
  return result;
}

void sub_212F366A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoASIF::examine_mapped_extents(info::DiskImageInfoASIF *this, const DiskImageASIF *a2)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  CFTypeRef *v6;
  const void *v7;
  _QWORD *v8;
  const CFArrayCallBacks *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  CFMutableArrayRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  NSObject *DIOSLog;
  const char *v24;
  char *v25;
  NSObject *v26;
  _QWORD *exception;
  const std::error_category *v28;
  _QWORD v29[6];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  _QWORD v35[3];
  std::__shared_weak_count *v36;
  void *value;
  __int16 v38;
  const char *v39;
  __int16 v40;
  uint64_t v41;
  const void *v42[3];
  char v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v42[0] = Mutable;
  v6 = (CFTypeRef *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136));
  if (v6[10])
  {
    CFRelease(v6[10]);
    Mutable = (CFMutableArrayRef)v42[0];
  }
  v6[10] = Mutable;
  v42[0] = 0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease(v42);
  di_asif::details::dir_base::create_context((const DiskImageASIF *)((char *)a2 + 200), v35);
  v7 = *(const void **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 16);
  v42[0] = a2;
  v42[1] = 0;
  v42[2] = v7;
  v43 = 2;
  v44 = 0;
  v45 = v35;
  v46 = 2;
  v8 = v47;
  v47[0] = &off_24CEF4398;
  v48 = v47;
  DiskImage::extents_t::begin((DiskImage::extents_t *)v42, (uint64_t)&v30);
  DiskImage::extents_t::end((DiskImage::extents_t *)v42, (uint64_t)v29);
  v9 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v30, (uint64_t)v29))
  {
    if (v34 == 3)
    {
      v22 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
        value = (void *)0x4B04100302;
        v38 = 2080;
        v39 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
        v40 = 2048;
        v41 = v31;
        v24 = (const char *)_os_log_send_and_compose_impl();
        if (v24)
        {
          v25 = (char *)v24;
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v24);
          free(v25);
        }
      }
      else
      {
        v26 = getDIOSLog();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          value = (void *)0x4B04100302;
          v38 = 2080;
          v39 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
          v40 = 2048;
          v41 = v31;
          _os_log_impl(&dword_212EB0000, v26, OS_LOG_TYPE_ERROR, "%.*s: Failed during ASIF extents enumeration on offset: %llu", (uint8_t *)&value, 0x1Cu);
        }
      }
      *__error() = v22;
      exception = __cxa_allocate_exception(0x40uLL);
      *exception = &off_24CF07908;
      v28 = std::generic_category();
      exception[1] = 22;
      exception[2] = v28;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 48) = 0;
      exception[7] = "Failed during ASIF extents enumeration.";
    }
    v11 = v31;
    v10 = v32;
    v12 = v33;
    v13 = CFArrayCreateMutable(v4, 2, v9);
    value = v13;
    if ((v12 & 2) != 0)
      v14 = v11;
    else
      v14 = v11 + 1;
    addNumberToCFArray<unsigned long long>(v13, v14);
    addNumberToCFArray<unsigned long long>(value, (v12 & 1) + v10 - 1);
    CFArrayAppendValue(*(CFMutableArrayRef *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136) + 80), value);
    CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)&value);
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v30);
  }
  v15 = v29[0];
  v29[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  v16 = v30;
  v30 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  if (v48 == v47)
  {
    v17 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_19;
    v17 = 5;
    v8 = v48;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v17))(v8);
LABEL_19:
  v18 = v44;
  v44 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  v35[0] = off_24CEFD000;
  v19 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_212F36B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)(v1 - 176));
  _Unwind_Resume(a1);
}

info::DiskImageInfoASIF *info::DiskImageInfoASIF::DiskImageInfoASIF(info::DiskImageInfoASIF *this, const DiskImageASIF *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *(_QWORD *)this = off_24CEFC610;
  *((_QWORD *)this + 9) = off_24CEFC778;
  *((_QWORD *)this + 10) = off_24CEFC7C0;
  *((_QWORD *)this + 11) = &off_24CEFCA48;
  *((_QWORD *)this + 5) = &off_24CEFCAA0;
  *((_QWORD *)this + 6) = off_24CEFC6A0;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 19) = &off_24CEFCB90;
  *((_QWORD *)this + 7) = &off_24CEFCBE8;
  *((_QWORD *)this + 8) = off_24CEFC730;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_QWORD *)this + 22) = 0;
  info::IdentityInfo::IdentityInfo<DiskImageASIF>((uint64_t *)this + 23, (uint64_t *)&off_24CEFC570, a2);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 37) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_QWORD *)this = &off_24CEFC0C0;
  *((_QWORD *)this + 5) = &unk_24CEFC108;
  *((_QWORD *)this + 6) = &unk_24CEFC150;
  *((_QWORD *)this + 7) = &unk_24CEFC198;
  *((_QWORD *)this + 8) = &unk_24CEFC1E0;
  *((_QWORD *)this + 9) = &unk_24CEFC228;
  *((_QWORD *)this + 10) = &unk_24CEFC270;
  *((_QWORD *)this + 11) = &unk_24CEFC2D0;
  *((_QWORD *)this + 19) = &unk_24CEFC340;
  *((_QWORD *)this + 23) = &unk_24CEFC3B0;
  *((_QWORD *)this + 27) = &unk_24CEFC420;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (*(uint64_t (**)(const DiskImageASIF *))(*(_QWORD *)a2 + 32))(a2);
  v7 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 16) = v6;
  v8 = *(_QWORD *)((char *)this + *(_QWORD *)(v7 - 112) + 16);
  v9 = (*(uint64_t (**)(const DiskImageASIF *))(*(_QWORD *)a2 + 24))(a2);
  v10 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112) + 8) = v9 * v8;
  v11 = *((unsigned int *)a2 + 24);
  *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 136) + 24) = v11;
  *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 136) + 64) = *((_QWORD *)a2 + 11);
  *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 136) + 8) = *((_QWORD *)a2 + 476);
  *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 112) + 56) = *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 112) + 8);
  v12 = *((_QWORD *)a2 + 13);
  if (v12)
  {
    v13 = v12 * v11;
  }
  else
  {
    v14 = *((_QWORD *)a2 + 11);
    v13 = (*(uint64_t (**)(const DiskImageASIF *))(*(_QWORD *)a2 + 24))(a2) * v14;
    v10 = *(_QWORD *)this;
  }
  v15 = (char *)this + *(_QWORD *)(v10 - 112);
  *((_QWORD *)v15 + 5) = v13;
  v15[48] = 1;
  v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 112);
  v17 = *((unsigned int *)a2 + 24);
  if (!v16[32])
    v16[32] = 1;
  *((_QWORD *)v16 + 3) = v17;
  *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 136) + 72) = *((_BYTE *)a2 + 44) & 1;
  info::DiskImageInfoASIF::count_used_extents(this, a2);
  populate_backends_info((uint64_t *)a2 + 2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 104));
  info::DiskImageInfoASIF::set_uuids_info(this, (di_asif::details::dir **)a2);
  if ((a3 & 2) != 0)
    info::DiskImageInfoASIF::examine_mapped_extents(this, a2);
  return this;
}

void sub_212F36E5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  const void **v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 216) = &off_24CEFCE20;
  *(_QWORD *)(v1 + 72) = &off_24CEFCE78;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)(v1 + 296));
  info::IdentityInfo::~IdentityInfo(v3, (const void **)&off_24CEFC570);
  *(_QWORD *)(v1 + 152) = v4;
  *(_QWORD *)(v1 + 56) = v4 + 88;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageASIF>(uint64_t *a1, uint64_t *a2, DiskImageASIF *this)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t stackable_identifier;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  const __CFString *v13;
  const __CFUUID *v14;
  CFUUIDBytes v15;

  *a1 = (uint64_t)off_24CEFA948;
  v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[2];
  v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  stackable_identifier = DiskImageASIF::get_stackable_identifier(this);
  v9 = v8;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)&v15.byte0 = stackable_identifier;
  *(_QWORD *)&v15.byte8 = v9;
  v14 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v15);
  v11 = CFUUIDCreateString(v10, v14);
  v13 = v11;
  if (*v6)
  {
    CFRelease(*v6);
    v11 = v13;
  }
  a1[1] = (uint64_t)v11;
  v13 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v13);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v14);
  return a1;
}

void sub_212F36F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;
  const void **v11;

  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 16));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v11);
  _Unwind_Resume(a1);
}

uint64_t info::DiskImageInfoASIF::count_table_extents(uint64_t *a1, di_asif::details::table *this, di_asif::details::ContextASIF *a3, _QWORD *a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const di_asif::details::table_entry_map *v11;
  int flags;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20[5];
  _QWORD v21[10];
  _QWORD v22[11];

  result = di_asif::details::table::make_map_entry_iterators(this, (uint64_t)this, (uint64_t)v22);
  v7 = *((_QWORD *)this + 44);
  v8 = a1 + 1;
  v9 = a1 + 3;
  v10 = a1 + 4;
  while (v22[0] != v22[5] || v22[1] != v22[6])
  {
    v11 = (const di_asif::details::table_entry_map *)di_asif::details::map_entry_iterator_t::operator*((uint64_t)v22);
    di_asif::details::table::make_data_entry_iterators_for_map(this, v11, (uint64_t)v21);
    while (v21[0] != v21[5] || v21[1] != v21[6])
    {
      *(_OWORD *)v20 = *(_OWORD *)di_asif::details::map_entry_iterator_t::operator*((uint64_t)v21);
      flags = di_asif::details::table_entry_data::get_flags((di_asif::details::table_entry_data *)v20);
      v13 = *a1;
      v14 = *(_QWORD *)((char *)v8 + *(_QWORD *)(*a1 - 112));
      v15 = v14 > v7;
      v16 = v14 - v7;
      if (v15)
      {
        if (v16 >= *(_QWORD *)((char *)v9 + *(_QWORD *)(v13 - 136)))
          v17 = *(_QWORD *)((char *)v9 + *(_QWORD *)(v13 - 136));
        else
          v17 = v16;
      }
      else
      {
        v17 = 0;
      }
      switch(flags)
      {
        case 0:
          ++*(_QWORD *)((char *)v10 + *(_QWORD *)(v13 - 136));
          *v8 += v17;
          break;
        case 1:
          ++*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 136) + 40);
          a1[2] += v17;
          break;
        case 2:
          ++*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 136) + 48);
          *v10 += v17;
          break;
        case 3:
          ++*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 136) + 56);
          *v9 += v17;
          if (v17)
          {
            info::DiskImageInfoASIF::inspect_bitmap_for_entry(a1, this, a3, v20[0], v20[1], a4, v17);
            v13 = *a1;
          }
          break;
        default:
          break;
      }
      v7 += *(_QWORD *)((char *)v9 + *(_QWORD *)(v13 - 136));
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)v21, (uint64_t)v20);
    }
    result = di_asif::details::map_entry_iterator_t::operator++((uint64_t)v22, (uint64_t)v21);
  }
  return result;
}

void di_asif::details::ContextASIF::~ContextASIF(di_asif::details::ContextASIF *this)
{
  *(_QWORD *)this = off_24CEFD000;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = off_24CEFD000;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2199A8A18);
}

unint64_t *info::DiskImageInfoASIF::inspect_bitmap_for_entry(_QWORD *a1, di_asif::details::table *a2, di_asif::details::ContextASIF *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  unint64_t start_block;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t logical_offset;
  unint64_t v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *exception;
  const std::error_category *v26;
  unint64_t v27;
  _QWORD v28[2];

  v28[0] = a4;
  v28[1] = a5;
  start_block = di_asif::details::table_entry_data::get_start_block((di_asif::details::table_entry_data *)v28);
  di_asif::details::table::get_bitmap(a2, a3, start_block, 0, 1, &v27);
  v13 = (char *)a1 + *(_QWORD *)(*a1 - 112);
  v14 = *((_QWORD *)v13 + 1);
  v15 = *((_QWORD *)v13 + 2);
  if (v15 - 1 >= v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *exception = &off_24CF07908;
    v26 = std::generic_category();
    exception[1] = 22;
    exception[2] = v26;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Corrupted ASIF image.";
  }
  logical_offset = di_asif::details::table_entry_data::get_logical_offset((di_asif::details::table_entry_data *)v28);
  v17 = logical_offset + a7;
  if (logical_offset < v17)
  {
    v18 = 0;
    v19 = v14 / v15;
    do
    {
      while (1)
      {
        if (v27)
          v20 = *(_BYTE *)(v27 + 224) ? (_QWORD *)(v27 + 40) : 0;
        else
          v20 = 0;
        v21 = di_asif::details::map_element::search_for_pattern_match(v20, a2, v18, logical_offset, v17);
        v22 = a6;
        v23 = (v21 - logical_offset) / v19;
        if (v18)
        {
          v22 = a6 + 1;
          if (v18 == 2)
            break;
        }
        *v22 += v23;
        ++v18;
        logical_offset = v21;
      }
      v18 = 0;
      a6[2] += v23;
      logical_offset = v21;
    }
    while (v21 < v17);
  }
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v27);
}

void sub_212F373A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((unint64_t *)va);
  _Unwind_Resume(a1);
}

void info::ASIFInfo::~ASIFInfo(info::ASIFInfo *this)
{
  *(_QWORD *)this = &off_24CEFD2C8;
  *((_QWORD *)this + 11) = &unk_24CEFD320;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 10);
}

{
  *(_QWORD *)this = &off_24CEFD2C8;
  *((_QWORD *)this + 11) = &unk_24CEFD320;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 10);
  JUMPOUT(0x2199A8A18);
}

const void **info::ASIFInfo::serialize_to_dict@<X0>(info::ASIFInfo *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  uint64_t v6;
  uint64_t i;
  const void *v8;
  const void *v10;
  uint64_t valuePtr;
  uint64_t **v12;
  uint64_t v13;
  const __CFString *v14;
  CFNumberRef v15;
  const __CFString *v16;
  CFNumberRef v17;
  const __CFString *v18;
  CFNumberRef v19;
  const __CFString *v20;
  CFNumberRef v21;
  const __CFString *v22;
  CFNumberRef v23;
  const __CFString *v24;
  CFNumberRef v25;
  const __CFString *v26;
  CFNumberRef v27;
  const __CFString *v28;
  CFNumberRef v29;
  uint64_t *v30;
  const void *v31[2];

  v31[1] = *(const void **)MEMORY[0x24BDAC8D0];
  valuePtr = *((_QWORD *)this + 1);
  v12 = (uint64_t **)CFSTR("Dir Pointer Version");
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v13 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
  v14 = CFSTR("Num Tables");
  valuePtr = *((_QWORD *)this + 2);
  v15 = 0;
  v15 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v16 = CFSTR("Chunk Size");
  valuePtr = *((_QWORD *)this + 3);
  v17 = 0;
  v17 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v18 = CFSTR("Uninitialized Entries");
  valuePtr = *((_QWORD *)this + 4);
  v19 = 0;
  v19 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v20 = CFSTR("Full Entries");
  valuePtr = *((_QWORD *)this + 5);
  v21 = 0;
  v21 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v22 = CFSTR("Unmapped Entries");
  valuePtr = *((_QWORD *)this + 6);
  v23 = 0;
  v23 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v24 = CFSTR("Bitmapped Entries");
  valuePtr = *((_QWORD *)this + 7);
  v25 = 0;
  v25 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v26 = CFSTR("Max Sector Count");
  valuePtr = *((_QWORD *)this + 8);
  v27 = 0;
  v5 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v6 = *((unsigned __int8 *)this + 72);
  v27 = v5;
  v28 = CFSTR("Is Cache");
  valuePtr = v6;
  v29 = 0;
  v29 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v30 = (uint64_t *)&v12;
  v31[0] = (const void *)9;
  cf::create_dict_from_list((uint64_t *)&v30, (CFMutableDictionaryRef *)&v10);
  for (i = 17; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v12)[i]);
  v8 = (const void *)*((_QWORD *)this + 10);
  if (v8)
  {
    v30 = (uint64_t *)CFSTR("Mapped Sectors");
    v31[0] = v8;
    CFRetain(v8);
    v12 = &v30;
    v13 = 1;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v12);
    CFAutoRelease<void const*>::~CFAutoRelease(v31);
  }
  *a2 = v10;
  v10 = 0;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
}

void sub_212F376D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  CFAutoRelease<void const*>::~CFAutoRelease(v2);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void sub_212F37754()
{
  JUMPOUT(0x212F3774CLL);
}

const __CFString *info::ASIFInfo::get_category(info::ASIFInfo *this)
{
  return CFSTR("ASIF Info");
}

void `virtual thunk to'info::ASIFInfo::~ASIFInfo(info::ASIFInfo *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_24CEFD2C8;
  *((_QWORD *)v1 + 11) = &unk_24CEFD320;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_24CEFD2C8;
  *((_QWORD *)v1 + 11) = &unk_24CEFD320;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x2199A8A18);
}

char *`virtual thunk to'info::details::InfoTrait<info::ASIFInfo>::get(_QWORD *a1)
{
  return (char *)a1 + *(_QWORD *)(*a1 - 32);
}

{
  return (char *)a1 + *(_QWORD *)(*a1 - 40);
}

void info::DiskImageInfoASIF::~DiskImageInfoASIF(info::DiskImageInfoASIF *this)
{
  *((_QWORD *)this + 27) = &off_24CEFCE20;
  *((_QWORD *)this + 9) = &off_24CEFCE78;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 37);
  *((_QWORD *)this + 23) = &off_24CEFCCD8;
  *((_QWORD *)this + 10) = &off_24CEFCD30;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 24);
  *((_QWORD *)this + 19) = &off_24CEFCB90;
  *((_QWORD *)this + 7) = &off_24CEFCBE8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
}

{
  *((_QWORD *)this + 27) = &off_24CEFCE20;
  *((_QWORD *)this + 9) = &off_24CEFCE78;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 37);
  *((_QWORD *)this + 23) = &off_24CEFCCD8;
  *((_QWORD *)this + 10) = &off_24CEFCD30;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 24);
  *((_QWORD *)this + 19) = &off_24CEFCB90;
  *((_QWORD *)this + 7) = &off_24CEFCBE8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  JUMPOUT(0x2199A8A18);
}

const void **info::DiskImageInfoASIF::serialize_to_dict@<X0>(info::DiskImageInfoASIF *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[13];

  v10[12] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(info::DiskImageInfoASIF *))(*(_QWORD *)this + 24))(this);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("Apple sparse image");
  info::SizeInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)), &v9);
  v10[4] = CFSTR("Size Info");
  v10[5] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120)), &v9);
  v10[6] = CFSTR("Encryption Info");
  v10[7] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::ASIFInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), &v9);
  v10[8] = CFSTR("ASIF Info");
  v10[9] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::IdentityInfo::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128)), &v9);
  v10[10] = CFSTR("Identity Info");
  v10[11] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 6;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (i = 11; i != -1; i -= 2)
    result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_212F37AD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 88; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoASIF::get_category(info::DiskImageInfoASIF *this)
{
  return CFSTR("ASIF");
}

void `virtual thunk to'info::DiskImageInfoASIF::~DiskImageInfoASIF(info::DiskImageInfoASIF *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 27) = &off_24CEFCE20;
  *((_QWORD *)v1 + 9) = &off_24CEFCE78;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = &off_24CEFCCD8;
  *((_QWORD *)v1 + 10) = &off_24CEFCD30;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = &off_24CEFCB90;
  *((_QWORD *)v1 + 7) = &off_24CEFCBE8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 27) = &off_24CEFCE20;
  *((_QWORD *)v1 + 9) = &off_24CEFCE78;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = &off_24CEFCCD8;
  *((_QWORD *)v1 + 10) = &off_24CEFCD30;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = &off_24CEFCB90;
  *((_QWORD *)v1 + 7) = &off_24CEFCBE8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x2199A8A18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 27) = &off_24CEFCE20;
  *((_QWORD *)v1 + 9) = &off_24CEFCE78;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = &off_24CEFCCD8;
  *((_QWORD *)v1 + 10) = &off_24CEFCD30;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = &off_24CEFCB90;
  *((_QWORD *)v1 + 7) = &off_24CEFCBE8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 27) = &off_24CEFCE20;
  *((_QWORD *)v1 + 9) = &off_24CEFCE78;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((_QWORD *)v1 + 23) = &off_24CEFCCD8;
  *((_QWORD *)v1 + 10) = &off_24CEFCD30;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((_QWORD *)v1 + 19) = &off_24CEFCB90;
  *((_QWORD *)v1 + 7) = &off_24CEFCBE8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  JUMPOUT(0x2199A8A18);
}

const void **`virtual thunk to'info::DiskImageInfoASIF::serialize_to_dict@<X0>(info::DiskImageInfoASIF *this@<X0>, _QWORD *a2@<X8>)
{
  return info::DiskImageInfoASIF::serialize_to_dict((info::DiskImageInfoASIF *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

const __CFString *`virtual thunk to'info::DiskImageInfoASIF::get_category(info::DiskImageInfoASIF *this)
{
  return CFSTR("ASIF");
}

uint64_t di_asif::header::get_dir_offset(di_asif::header *this, uint64_t a2)
{
  DiskImagesRuntimeException *exception;
  void *v4;

  if (a2 == 1)
    return (uint64_t)this + 24;
  if (a2)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: invalid dir index to header", 0x16u);
  }
  return (uint64_t)this + 16;
}

unint64_t *ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(unint64_t *a1)
{
  unint64_t *result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  do
    result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      v5 = result[4];
      result[4] = -1;
      return (unint64_t *)ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)result, v5, 1u);
    }
  }
  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3;
  unsigned int v6;
  int v7;
  __int128 v9;
  int v10;
  _QWORD v11[45];
  uint64_t v12;
  uint64_t v13;

  v3 = a3;
  if (*(_BYTE *)(a1 + 520) || (v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2))
  {
    v7 = (a3 >> 1) & 2;
    goto LABEL_9;
  }
  v7 = (a3 >> 1) & 2;
  if (!ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::close<di_asif::details::table,int>(a1))
  {
LABEL_9:
    atomic_store(0, (unsigned int *)(a1 + 24));
    std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 408, a1, a2, v7);
    MEMORY[0x2199A88E0](a1 + 24);
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(_QWORD *)&v9 = "ref::details::ctrl_blk<di_asif::details::table, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::table, tag_t = unsigned long long]";
    *((_QWORD *)&v9 + 1) = 78;
    v10 = 16;
    di_log::logger<di_log::log_printer<210ul>>::logger(v11, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v11);
    MEMORY[0x2199A89AC](&v13);
    goto LABEL_9;
  }
  if ((v3 & 1) != 0)
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 408, a1, a2, v7 | 1);
  return 0;
}

void sub_212F37FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<210ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::close<di_asif::details::table,int>(uint64_t a1)
{
  di_asif::details::table *v1;
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 400))
    return 0;
  v1 = (di_asif::details::table *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 496);
  if (v2)
    return (*(uint64_t (**)(uint64_t, di_asif::details::table *))(*(_QWORD *)v2 + 48))(v2, v1);
  else
    return di_asif::details::table::close(v1);
}

_QWORD *di_log::logger<di_log::log_printer<210ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<210ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFD060;
  a1[45] = &unk_24CEFD160;
  a1[46] = &unk_24CEFD188;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFD060;
  a1[45] = &unk_24CEFD0E8;
  a1[46] = &unk_24CEFD110;
  return a1;
}

void sub_212F380A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = a4;
  v6 = a3;
  v7 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(_QWORD *)v4 + 48))(v4, &v7, &v6, &v8);
}

uint64_t *std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  void *v2;

  if (*((_BYTE *)result + 360))
  {
    v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 35));
    std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v1 + 29);
    std::mutex::~mutex((std::mutex *)(v1 + 21));
    std::mutex::~mutex((std::mutex *)(v1 + 13));
    v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = (uint64_t)v2;
      operator delete(v2);
    }
    result = std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100](v1 + 2);
    *((_BYTE *)v1 + 360) = 0;
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFD1F8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F38214(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFD1F8;
  di_log::logger_buf<di_log::log_printer<210ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<210ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<210ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F38608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<210ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 210;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 210;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t *std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

unint64_t *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(unint64_t *a1)
{
  unint64_t *result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  do
    result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      v5 = result[4];
      result[4] = -1;
      return (unint64_t *)ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)result, v5, 1u);
    }
  }
  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3;
  unsigned int v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  int v11;
  _QWORD v12[45];
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  if (*(_BYTE *)(a1 + 344)
    || (v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(_BYTE *)(a1 + 224)
    || (v7 = *(_QWORD *)(a1 + 320)) == 0)
  {
    v8 = (a3 >> 1) & 2;
    goto LABEL_11;
  }
  v8 = (a3 >> 1) & 2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1 + 40))
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 232, a1, a2, v8);
    MEMORY[0x2199A88E0](a1 + 24);
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(_QWORD *)&v10 = "ref::details::ctrl_blk<di_asif::details::map_element, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::map_element, tag_t = unsigned long long]";
    *((_QWORD *)&v10 + 1) = 84;
    v11 = 16;
    di_log::logger<di_log::log_printer<210ul>>::logger(v12, &v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v12);
    MEMORY[0x2199A89AC](&v14);
    goto LABEL_11;
  }
  if ((v3 & 1) != 0)
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 232, a1, a2, v8 | 1);
  return 0;
}

void sub_212F38A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<210ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;

  if (*((_BYTE *)result + 184))
  {
    v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 15));
    v1[4] = (uint64_t)&off_24CEFD278;
    result = std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100](v1 + 7);
    *((_BYTE *)v1 + 184) = 0;
  }
  return result;
}

void lock_free::bitmap_dynamically_allocated_t::~bitmap_dynamically_allocated_t(lock_free::bitmap_dynamically_allocated_t *this)
{
  *(_QWORD *)this = &off_24CEFD278;
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 3);
}

{
  *(_QWORD *)this = &off_24CEFD278;
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 3);
  JUMPOUT(0x2199A8A18);
}

uint64_t *std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

DiskImageInfo *info::DiskImageInfoLocked::DiskImageInfoLocked(DiskImageInfo *a1, crypto::header **a2)
{
  *((_BYTE *)a1 + 64) = 0;
  *((_BYTE *)a1 + 72) = 0;
  *((_QWORD *)a1 + 10) = 0;
  *(_QWORD *)a1 = &off_24CEFD3B0;
  *((_QWORD *)a1 + 1) = &unk_24CEFD3F8;
  *((_QWORD *)a1 + 2) = &unk_24CEFD440;
  *((_QWORD *)a1 + 3) = &unk_24CEFD488;
  *((_QWORD *)a1 + 4) = &unk_24CEFD4D0;
  *((_QWORD *)a1 + 5) = &unk_24CEFD518;
  *((_QWORD *)a1 + 6) = &unk_24CEFD560;
  *((_QWORD *)a1 + 7) = &unk_24CEFD5C0;
  crypto::header::populate_crypto_header_info(*a2, a1);
  return a1;
}

void sub_212F38C80(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  *(_QWORD *)(v1 + 56) = &off_24CEFD630;
  *(_QWORD *)(v1 + 24) = &unk_24CEFD688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoLocked::~DiskImageInfoLocked(info::DiskImageInfoLocked *this)
{
  *((_QWORD *)this + 7) = &off_24CEFD630;
  *((_QWORD *)this + 3) = &unk_24CEFD688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 10);
}

{
  *((_QWORD *)this + 7) = &off_24CEFD630;
  *((_QWORD *)this + 3) = &unk_24CEFD688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 10);
  JUMPOUT(0x2199A8A18);
}

const void **info::DiskImageInfoLocked::serialize_to_dict@<X0>(info::DiskImageInfoLocked *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  const void **result;
  uint64_t v7[2];
  const void *v8;
  const void *v9;
  _QWORD v10[7];

  v10[6] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(info::DiskImageInfoLocked *))(*(_QWORD *)this + 24))(this);
  v10[0] = CFSTR("Image Format");
  v10[1] = v4;
  v10[2] = CFSTR("Format Description");
  v10[3] = CFSTR("Locked encrypted image");
  info::EncryptionInfo::serialize_to_dict((info::DiskImageInfoLocked *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)), &v9);
  v10[4] = CFSTR("Encryption Info");
  v10[5] = v9;
  v9 = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  v8 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (i = 5; i != -1; i -= 2)
    result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_212F38E2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 40; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoLocked::get_category(info::DiskImageInfoLocked *this)
{
  return CFSTR("Unknown");
}

void `virtual thunk to'info::DiskImageInfoLocked::~DiskImageInfoLocked(info::DiskImageInfoLocked *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 7) = &off_24CEFD630;
  *((_QWORD *)v1 + 3) = &unk_24CEFD688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 7) = &off_24CEFD630;
  *((_QWORD *)v1 + 3) = &unk_24CEFD688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x2199A8A18);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 7) = &off_24CEFD630;
  *((_QWORD *)v1 + 3) = &unk_24CEFD688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  *((_QWORD *)v1 + 7) = &off_24CEFD630;
  *((_QWORD *)v1 + 3) = &unk_24CEFD688;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  JUMPOUT(0x2199A8A18);
}

const void **`virtual thunk to'info::DiskImageInfoLocked::serialize_to_dict@<X0>(info::DiskImageInfoLocked *this@<X0>, _QWORD *a2@<X8>)
{
  return info::DiskImageInfoLocked::serialize_to_dict((info::DiskImageInfoLocked *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

const __CFString *`virtual thunk to'info::DiskImageInfoLocked::get_category(info::DiskImageInfoLocked *this)
{
  return CFSTR("Unknown");
}

DiskImageSparseBundle *DiskImageSparseBundle::DiskImageSparseBundle(DiskImageSparseBundle *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  SparseBundleBackend **v10;
  system_properties *v11;
  unsigned int logical_cpus;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  __int128 v27;
  int v28;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *((_BYTE *)a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24CEFD6F0;
  v6 = (char *)a1 + 24;
  sparse_bundles::bundle_commons_t::bundle_commons_t((DiskImageSparseBundle *)((char *)a1 + 24), a1);
  *((_QWORD *)a1 + 70) = *a2;
  v7 = a2[1];
  *((_QWORD *)a1 + 71) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (SparseBundleBackend **)((char *)a1 + 560);
  *((_QWORD *)a1 + 72) = 850045863;
  *((_QWORD *)a1 + 79) = 0;
  *(_OWORD *)((char *)a1 + 584) = 0u;
  *(_OWORD *)((char *)a1 + 600) = 0u;
  *(_OWORD *)((char *)a1 + 616) = 0u;
  v11 = (system_properties *)std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.diskimages.band_unmap");
  logical_cpus = system_properties::get_logical_cpus(v11);
  workqueue::workqueue::workqueue((char *)a1 + 640, __p, logical_cpus);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  DiskImageSparseBundle::init_bands_array_size(a1);
  *((_QWORD *)a1 + 8) = *(_QWORD *)(*((_QWORD *)a1 + 70) + 128);
  *((_QWORD *)a1 + 9) = a3;
  std::vector<sparse_bundles::band_ptr>::reserve((uint64_t *)a1 + 89, *((_QWORD *)a1 + 2));
  if (*((_QWORD *)a1 + 2))
  {
    v13 = 0;
    do
    {
      v14 = (_QWORD *)operator new();
      *v14 = 1;
      v14[1] = v6;
      v14[2] = 0;
      v14[3] = v13;
      v14[4] = 1;
      __p[0] = v14;
      __p[1] = 0;
      v30 = -1;
      v15 = *((_QWORD *)a1 + 90);
      if (v15 >= *((_QWORD *)a1 + 91))
      {
        v16 = std::vector<sparse_bundles::band_ptr>::__emplace_back_slow_path<sparse_bundles::band_ptr>((uint64_t *)a1 + 89, (uint64_t)__p);
      }
      else
      {
        sparse_bundles::band_ptr::band_ptr(*((_QWORD *)a1 + 90), (uint64_t)__p);
        v16 = v15 + 24;
        *((_QWORD *)a1 + 90) = v15 + 24;
      }
      *((_QWORD *)a1 + 90) = v16;
      sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)__p);
      ++v13;
    }
    while (v13 < *((_QWORD *)a1 + 2));
  }
  *(_QWORD *)&v27 = "DiskImageSparseBundle::DiskImageSparseBundle(const shared_ptr<SparseBundleBackend> &, size_t)";
  *((_QWORD *)&v27 + 1) = 44;
  v28 = 0;
  di_log::logger<di_log::log_printer<46ul>>::logger(__p, &v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Initialized bands array of size ", 32);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf((uint64_t)__p);
  MEMORY[0x2199A89AC](&v32);
  SparseBundleBackend::open_bands_folder(*v10, (uint64_t *)__p);
  v17 = __p[0];
  __p[0] = 0;
  v18 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    v19 = __p[0];
    __p[0] = 0;
    if (v19)
      (*(void (**)(void *))(*(_QWORD *)v19 + 16))(v19);
  }
  if ((*(unsigned int (**)(DiskImageSparseBundle *))(*(_QWORD *)a1 + 40))(a1))
  {
    SparseBundleBackend::open_mapped_folder(*v10, (uint64_t *)__p);
    v20 = __p[0];
    __p[0] = 0;
    v21 = *((_QWORD *)a1 + 5);
    *((_QWORD *)a1 + 5) = v20;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
      v22 = __p[0];
      __p[0] = 0;
      if (v22)
        (*(void (**)(void *))(*(_QWORD *)v22 + 16))(v22);
    }
    SparseBundleBackend::get_existing_bands(*v10, __p);
    v23 = __p[0];
    __p[0] = 0;
    v24 = *((_QWORD *)a1 + 43);
    *((_QWORD *)a1 + 43) = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v25 = __p[0];
      __p[0] = 0;
      if (v25)
        (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  return a1;
}

void sub_212F39294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sparse_bundles::bundle_commons_t *v18;
  uint64_t v19;
  std::mutex *v20;
  void **v21;

  std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  workqueue::workqueue::~workqueue(v21);
  std::mutex::~mutex(v20);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v19);
  sparse_bundles::bundle_commons_t::~bundle_commons_t(v18);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::init_bands_array_size(DiskImageSparseBundle *this)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  result = FileDescriptor::is_mounted_on_afp((FileDescriptor *)(*((_QWORD *)this + 70) + 24));
  if ((_DWORD)result)
  {
    *(_QWORD *)&v4 = "DiskImageSparseBundle::init_bands_array_size()";
    *((_QWORD *)&v4 + 1) = 44;
    v5 = 0;
    di_log::logger<di_log::log_printer<59ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Mounted on AFP, max open bands is set to ", 41);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf((uint64_t)v6);
    result = MEMORY[0x2199A89AC](&v8);
    v3 = 3;
  }
  else
  {
    v3 = 64;
  }
  *((_QWORD *)this + 2) = v3;
  return result;
}

void sub_212F393E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<59ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<sparse_bundles::band_ptr>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_212F39498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<46ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<46ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFD898;
  a1[45] = &unk_24CEFD998;
  a1[46] = &unk_24CEFD9C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFD898;
  a1[45] = &unk_24CEFD920;
  a1[46] = &unk_24CEFD948;
  return a1;
}

void sub_212F39530(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void workqueue::workqueue::~workqueue(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

BOOL FileDescriptor::is_mounted_on_afp(FileDescriptor *this)
{
  unint64_t v1;
  void **v2;
  int v3;
  int v4;
  _BOOL8 v6;
  void *__p[2];
  unsigned __int8 v9;

  FileDescriptor::get_mounted_on_fs((uint64_t *)__p, this);
  v1 = v9;
  if ((v9 & 0x80u) != 0)
    v1 = (unint64_t)__p[1];
  if (v1 == 5)
  {
    v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v2 = __p;
    v3 = *(_DWORD *)v2;
    v4 = *((unsigned __int8 *)v2 + 4);
    v6 = v3 == 1718642273 && v4 == 115;
    if ((char)v9 < 0)
      goto LABEL_15;
  }
  else
  {
    v6 = 0;
    if ((char)v9 < 0)
LABEL_15:
      operator delete(__p[0]);
  }
  return v6;
}

_QWORD *di_log::logger<di_log::log_printer<59ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<59ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFDAB8;
  a1[45] = &unk_24CEFDBB8;
  a1[46] = &unk_24CEFDBE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFDAB8;
  a1[45] = &unk_24CEFDB40;
  a1[46] = &unk_24CEFDB68;
  return a1;
}

void sub_212F396F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImageSparseBundle::flush_open_bands(DiskImageSparseBundle *this)
{
  const sparse_bundles::band_ptr *v2;
  const sparse_bundles::band_ptr *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  _QWORD v8[4];
  _BYTE v9[8];
  uint64_t v10;
  unsigned int v11;
  dispatch_group_t v12[19];

  v12[18] = *(dispatch_group_t *)MEMORY[0x24BDAC8D0];
  v11 = 0;
  workqueue::workqueue::create_transaction((DiskImageSparseBundle *)((char *)this + 352), 0, (uint64_t)v12);
  v2 = (const sparse_bundles::band_ptr *)*((_QWORD *)this + 89);
  v3 = (const sparse_bundles::band_ptr *)*((_QWORD *)this + 90);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = MEMORY[0x24BDAC760];
    do
    {
      sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)v9, v2);
      if (v10 && (*(_BYTE *)(v10 + 68) & 1) != 0)
      {
        v7[0] = v5;
        v7[1] = 1174405120;
        v7[2] = ___ZN21DiskImageSparseBundle16flush_open_bandsEv_block_invoke;
        v7[3] = &__block_descriptor_tmp_3;
        sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)v8, (const sparse_bundles::band_ptr *)v9);
        v8[3] = &v11;
        workqueue::transaction::add(v12, v7);
        ++v4;
        sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v8);
      }
      sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v9);
      v2 = (const sparse_bundles::band_ptr *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
  workqueue::transaction::~transaction((workqueue::transaction *)v12);
  return atomic_load(&v11);
}

void sub_212F398A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21DiskImageSparseBundle16flush_open_bandsEv_block_invoke(uint64_t a1)
{
  uint64_t result;
  __int128 v3;
  int v4;
  _QWORD v5[45];
  uint64_t v6;
  uint64_t v7;

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v3 = "size_t> DiskImageSparseBundle::flush_open_bands()_block_invoke";
    *((_QWORD *)&v3 + 1) = 47;
    v4 = 2;
    di_log::logger<di_log::log_printer<80ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Flushing ", 9);
    sparse_bundles::operator<<(&v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x2199A89AC](&v7);
  }
  result = sparse_bundles::Band::flush(*(sparse_bundles::Band **)(a1 + 40));
  if ((_DWORD)result)
    atomic_store(result, *(unsigned int **)(a1 + 56));
  return result;
}

void sub_212F3996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<80ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<80ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<80ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFDCD8;
  a1[45] = &unk_24CEFDDD8;
  a1[46] = &unk_24CEFDE00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFDCD8;
  a1[45] = &unk_24CEFDD60;
  a1[46] = &unk_24CEFDD88;
  return a1;
}

void sub_212F39A04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t __copy_helper_block_e8_32c31_ZTSN14sparse_bundles8band_ptrE(uint64_t a1, uint64_t a2)
{
  return sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)(a1 + 32), (const sparse_bundles::band_ptr *)(a2 + 32));
}

void __destroy_helper_block_e8_32c31_ZTSN14sparse_bundles8band_ptrE(uint64_t a1)
{
  sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)(a1 + 32));
}

uint64_t DiskImageSparseBundle::flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v7;
  int v8;
  _QWORD v9[45];
  uint64_t v10;
  _BYTE v11[152];

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((_QWORD *)&v7 + 1) = 32;
    v8 = 2;
    di_log::logger<di_log::log_printer<101ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Starting flush", 14);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x2199A89AC](v11);
  }
  std::mutex::lock((std::mutex *)(a1 + 576));
  sparse_bundles::eviction_t::start_flush(a1 + 80);
  v5 = DiskImageSparseBundle::flush_open_bands((DiskImageSparseBundle *)a1);
  sparse_bundles::eviction_t::complete_flush((sparse_bundles::eviction_t *)(a1 + 80));
  if ((_DWORD)v5)
  {
    *(_QWORD *)&v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((_QWORD *)&v7 + 1) = 32;
    v8 = 16;
    di_log::logger<di_log::log_printer<107ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Flush failed - returning ", 25);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x2199A89AC](v11);
  }
  else
  {
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
      *((_QWORD *)&v7 + 1) = 32;
      v8 = 2;
      di_log::logger<di_log::log_printer<111ul>>::logger(v9, &v7);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)" bands flushed, calling ", 24);
      operator<<(&v10, a3);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x2199A89AC](v11);
    }
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 16))(*(_QWORD *)(a1 + 560), a3);
  }
  std::mutex::unlock((std::mutex *)(a1 + 576));
  return v5;
}

void sub_212F39C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex *v12;

  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<101ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<101ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFDEF8;
  a1[45] = &unk_24CEFDFF8;
  a1[46] = &unk_24CEFE020;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFDEF8;
  a1[45] = &unk_24CEFDF80;
  a1[46] = &unk_24CEFDFA8;
  return a1;
}

void sub_212F39D38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<107ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<107ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFE118;
  a1[45] = &unk_24CEFE218;
  a1[46] = &unk_24CEFE240;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFE118;
  a1[45] = &unk_24CEFE1A0;
  a1[46] = &unk_24CEFE1C8;
  return a1;
}

void sub_212F39E20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<111ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<111ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFE338;
  a1[45] = &unk_24CEFE438;
  a1[46] = &unk_24CEFE460;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFE338;
  a1[45] = &unk_24CEFE3C0;
  a1[46] = &unk_24CEFE3E8;
  return a1;
}

void sub_212F39F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void DiskImageSparseBundle::get_band(uint64_t **this@<X0>, unint64_t a2@<X1>, int a3@<W2>, sparse_bundles::band_ptr *a4@<X8>)
{
  int v8;
  int v9;
  _BYTE v10[8];
  uint64_t v11;

  if (((unsigned int (*)(uint64_t **))(*this)[5])(this))
    v8 = 2;
  else
    v8 = 0;
  if (a3)
    v9 = v8 | 0x200;
  else
    v9 = v8;
  DiskImageSparseBundle::find_band_in_array((DiskImageSparseBundle *)this, a2, (sparse_bundles::band_ptr *)v10);
  if (v11)
  {
LABEL_10:
    sparse_bundles::band_ptr::band_ptr((uint64_t)a4, (uint64_t)v10);
  }
  else
  {
    while (!sparse_bundles::open_bands_t::insert(this + 26, a2))
    {
      sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
      DiskImageSparseBundle::find_band_in_array((DiskImageSparseBundle *)this, a2, (sparse_bundles::band_ptr *)v10);
      if (v11)
        goto LABEL_10;
    }
    DiskImageSparseBundle::open_band((DiskImageSparseBundle *)this, a2, v9, a4);
  }
  sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
}

_QWORD *DiskImageSparseBundle::find_band_in_array@<X0>(DiskImageSparseBundle *this@<X0>, uint64_t a2@<X1>, sparse_bundles::band_ptr *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  const sparse_bundles::band_ptr *v8;
  uint64_t v9;
  _QWORD *result;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  _BYTE v15[152];

  v5 = *((_QWORD *)this + 2);
  if (!v5)
  {
LABEL_14:
    result = (_QWORD *)operator new();
    *result = 1;
    result[1] = (char *)this + 24;
    result[3] = 0;
    result[4] = 0;
    result[2] = 0;
    *(_QWORD *)a3 = result;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = -1;
    return result;
  }
  v7 = 0;
  v8 = (const sparse_bundles::band_ptr *)*((_QWORD *)this + 89);
  while (*((_QWORD *)v8 + 2) != a2)
  {
    ++v7;
    v8 = (const sparse_bundles::band_ptr *)((char *)v8 + 24);
    if (v5 == v7)
      goto LABEL_14;
  }
  sparse_bundles::band_ptr::band_ptr(a3, v8);
  v9 = *((_QWORD *)a3 + 1);
  if (!v9 || *(_QWORD *)(v9 + 32) != a2)
  {
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v11 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
      *((_QWORD *)&v11 + 1) = 41;
      v12 = 2;
      di_log::logger<di_log::log_printer<194ul>>::logger(v13, &v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Band ", 5);
      *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] = *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] = *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" changed before retain completed", 32);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf((uint64_t)v13);
      MEMORY[0x2199A89AC](v15);
    }
    sparse_bundles::band_ptr::~band_ptr(a3);
    goto LABEL_14;
  }
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v11 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
    *((_QWORD *)&v11 + 1) = 41;
    v12 = 2;
    di_log::logger<di_log::log_printer<190ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Found ", 6);
    sparse_bundles::operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" at index ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x2199A89AC](v15);
  }
  result = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)(*(_QWORD *)a3 + 16) = result;
  return result;
}

void DiskImageSparseBundle::open_band(DiskImageSparseBundle *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, sparse_bundles::band_ptr *a4@<X8>)
{
  uint64_t v8;
  _QWORD v9[7];
  int v10;
  __int128 v11;
  int v12;
  _QWORD v13[45];
  uint64_t v14;
  _BYTE v15[152];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((_QWORD *)&v11 + 1) = 32;
    v12 = 2;
    di_log::logger<di_log::log_printer<154ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Opening band ", 13);
    *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] = *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] = *(_DWORD *)&v15[*(_QWORD *)(v14 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x2199A89AC](v15);
  }
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = ___ZN21DiskImageSparseBundle9open_bandEyi_block_invoke;
  v9[3] = &unk_24CEFD7E8;
  v9[4] = &v16;
  v9[5] = this;
  v9[6] = a2;
  v10 = a3;
  sparse_bundles::bundle_commons_t::run_in_high_tier((uint64_t)this + 24, (uint64_t)v9);
  DiskImageSparseBundle::replace_oldest_band(this, (sparse_bundles::Band *)v17[3], a4);
  if (!*((_QWORD *)a4 + 1))
  {
    v8 = 0;
    do
    {
      if (!v8 && DIDebugLogsEnabled())
      {
        *(_QWORD *)&v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
        *((_QWORD *)&v11 + 1) = 32;
        v12 = 2;
        di_log::logger<di_log::log_printer<172ul>>::logger(v13, &v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Failed to evict band to make room for ", 38);
        sparse_bundles::operator<<(&v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)", retrying", 10);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf((uint64_t)v13);
        MEMORY[0x2199A89AC](v15);
      }
      usleep(0x3E8u);
      sparse_bundles::band_ptr::~band_ptr(a4);
      ++v8;
      DiskImageSparseBundle::replace_oldest_band(this, (sparse_bundles::Band *)v17[3], a4);
    }
    while (!*((_QWORD *)a4 + 1));
  }
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((_QWORD *)&v11 + 1) = 32;
    v12 = 2;
    di_log::logger<di_log::log_printer<165ul>>::logger(v13, &v11);
    sparse_bundles::operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" opened and replaced at attempt ", 32);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x2199A89AC](v15);
  }
  _Block_object_dispose(&v16, 8);
}

void sub_212F3A628(_Unwind_Exception *a1)
{
  sparse_bundles::band_ptr *v1;
  uint64_t v2;

  sparse_bundles::band_ptr::~band_ptr(v1);
  _Block_object_dispose((const void *)(v2 - 120), 8);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<154ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<154ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFE558;
  a1[45] = &unk_24CEFE658;
  a1[46] = &unk_24CEFE680;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFE558;
  a1[45] = &unk_24CEFE5E0;
  a1[46] = &unk_24CEFE608;
  return a1;
}

void sub_212F3A714(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t ___ZN21DiskImageSparseBundle9open_bandEyi_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = sparse_bundles::Band::new_band(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40) + 24, *(_DWORD *)(a1 + 56), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 560) + 96));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void DiskImageSparseBundle::replace_oldest_band(DiskImageSparseBundle *this@<X0>, sparse_bundles::Band *a2@<X1>, sparse_bundles::band_ptr *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  int v18;
  _OWORD v19[17];
  uint64_t v20;
  _BYTE v21[152];
  void *__p;
  __int128 v23;
  _QWORD v24[130];

  v24[128] = *MEMORY[0x24BDAC8D0];
  v6 = v24;
  __p = v24;
  v23 = xmmword_212FEF9D0;
  if (*((_QWORD *)this + 2))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = atomic_load(*(unint64_t **)(*((_QWORD *)this + 89) + v7));
      if (v9 == 1)
      {
        *(_QWORD *)&v19[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 89) + v7) + 16);
        *((_QWORD *)&v19[0] + 1) = v8;
        v10 = (char *)__p + 16 * v23;
        if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
        {
          boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(&__p, v10, (const char *)1, v19, &v17);
        }
        else
        {
          *(_OWORD *)v10 = v19[0];
          *(_QWORD *)&v23 = v23 + 1;
        }
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < *((_QWORD *)this + 2));
    v6 = __p;
    v11 = (uint64_t *)((char *)__p + 16 * v23);
    if ((_QWORD)v23)
    {
      v12 = 126 - 2 * __clz(v23);
      goto LABEL_13;
    }
  }
  else
  {
    v11 = v24;
  }
  v12 = 0;
LABEL_13:
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>((uint64_t)v6, v11, (uint64_t)v19, v12, 1);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((_QWORD *)&v17 + 1) = 42;
    v18 = 2;
    di_log::logger<di_log::log_printer<213ul>>::logger(v19, &v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Looking for an evictable slot for ", 34);
    sparse_bundles::operator<<(&v20);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x2199A89AC](v21);
  }
  if ((_QWORD)v23)
  {
    v13 = (uint64_t *)((char *)__p + 8);
    v14 = 16 * v23;
    while (1)
    {
      v15 = *v13;
      v13 += 2;
      sparse_bundles::band_ptr::replace_if_evictable((unint64_t **)(*((_QWORD *)this + 89) + 24 * v15), a2, a3);
      if (*((_QWORD *)a3 + 1))
        break;
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
        *((_QWORD *)&v17 + 1) = 42;
        v18 = 2;
        di_log::logger<di_log::log_printer<222ul>>::logger(v19, &v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Failed placing new ", 19);
        sparse_bundles::operator<<(&v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)" at index ", 10);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf((uint64_t)v19);
        MEMORY[0x2199A89AC](v21);
      }
      sparse_bundles::band_ptr::~band_ptr(a3);
      v14 -= 16;
      if (!v14)
        goto LABEL_21;
    }
    if (DIDebugLogsEnabled())
    {
      *(_QWORD *)&v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
      *((_QWORD *)&v17 + 1) = 42;
      v18 = 2;
      di_log::logger<di_log::log_printer<218ul>>::logger(v19, &v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Placed new ", 11);
      sparse_bundles::operator<<(&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)" at index ", 10);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf((uint64_t)v19);
      MEMORY[0x2199A89AC](v21);
    }
    sparse_bundles::open_bands_t::mark_as_placed((DiskImageSparseBundle *)((char *)this + 208), *((_QWORD *)a2 + 4));
  }
  else
  {
LABEL_21:
    v16 = (_QWORD *)operator new();
    *v16 = 1;
    v16[1] = (char *)this + 24;
    v16[3] = 0;
    v16[4] = 0;
    v16[2] = 0;
    *(_QWORD *)a3 = v16;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = -1;
  }
  if (*((_QWORD *)&v23 + 1))
  {
    if (v24 != __p)
      operator delete(__p);
  }
}

void sub_212F3AB6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<165ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<165ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFE778;
  a1[45] = &unk_24CEFE878;
  a1[46] = &unk_24CEFE8A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFE778;
  a1[45] = &unk_24CEFE800;
  a1[46] = &unk_24CEFE828;
  return a1;
}

void sub_212F3AC08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<172ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<172ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFE998;
  a1[45] = &unk_24CEFEA98;
  a1[46] = &unk_24CEFEAC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFE998;
  a1[45] = &unk_24CEFEA20;
  a1[46] = &unk_24CEFEA48;
  return a1;
}

void sub_212F3ACF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<190ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<190ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFEBB8;
  a1[45] = &unk_24CEFECB8;
  a1[46] = &unk_24CEFECE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFEBB8;
  a1[45] = &unk_24CEFEC40;
  a1[46] = &unk_24CEFEC68;
  return a1;
}

void sub_212F3ADD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<194ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<194ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFEDD8;
  a1[45] = &unk_24CEFEED8;
  a1[46] = &unk_24CEFEF00;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFEDD8;
  a1[45] = &unk_24CEFEE60;
  a1[46] = &unk_24CEFEE88;
  return a1;
}

void sub_212F3AEC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<213ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<213ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFEFF8;
  a1[45] = &unk_24CEFF0F8;
  a1[46] = &unk_24CEFF120;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFEFF8;
  a1[45] = &unk_24CEFF080;
  a1[46] = &unk_24CEFF0A8;
  return a1;
}

void sub_212F3AFA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<218ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<218ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFF218;
  a1[45] = &unk_24CEFF318;
  a1[46] = &unk_24CEFF340;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFF218;
  a1[45] = &unk_24CEFF2A0;
  a1[46] = &unk_24CEFF2C8;
  return a1;
}

void sub_212F3B090(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<222ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<222ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFF438;
  a1[45] = &unk_24CEFF538;
  a1[46] = &unk_24CEFF560;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFF438;
  a1[45] = &unk_24CEFF4C0;
  a1[46] = &unk_24CEFF4E8;
  return a1;
}

void sub_212F3B178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void DiskImageSparseBundle::~DiskImageSparseBundle(DiskImageSparseBundle *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];
  __int128 v7;
  int v8;
  void **v9[45];
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24CEFD6F0;
  *(_QWORD *)&v7 = "DiskImageSparseBundle::~DiskImageSparseBundle()";
  *((_QWORD *)&v7 + 1) = 45;
  v8 = 0;
  di_log::logger<di_log::log_printer<231ul>>::logger(v9, &v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Closing bands", 13);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf((uint64_t)v9);
  MEMORY[0x2199A89AC](&v11);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = 0;
    v4 = 8;
    v5 = MEMORY[0x24BDAC760];
    do
    {
      if (*(_QWORD *)(*((_QWORD *)this + 89) + v4))
      {
        v6[0] = v5;
        v6[1] = 0x40000000;
        v6[2] = ___ZN21DiskImageSparseBundleD2Ev_block_invoke;
        v6[3] = &__block_descriptor_tmp_32;
        v6[4] = this;
        v6[5] = v3;
        workqueue::transaction::add((dispatch_group_t *)this + 52, v6);
        v2 = *((_QWORD *)this + 2);
      }
      ++v3;
      v4 += 24;
    }
    while (v3 < v2);
  }
  workqueue::transaction::flush((dispatch_group_t *)this + 52, 0xFFFFFFFFFFFFFFFFLL);
  v9[0] = (void **)((char *)this + 712);
  std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100](v9);
  v9[0] = (void **)((char *)this + 664);
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](v9);
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  std::mutex::~mutex((std::mutex *)this + 9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  sparse_bundles::bundle_commons_t::~bundle_commons_t((DiskImageSparseBundle *)((char *)this + 24));
}

{
  DiskImageSparseBundle::~DiskImageSparseBundle(this);
  JUMPOUT(0x2199A8A18);
}

_QWORD *di_log::logger<di_log::log_printer<231ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<231ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFF658;
  a1[45] = &unk_24CEFF758;
  a1[46] = &unk_24CEFF780;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFF658;
  a1[45] = &unk_24CEFF6E0;
  a1[46] = &unk_24CEFF708;
  return a1;
}

void sub_212F3B3E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t ___ZN21DiskImageSparseBundleD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  __int128 v5;
  int v6;
  _QWORD v7[45];
  uint64_t v8;
  _BYTE v9[152];

  v2 = *(_QWORD *)(a1 + 32);
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v5 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((_QWORD *)&v5 + 1) = 45;
    v6 = 2;
    di_log::logger<di_log::log_printer<235ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Background close of band at index ", 34);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x2199A89AC](v9);
  }
  v3 = (_QWORD *)operator new();
  *v3 = 1;
  v3[1] = v2 + 24;
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = 0;
  v7[0] = v3;
  v7[1] = 0;
  v7[2] = -1;
  sparse_bundles::band_ptr::operator=((sparse_bundles::band_ptr *)(*(_QWORD *)(v2 + 712) + 24 * *(_QWORD *)(a1 + 40)), (sparse_bundles::band_ptr *)v7);
  sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v7);
  result = DIDebugLogsEnabled();
  if ((_DWORD)result)
  {
    *(_QWORD *)&v5 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((_QWORD *)&v5 + 1) = 45;
    v6 = 2;
    di_log::logger<di_log::log_printer<237ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Closed band at index ", 21);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf((uint64_t)v7);
    return MEMORY[0x2199A89AC](v9);
  }
  return result;
}

void sub_212F3B5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<237ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<235ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<235ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFF878;
  a1[45] = &unk_24CEFF978;
  a1[46] = &unk_24CEFF9A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFF878;
  a1[45] = &unk_24CEFF900;
  a1[46] = &unk_24CEFF928;
  return a1;
}

void sub_212F3B678(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<237ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<237ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFFA98;
  a1[45] = &unk_24CEFFB98;
  a1[46] = &unk_24CEFFBC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFFA98;
  a1[45] = &unk_24CEFFB20;
  a1[46] = &unk_24CEFFB48;
  return a1;
}

void sub_212F3B760(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImageSparseBundle::perform_io(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  sparse_bundles::Band *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  DiskImage::Context *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v70;
  char v73[8];
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  int v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  sparse_bundles::Band *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  size_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87[9];
  void *__p;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[72];
  std::__shared_weak_count *v92;
  uint64_t v93;
  _QWORD v94[7];
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;

  v7 = 0;
  v99 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 64);
  v10 = a4[2];
  v9 = a4[3];
  v11 = v9 / v8;
  v70 = v8;
  v12 = v9 % v8;
  while (v10)
  {
    if (v10 >= v70 - v12)
      v13 = v70 - v12;
    else
      v13 = v10;
    v14 = a4[4];
    v15 = (std::__shared_weak_count *)a4[1];
    v81 = *a4 + v7;
    v82 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v83 = v13;
    v84 = v12;
    v85 = v14 - v7;
    v86 = 0;
    DiskImageSparseBundle::get_band((uint64_t **)a1, v11, a3, (sparse_bundles::band_ptr *)&v79);
    v18 = v80;
    if (!v80)
    {
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v76 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
        *((_QWORD *)&v76 + 1) = 33;
        v77 = 2;
        di_log::logger<di_log::log_printer<284ul>>::logger(v87, &v76);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Band ", 5);
        *(_DWORD *)((char *)v94 + *(_QWORD *)(v93 - 24)) = *(_DWORD *)((_BYTE *)v94 + *(_QWORD *)(v93 - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)((char *)v94 + *(_QWORD *)(v93 - 24)) = *(_DWORD *)((_BYTE *)v94 + *(_QWORD *)(v93 - 24)) & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)" doesn't exist, returning zeros", 31);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf((uint64_t)v87);
        MEMORY[0x2199A89AC](v94);
      }
      bzero((void *)(*a4 + v7), v13);
      goto LABEL_96;
    }
    v19 = *(_QWORD *)(v79 + 24);
    v20 = 16 * v19;
    if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v19))
    {
      if (!sparse_bundles::Band::ContextBand::has_null_backend(*(sparse_bundles::Band::ContextBand **)(*(_QWORD *)(a2 + 16) + 16 * v19)))
        goto LABEL_18;
      v18 = v80;
    }
    sparse_bundles::Band::create_ctx(v18, v87);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](*(_QWORD *)(a2 + 16) + 16 * v19, v87);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v87[0] + 1);
    if (*((_QWORD *)&v87[0] + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v87[0] + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
LABEL_18:
    sg_vec_ns::make(&v81, (uint64_t *)v87);
    v24 = *(DiskImage::Context **)(*(_QWORD *)(a2 + 16) + v20);
    if (a3)
    {
      sg_vec_ref::begin((sg_vec_ref *)v91, (uint64_t)&v76);
      sg_vec_ref::end((sg_vec_ref *)v91, (uint64_t)v73);
      v4 = DiskImage::Context::write(v24, (const sg_vec_ns::details::sg_vec_iterator *)&v76, (const sg_vec_ns::details::sg_vec_iterator *)v73);
      v25 = v75;
      if (v75)
      {
        v26 = (unint64_t *)&v75->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v74;
      if (v74)
      {
        v29 = (unint64_t *)&v74->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v78;
      if (v78)
      {
        v32 = (unint64_t *)&v78->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        goto LABEL_59;
      }
    }
    else
    {
      sg_vec_ref::begin((sg_vec_ref *)v91, (uint64_t)&v76);
      sg_vec_ref::end((sg_vec_ref *)v91, (uint64_t)v73);
      v4 = DiskImage::Context::read(v24, (const sg_vec_ns::details::sg_vec_iterator *)&v76, (const sg_vec_ns::details::sg_vec_iterator *)v73);
      v37 = v75;
      if (v75)
      {
        v38 = (unint64_t *)&v75->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v74;
      if (v74)
      {
        v41 = (unint64_t *)&v74->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v78;
      if (v78)
      {
        v44 = (unint64_t *)&v78->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v36 = __ldaxr(v46);
        while (__stlxr(v36 - 1, v46));
LABEL_59:
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    v47 = v98;
    if (v98)
    {
      v48 = (unint64_t *)&v98->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v97;
    if (v97)
    {
      v51 = (unint64_t *)&v97->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v96;
    if (v96)
    {
      v54 = (unint64_t *)&v96->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v95;
    if (v95)
    {
      v57 = (unint64_t *)&v95->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = (std::__shared_weak_count *)v94[0];
    if (v94[0])
    {
      v60 = (unint64_t *)(v94[0] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = v92;
    if (v92)
    {
      v63 = (unint64_t *)&v92->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (v89 && &v90 != __p)
      operator delete(__p);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v87);
    if (v4 == v13)
    {
      v4 = v13;
LABEL_96:
      v12 = 0;
      v10 -= v13;
      v7 += v13;
      ++v11;
      v65 = 1;
      goto LABEL_98;
    }
    v65 = 0;
LABEL_98:
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)&v79);
    v66 = v82;
    if (v82)
    {
      v67 = (unint64_t *)&v82->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if ((v65 & 1) == 0)
      return v4;
  }
  return a4[2];
}

void sub_212F3BE70(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,__int128 a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  size_t v73;

  if (a2)
  {
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)&a58);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
    if (a2 == 2)
    {
      v69 = __cxa_begin_catch(a1);
      *(_QWORD *)&a39 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
      *((_QWORD *)&a39 + 1) = 33;
      a40 = 16;
      di_log::logger<di_log::log_printer<295ul>>::logger(&a67, &a39);
      if (a18)
        v70 = "Write error: ";
      else
        v70 = "Read error: ";
      if (a18)
        v71 = 13;
      else
        v71 = 12;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)v70, v71);
      v72 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v69 + 16))(v69);
      v73 = strlen(v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)v72, v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)" (band ", 7);
      *(_DWORD *)((char *)&STACK[0x338] + *(_QWORD *)(STACK[0x338] - 24) + 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(_QWORD *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&STACK[0x338] + *(_QWORD *)(STACK[0x338] - 24) + 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(_QWORD *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)", err ", 6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)")", 1);
      di_log::logger<di_log::log_printer<295ul>>::~logger((uint64_t)&a67);
      __cxa_end_catch();
      JUMPOUT(0x212F3BE2CLL);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_212F3C0D8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x212F3C0C8);
  JUMPOUT(0x212F3BF74);
}

uint64_t sparse_bundles::Band::ContextBand::has_null_backend(sparse_bundles::Band::ContextBand *this)
{
  uint64_t result;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    if (result)
    {
      v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      return 1;
    }
  }
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<284ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<284ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFFCB8;
  a1[45] = &unk_24CEFFDB8;
  a1[46] = &unk_24CEFFDE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFFCB8;
  a1[45] = &unk_24CEFFD40;
  a1[46] = &unk_24CEFFD68;
  return a1;
}

void sub_212F3C1F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<295ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<295ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CEFFED8;
  a1[45] = &unk_24CEFFFD8;
  a1[46] = &unk_24CF00000;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CEFFED8;
  a1[45] = &unk_24CEFFF60;
  a1[46] = &unk_24CEFFF88;
  return a1;
}

void sub_212F3C2E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImageSparseBundle::void_stackable_identifier(DiskImageSparseBundle *this)
{
  unint64_t *v2;
  unint64_t v3;
  _QWORD v5[2];
  unsigned int v6;
  _QWORD **v7;
  _QWORD *v8;

  v6 = 0;
  v2 = (unint64_t *)((char *)this + 704);
  v5[0] = this;
  v5[1] = &v6;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v8 = v5;
    v7 = &v8;
    std::__call_once(v2, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageSparseBundle::void_stackable_identifier(void)::$_0 &&>>);
  }
  return v6;
}

uint64_t DiskImageSparseBundle::write(DiskImageSparseBundle *a1, DiskImage::Context *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = DiskImageSparseBundle::void_stackable_identifier(a1);
  if (v6)
  {
    if (v6 >= 0)
      v7 = v6;
    else
      v7 = -v6;
    return -v7;
  }
  else
  {
    v9 = DiskImageSparseBundle::perform_io((uint64_t)a1, (uint64_t)a2, 1, a3);
    v8 = v9;
    if (v9 < 0 && (_DWORD)v9)
      DiskImage::Context::terminate_di(a2);
  }
  return v8;
}

uint64_t DiskImage::Context::terminate_di(DiskImage::Context *this)
{
  uint64_t v1;
  process_terminator *v2;
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 1);
  *(_QWORD *)&v4 = "DiskImage::terminate()";
  *((_QWORD *)&v4 + 1) = 20;
  v5 = 16;
  di_log::logger<di_log::log_printer<241ul>>::logger(v6, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Encountered an inrecoverable I/O error, all future I/Os will be invalidated", 75);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf((uint64_t)v6);
  v2 = (process_terminator *)MEMORY[0x2199A89AC](&v8);
  atomic_store(1u, (unsigned __int8 *)(v1 + 8));
  return process_terminator::terminate(v2);
}

void sub_212F3C4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf((uint64_t)&a12);
  MEMORY[0x2199A89AC](&a58);
  _Unwind_Resume(a1);
}

unint64_t DiskImageSparseBundle::get_num_blocks(DiskImageSparseBundle *this)
{
  unint64_t v2;
  DiskImagesRuntimeException *exception;
  void *v5;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 70) + 40))(*((_QWORD *)this + 70));
  if (v2 % (*(uint64_t (**)(DiskImageSparseBundle *))(*(_QWORD *)this + 24))(this))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Size is not a multiple of block size", 0x16u);
  }
  return v2 / (*(uint64_t (**)(DiskImageSparseBundle *))(*(_QWORD *)this + 24))(this);
}

uint64_t DiskImageSparseBundle::try_unmap_band_extents_with_index(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BOOL8 v8;
  _BYTE v10[8];
  sparse_bundles::Band *v11;

  sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)v10, (const sparse_bundles::band_ptr *)(*(_QWORD *)(a1 + 712) + 24 * a2));
  v8 = v11 != 0;
  if (v11 && sparse_bundles::Band::unmap_extents(v11, a4))
  {
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
    return sparse_bundles::band_ptr::erase_if_unmapped((sparse_bundles::band_ptr *)(*(_QWORD *)(a1 + 712) + 24 * a2), a3);
  }
  else
  {
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v10);
  }
  return v8;
}

void sub_212F3C614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)va);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t **a1, const sparse_bundles::bundle_commons_t *a2, _QWORD *a3)
{
  sparse_bundles::open_bands_t *v6;
  uint64_t v7;
  sparse_bundles::Band *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  lock_free::bitmap_t *v17;
  __int128 v19;
  int v20;
  lock_free::bitmap_t *v21;
  lock_free::bitmap_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[152];

  v6 = (sparse_bundles::open_bands_t *)(a1 + 26);
  v7 = sparse_bundles::open_bands_t::insert(a1 + 26, (unint64_t)a2);
  if ((_DWORD)v7)
  {
    v8 = (sparse_bundles::Band *)(a1 + 3);
    if ((uint64_t *)boost::icl::cardinality<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a3) == a1[8])
    {
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v19 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((_QWORD *)&v19 + 1) = 58;
        v20 = 2;
        di_log::logger<di_log::log_printer<387ul>>::logger(&v21, &v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unmapping band ", 15);
        *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] = *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] = *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)" completely", 11);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf((uint64_t)&v21);
        MEMORY[0x2199A89AC](v25);
      }
      sparse_bundles::Band::erase(v8, a2);
    }
    else
    {
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v19 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((_QWORD *)&v19 + 1) = 58;
        v20 = 2;
        di_log::logger<di_log::log_printer<390ul>>::logger(&v21, &v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unmapping band ", 15);
        *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] = *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] = *(_DWORD *)&v25[*(_QWORD *)(v24 - 24)] & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)" directly (without list)", 24);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf((uint64_t)&v21);
        MEMORY[0x2199A89AC](v25);
      }
      sparse_bundles::mapped_blocks_t::mapped_blocks_t((uint64_t)&v21, (uint64_t)v8, (uint64_t)a2, 0, 0);
      v11 = (_QWORD *)*a3;
      v9 = a3 + 1;
      v10 = v11;
      if (v11 != v9)
      {
        do
        {
          if ((v10[6] & 2) != 0)
            v12 = v10[4];
          else
            v12 = v10[4] + 1;
          sparse_bundles::mapped_blocks_t::unmap_interval(&v21, v12, (v10[6] & 1) + v10[5] - 1);
          v13 = (_QWORD *)v10[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v10[2];
              v15 = *v14 == (_QWORD)v10;
              v10 = v14;
            }
            while (!v15);
          }
          v10 = v14;
        }
        while (v14 != v9);
      }
      if (lock_free::bitmap_t::is_reset(v22))
        sparse_bundles::Band::erase(v8, a2);
      else
        sparse_bundles::mapped_blocks_t::flush((sparse_bundles::mapped_blocks_t *)&v21);
      v16 = v23;
      v23 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v22;
      v22 = 0;
      if (v17)
        (*(void (**)(lock_free::bitmap_t *))(*(_QWORD *)v17 + 8))(v17);
    }
    sparse_bundles::open_bands_t::remove(v6, (unint64_t)a2);
  }
  return v7;
}

void sub_212F3C91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  unint64_t v14;
  sparse_bundles::open_bands_t *v15;
  const DiskImagesRuntimeException *v16;
  DiskImagesRuntimeException *exception;

  if (a2 == 1)
  {
    v16 = (const DiskImagesRuntimeException *)__cxa_begin_catch(exception_object);
    sparse_bundles::open_bands_t::remove(v15, v14);
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<387ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<387ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF00318;
  a1[45] = &unk_24CF00418;
  a1[46] = &unk_24CF00440;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF00318;
  a1[45] = &unk_24CF003A0;
  a1[46] = &unk_24CF003C8;
  return a1;
}

void sub_212F3CA90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<390ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<390ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF00538;
  a1[45] = &unk_24CF00638;
  a1[46] = &unk_24CF00660;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF00538;
  a1[45] = &unk_24CF005C0;
  a1[46] = &unk_24CF005E8;
  return a1;
}

void sub_212F3CB78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void DiskImagesRuntimeException::DiskImagesRuntimeException(DiskImagesRuntimeException *this, const DiskImagesRuntimeException *a2)
{
  *(_QWORD *)this = &off_24CF07908;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 1, (__int128 *)((char *)a2 + 24));
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
}

void sub_212F3CC28(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::unmap_band_extents(uint64_t a1, const sparse_bundles::bundle_commons_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const sparse_bundles::bundle_commons_t **v8;
  const sparse_bundles::bundle_commons_t *v9;
  uint64_t result;

  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 16);
      if (!v6)
        break;
      v7 = 0;
      v8 = (const sparse_bundles::bundle_commons_t **)(*(_QWORD *)(a1 + 712) + 16);
      while (1)
      {
        v9 = *v8;
        v8 += 3;
        if (v9 == a2)
          break;
        if (v6 == ++v7)
          goto LABEL_9;
      }
      if (v7 < 0)
        break;
      result = DiskImageSparseBundle::try_unmap_band_extents_with_index(a1, v7, (uint64_t)a2, a3);
      if ((result & 1) != 0)
        return result;
      usleep(0x3E8u);
    }
LABEL_9:
    result = DiskImageSparseBundle::try_unmap_band_extents_without_list((uint64_t **)a1, a2, a3);
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t DiskImageSparseBundle::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const sparse_bundles::bundle_commons_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[8];
  __int128 v25;
  int v26;
  uint64_t *v27;
  _QWORD *v28[2];
  unsigned int v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  _QWORD *(*v33)(_QWORD *, _QWORD *);
  void (*v34)(uint64_t);
  _QWORD *v35[40];
  uint64_t v36;
  _BYTE v37[152];
  __int128 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((_QWORD *)&v38 + 1) = 32;
    v39 = 2;
    di_log::logger<di_log::log_printer<434ul>>::logger(&v30, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Starting unmap of ", 18);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)" extents", 8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x2199A89AC](v37);
  }
  v6 = *(_QWORD *)(a1 + 64);
  v29 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  if (*(_QWORD *)(a1 + 344))
  {
    v7 = DiskImageSparseBundle::void_stackable_identifier((DiskImageSparseBundle *)a1);
    if (!(_DWORD)v7)
    {
      workqueue::workqueue::create_transaction((workqueue::workqueue *)(a1 + 640), 0, (uint64_t)&v38);
      if (a4)
      {
        v8 = 0;
        v9 = 0;
        v21 = a3;
        do
        {
          v10 = *(_QWORD *)(a3 + 16 * v8);
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          v23 = v8;
          v12 = *(_QWORD *)(a3 + 16 * v8 + 8);
          v13 = v11 * v10;
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) * v12;
          if (DIDebugLogsEnabled())
          {
            *(_QWORD *)&v25 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
            *((_QWORD *)&v25 + 1) = 32;
            v26 = 2;
            di_log::logger<di_log::log_printer<460ul>>::logger(&v30, &v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Extent ", 7);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)": [", 3);
            v15 = v36;
            *(_DWORD *)&v37[*(_QWORD *)(v36 - 24)] |= 0x200u;
            *(_DWORD *)&v37[*(_QWORD *)(v15 - 24)] = *(_DWORD *)&v37[*(_QWORD *)(v15 - 24)] & 0xFFFFFFB5 | 8;
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"-", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"]", 1);
            v16 = v36;
            *(_DWORD *)&v37[*(_QWORD *)(v36 - 24)] &= ~0x200u;
            *(_DWORD *)&v37[*(_QWORD *)(v16 - 24)] = *(_DWORD *)&v37[*(_QWORD *)(v16 - 24)] & 0xFFFFFFB5 | 2;
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf((uint64_t)&v30);
            MEMORY[0x2199A89AC](v37);
          }
          if (v14)
          {
            v17 = v13 / v6;
            v18 = v13 % v6;
            do
            {
              if ((const sparse_bundles::bundle_commons_t *)v17 != v9 && v27 != (uint64_t *)v28)
              {
                v30 = 0;
                v31 = &v30;
                v32 = 0x4002000000;
                v33 = __Block_byref_object_copy__6;
                v34 = __Block_byref_object_dispose__6;
                std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::set[abi:ne180100]((uint64_t)v35, (uint64_t)&v27);
                v24[0] = MEMORY[0x24BDAC760];
                v24[1] = 0x40000000;
                v24[2] = ___ZN21DiskImageSparseBundle5unmapERN9DiskImage7ContextEPK14unmap_extent_tm_block_invoke;
                v24[3] = &unk_24CEFD830;
                v24[4] = &v30;
                v24[5] = a1;
                v24[6] = v9;
                v24[7] = &v29;
                workqueue::transaction::add((dispatch_group_t *)&v38, v24);
                std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::erase(&v27, v27, (uint64_t *)v28);
                _Block_object_dispose(&v30, 8);
                std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)v35, v35[1]);
              }
              if (v14 >= v6 - v18)
                v19 = v6 - v18;
              else
                v19 = v14;
              if (lock_free::bitmap_t::get_bit(*(lock_free::bitmap_t **)(a1 + 344), v17))
              {
                v30 = v18;
                v31 = (unint64_t *)(v19 + v18);
                LOBYTE(v32) = 2;
                boost::icl::interval_base_set<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_add(&v27, (uint64_t)&v30);
                v9 = (const sparse_bundles::bundle_commons_t *)v17;
              }
              v18 = 0;
              ++v17;
              v14 -= v19;
            }
            while (v14);
          }
          v8 = v23 + 1;
          a3 = v21;
        }
        while (v23 + 1 != a4);
      }
      else
      {
        v9 = 0;
      }
      if (v27 != (uint64_t *)v28)
        DiskImageSparseBundle::unmap_band_extents(a1, v9, &v27);
      workqueue::transaction::~transaction((workqueue::transaction *)&v38);
      if (DIDebugLogsEnabled())
      {
        *(_QWORD *)&v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
        *((_QWORD *)&v38 + 1) = 32;
        v39 = 2;
        di_log::logger<di_log::log_printer<498ul>>::logger(&v30, &v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Unmap done", 10);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf((uint64_t)&v30);
        MEMORY[0x2199A89AC](v37);
      }
      v7 = atomic_load(&v29);
    }
  }
  else
  {
    *(_QWORD *)&v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((_QWORD *)&v38 + 1) = 32;
    v39 = 16;
    di_log::logger<di_log::log_printer<443ul>>::logger(&v30, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Unexpected unmap command received on read only image", 52);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x2199A89AC](v37);
    v7 = 4294967277;
  }
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v27, v28[0]);
  return v7;
}

void sub_212F3D1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,uint64_t a29,char a30)
{
  di_log::logger<di_log::log_printer<498ul>>::~logger((uint64_t)&a30);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<434ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<434ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF00758;
  a1[45] = &unk_24CF00858;
  a1[46] = &unk_24CF00880;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF00758;
  a1[45] = &unk_24CF007E0;
  a1[46] = &unk_24CF00808;
  return a1;
}

void sub_212F3D494(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<443ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<443ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF00978;
  a1[45] = &unk_24CF00A78;
  a1[46] = &unk_24CF00AA0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF00978;
  a1[45] = &unk_24CF00A00;
  a1[46] = &unk_24CF00A28;
  return a1;
}

void sub_212F3D57C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<460ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<460ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF00B98;
  a1[45] = &unk_24CF00C98;
  a1[46] = &unk_24CF00CC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF00B98;
  a1[45] = &unk_24CF00C20;
  a1[46] = &unk_24CF00C48;
  return a1;
}

void sub_212F3D664(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *__Block_byref_object_copy__6(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
}

uint64_t ___ZN21DiskImageSparseBundle5unmapERN9DiskImage7ContextEPK14unmap_extent_tm_block_invoke(uint64_t a1)
{
  return DiskImageSparseBundle::unmap_band_extents(*(_QWORD *)(a1 + 40), *(const sparse_bundles::bundle_commons_t **)(a1 + 48), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

_QWORD *di_log::logger<di_log::log_printer<469ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<469ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF00DB8;
  a1[45] = &unk_24CF00EB8;
  a1[46] = &unk_24CF00EE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF00DB8;
  a1[45] = &unk_24CF00E40;
  a1[46] = &unk_24CF00E68;
  return a1;
}

void sub_212F3D938(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<492ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<492ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF00FD8;
  a1[45] = &unk_24CF010D8;
  a1[46] = &unk_24CF01100;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF00FD8;
  a1[45] = &unk_24CF01060;
  a1[46] = &unk_24CF01088;
  return a1;
}

void sub_212F3DA20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<498ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<498ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF011F8;
  a1[45] = &unk_24CF012F8;
  a1[46] = &unk_24CF01320;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF011F8;
  a1[45] = &unk_24CF01280;
  a1[46] = &unk_24CF012A8;
  return a1;
}

void sub_212F3DB08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImageSparseBundle::on_eject(DiskImageSparseBundle *this)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[24];
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  _BYTE v10[152];

  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v6 = "void DiskImageSparseBundle::on_eject()";
    *((_QWORD *)&v6 + 1) = 36;
    v7 = 2;
    di_log::logger<di_log::log_printer<505ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Evicting all bands for eject", 28);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x2199A89AC](v10);
  }
  if (*((_QWORD *)this + 2))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      sparse_bundles::band_ptr::replace_if_evictable((unint64_t **)(*((_QWORD *)this + 89) + v2), 0, (sparse_bundles::band_ptr *)v5);
      sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)v5);
      ++v3;
      v2 += 24;
    }
    while (v3 < *((_QWORD *)this + 2));
  }
  workqueue::transaction::flush((dispatch_group_t *)this + 52, 0xFFFFFFFFFFFFFFFFLL);
  *(_QWORD *)&v6 = "void DiskImageSparseBundle::on_eject()";
  *((_QWORD *)&v6 + 1) = 36;
  v7 = 0;
  di_log::logger<di_log::log_printer<511ul>>::logger(v8, &v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Sparse bundle ejected", 21);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf((uint64_t)v8);
  return MEMORY[0x2199A89AC](v10);
}

void sub_212F3DCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  di_log::logger<di_log::log_printer<505ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<505ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<505ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF01418;
  a1[45] = &unk_24CF01518;
  a1[46] = &unk_24CF01540;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF01418;
  a1[45] = &unk_24CF014A0;
  a1[46] = &unk_24CF014C8;
  return a1;
}

void sub_212F3DD50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

_QWORD *di_log::logger<di_log::log_printer<511ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<511ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF01638;
  a1[45] = &unk_24CF01738;
  a1[46] = &unk_24CF01760;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF01638;
  a1[45] = &unk_24CF016C0;
  a1[46] = &unk_24CF016E8;
  return a1;
}

void sub_212F3DE38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImageSparseBundle::set_size(DiskImage *this, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  __int128 v6;
  int v7;
  _QWORD v8[45];
  uint64_t v9;
  uint64_t v10;

  result = DiskImage::set_size_unmap_data(this, a2);
  if (!(_DWORD)result)
  {
    v5 = (a2 + 4095) & 0xFFFFFFFFFFFFF000;
    if (v5 < 0x200000000000001)
    {
      return (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)this + 70) + 56))(*((_QWORD *)this + 70), v5);
    }
    else
    {
      *(_QWORD *)&v6 = "int DiskImageSparseBundle::set_size(uint64_t)";
      *((_QWORD *)&v6 + 1) = 35;
      v7 = 16;
      di_log::logger<di_log::log_printer<523ul>>::logger(v8, &v6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" bytes are above the sparsebundle limit of ", 43);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" bytes", 6);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf((uint64_t)v8);
      MEMORY[0x2199A89AC](&v10);
      return 4294967269;
    }
  }
  return result;
}

void sub_212F3DFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<523ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::set_size_unmap_data(DiskImage *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = (*(uint64_t (**)(DiskImage *))(*(_QWORD *)this + 32))(this);
  v5 = (*(uint64_t (**)(DiskImage *))(*(_QWORD *)this + 24))(this) * v4;
  v6 = (*(uint64_t (**)(DiskImage *))(*(_QWORD *)this + 24))(this);
  v7 = (a2 + v6 - 1) / v6 * v6;
  if (v5 <= v7)
    return 0;
  v11[0] = v7 / (*(uint64_t (**)(DiskImage *))(*(_QWORD *)this + 24))(this);
  v11[1] = (v5 - v7) / (*(uint64_t (**)(DiskImage *))(*(_QWORD *)this + 24))(this);
  v8 = (*(uint64_t (**)(DiskImage *))(*(_QWORD *)this + 136))(this);
  v9 = (*(uint64_t (**)(DiskImage *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)this + 184))(this, v8, v11, 1);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  return v9;
}

void sub_212F3E0BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<523ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<523ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF01858;
  a1[45] = &unk_24CF01958;
  a1[46] = &unk_24CF01980;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF01858;
  a1[45] = &unk_24CF018E0;
  a1[46] = &unk_24CF01908;
  return a1;
}

void sub_212F3E160(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t DiskImageSparseBundle::get_block_size(DiskImageSparseBundle *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t DiskImageSparseBundle::is_writable(DiskImageSparseBundle *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 70) + 48))(*((_QWORD *)this + 70));
}

info::DiskImageInfoSparseBundle *DiskImageSparseBundle::create_image_info@<X0>(DiskImageSparseBundle *this@<X0>, _QWORD *a2@<X8>)
{
  info::DiskImageInfoSparseBundle *v4;
  info::DiskImageInfoSparseBundle *result;

  v4 = (info::DiskImageInfoSparseBundle *)operator new();
  result = info::DiskImageInfoSparseBundle::DiskImageInfoSparseBundle(v4, this);
  *a2 = (char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 104);
  return result;
}

void sub_212F3E240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0x10E1C40A61747DFLL);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::supports_unmap(DiskImageSparseBundle *this)
{
  return 1;
}

DiskImageSparseBundle::ContextSparseBundle *DiskImageSparseBundle::_create_ctx(DiskImageSparseBundle *this)
{
  DiskImageSparseBundle::ContextSparseBundle *v2;

  v2 = (DiskImageSparseBundle::ContextSparseBundle *)operator new();
  DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(v2, this);
  return v2;
}

void sub_212F3E2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199A8A18](v1, 0xA1C40987D6AD5);
  _Unwind_Resume(a1);
}

uint64_t DiskImageSparseBundle::read(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return DiskImageSparseBundle::perform_io(a1, a2, 0, a3);
}

uint64_t std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sparse_bundles::band_ptr>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sparse_bundles::band_ptr>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  sparse_bundles::band_ptr *v12;

  v10 = 0;
  v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    v12 = (sparse_bundles::band_ptr *)(v11 + v10);
    v10 -= 24;
    sparse_bundles::band_ptr::band_ptr(v12, (const sparse_bundles::band_ptr *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<sparse_bundles::band_ptr>::__emplace_back_slow_path<sparse_bundles::band_ptr>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100](v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  sparse_bundles::band_ptr::band_ptr((uint64_t)v14, a2);
  v15 = v14 + 24;
  std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_212F3E520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<46ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFDA30;
  di_log::logger_buf<di_log::log_printer<46ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<46ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F3E8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<46ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 46;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 46;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        sparse_bundles::band_ptr::~band_ptr((sparse_bundles::band_ptr *)(v4 - 24));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  NSObject **v2;
  NSObject **v4;
  void *v5;

  v1 = *a1;
  v2 = (NSObject **)**a1;
  if (v2)
  {
    v4 = (NSObject **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        gcd::gcd_group::~gcd_group(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sparse_bundles::bundle_commons_t::~bundle_commons_t(sparse_bundles::bundle_commons_t *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  workqueue::transaction::~transaction((sparse_bundles::bundle_commons_t *)((char *)this + 392));
  v5 = (void **)((char *)this + 352);
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  v2 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 272));
  std::mutex::~mutex((std::mutex *)((char *)this + 208));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 136));
  std::mutex::~mutex((std::mutex *)this + 1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<59ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFDC50;
  di_log::logger_buf<di_log::log_printer<59ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<59ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F3F088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<59ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 59;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 59;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<80ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFDE70;
  di_log::logger_buf<di_log::log_printer<80ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<80ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F3F674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<80ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 80;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 80;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<101ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFE090;
  di_log::logger_buf<di_log::log_printer<101ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<101ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F3FC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<101ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 101;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 101;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<107ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFE2B0;
  di_log::logger_buf<di_log::log_printer<107ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<107ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<107ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 107;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 107;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<111ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFE4D0;
  di_log::logger_buf<di_log::log_printer<111ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<111ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F40838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<111ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 111;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 111;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<154ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFE6F0;
  di_log::logger_buf<di_log::log_printer<154ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<154ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F40E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<154ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 154;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 154;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<165ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFE910;
  di_log::logger_buf<di_log::log_printer<165ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<165ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F41410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<165ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 165;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 165;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<172ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFEB30;
  di_log::logger_buf<di_log::log_printer<172ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<172ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F419FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<172ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 172;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 172;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<190ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFED50;
  di_log::logger_buf<di_log::log_printer<190ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<190ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F41FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<190ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 190;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 190;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<194ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFEF70;
  di_log::logger_buf<di_log::log_printer<194ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<194ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F425D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<194ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 194;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 194;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t *v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = *(a2 - 2);
        v27 = *v9;
        v28 = -1;
        if (v26 >= *v9)
          v28 = 1;
        if (v26 == *v9)
        {
          v29 = *(a2 - 1);
          v30 = v9[1];
          v31 = v29 >= v30;
          v32 = v29 == v30;
          v28 = -1;
          if (v31)
            v28 = 1;
          if (v32)
            v28 = 0;
        }
        if (v28 < 0)
        {
          v33 = v9[1];
          v34 = *(a2 - 1);
          *v9 = v26;
          v9[1] = v34;
          *(a2 - 2) = v27;
          *(a2 - 1) = v33;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          v17 = *(v9 - 2);
          v18 = v17 == *v9;
          if (v17 >= *v9)
            v19 = 1;
          else
            v19 = -1;
          if (v18)
          {
            v20 = *(v9 - 1);
            v21 = v9[1];
            v22 = v20 == v21;
            v19 = v20 >= v21 ? 1 : -1;
            if (v22)
              v19 = 0;
          }
          if ((v19 & 0x80) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(v9, a2);
            v9 = (uint64_t *)result;
            goto LABEL_27;
          }
LABEL_22:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(v9, a2);
          if ((v24 & 1) == 0)
            goto LABEL_25;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v9, v23);
          v9 = v23 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(v23 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v25)
              continue;
LABEL_25:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>(v8, v23, a3, -v11, a5 & 1);
            v9 = v23 + 2;
LABEL_27:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v23;
          if (v25)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  BOOL v18;
  uint64_t *v19;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        v7 = *v4;
        if (v6 >= *v4)
          v8 = 1;
        else
          v8 = -1;
        if (v6 == *v4)
        {
          v9 = v4[3];
          v10 = v4[1];
          v11 = v9 == v10;
          v8 = v9 >= v10 ? 1 : -1;
          if (v11)
            v8 = 0;
        }
        if (v8 < 0)
        {
          v12 = v4[3];
          v13 = v3;
          while (1)
          {
            v14 = (char *)result + v13;
            v15 = *(uint64_t *)((char *)result + v13 + 8);
            *((_QWORD *)v14 + 2) = v7;
            *((_QWORD *)v14 + 3) = v15;
            if (!v13)
              break;
            v7 = *((_QWORD *)v14 - 2);
            if (v6 >= v7)
              v16 = 1;
            else
              v16 = -1;
            if (v6 == v7)
            {
              v17 = *(uint64_t *)((char *)result + v13 - 8);
              v18 = v12 == v17;
              if (v12 >= v17)
                v16 = 1;
              else
                v16 = -1;
              if (v18)
                v16 = 0;
            }
            v13 -= 16;
            if ((v16 & 0x80) == 0)
            {
              v19 = (uint64_t *)((char *)result + v13 + 16);
              goto LABEL_28;
            }
          }
          v19 = result;
LABEL_28:
          *v19 = v6;
          v19[1] = v12;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t *v12;
  char v13;
  unint64_t v14;
  BOOL v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = (unint64_t *)(result + 3);
      do
      {
        v4 = v2;
        v5 = result[2];
        v6 = *result;
        if (v5 >= *result)
          v7 = 1;
        else
          v7 = -1;
        if (v5 == *result)
        {
          v8 = result[3];
          v9 = result[1];
          v10 = v8 == v9;
          v7 = v8 >= v9 ? 1 : -1;
          if (v10)
            v7 = 0;
        }
        if (v7 < 0)
        {
          v11 = result[3];
          v12 = v3;
          do
          {
            *(v12 - 1) = v6;
            *v12 = *(v12 - 2);
            v6 = *(v12 - 5);
            if (v5 >= v6)
              v13 = 1;
            else
              v13 = -1;
            if (v5 == v6)
            {
              v14 = *(v12 - 4);
              v15 = v11 == v14;
              if (v11 >= v14)
                v13 = 1;
              else
                v13 = -1;
              if (v15)
                v13 = 0;
            }
            v12 -= 2;
          }
          while (v13 < 0);
          *(v12 - 1) = v5;
          *v12 = v11;
        }
        v2 = v4 + 2;
        v3 += 2;
        result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1)
    v5 = 1;
  else
    v5 = -1;
  if (*a2 == *a1)
  {
    v6 = a2[1];
    v7 = a1[1];
    v8 = v6 >= v7;
    v9 = v6 == v7;
    v10 = -1;
    if (v8)
      v10 = 1;
    if (v9)
      v5 = 0;
    else
      v5 = v10;
  }
  v11 = *a3;
  v12 = -1;
  if (*a3 >= v3)
    v12 = 1;
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      v18 = a3[1];
      v19 = a2[1];
      v8 = v18 >= v19;
      v20 = v18 == v19;
      v12 = -1;
      if (v8)
        v12 = 1;
      if (v20)
        v12 = 0;
    }
    if (v12 < 0)
    {
      v36 = a1[1];
      v37 = a3[1];
      *a1 = v11;
      a1[1] = v37;
      *a3 = v4;
      a3[1] = v36;
    }
    else
    {
      v21 = a1[1];
      v22 = a2[1];
      *a1 = v3;
      a1[1] = v22;
      *a2 = v4;
      a2[1] = v21;
      v23 = -1;
      if (*a3 >= v4)
        v23 = 1;
      if (*a3 == v4)
      {
        v24 = a3[1];
        v8 = v24 >= v21;
        v25 = v24 == v21;
        v23 = -1;
        if (v8)
          v23 = 1;
        if (v25)
          v23 = 0;
      }
      if (v23 < 0)
      {
        v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v4;
        a3[1] = v21;
        return 2;
      }
    }
  }
  else
  {
    if (v11 == v3)
    {
      v13 = a3[1];
      v14 = a2[1];
      v8 = v13 >= v14;
      v15 = v13 == v14;
      v16 = -1;
      if (v8)
        v16 = 1;
      if (v15)
        v12 = 0;
      else
        v12 = v16;
    }
    if ((v12 & 0x80) == 0)
      return 0;
    *a2 = v11;
    *a3 = v3;
    v27 = *a2;
    v28 = a2[1];
    a2[1] = a3[1];
    a3[1] = v28;
    v29 = *a1;
    v30 = -1;
    if (v27 >= *a1)
      v30 = 1;
    if (v27 == *a1)
    {
      v31 = a2[1];
      v32 = a1[1];
      v8 = v31 >= v32;
      v33 = v31 == v32;
      v30 = -1;
      if (v8)
        v30 = 1;
      if (v33)
        v30 = 0;
    }
    if (v30 < 0)
    {
      v34 = a1[1];
      v35 = a2[1];
      *a1 = v27;
      a1[1] = v35;
      *a2 = v29;
      a2[1] = v34;
      return 2;
    }
  }
  return 1;
}

_QWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  unint64_t v41;
  BOOL v42;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  v5 = *a1 == v4;
  if (*a1 >= v4)
    v6 = 1;
  else
    v6 = -1;
  if (v5)
  {
    v7 = *(a2 - 1);
    v8 = v3 >= v7;
    v9 = v3 == v7;
    v6 = -1;
    if (v8)
      v6 = 1;
    if (v9)
      v6 = 0;
  }
  if (v6 < 0)
  {
    v15 = a1;
    v11 = a1;
    do
    {
      v16 = v11[2];
      v11 += 2;
      v17 = v2 == v16;
      if (v2 >= v16)
        v18 = 1;
      else
        v18 = -1;
      if (v17)
      {
        v19 = v15[3];
        v20 = v3 == v19;
        v18 = v3 >= v19 ? 1 : -1;
        if (v20)
          v18 = 0;
      }
      v15 = v11;
    }
    while ((v18 & 0x80) == 0);
  }
  else
  {
    v10 = a1 + 2;
    do
    {
      v11 = v10;
      if (v10 >= a2)
        break;
      if (v2 >= *v10)
        v12 = 1;
      else
        v12 = -1;
      if (v2 == *v10)
      {
        v13 = v10[1];
        v14 = v3 == v13;
        v12 = v3 >= v13 ? 1 : -1;
        if (v14)
          v12 = 0;
      }
      v10 += 2;
    }
    while ((v12 & 0x80) == 0);
  }
  if (v11 >= a2)
  {
    v21 = a2;
  }
  else
  {
    v21 = a2;
    do
    {
      v22 = *(v21 - 2);
      v21 -= 2;
      v23 = v2 == v22;
      if (v2 >= v22)
        v24 = 1;
      else
        v24 = -1;
      if (v23)
      {
        v25 = *(a2 - 1);
        v26 = v3 == v25;
        v24 = v3 >= v25 ? 1 : -1;
        if (v26)
          v24 = 0;
      }
      a2 = v21;
    }
    while (v24 < 0);
  }
  if (v11 < v21)
  {
    v27 = *v11;
    v28 = *v21;
    do
    {
      v29 = v11[1];
      v30 = v21[1];
      *v11 = v28;
      v11[1] = v30;
      *v21 = v27;
      v21[1] = v29;
      v31 = v11;
      do
      {
        v32 = v11[2];
        v11 += 2;
        v27 = v32;
        v33 = v2 == v32;
        if (v2 >= v32)
          v34 = 1;
        else
          v34 = -1;
        if (v33)
        {
          v35 = v31[3];
          v36 = v3 == v35;
          v34 = v3 >= v35 ? 1 : -1;
          if (v36)
            v34 = 0;
        }
        v31 = v11;
      }
      while ((v34 & 0x80) == 0);
      v37 = v21;
      do
      {
        v38 = *(v21 - 2);
        v21 -= 2;
        v28 = v38;
        v39 = v2 == v38;
        if (v2 >= v38)
          v40 = 1;
        else
          v40 = -1;
        if (v39)
        {
          v41 = *(v37 - 1);
          v42 = v3 == v41;
          v40 = v3 >= v41 ? 1 : -1;
          if (v42)
            v40 = 0;
        }
        v37 = v21;
      }
      while (v40 < 0);
    }
    while (v11 < v21);
  }
  if (v11 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
  *(v11 - 2) = v2;
  *(v11 - 1) = v3;
  return v11;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  unint64_t v36;
  BOOL v37;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3)
      v6 = 1;
    else
      v6 = -1;
    if (v5 == v3)
    {
      v7 = a1[v2 + 3];
      v8 = v7 == v4;
      v6 = v7 >= v4 ? 1 : -1;
      if (v8)
        v6 = 0;
    }
    v2 += 2;
  }
  while (v6 < 0);
  v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      v10 = a2 - 2;
      v16 = *(a2 - 2);
      v17 = v16 == v3;
      if (v16 >= v3)
        v18 = 1;
      else
        v18 = -1;
      if (v17)
      {
        v19 = *(a2 - 1);
        v20 = v19 == v4;
        v18 = v19 >= v4 ? 1 : -1;
        if (v20)
          v18 = 0;
      }
      a2 -= 2;
      if (v18 < 0)
        goto LABEL_39;
    }
    v10 = a2;
  }
  else
  {
    v10 = a2;
    do
    {
      v11 = *(v10 - 2);
      v10 -= 2;
      v12 = v11 == v3;
      if (v11 >= v3)
        v13 = 1;
      else
        v13 = -1;
      if (v12)
      {
        v14 = *(a2 - 1);
        v15 = v14 == v4;
        v13 = v14 >= v4 ? 1 : -1;
        if (v15)
          v13 = 0;
      }
      a2 = v10;
    }
    while ((v13 & 0x80) == 0);
  }
LABEL_39:
  if (v9 >= v10)
  {
    v22 = v9;
  }
  else
  {
    v21 = *v10;
    v22 = v9;
    v23 = v10;
    do
    {
      v24 = v22[1];
      v25 = v23[1];
      *v22 = v21;
      v22[1] = v25;
      *v23 = v5;
      v23[1] = v24;
      v26 = v22;
      do
      {
        v27 = v22[2];
        v22 += 2;
        v5 = v27;
        v28 = v27 == v3;
        if (v27 >= v3)
          v29 = 1;
        else
          v29 = -1;
        if (v28)
        {
          v30 = v26[3];
          v31 = v30 == v4;
          v29 = v30 >= v4 ? 1 : -1;
          if (v31)
            v29 = 0;
        }
        v26 = v22;
      }
      while (v29 < 0);
      v32 = v23;
      do
      {
        v33 = *(v23 - 2);
        v23 -= 2;
        v21 = v33;
        v34 = v33 == v3;
        if (v33 >= v3)
          v35 = 1;
        else
          v35 = -1;
        if (v34)
        {
          v36 = *(v32 - 1);
          v37 = v36 == v4;
          v35 = v36 >= v4 ? 1 : -1;
          if (v37)
            v35 = 0;
        }
        v32 = v23;
      }
      while ((v35 & 0x80) == 0);
    }
    while (v22 < v23);
  }
  if (v22 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  *(v22 - 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t *v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      v8 = -1;
      if (v6 >= *a1)
        v8 = 1;
      if (v6 == *a1)
      {
        v9 = *(a2 - 1);
        v10 = a1[1];
        v11 = v9 >= v10;
        v12 = v9 == v10;
        v8 = -1;
        if (v11)
          v8 = 1;
        if (v12)
          v8 = 0;
      }
      if (v8 < 0)
      {
        v13 = a1[1];
        v14 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v14;
        *(a2 - 2) = v7;
        *(a2 - 1) = v13;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v15 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a1 + 2, a1 + 4);
      v16 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *v16;
    v20 = *v15;
    if (*v16 >= *v15)
      v21 = 1;
    else
      v21 = -1;
    if (*v16 == *v15)
    {
      v22 = v16[1];
      v23 = v15[1];
      v24 = v22 == v23;
      v21 = v22 >= v23 ? 1 : -1;
      if (v24)
        v21 = 0;
    }
    if (v21 < 0)
    {
      v25 = v16[1];
      v26 = v17;
      while (1)
      {
        v27 = (uint64_t *)((char *)a1 + v26);
        v28 = *(uint64_t *)((char *)a1 + v26 + 40);
        v27[6] = v20;
        v27[7] = v28;
        if (v26 == -32)
          break;
        v20 = v27[2];
        if (v19 >= v20)
          v29 = 1;
        else
          v29 = -1;
        if (v19 == v20)
        {
          v30 = *(uint64_t *)((char *)a1 + v26 + 24);
          v31 = v25 == v30;
          v29 = v25 >= v30 ? 1 : -1;
          if (v31)
            v29 = 0;
        }
        v26 -= 16;
        if ((v29 & 0x80) == 0)
        {
          v32 = (uint64_t *)((char *)a1 + v26 + 48);
          goto LABEL_38;
        }
      }
      v32 = a1;
LABEL_38:
      *v32 = v19;
      v32[1] = v25;
      if (++v18 == 8)
        return v16 + 2 == a2;
    }
    v15 = v16;
    v17 += 16;
    v16 += 2;
    if (v16 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a2, a3);
  v9 = *a3;
  v10 = -1;
  if (*a4 >= *a3)
    v10 = 1;
  if (*a4 == *a3)
  {
    v11 = a4[1];
    v12 = a3[1];
    v13 = v11 >= v12;
    v14 = v11 == v12;
    v10 = -1;
    if (v13)
      v10 = 1;
    if (v14)
      v10 = 0;
  }
  if (v10 < 0)
  {
    *a3 = *a4;
    *a4 = v9;
    v15 = *a3;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = *a2;
    v18 = -1;
    if (v15 >= *a2)
      v18 = 1;
    if (v15 == *a2)
    {
      v19 = a3[1];
      v20 = a2[1];
      v13 = v19 >= v20;
      v21 = v19 == v20;
      v18 = -1;
      if (v13)
        v18 = 1;
      if (v21)
        v18 = 0;
    }
    if (v18 < 0)
    {
      *a2 = v15;
      *a3 = v17;
      v22 = *a2;
      v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      v24 = *a1;
      v25 = -1;
      if (v22 >= *a1)
        v25 = 1;
      if (v22 == *a1)
      {
        v26 = a2[1];
        v27 = a1[1];
        v13 = v26 >= v27;
        v28 = v26 == v27;
        v25 = -1;
        if (v13)
          v25 = 1;
        if (v28)
          v25 = 0;
      }
      if (v25 < 0)
      {
        v29 = a1[1];
        v30 = a2[1];
        *a1 = v22;
        a1[1] = v30;
        *a2 = v24;
        a2[1] = v29;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a2, a3, a4);
  v11 = *a4;
  v12 = -1;
  if (*a5 >= *a4)
    v12 = 1;
  if (*a5 == *a4)
  {
    v13 = a5[1];
    v14 = a4[1];
    v15 = v13 >= v14;
    v16 = v13 == v14;
    v12 = -1;
    if (v15)
      v12 = 1;
    if (v16)
      v12 = 0;
  }
  if (v12 < 0)
  {
    *a4 = *a5;
    *a5 = v11;
    v17 = *a4;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = *a3;
    v20 = -1;
    if (v17 >= *a3)
      v20 = 1;
    if (v17 == *a3)
    {
      v21 = a4[1];
      v22 = a3[1];
      v15 = v21 >= v22;
      v23 = v21 == v22;
      v20 = -1;
      if (v15)
        v20 = 1;
      if (v23)
        v20 = 0;
    }
    if (v20 < 0)
    {
      *a3 = v17;
      *a4 = v19;
      v24 = *a3;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a2;
      v27 = -1;
      if (v24 >= *a2)
        v27 = 1;
      if (v24 == *a2)
      {
        v28 = a3[1];
        v29 = a2[1];
        v15 = v28 >= v29;
        v30 = v28 == v29;
        v27 = -1;
        if (v15)
          v27 = 1;
        if (v30)
          v27 = 0;
      }
      if (v27 < 0)
      {
        *a2 = v24;
        *a3 = v26;
        v31 = *a2;
        v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        v33 = *a1;
        v34 = -1;
        if (v31 >= *a1)
          v34 = 1;
        if (v31 == *a1)
        {
          v35 = a2[1];
          v36 = a1[1];
          v15 = v35 >= v36;
          v37 = v35 == v36;
          v34 = -1;
          if (v15)
            v34 = 1;
          if (v37)
            v34 = 0;
        }
        if (v34 < 0)
        {
          v38 = a1[1];
          v39 = a2[1];
          *a1 = v31;
          a1[1] = v39;
          *a2 = v33;
          a2[1] = v38;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 >= *(_QWORD *)a1)
          v16 = 1;
        else
          v16 = -1;
        if (*(_QWORD *)v14 == *(_QWORD *)a1)
        {
          v17 = *((_QWORD *)v14 + 1);
          v18 = *((_QWORD *)a1 + 1);
          v19 = v17 == v18;
          v16 = v17 >= v18 ? 1 : -1;
          if (v19)
            v16 = 0;
        }
        if (v16 < 0)
        {
          v20 = *((_QWORD *)v14 + 1);
          v21 = *((_QWORD *)a1 + 1);
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *((_QWORD *)v14 + 1) = v21;
          *(_QWORD *)a1 = v15;
          *((_QWORD *)a1 + 1) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v22 = (unint64_t)v8 >> 4;
      v23 = a2 - 16;
      do
      {
        v25 = *(_QWORD *)a1;
        v24 = *((_QWORD *)a1 + 1);
        v26 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(a1, a4, v22);
        if (v23 == v26)
        {
          *(_QWORD *)v26 = v25;
          *((_QWORD *)v26 + 1) = v24;
        }
        else
        {
          *(_OWORD *)v26 = *(_OWORD *)v23;
          *(_QWORD *)v23 = v25;
          *((_QWORD *)v23 + 1) = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>((uint64_t)a1, (uint64_t)(v26 + 16), a4, (v26 + 16 - a1) >> 4);
        }
        v23 -= 16;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  char v33;
  unint64_t v34;
  BOOL v35;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (_QWORD *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        v11 = *v8 == v10;
        if (*v8 >= v10)
          v12 = 1;
        else
          v12 = -1;
        if (v11)
        {
          v13 = *(_QWORD *)(result + 16 * v7 + 8);
          v14 = v8[3];
          v15 = v13 >= v14;
          v16 = v13 == v14;
          v12 = -1;
          if (v15)
            v12 = 1;
          if (v16)
            v12 = 0;
        }
        if (v12 < 0)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v17 = *v8;
      v18 = *a4;
      v19 = -1;
      if (*v8 >= *a4)
        v19 = 1;
      if (*v8 == *a4)
      {
        v20 = v8[1];
        v21 = a4[1];
        v15 = v20 >= v21;
        v22 = v20 == v21;
        v19 = -1;
        if (v15)
          v19 = 1;
        if (v22)
          v19 = 0;
      }
      if ((v19 & 0x80) == 0)
      {
        v23 = a4[1];
        do
        {
          v24 = a4;
          a4 = v8;
          v25 = v8[1];
          *v24 = v17;
          v24[1] = v25;
          if (v5 < v7)
            break;
          v26 = (2 * v7) | 1;
          v8 = (_QWORD *)(result + 16 * v26);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v7 = v26;
          }
          else
          {
            v27 = v8[2];
            v28 = *v8 == v27;
            if (*v8 >= v27)
              v29 = 1;
            else
              v29 = -1;
            if (v28)
            {
              v30 = *(_QWORD *)(result + 16 * v26 + 8);
              v31 = v8[3];
              v32 = v30 == v31;
              v29 = v30 >= v31 ? 1 : -1;
              if (v32)
                v29 = 0;
            }
            if (v29 < 0)
              v8 += 2;
            else
              v7 = v26;
          }
          v17 = *v8;
          if (*v8 >= v18)
            v33 = 1;
          else
            v33 = -1;
          if (*v8 == v18)
          {
            v34 = v8[1];
            v35 = v34 == v23;
            if (v34 >= v23)
              v33 = 1;
            else
              v33 = -1;
            if (v35)
              v33 = 0;
          }
        }
        while ((v33 & 0x80) == 0);
        *a4 = v18;
        a4[1] = v23;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = v3 + 1;
    v7 = &a1[v3 + 1];
    v8 = (2 * v3) | 1;
    v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      v10 = v7[2];
      v11 = *v7 == v10;
      if (*v7 >= v10)
        v12 = 1;
      else
        v12 = -1;
      if (v11)
      {
        v13 = *((_QWORD *)&a1[v6] + 1);
        v14 = v7[3];
        v15 = v13 == v14;
        if (v13 >= v14)
          v16 = 1;
        else
          v16 = -1;
        if (v15)
          v12 = 0;
        else
          v12 = v16;
      }
      if (v12 < 0)
      {
        v7 += 2;
        v8 = v9;
      }
    }
    *a1 = *(_OWORD *)v7;
    a1 = v7;
    v3 = v8;
  }
  while (v8 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(_QWORD *)(a2 - 16);
    v9 = *v6;
    v10 = -1;
    if (*v6 >= v8)
      v10 = 1;
    if (*v6 == v8)
    {
      v11 = v6[1];
      v12 = *(_QWORD *)(a2 - 8);
      v13 = v11 >= v12;
      v14 = v11 == v12;
      v10 = -1;
      if (v13)
        v10 = 1;
      if (v14)
        v10 = 0;
    }
    if (v10 < 0)
    {
      v15 = *(_QWORD *)(a2 - 8);
      do
      {
        v16 = v7;
        v7 = v6;
        v17 = v6[1];
        *v16 = v9;
        v16[1] = v17;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 16 * v5);
        v9 = *v6;
        if (*v6 >= v8)
          v18 = 1;
        else
          v18 = -1;
        if (*v6 == v8)
        {
          v19 = v6[1];
          v20 = v19 == v15;
          if (v19 >= v15)
            v18 = 1;
          else
            v18 = -1;
          if (v20)
            v18 = 0;
        }
      }
      while (v18 < 0);
      *v7 = v8;
      v7[1] = v15;
    }
  }
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<213ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFF190;
  di_log::logger_buf<di_log::log_printer<213ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<213ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F43D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<213ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 213;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 213;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<218ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFF3B0;
  di_log::logger_buf<di_log::log_printer<218ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<218ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F44314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<218ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 218;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 218;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<222ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFF5D0;
  di_log::logger_buf<di_log::log_printer<222ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<222ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F44900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<222ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 222;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 222;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<231ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFF7F0;
  di_log::logger_buf<di_log::log_printer<231ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<231ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F44EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<231ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 231;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 231;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<235ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFFA10;
  di_log::logger_buf<di_log::log_printer<235ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<235ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F454D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<235ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 235;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 235;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<237ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFFC30;
  di_log::logger_buf<di_log::log_printer<237ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<237ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F45AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<237ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 237;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 237;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<284ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CEFFE50;
  di_log::logger_buf<di_log::log_printer<284ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<284ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F460B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<284ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 284;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 284;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<295ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF00070;
  di_log::logger_buf<di_log::log_printer<295ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<295ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<295ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 295;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 295;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<241ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<241ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF000F8;
  a1[45] = &unk_24CF001F8;
  a1[46] = &unk_24CF00220;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF000F8;
  a1[45] = &unk_24CF00180;
  a1[46] = &unk_24CF001A8;
  return a1;
}

void sub_212F46954(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF00290;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F46A20(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF00290;
  di_log::logger_buf<di_log::log_printer<241ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<241ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<241ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F46E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<241ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 241;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 241;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<387ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF004B0;
  di_log::logger_buf<di_log::log_printer<387ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<387ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F473D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<387ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 387;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 387;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<390ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF006D0;
  di_log::logger_buf<di_log::log_printer<390ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<390ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F479C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<390ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 390;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 390;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_212F47C24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<434ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF008F0;
  di_log::logger_buf<di_log::log_printer<434ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<434ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F48050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<434ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 434;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 434;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<443ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF00B10;
  di_log::logger_buf<di_log::log_printer<443ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<443ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4863C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<443ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 443;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 443;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<460ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF00D30;
  di_log::logger_buf<di_log::log_printer<460ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<460ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F48C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<460ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 460;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 460;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<469ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF00F50;
  di_log::logger_buf<di_log::log_printer<469ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<469ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F49214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<469ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 469;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 469;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<492ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF01170;
  di_log::logger_buf<di_log::log_printer<492ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<492ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F49800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<492ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 492;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 492;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<498ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF01390;
  di_log::logger_buf<di_log::log_printer<498ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<498ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F49DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<498ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 498;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 498;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<505ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF015B0;
  di_log::logger_buf<di_log::log_printer<505ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<505ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4A3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<505ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 505;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 505;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<511ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF017D0;
  di_log::logger_buf<di_log::log_printer<511ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<511ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4A9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<511ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 511;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 511;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<523ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF019F0;
  di_log::logger_buf<di_log::log_printer<523ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<523ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4AFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

int *di_log::log_printer<523ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 523;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 523;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

DiskImageSparseBundle::ContextSparseBundle *DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle::ContextSparseBundle *this, DiskImageSparseBundle *a2)
{
  __int128 v4;
  int v5;
  _QWORD v6[45];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_24CF01A70;
  *((_QWORD *)this + 1) = a2;
  std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::vector((_QWORD *)this + 2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 90) - *((_QWORD *)a2 + 89)) >> 3));
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v4 = "DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle &)";
    *((_QWORD *)&v4 + 1) = 63;
    v5 = 2;
    di_log::logger<di_log::log_printer<37ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Constructing sb context", 23);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x2199A89AC](&v8);
  }
  return this;
}

void sub_212F4B2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  di_log::logger<di_log::log_printer<37ul>>::~logger((uint64_t)va);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *di_log::logger<di_log::log_printer<37ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<37ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF01AD0;
  a1[45] = &unk_24CF01BD0;
  a1[46] = &unk_24CF01BF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF01AD0;
  a1[45] = &unk_24CF01B58;
  a1[46] = &unk_24CF01B80;
  return a1;
}

void sub_212F4B364(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

void DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle(DiskImageSparseBundle::ContextSparseBundle *this)
{
  DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle(this);
  JUMPOUT(0x2199A8A18);
}

{
  __int128 v2;
  int v3;
  void **v4[45];
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_24CF01A70;
  if (DIDebugLogsEnabled())
  {
    *(_QWORD *)&v2 = "DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle()";
    *((_QWORD *)&v2 + 1) = 64;
    v3 = 2;
    di_log::logger<di_log::log_printer<41ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Destructing sb context", 22);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf((uint64_t)v4);
    MEMORY[0x2199A89AC](&v6);
  }
  v4[0] = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](v4);
}

_QWORD *std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_212F4B458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  result = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF01C68;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4B514(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF01C68;
  di_log::logger_buf<di_log::log_printer<37ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<37ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<37ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4B908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<37ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 37;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 37;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

_QWORD *di_log::logger<di_log::log_printer<41ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<41ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF01CF0;
  a1[45] = &unk_24CF01DF0;
  a1[46] = &unk_24CF01E18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF01CF0;
  a1[45] = &unk_24CF01D78;
  a1[46] = &unk_24CF01DA0;
  return a1;
}

void sub_212F4BC54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<41ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF01E88;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4BD20(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF01E88;
  di_log::logger_buf<di_log::log_printer<41ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<41ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<41ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<41ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<41ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<41ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4C114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<41ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 41;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 41;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFDA30;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C388(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFDC50;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C404(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFDE70;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C480(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFE090;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C4FC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFE2B0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C578(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFE4D0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C5F4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFE6F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C670(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFE910;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C6EC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFEB30;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C768(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFED50;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C7E4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFEF70;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4C860(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(void **a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _OWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE *v10;
  unint64_t v11;
  const char *v12;
  char *v13;
  _OWORD *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 59)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = (char *)v11;
  v14 = operator new(16 * v11);
  boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)*a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = 0x7FFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v4 >> 61;
  v6 = 8 * v4;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v3];
  if (v8 < 0x7FFFFFFFFFFFFFFLL)
    v2 = v8;
  if ((unint64_t)v9 <= v2)
    return v2;
  else
    return (unint64_t)v9;
}

void boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>(void **a1, _OWORD *__dst, char *a3, char *__src, uint64_t a5, _OWORD *a6)
{
  char *v12;
  char *v13;
  BOOL v14;
  BOOL v15;
  _OWORD *v16;
  char *v17;
  char *v19;

  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (*a1)
    v14 = __dst == 0;
  else
    v14 = 1;
  v15 = v14 || v12 == __src;
  v16 = __dst;
  if (!v15)
  {
    memmove(__dst, v12, __src - v12);
    v16 = (_OWORD *)((char *)__dst + __src - v12);
  }
  *v16 = *a6;
  if (__src)
  {
    v17 = &v12[16 * (_QWORD)v13];
    if (v17 != __src && v16 != 0)
      memmove(&v16[a5], __src, v17 - __src);
  }
  if (v12 && a1 + 3 != *a1)
    operator delete(*a1);
  v19 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v19;
  a1[2] = a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFF190;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CABC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFF3B0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CB38(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFF5D0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CBB4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFF7F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CC30(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFFA10;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CCAC(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFFC30;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CD28(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CEFFE50;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CDA4(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF00070;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4CE20(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageSparseBundle::void_stackable_identifier(void)::$_0 &&>>(di_utils *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **(uint64_t ***)a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(v3 + 136) = di_utils::random_uuid(a1);
  *(_QWORD *)(v3 + 144) = v4;
  SparseBundleBackend::write_info_plists(*(SparseBundleBackend **)(v2 + 560));
}

void sub_212F4CE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  _DWORD *v61;
  int v62;
  int v63;
  uint64_t v64;

  v64 = v60;
  if (a2 == 1)
  {
    v61 = __cxa_begin_catch(exception_object);
    *(_QWORD *)&a11 = "DiskImageSparseBundle::void_stackable_identifier()::(anonymous class)::operator()() const";
    *((_QWORD *)&a11 + 1) = 81;
    a12 = 16;
    di_log::logger<di_log::log_printer<307ul>>::logger(&a14, &a11);
    operator<<(&a59, (uint64_t)v61);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf((uint64_t)&a14);
    MEMORY[0x2199A89AC](&a60);
    v62 = v61[2];
    if (v62 < 0)
      v63 = v61[2];
    else
      v63 = -v62;
    **(_DWORD **)(v64 + 8) = v63;
    __cxa_end_catch();
    JUMPOUT(0x212F4CE68);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *di_log::logger<di_log::log_printer<307ul>>::logger(_QWORD *a1, __int128 *a2)
{
  std::ios_base *v3;

  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x24BEDB898] + 16;
  di_log::logger_buf<di_log::log_printer<307ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &off_24CF01F10;
  a1[45] = &unk_24CF02010;
  a1[46] = &unk_24CF02038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &off_24CF01F10;
  a1[45] = &unk_24CF01F98;
  a1[46] = &unk_24CF01FC0;
  return a1;
}

void sub_212F4CFDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<307ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF020A8;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4D0A8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CF020A8;
  di_log::logger_buf<di_log::log_printer<307ul>>::_sync(a1);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199A89AC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<307ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(a1);
  MEMORY[0x2199A89AC](a1 + 368);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64))
    std::ostream::write();
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2;

  v2 = a2;
  if (a1[64])
  {
    if (a2 == -1)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
    else
      std::ostream::put();
  }
  return v2;
}

void `non-virtual thunk to'di_log::logger<di_log::log_printer<307ul>>::~logger(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v2;

  v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v2);
  MEMORY[0x2199A89AC](a1 + 8);
  JUMPOUT(0x2199A8A18);
}

void `virtual thunk to'di_log::logger<di_log::log_printer<307ul>>::~logger(_QWORD *a1)
{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v1);
  JUMPOUT(0x2199A89ACLL);
}

{
  uint64_t v1;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(v1);
  MEMORY[0x2199A89AC](v1 + 368);
  JUMPOUT(0x2199A8A18);
}

void di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<307ul>>::~logger_buf(a1);
  JUMPOUT(0x2199A8A18);
}

uint64_t di_log::logger_buf<di_log::log_printer<307ul>>::_sync(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = (_QWORD *)(a1 + 96);
    v3 = a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 40) + 32))(__p, *(_QWORD *)(v3 + 40), 0, 1, 16);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<307ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_212F4D49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<307ul>::log(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  NSObject *DIOSLog;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *result;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 2);
  v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    v7 = *a1;
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68158466;
    v17 = v4;
    v18 = 2080;
    v19 = v7;
    v20 = 2048;
    v21 = 307;
    v22 = 2082;
    v23 = v8;
    v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    v11 = getDIOSLog();
    v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *a1;
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)buf = 68158466;
      v17 = v4;
      v18 = 2080;
      v19 = v13;
      v20 = 2048;
      v21 = 307;
      v22 = 2082;
      v23 = v14;
      _os_log_impl(&dword_212EB0000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  result = __error();
  *result = v5;
  return result;
}

uint64_t boost::icl::cardinality<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = boost::icl::identity_element<unsigned long>::value(void)::_value;
  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v4 = boost::icl::cardinality<boost::icl::discrete_interval<unsigned long long,std::less>>(v3 + 4);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v1 += v4;
      v3 = v6;
    }
    while (v6 != v2);
  }
  return v1;
}

uint64_t boost::icl::cardinality<boost::icl::discrete_interval<unsigned long long,std::less>>(unint64_t *a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v1 == 3)
    {
      v3 = *a1;
      v2 = a1[1];
      if (v2 >= *a1)
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
    else
    {
      v3 = *a1;
      v2 = a1[1];
      if (*a1 < v2)
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
  }
  else
  {
    v3 = *a1;
    v2 = a1[1];
    if (*a1 < v2 && *a1 + 1 < v2)
      return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
  }
  return boost::icl::identity_element<unsigned long>::value(void)::_value;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF004B0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4D7F8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF006D0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4D874(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF008F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4D8F0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF00B10;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4D96C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF00D30;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4D9E8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::set[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::insert[abi:ne180100]<std::__tree_const_iterator<boost::icl::discrete_interval<unsigned long long,std::less>,std::__tree_node<boost::icl::discrete_interval<unsigned long long,std::less>,void *> *,long>>((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_212F4DA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::insert[abi:ne180100]<std::__tree_const_iterator<boost::icl::discrete_interval<unsigned long long,std::less>,std::__tree_node<boost::icl::discrete_interval<unsigned long long,std::less>,void *> *,long>>(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF00F50;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4DBC8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t **boost::icl::interval_base_set<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_add(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v11;
  uint64_t *v13;

  if (!*(_BYTE *)(a2 + 16))
  {
    v11 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 < v11 && *(_QWORD *)a2 + 1 < v11)
      goto LABEL_4;
    return a1 + 1;
  }
  if (*(_BYTE *)(a2 + 16) == 3)
  {
    if (*(_QWORD *)(a2 + 8) >= *(_QWORD *)a2)
      goto LABEL_4;
    return a1 + 1;
  }
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    return a1 + 1;
LABEL_4:
  v4 = (uint64_t *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(a1, a2, a2);
  if ((v5 & 1) != 0)
  {
    v13 = v4;
    boost::icl::segmental::join_left<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, &v13);
    return boost::icl::segmental::join_right<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v13);
  }
  else
  {
    v6 = (_QWORD *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a2);
    v7 = (_QWORD *)*v6;
    if (*v6)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v6[2];
        v9 = *v8 == (_QWORD)v6;
        v6 = v8;
      }
      while (v9);
    }
    return boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::add_over(a1, (unint64_t *)a2, (uint64_t)v8);
  }
}

uint64_t **boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::add_over(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)boost::icl::segmental::join_under<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, a2, a3);
  boost::icl::segmental::join_left<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, &v5);
  return boost::icl::segmental::join_right<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v5);
}

_OWORD *std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::discrete_interval<unsigned long long,std::less> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *boost::icl::segmental::join_left<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v2 = *a2;
  if (*a2 == *a1)
    return *a1;
  v4 = *v2;
  if (*v2)
  {
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    v6 = (uint64_t)*a2;
    do
    {
      v5 = *(_QWORD *)(v6 + 16);
      v7 = *(_QWORD *)v5 == v6;
      v6 = v5;
    }
    while (v7);
  }
  v8 = v2[4];
  if ((v2[6] & 2) == 0)
    ++v8;
  if (v8 == (*(_BYTE *)(v5 + 48) & 1) + *(_QWORD *)(v5 + 40))
  {
    v14 = *((_OWORD *)v2 + 2);
    v15 = v2[6];
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v2);
    operator delete(v2);
    v10 = *(_OWORD *)(v5 + 32);
    v11 = *(_QWORD *)(v5 + 48);
    boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(_BYTE *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **boost::icl::segmental::join_right<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t ***a2)
{
  uint64_t **v3;
  uint64_t **result;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  __int128 v13;
  uint64_t *v14;
  __int128 v15;
  char v16;
  __int128 v17;
  uint64_t *v18;

  v3 = a1 + 1;
  result = *a2;
  if (*a2 == v3)
    return v3;
  v6 = result[1];
  if (v6)
  {
    do
    {
      v7 = (uint64_t **)v6;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    v8 = *a2;
    do
    {
      v7 = (uint64_t **)v8[2];
      v9 = *v7 == (uint64_t *)v8;
      v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0)
      v10 = (uint64_t *)((char *)v10 + 1);
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      v17 = *((_OWORD *)v7 + 2);
      v18 = v7[6];
      std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, (uint64_t *)v7);
      operator delete(v7);
      v11 = *a2;
      v13 = *((_OWORD *)*a2 + 2);
      v14 = v11[6];
      boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((_BYTE *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

unint64_t *boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t *v8;
  char v9;
  unint64_t v10;
  char v11;
  int v12;
  int v13;
  unint64_t v15;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v3 == 3)
    {
      v5 = (uint64_t *)*a2;
      v4 = a2[1];
      if (v4 >= *a2)
        goto LABEL_4;
LABEL_24:
      *(_OWORD *)a3 = *(_OWORD *)result;
      v15 = result[2];
LABEL_33:
      *(_QWORD *)(a3 + 16) = v15;
      return result;
    }
    v5 = (uint64_t *)*a2;
    v4 = a2[1];
    if (*a2 >= v4)
      goto LABEL_24;
  }
  else
  {
    v5 = (uint64_t *)*a2;
    v4 = a2[1];
    if (*a2 >= v4 || *a2 + 1 >= v4)
      goto LABEL_24;
  }
LABEL_4:
  v6 = *((unsigned __int8 *)result + 16);
  if (!*((_BYTE *)result + 16))
  {
    v8 = (uint64_t *)*result;
    v7 = result[1];
    if (*result < v7 && *result + 1 < v7)
      goto LABEL_7;
    goto LABEL_32;
  }
  if (v6 != 3)
  {
    v8 = (uint64_t *)*result;
    v7 = result[1];
    if (*result < v7)
      goto LABEL_7;
    goto LABEL_32;
  }
  v8 = (uint64_t *)*result;
  v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    v15 = a2[2];
    goto LABEL_33;
  }
LABEL_7:
  v9 = v6 & 2;
  if ((v6 & 2) != 0)
    v10 = (unint64_t)v8;
  else
    v10 = (unint64_t)v8 + 1;
  v11 = v3 & 2;
  if ((v3 & 2) != 0)
    result = (unint64_t *)v5;
  else
    result = (unint64_t *)((char *)v5 + 1);
  v12 = v6 & 1;
  v13 = v3 & 1;
  if (v10 >= (unint64_t)result)
    v9 = v11;
  else
    v5 = v8;
  if (v7 + v12 - 1 >= v4 + v13 - 1)
  {
    v4 = v7;
    LOBYTE(v13) = v12;
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v13 | v9;
  return result;
}

uint64_t std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v3 = v4;
  if (v4)
  {
    v5 = (*(_BYTE *)(a2 + 16) & 1) + *(_QWORD *)(a2 + 8) - 1;
    do
    {
      v6 = *(_QWORD *)(v3 + 32);
      if ((*(_BYTE *)(v3 + 48) & 2) == 0)
        ++v6;
      v7 = v5 >= v6;
      if (v5 >= v6)
        v8 = (uint64_t *)(v3 + 8);
      else
        v8 = (uint64_t *)v3;
      if (!v7)
        result = v3;
      v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t boost::icl::segmental::join_under<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v16;
  uint64_t v17;
  unint64_t v18[3];
  __int128 v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23[3];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v6 = std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)a2);
  v7 = v6;
  v8 = *(uint64_t **)(v6 + 8);
  if (v8)
  {
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    v10 = v6;
    do
    {
      v9 = *(uint64_t **)(v10 + 16);
      v11 = *v9 == v10;
      v10 = (uint64_t)v9;
    }
    while (!v11);
  }
  v12 = *(uint64_t **)(a3 + 8);
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v14 = (uint64_t *)a3;
    do
    {
      v13 = (uint64_t *)v14[2];
      v11 = *v13 == (_QWORD)v14;
      v14 = v13;
    }
    while (!v11);
  }
  v24 = *(_OWORD *)(v6 + 32);
  v25 = *(_QWORD *)(v6 + 48);
  boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v24, (uint64_t)a2, (uint64_t)&v26);
  v21 = *(_OWORD *)(a3 + 32);
  v22 = *(_QWORD *)(a3 + 48);
  boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v21, (uint64_t)a2, (uint64_t)v23);
  std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::erase(a1, v9, v13);
  v16 = v26;
  v17 = v27;
  boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v16, a2, (uint64_t)v18);
  boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>(v18, v23, (uint64_t)&v19);
  *(_OWORD *)(v7 + 32) = v19;
  *(_BYTE *)(v7 + 48) = v20;
  return v7;
}

unint64_t *boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;

  v3 = *((unsigned __int8 *)result + 16);
  if (*((_BYTE *)result + 16))
  {
    if (v3 == 3)
    {
      v4 = *result;
      v5 = result[1];
      if (v5 < *result)
        goto LABEL_27;
    }
    else
    {
      v4 = *result;
      v5 = result[1];
      if (*result >= v5)
        goto LABEL_27;
    }
  }
  else
  {
    v4 = *result;
    v5 = result[1];
    if (*result >= v5 || *result + 1 >= v5)
      goto LABEL_27;
  }
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    v8 = *(_QWORD *)a2;
    v9 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v9 || *(_QWORD *)a2 + 1 >= v9)
      goto LABEL_27;
    goto LABEL_23;
  }
  if (v7 != 3)
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8))
      goto LABEL_23;
LABEL_27:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_QWORD *)(a3 + 16) = result[2];
    return result;
  }
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)(a2 + 8) < *(_QWORD *)a2)
    goto LABEL_27;
LABEL_23:
  v11 = (v3 & 1) + v5 - 1;
  if ((v7 & 2) != 0)
    v12 = v8;
  else
    v12 = v8 + 1;
  if (v11 < v12)
    goto LABEL_27;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v3 & 2 | ((~v7 & 2) != 0);
  return result;
}

uint64_t boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v3 == 3)
    {
      v4 = *(_QWORD *)(a2 + 8);
      if (v4 < *(_QWORD *)a2)
        goto LABEL_26;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 >= v4)
        goto LABEL_26;
    }
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 >= v4 || *(_QWORD *)a2 + 1 >= v4)
      goto LABEL_26;
  }
  v6 = *(unsigned __int8 *)(result + 16);
  if (!*(_BYTE *)(result + 16))
  {
    v8 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)result >= v7 || *(_QWORD *)result + 1 >= v7)
      goto LABEL_26;
    goto LABEL_23;
  }
  if (v6 != 3)
  {
    v8 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)result < v7)
      goto LABEL_23;
LABEL_26:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 16);
    return result;
  }
  v8 = *(_QWORD *)result;
  v7 = *(_QWORD *)(result + 8);
  if (v7 < *(_QWORD *)result)
    goto LABEL_26;
LABEL_23:
  if ((v6 & 2) == 0)
    ++v8;
  if ((v3 & 1) + v4 - 1 < v8)
    goto LABEL_26;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v6 & 1 | (2 * ((v3 & 1) == 0));
  return result;
}

uint64_t std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v3 = v4;
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0)
      ++v5;
    do
    {
      v6 = (*(_BYTE *)(v3 + 48) & 1) + *(_QWORD *)(v3 + 40) - 1;
      v7 = v6 >= v5;
      if (v6 >= v5)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        result = v3;
      v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF01170;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4E4C0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF01390;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4E53C(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF015B0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4E5B8(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF017D0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4E634(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  char v4;
  __int128 v5;

  *(_QWORD *)std::streambuf::basic_streambuf() = &off_24CF019F0;
  if (*((_DWORD *)a2 + 4) == 2)
    v4 = DIDebugLogsEnabled();
  else
    v4 = 1;
  *(_BYTE *)(a1 + 64) = v4;
  v5 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_212F4E6B0(_Unwind_Exception *a1)
{
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

const void **details::copy_user_entry_to_resource(const __CFString *a1, void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID;
  unint64_t v7;
  int OSType;
  CFTypeID v9;
  DiskImagesRuntimeException *v11;
  const char *v12;
  void *v13;
  cf::CFUtilException *exception;
  CFTypeID v15;
  void *v16;
  __int16 v17;
  void *__p[2];
  char v19;
  char v20;
  void *v21[2];
  char v22;
  void *v23;

  TypeID = CFStringGetTypeID();
  if (a1)
  {
    v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      v15 = CFGetTypeID(a1);
LABEL_19:
      v16 = (void *)cf::CFUtilException::CFUtilException(exception, v15, v7);
    }
  }
  OSType = CFStringGetOSType(a1);
  if (OSType == 1651272568 || OSType == 1970628964 || OSType == 1886155636)
  {
    v11 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v12 = "User data contains reserved key(s)";
    goto LABEL_16;
  }
  v9 = CFDataGetTypeID();
  if (!a2)
  {
    v11 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    v12 = "Invalid user data content";
LABEL_16:
    DiskImagesRuntimeException::DiskImagesRuntimeException(v11, v12, 0x16u);
  }
  v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    v15 = CFGetTypeID(a2);
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  LOBYTE(__p[0]) = 0;
  v20 = 0;
  udif::details::block_attributes::block_attributes(&v17, 80);
  udif::details::create_data_wrap_dict((uint64_t)v21, (uint64_t)__p, 0, a2, (CFDictionaryRef *)&v23);
  if (v20 && v19 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  __p[0] = v23;
  v21[0] = CFArrayCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const void **)__p, 1, MEMORY[0x24BDBD690]);
  CFDictionarySetValue(a3, a1, v21[0]);
  CFAutoRelease<__CFArray const*>::~CFAutoRelease((const void **)v21);
  return CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&v23);
}

void sub_212F4E8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

BOOL details::udif_verify::verify_checksums(details::udif_verify *this)
{
  int v1;
  __int128 *v2;
  uint64_t v3;
  int v4;
  __int128 *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _BOOL8 v14;
  __int128 v16;
  char v17;
  void *__p[2];
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v1 = *((_DWORD *)this + 71);
  if (v1)
    v2 = (__int128 *)*((_QWORD *)this + 9);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_DWORD *)this + 70);
  if (v4)
  {
    v16 = *((_OWORD *)this + 6);
    LOBYTE(v4) = 1;
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  v5 = (__int128 *)*((_QWORD *)this + 10);
  v6 = v1 == 0;
  v17 = v4;
  v7 = *(_QWORD *)(v3 + 72);
  v22 = *(_QWORD *)(v7 + 352);
  v27 = *(_OWORD *)(v7 + 424);
  v28 = *(_OWORD *)(v7 + 440);
  v29 = *(_OWORD *)(v7 + 456);
  v30 = *(_OWORD *)(v7 + 472);
  v23 = *(_OWORD *)(v7 + 360);
  v24 = *(_OWORD *)(v7 + 376);
  v25 = *(_OWORD *)(v7 + 392);
  v26 = *(_OWORD *)(v7 + 408);
  *(_QWORD *)&v21 = udif::get_csum_any((unsigned int *)&v22);
  *((_QWORD *)&v21 + 1) = v8;
  if (v6)
  {
    if (!v17)
      return 1;
  }
  else
  {
    v9 = *(_QWORD **)(v3 + 32);
    if (v9 == (_QWORD *)(v3 + 40) || v2 == v5)
      goto LABEL_23;
    v10 = 1;
    do
    {
      v20 = *v2;
      if (v10)
        v10 = udif::details::checksum::operator==((_DWORD *)v9 + 15, (uint64_t)&v20);
      std::string::basic_string[abi:ne180100]<0>(__p, "BLX");
      udif::details::UDIF_base::print_checksum_verification_status(v3, (uint64_t)__p, (uint64_t)&v20, (int *)v9 + 15);
      if (v19 < 0)
        operator delete(__p[0]);
      v21 = *(_OWORD *)udif::master_checksum_add<checksum::Any<locks::None,checksum::None,checksum::CRC32>>((uint64_t)&v21, (uint64_t)&v20);
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      if (v12 == (_QWORD *)(v3 + 40))
        break;
      v2 = (__int128 *)((char *)v2 + 184);
      v9 = v12;
    }
    while (v2 != v5);
    if (v10)
LABEL_23:
      v10 = udif::details::checksum::operator==(&v22, (uint64_t)&v21);
    std::string::basic_string[abi:ne180100]<0>(__p, "Master checksum");
    udif::details::UDIF_base::print_checksum_verification_status(v3, (uint64_t)__p, (uint64_t)&v21, (int *)&v22);
    if (v19 < 0)
      operator delete(__p[0]);
    if (!v17)
      return v10;
    if (!v10)
    {
      v14 = 0;
      goto LABEL_31;
    }
  }
  v14 = udif::details::checksum::operator==((_DWORD *)(*(_QWORD *)(v3 + 72) + 80), (uint64_t)&v16);
LABEL_31:
  std::string::basic_string[abi:ne180100]<0>(__p, "Data Fork");
  udif::details::UDIF_base::print_checksum_verification_status(v3, (uint64_t)__p, (uint64_t)&v16, (int *)(*(_QWORD *)(v3 + 72) + 80));
  if (v19 < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_212F4EBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t details::udif_verify::is_csum_data_none_type(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 **v5;

  v4 = 0;
  v3 = &v4;
  v1 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v3;
  ((void (*)(unsigned __int8 ***, uint64_t))off_24CF022C0[v1])(&v5, a1 + 4);
  return v4;
}

details::udif_verify *details::udif_verify::udif_verify(details::udif_verify *this, DiskImageUDIF *a2, const udif::details::UDIF_base *a3)
{
  uint64_t runs_iterator;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  char v12;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = (*(uint64_t (**)(DiskImageUDIF *))(*(_QWORD *)a2 + 24))(a2);
  runs_iterator = udif::details::UDIF_base::create_runs_iterator(*((udif::details::UDIF_base **)this + 1));
  *((_QWORD *)this + 7) = v6;
  *((_QWORD *)this + 3) = runs_iterator;
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = runs_iterator;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v7 = *((_QWORD *)a3 + 9);
  v8 = *((_QWORD *)this + 2) * *((_QWORD *)a3 + 10);
  v11[0] = 0;
  v11[1] = v8;
  v12 = 2;
  details::udif_verify::create_csum_data<boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>((__int128 *)((char *)this + 40), (__int128 *)((char *)this + 56), (uint64_t)v11, (unsigned int *)(v7 + 80), (uint64_t)this + 96);
  if (details::udif_verify::is_csum_data_none_type((uint64_t)this + 96))
    v9 = 4;
  else
    v9 = 0;
  *((_DWORD *)this + 71) = v9;
  *((_DWORD *)this + 70) = details::udif_verify::is_csum_data_none_type((uint64_t)this + 96) ^ 1;
  return this;
}

void sub_212F4ED04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void details::udif_verify::create_csum_data<boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uLong csum_any;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[68];
  _QWORD **v13;
  _QWORD *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  _BYTE v21[68];
  _QWORD **v22;
  _QWORD *v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  csum_any = udif::get_csum_any(a4);
  *(_QWORD *)v12 = 850045863;
  v14[0] = 0;
  v14[1] = 0;
  memset(&v12[8], 0, 60);
  v13 = v14;
  v15 = *a1;
  v16 = v15;
  v17 = *a2;
  v19 = 0;
  v11 = v15;
  if ((_QWORD)v15 != (_QWORD)v17)
  {
    v11 = *(_QWORD *)(v15 + 32);
    if ((*(_BYTE *)(v15 + 48) & 2) == 0)
      ++v11;
    v18 = v11;
  }
  v20[0] = csum_any;
  v20[1] = v10;
  memset(&v21[8], 0, 60);
  v23[0] = 0;
  v23[1] = 0;
  *(_QWORD *)v21 = 850045863;
  v22 = v23;
  v24 = *a1;
  v25 = v24;
  v26 = *a2;
  v27 = v11;
  v28 = 0;
  v29 = 0;
  ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::ChecksumScheduler(a5, (uint64_t)v20, a3);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)&v22, v23[0]);
  std::mutex::~mutex((std::mutex *)v21);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)&v13, v14[0]);
  std::mutex::~mutex((std::mutex *)v12);
}

void sub_212F4EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41)
{
  uint64_t v41;
  std::mutex *v42;
  uint64_t v43;

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(v43, a41);
  std::mutex::~mutex(v42);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(v41, a19);
  std::mutex::~mutex((std::mutex *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::~ChecksumScheduler(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 16);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  std::mutex::~mutex(v2);
  return a1;
}

details::udif_verify *details::udif_verify::udif_verify(details::udif_verify *this, DiskImageUDIF *a2, const udif::details::UDIF_base *a3, char a4)
{
  int v6;

  *((_DWORD *)details::udif_verify::udif_verify(this, a2, a3) + 71) = 4 * (a4 & 1);
  if ((a4 & 2) != 0)
    v6 = details::udif_verify::is_csum_data_none_type((uint64_t)this + 96) ^ 1;
  else
    v6 = 0;
  *((_DWORD *)this + 70) = v6;
  return this;
}

void sub_212F4EF5C(_Unwind_Exception *a1)
{
  details::udif_verify *v1;

  details::udif_verify::~udif_verify(v1);
  _Unwind_Resume(a1);
}

void details::udif_verify::~udif_verify(details::udif_verify *this)
{
  std::mutex *v2;
  void **v3;

  v2 = (std::mutex *)((char *)this + 112);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  std::mutex::~mutex(v2);
  v3 = (void **)((char *)this + 72);
  std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t details::udif_verify::populate_csum_data(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t *v15;
  _BYTE v16[16];
  std::mutex v17;
  _QWORD *v18[14];

  v18[12] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)(a2 + 1);
  v3 = (unsigned int *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  LODWORD(v5) = 0;
  v6 = (__int128 *)(a1 + 40);
  v7 = (__int128 *)(a1 + 56);
  v15 = (uint64_t *)(a1 + 72);
  do
  {
    details::udif_verify::create_csum_data<boost::iterators::transform_iterator<interval_map2set_it::$_0,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>,boost::use_default,boost::use_default>>(v6, v7, (uint64_t)(v3 + 8), v3 + 15, (uint64_t)v16);
    v8 = *(_QWORD *)(a1 + 80);
    if (v8 >= *(_QWORD *)(a1 + 88))
    {
      v9 = std::vector<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>::__emplace_back_slow_path<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>>(v15, (uint64_t)v16);
    }
    else
    {
      std::construct_at[abi:ne180100]<ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>*>(*(_QWORD *)(a1 + 80), (uint64_t)v16);
      v9 = v8 + 184;
      *(_QWORD *)(a1 + 80) = v8 + 184;
    }
    *(_QWORD *)(a1 + 80) = v9;
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::destroy((uint64_t)v18, v18[1]);
    std::mutex::~mutex(&v17);
    v10 = v3[15];
    v11 = v10 == 10 || v10 == 0;
    if (v11)
      v5 = v5;
    else
      v5 = 2;
    v12 = (unsigned int *)*((_QWORD *)v3 + 1);
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = *(unsigned int **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (unsigned int *)*((_QWORD *)v3 + 2);
        v11 = *(_QWORD *)v13 == (_QWORD)v3;
        v3 = v13;
      }
      while (!v11);
    }
    v3 = v13;
  }
  while (v13 != v2);
  return v5;
}

